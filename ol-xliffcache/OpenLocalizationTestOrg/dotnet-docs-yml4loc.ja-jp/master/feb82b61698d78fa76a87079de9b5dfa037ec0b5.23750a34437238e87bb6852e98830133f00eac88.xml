{"nodes":[{"content":"Defines the underlying structure of all code access permissions.","nodes":[{"pos":[0,64],"content":"Defines the underlying structure of all code access permissions.","nodes":[{"content":"Defines the underlying structure of all code access permissions.","pos":[0,64]}]}],"pos":[1831,1896],"yaml":true},{"content":"Code access permissions use a stack walk to ensure that all callers of the code have been granted a permission. If a permission object is `null`, it is handled the same as a permission object with the state <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>.  \n  \n The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.  \n  \n Inheritors of the <xref:System.Security.CodeAccessPermission> class must be granted full trust to function correctly as permissions extending the security infrastructure. To determine that the inheritors are fully trusted, <xref:System.Security.CodeAccessPermission> issues an <xref:System.Security.Permissions.SecurityAction.InheritanceDemand> for <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence> = `true` and <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy> = `true`.","nodes":[{"pos":[0,283],"content":"Code access permissions use a stack walk to ensure that all callers of the code have been granted a permission. If a permission object is `null`, it is handled the same as a permission object with the state <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>.","nodes":[{"content":"Code access permissions use a stack walk to ensure that all callers of the code have been granted a permission.","pos":[0,111]},{"content":"If a permission object is <ph id=\"ph1\">`null`</ph>, it is handled the same as a permission object with the state <ph id=\"ph2\">&lt;xref:System.Security.Permissions.PermissionState?displayProperty=fullName&gt;</ph>.","pos":[112,283],"source":" If a permission object is `null`, it is handled the same as a permission object with the state <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>."}]},{"pos":[290,425],"content":"The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","nodes":[{"content":"The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","pos":[0,135]}]},{"pos":[432,949],"content":"Inheritors of the <xref:System.Security.CodeAccessPermission> class must be granted full trust to function correctly as permissions extending the security infrastructure. To determine that the inheritors are fully trusted, <xref:System.Security.CodeAccessPermission> issues an <xref:System.Security.Permissions.SecurityAction.InheritanceDemand> for <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence> = `true` and <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy> = `true`.","nodes":[{"content":"Inheritors of the <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> class must be granted full trust to function correctly as permissions extending the security infrastructure.","pos":[0,170],"source":"Inheritors of the <xref:System.Security.CodeAccessPermission> class must be granted full trust to function correctly as permissions extending the security infrastructure."},{"content":"To determine that the inheritors are fully trusted, <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> issues an <ph id=\"ph2\">&lt;xref:System.Security.Permissions.SecurityAction.InheritanceDemand&gt;</ph> for <ph id=\"ph3\">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence&gt;</ph><ph id=\"ph4\"> = </ph><ph id=\"ph5\">`true`</ph> and <ph id=\"ph6\">&lt;xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy&gt;</ph><ph id=\"ph7\"> = </ph><ph id=\"ph8\">`true`</ph>.","pos":[171,517],"source":" To determine that the inheritors are fully trusted, <xref:System.Security.CodeAccessPermission> issues an <xref:System.Security.Permissions.SecurityAction.InheritanceDemand> for <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence> = `true` and <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy> = `true`."}]}],"pos":[1907,2863],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.CodeAccessPermission\"></xref> class.","nodes":[{"pos":[0,98],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.CodeAccessPermission\"></xref> class."}],"pos":[7079,7178],"yaml":true},{"content":"This constructor is called to initialize state in the type whenever an instance of the derived class is created. Although you can explicitly call this constructor in the constructor declaration of the derived class constructor, this is not usually necessary; most compilers will automatically generate the call for you.","nodes":[{"pos":[0,319],"content":"This constructor is called to initialize state in the type whenever an instance of the derived class is created. Although you can explicitly call this constructor in the constructor declaration of the derived class constructor, this is not usually necessary; most compilers will automatically generate the call for you.","nodes":[{"content":"This constructor is called to initialize state in the type whenever an instance of the derived class is created. Although you can explicitly call this constructor in the constructor declaration of the derived class constructor, this is not usually necessary; most compilers will automatically generate the call for you.","pos":[0,319],"nodes":[{"content":"This constructor is called to initialize state in the type whenever an instance of the derived class is created.","pos":[0,112]},{"content":"Although you can explicitly call this constructor in the constructor declaration of the derived class constructor, this is not usually necessary; most compilers will automatically generate the call for you.","pos":[113,319]}]}]}],"pos":[7189,7509],"yaml":true,"extradata":"MT"},{"content":"Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource. Using <xref href=\"System.Security.CodeAccessPermission.Assert\"></xref> can create security issues.","nodes":[{"pos":[0,320],"content":"Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource. Using <xref href=\"System.Security.CodeAccessPermission.Assert\"></xref> can create security issues.","nodes":[{"content":"Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource.","pos":[0,221]},{"content":"Using <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission.Assert\"&gt;&lt;/xref&gt;</ph> can create security issues.","pos":[222,320],"source":" Using <xref href=\"System.Security.CodeAccessPermission.Assert\"></xref> can create security issues."}]}],"pos":[8758,9079],"yaml":true},{"content":"The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. Calling <xref:System.Security.CodeAccessPermission.Assert%2A> prevents a stack walk originating lower in the call stack from proceeding up the call stack beyond the code that calls this method. Therefore, even if callers higher on the call stack do not have the requisite permissions to access a resource, they can still access it through the code that calls this method on the necessary permission. An assertion is effective only if the code that calls <xref:System.Security.CodeAccessPermission.Assert%2A> passes the security check for the permission that it is asserting.  \n  \n The call to <xref:System.Security.CodeAccessPermission.Assert%2A> is effective until the calling code returns to its caller. Only one <xref:System.Security.CodeAccessPermission.Assert%2A> can be active on a frame. An attempt to call <xref:System.Security.CodeAccessPermission.Assert%2A> when an active <xref:System.Security.CodeAccessPermission.Assert%2A> exists on the frame results in a <xref:System.Security.SecurityException>. Call <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Assert%2A>.  \n  \n <xref:System.Security.CodeAccessPermission.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed. However, if code lower on the call stack calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.Assert%2A>. This happens because the code that called <xref:System.Security.CodeAccessPermission.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.CodeAccessPermission.Assert%2A> it.  \n  \n> [!CAUTION]\n>  Because calling <xref:System.Security.CodeAccessPermission.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security issues if used incorrectly or inappropriately. Therefore, it should be used with great caution.","nodes":[{"pos":[0,710],"content":"The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. Calling <xref:System.Security.CodeAccessPermission.Assert%2A> prevents a stack walk originating lower in the call stack from proceeding up the call stack beyond the code that calls this method. Therefore, even if callers higher on the call stack do not have the requisite permissions to access a resource, they can still access it through the code that calls this method on the necessary permission. An assertion is effective only if the code that calls <xref:System.Security.CodeAccessPermission.Assert%2A> passes the security check for the permission that it is asserting.","nodes":[{"content":"The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. Calling <xref:System.Security.CodeAccessPermission.Assert%2A> prevents a stack walk originating lower in the call stack from proceeding up the call stack beyond the code that calls this method. Therefore, even if callers higher on the call stack do not have the requisite permissions to access a resource, they can still access it through the code that calls this method on the necessary permission. An assertion is effective only if the code that calls <xref:System.Security.CodeAccessPermission.Assert%2A> passes the security check for the permission that it is asserting.","pos":[0,710],"nodes":[{"content":"The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","pos":[0,135]},{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> prevents a stack walk originating lower in the call stack from proceeding up the call stack beyond the code that calls this method.","pos":[136,329],"source":" Calling <xref:System.Security.CodeAccessPermission.Assert%2A> prevents a stack walk originating lower in the call stack from proceeding up the call stack beyond the code that calls this method."},{"content":"Therefore, even if callers higher on the call stack do not have the requisite permissions to access a resource, they can still access it through the code that calls this method on the necessary permission.","pos":[330,535]},{"content":"An assertion is effective only if the code that calls <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> passes the security check for the permission that it is asserting.","pos":[536,710],"source":" An assertion is effective only if the code that calls <xref:System.Security.CodeAccessPermission.Assert%2A> passes the security check for the permission that it is asserting."}]}]},{"pos":[717,1347],"content":"The call to <xref:System.Security.CodeAccessPermission.Assert%2A> is effective until the calling code returns to its caller. Only one <xref:System.Security.CodeAccessPermission.Assert%2A> can be active on a frame. An attempt to call <xref:System.Security.CodeAccessPermission.Assert%2A> when an active <xref:System.Security.CodeAccessPermission.Assert%2A> exists on the frame results in a <xref:System.Security.SecurityException>. Call <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Assert%2A>.","nodes":[{"content":"The call to <xref:System.Security.CodeAccessPermission.Assert%2A> is effective until the calling code returns to its caller. Only one <xref:System.Security.CodeAccessPermission.Assert%2A> can be active on a frame. An attempt to call <xref:System.Security.CodeAccessPermission.Assert%2A> when an active <xref:System.Security.CodeAccessPermission.Assert%2A> exists on the frame results in a <xref:System.Security.SecurityException>. Call <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Assert%2A>.","pos":[0,630],"nodes":[{"content":"The call to <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> is effective until the calling code returns to its caller.","pos":[0,124],"source":"The call to <xref:System.Security.CodeAccessPermission.Assert%2A> is effective until the calling code returns to its caller."},{"content":"Only one <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> can be active on a frame.","pos":[125,213],"source":" Only one <xref:System.Security.CodeAccessPermission.Assert%2A> can be active on a frame."},{"content":"An attempt to call <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> when an active <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> exists on the frame results in a <ph id=\"ph3\">&lt;xref:System.Security.SecurityException&gt;</ph>.","pos":[214,430],"source":" An attempt to call <xref:System.Security.CodeAccessPermission.Assert%2A> when an active <xref:System.Security.CodeAccessPermission.Assert%2A> exists on the frame results in a <xref:System.Security.SecurityException>."},{"content":"Call <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.RevertAssert%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph> to remove an active <ph id=\"ph3\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>.","pos":[431,630],"source":" Call <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Assert%2A>."}]}]},{"pos":[1354,2003],"content":"<xref:System.Security.CodeAccessPermission.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed. However, if code lower on the call stack calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.Assert%2A>. This happens because the code that called <xref:System.Security.CodeAccessPermission.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.CodeAccessPermission.Assert%2A> it.","nodes":[{"content":"<xref:System.Security.CodeAccessPermission.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed. However, if code lower on the call stack calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.Assert%2A>. This happens because the code that called <xref:System.Security.CodeAccessPermission.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.CodeAccessPermission.Assert%2A> it.","pos":[0,649],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission will not succeed.","pos":[0,148],"source":"<xref:System.Security.CodeAccessPermission.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed."},{"content":"However, if code lower on the call stack calls <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> for that permission, a <ph id=\"ph2\">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the stack walk reaches the code that tried to call <ph id=\"ph3\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>.","pos":[149,434],"source":" However, if code lower on the call stack calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.Assert%2A>."},{"content":"This happens because the code that called <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> has not been granted the permission, even though it tried to <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> it.","pos":[435,649],"source":" This happens because the code that called <xref:System.Security.CodeAccessPermission.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.CodeAccessPermission.Assert%2A> it."}]}]},{"pos":[2011,2331],"content":"[!CAUTION]\n Because calling <xref:System.Security.CodeAccessPermission.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security issues if used incorrectly or inappropriately. Therefore, it should be used with great caution.","leadings":["","> "],"nodes":[{"content":" Because calling <xref:System.Security.CodeAccessPermission.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security issues if used incorrectly or inappropriately. Therefore, it should be used with great caution.","pos":[11,318],"nodes":[{"content":"Because calling <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security issues if used incorrectly or inappropriately.","pos":[1,258],"source":" Because calling <xref:System.Security.CodeAccessPermission.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security issues if used incorrectly or inappropriately."},{"content":"Therefore, it should be used with great caution.","pos":[259,307]}]}]}],"pos":[9090,11431],"yaml":true,"extradata":"MT"},{"content":"The calling code does not have <xref href=\"System.Security.Permissions.SecurityPermissionFlag.Assertion\"></xref>.  \n  \n -or-  \n  \n There is already an active <xref href=\"System.Security.CodeAccessPermission.Assert\"></xref> for the current frame.","nodes":[{"pos":[0,113],"content":"The calling code does not have <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.SecurityPermissionFlag.Assertion\"&gt;&lt;/xref&gt;</ph>.","source":"The calling code does not have <xref href=\"System.Security.Permissions.SecurityPermissionFlag.Assertion\"></xref>."},{"pos":[120,124],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[131,245],"content":"There is already an active <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission.Assert\"&gt;&lt;/xref&gt;</ph> for the current frame.","source":"There is already an active <xref href=\"System.Security.CodeAccessPermission.Assert\"></xref> for the current frame."}],"pos":[11679,11935],"yaml":true},{"content":"When implemented by a derived class, creates and returns an identical copy of the current permission object.","nodes":[{"pos":[0,108],"content":"When implemented by a derived class, creates and returns an identical copy of the current permission object.","nodes":[{"content":"When implemented by a derived class, creates and returns an identical copy of the current permission object.","pos":[0,108]}]}],"pos":[13022,13131],"yaml":true},{"content":"A copy of a permission object represents the same access to resources as the original permission object.","nodes":[{"pos":[0,104],"content":"A copy of a permission object represents the same access to resources as the original permission object.","nodes":[{"content":"A copy of a permission object represents the same access to resources as the original permission object.","pos":[0,104]}]}],"pos":[13142,13247],"yaml":true,"extradata":"MT"},{"content":"A copy of the current permission object.","nodes":[{"pos":[0,40],"content":"A copy of the current permission object.","nodes":[{"content":"A copy of the current permission object.","pos":[0,40]}]}],"pos":[14214,14255],"yaml":true},{"content":"Forces a <xref href=\"System.Security.SecurityException\"></xref> at run time if all callers higher in the call stack have not been granted the permission specified by the current instance.","nodes":[{"pos":[0,187],"content":"Forces a <ph id=\"ph1\">&lt;xref href=\"System.Security.SecurityException\"&gt;&lt;/xref&gt;</ph> at run time if all callers higher in the call stack have not been granted the permission specified by the current instance.","source":"Forces a <xref href=\"System.Security.SecurityException\"></xref> at run time if all callers higher in the call stack have not been granted the permission specified by the current instance."}],"pos":[15426,15614],"yaml":true},{"content":"This method is typically used by secure libraries to ensure that callers have permission to access a resource. For example, a file class in a secure class library calls <xref:System.Security.CodeAccessPermission.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.  \n  \n The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. <xref:System.Security.CodeAccessPermission.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.","nodes":[{"pos":[0,352],"content":"This method is typically used by secure libraries to ensure that callers have permission to access a resource. For example, a file class in a secure class library calls <xref:System.Security.CodeAccessPermission.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.","nodes":[{"content":"This method is typically used by secure libraries to ensure that callers have permission to access a resource. For example, a file class in a secure class library calls <xref:System.Security.CodeAccessPermission.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.","pos":[0,352],"nodes":[{"content":"This method is typically used by secure libraries to ensure that callers have permission to access a resource.","pos":[0,110]},{"content":"For example, a file class in a secure class library calls <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> for the necessary <ph id=\"ph2\">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph> before performing a file operation requested by the caller.","pos":[111,352],"source":" For example, a file class in a secure class library calls <xref:System.Security.CodeAccessPermission.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller."}]}]},{"pos":[359,772],"content":"The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. <xref:System.Security.CodeAccessPermission.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.","nodes":[{"content":"The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. <xref:System.Security.CodeAccessPermission.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.","pos":[0,413],"nodes":[{"content":"The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.","pos":[0,151]},{"content":"The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","pos":[152,287]},{"content":"<ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> succeeds only if no <ph id=\"ph2\">&lt;xref:System.Security.SecurityException&gt;</ph> is raised.","pos":[288,413],"source":" <xref:System.Security.CodeAccessPermission.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised."}]}]}],"pos":[15625,16402],"yaml":true,"extradata":"MT"},{"content":"A caller higher in the call stack does not have the permission specified by the current instance.  \n  \n -or-  \n  \n A caller higher in the call stack has called <xref href=\"System.Security.CodeAccessPermission.Deny\"></xref> on the current permission object.","nodes":[{"pos":[0,97],"content":"A caller higher in the call stack does not have the permission specified by the current instance.","nodes":[{"content":"A caller higher in the call stack does not have the permission specified by the current instance.","pos":[0,97]}]},{"pos":[104,108],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[115,256],"content":"A caller higher in the call stack has called <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission.Deny\"&gt;&lt;/xref&gt;</ph> on the current permission object.","source":"A caller higher in the call stack has called <xref href=\"System.Security.CodeAccessPermission.Deny\"></xref> on the current permission object."}],"pos":[16650,16915],"yaml":true},{"content":"Prevents callers higher in the call stack from using the code that calls this method to access the resource specified by the current instance.","nodes":[{"pos":[0,142],"content":"Prevents callers higher in the call stack from using the code that calls this method to access the resource specified by the current instance.","nodes":[{"content":"Prevents callers higher in the call stack from using the code that calls this method to access the resource specified by the current instance.","pos":[0,142]}]}],"pos":[18002,18145],"yaml":true},{"content":"> [!IMPORTANT]\n>  The <xref:System.Security.CodeAccessPermission.Deny%2A> method should be used only to protect resources from accidental access by fully trusted code. It should not be used to protect resources from intentional misuse by untrusted code. For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.Deny%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.Deny%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>. The called method is always higher in the stack. Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack. Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method. In that case, the <xref:System.Security.CodeAccessPermission.Deny%2A> placed on the stack by method `A` (the calling method) is never discovered.  \n  \n This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.  \n  \n <xref:System.Security.CodeAccessPermission.Deny%2A> can limit the liability of the programmer or help prevent accidental security issues because it helps prevent the method that calls <xref:System.Security.CodeAccessPermission.Deny%2A> from being used to access the resource protected by the denied permission. If a method calls <xref:System.Security.CodeAccessPermission.Deny%2A> on a permission, and if a <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.CodeAccessPermission.Deny%2A>.  \n  \n The call to <xref:System.Security.CodeAccessPermission.Deny%2A> is effective until the calling code returns to its caller. Only one <xref:System.Security.CodeAccessPermission.Deny%2A> can be active on a frame. An attempt to call <xref:System.Security.CodeAccessPermission.Deny%2A> when an active <xref:System.Security.CodeAccessPermission.Deny%2A> exists on the frame results in a <xref:System.Security.SecurityException>. Call <xref:System.Security.CodeAccessPermission.RevertDeny%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Deny%2A>. <xref:System.Security.CodeAccessPermission.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed.","nodes":[{"pos":[2,1258],"content":"[!IMPORTANT]\n The <xref:System.Security.CodeAccessPermission.Deny%2A> method should be used only to protect resources from accidental access by fully trusted code. It should not be used to protect resources from intentional misuse by untrusted code. For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.Deny%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.Deny%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>. The called method is always higher in the stack. Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack. Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method. In that case, the <xref:System.Security.CodeAccessPermission.Deny%2A> placed on the stack by method `A` (the calling method) is never discovered.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Security.CodeAccessPermission.Deny%2A> method should be used only to protect resources from accidental access by fully trusted code. It should not be used to protect resources from intentional misuse by untrusted code. For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.Deny%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.Deny%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>. The called method is always higher in the stack. Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack. Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method. In that case, the <xref:System.Security.CodeAccessPermission.Deny%2A> placed on the stack by method `A` (the calling method) is never discovered.","pos":[13,1254],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> method should be used only to protect resources from accidental access by fully trusted code.","pos":[1,150],"source":" The <xref:System.Security.CodeAccessPermission.Deny%2A> method should be used only to protect resources from accidental access by fully trusted code."},{"content":"It should not be used to protect resources from intentional misuse by untrusted code.","pos":[151,236]},{"content":"For example, if method <ph id=\"ph1\">`A`</ph> issues a <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> for a permission and then calls method <ph id=\"ph3\">`B`</ph>, method <ph id=\"ph4\">`B`</ph> can overtly override the <ph id=\"ph5\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> by issuing an <ph id=\"ph6\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>.","pos":[237,525],"source":" For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.Deny%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.Deny%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>."},{"content":"The called method is always higher in the stack.","pos":[526,574]},{"content":"Therefore, if method <ph id=\"ph1\">`B`</ph> tries to access a protected resource, the security system begins checking for permissions with it because method <ph id=\"ph2\">`B`</ph> is the immediate caller, and then walks down the stack to confirm that there is no <ph id=\"ph3\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> lower in the stack.","pos":[575,932],"source":" Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack."},{"content":"Method <ph id=\"ph1\">`B`</ph>, which is trying to access the resource, can stop the stack walk immediately by using the <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> method.","pos":[933,1095],"source":" Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method."},{"content":"In that case, the <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> placed on the stack by method <ph id=\"ph2\">`A`</ph> (the calling method) is never discovered.","pos":[1096,1241],"source":" In that case, the <xref:System.Security.CodeAccessPermission.Deny%2A> placed on the stack by method `A` (the calling method) is never discovered."}]}]},{"pos":[1265,1598],"content":"This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","nodes":[{"content":"This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","pos":[0,333],"nodes":[{"content":"This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.","pos":[0,197]},{"content":"The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","pos":[198,333]}]}]},{"pos":[1605,2236],"content":"<xref:System.Security.CodeAccessPermission.Deny%2A> can limit the liability of the programmer or help prevent accidental security issues because it helps prevent the method that calls <xref:System.Security.CodeAccessPermission.Deny%2A> from being used to access the resource protected by the denied permission. If a method calls <xref:System.Security.CodeAccessPermission.Deny%2A> on a permission, and if a <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.CodeAccessPermission.Deny%2A>.","nodes":[{"content":"<xref:System.Security.CodeAccessPermission.Deny%2A> can limit the liability of the programmer or help prevent accidental security issues because it helps prevent the method that calls <xref:System.Security.CodeAccessPermission.Deny%2A> from being used to access the resource protected by the denied permission. If a method calls <xref:System.Security.CodeAccessPermission.Deny%2A> on a permission, and if a <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.CodeAccessPermission.Deny%2A>.","pos":[0,631],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> can limit the liability of the programmer or help prevent accidental security issues because it helps prevent the method that calls <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> from being used to access the resource protected by the denied permission.","pos":[0,310],"source":"<xref:System.Security.CodeAccessPermission.Deny%2A> can limit the liability of the programmer or help prevent accidental security issues because it helps prevent the method that calls <xref:System.Security.CodeAccessPermission.Deny%2A> from being used to access the resource protected by the denied permission."},{"content":"If a method calls <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> on a permission, and if a <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <ph id=\"ph3\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>.","pos":[311,631],"source":" If a method calls <xref:System.Security.CodeAccessPermission.Deny%2A> on a permission, and if a <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.CodeAccessPermission.Deny%2A>."}]}]},{"pos":[2243,3008],"content":"The call to <xref:System.Security.CodeAccessPermission.Deny%2A> is effective until the calling code returns to its caller. Only one <xref:System.Security.CodeAccessPermission.Deny%2A> can be active on a frame. An attempt to call <xref:System.Security.CodeAccessPermission.Deny%2A> when an active <xref:System.Security.CodeAccessPermission.Deny%2A> exists on the frame results in a <xref:System.Security.SecurityException>. Call <xref:System.Security.CodeAccessPermission.RevertDeny%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Deny%2A>. <xref:System.Security.CodeAccessPermission.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed.","nodes":[{"content":"The call to <xref:System.Security.CodeAccessPermission.Deny%2A> is effective until the calling code returns to its caller. Only one <xref:System.Security.CodeAccessPermission.Deny%2A> can be active on a frame. An attempt to call <xref:System.Security.CodeAccessPermission.Deny%2A> when an active <xref:System.Security.CodeAccessPermission.Deny%2A> exists on the frame results in a <xref:System.Security.SecurityException>. Call <xref:System.Security.CodeAccessPermission.RevertDeny%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Deny%2A>. <xref:System.Security.CodeAccessPermission.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed.","pos":[0,765],"nodes":[{"content":"The call to <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> is effective until the calling code returns to its caller.","pos":[0,122],"source":"The call to <xref:System.Security.CodeAccessPermission.Deny%2A> is effective until the calling code returns to its caller."},{"content":"Only one <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> can be active on a frame.","pos":[123,209],"source":" Only one <xref:System.Security.CodeAccessPermission.Deny%2A> can be active on a frame."},{"content":"An attempt to call <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> when an active <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> exists on the frame results in a <ph id=\"ph3\">&lt;xref:System.Security.SecurityException&gt;</ph>.","pos":[210,422],"source":" An attempt to call <xref:System.Security.CodeAccessPermission.Deny%2A> when an active <xref:System.Security.CodeAccessPermission.Deny%2A> exists on the frame results in a <xref:System.Security.SecurityException>."},{"content":"Call <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.RevertDeny%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph> to remove an active <ph id=\"ph3\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>.","pos":[423,618],"source":" Call <xref:System.Security.CodeAccessPermission.RevertDeny%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Deny%2A>."},{"content":"<ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission will not succeed.","pos":[619,765],"source":" <xref:System.Security.CodeAccessPermission.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed."}]}]}],"pos":[18156,21174],"yaml":true,"extradata":"MT"},{"content":"There is already an active <xref href=\"System.Security.CodeAccessPermission.Deny\"></xref> for the current frame.","nodes":[{"pos":[0,112],"content":"There is already an active <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission.Deny\"&gt;&lt;/xref&gt;</ph> for the current frame.","source":"There is already an active <xref href=\"System.Security.CodeAccessPermission.Deny\"></xref> for the current frame."}],"pos":[21418,21531],"yaml":true},{"content":"Determines whether the specified <xref href=\"System.Security.CodeAccessPermission\"></xref> object is equal to the current <xref href=\"System.Security.CodeAccessPermission\"></xref>.","nodes":[{"pos":[0,180],"content":"Determines whether the specified <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission\"&gt;&lt;/xref&gt;</ph> object is equal to the current <ph id=\"ph2\">&lt;xref href=\"System.Security.CodeAccessPermission\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether the specified <xref href=\"System.Security.CodeAccessPermission\"></xref> object is equal to the current <xref href=\"System.Security.CodeAccessPermission\"></xref>."}],"pos":[22693,22874],"yaml":true},{"content":"For more information, see <xref:System.Object.Equals%2A>.","nodes":[{"pos":[0,57],"content":"For more information, see <xref:System.Object.Equals%2A>.","nodes":[{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph>.","pos":[0,57],"source":"For more information, see <xref:System.Object.Equals%2A>."}]}],"pos":[22885,22943],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Security.CodeAccessPermission\"></xref> object to compare with the current <xref href=\"System.Security.CodeAccessPermission\"></xref>.","nodes":[{"pos":[0,155],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission\"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id=\"ph2\">&lt;xref href=\"System.Security.CodeAccessPermission\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Security.CodeAccessPermission\"></xref> object to compare with the current <xref href=\"System.Security.CodeAccessPermission\"></xref>."}],"pos":[23150,23306],"yaml":true},{"content":"`true` if the specified <xref href=\"System.Security.CodeAccessPermission\"></xref> object is equal to the current <xref href=\"System.Security.CodeAccessPermission\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,191],"content":"<ph id=\"ph1\">`true`</ph> if the specified <ph id=\"ph2\">&lt;xref href=\"System.Security.CodeAccessPermission\"&gt;&lt;/xref&gt;</ph> object is equal to the current <ph id=\"ph3\">&lt;xref href=\"System.Security.CodeAccessPermission\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the specified <xref href=\"System.Security.CodeAccessPermission\"></xref> object is equal to the current <xref href=\"System.Security.CodeAccessPermission\"></xref>; otherwise, `false`."}],"pos":[23364,23558],"yaml":true},{"content":"When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.","nodes":[{"pos":[0,111],"content":"When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.","nodes":[{"content":"When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.","pos":[0,111]}]}],"pos":[24956,25068],"yaml":true},{"content":"Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.","nodes":[{"pos":[0,224],"content":"Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.","nodes":[{"content":"Custom code that extends security objects needs to implement the <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.ToXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.FromXml%2A&gt;</ph> methods to make the objects security-encodable.","pos":[0,224],"source":"Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable."}]}],"pos":[25079,25304],"yaml":true,"extradata":"MT"},{"content":"The XML encoding to use to reconstruct the security object.","nodes":[{"pos":[0,59],"content":"The XML encoding to use to reconstruct the security object.","nodes":[{"content":"The XML encoding to use to reconstruct the security object.","pos":[0,59]}]}],"pos":[26300,26360],"yaml":true},{"content":"The <code>elem</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">elem</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>elem</code> parameter is `null`."}],"pos":[26534,26577],"yaml":true},{"content":"The <code>elem</code> parameter does not contain the XML encoding for an instance of the same type as the current instance.  \n  \n -or-  \n  \n The version number of the <code>elem</code> parameter is not supported.","nodes":[{"pos":[0,123],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">elem</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter does not contain the XML encoding for an instance of the same type as the current instance.","source":"The <code>elem</code> parameter does not contain the XML encoding for an instance of the same type as the current instance."},{"pos":[130,134],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[141,212],"content":"The version number of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">elem</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not supported.","source":"The version number of the <code>elem</code> parameter is not supported."}],"pos":[26671,26890],"yaml":true},{"content":"Gets a hash code for the <xref href=\"System.Security.CodeAccessPermission\"></xref> object that is suitable for use in hashing algorithms and data structures such as a hash table.","nodes":[{"pos":[0,178],"content":"Gets a hash code for the <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission\"&gt;&lt;/xref&gt;</ph> object that is suitable for use in hashing algorithms and data structures such as a hash table.","source":"Gets a hash code for the <xref href=\"System.Security.CodeAccessPermission\"></xref> object that is suitable for use in hashing algorithms and data structures such as a hash table."}],"pos":[28019,28198],"yaml":true},{"content":"The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.CodeAccessPermission> objects.","nodes":[{"pos":[0,179],"content":"The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.CodeAccessPermission> objects.","nodes":[{"content":"The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission&gt;</ph> objects.","pos":[0,179],"source":"The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.CodeAccessPermission> objects."}]}],"pos":[28209,28389],"yaml":true,"extradata":"MT"},{"content":"A hash code for the current <xref href=\"System.Security.CodeAccessPermission\"></xref> object.","nodes":[{"pos":[0,93],"content":"A hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission\"&gt;&lt;/xref&gt;</ph> object.","source":"A hash code for the current <xref href=\"System.Security.CodeAccessPermission\"></xref> object."}],"pos":[28590,28684],"yaml":true},{"content":"When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.","nodes":[{"pos":[0,150],"content":"When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.","nodes":[{"content":"When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.","pos":[0,150]}]}],"pos":[30075,30226],"yaml":true},{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.","nodes":[{"pos":[0,198],"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.","nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.","pos":[0,198],"nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common.","pos":[0,118]},{"content":"Only a demand that passes both original permissions will pass the intersection.","pos":[119,198]}]}]}],"pos":[30237,30436],"yaml":true,"extradata":"MT"},{"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","nodes":[{"pos":[0,109],"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","nodes":[{"content":"A permission to intersect with the current permission. It must be of the same type as the current permission.","pos":[0,109],"nodes":[{"content":"A permission to intersect with the current permission.","pos":[0,54]},{"content":"It must be of the same type as the current permission.","pos":[55,109]}]}]}],"pos":[31449,31559],"yaml":true},{"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.","nodes":[{"pos":[0,165],"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.","nodes":[{"content":"A new permission that represents the intersection of the current permission and the specified permission.","pos":[0,105]},{"content":"This new permission is <ph id=\"ph1\">`null`</ph> if the intersection is empty.","pos":[106,165],"source":" This new permission is `null` if the intersection is empty."}]}],"pos":[31630,31796],"yaml":true},{"content":"The <code>target</code> parameter is not `null` and is not an instance of the same class as the current permission.","nodes":[{"pos":[0,115],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph> and is not an instance of the same class as the current permission.","source":"The <code>target</code> parameter is not `null` and is not an instance of the same class as the current permission."}],"pos":[31964,32080],"yaml":true},{"content":"When implemented by a derived class, determines whether the current permission is a subset of the specified permission.","nodes":[{"pos":[0,119],"content":"When implemented by a derived class, determines whether the current permission is a subset of the specified permission.","nodes":[{"content":"When implemented by a derived class, determines whether the current permission is a subset of the specified permission.","pos":[0,119]}]}],"pos":[33323,33443],"yaml":true},{"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be `true` for all overrides of the <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> method. *X*, *Y*, and *Z* represent custom code access permission objects that are not null references, *U* represents an unrestricted code access permission, and *N* represents an empty permission with a <xref:System.Security.Permissions.PermissionState> of <xref:System.Security.Permissions.PermissionState.None>.  \n  \n-   *X*.IsSubsetOf(*X*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*Y*) returns the same value as *Y*.IsSubsetOf(*X*) if and only if *X* and *Y* represent the same set of permissions.  \n  \n-   If *X*.IsSubsetOf(*Y*) and *Y*.IsSubsetOf(*Z*) both return `true`, *X*.IsSubsetOf(*Z*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*U*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*N*) returns `false`.  \n  \n-   *N*.IsSubsetOf(*X*) returns `true`.  \n  \n If *X* and *Y* represent custom code access permission objects that are null references, *X*.IsSubsetOf(*Y*) returns `true`. If *Z* is also null, the compound set operation *X*.Union(*Y*).IsSubsetOf(*Z*) also returns `true` because the union of two null permissions is a null permission.","nodes":[{"pos":[0,441],"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.","nodes":[{"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission.","pos":[0,172]},{"content":"For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:<ph id=\"ph1\">\\\\</ph>.","pos":[173,299],"source":" For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\."},{"content":"If this method returns <ph id=\"ph1\">`true`</ph>, the current permission represents no more access to the protected resource than does the specified permission.","pos":[300,441],"source":" If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission."}]},{"pos":[448,897],"content":"The following statements are required to be `true` for all overrides of the <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> method. *X*, *Y*, and *Z* represent custom code access permission objects that are not null references, *U* represents an unrestricted code access permission, and *N* represents an empty permission with a <xref:System.Security.Permissions.PermissionState> of <xref:System.Security.Permissions.PermissionState.None>.","nodes":[{"content":"The following statements are required to be <ph id=\"ph1\">`true`</ph> for all overrides of the <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.IsSubsetOf%2A&gt;</ph> method.","pos":[0,141],"source":"The following statements are required to be `true` for all overrides of the <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> method."},{"content":"<bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept>, <bpt id=\"p2\">*</bpt>Y<ept id=\"p2\">*</ept>, and <bpt id=\"p3\">*</bpt>Z<ept id=\"p3\">*</ept> represent custom code access permission objects that are not null references, <bpt id=\"p4\">*</bpt>U<ept id=\"p4\">*</ept> represents an unrestricted code access permission, and <bpt id=\"p5\">*</bpt>N<ept id=\"p5\">*</ept> represents an empty permission with a <ph id=\"ph1\">&lt;xref:System.Security.Permissions.PermissionState&gt;</ph> of <ph id=\"ph2\">&lt;xref:System.Security.Permissions.PermissionState.None&gt;</ph>.","pos":[142,449],"source":"*X*, *Y*, and *Z* represent custom code access permission objects that are not null references, *U* represents an unrestricted code access permission, and *N* represents an empty permission with a <xref:System.Security.Permissions.PermissionState> of <xref:System.Security.Permissions.PermissionState.None>."}]},{"pos":[907,942],"content":"<bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept>.IsSubsetOf(<bpt id=\"p2\">*</bpt>X<ept id=\"p2\">*</ept>) returns <ph id=\"ph1\">`true`</ph>.","source":"*X*.IsSubsetOf(*X*) returns `true`."},{"pos":[952,1083],"content":"<bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept>.IsSubsetOf(<bpt id=\"p2\">*</bpt>Y<ept id=\"p2\">*</ept>) returns the same value as <bpt id=\"p3\">*</bpt>Y<ept id=\"p3\">*</ept>.IsSubsetOf(<bpt id=\"p4\">*</bpt>X<ept id=\"p4\">*</ept>) if and only if <bpt id=\"p5\">*</bpt>X<ept id=\"p5\">*</ept> and <bpt id=\"p6\">*</bpt>Y<ept id=\"p6\">*</ept> represent the same set of permissions.","source":"*X*.IsSubsetOf(*Y*) returns the same value as *Y*.IsSubsetOf(*X*) if and only if *X* and *Y* represent the same set of permissions."},{"pos":[1093,1195],"content":"If <bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept>.IsSubsetOf(<bpt id=\"p2\">*</bpt>Y<ept id=\"p2\">*</ept>) and <bpt id=\"p3\">*</bpt>Y<ept id=\"p3\">*</ept>.IsSubsetOf(<bpt id=\"p4\">*</bpt>Z<ept id=\"p4\">*</ept>) both return <ph id=\"ph1\">`true`</ph>, <bpt id=\"p5\">*</bpt>X<ept id=\"p5\">*</ept>.IsSubsetOf(<bpt id=\"p6\">*</bpt>Z<ept id=\"p6\">*</ept>) returns <ph id=\"ph2\">`true`</ph>.","source":"If *X*.IsSubsetOf(*Y*) and *Y*.IsSubsetOf(*Z*) both return `true`, *X*.IsSubsetOf(*Z*) returns `true`."},{"pos":[1205,1240],"content":"<bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept>.IsSubsetOf(<bpt id=\"p2\">*</bpt>U<ept id=\"p2\">*</ept>) returns <ph id=\"ph1\">`true`</ph>.","source":"*X*.IsSubsetOf(*U*) returns `true`."},{"pos":[1250,1286],"content":"<bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept>.IsSubsetOf(<bpt id=\"p2\">*</bpt>N<ept id=\"p2\">*</ept>) returns <ph id=\"ph1\">`false`</ph>.","source":"*X*.IsSubsetOf(*N*) returns `false`."},{"pos":[1296,1331],"content":"<bpt id=\"p1\">*</bpt>N<ept id=\"p1\">*</ept>.IsSubsetOf(<bpt id=\"p2\">*</bpt>X<ept id=\"p2\">*</ept>) returns <ph id=\"ph1\">`true`</ph>.","source":"*N*.IsSubsetOf(*X*) returns `true`."},{"pos":[1338,1625],"content":"If *X* and *Y* represent custom code access permission objects that are null references, *X*.IsSubsetOf(*Y*) returns `true`. If *Z* is also null, the compound set operation *X*.Union(*Y*).IsSubsetOf(*Z*) also returns `true` because the union of two null permissions is a null permission.","nodes":[{"content":"If <bpt id=\"p1\">*</bpt>X<ept id=\"p1\">*</ept> and <bpt id=\"p2\">*</bpt>Y<ept id=\"p2\">*</ept> represent custom code access permission objects that are null references, <bpt id=\"p3\">*</bpt>X<ept id=\"p3\">*</ept>.IsSubsetOf(<bpt id=\"p4\">*</bpt>Y<ept id=\"p4\">*</ept>) returns <ph id=\"ph1\">`true`</ph>.","pos":[0,124],"source":"If *X* and *Y* represent custom code access permission objects that are null references, *X*.IsSubsetOf(*Y*) returns `true`."},{"content":"If <bpt id=\"p1\">*</bpt>Z<ept id=\"p1\">*</ept> is also null, the compound set operation <bpt id=\"p2\">*</bpt>X<ept id=\"p2\">*</ept>.Union(<bpt id=\"p3\">*</bpt>Y<ept id=\"p3\">*</ept>).IsSubsetOf(<bpt id=\"p4\">*</bpt>Z<ept id=\"p4\">*</ept>) also returns <ph id=\"ph1\">`true`</ph> because the union of two null permissions is a null permission.","pos":[125,287],"source":" If *Z* is also null, the compound set operation *X*.Union(*Y*).IsSubsetOf(*Z*) also returns `true` because the union of two null permissions is a null permission."}]}],"pos":[33454,35101],"yaml":true,"extradata":"MT"},{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","nodes":[{"pos":[0,130],"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","nodes":[{"content":"A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.","pos":[0,130],"nodes":[{"content":"A permission that is to be tested for the subset relationship.","pos":[0,62]},{"content":"This permission must be of the same type as the current permission.","pos":[63,130]}]}]}],"pos":[36093,36224],"yaml":true},{"content":"`true` if the current permission is a subset of the specified permission; otherwise, `false`.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">`true`</ph> if the current permission is a subset of the specified permission; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current permission is a subset of the specified permission; otherwise, `false`."}],"pos":[36282,36378],"yaml":true},{"content":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission.","nodes":[{"pos":[0,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph> and is not of the same type as the current permission.","source":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission."}],"pos":[36547,36650],"yaml":true},{"content":"Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource specified by the current instance.","nodes":[{"pos":[0,167],"content":"Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource specified by the current instance.","nodes":[{"content":"Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource specified by the current instance.","pos":[0,167]}]}],"pos":[37773,37941],"yaml":true},{"content":"> [!IMPORTANT]\n>  The <xref:System.Security.CodeAccessPermission.PermitOnly%2A> method should be used only to protect resources from accidental access by fully trusted code. It should not be used to protect resources from intentional misuse by untrusted code. For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>. The called method is always higher in the stack. Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack. Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method. In that case, the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> placed on the stack by method `A` (the calling method) is never discovered.  \n  \n <xref:System.Security.CodeAccessPermission.PermitOnly%2A> is similar to <xref:System.Security.CodeAccessPermission.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed. The difference is that <xref:System.Security.CodeAccessPermission.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.CodeAccessPermission.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail.  \n  \n Call this method to ensure that your code can be used to access only the specified resources. The call to <xref:System.Security.CodeAccessPermission.PermitOnly%2A> is effective until the calling code returns to its caller. Only one <xref:System.Security.CodeAccessPermission.PermitOnly%2A> can be active on a frame. An attempt to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A> when an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A> exists on the frame results in a <xref:System.Security.SecurityException>. Call <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.  \n  \n <xref:System.Security.CodeAccessPermission.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed. However, if code lower on the call stack later calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A>. This is because the code that called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for that permission. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","nodes":[{"pos":[2,1282],"content":"[!IMPORTANT]\n The <xref:System.Security.CodeAccessPermission.PermitOnly%2A> method should be used only to protect resources from accidental access by fully trusted code. It should not be used to protect resources from intentional misuse by untrusted code. For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>. The called method is always higher in the stack. Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack. Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method. In that case, the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> placed on the stack by method `A` (the calling method) is never discovered.","leadings":["","> "],"nodes":[{"content":" The <xref:System.Security.CodeAccessPermission.PermitOnly%2A> method should be used only to protect resources from accidental access by fully trusted code. It should not be used to protect resources from intentional misuse by untrusted code. For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>. The called method is always higher in the stack. Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack. Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method. In that case, the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> placed on the stack by method `A` (the calling method) is never discovered.","pos":[13,1278],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> method should be used only to protect resources from accidental access by fully trusted code.","pos":[1,156],"source":" The <xref:System.Security.CodeAccessPermission.PermitOnly%2A> method should be used only to protect resources from accidental access by fully trusted code."},{"content":"It should not be used to protect resources from intentional misuse by untrusted code.","pos":[157,242]},{"content":"For example, if method <ph id=\"ph1\">`A`</ph> issues a <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> for a permission and then calls method <ph id=\"ph3\">`B`</ph>, method <ph id=\"ph4\">`B`</ph> can overtly override the <ph id=\"ph5\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> by issuing an <ph id=\"ph6\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>.","pos":[243,543],"source":" For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>."},{"content":"The called method is always higher in the stack.","pos":[544,592]},{"content":"Therefore, if method <ph id=\"ph1\">`B`</ph> tries to access a protected resource, the security system begins checking for permissions with it because method <ph id=\"ph2\">`B`</ph> is the immediate caller, and then walks down the stack to confirm that there is no <ph id=\"ph3\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> lower in the stack.","pos":[593,950],"source":" Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack."},{"content":"Method <ph id=\"ph1\">`B`</ph>, which is trying to access the resource, can stop the stack walk immediately by using the <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> method.","pos":[951,1113],"source":" Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method."},{"content":"In that case, the <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> placed on the stack by method <ph id=\"ph2\">`A`</ph> (the calling method) is never discovered.","pos":[1114,1265],"source":" In that case, the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> placed on the stack by method `A` (the calling method) is never discovered."}]}]},{"pos":[1289,1759],"content":"<xref:System.Security.CodeAccessPermission.PermitOnly%2A> is similar to <xref:System.Security.CodeAccessPermission.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed. The difference is that <xref:System.Security.CodeAccessPermission.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.CodeAccessPermission.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail.","nodes":[{"content":"<xref:System.Security.CodeAccessPermission.PermitOnly%2A> is similar to <xref:System.Security.CodeAccessPermission.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed. The difference is that <xref:System.Security.CodeAccessPermission.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.CodeAccessPermission.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail.","pos":[0,470],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> is similar to <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>, in that both cause stack walks to fail when they would otherwise succeed.","pos":[0,198],"source":"<xref:System.Security.CodeAccessPermission.PermitOnly%2A> is similar to <xref:System.Security.CodeAccessPermission.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed."},{"content":"The difference is that <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> specifies permissions that will cause the stack walk to fail, but <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> specifies the only permissions that do not cause the stack walk to fail.","pos":[199,470],"source":" The difference is that <xref:System.Security.CodeAccessPermission.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.CodeAccessPermission.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail."}]}]},{"pos":[1766,2514],"content":"Call this method to ensure that your code can be used to access only the specified resources. The call to <xref:System.Security.CodeAccessPermission.PermitOnly%2A> is effective until the calling code returns to its caller. Only one <xref:System.Security.CodeAccessPermission.PermitOnly%2A> can be active on a frame. An attempt to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A> when an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A> exists on the frame results in a <xref:System.Security.SecurityException>. Call <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.","nodes":[{"content":"Call this method to ensure that your code can be used to access only the specified resources. The call to <xref:System.Security.CodeAccessPermission.PermitOnly%2A> is effective until the calling code returns to its caller. Only one <xref:System.Security.CodeAccessPermission.PermitOnly%2A> can be active on a frame. An attempt to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A> when an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A> exists on the frame results in a <xref:System.Security.SecurityException>. Call <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.","pos":[0,748],"nodes":[{"content":"Call this method to ensure that your code can be used to access only the specified resources.","pos":[0,93]},{"content":"The call to <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> is effective until the calling code returns to its caller.","pos":[94,222],"source":" The call to <xref:System.Security.CodeAccessPermission.PermitOnly%2A> is effective until the calling code returns to its caller."},{"content":"Only one <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> can be active on a frame.","pos":[223,315],"source":" Only one <xref:System.Security.CodeAccessPermission.PermitOnly%2A> can be active on a frame."},{"content":"An attempt to call <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> when an active <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> exists on the frame results in a <ph id=\"ph3\">&lt;xref:System.Security.SecurityException&gt;</ph>.","pos":[316,540],"source":" An attempt to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A> when an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A> exists on the frame results in a <xref:System.Security.SecurityException>."},{"content":"Call <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph> to remove an active <ph id=\"ph3\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>.","pos":[541,748],"source":" Call <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A>."}]}]},{"pos":[2521,3338],"content":"<xref:System.Security.CodeAccessPermission.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed. However, if code lower on the call stack later calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A>. This is because the code that called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for that permission. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","nodes":[{"content":"<xref:System.Security.CodeAccessPermission.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed. However, if code lower on the call stack later calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A>. This is because the code that called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for that permission. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","pos":[0,817],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission will not succeed.","pos":[0,152],"source":"<xref:System.Security.CodeAccessPermission.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed."},{"content":"However, if code lower on the call stack later calls <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Demand%2A&gt;</ph> for that permission, a <ph id=\"ph2\">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the stack walk reaches the code that tried to call <ph id=\"ph3\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>.","pos":[153,448],"source":" However, if code lower on the call stack later calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A>."},{"content":"This is because the code that called <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> has not been granted the permission, even though it called <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> for that permission.","pos":[449,681],"source":" This is because the code that called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for that permission."},{"content":"The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.","pos":[682,817]}]}]}],"pos":[37952,41300],"yaml":true,"extradata":"MT"},{"content":"There is already an active <xref href=\"System.Security.CodeAccessPermission.PermitOnly\"></xref> for the current frame.","nodes":[{"pos":[0,118],"content":"There is already an active <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission.PermitOnly\"&gt;&lt;/xref&gt;</ph> for the current frame.","source":"There is already an active <xref href=\"System.Security.CodeAccessPermission.PermitOnly\"></xref> for the current frame."}],"pos":[41556,41675],"yaml":true},{"content":"Causes all previous overrides for the current frame to be removed and no longer in effect.","nodes":[{"pos":[0,90],"content":"Causes all previous overrides for the current frame to be removed and no longer in effect.","nodes":[{"content":"Causes all previous overrides for the current frame to be removed and no longer in effect.","pos":[0,90]}]}],"pos":[42792,42883],"yaml":true},{"content":"If there are no overrides (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, or <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) for the current frame, an <xref:System.ExecutionEngineException> is thrown.","nodes":[{"pos":[0,272],"content":"If there are no overrides (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, or <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) for the current frame, an <xref:System.ExecutionEngineException> is thrown.","nodes":[{"content":"If there are no overrides (<ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph>) for the current frame, an <ph id=\"ph4\">&lt;xref:System.ExecutionEngineException&gt;</ph> is thrown.","pos":[0,272],"source":"If there are no overrides (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, or <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) for the current frame, an <xref:System.ExecutionEngineException> is thrown."}]}],"pos":[42894,43167],"yaml":true,"extradata":"MT"},{"content":"There is no previous <xref href=\"System.Security.CodeAccessPermission.Assert\"></xref>, <xref href=\"System.Security.CodeAccessPermission.Deny\"></xref>, or <xref href=\"System.Security.CodeAccessPermission.PermitOnly\"></xref> for the current frame.","nodes":[{"pos":[0,245],"content":"There is no previous <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission.Assert\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph2\">&lt;xref href=\"System.Security.CodeAccessPermission.Deny\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph3\">&lt;xref href=\"System.Security.CodeAccessPermission.PermitOnly\"&gt;&lt;/xref&gt;</ph> for the current frame.","source":"There is no previous <xref href=\"System.Security.CodeAccessPermission.Assert\"></xref>, <xref href=\"System.Security.CodeAccessPermission.Deny\"></xref>, or <xref href=\"System.Security.CodeAccessPermission.PermitOnly\"></xref> for the current frame."}],"pos":[43426,43672],"yaml":true},{"content":"Causes any previous <xref href=\"System.Security.CodeAccessPermission.Assert\"></xref> for the current frame to be removed and no longer in effect.","nodes":[{"pos":[0,145],"content":"Causes any previous <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission.Assert\"&gt;&lt;/xref&gt;</ph> for the current frame to be removed and no longer in effect.","source":"Causes any previous <xref href=\"System.Security.CodeAccessPermission.Assert\"></xref> for the current frame to be removed and no longer in effect."}],"pos":[44807,44953],"yaml":true},{"content":"If there is no <xref:System.Security.CodeAccessPermission.Assert%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.","nodes":[{"pos":[0,144],"content":"If there is no <xref:System.Security.CodeAccessPermission.Assert%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.","nodes":[{"content":"If there is no <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Assert%2A&gt;</ph> for the current frame, an <ph id=\"ph2\">&lt;xref:System.ExecutionEngineException&gt;</ph> is thrown.","pos":[0,144],"source":"If there is no <xref:System.Security.CodeAccessPermission.Assert%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown."}]}],"pos":[44964,45109],"yaml":true,"extradata":"MT"},{"content":"There is no previous <xref href=\"System.Security.CodeAccessPermission.Assert\"></xref> for the current frame.","nodes":[{"pos":[0,108],"content":"There is no previous <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission.Assert\"&gt;&lt;/xref&gt;</ph> for the current frame.","source":"There is no previous <xref href=\"System.Security.CodeAccessPermission.Assert\"></xref> for the current frame."}],"pos":[45374,45483],"yaml":true},{"content":"Causes any previous <xref href=\"System.Security.CodeAccessPermission.Deny\"></xref> for the current frame to be removed and no longer in effect.","nodes":[{"pos":[0,143],"content":"Causes any previous <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission.Deny\"&gt;&lt;/xref&gt;</ph> for the current frame to be removed and no longer in effect.","source":"Causes any previous <xref href=\"System.Security.CodeAccessPermission.Deny\"></xref> for the current frame to be removed and no longer in effect."}],"pos":[46606,46750],"yaml":true},{"content":"If there is no <xref:System.Security.CodeAccessPermission.Deny%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.","nodes":[{"pos":[0,142],"content":"If there is no <xref:System.Security.CodeAccessPermission.Deny%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.","nodes":[{"content":"If there is no <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> for the current frame, an <ph id=\"ph2\">&lt;xref:System.ExecutionEngineException&gt;</ph> is thrown.","pos":[0,142],"source":"If there is no <xref:System.Security.CodeAccessPermission.Deny%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown."}]}],"pos":[46761,46904],"yaml":true,"extradata":"MT"},{"content":"There is no previous <xref href=\"System.Security.CodeAccessPermission.Deny\"></xref> for the current frame.","nodes":[{"pos":[0,106],"content":"There is no previous <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission.Deny\"&gt;&lt;/xref&gt;</ph> for the current frame.","source":"There is no previous <xref href=\"System.Security.CodeAccessPermission.Deny\"></xref> for the current frame."}],"pos":[47165,47272],"yaml":true},{"content":"Causes any previous <xref href=\"System.Security.CodeAccessPermission.PermitOnly\"></xref> for the current frame to be removed and no longer in effect.","nodes":[{"pos":[0,149],"content":"Causes any previous <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission.PermitOnly\"&gt;&lt;/xref&gt;</ph> for the current frame to be removed and no longer in effect.","source":"Causes any previous <xref href=\"System.Security.CodeAccessPermission.PermitOnly\"></xref> for the current frame to be removed and no longer in effect."}],"pos":[48431,48581],"yaml":true},{"content":"If there is no <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.","nodes":[{"pos":[0,148],"content":"If there is no <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.","nodes":[{"content":"If there is no <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.PermitOnly%2A&gt;</ph> for the current frame, an <ph id=\"ph2\">&lt;xref:System.ExecutionEngineException&gt;</ph> is thrown.","pos":[0,148],"source":"If there is no <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown."}]}],"pos":[48592,48741],"yaml":true,"extradata":"MT"},{"content":"There is no previous <xref href=\"System.Security.CodeAccessPermission.PermitOnly\"></xref> for the current frame.","nodes":[{"pos":[0,112],"content":"There is no previous <ph id=\"ph1\">&lt;xref href=\"System.Security.CodeAccessPermission.PermitOnly\"&gt;&lt;/xref&gt;</ph> for the current frame.","source":"There is no previous <xref href=\"System.Security.CodeAccessPermission.PermitOnly\"></xref> for the current frame."}],"pos":[49014,49127],"yaml":true},{"content":"Creates and returns a string representation of the current permission object.","nodes":[{"pos":[0,77],"content":"Creates and returns a string representation of the current permission object.","nodes":[{"content":"Creates and returns a string representation of the current permission object.","pos":[0,77]}]}],"pos":[50238,50316],"yaml":true},{"content":"This method is useful in debugging when you need to display the permission as a string.","nodes":[{"pos":[0,87],"content":"This method is useful in debugging when you need to display the permission as a string.","nodes":[{"content":"This method is useful in debugging when you need to display the permission as a string.","pos":[0,87]}]}],"pos":[50327,50415],"yaml":true,"extradata":"MT"},{"content":"A string representation of the current permission object.","nodes":[{"pos":[0,57],"content":"A string representation of the current permission object.","nodes":[{"content":"A string representation of the current permission object.","pos":[0,57]}]}],"pos":[50550,50608],"yaml":true},{"content":"When overridden in a derived class, creates an XML encoding of the security object and its current state.","nodes":[{"pos":[0,105],"content":"When overridden in a derived class, creates an XML encoding of the security object and its current state.","nodes":[{"content":"When overridden in a derived class, creates an XML encoding of the security object and its current state.","pos":[0,105]}]}],"pos":[51777,51883],"yaml":true},{"content":"Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.","nodes":[{"pos":[0,224],"content":"Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.","nodes":[{"content":"Custom code that extends security objects needs to implement the <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.ToXml%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.FromXml%2A&gt;</ph> methods to make the objects security-encodable.","pos":[0,224],"source":"Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable."}]}],"pos":[51894,52119],"yaml":true,"extradata":"MT"},{"content":"An XML encoding of the security object, including any state information.","nodes":[{"pos":[0,72],"content":"An XML encoding of the security object, including any state information.","nodes":[{"content":"An XML encoding of the security object, including any state information.","pos":[0,72]}]}],"pos":[53102,53175],"yaml":true},{"content":"When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.","nodes":[{"pos":[0,130],"content":"When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.","nodes":[{"content":"When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.","pos":[0,130]}]}],"pos":[54461,54592],"yaml":true},{"content":"The result of a call to <xref:System.Security.CodeAccessPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","nodes":[{"pos":[0,261],"content":"The result of a call to <xref:System.Security.CodeAccessPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","nodes":[{"content":"The result of a call to <xref:System.Security.CodeAccessPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","pos":[0,261],"nodes":[{"content":"The result of a call to <ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Union%2A&gt;</ph> is a permission that represents all the operations represented by both the current permission and the specified permission.","pos":[0,200],"source":"The result of a call to <xref:System.Security.CodeAccessPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission."},{"content":"Any demand that passes either permission passes their union.","pos":[201,261]}]}]}],"pos":[54603,54865],"yaml":true,"extradata":"MT"},{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","nodes":[{"pos":[0,107],"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","nodes":[{"content":"A permission to combine with the current permission. It must be of the same type as the current permission.","pos":[0,107],"nodes":[{"content":"A permission to combine with the current permission.","pos":[0,52]},{"content":"It must be of the same type as the current permission.","pos":[53,107]}]}]}],"pos":[55873,55981],"yaml":true},{"content":"A new permission that represents the union of the current permission and the specified permission.","nodes":[{"pos":[0,98],"content":"A new permission that represents the union of the current permission and the specified permission.","nodes":[{"content":"A new permission that represents the union of the current permission and the specified permission.","pos":[0,98]}]}],"pos":[56052,56151],"yaml":true},{"content":"The <code>other</code> parameter is not `null`. This method is only supported at this level when passed `null`.","nodes":[{"pos":[0,111],"content":"The <code>other</code> parameter is not `null`. This method is only supported at this level when passed `null`.","nodes":[{"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph>.","pos":[0,47],"source":"The <code>other</code> parameter is not `null`."},{"content":"This method is only supported at this level when passed <ph id=\"ph1\">`null`</ph>.","pos":[48,111],"source":" This method is only supported at this level when passed `null`."}]}],"pos":[56323,56435],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.CodeAccessPermission\n  commentId: T:System.Security.CodeAccessPermission\n  id: CodeAccessPermission\n  children:\n  - System.Security.CodeAccessPermission.#ctor\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Copy\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.Equals(System.Object)\n  - System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)\n  - System.Security.CodeAccessPermission.GetHashCode\n  - System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)\n  - System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  - System.Security.CodeAccessPermission.ToXml\n  - System.Security.CodeAccessPermission.Union(System.Security.IPermission)\n  - System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  langs:\n  - csharp\n  name: CodeAccessPermission\n  nameWithType: CodeAccessPermission\n  fullName: System.Security.CodeAccessPermission\n  type: Class\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Defines the underlying structure of all code access permissions.\n  remarks: \"Code access permissions use a stack walk to ensure that all callers of the code have been granted a permission. If a permission object is `null`, it is handled the same as a permission object with the state <xref:System.Security.Permissions.PermissionState?displayProperty=fullName>.  \\n  \\n The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.  \\n  \\n Inheritors of the <xref:System.Security.CodeAccessPermission> class must be granted full trust to function correctly as permissions extending the security infrastructure. To determine that the inheritors are fully trusted, <xref:System.Security.CodeAccessPermission> issues an <xref:System.Security.Permissions.SecurityAction.InheritanceDemand> for <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence> = `true` and <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy> = `true`.\"\n  example:\n  - \"The following code example shows a permission derived from the <xref:System.Security.CodeAccessPermission> class.  \\n  \\n [!code-cpp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#1)]\\n [!code-csharp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#1)]\\n [!code-vb[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class CodeAccessPermission : System.Security.IPermission, System.Security.IStackWalk\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Configuration.ConfigurationPermission\n  - System.Data.Common.DBDataPermission\n  - System.Data.OracleClient.OraclePermission\n  - System.Drawing.Printing.PrintingPermission\n  - System.Messaging.MessageQueuePermission\n  - System.Net.DnsPermission\n  - System.Net.SocketPermission\n  - System.Net.WebPermission\n  - System.Net.Mail.SmtpPermission\n  - System.Net.NetworkInformation.NetworkInformationPermission\n  - System.Net.PeerToPeer.PnrpPermission\n  - System.Net.PeerToPeer.Collaboration.PeerCollaborationPermission\n  - System.Security.Permissions.DataProtectionPermission\n  - System.Security.Permissions.EnvironmentPermission\n  - System.Security.Permissions.FileDialogPermission\n  - System.Security.Permissions.FileIOPermission\n  - System.Security.Permissions.GacIdentityPermission\n  - System.Security.Permissions.IsolatedStoragePermission\n  - System.Security.Permissions.KeyContainerPermission\n  - System.Security.Permissions.MediaPermission\n  - System.Security.Permissions.PublisherIdentityPermission\n  - System.Security.Permissions.ReflectionPermission\n  - System.Security.Permissions.RegistryPermission\n  - System.Security.Permissions.ResourcePermissionBase\n  - System.Security.Permissions.SecurityPermission\n  - System.Security.Permissions.SiteIdentityPermission\n  - System.Security.Permissions.StorePermission\n  - System.Security.Permissions.StrongNameIdentityPermission\n  - System.Security.Permissions.TypeDescriptorPermission\n  - System.Security.Permissions.UIPermission\n  - System.Security.Permissions.UrlIdentityPermission\n  - System.Security.Permissions.WebBrowserPermission\n  - System.Security.Permissions.ZoneIdentityPermission\n  - System.Transactions.DistributedTransactionPermission\n  - System.Web.AspNetHostingPermission\n  - System.Xaml.Permissions.XamlLoadPermission\n  implements:\n  - System.Security.IPermission\n  - System.Security.IStackWalk\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.#ctor\n  commentId: M:System.Security.CodeAccessPermission.#ctor\n  id: '#ctor'\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: CodeAccessPermission()\n  nameWithType: CodeAccessPermission.CodeAccessPermission()\n  fullName: CodeAccessPermission.CodeAccessPermission()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Initializes a new instance of the <xref href=\"System.Security.CodeAccessPermission\"></xref> class.\n  remarks: This constructor is called to initialize state in the type whenever an instance of the derived class is created. Although you can explicitly call this constructor in the constructor declaration of the derived class constructor, this is not usually necessary; most compilers will automatically generate the call for you.\n  syntax:\n    content: protected CodeAccessPermission ();\n    parameters: []\n  overload: System.Security.CodeAccessPermission.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.Assert\n  commentId: M:System.Security.CodeAccessPermission.Assert\n  id: Assert\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: Assert()\n  nameWithType: CodeAccessPermission.Assert()\n  fullName: CodeAccessPermission.Assert()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Declares that the calling code can access the resource protected by a permission demand through the code that calls this method, even if callers higher in the stack have not been granted permission to access the resource. Using <xref href=\"System.Security.CodeAccessPermission.Assert\"></xref> can create security issues.\n  remarks: \"The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. Calling <xref:System.Security.CodeAccessPermission.Assert%2A> prevents a stack walk originating lower in the call stack from proceeding up the call stack beyond the code that calls this method. Therefore, even if callers higher on the call stack do not have the requisite permissions to access a resource, they can still access it through the code that calls this method on the necessary permission. An assertion is effective only if the code that calls <xref:System.Security.CodeAccessPermission.Assert%2A> passes the security check for the permission that it is asserting.  \\n  \\n The call to <xref:System.Security.CodeAccessPermission.Assert%2A> is effective until the calling code returns to its caller. Only one <xref:System.Security.CodeAccessPermission.Assert%2A> can be active on a frame. An attempt to call <xref:System.Security.CodeAccessPermission.Assert%2A> when an active <xref:System.Security.CodeAccessPermission.Assert%2A> exists on the frame results in a <xref:System.Security.SecurityException>. Call <xref:System.Security.CodeAccessPermission.RevertAssert%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Assert%2A>.  \\n  \\n <xref:System.Security.CodeAccessPermission.Assert%2A> is ignored for a permission not granted because a demand for that permission will not succeed. However, if code lower on the call stack calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.Assert%2A>. This happens because the code that called <xref:System.Security.CodeAccessPermission.Assert%2A> has not been granted the permission, even though it tried to <xref:System.Security.CodeAccessPermission.Assert%2A> it.  \\n  \\n> [!CAUTION]\\n>  Because calling <xref:System.Security.CodeAccessPermission.Assert%2A> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security issues if used incorrectly or inappropriately. Therefore, it should be used with great caution.\"\n  syntax:\n    content: public void Assert ();\n    parameters: []\n  overload: System.Security.CodeAccessPermission.Assert*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"The calling code does not have <xref href=\\\"System.Security.Permissions.SecurityPermissionFlag.Assertion\\\"></xref>.  \\n  \\n -or-  \\n  \\n There is already an active <xref href=\\\"System.Security.CodeAccessPermission.Assert\\\"></xref> for the current frame.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.Copy\n  commentId: M:System.Security.CodeAccessPermission.Copy\n  id: Copy\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: CodeAccessPermission.Copy()\n  fullName: CodeAccessPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: When implemented by a derived class, creates and returns an identical copy of the current permission object.\n  remarks: A copy of a permission object represents the same access to resources as the original permission object.\n  example:\n  - \"The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Copy%2A> method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \\n  \\n [!code-cpp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#2)]\\n [!code-csharp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#2)]\\n [!code-vb[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#2)]\"\n  syntax:\n    content: public abstract System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A copy of the current permission object.\n  overload: System.Security.CodeAccessPermission.Copy*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.Demand\n  commentId: M:System.Security.CodeAccessPermission.Demand\n  id: Demand\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: Demand()\n  nameWithType: CodeAccessPermission.Demand()\n  fullName: CodeAccessPermission.Demand()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Forces a <xref href=\"System.Security.SecurityException\"></xref> at run time if all callers higher in the call stack have not been granted the permission specified by the current instance.\n  remarks: \"This method is typically used by secure libraries to ensure that callers have permission to access a resource. For example, a file class in a secure class library calls <xref:System.Security.CodeAccessPermission.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.  \\n  \\n The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack. <xref:System.Security.CodeAccessPermission.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.\"\n  syntax:\n    content: public void Demand ();\n    parameters: []\n  overload: System.Security.CodeAccessPermission.Demand*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"A caller higher in the call stack does not have the permission specified by the current instance.  \\n  \\n -or-  \\n  \\n A caller higher in the call stack has called <xref href=\\\"System.Security.CodeAccessPermission.Deny\\\"></xref> on the current permission object.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.Deny\n  commentId: M:System.Security.CodeAccessPermission.Deny\n  id: Deny\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: Deny()\n  nameWithType: CodeAccessPermission.Deny()\n  fullName: CodeAccessPermission.Deny()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Prevents callers higher in the call stack from using the code that calls this method to access the resource specified by the current instance.\n  remarks: \"> [!IMPORTANT]\\n>  The <xref:System.Security.CodeAccessPermission.Deny%2A> method should be used only to protect resources from accidental access by fully trusted code. It should not be used to protect resources from intentional misuse by untrusted code. For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.Deny%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.Deny%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>. The called method is always higher in the stack. Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack. Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method. In that case, the <xref:System.Security.CodeAccessPermission.Deny%2A> placed on the stack by method `A` (the calling method) is never discovered.  \\n  \\n This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.  \\n  \\n <xref:System.Security.CodeAccessPermission.Deny%2A> can limit the liability of the programmer or help prevent accidental security issues because it helps prevent the method that calls <xref:System.Security.CodeAccessPermission.Deny%2A> from being used to access the resource protected by the denied permission. If a method calls <xref:System.Security.CodeAccessPermission.Deny%2A> on a permission, and if a <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.CodeAccessPermission.Deny%2A>.  \\n  \\n The call to <xref:System.Security.CodeAccessPermission.Deny%2A> is effective until the calling code returns to its caller. Only one <xref:System.Security.CodeAccessPermission.Deny%2A> can be active on a frame. An attempt to call <xref:System.Security.CodeAccessPermission.Deny%2A> when an active <xref:System.Security.CodeAccessPermission.Deny%2A> exists on the frame results in a <xref:System.Security.SecurityException>. Call <xref:System.Security.CodeAccessPermission.RevertDeny%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.Deny%2A>. <xref:System.Security.CodeAccessPermission.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed.\"\n  syntax:\n    content: public void Deny ();\n    parameters: []\n  overload: System.Security.CodeAccessPermission.Deny*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: There is already an active <xref href=\"System.Security.CodeAccessPermission.Deny\"></xref> for the current frame.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.Equals(System.Object)\n  commentId: M:System.Security.CodeAccessPermission.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: CodeAccessPermission.Equals(Object)\n  fullName: CodeAccessPermission.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Determines whether the specified <xref href=\"System.Security.CodeAccessPermission\"></xref> object is equal to the current <xref href=\"System.Security.CodeAccessPermission\"></xref>.\n  remarks: For more information, see <xref:System.Object.Equals%2A>.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The <xref href=\"System.Security.CodeAccessPermission\"></xref> object to compare with the current <xref href=\"System.Security.CodeAccessPermission\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified <xref href=\"System.Security.CodeAccessPermission\"></xref> object is equal to the current <xref href=\"System.Security.CodeAccessPermission\"></xref>; otherwise, `false`.'\n  overload: System.Security.CodeAccessPermission.Equals*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)\n  commentId: M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: CodeAccessPermission.FromXml(SecurityElement)\n  fullName: CodeAccessPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: When overridden in a derived class, reconstructs a security object with a specified state from an XML encoding.\n  remarks: Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.\n  example:\n  - \"The following code example shows an override of the <xref:System.Security.CodeAccessPermission.FromXml%2A> method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \\n  \\n [!code-cpp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#10)]\\n [!code-csharp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#10)]\\n [!code-vb[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#10)]\"\n  syntax:\n    content: public abstract void FromXml (System.Security.SecurityElement elem);\n    parameters:\n    - id: elem\n      type: System.Security.SecurityElement\n      description: The XML encoding to use to reconstruct the security object.\n  overload: System.Security.CodeAccessPermission.FromXml*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>elem</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>elem</code> parameter does not contain the XML encoding for an instance of the same type as the current instance.  \\n  \\n -or-  \\n  \\n The version number of the <code>elem</code> parameter is not supported.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.GetHashCode\n  commentId: M:System.Security.CodeAccessPermission.GetHashCode\n  id: GetHashCode\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: CodeAccessPermission.GetHashCode()\n  fullName: CodeAccessPermission.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Gets a hash code for the <xref href=\"System.Security.CodeAccessPermission\"></xref> object that is suitable for use in hashing algorithms and data structures such as a hash table.\n  remarks: The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.CodeAccessPermission> objects.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Security.CodeAccessPermission\"></xref> object.\n  overload: System.Security.CodeAccessPermission.GetHashCode*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)\n  commentId: M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: CodeAccessPermission.Intersect(IPermission)\n  fullName: CodeAccessPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: When implemented by a derived class, creates and returns a permission that is the intersection of the current permission and the specified permission.\n  remarks: The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.\n  example:\n  - \"The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Intersect%2A> method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \\n  \\n [!code-cpp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#5)]\\n [!code-csharp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#5)]\\n [!code-vb[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#5)]\"\n  syntax:\n    content: public abstract System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to intersect with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.\n  overload: System.Security.CodeAccessPermission.Intersect*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not `null` and is not an instance of the same class as the current permission.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)\n  commentId: M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: CodeAccessPermission.IsSubsetOf(IPermission)\n  fullName: CodeAccessPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: When implemented by a derived class, determines whether the current permission is a subset of the specified permission.\n  remarks: \"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\\\example.txt is a subset of a permission that represents access to C:\\\\\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \\n  \\n The following statements are required to be `true` for all overrides of the <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> method. *X*, *Y*, and *Z* represent custom code access permission objects that are not null references, *U* represents an unrestricted code access permission, and *N* represents an empty permission with a <xref:System.Security.Permissions.PermissionState> of <xref:System.Security.Permissions.PermissionState.None>.  \\n  \\n-   *X*.IsSubsetOf(*X*) returns `true`.  \\n  \\n-   *X*.IsSubsetOf(*Y*) returns the same value as *Y*.IsSubsetOf(*X*) if and only if *X* and *Y* represent the same set of permissions.  \\n  \\n-   If *X*.IsSubsetOf(*Y*) and *Y*.IsSubsetOf(*Z*) both return `true`, *X*.IsSubsetOf(*Z*) returns `true`.  \\n  \\n-   *X*.IsSubsetOf(*U*) returns `true`.  \\n  \\n-   *X*.IsSubsetOf(*N*) returns `false`.  \\n  \\n-   *N*.IsSubsetOf(*X*) returns `true`.  \\n  \\n If *X* and *Y* represent custom code access permission objects that are null references, *X*.IsSubsetOf(*Y*) returns `true`. If *Z* is also null, the compound set operation *X*.Union(*Y*).IsSubsetOf(*Z*) also returns `true` because the union of two null permissions is a null permission.\"\n  example:\n  - \"The following code example shows an override of the <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \\n  \\n [!code-cpp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#4)]\\n [!code-csharp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#4)]\\n [!code-vb[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#4)]\"\n  syntax:\n    content: public abstract bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission.\n    return:\n      type: System.Boolean\n      description: '`true` if the current permission is a subset of the specified permission; otherwise, `false`.'\n  overload: System.Security.CodeAccessPermission.IsSubsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not `null` and is not of the same type as the current permission.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.PermitOnly\n  commentId: M:System.Security.CodeAccessPermission.PermitOnly\n  id: PermitOnly\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: PermitOnly()\n  nameWithType: CodeAccessPermission.PermitOnly()\n  fullName: CodeAccessPermission.PermitOnly()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Prevents callers higher in the call stack from using the code that calls this method to access all resources except for the resource specified by the current instance.\n  remarks: \"> [!IMPORTANT]\\n>  The <xref:System.Security.CodeAccessPermission.PermitOnly%2A> method should be used only to protect resources from accidental access by fully trusted code. It should not be used to protect resources from intentional misuse by untrusted code. For example, if method `A` issues a <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for a permission and then calls method `B`, method `B` can overtly override the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> by issuing an <xref:System.Security.CodeAccessPermission.Assert%2A>. The called method is always higher in the stack. Therefore, if method `B` tries to access a protected resource, the security system begins checking for permissions with it because method `B` is the immediate caller, and then walks down the stack to confirm that there is no <xref:System.Security.CodeAccessPermission.Deny%2A> or <xref:System.Security.CodeAccessPermission.PermitOnly%2A> lower in the stack. Method `B`, which is trying to access the resource, can stop the stack walk immediately by using the <xref:System.Security.CodeAccessPermission.Assert%2A> method. In that case, the <xref:System.Security.CodeAccessPermission.PermitOnly%2A> placed on the stack by method `A` (the calling method) is never discovered.  \\n  \\n <xref:System.Security.CodeAccessPermission.PermitOnly%2A> is similar to <xref:System.Security.CodeAccessPermission.Deny%2A>, in that both cause stack walks to fail when they would otherwise succeed. The difference is that <xref:System.Security.CodeAccessPermission.Deny%2A> specifies permissions that will cause the stack walk to fail, but <xref:System.Security.CodeAccessPermission.PermitOnly%2A> specifies the only permissions that do not cause the stack walk to fail.  \\n  \\n Call this method to ensure that your code can be used to access only the specified resources. The call to <xref:System.Security.CodeAccessPermission.PermitOnly%2A> is effective until the calling code returns to its caller. Only one <xref:System.Security.CodeAccessPermission.PermitOnly%2A> can be active on a frame. An attempt to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A> when an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A> exists on the frame results in a <xref:System.Security.SecurityException>. Call <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A> or <xref:System.Security.CodeAccessPermission.RevertAll%2A> to remove an active <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.  \\n  \\n <xref:System.Security.CodeAccessPermission.PermitOnly%2A> is ignored for a permission not granted because a demand for that permission will not succeed. However, if code lower on the call stack later calls <xref:System.Security.CodeAccessPermission.Demand%2A> for that permission, a <xref:System.Security.SecurityException> is thrown when the stack walk reaches the code that tried to call <xref:System.Security.CodeAccessPermission.PermitOnly%2A>. This is because the code that called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> has not been granted the permission, even though it called <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for that permission. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.\"\n  syntax:\n    content: public void PermitOnly ();\n    parameters: []\n  overload: System.Security.CodeAccessPermission.PermitOnly*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: There is already an active <xref href=\"System.Security.CodeAccessPermission.PermitOnly\"></xref> for the current frame.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.RevertAll\n  commentId: M:System.Security.CodeAccessPermission.RevertAll\n  id: RevertAll\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: RevertAll()\n  nameWithType: CodeAccessPermission.RevertAll()\n  fullName: CodeAccessPermission.RevertAll()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Causes all previous overrides for the current frame to be removed and no longer in effect.\n  remarks: If there are no overrides (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, or <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) for the current frame, an <xref:System.ExecutionEngineException> is thrown.\n  syntax:\n    content: public static void RevertAll ();\n    parameters: []\n  overload: System.Security.CodeAccessPermission.RevertAll*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: There is no previous <xref href=\"System.Security.CodeAccessPermission.Assert\"></xref>, <xref href=\"System.Security.CodeAccessPermission.Deny\"></xref>, or <xref href=\"System.Security.CodeAccessPermission.PermitOnly\"></xref> for the current frame.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.RevertAssert\n  commentId: M:System.Security.CodeAccessPermission.RevertAssert\n  id: RevertAssert\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: RevertAssert()\n  nameWithType: CodeAccessPermission.RevertAssert()\n  fullName: CodeAccessPermission.RevertAssert()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Causes any previous <xref href=\"System.Security.CodeAccessPermission.Assert\"></xref> for the current frame to be removed and no longer in effect.\n  remarks: If there is no <xref:System.Security.CodeAccessPermission.Assert%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.\n  syntax:\n    content: public static void RevertAssert ();\n    parameters: []\n  overload: System.Security.CodeAccessPermission.RevertAssert*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: There is no previous <xref href=\"System.Security.CodeAccessPermission.Assert\"></xref> for the current frame.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.RevertDeny\n  commentId: M:System.Security.CodeAccessPermission.RevertDeny\n  id: RevertDeny\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: RevertDeny()\n  nameWithType: CodeAccessPermission.RevertDeny()\n  fullName: CodeAccessPermission.RevertDeny()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Causes any previous <xref href=\"System.Security.CodeAccessPermission.Deny\"></xref> for the current frame to be removed and no longer in effect.\n  remarks: If there is no <xref:System.Security.CodeAccessPermission.Deny%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.\n  syntax:\n    content: public static void RevertDeny ();\n    parameters: []\n  overload: System.Security.CodeAccessPermission.RevertDeny*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: There is no previous <xref href=\"System.Security.CodeAccessPermission.Deny\"></xref> for the current frame.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.RevertPermitOnly\n  commentId: M:System.Security.CodeAccessPermission.RevertPermitOnly\n  id: RevertPermitOnly\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: RevertPermitOnly()\n  nameWithType: CodeAccessPermission.RevertPermitOnly()\n  fullName: CodeAccessPermission.RevertPermitOnly()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Causes any previous <xref href=\"System.Security.CodeAccessPermission.PermitOnly\"></xref> for the current frame to be removed and no longer in effect.\n  remarks: If there is no <xref:System.Security.CodeAccessPermission.PermitOnly%2A> for the current frame, an <xref:System.ExecutionEngineException> is thrown.\n  syntax:\n    content: public static void RevertPermitOnly ();\n    parameters: []\n  overload: System.Security.CodeAccessPermission.RevertPermitOnly*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: There is no previous <xref href=\"System.Security.CodeAccessPermission.PermitOnly\"></xref> for the current frame.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.ToString\n  commentId: M:System.Security.CodeAccessPermission.ToString\n  id: ToString\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: CodeAccessPermission.ToString()\n  fullName: CodeAccessPermission.ToString()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: Creates and returns a string representation of the current permission object.\n  remarks: This method is useful in debugging when you need to display the permission as a string.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string representation of the current permission object.\n  overload: System.Security.CodeAccessPermission.ToString*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.ToXml\n  commentId: M:System.Security.CodeAccessPermission.ToXml\n  id: ToXml\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: CodeAccessPermission.ToXml()\n  fullName: CodeAccessPermission.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: When overridden in a derived class, creates an XML encoding of the security object and its current state.\n  remarks: Custom code that extends security objects needs to implement the <xref:System.Security.CodeAccessPermission.ToXml%2A> and <xref:System.Security.CodeAccessPermission.FromXml%2A> methods to make the objects security-encodable.\n  example:\n  - \"The following code example shows an override of the <xref:System.Security.CodeAccessPermission.ToXml%2A> method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \\n  \\n [!code-cpp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#11)]\\n [!code-csharp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#11)]\\n [!code-vb[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#11)]\"\n  syntax:\n    content: public abstract System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: An XML encoding of the security object, including any state information.\n  overload: System.Security.CodeAccessPermission.ToXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.Union(System.Security.IPermission)\n  commentId: M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: CodeAccessPermission.Union(IPermission)\n  fullName: CodeAccessPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security\n  summary: When overridden in a derived class, creates a permission that is the union of the current permission and the specified permission.\n  remarks: The result of a call to <xref:System.Security.CodeAccessPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.\n  example:\n  - \"The following code example shows an override of the <xref:System.Security.CodeAccessPermission.Union%2A> method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \\n  \\n [!code-cpp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#12)]\\n [!code-csharp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#12)]\\n [!code-vb[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#12)]\"\n  syntax:\n    content: public virtual System.Security.IPermission Union (System.Security.IPermission other);\n    parameters:\n    - id: other\n      type: System.Security.IPermission\n      description: A permission to combine with the current permission. It must be of the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the union of the current permission and the specified permission.\n  overload: System.Security.CodeAccessPermission.Union*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <code>other</code> parameter is not `null`. This method is only supported at this level when passed `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  commentId: M:System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  id: System#Security#IPermission#Demand\n  isEii: true\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: IPermission.Demand()\n  nameWithType: CodeAccessPermission.IPermission.Demand()\n  fullName: CodeAccessPermission.IPermission.Demand()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: void IPermission.Demand ();\n    parameters: []\n  overload: System.Security.CodeAccessPermission.System#Security#IPermission#Demand*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  commentId: M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  id: System#Security#IStackWalk#Assert\n  isEii: true\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: IStackWalk.Assert()\n  nameWithType: CodeAccessPermission.IStackWalk.Assert()\n  fullName: CodeAccessPermission.IStackWalk.Assert()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: void IStackWalk.Assert ();\n    parameters: []\n  overload: System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  commentId: M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  id: System#Security#IStackWalk#Demand\n  isEii: true\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: IStackWalk.Demand()\n  nameWithType: CodeAccessPermission.IStackWalk.Demand()\n  fullName: CodeAccessPermission.IStackWalk.Demand()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: void IStackWalk.Demand ();\n    parameters: []\n  overload: System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  commentId: M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  id: System#Security#IStackWalk#Deny\n  isEii: true\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: IStackWalk.Deny()\n  nameWithType: CodeAccessPermission.IStackWalk.Deny()\n  fullName: CodeAccessPermission.IStackWalk.Deny()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: void IStackWalk.Deny ();\n    parameters: []\n  overload: System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  commentId: M:System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  id: System#Security#IStackWalk#PermitOnly\n  isEii: true\n  parent: System.Security.CodeAccessPermission\n  langs:\n  - csharp\n  name: IStackWalk.PermitOnly()\n  nameWithType: CodeAccessPermission.IStackWalk.PermitOnly()\n  fullName: CodeAccessPermission.IStackWalk.PermitOnly()\n  type: Method\n  assemblies:\n  - mscorlib\n  namespace: System.Security\n  syntax:\n    content: void IStackWalk.PermitOnly ();\n    parameters: []\n  overload: System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly*\n  exceptions: []\n  version:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Security.CodeAccessPermission.#ctor\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: CodeAccessPermission()\n  nameWithType: CodeAccessPermission.CodeAccessPermission()\n  fullName: CodeAccessPermission.CodeAccessPermission()\n- uid: System.Security.CodeAccessPermission.Assert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Assert()\n  nameWithType: CodeAccessPermission.Assert()\n  fullName: CodeAccessPermission.Assert()\n- uid: System.Security.CodeAccessPermission.Copy\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: CodeAccessPermission.Copy()\n  fullName: CodeAccessPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.CodeAccessPermission.Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Demand()\n  nameWithType: CodeAccessPermission.Demand()\n  fullName: CodeAccessPermission.Demand()\n- uid: System.Security.CodeAccessPermission.Deny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Deny()\n  nameWithType: CodeAccessPermission.Deny()\n  fullName: CodeAccessPermission.Deny()\n- uid: System.Security.CodeAccessPermission.Equals(System.Object)\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: CodeAccessPermission.Equals(Object)\n  fullName: CodeAccessPermission.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: CodeAccessPermission.FromXml(SecurityElement)\n  fullName: CodeAccessPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.CodeAccessPermission.GetHashCode\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: CodeAccessPermission.GetHashCode()\n  fullName: CodeAccessPermission.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: CodeAccessPermission.Intersect(IPermission)\n  fullName: CodeAccessPermission.Intersect(IPermission)\n- uid: System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: CodeAccessPermission.IsSubsetOf(IPermission)\n  fullName: CodeAccessPermission.IsSubsetOf(IPermission)\n- uid: System.Security.CodeAccessPermission.PermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: PermitOnly()\n  nameWithType: CodeAccessPermission.PermitOnly()\n  fullName: CodeAccessPermission.PermitOnly()\n- uid: System.Security.CodeAccessPermission.RevertAll\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAll()\n  nameWithType: CodeAccessPermission.RevertAll()\n  fullName: CodeAccessPermission.RevertAll()\n- uid: System.Security.CodeAccessPermission.RevertAssert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAssert()\n  nameWithType: CodeAccessPermission.RevertAssert()\n  fullName: CodeAccessPermission.RevertAssert()\n- uid: System.Security.CodeAccessPermission.RevertDeny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertDeny()\n  nameWithType: CodeAccessPermission.RevertDeny()\n  fullName: CodeAccessPermission.RevertDeny()\n- uid: System.Security.CodeAccessPermission.RevertPermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertPermitOnly()\n  nameWithType: CodeAccessPermission.RevertPermitOnly()\n  fullName: CodeAccessPermission.RevertPermitOnly()\n- uid: System.Security.CodeAccessPermission.ToString\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: ToString()\n  nameWithType: CodeAccessPermission.ToString()\n  fullName: CodeAccessPermission.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.CodeAccessPermission.ToXml\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: CodeAccessPermission.ToXml()\n  fullName: CodeAccessPermission.ToXml()\n- uid: System.Security.CodeAccessPermission.Union(System.Security.IPermission)\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: CodeAccessPermission.Union(IPermission)\n  fullName: CodeAccessPermission.Union(IPermission)\n- uid: System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IPermission.Demand()\n  nameWithType: CodeAccessPermission.IPermission.Demand()\n  fullName: CodeAccessPermission.IPermission.Demand()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Assert()\n  nameWithType: CodeAccessPermission.IStackWalk.Assert()\n  fullName: CodeAccessPermission.IStackWalk.Assert()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Demand()\n  nameWithType: CodeAccessPermission.IStackWalk.Demand()\n  fullName: CodeAccessPermission.IStackWalk.Demand()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Deny()\n  nameWithType: CodeAccessPermission.IStackWalk.Deny()\n  fullName: CodeAccessPermission.IStackWalk.Deny()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.PermitOnly()\n  nameWithType: CodeAccessPermission.IStackWalk.PermitOnly()\n  fullName: CodeAccessPermission.IStackWalk.PermitOnly()\n- uid: System.Security.CodeAccessPermission.#ctor*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: CodeAccessPermission\n  nameWithType: CodeAccessPermission.CodeAccessPermission\n  fullName: CodeAccessPermission.CodeAccessPermission\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.Assert*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Assert\n  nameWithType: CodeAccessPermission.Assert\n  fullName: CodeAccessPermission.Assert\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.Copy*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Copy\n  nameWithType: CodeAccessPermission.Copy\n  fullName: CodeAccessPermission.Copy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.Demand*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Demand\n  nameWithType: CodeAccessPermission.Demand\n  fullName: CodeAccessPermission.Demand\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.Deny*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Deny\n  nameWithType: CodeAccessPermission.Deny\n  fullName: CodeAccessPermission.Deny\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.Equals*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Equals\n  nameWithType: CodeAccessPermission.Equals\n  fullName: CodeAccessPermission.Equals\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.FromXml*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: FromXml\n  nameWithType: CodeAccessPermission.FromXml\n  fullName: CodeAccessPermission.FromXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.GetHashCode*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: GetHashCode\n  nameWithType: CodeAccessPermission.GetHashCode\n  fullName: CodeAccessPermission.GetHashCode\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.Intersect*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: CodeAccessPermission.Intersect\n  fullName: CodeAccessPermission.Intersect\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.IsSubsetOf*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: CodeAccessPermission.IsSubsetOf\n  fullName: CodeAccessPermission.IsSubsetOf\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.PermitOnly*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: PermitOnly\n  nameWithType: CodeAccessPermission.PermitOnly\n  fullName: CodeAccessPermission.PermitOnly\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.RevertAll*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAll\n  nameWithType: CodeAccessPermission.RevertAll\n  fullName: CodeAccessPermission.RevertAll\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.RevertAssert*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAssert\n  nameWithType: CodeAccessPermission.RevertAssert\n  fullName: CodeAccessPermission.RevertAssert\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.RevertDeny*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertDeny\n  nameWithType: CodeAccessPermission.RevertDeny\n  fullName: CodeAccessPermission.RevertDeny\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.RevertPermitOnly*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertPermitOnly\n  nameWithType: CodeAccessPermission.RevertPermitOnly\n  fullName: CodeAccessPermission.RevertPermitOnly\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.ToString*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: ToString\n  nameWithType: CodeAccessPermission.ToString\n  fullName: CodeAccessPermission.ToString\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.ToXml*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: ToXml\n  nameWithType: CodeAccessPermission.ToXml\n  fullName: CodeAccessPermission.ToXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.Union*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Union\n  nameWithType: CodeAccessPermission.Union\n  fullName: CodeAccessPermission.Union\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.System#Security#IPermission#Demand*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.IPermission.Demand\n  nameWithType: CodeAccessPermission.System.Security.IPermission.Demand\n  fullName: CodeAccessPermission.System.Security.IPermission.Demand\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.IStackWalk.Assert\n  nameWithType: CodeAccessPermission.System.Security.IStackWalk.Assert\n  fullName: CodeAccessPermission.System.Security.IStackWalk.Assert\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.IStackWalk.Demand\n  nameWithType: CodeAccessPermission.System.Security.IStackWalk.Demand\n  fullName: CodeAccessPermission.System.Security.IStackWalk.Demand\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.IStackWalk.Deny\n  nameWithType: CodeAccessPermission.System.Security.IStackWalk.Deny\n  fullName: CodeAccessPermission.System.Security.IStackWalk.Deny\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly*\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: System.Security.IStackWalk.PermitOnly\n  nameWithType: CodeAccessPermission.System.Security.IStackWalk.PermitOnly\n  fullName: CodeAccessPermission.System.Security.IStackWalk.PermitOnly\n  monikers:\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security/CodeAccessPermission.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Security.IStackWalk\n  parent: System.Security\n  isExternal: false\n  name: IStackWalk\n  nameWithType: IStackWalk\n  fullName: System.Security.IStackWalk\n"}