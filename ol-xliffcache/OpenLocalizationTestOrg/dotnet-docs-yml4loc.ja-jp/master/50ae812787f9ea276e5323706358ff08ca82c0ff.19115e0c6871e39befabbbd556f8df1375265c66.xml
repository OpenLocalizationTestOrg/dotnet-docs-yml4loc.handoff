{"nodes":[{"content":"Adds supplementary information to a bookmark that enables it to access a subset of its scope handles, excluding handles that are not required.","nodes":[{"pos":[0,142],"content":"Adds supplementary information to a bookmark that enables it to access a subset of its scope handles, excluding handles that are not required.","nodes":[{"content":"Adds supplementary information to a bookmark that enables it to access a subset of its scope handles, excluding handles that are not required.","pos":[0,142]}]}],"pos":[810,953],"yaml":true},{"content":"Creates a new instance of the <xref href=\"System.Activities.ExclusiveHandle\"></xref> class.","nodes":[{"pos":[0,91],"content":"Creates a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Activities.ExclusiveHandle\"&gt;&lt;/xref&gt;</ph> class.","source":"Creates a new instance of the <xref href=\"System.Activities.ExclusiveHandle\"></xref> class."}],"pos":[2696,2788],"yaml":true},{"content":"Creates a list of default <xref href=\"System.Activities.BookmarkScopeHandle\"></xref> objects from handle variables in the specified handle initialization context.","nodes":[{"pos":[0,162],"content":"Creates a list of default <ph id=\"ph1\">&lt;xref href=\"System.Activities.BookmarkScopeHandle\"&gt;&lt;/xref&gt;</ph> objects from handle variables in the specified handle initialization context.","source":"Creates a list of default <xref href=\"System.Activities.BookmarkScopeHandle\"></xref> objects from handle variables in the specified handle initialization context."}],"pos":[4083,4246],"yaml":true},{"content":"The environment in which the handle is created.","nodes":[{"pos":[0,47],"content":"The environment in which the handle is created.","nodes":[{"content":"The environment in which the handle is created.","pos":[0,47]}]}],"pos":[4474,4522],"yaml":true},{"content":"Adds the specified bookmark scope handle to the <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> of <xref href=\"System.Activities.BookmarkScopeHandle\"></xref> objects using the specified context.","nodes":[{"pos":[0,219],"content":"Adds the specified bookmark scope handle to the <ph id=\"ph1\">&lt;xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Activities.BookmarkScopeHandle\"&gt;&lt;/xref&gt;</ph> objects using the specified context.","source":"Adds the specified bookmark scope handle to the <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> of <xref href=\"System.Activities.BookmarkScopeHandle\"></xref> objects using the specified context."}],"pos":[5950,6170],"yaml":true},{"content":"If this method is called after a bookmark has been created under this exclusive scope, a <xref:System.InvalidOperationException> will be thrown.","nodes":[{"pos":[0,144],"content":"If this method is called after a bookmark has been created under this exclusive scope, a <xref:System.InvalidOperationException> will be thrown.","nodes":[{"content":"If this method is called after a bookmark has been created under this exclusive scope, a <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown.","pos":[0,144],"source":"If this method is called after a bookmark has been created under this exclusive scope, a <xref:System.InvalidOperationException> will be thrown."}]}],"pos":[6181,6326],"yaml":true,"extradata":"MT"},{"content":"The environment in which the handle is created.","nodes":[{"pos":[0,47],"content":"The environment in which the handle is created.","nodes":[{"content":"The environment in which the handle is created.","pos":[0,47]}]}],"pos":[6598,6646],"yaml":true},{"content":"The token used to identify and access a group of bookmarks that operate under the same protocol in a workflow activity operation.","nodes":[{"pos":[0,129],"content":"The token used to identify and access a group of bookmarks that operate under the same protocol in a workflow activity operation.","nodes":[{"content":"The token used to identify and access a group of bookmarks that operate under the same protocol in a workflow activity operation.","pos":[0,129]}]}],"pos":[6745,6875],"yaml":true},{"content":"Gets a new or existing <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> of <xref href=\"System.Activities.BookmarkScopeHandle\"></xref> objects.","nodes":[{"pos":[0,166],"content":"Gets a new or existing <ph id=\"ph1\">&lt;xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Activities.BookmarkScopeHandle\"&gt;&lt;/xref&gt;</ph> objects.","source":"Gets a new or existing <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> of <xref href=\"System.Activities.BookmarkScopeHandle\"></xref> objects."}],"pos":[7963,8130],"yaml":true},{"content":"A read-only collection of bookmark scope handles.","nodes":[{"pos":[0,49],"content":"A read-only collection of bookmark scope handles.","nodes":[{"content":"A read-only collection of bookmark scope handles.","pos":[0,49]}]}],"pos":[8415,8465],"yaml":true},{"content":"Sets the registered bookmark scope handles back to the defaults.","nodes":[{"pos":[0,64],"content":"Sets the registered bookmark scope handles back to the defaults.","nodes":[{"content":"Sets the registered bookmark scope handles back to the defaults.","pos":[0,64]}]}],"pos":[9674,9739],"yaml":true},{"content":"If this method is called when there are bookmarks registered with the exclusive handle, a <xref:System.InvalidOperationException> will be thrown.","nodes":[{"pos":[0,145],"content":"If this method is called when there are bookmarks registered with the exclusive handle, a <xref:System.InvalidOperationException> will be thrown.","nodes":[{"content":"If this method is called when there are bookmarks registered with the exclusive handle, a <ph id=\"ph1\">&lt;xref:System.InvalidOperationException&gt;</ph> will be thrown.","pos":[0,145],"source":"If this method is called when there are bookmarks registered with the exclusive handle, a <xref:System.InvalidOperationException> will be thrown."}]}],"pos":[9750,9896],"yaml":true,"extradata":"MT"},{"content":"The environment in which the handle is created.","nodes":[{"pos":[0,47],"content":"The environment in which the handle is created.","nodes":[{"content":"The environment in which the handle is created.","pos":[0,47]}]}],"pos":[10100,10148],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.ExclusiveHandle\n  commentId: T:System.Activities.ExclusiveHandle\n  id: ExclusiveHandle\n  children:\n  - System.Activities.ExclusiveHandle.#ctor\n  - System.Activities.ExclusiveHandle.OnInitialize(System.Activities.HandleInitializationContext)\n  - System.Activities.ExclusiveHandle.RegisterBookmarkScope(System.Activities.NativeActivityContext,System.Activities.BookmarkScopeHandle)\n  - System.Activities.ExclusiveHandle.RegisteredBookmarkScopes\n  - System.Activities.ExclusiveHandle.Reinitialize(System.Activities.NativeActivityContext)\n  langs:\n  - csharp\n  name: ExclusiveHandle\n  nameWithType: ExclusiveHandle\n  fullName: System.Activities.ExclusiveHandle\n  type: Class\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Adds supplementary information to a bookmark that enables it to access a subset of its scope handles, excluding handles that are not required.\n  syntax:\n    content: >-\n      [System.Runtime.Serialization.DataContract]\n\n      public class ExclusiveHandle : System.Activities.Handle\n  inheritance:\n  - System.Object\n  - System.Activities.Handle\n  implements: []\n  inheritedMembers:\n  - System.Activities.Handle.ExecutionPropertyName\n  - System.Activities.Handle.OnUninitialize(System.Activities.HandleInitializationContext)\n  - System.Activities.Handle.Owner\n  - System.Activities.Handle.ThrowIfUninitialized\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.Serialization.DataContractAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/ExclusiveHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.ExclusiveHandle.#ctor\n  commentId: M:System.Activities.ExclusiveHandle.#ctor\n  id: '#ctor'\n  parent: System.Activities.ExclusiveHandle\n  langs:\n  - csharp\n  name: ExclusiveHandle()\n  nameWithType: ExclusiveHandle.ExclusiveHandle()\n  fullName: ExclusiveHandle.ExclusiveHandle()\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Creates a new instance of the <xref href=\"System.Activities.ExclusiveHandle\"></xref> class.\n  syntax:\n    content: public ExclusiveHandle ();\n    parameters: []\n  overload: System.Activities.ExclusiveHandle.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/ExclusiveHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.ExclusiveHandle.OnInitialize(System.Activities.HandleInitializationContext)\n  commentId: M:System.Activities.ExclusiveHandle.OnInitialize(System.Activities.HandleInitializationContext)\n  id: OnInitialize(System.Activities.HandleInitializationContext)\n  parent: System.Activities.ExclusiveHandle\n  langs:\n  - csharp\n  name: OnInitialize(HandleInitializationContext)\n  nameWithType: ExclusiveHandle.OnInitialize(HandleInitializationContext)\n  fullName: ExclusiveHandle.OnInitialize(HandleInitializationContext)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Creates a list of default <xref href=\"System.Activities.BookmarkScopeHandle\"></xref> objects from handle variables in the specified handle initialization context.\n  syntax:\n    content: protected override void OnInitialize (System.Activities.HandleInitializationContext context);\n    parameters:\n    - id: context\n      type: System.Activities.HandleInitializationContext\n      description: The environment in which the handle is created.\n  overload: System.Activities.ExclusiveHandle.OnInitialize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/ExclusiveHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.ExclusiveHandle.RegisterBookmarkScope(System.Activities.NativeActivityContext,System.Activities.BookmarkScopeHandle)\n  commentId: M:System.Activities.ExclusiveHandle.RegisterBookmarkScope(System.Activities.NativeActivityContext,System.Activities.BookmarkScopeHandle)\n  id: RegisterBookmarkScope(System.Activities.NativeActivityContext,System.Activities.BookmarkScopeHandle)\n  parent: System.Activities.ExclusiveHandle\n  langs:\n  - csharp\n  name: RegisterBookmarkScope(NativeActivityContext, BookmarkScopeHandle)\n  nameWithType: ExclusiveHandle.RegisterBookmarkScope(NativeActivityContext, BookmarkScopeHandle)\n  fullName: ExclusiveHandle.RegisterBookmarkScope(NativeActivityContext, BookmarkScopeHandle)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Adds the specified bookmark scope handle to the <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> of <xref href=\"System.Activities.BookmarkScopeHandle\"></xref> objects using the specified context.\n  remarks: If this method is called after a bookmark has been created under this exclusive scope, a <xref:System.InvalidOperationException> will be thrown.\n  syntax:\n    content: public void RegisterBookmarkScope (System.Activities.NativeActivityContext context, System.Activities.BookmarkScopeHandle bookmarkScopeHandle);\n    parameters:\n    - id: context\n      type: System.Activities.NativeActivityContext\n      description: The environment in which the handle is created.\n    - id: bookmarkScopeHandle\n      type: System.Activities.BookmarkScopeHandle\n      description: The token used to identify and access a group of bookmarks that operate under the same protocol in a workflow activity operation.\n  overload: System.Activities.ExclusiveHandle.RegisterBookmarkScope*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/ExclusiveHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.ExclusiveHandle.RegisteredBookmarkScopes\n  commentId: P:System.Activities.ExclusiveHandle.RegisteredBookmarkScopes\n  id: RegisteredBookmarkScopes\n  parent: System.Activities.ExclusiveHandle\n  langs:\n  - csharp\n  name: RegisteredBookmarkScopes\n  nameWithType: ExclusiveHandle.RegisteredBookmarkScopes\n  fullName: ExclusiveHandle.RegisteredBookmarkScopes\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Gets a new or existing <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> of <xref href=\"System.Activities.BookmarkScopeHandle\"></xref> objects.\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Activities.BookmarkScopeHandle> RegisteredBookmarkScopes { get; }\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Activities.BookmarkScopeHandle}\n      description: A read-only collection of bookmark scope handles.\n  overload: System.Activities.ExclusiveHandle.RegisteredBookmarkScopes*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/ExclusiveHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.ExclusiveHandle.Reinitialize(System.Activities.NativeActivityContext)\n  commentId: M:System.Activities.ExclusiveHandle.Reinitialize(System.Activities.NativeActivityContext)\n  id: Reinitialize(System.Activities.NativeActivityContext)\n  parent: System.Activities.ExclusiveHandle\n  langs:\n  - csharp\n  name: Reinitialize(NativeActivityContext)\n  nameWithType: ExclusiveHandle.Reinitialize(NativeActivityContext)\n  fullName: ExclusiveHandle.Reinitialize(NativeActivityContext)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Sets the registered bookmark scope handles back to the defaults.\n  remarks: If this method is called when there are bookmarks registered with the exclusive handle, a <xref:System.InvalidOperationException> will be thrown.\n  syntax:\n    content: public void Reinitialize (System.Activities.NativeActivityContext context);\n    parameters:\n    - id: context\n      type: System.Activities.NativeActivityContext\n      description: The environment in which the handle is created.\n  overload: System.Activities.ExclusiveHandle.Reinitialize*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/ExclusiveHandle.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Activities.Handle\n  parent: System.Activities\n  isExternal: false\n  name: Handle\n  nameWithType: Handle\n  fullName: System.Activities.Handle\n- uid: System.Activities.ExclusiveHandle.#ctor\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: ExclusiveHandle()\n  nameWithType: ExclusiveHandle.ExclusiveHandle()\n  fullName: ExclusiveHandle.ExclusiveHandle()\n- uid: System.Activities.ExclusiveHandle.OnInitialize(System.Activities.HandleInitializationContext)\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: OnInitialize(HandleInitializationContext)\n  nameWithType: ExclusiveHandle.OnInitialize(HandleInitializationContext)\n  fullName: ExclusiveHandle.OnInitialize(HandleInitializationContext)\n- uid: System.Activities.HandleInitializationContext\n  parent: System.Activities\n  isExternal: false\n  name: HandleInitializationContext\n  nameWithType: HandleInitializationContext\n  fullName: System.Activities.HandleInitializationContext\n- uid: System.Activities.ExclusiveHandle.RegisterBookmarkScope(System.Activities.NativeActivityContext,System.Activities.BookmarkScopeHandle)\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: RegisterBookmarkScope(NativeActivityContext, BookmarkScopeHandle)\n  nameWithType: ExclusiveHandle.RegisterBookmarkScope(NativeActivityContext, BookmarkScopeHandle)\n  fullName: ExclusiveHandle.RegisterBookmarkScope(NativeActivityContext, BookmarkScopeHandle)\n- uid: System.Activities.NativeActivityContext\n  parent: System.Activities\n  isExternal: false\n  name: NativeActivityContext\n  nameWithType: NativeActivityContext\n  fullName: System.Activities.NativeActivityContext\n- uid: System.Activities.BookmarkScopeHandle\n  parent: System.Activities\n  isExternal: false\n  name: BookmarkScopeHandle\n  nameWithType: BookmarkScopeHandle\n  fullName: System.Activities.BookmarkScopeHandle\n- uid: System.Activities.ExclusiveHandle.RegisteredBookmarkScopes\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: RegisteredBookmarkScopes\n  nameWithType: ExclusiveHandle.RegisteredBookmarkScopes\n  fullName: ExclusiveHandle.RegisteredBookmarkScopes\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<T>\n  nameWithType: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Activities.BookmarkScopeHandle}\n  parent: System.Collections.ObjectModel\n  isExternal: false\n  name: ReadOnlyCollection<BookmarkScopeHandle>\n  nameWithType: ReadOnlyCollection<BookmarkScopeHandle>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Activities.BookmarkScopeHandle>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.BookmarkScopeHandle\n    name: BookmarkScopeHandle\n    nameWithType: BookmarkScopeHandle\n    fullName: System.Activities.BookmarkScopeHandle\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Activities.ExclusiveHandle.Reinitialize(System.Activities.NativeActivityContext)\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: Reinitialize(NativeActivityContext)\n  nameWithType: ExclusiveHandle.Reinitialize(NativeActivityContext)\n  fullName: ExclusiveHandle.Reinitialize(NativeActivityContext)\n- uid: System.Activities.ExclusiveHandle.#ctor*\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: ExclusiveHandle\n  nameWithType: ExclusiveHandle.ExclusiveHandle\n  fullName: ExclusiveHandle.ExclusiveHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/ExclusiveHandle.xml\n- uid: System.Activities.ExclusiveHandle.OnInitialize*\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: OnInitialize\n  nameWithType: ExclusiveHandle.OnInitialize\n  fullName: ExclusiveHandle.OnInitialize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/ExclusiveHandle.xml\n- uid: System.Activities.ExclusiveHandle.RegisterBookmarkScope*\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: RegisterBookmarkScope\n  nameWithType: ExclusiveHandle.RegisterBookmarkScope\n  fullName: ExclusiveHandle.RegisterBookmarkScope\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/ExclusiveHandle.xml\n- uid: System.Activities.ExclusiveHandle.RegisteredBookmarkScopes*\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: RegisteredBookmarkScopes\n  nameWithType: ExclusiveHandle.RegisteredBookmarkScopes\n  fullName: ExclusiveHandle.RegisteredBookmarkScopes\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/ExclusiveHandle.xml\n- uid: System.Activities.ExclusiveHandle.Reinitialize*\n  parent: System.Activities.ExclusiveHandle\n  isExternal: false\n  name: Reinitialize\n  nameWithType: ExclusiveHandle.Reinitialize\n  fullName: ExclusiveHandle.Reinitialize\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/ExclusiveHandle.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Activities.Handle.ExecutionPropertyName\n  parent: System.Activities.Handle\n  isExternal: false\n  name: ExecutionPropertyName\n  nameWithType: Handle.ExecutionPropertyName\n  fullName: Handle.ExecutionPropertyName\n- uid: System.Activities.Handle.OnUninitialize(System.Activities.HandleInitializationContext)\n  parent: System.Activities.Handle\n  isExternal: false\n  name: OnUninitialize(HandleInitializationContext)\n  nameWithType: Handle.OnUninitialize(HandleInitializationContext)\n  fullName: Handle.OnUninitialize(HandleInitializationContext)\n- uid: System.Activities.Handle.Owner\n  parent: System.Activities.Handle\n  isExternal: false\n  name: Owner\n  nameWithType: Handle.Owner\n  fullName: Handle.Owner\n- uid: System.Activities.Handle.ThrowIfUninitialized\n  parent: System.Activities.Handle\n  isExternal: false\n  name: ThrowIfUninitialized()\n  nameWithType: Handle.ThrowIfUninitialized()\n  fullName: Handle.ThrowIfUninitialized()\n"}