{"nodes":[{"content":"Provides a WPF core-level base class for content elements. Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model.","nodes":[{"pos":[0,205],"content":"Provides a WPF core-level base class for content elements. Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model.","nodes":[{"content":"Provides a WPF core-level base class for content elements. Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model.","pos":[0,205],"nodes":[{"content":"Provides a WPF core-level base class for content elements.","pos":[0,58]},{"content":"Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model.","pos":[59,205]}]}]}],"pos":[21503,21709],"yaml":true},{"content":"<xref:System.Windows.ContentElement> defines the following common content characteristics:  \n  \n-   Input: All <xref:System.Windows.ContentElement> derived classes provide support for basic input capture from keyboard, mouse, drag-and-drop operations, stylus controls, and accelerators.  \n  \n-   Focus: All <xref:System.Windows.ContentElement> derived classes are potentially focusable. (However, the default focusable state for the <xref:System.Windows.ContentElement> base class is `false`. For details on how to make a <xref:System.Windows.ContentElement> focusable, see <xref:System.Windows.ContentElement.Focusable%2A>.) In addition, this class contains [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] that you can use for traversing the focus across related elements.  \n  \n-   Events: <xref:System.Windows.ContentElement> includes events that are related to input and focus; it also includes events for changes in state. In many cases, the <xref:System.Windows.ContentElement> events are routed events. In some cases, routed events have both tunneling and bubbling routing strategies, raised as separate events in response to the same state or condition. Also, <xref:System.Windows.ContentElement> defines [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] that can raise routed events and that can add or remove handlers to events.  \n  \n <xref:System.Windows.ContentElement> shares many common [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] with <xref:System.Windows.UIElement>. These common [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] do not come from a shared class inheritance. But they do share common naming, similar behavior, and similar internal implementation of [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in each class. The similarity is because <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are each classes that are an element base, although each has different intentions for its markup object model behavior.  \n  \n In particular, <xref:System.Windows.UIElement> descends from <xref:System.Windows.Media.Visual>, which provides the lower-level graphics support for rendering a <xref:System.Windows.ContentElement> to a rectangular region within a composited window, whereas <xref:System.Windows.ContentElement> defers rendering so that concepts more common to document scenarios, such as flow and wrapping, are more easily supported. These two related classes also implement the common interfaces <xref:System.Windows.IInputElement> and <xref:System.Windows.Media.Animation.IAnimatable>.","nodes":[{"pos":[0,90],"content":"<xref:System.Windows.ContentElement> defines the following common content characteristics:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> defines the following common content characteristics:","pos":[0,90],"source":"<xref:System.Windows.ContentElement> defines the following common content characteristics:"}]},{"pos":[100,286],"content":"Input: All <xref:System.Windows.ContentElement> derived classes provide support for basic input capture from keyboard, mouse, drag-and-drop operations, stylus controls, and accelerators.","nodes":[{"content":"Input: All <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes provide support for basic input capture from keyboard, mouse, drag-and-drop operations, stylus controls, and accelerators.","pos":[0,186],"source":"Input: All <xref:System.Windows.ContentElement> derived classes provide support for basic input capture from keyboard, mouse, drag-and-drop operations, stylus controls, and accelerators."}]},{"pos":[296,801],"content":"Focus: All <xref:System.Windows.ContentElement> derived classes are potentially focusable. (However, the default focusable state for the <xref:System.Windows.ContentElement> base class is `false`. For details on how to make a <xref:System.Windows.ContentElement> focusable, see <xref:System.Windows.ContentElement.Focusable%2A>.) In addition, this class contains [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] that you can use for traversing the focus across related elements.","nodes":[{"content":"Focus: All <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes are potentially focusable.","pos":[0,90],"source":"Focus: All <xref:System.Windows.ContentElement> derived classes are potentially focusable."},{"content":"(However, the default focusable state for the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> base class is <ph id=\"ph2\">`false`</ph>.","pos":[91,196],"source":" (However, the default focusable state for the <xref:System.Windows.ContentElement> base class is `false`."},{"content":"For details on how to make a <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> focusable, see <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph>.) In addition, this class contains <ph id=\"ph3\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> that you can use for traversing the focus across related elements.","pos":[197,505],"source":" For details on how to make a <xref:System.Windows.ContentElement> focusable, see <xref:System.Windows.ContentElement.Focusable%2A>.) In addition, this class contains [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] that you can use for traversing the focus across related elements."}]},{"pos":[811,1393],"content":"Events: <xref:System.Windows.ContentElement> includes events that are related to input and focus; it also includes events for changes in state. In many cases, the <xref:System.Windows.ContentElement> events are routed events. In some cases, routed events have both tunneling and bubbling routing strategies, raised as separate events in response to the same state or condition. Also, <xref:System.Windows.ContentElement> defines [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] that can raise routed events and that can add or remove handlers to events.","nodes":[{"content":"Events: <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> includes events that are related to input and focus; it also includes events for changes in state.","pos":[0,143],"source":"Events: <xref:System.Windows.ContentElement> includes events that are related to input and focus; it also includes events for changes in state."},{"content":"In many cases, the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> events are routed events.","pos":[144,225],"source":" In many cases, the <xref:System.Windows.ContentElement> events are routed events."},{"content":"In some cases, routed events have both tunneling and bubbling routing strategies, raised as separate events in response to the same state or condition.","pos":[226,377]},{"content":"Also, <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> defines <ph id=\"ph2\">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> that can raise routed events and that can add or remove handlers to events.","pos":[378,582],"source":" Also, <xref:System.Windows.ContentElement> defines [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] that can raise routed events and that can add or remove handlers to events."}]},{"pos":[1400,2109],"content":"<xref:System.Windows.ContentElement> shares many common [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] with <xref:System.Windows.UIElement>. These common [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] do not come from a shared class inheritance. But they do share common naming, similar behavior, and similar internal implementation of [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in each class. The similarity is because <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are each classes that are an element base, although each has different intentions for its markup object model behavior.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> shares many common <ph id=\"ph2\">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> with <ph id=\"ph3\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[0,171],"source":"<xref:System.Windows.ContentElement> shares many common [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] with <xref:System.Windows.UIElement>."},{"content":"These common <ph id=\"ph1\">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> do not come from a shared class inheritance.","pos":[172,307],"source":" These common [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] do not come from a shared class inheritance."},{"content":"But they do share common naming, similar behavior, and similar internal implementation of <ph id=\"ph1\">[!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]</ph> in each class.","pos":[308,490],"source":" But they do share common naming, similar behavior, and similar internal implementation of [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in each class."},{"content":"The similarity is because <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> are each classes that are an element base, although each has different intentions for its markup object model behavior.","pos":[491,709],"source":" The similarity is because <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are each classes that are an element base, although each has different intentions for its markup object model behavior."}]},{"pos":[2116,2687],"content":"In particular, <xref:System.Windows.UIElement> descends from <xref:System.Windows.Media.Visual>, which provides the lower-level graphics support for rendering a <xref:System.Windows.ContentElement> to a rectangular region within a composited window, whereas <xref:System.Windows.ContentElement> defers rendering so that concepts more common to document scenarios, such as flow and wrapping, are more easily supported. These two related classes also implement the common interfaces <xref:System.Windows.IInputElement> and <xref:System.Windows.Media.Animation.IAnimatable>.","nodes":[{"content":"In particular, <xref:System.Windows.UIElement> descends from <xref:System.Windows.Media.Visual>, which provides the lower-level graphics support for rendering a <xref:System.Windows.ContentElement> to a rectangular region within a composited window, whereas <xref:System.Windows.ContentElement> defers rendering so that concepts more common to document scenarios, such as flow and wrapping, are more easily supported. These two related classes also implement the common interfaces <xref:System.Windows.IInputElement> and <xref:System.Windows.Media.Animation.IAnimatable>.","pos":[0,571],"nodes":[{"content":"In particular, <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> descends from <ph id=\"ph2\">&lt;xref:System.Windows.Media.Visual&gt;</ph>, which provides the lower-level graphics support for rendering a <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> to a rectangular region within a composited window, whereas <ph id=\"ph4\">&lt;xref:System.Windows.ContentElement&gt;</ph> defers rendering so that concepts more common to document scenarios, such as flow and wrapping, are more easily supported.","pos":[0,417],"source":"In particular, <xref:System.Windows.UIElement> descends from <xref:System.Windows.Media.Visual>, which provides the lower-level graphics support for rendering a <xref:System.Windows.ContentElement> to a rectangular region within a composited window, whereas <xref:System.Windows.ContentElement> defers rendering so that concepts more common to document scenarios, such as flow and wrapping, are more easily supported."},{"content":"These two related classes also implement the common interfaces <ph id=\"ph1\">&lt;xref:System.Windows.IInputElement&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Media.Animation.IAnimatable&gt;</ph>.","pos":[418,571],"source":" These two related classes also implement the common interfaces <xref:System.Windows.IInputElement> and <xref:System.Windows.Media.Animation.IAnimatable>."}]}]}],"pos":[21720,24420],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.ContentElement\"></xref> class.","nodes":[{"pos":[0,91],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Windows.ContentElement\"></xref> class."}],"pos":[27418,27510],"yaml":true},{"content":"Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.","nodes":[{"pos":[0,126],"content":"Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.","nodes":[{"content":"Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.","pos":[0,126]}]}],"pos":[28716,28843],"yaml":true},{"content":"You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.  \n  \n You typically use this method to provide the implementation of the \"add\" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.","nodes":[{"pos":[0,298],"content":"You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.","nodes":[{"content":"You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.","pos":[0,298],"nodes":[{"content":"You can add the same handler for the same event multiple times without raising an exception.","pos":[0,92]},{"content":"However, the handler is actually invoked multiple times when the event is handled.","pos":[93,175]},{"content":"Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.","pos":[176,298]}]}]},{"pos":[305,499],"content":"You typically use this method to provide the implementation of the \"add\" accessor for the <ph id=\"ph1\">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.","source":"You typically use this method to provide the implementation of the \"add\" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event."}],"pos":[28854,29360],"yaml":true,"extradata":"MT"},{"content":"An identifier for the routed event to be handled.","nodes":[{"pos":[0,49],"content":"An identifier for the routed event to be handled.","nodes":[{"content":"An identifier for the routed event to be handled.","pos":[0,49]}]}],"pos":[29562,29612],"yaml":true},{"content":"A reference to the handler implementation.","nodes":[{"pos":[0,42],"content":"A reference to the handler implementation.","nodes":[{"content":"A reference to the handler implementation.","pos":[0,42]}]}],"pos":[29677,29720],"yaml":true},{"content":"Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <code>handledEventsToo</code> as `true` to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.","nodes":[{"pos":[0,313],"content":"Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <code>handledEventsToo</code> as `true` to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.","nodes":[{"content":"Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.","pos":[0,126]},{"content":"Specify <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">handledEventsToo</ph><ept id=\"p1\">&lt;/code&gt;</ept> as <ph id=\"ph2\">`true`</ph> to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.","pos":[127,313],"source":" Specify <code>handledEventsToo</code> as `true` to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route."}]}],"pos":[30957,31271],"yaml":true},{"content":"Processing low-level input events in a practical way is a complex task. Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event. Generally, a control will only mark a platform input event as handled if there is some design intention for doing so. In certain scenarios, those design intentions might not be what your particular handling of the input event requires. It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate. But you should not do this routinely. Invoking handlers in response to all events even if handled will complicate your own application event processing logic. You may see a decrease in performance if the handler logic is substantial. You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.  \n  \n Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative. For example, if <xref:System.Windows.ContentElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> instead.  \n  \n You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.  \n  \n You typically use this method to provide the implementation of the \"add\" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.","nodes":[{"pos":[0,1021],"content":"Processing low-level input events in a practical way is a complex task. Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event. Generally, a control will only mark a platform input event as handled if there is some design intention for doing so. In certain scenarios, those design intentions might not be what your particular handling of the input event requires. It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate. But you should not do this routinely. Invoking handlers in response to all events even if handled will complicate your own application event processing logic. You may see a decrease in performance if the handler logic is substantial. You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.","nodes":[{"content":"Processing low-level input events in a practical way is a complex task.","pos":[0,71]},{"content":"Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event.","pos":[72,197]},{"content":"Generally, a control will only mark a platform input event as handled if there is some design intention for doing so.","pos":[198,315]},{"content":"In certain scenarios, those design intentions might not be what your particular handling of the input event requires.","pos":[316,433]},{"content":"It is for these scenarios that registering handlers with <ph id=\"ph1\">`handledEventsToo`</ph> as <ph id=\"ph2\">`true`</ph> is appropriate.","pos":[434,535],"source":" It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate."},{"content":"But you should not do this routinely.","pos":[536,573]},{"content":"Invoking handlers in response to all events even if handled will complicate your own application event processing logic.","pos":[574,694]},{"content":"You may see a decrease in performance if the handler logic is substantial.","pos":[695,769]},{"content":"You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.","pos":[770,1021]}]},{"pos":[1028,1389],"content":"Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative. For example, if <xref:System.Windows.ContentElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> instead.","nodes":[{"content":"Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative. For example, if <xref:System.Windows.ContentElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> instead.","pos":[0,361],"nodes":[{"content":"Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative.","pos":[0,140]},{"content":"For example, if <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> is marked handled by class handling, you might be able to add handlers for <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> instead.","pos":[141,361],"source":" For example, if <xref:System.Windows.ContentElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> instead."}]}]},{"pos":[1396,1694],"content":"You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.","nodes":[{"content":"You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.","pos":[0,298],"nodes":[{"content":"You can add the same handler for the same event multiple times without raising an exception.","pos":[0,92]},{"content":"However, the handler is actually invoked multiple times when the event is handled.","pos":[93,175]},{"content":"Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.","pos":[176,298]}]}]},{"pos":[1701,1895],"content":"You typically use this method to provide the implementation of the \"add\" accessor for the <ph id=\"ph1\">[!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)]</ph> event access pattern of a custom routed event.","source":"You typically use this method to provide the implementation of the \"add\" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event."}],"pos":[31282,33188],"yaml":true,"extradata":"MT"},{"content":"An identifier for the.routed event to be handled.","nodes":[{"pos":[0,49],"content":"An identifier for the.routed event to be handled.","nodes":[{"content":"An identifier for the.routed event to be handled.","pos":[0,49]}]}],"pos":[34146,34196],"yaml":true},{"content":"A reference to the handler implementation.","nodes":[{"pos":[0,42],"content":"A reference to the handler implementation.","nodes":[{"content":"A reference to the handler implementation.","pos":[0,42]}]}],"pos":[34261,34304],"yaml":true},{"content":"`true` to register the handler such that it is invoked even when the routed event is marked handled in its event data; `false` to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.  \n  \n The default is `false`.  \n  \n Do not routinely ask to rehandle a routed event.","nodes":[{"pos":[0,252],"content":"<ph id=\"ph1\">`true`</ph> to register the handler such that it is invoked even when the routed event is marked handled in its event data; <ph id=\"ph2\">`false`</ph> to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.","source":"`true` to register the handler such that it is invoked even when the routed event is marked handled in its event data; `false` to register the handler with the default condition that it will not be invoked if the routed event is already marked handled."},{"pos":[259,282],"content":"The default is <ph id=\"ph1\">`false`</ph>.","source":"The default is `false`."},{"pos":[289,337],"content":"Do not routinely ask to rehandle a routed event.","nodes":[{"content":"Do not routinely ask to rehandle a routed event.","pos":[0,48]}]}],"pos":[34377,34721],"yaml":true},{"content":"Adds handlers to the specified <xref href=\"System.Windows.EventRoute\"></xref> for the current <xref href=\"System.Windows.ContentElement\"></xref> event handler collection.","nodes":[{"pos":[0,170],"content":"Adds handlers to the specified <ph id=\"ph1\">&lt;xref href=\"System.Windows.EventRoute\"&gt;&lt;/xref&gt;</ph> for the current <ph id=\"ph2\">&lt;xref href=\"System.Windows.ContentElement\"&gt;&lt;/xref&gt;</ph> event handler collection.","source":"Adds handlers to the specified <xref href=\"System.Windows.EventRoute\"></xref> for the current <xref href=\"System.Windows.ContentElement\"></xref> event handler collection."}],"pos":[35976,36147],"yaml":true},{"content":"Use this method for content host elements (regardless whether they implement <xref:System.Windows.IContentHost>) in order to add handlers for the content host child elements to the host <xref:System.Windows.EventRoute>.","nodes":[{"pos":[0,219],"content":"Use this method for content host elements (regardless whether they implement <xref:System.Windows.IContentHost>) in order to add handlers for the content host child elements to the host <xref:System.Windows.EventRoute>.","nodes":[{"content":"Use this method for content host elements (regardless whether they implement <ph id=\"ph1\">&lt;xref:System.Windows.IContentHost&gt;</ph>) in order to add handlers for the content host child elements to the host <ph id=\"ph2\">&lt;xref:System.Windows.EventRoute&gt;</ph>.","pos":[0,219],"source":"Use this method for content host elements (regardless whether they implement <xref:System.Windows.IContentHost>) in order to add handlers for the content host child elements to the host <xref:System.Windows.EventRoute>."}]}],"pos":[36158,36378],"yaml":true,"extradata":"MT"},{"content":"The event route that handlers are added to.","nodes":[{"pos":[0,43],"content":"The event route that handlers are added to.","nodes":[{"content":"The event route that handlers are added to.","pos":[0,43]}]}],"pos":[36587,36631],"yaml":true},{"content":"The event data that is used to add the handlers. This method uses the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of the arguments to create the handlers.","nodes":[{"pos":[0,183],"content":"The event data that is used to add the handlers. This method uses the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of the arguments to create the handlers.","nodes":[{"content":"The event data that is used to add the handlers.","pos":[0,48]},{"content":"This method uses the <ph id=\"ph1\">&lt;xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"&gt;&lt;/xref&gt;</ph> property of the arguments to create the handlers.","pos":[49,183],"source":" This method uses the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of the arguments to create the handlers."}]}],"pos":[36705,36889],"yaml":true},{"content":"Gets or sets a value that indicates whether this element can be used as the target of a drag-and-drop operation.","nodes":[{"pos":[0,112],"content":"Gets or sets a value that indicates whether this element can be used as the target of a drag-and-drop operation.","nodes":[{"content":"Gets or sets a value that indicates whether this element can be used as the target of a drag-and-drop operation.","pos":[0,112]}]}],"pos":[37854,37967],"yaml":true},{"content":"Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.ContentElement.AllowDrop%2A> to  `true`. Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.ContentElement> or any other base element class. Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior, but no <xref:System.Windows.ContentElement> derived classes have such a behavior. For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  \n  \n <xref:System.Windows.FrameworkContentElement> overrides the metadata for this dependency property in its implementation. Specifically, <xref:System.Windows.FrameworkContentElement> designates that this property allows property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata). Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.ContentElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from that parent element is assigned to all unassigned child elements by the property system. This means that you can specify whether to allow drop operations at the root element and then propagate the value to all <xref:System.Windows.FrameworkContentElement> child elements that have not specifically assigned it a value of `false`.  \n  \n<a name=\"dependencyPropertyInfo_AllowDrop\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.AllowDropProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,647],"content":"Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.ContentElement.AllowDrop%2A> to  `true`. Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.ContentElement> or any other base element class. Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior, but no <xref:System.Windows.ContentElement> derived classes have such a behavior. For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).","nodes":[{"content":"Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> to  <ph id=\"ph2\">`true`</ph>.","pos":[0,158],"source":"Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.ContentElement.AllowDrop%2A> to  `true`."},{"content":"Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> or any other base element class.","pos":[159,336],"source":" Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.ContentElement> or any other base element class."},{"content":"Certain controls, for example, <ph id=\"ph1\">&lt;xref:System.Windows.Controls.RichTextBox&gt;</ph>, do have a default behavior, but no <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes have such a behavior.","pos":[337,521],"source":" Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior, but no <xref:System.Windows.ContentElement> derived classes have such a behavior."},{"content":"For more information on drag and drop, see <bpt id=\"p1\">[</bpt>Drag and Drop Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)</ept>.","pos":[522,647],"source":" For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md)."}]},{"pos":[654,1659],"content":"<xref:System.Windows.FrameworkContentElement> overrides the metadata for this dependency property in its implementation. Specifically, <xref:System.Windows.FrameworkContentElement> designates that this property allows property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata). Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.ContentElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from that parent element is assigned to all unassigned child elements by the property system. This means that you can specify whether to allow drop operations at the root element and then propagate the value to all <xref:System.Windows.FrameworkContentElement> child elements that have not specifically assigned it a value of `false`.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> overrides the metadata for this dependency property in its implementation.","pos":[0,120],"source":"<xref:System.Windows.FrameworkContentElement> overrides the metadata for this dependency property in its implementation."},{"content":"Specifically, <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> designates that this property allows property value inheritance (<ph id=\"ph2\">&lt;xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A&gt;</ph> is <ph id=\"ph3\">`true`</ph> in metadata).","pos":[121,329],"source":" Specifically, <xref:System.Windows.FrameworkContentElement> designates that this property allows property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata)."},{"content":"Property value inheritance in this context means that if there are child elements with no other value for <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AllowDrop%2A&gt;</ph> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from that parent element is assigned to all unassigned child elements by the property system.","pos":[330,764],"source":" Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.ContentElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from that parent element is assigned to all unassigned child elements by the property system."},{"content":"This means that you can specify whether to allow drop operations at the root element and then propagate the value to all <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> child elements that have not specifically assigned it a value of <ph id=\"ph2\">`false`</ph>.","pos":[765,1005],"source":" This means that you can specify whether to allow drop operations at the root element and then propagate the value to all <xref:System.Windows.FrameworkContentElement> child elements that have not specifically assigned it a value of `false`."}]},{"pos":[1719,1750],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[1771,1787],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1788,1842],"content":"<xref:System.Windows.ContentElement.AllowDropProperty>","nodes":[]},{"pos":[1847,1880],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1881,1885],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[37978,39879],"yaml":true,"extradata":"MT"},{"content":"`true` if this element can be used as the target of a drag-and-drop operation; otherwise, `false`. The default value is `false`.","nodes":[{"pos":[0,128],"content":"`true` if this element can be used as the target of a drag-and-drop operation; otherwise, `false`. The default value is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if this element can be used as the target of a drag-and-drop operation; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,98],"source":"`true` if this element can be used as the target of a drag-and-drop operation; otherwise, `false`."},{"content":"The default value is <ph id=\"ph1\">`false`</ph>.","pos":[99,128],"source":" The default value is `false`."}]}],"pos":[40312,40443],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.AllowDrop\"></xref> dependency property.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.AllowDrop\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.AllowDrop\"></xref> dependency property."}],"pos":[41447,41544],"yaml":true},{"content":"Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.","nodes":[{"pos":[0,145],"content":"Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.","nodes":[{"content":"Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.","pos":[0,145],"nodes":[{"content":"Applies an animation to a specified dependency property on this element.","pos":[0,72]},{"content":"Any existing animations are stopped and replaced with the new animation.","pos":[73,145]}]}]}],"pos":[43038,43184],"yaml":true},{"content":"To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.","nodes":[{"pos":[0,331],"content":"To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.","nodes":[{"content":"To remove an animation from a property, specify the identifier for that property as <ph id=\"ph1\">`dp`</ph> and specify <ph id=\"ph2\">`clock`</ph> as <ph id=\"ph3\">`null`</ph>.","pos":[0,119],"source":"To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`."},{"content":"This removes the animation and the animated property is set to its base value.","pos":[120,198]},{"content":"However, the originally associated animation clock is not stopped.","pos":[199,265]},{"content":"Any other animations assigned to that clock will continue to run.","pos":[266,331]}]}],"pos":[43195,43527],"yaml":true,"extradata":"MT"},{"content":"The identifier for the property to animate.","nodes":[{"pos":[0,43],"content":"The identifier for the property to animate.","nodes":[{"content":"The identifier for the property to animate.","pos":[0,43]}]}],"pos":[43769,43813],"yaml":true},{"content":"The animation clock that controls and declares the animation.","nodes":[{"pos":[0,61],"content":"The animation clock that controls and declares the animation.","nodes":[{"content":"The animation clock that controls and declares the animation.","pos":[0,61]}]}],"pos":[43906,43968],"yaml":true},{"content":"Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.","nodes":[{"pos":[0,162],"content":"Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.","nodes":[{"content":"Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.","pos":[0,162]}]}],"pos":[45538,45701],"yaml":true},{"content":"To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.","nodes":[{"pos":[0,331],"content":"To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.","nodes":[{"content":"To remove an animation from a property, specify the identifier for that property as <ph id=\"ph1\">`dp`</ph> and specify <ph id=\"ph2\">`clock`</ph> as <ph id=\"ph3\">`null`</ph>.","pos":[0,119],"source":"To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`."},{"content":"This removes the animation and the animated property is set to its base value.","pos":[120,198]},{"content":"However, the originally associated animation clock is not stopped.","pos":[199,265]},{"content":"Any other animations assigned to that clock will continue to run.","pos":[266,331]}]}],"pos":[45712,46044],"yaml":true,"extradata":"MT"},{"content":"The property to animate.","nodes":[{"pos":[0,24],"content":"The property to animate.","nodes":[{"content":"The property to animate.","pos":[0,24]}]}],"pos":[46350,46375],"yaml":true},{"content":"The animation clock that controls and declares the animation.","nodes":[{"pos":[0,61],"content":"The animation clock that controls and declares the animation.","nodes":[{"content":"The animation clock that controls and declares the animation.","pos":[0,61]}]}],"pos":[46468,46530],"yaml":true},{"content":"A value of the enumeration. The default is <xref href=\"System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace\"></xref>, which will stop any existing animation and replace with the new one.","nodes":[{"pos":[0,199],"content":"A value of the enumeration. The default is <xref href=\"System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace\"></xref>, which will stop any existing animation and replace with the new one.","nodes":[{"content":"A value of the enumeration.","pos":[0,27]},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace\"&gt;&lt;/xref&gt;</ph>, which will stop any existing animation and replace with the new one.","pos":[28,199],"source":" The default is <xref href=\"System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace\"></xref>, which will stop any existing animation and replace with the new one."}]}],"pos":[46634,46834],"yaml":true},{"content":"Gets a value that indicates whether at least one touch is captured to this element.","nodes":[{"pos":[0,83],"content":"Gets a value that indicates whether at least one touch is captured to this element.","nodes":[{"content":"Gets a value that indicates whether at least one touch is captured to this element.","pos":[0,83]}]}],"pos":[47875,47959],"yaml":true},{"content":"`true` if at least one touch is captured to this element; otherwise, `false`.","nodes":[{"pos":[0,77],"content":"<ph id=\"ph1\">`true`</ph> if at least one touch is captured to this element; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if at least one touch is captured to this element; otherwise, `false`."}],"pos":[48083,48163],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.AreAnyTouchesCaptured\"></xref> dependency property.","nodes":[{"pos":[0,108],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.AreAnyTouchesCaptured\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.AreAnyTouchesCaptured\"></xref> dependency property."}],"pos":[49251,49360],"yaml":true},{"content":"Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.","nodes":[{"pos":[0,127],"content":"Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.","nodes":[{"content":"Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.","pos":[0,127]}]}],"pos":[50565,50693],"yaml":true},{"content":"`true` if at least one touch is captured to this element or any child elements in its visual tree; otherwise, `false`.","nodes":[{"pos":[0,118],"content":"<ph id=\"ph1\">`true`</ph> if at least one touch is captured to this element or any child elements in its visual tree; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if at least one touch is captured to this element or any child elements in its visual tree; otherwise, `false`."}],"pos":[50823,50944],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.AreAnyTouchesCapturedWithin\"></xref> dependency property.","nodes":[{"pos":[0,114],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.AreAnyTouchesCapturedWithin\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.AreAnyTouchesCapturedWithin\"></xref> dependency property."}],"pos":[52074,52189],"yaml":true},{"content":"Gets a value that indicates whether at least one touch is pressed over this element.","nodes":[{"pos":[0,84],"content":"Gets a value that indicates whether at least one touch is pressed over this element.","nodes":[{"content":"Gets a value that indicates whether at least one touch is pressed over this element.","pos":[0,84]}]}],"pos":[53388,53473],"yaml":true},{"content":"`true` if at least one touch is pressed over this element; otherwise, `false`.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">`true`</ph> if at least one touch is pressed over this element; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if at least one touch is pressed over this element; otherwise, `false`."}],"pos":[53601,53682],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.AreAnyTouchesDirectlyOver\"></xref> dependency property.","nodes":[{"pos":[0,112],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.AreAnyTouchesDirectlyOver\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.AreAnyTouchesDirectlyOver\"></xref> dependency property."}],"pos":[54776,54889],"yaml":true},{"content":"Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.","nodes":[{"pos":[0,125],"content":"Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.","nodes":[{"content":"Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.","pos":[0,125]}]}],"pos":[56038,56164],"yaml":true},{"content":"`true` if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, `false`.","nodes":[{"pos":[0,119],"content":"<ph id=\"ph1\">`true`</ph> if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, `false`."}],"pos":[56284,56406],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.AreAnyTouchesOver\"></xref> dependency property.","nodes":[{"pos":[0,104],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.AreAnyTouchesOver\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.AreAnyTouchesOver\"></xref> dependency property."}],"pos":[57466,57571],"yaml":true},{"content":"Starts an animation for a specified animated property on this element.","nodes":[{"pos":[0,70],"content":"Starts an animation for a specified animated property on this element.","nodes":[{"content":"Starts an animation for a specified animated property on this element.","pos":[0,70]}]}],"pos":[59061,59132],"yaml":true},{"content":"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.  \n  \n If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.  \n  \n If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.","nodes":[{"pos":[0,181],"content":"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.","nodes":[{"content":"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.","pos":[0,181]}]},{"pos":[188,368],"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> for <ph id=\"ph2\">`animation`</ph> is <ph id=\"ph3\">`null`</ph>, then any current animations are removed and the current value of the property is held.","source":"If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held."},{"pos":[375,651],"content":"If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.","nodes":[{"content":"If the entire <ph id=\"ph1\">`animation`</ph> value is <ph id=\"ph2\">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.","pos":[0,137],"source":"If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value."},{"content":"However, the originally associated animation timeline is not stopped.","pos":[138,207]},{"content":"Any other animations assigned to that timeline will continue to run.","pos":[208,276]}]}],"pos":[59143,59801],"yaml":true,"extradata":"MT"},{"content":"The property to animate, which is specified as a dependency property identifier.","nodes":[{"pos":[0,80],"content":"The property to animate, which is specified as a dependency property identifier.","nodes":[{"content":"The property to animate, which is specified as a dependency property identifier.","pos":[0,80]}]}],"pos":[60045,60126],"yaml":true},{"content":"The timeline of the animation to start.","nodes":[{"pos":[0,39],"content":"The timeline of the animation to start.","nodes":[{"content":"The timeline of the animation to start.","pos":[0,39]}]}],"pos":[60226,60266],"yaml":true},{"content":"Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.","nodes":[{"pos":[0,170],"content":"Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.","nodes":[{"content":"Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.","pos":[0,170]}]}],"pos":[61819,61990],"yaml":true},{"content":"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.  \n  \n If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.  \n  \n If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.","nodes":[{"pos":[0,181],"content":"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.","nodes":[{"content":"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.","pos":[0,181]}]},{"pos":[188,368],"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Media.Animation.Timeline.BeginTime%2A&gt;</ph> for <ph id=\"ph2\">`animation`</ph> is <ph id=\"ph3\">`null`</ph>, then any current animations are removed and the current value of the property is held.","source":"If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held."},{"pos":[375,651],"content":"If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.","nodes":[{"content":"If the entire <ph id=\"ph1\">`animation`</ph> value is <ph id=\"ph2\">`null`</ph>, all animations are removed from the property and the property value reverts to its base value.","pos":[0,137],"source":"If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value."},{"content":"However, the originally associated animation timeline is not stopped.","pos":[138,207]},{"content":"Any other animations assigned to that timeline will continue to run.","pos":[208,276]}]}],"pos":[62001,62659],"yaml":true,"extradata":"MT"},{"content":"The property to animate, which is specified as the dependency property identifier.","nodes":[{"pos":[0,82],"content":"The property to animate, which is specified as the dependency property identifier.","nodes":[{"content":"The property to animate, which is specified as the dependency property identifier.","pos":[0,82]}]}],"pos":[62967,63050],"yaml":true},{"content":"The timeline of the animation to be applied.","nodes":[{"pos":[0,44],"content":"The timeline of the animation to be applied.","nodes":[{"content":"The timeline of the animation to be applied.","pos":[0,44]}]}],"pos":[63150,63195],"yaml":true},{"content":"A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.","nodes":[{"pos":[0,158],"content":"A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.","nodes":[{"content":"A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.","pos":[0,158]}]}],"pos":[63299,63458],"yaml":true},{"content":"Attempts to force capture of the mouse to this element.","nodes":[{"pos":[0,55],"content":"Attempts to force capture of the mouse to this element.","nodes":[{"content":"Attempts to force capture of the mouse to this element.","pos":[0,55]}]}],"pos":[64444,64500],"yaml":true},{"content":"To be captured, an element must be enabled. Check whether <xref:System.Windows.ContentElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.ContentElement.CaptureMouse%2A>.  \n  \n If calling <xref:System.Windows.ContentElement.CaptureMouse%2A> returns `true`, then <xref:System.Windows.ContentElement.IsMouseCaptured%2A> is also `true`.  \n  \n If calling <xref:System.Windows.ContentElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.ContentElement.GotMouseCapture> and <xref:System.Windows.ContentElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> in the event data reported as the element where the <xref:System.Windows.ContentElement.CaptureMouse%2A> method is called. If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.  \n  \n To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName> with the `element` parameter provided as `null`.","nodes":[{"pos":[0,187],"content":"To be captured, an element must be enabled. Check whether <xref:System.Windows.ContentElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.ContentElement.CaptureMouse%2A>.","nodes":[{"content":"To be captured, an element must be enabled.","pos":[0,43]},{"content":"Check whether <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph> before you call <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph>.","pos":[44,187],"source":" Check whether <xref:System.Windows.ContentElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.ContentElement.CaptureMouse%2A>."}]},{"pos":[194,350],"content":"If calling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, then <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> is also <ph id=\"ph4\">`true`</ph>.","source":"If calling <xref:System.Windows.ContentElement.CaptureMouse%2A> returns `true`, then <xref:System.Windows.ContentElement.IsMouseCaptured%2A> is also `true`."},{"pos":[357,917],"content":"If calling <xref:System.Windows.ContentElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.ContentElement.GotMouseCapture> and <xref:System.Windows.ContentElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> in the event data reported as the element where the <xref:System.Windows.ContentElement.CaptureMouse%2A> method is called. If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.","nodes":[{"content":"If calling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, then the <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> events are raised, with <ph id=\"ph5\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName&gt;</ph> in the event data reported as the element where the <ph id=\"ph6\">&lt;xref:System.Windows.ContentElement.CaptureMouse%2A&gt;</ph> method is called.","pos":[0,425],"source":"If calling <xref:System.Windows.ContentElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.ContentElement.GotMouseCapture> and <xref:System.Windows.ContentElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> in the event data reported as the element where the <xref:System.Windows.ContentElement.CaptureMouse%2A> method is called."},{"content":"If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.","pos":[426,560]}]},{"pos":[924,1089],"content":"To clear mouse capture from all elements, call <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName&gt;</ph> with the <ph id=\"ph2\">`element`</ph> parameter provided as <ph id=\"ph3\">`null`</ph>.","source":"To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName> with the `element` parameter provided as `null`."}],"pos":[64511,65609],"yaml":true,"extradata":"MT"},{"content":"`true` if the mouse is successfully captured; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if the mouse is successfully captured; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the mouse is successfully captured; otherwise, `false`."}],"pos":[67124,67192],"yaml":true},{"content":"Attempts to force capture of the stylus to this element.","nodes":[{"pos":[0,56],"content":"Attempts to force capture of the stylus to this element.","nodes":[{"content":"Attempts to force capture of the stylus to this element.","pos":[0,56]}]}],"pos":[68160,68217],"yaml":true},{"content":"The default implementation based on the underlying default stylus device always returns `true`. However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.  \n  \n When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds. The stylus is typically captured only during drag-and-drop operations.  \n  \n Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>. The actual capture behavior is implemented by the active stylus device implementation.  \n  \n To be captured, an element must be enabled. Check whether <xref:System.Windows.ContentElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.ContentElement.CaptureStylus%2A>.  \n  \n If calling <xref:System.Windows.ContentElement.CaptureStylus%2A> returns `true`, <xref:System.Windows.ContentElement.IsStylusCaptured%2A> is also `true`.","nodes":[{"pos":[0,324],"content":"The default implementation based on the underlying default stylus device always returns `true`. However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.","nodes":[{"content":"The default implementation based on the underlying default stylus device always returns <ph id=\"ph1\">`true`</ph>.","pos":[0,95],"source":"The default implementation based on the underlying default stylus device always returns `true`."},{"content":"However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.","pos":[96,324]}]},{"pos":[331,505],"content":"When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds. The stylus is typically captured only during drag-and-drop operations.","nodes":[{"content":"When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds. The stylus is typically captured only during drag-and-drop operations.","pos":[0,174],"nodes":[{"content":"When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds.","pos":[0,103]},{"content":"The stylus is typically captured only during drag-and-drop operations.","pos":[104,174]}]}]},{"pos":[512,734],"content":"Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>. The actual capture behavior is implemented by the active stylus device implementation.","nodes":[{"content":"Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>. The actual capture behavior is implemented by the active stylus device implementation.","pos":[0,222],"nodes":[{"content":"Calling this method calls an underlying static <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus&gt;</ph> method <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.Capture%2A&gt;</ph>.","pos":[0,135],"source":"Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>."},{"content":"The actual capture behavior is implemented by the active stylus device implementation.","pos":[136,222]}]}]},{"pos":[741,936],"content":"To be captured, an element must be enabled. Check whether <xref:System.Windows.ContentElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.ContentElement.CaptureStylus%2A>.","nodes":[{"content":"To be captured, an element must be enabled.","pos":[0,43]},{"content":"Check whether <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph> return before you call <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.CaptureStylus%2A&gt;</ph>.","pos":[44,195],"source":" Check whether <xref:System.Windows.ContentElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.ContentElement.CaptureStylus%2A>."}]},{"pos":[943,1096],"content":"If calling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.CaptureStylus%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> is also <ph id=\"ph4\">`true`</ph>.","source":"If calling <xref:System.Windows.ContentElement.CaptureStylus%2A> returns `true`, <xref:System.Windows.ContentElement.IsStylusCaptured%2A> is also `true`."}],"pos":[68228,69335],"yaml":true,"extradata":"MT"},{"content":"`true` if the stylus is successfully captured; otherwise, `false`.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">`true`</ph> if the stylus is successfully captured; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the stylus is successfully captured; otherwise, `false`."}],"pos":[69465,69534],"yaml":true},{"content":"Attempts to force capture of a touch to this element.","nodes":[{"pos":[0,53],"content":"Attempts to force capture of a touch to this element.","nodes":[{"content":"Attempts to force capture of a touch to this element.","pos":[0,53]}]}],"pos":[70654,70708],"yaml":true},{"content":"<xref:System.Windows.ContentElement.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.  \n  \n If <xref:System.Windows.ContentElement.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.ContentElement.GotTouchCapture> event is raised.  \n  \n To release capture of a single touch from this element, use the <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> method and specify the touch device to release. To release all touches from this element, use the <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> method.","nodes":[{"pos":[0,161],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.CaptureTouch%2A&gt;</ph> will return <ph id=\"ph2\">`false`</ph> if the <ph id=\"ph3\">&lt;xref:System.Windows.Input.TouchDevice&gt;</ph> is currently captured to another element.","source":"<xref:System.Windows.ContentElement.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element."},{"pos":[168,318],"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.CaptureTouch%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, then the <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.GotTouchCapture&gt;</ph> event is raised.","source":"If <xref:System.Windows.ContentElement.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.ContentElement.GotTouchCapture> event is raised."},{"pos":[325,618],"content":"To release capture of a single touch from this element, use the <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> method and specify the touch device to release. To release all touches from this element, use the <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> method.","nodes":[{"content":"To release capture of a single touch from this element, use the <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> method and specify the touch device to release. To release all touches from this element, use the <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> method.","pos":[0,293],"nodes":[{"content":"To release capture of a single touch from this element, use the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.ReleaseTouchCapture%2A&gt;</ph> method and specify the touch device to release.","pos":[0,171],"source":"To release capture of a single touch from this element, use the <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> method and specify the touch device to release."},{"content":"To release all touches from this element, use the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A&gt;</ph> method.","pos":[172,293],"source":" To release all touches from this element, use the <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> method."}]}]}],"pos":[70719,71344],"yaml":true,"extradata":"MT"},{"content":"The device to capture.","nodes":[{"pos":[0,22],"content":"The device to capture.","nodes":[{"content":"The device to capture.","pos":[0,22]}]}],"pos":[71542,71565],"yaml":true},{"content":"`true` if the specified touch is captured to this element; otherwise, `false`.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">`true`</ph> if the specified touch is captured to this element; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the specified touch is captured to this element; otherwise, `false`."}],"pos":[71623,71704],"yaml":true},{"content":"<code>touchDevice</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;touchDevice&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>touchDevice</code> is `null`."}],"pos":[71876,71912],"yaml":true},{"content":"Gets a collection of <xref href=\"System.Windows.Input.CommandBinding\"></xref> objects that are associated with this element.","nodes":[{"pos":[0,124],"content":"Gets a collection of <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;&lt;/xref&gt;</ph> objects that are associated with this element.","source":"Gets a collection of <xref href=\"System.Windows.Input.CommandBinding\"></xref> objects that are associated with this element."}],"pos":[72837,72962],"yaml":true},{"content":"A <xref:System.Windows.Input.CommandBinding> enables command handling of a specific command for this element and declares the linkage between a command, its events, and the handlers that are attached by this element.  \n  \n Another typical way to populate the <xref:System.Windows.ContentElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.  \n  \n<a name=\"xamlPropertyElementUsage_CommandBindings\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<object>  \n  <object.CommandBindings>  \n    oneOrMoreCommandBindings  </object.CommandBindings>  \n</object>  \n```  \n  \n<a name=\"xamlValues_CommandBindings\"></a>   \n## XAML Values  \n *oneOrMoreCommandBindings*  \n One or more <xref:System.Windows.Input.CommandBinding> elements. Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations. For more information see <xref:System.Windows.Input.CommandBinding>.","nodes":[{"pos":[0,216],"content":"A <xref:System.Windows.Input.CommandBinding> enables command handling of a specific command for this element and declares the linkage between a command, its events, and the handlers that are attached by this element.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> enables command handling of a specific command for this element and declares the linkage between a command, its events, and the handlers that are attached by this element.","pos":[0,216],"source":"A <xref:System.Windows.Input.CommandBinding> enables command handling of a specific command for this element and declares the linkage between a command, its events, and the handlers that are attached by this element."}]},{"pos":[223,404],"content":"Another typical way to populate the <xref:System.Windows.ContentElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.","nodes":[{"content":"Another typical way to populate the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph> collection is to use <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandManager&gt;</ph> methods programmatically.","pos":[0,181],"source":"Another typical way to populate the <xref:System.Windows.ContentElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically."}]},{"pos":[472,499],"content":"XAML Property Element Usage","linkify":"XAML Property Element Usage","nodes":[{"content":"XAML Property Element Usage","pos":[0,27]}]},{"pos":[678,689],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[693,1134],"content":"*oneOrMoreCommandBindings*  \n One or more <xref:System.Windows.Input.CommandBinding> elements. Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations. For more information see <xref:System.Windows.Input.CommandBinding>.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>oneOrMoreCommandBindings<ept id=\"p1\">*</ept>","pos":[0,26],"source":"*oneOrMoreCommandBindings*"},{"content":" One or more <xref:System.Windows.Input.CommandBinding> elements. Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations. For more information see <xref:System.Windows.Input.CommandBinding>.","pos":[29,441],"nodes":[{"content":"One or more <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph> elements.","pos":[1,65],"source":" One or more <xref:System.Windows.Input.CommandBinding> elements."},{"content":"Each of these should have a <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding.Command%2A&gt;</ph> attribute set to a known command, and attributes set for the <ph id=\"ph2\">&lt;xref:System.Windows.Input.CommandBinding.CanExecute&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Input.CommandBinding.Executed&gt;</ph> handler implementations.","pos":[66,343],"source":" Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations."},{"content":"For more information see <ph id=\"ph1\">&lt;xref:System.Windows.Input.CommandBinding&gt;</ph>.","pos":[344,412],"source":" For more information see <xref:System.Windows.Input.CommandBinding>."}]}]}],"pos":[72973,74131],"yaml":true,"extradata":"MT"},{"content":"The collection of all <xref href=\"System.Windows.Input.CommandBinding\"></xref> objects.","nodes":[{"pos":[0,87],"content":"The collection of all <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.CommandBinding\"&gt;&lt;/xref&gt;</ph> objects.","source":"The collection of all <xref href=\"System.Windows.Input.CommandBinding\"></xref> objects."}],"pos":[74321,74409],"yaml":true},{"content":"Occurs when the input system reports an underlying drag event with this element as the drag target.","nodes":[{"pos":[0,99],"content":"Occurs when the input system reports an underlying drag event with this element as the drag target.","nodes":[{"content":"Occurs when the input system reports an underlying drag event with this element as the drag target.","pos":[0,99]}]}],"pos":[75366,75466],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.DragEnter?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_DragEnter\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.DragEnterEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewDragEnter>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnDragEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,567],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.DragEnter?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.DragEnter?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,567],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.DragEnter?displayProperty=fullName&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,320],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.DragEnter?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[321,567],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[620,644],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[665,681],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[682,733],"content":"<xref:System.Windows.ContentElement.DragEnterEvent>","nodes":[]},{"pos":[738,754],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[755,763],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[768,776],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[777,815],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[826,917],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewDragEnter>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph>.","pos":[0,91],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewDragEnter>."}]},{"pos":[927,1050],"content":"Override <xref:System.Windows.ContentElement.OnDragEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnDragEnter%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,123],"source":"Override <xref:System.Windows.ContentElement.OnDragEnter%2A> to implement class handling for this event in derived classes."}]}],"pos":[75477,76545],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.DragEnter\"></xref> routed event.","nodes":[{"pos":[0,89],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.DragEnter\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.DragEnter\"></xref> routed event."}],"pos":[77635,77725],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[77736,78276],"yaml":true,"extradata":"MT"},{"content":"Occurs when the input system reports an underlying drag event with this element as the drag origin.","nodes":[{"pos":[0,99],"content":"Occurs when the input system reports an underlying drag event with this element as the drag origin.","nodes":[{"content":"Occurs when the input system reports an underlying drag event with this element as the drag origin.","pos":[0,99]}]}],"pos":[79341,79441],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.DragLeave?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_DragLeave\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.DragLeaveEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnDragLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,566],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.DragLeave?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.DragLeave?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,566],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.DragLeave?displayProperty=fullName&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,319],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.DragLeave?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.DragLeave&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[320,566],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[619,643],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[664,680],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[681,732],"content":"<xref:System.Windows.ContentElement.DragLeaveEvent>","nodes":[]},{"pos":[737,753],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[754,762],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[767,775],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[776,814],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[825,910],"content":"The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewDragLeave&gt;</ph>.","pos":[0,85],"source":"The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>."}]},{"pos":[920,1043],"content":"Override <xref:System.Windows.ContentElement.OnDragLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnDragLeave%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,123],"source":"Override <xref:System.Windows.ContentElement.OnDragLeave%2A> to implement class handling for this event in derived classes."}]}],"pos":[79452,80513],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.DragLeave\"></xref> routed event.","nodes":[{"pos":[0,89],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.DragLeave\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.DragLeave\"></xref> routed event."}],"pos":[81603,81693],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[81704,82244],"yaml":true,"extradata":"MT"},{"content":"Occurs when the input system reports an underlying drag event with this element as the potential drop target.","nodes":[{"pos":[0,109],"content":"Occurs when the input system reports an underlying drag event with this element as the potential drop target.","nodes":[{"content":"Occurs when the input system reports an underlying drag event with this element as the potential drop target.","pos":[0,109]}]}],"pos":[83303,83413],"yaml":true},{"content":"This event occurs even if the drag originates in the element bounds. If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.ContentElement.DragEnter> and related preview events.  \n  \n This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.DragOver?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_DragOver\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.DragOverEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnDragOver%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,242],"content":"This event occurs even if the drag originates in the element bounds. If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.ContentElement.DragEnter> and related preview events.","nodes":[{"content":"This event occurs even if the drag originates in the element bounds. If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.ContentElement.DragEnter> and related preview events.","pos":[0,242],"nodes":[{"content":"This event occurs even if the drag originates in the element bounds.","pos":[0,68]},{"content":"If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph> and related preview events.","pos":[69,242],"source":" If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.ContentElement.DragEnter> and related preview events."}]}]},{"pos":[249,811],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.DragOver?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.DragOver?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,562],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.DragOver?displayProperty=fullName&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,317],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.DragOver?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.DragOver&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[318,562],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[863,887],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[908,924],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[925,975],"content":"<xref:System.Windows.ContentElement.DragOverEvent>","nodes":[]},{"pos":[980,996],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[997,1005],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1010,1018],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1019,1057],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[1068,1152],"content":"The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewDragOver&gt;</ph>.","pos":[0,84],"source":"The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>."}]},{"pos":[1162,1284],"content":"Override <xref:System.Windows.ContentElement.OnDragOver%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnDragOver%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,122],"source":"Override <xref:System.Windows.ContentElement.OnDragOver%2A> to implement class handling for this event in derived classes."}]}],"pos":[83424,84728],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.DragOver\"></xref> routed event.","nodes":[{"pos":[0,88],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.DragOver\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.DragOver\"></xref> routed event."}],"pos":[85811,85900],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[85911,86451],"yaml":true,"extradata":"MT"},{"content":"Occurs when the input system reports an underlying drop event with this element as the drop target.","nodes":[{"pos":[0,99],"content":"Occurs when the input system reports an underlying drop event with this element as the drop target.","nodes":[{"content":"Occurs when the input system reports an underlying drop event with this element as the drop target.","pos":[0,99]}]}],"pos":[87485,87585],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.Drop?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_Drop\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.DropEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewDrop>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnDrop%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,546],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.Drop?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.Drop?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,546],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.Drop?displayProperty=fullName&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,309],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.Drop?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.Drop&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[310,546],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[594,618],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[639,655],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[656,702],"content":"<xref:System.Windows.ContentElement.DropEvent>","nodes":[]},{"pos":[707,723],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[724,732],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[737,745],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[746,784],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[795,881],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewDrop>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph>.","pos":[0,86],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewDrop>."}]},{"pos":[891,1009],"content":"Override <xref:System.Windows.ContentElement.OnDrop%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnDrop%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,118],"source":"Override <xref:System.Windows.ContentElement.OnDrop%2A> to implement class handling for this event in derived classes."}]}],"pos":[87596,88623],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.Drop\"></xref> routed event.","nodes":[{"pos":[0,84],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.Drop\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.Drop\"></xref> routed event."}],"pos":[89678,89763],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[89774,90314],"yaml":true,"extradata":"MT"},{"content":"Attempts to set focus to this element.","nodes":[{"pos":[0,38],"content":"Attempts to set focus to this element.","nodes":[{"content":"Attempts to set focus to this element.","pos":[0,38]}]}],"pos":[91357,91396],"yaml":true},{"content":"To be focusable, <xref:System.Windows.ContentElement.Focusable%2A> and <xref:System.Windows.ContentElement.IsEnabled%2A> must both be `true`. Note that nearly all <xref:System.Windows.ContentElement> derived classes are not <xref:System.Windows.ContentElement.Focusable%2A> by default.  \n  \n Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`.  \n  \n Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical. This method sets the logical focus. There is no programmatic means to set keyboard focus specifically; keyboard focus is determined by user input. For more information, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n If calling <xref:System.Windows.ContentElement.Focus%2A> returns `true`, <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> and <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> are also `true`.  \n  \n If the related properties are not already `true`, when you call <xref:System.Windows.ContentElement.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>, <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>, <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.ContentElement.LostKeyboardFocus>, <xref:System.Windows.ContentElement.GotKeyboardFocus> (source is the new focus target).","nodes":[{"pos":[0,285],"content":"To be focusable, <xref:System.Windows.ContentElement.Focusable%2A> and <xref:System.Windows.ContentElement.IsEnabled%2A> must both be `true`. Note that nearly all <xref:System.Windows.ContentElement> derived classes are not <xref:System.Windows.ContentElement.Focusable%2A> by default.","nodes":[{"content":"To be focusable, <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.IsEnabled%2A&gt;</ph> must both be <ph id=\"ph3\">`true`</ph>.","pos":[0,141],"source":"To be focusable, <xref:System.Windows.ContentElement.Focusable%2A> and <xref:System.Windows.ContentElement.IsEnabled%2A> must both be `true`."},{"content":"Note that nearly all <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes are not <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.Focusable%2A&gt;</ph> by default.","pos":[142,285],"source":" Note that nearly all <xref:System.Windows.ContentElement> derived classes are not <xref:System.Windows.ContentElement.Focusable%2A> by default."}]},{"pos":[292,519],"content":"Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return <ph id=\"ph1\">`false`</ph>.","source":"Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`."},{"pos":[526,956],"content":"Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical. This method sets the logical focus. There is no programmatic means to set keyboard focus specifically; keyboard focus is determined by user input. For more information, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical.","pos":[0,120]},{"content":"This method sets the logical focus.","pos":[121,156]},{"content":"There is no programmatic means to set keyboard focus specifically; keyboard focus is determined by user input.","pos":[157,267]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Focus Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/focus-overview.md)</ept> and <bpt id=\"p2\">[</bpt>Input Overview<ept id=\"p2\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[268,430],"source":" For more information, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[963,1176],"content":"If calling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> returns <ph id=\"ph2\">`true`</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt;</ph> are also <ph id=\"ph5\">`true`</ph>.","source":"If calling <xref:System.Windows.ContentElement.Focus%2A> returns `true`, <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> and <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> are also `true`."},{"pos":[1183,1796],"content":"If the related properties are not already <ph id=\"ph1\">`true`</ph>, when you call <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph>, one or more of the following events are raised in the following order: <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> (source is the new focus target), <ph id=\"ph5\">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> (source is the new focus target).","source":"If the related properties are not already `true`, when you call <xref:System.Windows.ContentElement.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>, <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>, <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.ContentElement.LostKeyboardFocus>, <xref:System.Windows.ContentElement.GotKeyboardFocus> (source is the new focus target)."}],"pos":[91407,93214],"yaml":true,"extradata":"MT"},{"content":"`true` if keyboard focus could be set to this element; `false` if this method call did not force focus.","nodes":[{"pos":[0,103],"content":"<ph id=\"ph1\">`true`</ph> if keyboard focus could be set to this element; <ph id=\"ph2\">`false`</ph> if this method call did not force focus.","source":"`true` if keyboard focus could be set to this element; `false` if this method call did not force focus."}],"pos":[93959,94065],"yaml":true},{"content":"Gets or sets a value that indicates whether the element can receive focus.","nodes":[{"pos":[0,74],"content":"Gets or sets a value that indicates whether the element can receive focus.","nodes":[{"content":"Gets or sets a value that indicates whether the element can receive focus.","pos":[0,74]}]}],"pos":[95020,95095],"yaml":true},{"content":"Only the focused element receives keyboard input.  \n  \n Certain derived classes might override metadata for this dependency property such that the derived class is focusable by default.  \n  \n When inherited by <xref:System.Windows.Documents.Hyperlink> or its derived classes, <xref:System.Windows.Documents.Hyperlink> overrides the metadata for this dependency property and redefines the default value of this property to be `true`.  \n  \n<a name=\"dependencyPropertyInfo_Focusable\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.FocusableProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,49],"content":"Only the focused element receives keyboard input.","nodes":[{"content":"Only the focused element receives keyboard input.","pos":[0,49]}]},{"pos":[56,185],"content":"Certain derived classes might override metadata for this dependency property such that the derived class is focusable by default.","nodes":[{"content":"Certain derived classes might override metadata for this dependency property such that the derived class is focusable by default.","pos":[0,129]}]},{"pos":[192,432],"content":"When inherited by <ph id=\"ph1\">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> or its derived classes, <ph id=\"ph2\">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> overrides the metadata for this dependency property and redefines the default value of this property to be <ph id=\"ph3\">`true`</ph>.","source":"When inherited by <xref:System.Windows.Documents.Hyperlink> or its derived classes, <xref:System.Windows.Documents.Hyperlink> overrides the metadata for this dependency property and redefines the default value of this property to be `true`."},{"pos":[492,523],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[544,560],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[561,615],"content":"<xref:System.Windows.ContentElement.FocusableProperty>","nodes":[]},{"pos":[620,653],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[654,658],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[95106,95782],"yaml":true,"extradata":"MT"},{"content":"`true` if the element is focusable; otherwise `false`. The default is `false`.","nodes":[{"pos":[0,78],"content":"`true` if the element is focusable; otherwise `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the element is focusable; otherwise <ph id=\"ph2\">`false`</ph>.","pos":[0,54],"source":"`true` if the element is focusable; otherwise `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[55,78],"source":" The default is `false`."}]}],"pos":[96241,96322],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.Focusable\"></xref> property changes.","nodes":[{"pos":[0,107],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.Focusable\"&gt;&lt;/xref&gt;</ph> property changes.","source":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.Focusable\"></xref> property changes."}],"pos":[97298,97406],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[97417,97521],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.Focusable\"></xref> dependency property.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.Focusable\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.Focusable\"></xref> dependency property."}],"pos":[98678,98775],"yaml":true},{"content":"Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.","nodes":[{"pos":[0,153],"content":"Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.","nodes":[{"content":"Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.","pos":[0,153]}]}],"pos":[100095,100249],"yaml":true},{"content":"If no animations are attached to the property, then the <xref:System.Windows.ContentElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value. If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs. For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).","nodes":[{"pos":[0,558],"content":"If no animations are attached to the property, then the <xref:System.Windows.ContentElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value. If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs. For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).","nodes":[{"content":"If no animations are attached to the property, then the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.GetAnimationBaseValue%2A&gt;</ph> return value is always identical to the <ph id=\"ph2\">&lt;xref:System.Windows.DependencyObject.GetValue%2A&gt;</ph> return value.","pos":[0,222],"source":"If no animations are attached to the property, then the <xref:System.Windows.ContentElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value."},{"content":"If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs.","pos":[223,421]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Dependency Property Value Precedence<ept id=\"p1\">](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)</ept>.","pos":[422,558],"source":" For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md)."}]}],"pos":[100260,100819],"yaml":true,"extradata":"MT"},{"content":"The.dependency property to check.","nodes":[{"pos":[0,33],"content":"The.dependency property to check.","nodes":[{"content":"The.dependency property to check.","pos":[0,33]}]}],"pos":[101012,101046],"yaml":true},{"content":"The property value as if no animations are attached to the specified dependency property.","nodes":[{"pos":[0,89],"content":"The property value as if no animations are attached to the specified dependency property.","nodes":[{"content":"The property value as if no animations are attached to the specified dependency property.","pos":[0,89]}]}],"pos":[101103,101193],"yaml":true},{"content":"When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.","nodes":[{"pos":[0,166],"content":"When overridden in a derived class, returns an alternative <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> parent for this element if no visual parent exists.","source":"When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists."}],"pos":[102204,102371],"yaml":true},{"content":"The default virtual implementation of this method returns `null`. <xref:System.Windows.FrameworkContentElement> provides a practical implementation.  \n  \n Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.","nodes":[{"pos":[0,148],"content":"The default virtual implementation of this method returns `null`. <xref:System.Windows.FrameworkContentElement> provides a practical implementation.","nodes":[{"content":"The default virtual implementation of this method returns <ph id=\"ph1\">`null`</ph>.","pos":[0,65],"source":"The default virtual implementation of this method returns `null`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.FrameworkContentElement&gt;</ph> provides a practical implementation.","pos":[66,148],"source":" <xref:System.Windows.FrameworkContentElement> provides a practical implementation."}]},{"pos":[155,446],"content":"Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.","nodes":[{"content":"Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.","pos":[0,291]}]}],"pos":[102382,102833],"yaml":true,"extradata":"MT"},{"content":"An object, if implementation of a derived class has an alternate parent connection to report.","nodes":[{"pos":[0,93],"content":"An object, if implementation of a derived class has an alternate parent connection to report.","nodes":[{"content":"An object, if implementation of a derived class has an alternate parent connection to report.","pos":[0,93]}]}],"pos":[103020,103114],"yaml":true},{"content":"Occurs when the input system reports an underlying drag-and-drop event that involves this element.","nodes":[{"pos":[0,98],"content":"Occurs when the input system reports an underlying drag-and-drop event that involves this element.","nodes":[{"content":"Occurs when the input system reports an underlying drag-and-drop event that involves this element.","pos":[0,98]}]}],"pos":[104094,104193],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation. The visual feedback reinforces that a drag-and-drop operation is in process.  \n  \n This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.GiveFeedback> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_GiveFeedback\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.GiveFeedbackEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewGiveFeedback>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,292],"content":"The <xref:System.Windows.ContentElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation. The visual feedback reinforces that a drag-and-drop operation is in process.","nodes":[{"content":"The <xref:System.Windows.ContentElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation. The visual feedback reinforces that a drag-and-drop operation is in process.","pos":[0,292],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.","pos":[0,215],"source":"The <xref:System.Windows.ContentElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation."},{"content":"The visual feedback reinforces that a drag-and-drop operation is in process.","pos":[216,292]}]}]},{"pos":[299,852],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.GiveFeedback> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.GiveFeedback> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,553],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,300],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.GiveFeedback> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[301,553],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[908,932],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[953,969],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[970,1024],"content":"<xref:System.Windows.ContentElement.GiveFeedbackEvent>","nodes":[]},{"pos":[1029,1045],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1046,1054],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1059,1067],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1068,1114],"content":"<xref:System.Windows.GiveFeedbackEventHandler>","nodes":[]},{"pos":[1125,1219],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewGiveFeedback>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph>.","pos":[0,94],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewGiveFeedback>."}]},{"pos":[1229,1355],"content":"Override <xref:System.Windows.ContentElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnGiveFeedback%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,126],"source":"Override <xref:System.Windows.ContentElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes."}]}],"pos":[104204,105579],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.GiveFeedback\"></xref> routed event.","nodes":[{"pos":[0,92],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.GiveFeedback\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.GiveFeedback\"></xref> routed event."}],"pos":[106706,106799],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[106810,107350],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element gets logical focus.","nodes":[{"pos":[0,44],"content":"Occurs when this element gets logical focus.","nodes":[{"content":"Occurs when this element gets logical focus.","pos":[0,44]}]}],"pos":[108412,108457],"yaml":true},{"content":"Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus.  \n  \n A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.ContentElement.IsFocused%2A> property of an element in the route is changed from `false` to `true`.  \n  \n Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.  \n  \n<a name=\"routedEventInfo_GotFocus\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.GotFocusEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.RoutedEventHandler>|  \n  \n-   There is no corresponding tunneling event.  \n  \n-   Override <xref:System.Windows.ContentElement.OnGotFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,323],"content":"Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus.","nodes":[{"content":"Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus.","pos":[0,323],"nodes":[{"content":"Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope.","pos":[0,157]},{"content":"In this scenario, keyboard focus remains where it is and the element where a <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> method is called still gets logical focus.","pos":[158,323],"source":" In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus."}]}]},{"pos":[330,537],"content":"A more precise interpretation of this event is that it is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property of an element in the route is changed from <ph id=\"ph2\">`false`</ph> to <ph id=\"ph3\">`true`</ph>.","source":"A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.ContentElement.IsFocused%2A> property of an element in the route is changed from `false` to `true`."},{"pos":[544,838],"content":"Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.","nodes":[{"content":"Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.","pos":[0,294],"nodes":[{"content":"Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached.","pos":[0,167]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that gained focus.","pos":[168,294],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus."}]}]},{"pos":[890,914],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[935,951],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[952,1002],"content":"<xref:System.Windows.ContentElement.GotFocusEvent>","nodes":[]},{"pos":[1007,1023],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1024,1032],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1037,1045],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1046,1086],"content":"<xref:System.Windows.RoutedEventHandler>","nodes":[]},{"pos":[1097,1139],"content":"There is no corresponding tunneling event.","nodes":[{"content":"There is no corresponding tunneling event.","pos":[0,42]}]},{"pos":[1149,1271],"content":"Override <xref:System.Windows.ContentElement.OnGotFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnGotFocus%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,122],"source":"Override <xref:System.Windows.ContentElement.OnGotFocus%2A> to implement class handling for this event in derived classes."}]}],"pos":[108468,109761],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.GotFocus\"></xref> routed event.","nodes":[{"pos":[0,88],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.GotFocus\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.GotFocus\"></xref> routed event."}],"pos":[110848,110937],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[110948,111488],"yaml":true,"extradata":"MT"},{"content":"Occurs when the keyboard is focused on this element.","nodes":[{"pos":[0,52],"content":"Occurs when the keyboard is focused on this element.","nodes":[{"content":"Occurs when the keyboard is focused on this element.","pos":[0,52]}]}],"pos":[112572,112625],"yaml":true},{"content":"<xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.ContentElement.GotKeyboardFocus> event is raised in many of the same circumstances.  \n  \n Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_GotKeyboardFocus\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.GotKeyboardFocusEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,277],"content":"<xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.ContentElement.GotKeyboardFocus> event is raised in many of the same circumstances.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> event is raised in many of the same circumstances.","pos":[0,277],"source":"<xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.ContentElement.GotKeyboardFocus> event is raised in many of the same circumstances."}]},{"pos":[284,570],"content":"Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.","nodes":[{"content":"Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.","pos":[0,286],"nodes":[{"content":"Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.","pos":[0,162]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has focus.","pos":[163,286],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus."}]}]},{"pos":[577,1158],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,581],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,314],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[315,581],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1218,1242],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1263,1279],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1280,1338],"content":"<xref:System.Windows.ContentElement.GotKeyboardFocusEvent>","nodes":[]},{"pos":[1343,1359],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1360,1368],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1373,1381],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1382,1442],"content":"<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>","nodes":[]},{"pos":[1453,1551],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph>.","pos":[0,98],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>."}]},{"pos":[1561,1691],"content":"Override <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,130],"source":"Override <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes."}]}],"pos":[112636,114349],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.GotKeyboardFocus\"></xref> routed event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.GotKeyboardFocus\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.GotKeyboardFocus\"></xref> routed event."}],"pos":[115510,115607],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[115618,116158],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element captures the mouse.","nodes":[{"pos":[0,44],"content":"Occurs when this element captures the mouse.","nodes":[{"content":"Occurs when this element captures the mouse.","pos":[0,44]}]}],"pos":[117244,117289],"yaml":true},{"content":"When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.  \n  \n Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event for  this class so that <xref:System.Windows.ContentElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_GotMouseCapture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.GotMouseCaptureEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \n  \n-   There is no defined corresponding tunneling event.  \n  \n-   Override <xref:System.Windows.ContentElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,259],"content":"When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.","nodes":[{"content":"When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.","pos":[0,259],"nodes":[{"content":"When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds.","pos":[0,108]},{"content":"The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.","pos":[109,259]}]}]},{"pos":[266,562],"content":"Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.","nodes":[{"content":"Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.","pos":[0,296],"nodes":[{"content":"Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.","pos":[0,164]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has mouse capture.","pos":[165,296],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture."}]}]},{"pos":[569,1141],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event for  this class so that <xref:System.Windows.ContentElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event for  this class so that <xref:System.Windows.ContentElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,572],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;</ph> attached event for  this class so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,310],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event for  this class so that <xref:System.Windows.ContentElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.GotMouseCapture&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[311,572],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1200,1224],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1245,1261],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1262,1319],"content":"<xref:System.Windows.ContentElement.GotMouseCaptureEvent>","nodes":[]},{"pos":[1324,1340],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1341,1349],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1354,1362],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1363,1408],"content":"<xref:System.Windows.Input.MouseEventHandler>","nodes":[]},{"pos":[1419,1469],"content":"There is no defined corresponding tunneling event.","nodes":[{"content":"There is no defined corresponding tunneling event.","pos":[0,50]}]},{"pos":[1479,1608],"content":"Override <xref:System.Windows.ContentElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnGotMouseCapture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,129],"source":"Override <xref:System.Windows.ContentElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes."}]}],"pos":[117300,118930],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.GotMouseCapture\"></xref> routed event.","nodes":[{"pos":[0,95],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.GotMouseCapture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.GotMouseCapture\"></xref> routed event."}],"pos":[120076,120172],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[120183,120723],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element captures the stylus.","nodes":[{"pos":[0,45],"content":"Occurs when this element captures the stylus.","nodes":[{"content":"Occurs when this element captures the stylus.","pos":[0,45]}]}],"pos":[121814,121860],"yaml":true},{"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.  \n  \n Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.  \n  \n This event creates an alias for the  attached event for this class so that <xref:System.Windows.ContentElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_GotStylusCapture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.GotStylusCaptureEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   There is no defined corresponding tunneling event.  \n  \n-   Override <xref:System.Windows.ContentElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,255],"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.","nodes":[{"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.","pos":[0,255],"nodes":[{"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.","pos":[0,104]},{"content":"The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.","pos":[105,255]}]}]},{"pos":[262,552],"content":"Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.","nodes":[{"content":"Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.","pos":[0,290],"nodes":[{"content":"Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached.","pos":[0,164]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has capture.","pos":[165,290],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture."}]}]},{"pos":[559,1060],"content":"This event creates an alias for the  attached event for this class so that <xref:System.Windows.ContentElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the  attached event for this class so that <xref:System.Windows.ContentElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,501],"nodes":[{"content":"This event creates an alias for the  attached event for this class so that <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.GotStylusCapture&gt;</ph> is part of the class members list when <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,236],"source":"This event creates an alias for the  attached event for this class so that <xref:System.Windows.ContentElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.GotStylusCapture&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[237,501],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1120,1144],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1165,1181],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1182,1240],"content":"<xref:System.Windows.ContentElement.GotStylusCaptureEvent>","nodes":[]},{"pos":[1245,1261],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1262,1270],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1275,1283],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1284,1330],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1341,1391],"content":"There is no defined corresponding tunneling event.","nodes":[{"content":"There is no defined corresponding tunneling event.","pos":[0,50]}]},{"pos":[1401,1531],"content":"Override <xref:System.Windows.ContentElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnGotStylusCapture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,130],"source":"Override <xref:System.Windows.ContentElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes."}]}],"pos":[121871,123424],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.GotStylusCapture\"></xref> routed event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.GotStylusCapture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.GotStylusCapture\"></xref> routed event."}],"pos":[124579,124676],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[124687,125227],"yaml":true,"extradata":"MT"},{"content":"Occurs when a touch is captured to this element.","nodes":[{"pos":[0,48],"content":"Occurs when a touch is captured to this element.","nodes":[{"content":"Occurs when a touch is captured to this element.","pos":[0,48]}]}],"pos":[126335,126384],"yaml":true},{"content":"<a name=\"routedEventInfo_GotTouchCapture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.GotTouchCaptureEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   Override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[53,77],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[98,114],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[115,172],"content":"<xref:System.Windows.ContentElement.GotTouchCaptureEvent>","nodes":[]},{"pos":[177,193],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[194,202],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[207,215],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[216,298],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[309,438],"content":"Override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,129],"source":"Override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes."}]}],"pos":[126395,126847],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.GotTouchCapture\"></xref> routed event.","nodes":[{"pos":[0,95],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.GotTouchCapture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.GotTouchCapture\"></xref> routed event."}],"pos":[128022,128118],"yaml":true},{"content":"Gets a value that indicates whether this element has any animated properties.","nodes":[{"pos":[0,77],"content":"Gets a value that indicates whether this element has any animated properties.","nodes":[{"content":"Gets a value that indicates whether this element has any animated properties.","pos":[0,77]}]}],"pos":[129264,129342],"yaml":true},{"content":"This property returns `true` either for persistent (unclocked, always-running) animations or for animations that have a specific timeline.","nodes":[{"pos":[0,138],"content":"This property returns <ph id=\"ph1\">`true`</ph> either for persistent (unclocked, always-running) animations or for animations that have a specific timeline.","source":"This property returns `true` either for persistent (unclocked, always-running) animations or for animations that have a specific timeline."}],"pos":[129353,129492],"yaml":true,"extradata":"MT"},{"content":"`true` if this element has animations attached to any of its properties; otherwise, `false`.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">`true`</ph> if this element has animations attached to any of its properties; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this element has animations attached to any of its properties; otherwise, `false`."}],"pos":[129616,129711],"yaml":true},{"content":"Gets the collection of input bindings that are associated with this element.","nodes":[{"pos":[0,76],"content":"Gets the collection of input bindings that are associated with this element.","nodes":[{"content":"Gets the collection of input bindings that are associated with this element.","pos":[0,76]}]}],"pos":[130706,130783],"yaml":true},{"content":"Input bindings support the binding of commands to input devices. For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are specific to mouse devices.  \n  \n The collection of input bindings includes both input bindings that pertain to the type and also input bindings that are declared on the instance.  \n  \n A related property, <xref:System.Windows.ContentElement.CommandBindings%2A>, maintains a collection of command bindings. These bindings differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands and class-specific handlers for them.  \n  \n<a name=\"xamlPropertyElementUsage_InputBindings\"></a>   \n## XAML Property Element Usage  \n  \n```  \n<object>  \n  <object.InputBindings>  \n    oneOrMoreInputBindings  </object.InputBindings>  \n</object>  \n```  \n  \n<a name=\"xamlValues_InputBindings\"></a>   \n## XAML Values  \n *oneOrMoreInputBindings*  \n One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes). Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.","nodes":[{"pos":[0,204],"content":"Input bindings support the binding of commands to input devices. For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are specific to mouse devices.","nodes":[{"content":"Input bindings support the binding of commands to input devices. For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are specific to mouse devices.","pos":[0,204],"nodes":[{"content":"Input bindings support the binding of commands to input devices.","pos":[0,64]},{"content":"For example, <ph id=\"ph1\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> implements input bindings that include properties that are specific to mouse devices.","pos":[65,204],"source":" For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are specific to mouse devices."}]}]},{"pos":[211,356],"content":"The collection of input bindings includes both input bindings that pertain to the type and also input bindings that are declared on the instance.","nodes":[{"content":"The collection of input bindings includes both input bindings that pertain to the type and also input bindings that are declared on the instance.","pos":[0,145]}]},{"pos":[363,670],"content":"A related property, <xref:System.Windows.ContentElement.CommandBindings%2A>, maintains a collection of command bindings. These bindings differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands and class-specific handlers for them.","nodes":[{"content":"A related property, <xref:System.Windows.ContentElement.CommandBindings%2A>, maintains a collection of command bindings. These bindings differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands and class-specific handlers for them.","pos":[0,307],"nodes":[{"content":"A related property, <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph>, maintains a collection of command bindings.","pos":[0,120],"source":"A related property, <xref:System.Windows.ContentElement.CommandBindings%2A>, maintains a collection of command bindings."},{"content":"These bindings differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands and class-specific handlers for them.","pos":[121,307]}]}]},{"pos":[736,763],"content":"XAML Property Element Usage","linkify":"XAML Property Element Usage","nodes":[{"content":"XAML Property Element Usage","pos":[0,27]}]},{"pos":[934,945],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[949,1313],"content":"*oneOrMoreInputBindings*  \n One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes). Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.","nodes":[{"content":"<bpt id=\"p1\">*</bpt>oneOrMoreInputBindings<ept id=\"p1\">*</ept>","pos":[0,24],"source":"*oneOrMoreInputBindings*"},{"content":" One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes). Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.","pos":[27,364],"nodes":[{"content":"One or more <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding&gt;</ph> elements (typically the <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Input.MouseBinding&gt;</ph> derived classes).","pos":[1,178],"source":" One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes)."},{"content":"Each of these is expected to have a <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputBinding.Command%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Input.InputBinding.Gesture%2A&gt;</ph> attribute set.","pos":[179,337],"source":" Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set."}]}]}],"pos":[130794,132133],"yaml":true,"extradata":"MT"},{"content":"The collection of input bindings.","nodes":[{"pos":[0,33],"content":"The collection of input bindings.","nodes":[{"content":"The collection of input bindings.","pos":[0,33]}]}],"pos":[132317,132351],"yaml":true},{"content":"Gets or sets a value that indicates whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].","nodes":[{"pos":[0,131],"content":"Gets or sets a value that indicates whether this element is enabled in the <ph id=\"ph1\">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph>.","source":"Gets or sets a value that indicates whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]."}],"pos":[133331,133463],"yaml":true},{"content":"<a name=\"dependencyPropertyInfo_IsEnabled\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.IsEnabledProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[54,85],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[106,122],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[123,177],"content":"<xref:System.Windows.ContentElement.IsEnabledProperty>","nodes":[]},{"pos":[182,215],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[216,220],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[133474,133706],"yaml":true,"extradata":"MT"},{"content":"`true` if the element is enabled; otherwise, `false`. The default value is `true`.","nodes":[{"pos":[0,82],"content":"`true` if the element is enabled; otherwise, `false`. The default value is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the element is enabled; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,53],"source":"`true` if the element is enabled; otherwise, `false`."},{"content":"The default value is <ph id=\"ph1\">`true`</ph>.","pos":[54,82],"source":" The default value is `true`."}]}],"pos":[134246,134331],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsEnabled\"></xref> property on this element changes.","nodes":[{"pos":[0,123],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsEnabled\"&gt;&lt;/xref&gt;</ph> property on this element changes.","source":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsEnabled\"></xref> property on this element changes."}],"pos":[135329,135453],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[135464,135568],"yaml":true,"extradata":"MT"},{"content":"Gets a value that becomes the return value of <xref href=\"System.Windows.ContentElement.IsEnabled\"></xref> in derived classes.","nodes":[{"pos":[0,126],"content":"Gets a value that becomes the return value of <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsEnabled\"&gt;&lt;/xref&gt;</ph> in derived classes.","source":"Gets a value that becomes the return value of <xref href=\"System.Windows.ContentElement.IsEnabled\"></xref> in derived classes."}],"pos":[136704,136831],"yaml":true},{"content":"`true` if the element is enabled; otherwise, `false`.","nodes":[{"pos":[0,53],"content":"<ph id=\"ph1\">`true`</ph> if the element is enabled; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the element is enabled; otherwise, `false`."}],"pos":[136958,137014],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.IsEnabled\"></xref> dependency property.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsEnabled\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.IsEnabled\"></xref> dependency property."}],"pos":[138022,138119],"yaml":true},{"content":"Gets a value that determines whether this element has logical focus.","nodes":[{"pos":[0,68],"content":"Gets a value that determines whether this element has logical focus.","nodes":[{"content":"Gets a value that determines whether this element has logical focus.","pos":[0,68]}]}],"pos":[139182,139251],"yaml":true},{"content":"Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application. In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus. For more information on logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).  \n  \n<a name=\"dependencyPropertyInfo_IsFocused\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.IsFocusedProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,511],"content":"Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application. In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus. For more information on logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).","nodes":[{"content":"Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application.","pos":[0,162]},{"content":"In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus.","pos":[163,331]},{"content":"For more information on logical focus, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept> and <bpt id=\"p2\">[</bpt>Focus Overview<ept id=\"p2\">](~/docs/framework/wpf/advanced/focus-overview.md)</ept>.","pos":[332,511],"source":" For more information on logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md)."}]},{"pos":[571,602],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[623,639],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[640,694],"content":"<xref:System.Windows.ContentElement.IsFocusedProperty>","nodes":[]},{"pos":[699,732],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[733,737],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[139262,140013],"yaml":true,"extradata":"MT"},{"content":"`true` if this element has logical focus; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if this element has logical focus; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this element has logical focus; otherwise, `false`."}],"pos":[140467,140531],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.IsFocused\"></xref> dependency property.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsFocused\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.IsFocused\"></xref> dependency property."}],"pos":[141513,141610],"yaml":true},{"content":"Gets a value that indicates whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)], is enabled for processing the input to this element.","nodes":[{"pos":[0,182],"content":"Gets a value that indicates whether an input method system, such as an <ph id=\"ph1\">[!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)]</ph>, is enabled for processing the input to this element.","source":"Gets a value that indicates whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)], is enabled for processing the input to this element."}],"pos":[142761,142944],"yaml":true},{"content":"This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName> for the currently enabled input methods (keyboard, speech, and other input devices).","nodes":[{"pos":[0,247],"content":"This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName> for the currently enabled input methods (keyboard, speech, and other input devices).","nodes":[{"content":"This property returns the value that is returned by the attached property <ph id=\"ph1\">&lt;xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName&gt;</ph> for the currently enabled input methods (keyboard, speech, and other input devices).","pos":[0,247],"source":"This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName> for the currently enabled input methods (keyboard, speech, and other input devices)."}]}],"pos":[142955,143203],"yaml":true,"extradata":"MT"},{"content":"`true` if an input method is active; otherwise, `false`. The default value of the underlying attached property is `true`; however, this value is influenced by the state of input methods at runtime.","nodes":[{"pos":[0,197],"content":"`true` if an input method is active; otherwise, `false`. The default value of the underlying attached property is `true`; however, this value is influenced by the state of input methods at runtime.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if an input method is active; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,56],"source":"`true` if an input method is active; otherwise, `false`."},{"content":"The default value of the underlying attached property is <ph id=\"ph1\">`true`</ph>; however, this value is influenced by the state of input methods at runtime.","pos":[57,197],"source":" The default value of the underlying attached property is `true`; however, this value is influenced by the state of input methods at runtime."}]}],"pos":[143326,143526],"yaml":true},{"content":"Gets a value that indicates whether this element has keyboard focus.","nodes":[{"pos":[0,68],"content":"Gets a value that indicates whether this element has keyboard focus.","nodes":[{"content":"Gets a value that indicates whether this element has keyboard focus.","pos":[0,68]}]}],"pos":[144544,144613],"yaml":true},{"content":"<a name=\"dependencyPropertyInfo_IsKeyboardFocused\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[62,93],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[114,130],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[131,193],"content":"<xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>","nodes":[]},{"pos":[198,231],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[232,236],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[144624,144872],"yaml":true,"extradata":"MT"},{"content":"`true` if this element has keyboard focus; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,86],"content":"`true` if this element has keyboard focus; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if this element has keyboard focus; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,62],"source":"`true` if this element has keyboard focus; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[63,86],"source":" The default is `false`."}]}],"pos":[144992,145081],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsKeyboardFocused\"></xref> property changes on this element.","nodes":[{"pos":[0,131],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsKeyboardFocused\"&gt;&lt;/xref&gt;</ph> property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsKeyboardFocused\"></xref> property changes on this element."}],"pos":[146135,146267],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[146278,146382],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.IsKeyboardFocused\"></xref> dependency property.","nodes":[{"pos":[0,104],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsKeyboardFocused\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.IsKeyboardFocused\"></xref> dependency property."}],"pos":[147573,147678],"yaml":true},{"content":"Gets a value that indicates whether keyboard focus is anywhere within the element or child elements.","nodes":[{"pos":[0,100],"content":"Gets a value that indicates whether keyboard focus is anywhere within the element or child elements.","nodes":[{"content":"Gets a value that indicates whether keyboard focus is anywhere within the element or child elements.","pos":[0,100]}]}],"pos":[148843,148944],"yaml":true},{"content":"Changes to the value of this property typically raise the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.  \n  \n You do not set this property directly, but you can set the focus to the element by calling <xref:System.Windows.ContentElement.Focus%2A>, or by making a <xref:System.Windows.ContentElement.MoveFocus%2A> request. Either of these method calls might change this property value.  \n  \n<a name=\"dependencyPropertyInfo_IsKeyboardFocusWithin\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,262],"content":"Changes to the value of this property typically raise the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.","nodes":[{"content":"Changes to the value of this property typically raise the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> event, unless a derived class has overridden <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A&gt;</ph> to suppress the event.","pos":[0,262],"source":"Changes to the value of this property typically raise the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event."}]},{"pos":[269,543],"content":"You do not set this property directly, but you can set the focus to the element by calling <xref:System.Windows.ContentElement.Focus%2A>, or by making a <xref:System.Windows.ContentElement.MoveFocus%2A> request. Either of these method calls might change this property value.","nodes":[{"content":"You do not set this property directly, but you can set the focus to the element by calling <xref:System.Windows.ContentElement.Focus%2A>, or by making a <xref:System.Windows.ContentElement.MoveFocus%2A> request. Either of these method calls might change this property value.","pos":[0,274],"nodes":[{"content":"You do not set this property directly, but you can set the focus to the element by calling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph>, or by making a <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MoveFocus%2A&gt;</ph> request.","pos":[0,211],"source":"You do not set this property directly, but you can set the focus to the element by calling <xref:System.Windows.ContentElement.Focus%2A>, or by making a <xref:System.Windows.ContentElement.MoveFocus%2A> request."},{"content":"Either of these method calls might change this property value.","pos":[212,274]}]}]},{"pos":[615,646],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[667,683],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[684,750],"content":"<xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>","nodes":[]},{"pos":[755,788],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[789,793],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[148955,149764],"yaml":true,"extradata":"MT"},{"content":"`true` if keyboard focus is on the element or its child elements; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,109],"content":"`true` if keyboard focus is on the element or its child elements; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if keyboard focus is on the element or its child elements; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,85],"source":"`true` if keyboard focus is on the element or its child elements; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[86,109],"source":" The default is `false`."}]}],"pos":[149888,150000],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsKeyboardFocusWithinChanged\"></xref> property changes on this element.","nodes":[{"pos":[0,142],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsKeyboardFocusWithinChanged\"&gt;&lt;/xref&gt;</ph> property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsKeyboardFocusWithinChanged\"></xref> property changes on this element."}],"pos":[151060,151203],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[151214,151318],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.IsKeyboardFocusWithin\"></xref> dependency property.","nodes":[{"pos":[0,108],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsKeyboardFocusWithin\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.IsKeyboardFocusWithin\"></xref> dependency property."}],"pos":[152559,152668],"yaml":true},{"content":"Gets a value that indicates whether the mouse is captured by this element.","nodes":[{"pos":[0,74],"content":"Gets a value that indicates whether the mouse is captured by this element.","nodes":[{"content":"Gets a value that indicates whether the mouse is captured by this element.","pos":[0,74]}]}],"pos":[153801,153876],"yaml":true},{"content":"Mouse capture state is related to in-process drag-and-drop operations.  \n  \n<a name=\"dependencyPropertyInfo_IsMouseCaptured\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.IsMouseCapturedProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,70],"content":"Mouse capture state is related to in-process drag-and-drop operations.","nodes":[{"content":"Mouse capture state is related to in-process drag-and-drop operations.","pos":[0,70]}]},{"pos":[136,167],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[188,204],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[205,265],"content":"<xref:System.Windows.ContentElement.IsMouseCapturedProperty>","nodes":[]},{"pos":[270,303],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[304,308],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[153887,154209],"yaml":true,"extradata":"MT"},{"content":"`true` if the element has mouse capture; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,84],"content":"`true` if the element has mouse capture; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the element has mouse capture; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,60],"source":"`true` if the element has mouse capture; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[61,84],"source":" The default is `false`."}]}],"pos":[154817,154904],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsMouseCaptured\"></xref> property changes on this element.","nodes":[{"pos":[0,129],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsMouseCaptured\"&gt;&lt;/xref&gt;</ph> property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsMouseCaptured\"></xref> property changes on this element."}],"pos":[155922,156052],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[156063,156167],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.IsMouseCaptured\"></xref> dependency property.","nodes":[{"pos":[0,102],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsMouseCaptured\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.IsMouseCaptured\"></xref> dependency property."}],"pos":[157366,157469],"yaml":true},{"content":"Gets a value that determines whether mouse capture is held by this element or by child elements in its element tree.","nodes":[{"pos":[0,116],"content":"Gets a value that determines whether mouse capture is held by this element or by child elements in its element tree.","nodes":[{"content":"Gets a value that determines whether mouse capture is held by this element or by child elements in its element tree.","pos":[0,116]}]}],"pos":[158626,158743],"yaml":true},{"content":"<a name=\"dependencyPropertyInfo_IsMouseCaptureWithin\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[65,96],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[117,133],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[134,199],"content":"<xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>","nodes":[]},{"pos":[204,237],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[238,242],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[158754,159008],"yaml":true,"extradata":"MT"},{"content":"`true` if this element or a contained element has mouse capture; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,108],"content":"`true` if this element or a contained element has mouse capture; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if this element or a contained element has mouse capture; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,84],"source":"`true` if this element or a contained element has mouse capture; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[85,108],"source":" The default is `false`."}]}],"pos":[159131,159242],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsMouseCaptureWithinProperty\"></xref> changes on this element.","nodes":[{"pos":[0,133],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsMouseCaptureWithinProperty\"&gt;&lt;/xref&gt;</ph> changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsMouseCaptureWithinProperty\"></xref> changes on this element."}],"pos":[160317,160451],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[160462,160566],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.IsMouseCaptureWithin\"></xref> dependency property.","nodes":[{"pos":[0,107],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsMouseCaptureWithin\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.IsMouseCaptureWithin\"></xref> dependency property."}],"pos":[161800,161908],"yaml":true},{"content":"Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.","nodes":[{"pos":[0,147],"content":"Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.","nodes":[{"content":"Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.","pos":[0,147]}]}],"pos":[163064,163212],"yaml":true},{"content":"Unlike <xref:System.Windows.ContentElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element—as it is for a hit test. If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`. Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.ContentElement.IsMouseOver%2A> instead.  \n  \n If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.  \n  \n<a name=\"dependencyPropertyInfo_IsMouseDirectlyOver\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,648],"content":"Unlike <xref:System.Windows.ContentElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element—as it is for a hit test. If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`. Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.ContentElement.IsMouseOver%2A> instead.","nodes":[{"content":"Unlike <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph>, this property is only <ph id=\"ph2\">`true`</ph> if the mouse pointer is over the literal element—as it is for a hit test.","pos":[0,162],"source":"Unlike <xref:System.Windows.ContentElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element—as it is for a hit test."},{"content":"If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be <ph id=\"ph1\">`false`</ph>.","pos":[163,338],"source":" If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`."},{"content":"Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.","pos":[339,526]},{"content":"For most scenarios where you are not authoring controls, use <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> instead.","pos":[527,648],"source":" For most scenarios where you are not authoring controls, use <xref:System.Windows.ContentElement.IsMouseOver%2A> instead."}]},{"pos":[655,857],"content":"If the mouse is captured by this element, and this property is <ph id=\"ph1\">`true`</ph> at time of capture, this property will continue to return <ph id=\"ph2\">`true`</ph> until mouse capture is lost and the pointer is not over its bounds.","source":"If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds."},{"pos":[927,958],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[979,995],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[996,1060],"content":"<xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>","nodes":[]},{"pos":[1065,1098],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1099,1103],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[163223,164342],"yaml":true,"extradata":"MT"},{"content":"`true` if the mouse pointer is over the same element result as a hit test; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,118],"content":"`true` if the mouse pointer is over the same element result as a hit test; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the mouse pointer is over the same element result as a hit test; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,94],"source":"`true` if the mouse pointer is over the same element result as a hit test; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[95,118],"source":" The default is `false`."}]}],"pos":[164464,164585],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsMouseDirectlyOver\"></xref> property changes on this element.","nodes":[{"pos":[0,133],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsMouseDirectlyOver\"&gt;&lt;/xref&gt;</ph> property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsMouseDirectlyOver\"></xref> property changes on this element."}],"pos":[165653,165787],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[165798,165902],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.IsMouseDirectlyOver\"></xref> dependency property.","nodes":[{"pos":[0,106],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsMouseDirectlyOver\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.IsMouseDirectlyOver\"></xref> dependency property."}],"pos":[167129,167236],"yaml":true},{"content":"Gets a value that indicates whether the mouse pointer is located over this element (including visual child elements, or its control compositing).","nodes":[{"pos":[0,145],"content":"Gets a value that indicates whether the mouse pointer is located over this element (including visual child elements, or its control compositing).","nodes":[{"content":"Gets a value that indicates whether the mouse pointer is located over this element (including visual child elements, or its control compositing).","pos":[0,145]}]}],"pos":[168343,168489],"yaml":true},{"content":"Although an analogous \"IsMouseOverChanged\" event does not exist, several similar events do. For example, you can use <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>, and <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>.  \n  \n If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.  \n  \n<a name=\"dependencyPropertyInfo_IsMouseOver\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.IsMouseOverProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,282],"content":"Although an analogous \"IsMouseOverChanged\" event does not exist, several similar events do. For example, you can use <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>, and <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>.","nodes":[{"content":"Although an analogous \"IsMouseOverChanged\" event does not exist, several similar events do. For example, you can use <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>, and <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>.","pos":[0,282],"nodes":[{"content":"Although an analogous \"IsMouseOverChanged\" event does not exist, several similar events do.","pos":[0,91]},{"content":"For example, you can use <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph>.","pos":[92,282],"source":" For example, you can use <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>, and <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>."}]}]},{"pos":[289,430],"content":"If this element captures the mouse, this property remains <ph id=\"ph1\">`true`</ph> until mouse capture is lost and the mouse pointer leaves the element bounds.","source":"If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds."},{"pos":[492,523],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[544,560],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[561,617],"content":"<xref:System.Windows.ContentElement.IsMouseOverProperty>","nodes":[]},{"pos":[622,655],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[656,660],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[168500,169178],"yaml":true,"extradata":"MT"},{"content":"`true` if mouse pointer is over the element or its child elements; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,110],"content":"`true` if mouse pointer is over the element or its child elements; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if mouse pointer is over the element or its child elements; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,86],"source":"`true` if mouse pointer is over the element or its child elements; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[87,110],"source":" The default is `false`."}]}],"pos":[169714,169827],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.IsMouseOver\"></xref> dependency property.","nodes":[{"pos":[0,98],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsMouseOver\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.IsMouseOver\"></xref> dependency property."}],"pos":[170845,170944],"yaml":true},{"content":"Gets a value that indicates whether the stylus is captured to this element.","nodes":[{"pos":[0,75],"content":"Gets a value that indicates whether the stylus is captured to this element.","nodes":[{"content":"Gets a value that indicates whether the stylus is captured to this element.","pos":[0,75]}]}],"pos":[172073,172149],"yaml":true},{"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"dependencyPropertyInfo_IsStylusCaptured\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.IsStylusCapturedProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,159],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[226,257],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[278,294],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[295,356],"content":"<xref:System.Windows.ContentElement.IsStylusCapturedProperty>","nodes":[]},{"pos":[361,394],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[395,399],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[172160,172573],"yaml":true,"extradata":"MT"},{"content":"`true` if the element has stylus capture; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,85],"content":"`true` if the element has stylus capture; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the element has stylus capture; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,61],"source":"`true` if the element has stylus capture; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[62,85],"source":" The default is `false`."}]}],"pos":[172692,172780],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsStylusCaptured\"></xref> property changes on this element.","nodes":[{"pos":[0,130],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsStylusCaptured\"&gt;&lt;/xref&gt;</ph> property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsStylusCaptured\"></xref> property changes on this element."}],"pos":[173827,173958],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[173969,174073],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.IsStylusCaptured\"></xref> dependency property.","nodes":[{"pos":[0,103],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsStylusCaptured\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.IsStylusCaptured\"></xref> dependency property."}],"pos":[175279,175383],"yaml":true},{"content":"Gets a value that determines whether stylus capture is held by this element, including child elements and control compositing.","nodes":[{"pos":[0,126],"content":"Gets a value that determines whether stylus capture is held by this element, including child elements and control compositing.","nodes":[{"content":"Gets a value that determines whether stylus capture is held by this element, including child elements and control compositing.","pos":[0,126]}]}],"pos":[176547,176674],"yaml":true},{"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"dependencyPropertyInfo_IsStylusCaptureWithin\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,159],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[231,262],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[283,299],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[300,366],"content":"<xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>","nodes":[]},{"pos":[371,404],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[405,409],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[176685,177108],"yaml":true,"extradata":"MT"},{"content":"`true` if stylus capture is held within this element; otherwise, `false`.","nodes":[{"pos":[0,73],"content":"<ph id=\"ph1\">`true`</ph> if stylus capture is held within this element; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if stylus capture is held within this element; otherwise, `false`."}],"pos":[177232,177308],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsStylusCaptureWithin\"></xref> property changes on this element.","nodes":[{"pos":[0,135],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsStylusCaptureWithin\"&gt;&lt;/xref&gt;</ph> property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsStylusCaptureWithin\"></xref> property changes on this element."}],"pos":[178390,178526],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[178537,178641],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.IsStylusCaptureWithin\"></xref> dependency property.","nodes":[{"pos":[0,108],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsStylusCaptureWithin\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.IsStylusCaptureWithin\"></xref> dependency property."}],"pos":[179860,179969],"yaml":true},{"content":"Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.","nodes":[{"pos":[0,133],"content":"Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.","nodes":[{"content":"Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.","pos":[0,133]}]}],"pos":[181132,181266],"yaml":true},{"content":"Unlike <xref:System.Windows.ContentElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element. If the stylus is instead over a child element or over elements that are part of an element's deeper compositing, this property will be `false`.  \n  \n Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.ContentElement.IsStylusOver%2A> instead.  \n  \n If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"dependencyPropertyInfo_IsStylusDirectlyOver\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,268],"content":"Unlike <xref:System.Windows.ContentElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element. If the stylus is instead over a child element or over elements that are part of an element's deeper compositing, this property will be `false`.","nodes":[{"content":"Unlike <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph>, this property is only <ph id=\"ph2\">`true`</ph> if the stylus is over the element.","pos":[0,124],"source":"Unlike <xref:System.Windows.ContentElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element."},{"content":"If the stylus is instead over a child element or over elements that are part of an element's deeper compositing, this property will be <ph id=\"ph1\">`false`</ph>.","pos":[125,268],"source":" If the stylus is instead over a child element or over elements that are part of an element's deeper compositing, this property will be `false`."}]},{"pos":[275,585],"content":"Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.ContentElement.IsStylusOver%2A> instead.","nodes":[{"content":"Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.ContentElement.IsStylusOver%2A> instead.","pos":[0,310],"nodes":[{"content":"Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results.","pos":[0,187]},{"content":"For most scenarios where you are not authoring controls, use <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> instead.","pos":[188,310],"source":" For most scenarios where you are not authoring controls, use <xref:System.Windows.ContentElement.IsStylusOver%2A> instead."}]}]},{"pos":[592,775],"content":"If this element has stylus capture and this property is <ph id=\"ph1\">`true`</ph> at the time of capture, this property remains <ph id=\"ph2\">`true`</ph> until stylus capture is lost and the stylus is not over its bounds.","source":"If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds."},{"pos":[782,941],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[1012,1043],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[1064,1080],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1081,1146],"content":"<xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>","nodes":[]},{"pos":[1151,1184],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1185,1189],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[181277,182486],"yaml":true,"extradata":"MT"},{"content":"`true` if the stylus is over the same element as a hit test; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,104],"content":"`true` if the stylus is over the same element as a hit test; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the stylus is over the same element as a hit test; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,80],"source":"`true` if the stylus is over the same element as a hit test; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[81,104],"source":" The default is `false`."}]}],"pos":[182609,182716],"yaml":true},{"content":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsStylusDirectlyOver\"></xref> property changes on this element.","nodes":[{"pos":[0,134],"content":"Occurs when the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsStylusDirectlyOver\"&gt;&lt;/xref&gt;</ph> property changes on this element.","source":"Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsStylusDirectlyOver\"></xref> property changes on this element."}],"pos":[183791,183926],"yaml":true},{"content":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.","nodes":[{"pos":[0,103],"content":"This member is a <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> event, not a routed event.","source":"This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event."}],"pos":[183937,184041],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.IsStylusDirectlyOver\"></xref> dependency property.","nodes":[{"pos":[0,107],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsStylusDirectlyOver\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.IsStylusDirectlyOver\"></xref> dependency property."}],"pos":[185275,185383],"yaml":true},{"content":"Gets a value that indicates whether the stylus is located over this element (including visual child elements).","nodes":[{"pos":[0,110],"content":"Gets a value that indicates whether the stylus is located over this element (including visual child elements).","nodes":[{"content":"Gets a value that indicates whether the stylus is located over this element (including visual child elements).","pos":[0,110]}]}],"pos":[186497,186608],"yaml":true},{"content":"If this element has stylus capture, this property remains `true` until stylus capture is lost and the pointer is out of its bounds.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"dependencyPropertyInfo_IsStylusOver\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.IsStylusOverProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,131],"content":"If this element has stylus capture, this property remains <ph id=\"ph1\">`true`</ph> until stylus capture is lost and the pointer is out of its bounds.","source":"If this element has stylus capture, this property remains `true` until stylus capture is lost and the pointer is out of its bounds."},{"pos":[138,297],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[360,391],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[412,428],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[429,486],"content":"<xref:System.Windows.ContentElement.IsStylusOverProperty>","nodes":[]},{"pos":[491,524],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[525,529],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[186619,187164],"yaml":true,"extradata":"MT"},{"content":"`true` if the stylus is over the element or its child elements; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,107],"content":"`true` if the stylus is over the element or its child elements; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the stylus is over the element or its child elements; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,83],"source":"`true` if the stylus is over the element or its child elements; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[84,107],"source":" The default is `false`."}]}],"pos":[187279,187389],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.IsStylusOver\"></xref> dependency property.","nodes":[{"pos":[0,99],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsStylusOver\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.ContentElement.IsStylusOver\"></xref> dependency property."}],"pos":[188414,188514],"yaml":true},{"content":"Occurs when a key is pressed while focus is on this element.","nodes":[{"pos":[0,60],"content":"Occurs when a key is pressed while focus is on this element.","nodes":[{"content":"Occurs when a key is pressed while focus is on this element.","pos":[0,60]}]}],"pos":[189587,189648],"yaml":true},{"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.ContentElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.KeyDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_KeyDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.KeyDownEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewKeyDown>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnKeyDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,389],"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.ContentElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.","nodes":[{"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.ContentElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.","pos":[0,389],"nodes":[{"content":"Key handling interacts with other platform features such as commanding and text composition.","pos":[0,92]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.","pos":[93,236],"source":" The <xref:System.Windows.ContentElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls."},{"content":"This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.","pos":[237,389]}]}]},{"pos":[396,941],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.KeyDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.KeyDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,545],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;</ph> attached event for this class so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,296],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.KeyDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[297,545],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[992,1016],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1037,1053],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1054,1103],"content":"<xref:System.Windows.ContentElement.KeyDownEvent>","nodes":[]},{"pos":[1108,1124],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1125,1133],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1138,1146],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1147,1190],"content":"<xref:System.Windows.Input.KeyEventHandler>","nodes":[]},{"pos":[1201,1290],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewKeyDown>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph>.","pos":[0,89],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewKeyDown>."}]},{"pos":[1300,1421],"content":"Override <xref:System.Windows.ContentElement.OnKeyDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnKeyDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,121],"source":"Override <xref:System.Windows.ContentElement.OnKeyDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[189659,191100],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.KeyDown\"></xref> routed event.","nodes":[{"pos":[0,87],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.KeyDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.KeyDown\"></xref> routed event."}],"pos":[192186,192274],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[192285,192825],"yaml":true,"extradata":"MT"},{"content":"Occurs when a key is released while focus is on this element.","nodes":[{"pos":[0,61],"content":"Occurs when a key is released while focus is on this element.","nodes":[{"content":"Occurs when a key is released while focus is on this element.","pos":[0,61]}]}],"pos":[193864,193926],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event for this class so that  <xref:System.Windows.ContentElement.KeyUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_KeyUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.KeyUpEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewKeyUp>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnKeyUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,538],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event for this class so that  <xref:System.Windows.ContentElement.KeyUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event for this class so that  <xref:System.Windows.ContentElement.KeyUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,538],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;</ph> attached event for this class so that  <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,293],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event for this class so that  <xref:System.Windows.ContentElement.KeyUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[294,538],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[587,611],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[632,648],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[649,696],"content":"<xref:System.Windows.ContentElement.KeyUpEvent>","nodes":[]},{"pos":[701,717],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[718,726],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[731,739],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[740,783],"content":"<xref:System.Windows.Input.KeyEventHandler>","nodes":[]},{"pos":[794,881],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewKeyUp>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph>.","pos":[0,87],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewKeyUp>."}]},{"pos":[891,1010],"content":"Override <xref:System.Windows.ContentElement.OnKeyUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnKeyUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,119],"source":"Override <xref:System.Windows.ContentElement.OnKeyUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[193937,194965],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.KeyUp\"></xref> routed event.","nodes":[{"pos":[0,85],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.KeyUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.KeyUp\"></xref> routed event."}],"pos":[196037,196123],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[196134,196674],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element loses logical focus.","nodes":[{"pos":[0,45],"content":"Occurs when this element loses logical focus.","nodes":[{"content":"Occurs when this element loses logical focus.","pos":[0,45]}]}],"pos":[197735,197781],"yaml":true},{"content":"Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus.  \n  \n A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.ContentElement.IsFocused%2A> property of an element in the route changes from `true` to `false`.  \n  \n Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.  \n  \n<a name=\"routedEventInfo_LostFocus\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.LostFocusEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.RoutedEventHandler>|  \n  \n-   There is no corresponding tunneling event.  \n  \n-   Override <xref:System.Windows.ContentElement.OnLostFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,329],"content":"Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus.","nodes":[{"content":"Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus.","pos":[0,329],"nodes":[{"content":"Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope.","pos":[0,162]},{"content":"In this scenario, keyboard focus remains where it is, and the element where a <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.Focus%2A&gt;</ph> method is called still gets logical focus.","pos":[163,329],"source":" In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus."}]}]},{"pos":[336,540],"content":"A more precise interpretation of this event is that it is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property of an element in the route changes from <ph id=\"ph2\">`true`</ph> to <ph id=\"ph3\">`false`</ph>.","source":"A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.ContentElement.IsFocused%2A> property of an element in the route changes from `true` to `false`."},{"pos":[547,838],"content":"Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.","nodes":[{"content":"Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.","pos":[0,291],"nodes":[{"content":"Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.","pos":[0,164]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that gained focus.","pos":[165,291],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus."}]}]},{"pos":[891,915],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[936,952],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[953,1004],"content":"<xref:System.Windows.ContentElement.LostFocusEvent>","nodes":[]},{"pos":[1009,1025],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1026,1034],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1039,1047],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1048,1088],"content":"<xref:System.Windows.RoutedEventHandler>","nodes":[]},{"pos":[1099,1141],"content":"There is no corresponding tunneling event.","nodes":[{"content":"There is no corresponding tunneling event.","pos":[0,42]}]},{"pos":[1151,1274],"content":"Override <xref:System.Windows.ContentElement.OnLostFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnLostFocus%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,123],"source":"Override <xref:System.Windows.ContentElement.OnLostFocus%2A> to implement class handling for this event in derived classes."}]}],"pos":[197792,199088],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.LostFocus\"></xref> routed event.","nodes":[{"pos":[0,89],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.LostFocus\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.LostFocus\"></xref> routed event."}],"pos":[200182,200272],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[200283,200823],"yaml":true,"extradata":"MT"},{"content":"Occurs when the keyboard is no longer focused on this element.","nodes":[{"pos":[0,62],"content":"Occurs when the keyboard is no longer focused on this element.","nodes":[{"content":"Occurs when the keyboard is no longer focused on this element.","pos":[0,62]}]}],"pos":[201936,201999],"yaml":true},{"content":"Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_LostKeyboardFocus\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.LostKeyboardFocusEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,288],"content":"Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.","nodes":[{"content":"Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.","pos":[0,288],"nodes":[{"content":"Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.","pos":[0,163]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.","pos":[164,288],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus."}]}]},{"pos":[295,881],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,586],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,317],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[318,586],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[942,966],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[987,1003],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1004,1063],"content":"<xref:System.Windows.ContentElement.LostKeyboardFocusEvent>","nodes":[]},{"pos":[1068,1084],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1085,1093],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1098,1106],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1107,1167],"content":"<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>","nodes":[]},{"pos":[1178,1277],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph>.","pos":[0,99],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>."}]},{"pos":[1287,1418],"content":"Override <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,131],"source":"Override <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes."}]}],"pos":[202010,203448],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.LostKeyboardFocus\"></xref> routed event.","nodes":[{"pos":[0,97],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.LostKeyboardFocus\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.LostKeyboardFocus\"></xref> routed event."}],"pos":[204638,204736],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[204747,205287],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element loses mouse capture.","nodes":[{"pos":[0,45],"content":"Occurs when this element loses mouse capture.","nodes":[{"content":"Occurs when this element loses mouse capture.","pos":[0,45]}]}],"pos":[206402,206448],"yaml":true},{"content":"When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations.  \n  \n Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_LostMouseCapture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.LostMouseCaptureEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \n  \n-   There is no defined corresponding tunneling event.  \n  \n-   Override <xref:System.Windows.ContentElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,172],"content":"When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations.","nodes":[{"content":"When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations.","pos":[0,172],"nodes":[{"content":"When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds.","pos":[0,102]},{"content":"The mouse is typically captured only during drag-and-drop operations.","pos":[103,172]}]}]},{"pos":[179,472],"content":"Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.","nodes":[{"content":"Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.","pos":[0,293],"nodes":[{"content":"Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached.","pos":[0,166]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost capture.","pos":[167,293],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture."}]}]},{"pos":[479,1055],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,576],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.LostMouseCapture&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,312],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.LostMouseCapture&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[313,576],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1115,1139],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1160,1176],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1177,1235],"content":"<xref:System.Windows.ContentElement.LostMouseCaptureEvent>","nodes":[]},{"pos":[1240,1256],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1257,1265],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1270,1278],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1279,1324],"content":"<xref:System.Windows.Input.MouseEventHandler>","nodes":[]},{"pos":[1335,1385],"content":"There is no defined corresponding tunneling event.","nodes":[{"content":"There is no defined corresponding tunneling event.","pos":[0,50]}]},{"pos":[1395,1525],"content":"Override <xref:System.Windows.ContentElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnLostMouseCapture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,130],"source":"Override <xref:System.Windows.ContentElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes."}]}],"pos":[206459,208006],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.LostMouseCapture\"></xref> routed event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.LostMouseCapture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.LostMouseCapture\"></xref> routed event."}],"pos":[209159,209256],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[209267,209807],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element loses stylus capture.","nodes":[{"pos":[0,46],"content":"Occurs when this element loses stylus capture.","nodes":[{"content":"Occurs when this element loses stylus capture.","pos":[0,46]}]}],"pos":[210927,210974],"yaml":true},{"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations.  \n  \n Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_LostStylusCapture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.LostStylusCaptureEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   There is no defined corresponding tunneling event.  \n  \n-   Override <xref:System.Windows.ContentElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,175],"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations.","nodes":[{"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations.","pos":[0,175],"nodes":[{"content":"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds.","pos":[0,104]},{"content":"The stylus is typically captured only during drag-and-drop operations.","pos":[105,175]}]}]},{"pos":[182,471],"content":"Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.","nodes":[{"content":"Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.","pos":[0,289],"nodes":[{"content":"Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached.","pos":[0,164]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.","pos":[165,289],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus."}]}]},{"pos":[478,1060],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,582],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.LostStylusCapture&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,315],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.LostStylusCapture&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[316,582],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1121,1145],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1166,1182],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1183,1242],"content":"<xref:System.Windows.ContentElement.LostStylusCaptureEvent>","nodes":[]},{"pos":[1247,1263],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1264,1272],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1277,1285],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1286,1332],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1343,1393],"content":"There is no defined corresponding tunneling event.","nodes":[{"content":"There is no defined corresponding tunneling event.","pos":[0,50]}]},{"pos":[1403,1534],"content":"Override <xref:System.Windows.ContentElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnLostStylusCapture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,131],"source":"Override <xref:System.Windows.ContentElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes."}]}],"pos":[210985,212541],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.LostStylusCapture\"></xref> routed event.","nodes":[{"pos":[0,97],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.LostStylusCapture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.LostStylusCapture\"></xref> routed event."}],"pos":[213681,213779],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[213790,214330],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element loses a touch capture.","nodes":[{"pos":[0,47],"content":"Occurs when this element loses a touch capture.","nodes":[{"content":"Occurs when this element loses a touch capture.","pos":[0,47]}]}],"pos":[215445,215493],"yaml":true},{"content":"<a name=\"routedEventInfo_LostTouchCapture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.LostTouchCaptureEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   Override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[54,78],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[99,115],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[116,174],"content":"<xref:System.Windows.ContentElement.LostTouchCaptureEvent>","nodes":[]},{"pos":[179,195],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[196,204],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[209,217],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[218,300],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[311,441],"content":"Override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,130],"source":"Override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes."}]}],"pos":[215504,215959],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.LostTouchCapture\"></xref> routed event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.LostTouchCapture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.LostTouchCapture\"></xref> routed event."}],"pos":[217119,217216],"yaml":true},{"content":"Occurs when any mouse button is pressed while the pointer is over this element.","nodes":[{"pos":[0,79],"content":"Occurs when any mouse button is pressed while the pointer is over this element.","nodes":[{"content":"Occurs when any mouse button is pressed while the pointer is over this element.","pos":[0,79]}]}],"pos":[218266,218346],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n The <xref:System.Windows.ContentElement.MouseDown> event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>.  \n  \n> [!IMPORTANT]\n>  A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.  \n  \n You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.ContentElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:  \n  \n-   Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.  \n  \n-   Register a handler on the control procedurally by calling <xref:System.Windows.ContentElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.  \n  \n<a name=\"routedEventInfo_MouseDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.MouseDownEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseDown>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnMouseDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,548],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,548],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,298],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[299,548],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[555,1330],"content":"The <xref:System.Windows.ContentElement.MouseDown> event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>.","nodes":[{"content":"The <xref:System.Windows.ContentElement.MouseDown> event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>.","pos":[0,775],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> event is often raised together with either <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.","pos":[0,282],"source":"The <xref:System.Windows.ContentElement.MouseDown> event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id=\"ph3\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event reaches this element along the event route.","pos":[283,640],"source":" <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route."},{"content":"See Remarks for <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.","pos":[641,775],"source":" See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>."}]}]},{"pos":[1338,2036],"content":"[!IMPORTANT]\n A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.","leadings":["","> "],"nodes":[{"content":" A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.","pos":[13,696],"nodes":[{"content":"A few <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes that have control-like behavior, for example, <ph id=\"ph2\">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>, might have inherent class handling for mouse button events.","pos":[1,208],"source":" A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events."},{"content":"The left mouse button down event is the most likely event to have class handling in a control.","pos":[209,303]},{"content":"The class handling often marks the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class event as handled.","pos":[304,407],"source":" The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled."},{"content":"Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.","pos":[408,526]},{"content":"Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.","pos":[527,683]}]}]},{"pos":[2043,2297],"content":"You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.ContentElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:","nodes":[{"content":"You can resolve the issue that is outlined in the preceding Important and still receive <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph> events for left mouse button down events on a derived class that has class handling by using either of these solutions:","pos":[0,254],"source":"You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.ContentElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:"}]},{"pos":[2307,2546],"content":"Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.","nodes":[{"content":"Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.","pos":[0,239],"nodes":[{"content":"Attach handlers for the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event, which is not marked as handled by the controls.","pos":[0,132],"source":"Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls."},{"content":"Notice that because this is a preview event, the route starts at the root and tunnels down to the control.","pos":[133,239]}]}]},{"pos":[2556,2810],"content":"Register a handler on the control procedurally by calling <xref:System.Windows.ContentElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.","nodes":[{"content":"Register a handler on the control procedurally by calling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.","pos":[0,254],"source":"Register a handler on the control procedurally by calling <xref:System.Windows.ContentElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data."}]},{"pos":[2863,2887],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[2908,2924],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2925,2976],"content":"<xref:System.Windows.ContentElement.MouseDownEvent>","nodes":[]},{"pos":[2981,2997],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2998,3006],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[3011,3019],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[3020,3071],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[3082,3173],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseDown>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph>.","pos":[0,91],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseDown>."}]},{"pos":[3183,3306],"content":"Override <xref:System.Windows.ContentElement.OnMouseDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,123],"source":"Override <xref:System.Windows.ContentElement.OnMouseDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[218357,221692],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.MouseDown\"></xref> routed event.","nodes":[{"pos":[0,89],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.MouseDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.MouseDown\"></xref> routed event."}],"pos":[222808,222898],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[222909,223449],"yaml":true,"extradata":"MT"},{"content":"Occurs when the mouse pointer enters the bounds of this element.","nodes":[{"pos":[0,64],"content":"Occurs when the mouse pointer enters the bounds of this element.","nodes":[{"content":"Occurs when the mouse pointer enters the bounds of this element.","pos":[0,64]}]}],"pos":[224520,224585],"yaml":true},{"content":"<xref:System.Windows.ContentElement.MouseEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \n  \n Although <xref:System.Windows.ContentElement.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsMouseOver%2A> property value has changed from `false` to `true` on this element.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_MouseEnter\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.MouseEnterEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \n  \n-   Override <xref:System.Windows.ContentElement.OnMouseEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,406],"content":"<xref:System.Windows.ContentElement.MouseEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> is a <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.","pos":[0,188],"source":"<xref:System.Windows.ContentElement.MouseEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy."},{"content":"Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.","pos":[189,308]},{"content":"However, they do enable other aspects of routed event behavior, such as event triggers in styles.","pos":[309,406]}]},{"pos":[413,694],"content":"Although <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> property value has changed from <ph id=\"ph3\">`false`</ph> to <ph id=\"ph4\">`true`</ph> on this element.","source":"Although <xref:System.Windows.ContentElement.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsMouseOver%2A> property value has changed from `false` to `true` on this element."},{"pos":[701,1253],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,552],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,300],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseEnter&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[301,552],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1307,1331],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1352,1368],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1369,1421],"content":"<xref:System.Windows.ContentElement.MouseEnterEvent>","nodes":[]},{"pos":[1426,1442],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1443,1449],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[1454,1462],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1463,1508],"content":"<xref:System.Windows.Input.MouseEventHandler>","nodes":[]},{"pos":[1519,1643],"content":"Override <xref:System.Windows.ContentElement.OnMouseEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnMouseEnter%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,124],"source":"Override <xref:System.Windows.ContentElement.OnMouseEnter%2A> to implement class handling for this event in derived classes."}]}],"pos":[224596,226259],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.MouseEnter\"></xref> routed event.","nodes":[{"pos":[0,90],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.MouseEnter\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.MouseEnter\"></xref> routed event."}],"pos":[227348,227439],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[227450,227990],"yaml":true,"extradata":"MT"},{"content":"Occurs when the mouse pointer leaves the bounds of this element.","nodes":[{"pos":[0,64],"content":"Occurs when the mouse pointer leaves the bounds of this element.","nodes":[{"content":"Occurs when the mouse pointer leaves the bounds of this element.","pos":[0,64]}]}],"pos":[229040,229105],"yaml":true},{"content":"<xref:System.Windows.ContentElement.MouseLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \n  \n Although <xref:System.Windows.ContentElement.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_MouseLeave\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.MouseLeaveEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \n  \n-   Override <xref:System.Windows.ContentElement.OnMouseLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,406],"content":"<xref:System.Windows.ContentElement.MouseLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> is a <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.","pos":[0,188],"source":"<xref:System.Windows.ContentElement.MouseLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy."},{"content":"Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.","pos":[189,308]},{"content":"However, they do enable other aspects of routed event behavior, such as event triggers in styles.","pos":[309,406]}]},{"pos":[413,672],"content":"Although <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> tracks when the mouse leaves an element, this event more literally reports that the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.IsMouseOver%2A&gt;</ph> property value has changed from <ph id=\"ph3\">`true`</ph> to <ph id=\"ph4\">`false`</ph> on this element.","source":"Although <xref:System.Windows.ContentElement.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element."},{"pos":[679,1231],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,552],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,300],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseLeave&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[301,552],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1285,1309],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1330,1346],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1347,1399],"content":"<xref:System.Windows.ContentElement.MouseLeaveEvent>","nodes":[]},{"pos":[1404,1420],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1421,1427],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[1432,1440],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1441,1486],"content":"<xref:System.Windows.Input.MouseEventHandler>","nodes":[]},{"pos":[1497,1621],"content":"Override <xref:System.Windows.ContentElement.OnMouseLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnMouseLeave%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,124],"source":"Override <xref:System.Windows.ContentElement.OnMouseLeave%2A> to implement class handling for this event in derived classes."}]}],"pos":[229116,230757],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.MouseLeave\"></xref> routed event.","nodes":[{"pos":[0,90],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.MouseLeave\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.MouseLeave\"></xref> routed event."}],"pos":[231868,231959],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[231970,232510],"yaml":true,"extradata":"MT"},{"content":"Occurs when the left mouse button is pressed while the mouse pointer is over this element.","nodes":[{"pos":[0,90],"content":"Occurs when the left mouse button is pressed while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the left mouse button is pressed while the mouse pointer is over this element.","pos":[0,90]}]}],"pos":[233614,233705],"yaml":true},{"content":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \n  \n> [!IMPORTANT]\n>  A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.  \n  \n You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.ContentElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:  \n  \n-   Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.  \n  \n-   Register a handler on the control procedurally by calling <xref:System.Windows.ContentElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.  \n  \n<a name=\"routedEventInfo_MouseLeftButtonDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,287],"content":"Although this <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","source":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>."},{"pos":[294,552],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,258],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[559,1060],"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","nodes":[{"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[0,501],"nodes":[{"content":"The arguments of this event expose the arguments of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event.","pos":[0,142],"source":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[143,501],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."}]}]},{"pos":[1067,1722],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,216],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[217,365]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","pos":[366,655],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>."}]},{"pos":[1730,2428],"content":"[!IMPORTANT]\n A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.","leadings":["","> "],"nodes":[{"content":" A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.","pos":[13,696],"nodes":[{"content":"A few <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> derived classes that have control-like behavior, for example, <ph id=\"ph2\">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph>, might have inherent class handling for mouse button events.","pos":[1,208],"source":" A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events."},{"content":"The left mouse button down event is the most likely event to have class handling in a control.","pos":[209,303]},{"content":"The class handling often marks the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class event as handled.","pos":[304,407],"source":" The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled."},{"content":"Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised.","pos":[408,526]},{"content":"Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.","pos":[527,683]}]}]},{"pos":[2435,2699],"content":"You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.ContentElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:","nodes":[{"content":"You can resolve the issue that is outlined in the preceding Important and still receive <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> events for left mouse button down events on a derived class that has class handling by using either of these solutions:","pos":[0,264],"source":"You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.ContentElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:"}]},{"pos":[2709,2948],"content":"Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.","nodes":[{"content":"Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.","pos":[0,239],"nodes":[{"content":"Attach handlers for the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event, which is not marked as handled by the controls.","pos":[0,132],"source":"Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls."},{"content":"Notice that because this is a preview event, the route starts at the root and tunnels down to the control.","pos":[133,239]}]}]},{"pos":[2958,3212],"content":"Register a handler on the control procedurally by calling <xref:System.Windows.ContentElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.","nodes":[{"content":"Register a handler on the control procedurally by calling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.","pos":[0,254],"source":"Register a handler on the control procedurally by calling <xref:System.Windows.ContentElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data."}]},{"pos":[3275,3299],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[3320,3336],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[3337,3398],"content":"<xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>","nodes":[]},{"pos":[3403,3419],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[3420,3426],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[3431,3439],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[3440,3491],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[3502,3635],"content":"Override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,133],"source":"Override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[233716,237384],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.MouseLeftButtonDown\"></xref> routed event.","nodes":[{"pos":[0,99],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.MouseLeftButtonDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.MouseLeftButtonDown\"></xref> routed event."}],"pos":[238570,238670],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[238681,239221],"yaml":true,"extradata":"MT"},{"content":"Occurs when the left mouse button is released while the mouse pointer is over this element.","nodes":[{"pos":[0,91],"content":"Occurs when the left mouse button is released while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the left mouse button is released while the mouse pointer is over this element.","pos":[0,91]}]}],"pos":[240344,240436],"yaml":true},{"content":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \n  \n<a name=\"routedEventInfo_MouseLeftButtonUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,287],"content":"Although this <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","source":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>."},{"pos":[294,550],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,256],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[557,1056],"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","nodes":[{"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[0,499],"nodes":[{"content":"The arguments of this event expose the arguments of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> event.","pos":[0,140],"source":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[141,499],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."}]}]},{"pos":[1063,1718],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,216],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[217,365]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","pos":[366,655],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>."}]},{"pos":[1779,1803],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1824,1840],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1841,1900],"content":"<xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>","nodes":[]},{"pos":[1905,1921],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1922,1928],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[1933,1941],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1942,1993],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[2004,2135],"content":"Override <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,131],"source":"Override <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[240447,242606],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.MouseLeftButtonUp\"></xref> routed event.","nodes":[{"pos":[0,97],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.MouseLeftButtonUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.MouseLeftButtonUp\"></xref> routed event."}],"pos":[243756,243854],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[243865,244405],"yaml":true,"extradata":"MT"},{"content":"Occurs when the mouse pointer moves while over this element.","nodes":[{"pos":[0,60],"content":"Occurs when the mouse pointer moves while over this element.","nodes":[{"content":"Occurs when the mouse pointer moves while over this element.","pos":[0,60]}]}],"pos":[245478,245539],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_MouseMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.MouseMoveEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseMove>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnMouseMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,548],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,548],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,298],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[299,548],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[601,625],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[646,662],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[663,714],"content":"<xref:System.Windows.ContentElement.MouseMoveEvent>","nodes":[]},{"pos":[719,735],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[736,744],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[749,757],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[758,803],"content":"<xref:System.Windows.Input.MouseEventHandler>","nodes":[]},{"pos":[814,905],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseMove>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph>.","pos":[0,91],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseMove>."}]},{"pos":[915,1038],"content":"Override <xref:System.Windows.ContentElement.OnMouseMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnMouseMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,123],"source":"Override <xref:System.Windows.ContentElement.OnMouseMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[245550,246606],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.MouseMove\"></xref> routed event.","nodes":[{"pos":[0,89],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.MouseMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.MouseMove\"></xref> routed event."}],"pos":[247710,247800],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[247811,248351],"yaml":true,"extradata":"MT"},{"content":"Occurs when the right mouse button is pressed while the mouse pointer is over this element.","nodes":[{"pos":[0,91],"content":"Occurs when the right mouse button is pressed while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the right mouse button is pressed while the mouse pointer is over this element.","pos":[0,91]}]}],"pos":[249482,249574],"yaml":true},{"content":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \n  \n Right button mouse events frequently have native handling in application scenarios. For instance, a right mouse button down might display a context menu. See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).  \n  \n<a name=\"routedEventInfo_MouseRightButtonDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.MouseRightButtonDownEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,287],"content":"Although this <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","source":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>."},{"pos":[294,552],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,258],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[559,1060],"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","nodes":[{"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[0,501],"nodes":[{"content":"The arguments of this event expose the arguments of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event.","pos":[0,142],"source":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[143,501],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."}]}]},{"pos":[1067,1722],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,216],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[217,365]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","pos":[366,655],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>."}]},{"pos":[1729,1965],"content":"Right button mouse events frequently have native handling in application scenarios. For instance, a right mouse button down might display a context menu. See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).","nodes":[{"content":"Right button mouse events frequently have native handling in application scenarios.","pos":[0,83]},{"content":"For instance, a right mouse button down might display a context menu.","pos":[84,153]},{"content":"See <bpt id=\"p1\">[</bpt>ContextMenu Overview<ept id=\"p1\">](~/docs/framework/wpf/controls/contextmenu-overview.md)</ept>.","pos":[154,236],"source":" See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md)."}]},{"pos":[2029,2053],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[2074,2090],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2091,2153],"content":"<xref:System.Windows.ContentElement.MouseRightButtonDownEvent>","nodes":[]},{"pos":[2158,2174],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2175,2181],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[2186,2194],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2195,2246],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[2257,2391],"content":"Override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,134],"source":"Override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[249585,252002],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.MouseRightButtonDown\"></xref> routed event.","nodes":[{"pos":[0,100],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.MouseRightButtonDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.MouseRightButtonDown\"></xref> routed event."}],"pos":[253195,253296],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[253307,253847],"yaml":true,"extradata":"MT"},{"content":"Occurs when the right mouse button is released while the mouse pointer is over this element.","nodes":[{"pos":[0,92],"content":"Occurs when the right mouse button is released while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the right mouse button is released while the mouse pointer is over this element.","pos":[0,92]}]}],"pos":[254977,255070],"yaml":true},{"content":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \n  \n<a name=\"routedEventInfo_MouseRightButtonUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.MouseRightButtonUpEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,287],"content":"Although this <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","source":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>."},{"pos":[294,550],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,256],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[557,1056],"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","nodes":[{"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[0,499],"nodes":[{"content":"The arguments of this event expose the arguments of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> event.","pos":[0,140],"source":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[141,499],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."}]}]},{"pos":[1063,1718],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,216],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[217,365]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","pos":[366,655],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>."}]},{"pos":[1780,1804],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1825,1841],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1842,1902],"content":"<xref:System.Windows.ContentElement.MouseRightButtonUpEvent>","nodes":[]},{"pos":[1907,1923],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1924,1930],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[1935,1943],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1944,1995],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[2006,2138],"content":"Override <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,132],"source":"Override <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[255081,257243],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.MouseRightButtonUp\"></xref> routed event.","nodes":[{"pos":[0,98],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.MouseRightButtonUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.MouseRightButtonUp\"></xref> routed event."}],"pos":[258422,258521],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[258532,259072],"yaml":true,"extradata":"MT"},{"content":"Occurs when any mouse button is released over this element.","nodes":[{"pos":[0,59],"content":"Occurs when any mouse button is released over this element.","nodes":[{"content":"Occurs when any mouse button is released over this element.","pos":[0,59]}]}],"pos":[260134,260194],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n The <xref:System.Windows.ContentElement.MouseUp> event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>.  \n  \n<a name=\"routedEventInfo_MouseUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.MouseUpEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseUp>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnMouseUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,540],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,540],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,294],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[295,540],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[547,1310],"content":"The <xref:System.Windows.ContentElement.MouseUp> event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>.","nodes":[{"content":"The <xref:System.Windows.ContentElement.MouseUp> event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>.","pos":[0,763],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph> event is often raised together with either <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>, which correspond to a release of one of the two standard mouse buttons.","pos":[0,278],"source":"The <xref:System.Windows.ContentElement.MouseUp> event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id=\"ph3\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event reaches this element along the event route.","pos":[279,632],"source":" <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route."},{"content":"See Remarks for <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>.","pos":[633,763],"source":" See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>."}]}]},{"pos":[1361,1385],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1406,1422],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1423,1472],"content":"<xref:System.Windows.ContentElement.MouseUpEvent>","nodes":[]},{"pos":[1477,1493],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1494,1502],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1507,1515],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1516,1567],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[1578,1667],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseUp>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph>.","pos":[0,89],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseUp>."}]},{"pos":[1677,1798],"content":"Override <xref:System.Windows.ContentElement.OnMouseUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,121],"source":"Override <xref:System.Windows.ContentElement.OnMouseUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[260205,262023],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.MouseUp\"></xref> routed event.","nodes":[{"pos":[0,87],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.MouseUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.MouseUp\"></xref> routed event."}],"pos":[263125,263213],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[263224,263764],"yaml":true,"extradata":"MT"},{"content":"Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.","nodes":[{"pos":[0,90],"content":"Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.","pos":[0,90]}]}],"pos":[264833,264924],"yaml":true},{"content":"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.ContentElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseWheel> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_MouseWheel\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.MouseWheelEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseWheel>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnMouseWheel%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,249],"content":"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.ContentElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.","nodes":[{"content":"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> event from a focused or captured element, the mouse pointer might actually be over another element.","pos":[0,249],"source":"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.ContentElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element."}]},{"pos":[256,808],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseWheel> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseWheel> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,552],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,300],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseWheel> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[301,552],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[862,886],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[907,923],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[924,976],"content":"<xref:System.Windows.ContentElement.MouseWheelEvent>","nodes":[]},{"pos":[981,997],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[998,1006],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1011,1019],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1020,1070],"content":"<xref:System.Windows.Input.MouseWheelEventHandler>","nodes":[]},{"pos":[1081,1173],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseWheel>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseWheel&gt;</ph>.","pos":[0,92],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseWheel>."}]},{"pos":[1183,1307],"content":"Override <xref:System.Windows.ContentElement.OnMouseWheel%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnMouseWheel%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,124],"source":"Override <xref:System.Windows.ContentElement.OnMouseWheel%2A> to implement class handling for this event in derived classes."}]}],"pos":[264935,266262],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.MouseWheel\"></xref> routed event.","nodes":[{"pos":[0,90],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.MouseWheel\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.MouseWheel\"></xref> routed event."}],"pos":[267383,267474],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[267485,268025],"yaml":true,"extradata":"MT"},{"content":"Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.","nodes":[{"pos":[0,210],"content":"Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.","nodes":[{"content":"Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.","pos":[0,210],"nodes":[{"content":"Attempts to move focus from this element to another element.","pos":[0,60]},{"content":"The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.","pos":[61,210]}]}]}],"pos":[269263,269474],"yaml":true},{"content":"Make sure you check the return value of this method. A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.","nodes":[{"pos":[0,229],"content":"Make sure you check the return value of this method. A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.","nodes":[{"content":"Make sure you check the return value of this method.","pos":[0,52]},{"content":"A return value of <ph id=\"ph1\">`false`</ph> might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.","pos":[53,229],"source":" A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap."}]}],"pos":[269485,269715],"yaml":true,"extradata":"MT"},{"content":"A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.","nodes":[{"pos":[0,143],"content":"A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.","nodes":[{"content":"A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.","pos":[0,143]}]}],"pos":[269920,270064],"yaml":true},{"content":"`true` if the requested traversal was performed; otherwise, `false`.","nodes":[{"pos":[0,68],"content":"<ph id=\"ph1\">`true`</ph> if the requested traversal was performed; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the requested traversal was performed; otherwise, `false`."}],"pos":[270122,270193],"yaml":true},{"content":"Returns class-specific <xref href=\"System.Windows.Automation.Peers.AutomationPeer\"></xref> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.","nodes":[{"pos":[0,200],"content":"Returns class-specific <ph id=\"ph1\">&lt;xref href=\"System.Windows.Automation.Peers.AutomationPeer\"&gt;&lt;/xref&gt;</ph> implementations for the <ph id=\"ph2\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure.","source":"Returns class-specific <xref href=\"System.Windows.Automation.Peers.AutomationPeer\"></xref> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure."}],"pos":[271234,271435],"yaml":true},{"content":"The type-specific <xref href=\"System.Windows.Automation.Peers.AutomationPeer\"></xref> implementation.","nodes":[{"pos":[0,101],"content":"The type-specific <ph id=\"ph1\">&lt;xref href=\"System.Windows.Automation.Peers.AutomationPeer\"&gt;&lt;/xref&gt;</ph> implementation.","source":"The type-specific <xref href=\"System.Windows.Automation.Peers.AutomationPeer\"></xref> implementation."}],"pos":[271659,271761],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,220],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.DragEnter\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,160],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[161,220]}]}],"pos":[272856,273077],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[273088,274364],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[274544,274628],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragLeave\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,220],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragLeave\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.DragLeave\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,160],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragLeave\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[161,220]}]}],"pos":[275734,275955],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[275966,277242],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[277422,277506],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragOver\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,219],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragOver\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.DragOver\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,159],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragOver\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[160,219]}]}],"pos":[278606,278826],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[278837,280113],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[280292,280376],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,220],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.DragEnter\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,160],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[161,220]}]}],"pos":[281451,281672],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[281683,282959],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[283134,283218],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.GiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,223],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.GiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.GiveFeedback\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,163],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.GiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[164,223]}]}],"pos":[284385,284609],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[284620,285896],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.GiveFeedbackEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.GiveFeedbackEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.GiveFeedbackEventArgs\"></xref> that contains the event data."}],"pos":[286095,286187],"yaml":true},{"content":"Raises the <xref href=\"System.Windows.ContentElement.GotFocus\"></xref> routed event by using the event data provided.","nodes":[{"pos":[0,117],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.GotFocus\"&gt;&lt;/xref&gt;</ph> routed event by using the event data provided.","source":"Raises the <xref href=\"System.Windows.ContentElement.GotFocus\"></xref> routed event by using the event data provided."}],"pos":[287302,287420],"yaml":true},{"content":"This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes. The <xref:System.Windows.ContentElement.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event.","nodes":[{"pos":[0,88],"content":"This method, although virtual, does have a default implementation that raises the event.","nodes":[{"content":"This method, although virtual, does have a default implementation that raises the event.","pos":[0,88]}]},{"pos":[95,576],"content":"This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes. The <xref:System.Windows.ContentElement.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event.","nodes":[{"content":"This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property value changes.","pos":[0,222],"source":"This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnGotFocus%2A&gt;</ph> implementation differs from some other <ph id=\"ph2\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> On* implementations, which only provide a convenient way to add class handling for that event.","pos":[223,481],"source":" The <xref:System.Windows.ContentElement.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event."}]}],"pos":[287431,288012],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data. This event data must contain the identifier for the <xref href=\"System.Windows.ContentElement.GotFocus\"></xref> event.","nodes":[{"pos":[0,198],"content":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data. This event data must contain the identifier for the <xref href=\"System.Windows.ContentElement.GotFocus\"></xref> event.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.RoutedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains event data.","pos":[0,79],"source":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data."},{"content":"This event data must contain the identifier for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.GotFocus\"&gt;&lt;/xref&gt;</ph> event.","pos":[80,198],"source":" This event data must contain the identifier for the <xref href=\"System.Windows.ContentElement.GotFocus\"></xref> event."}]}],"pos":[288195,288394],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.GotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,233],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.GotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.GotKeyboardFocus\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,173],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.GotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[174,233]}]}],"pos":[289655,289889],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[289900,291176],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,105],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data."}],"pos":[291407,291513],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.GotMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,229],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.GotMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.GotMouseCapture\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,169],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.GotMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[170,229]}]}],"pos":[292686,292916],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[292927,294203],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data."}],"pos":[294403,294494],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.GotStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,231],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.GotStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.GotStylusCapture\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,171],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.GotStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[172,231]}]}],"pos":[295678,295910],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[295921,297197],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[297400,297492],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.ContentElement.GotTouchCapture\"></xref> routed event that occurs when a touch is captured to this element.","nodes":[{"pos":[0,165],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.GotTouchCapture\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch is captured to this element.","source":"Provides class handling for the <xref href=\"System.Windows.ContentElement.GotTouchCapture\"></xref> routed event that occurs when a touch is captured to this element."}],"pos":[298665,298831],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.ContentElement.GotTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> method so that base classes receive the event.","nodes":[{"pos":[0,397],"content":"The <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.ContentElement.GotTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.ContentElement.GotTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> method so that base classes receive the event.","pos":[0,397],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> method has no default implementation.","pos":[0,99],"source":"The <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.GotTouchCapture&gt;</ph> event.","pos":[100,259],"source":" Override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.ContentElement.GotTouchCapture> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnGotTouchCapture%2A&gt;</ph> method so that base classes receive the event.","pos":[260,397],"source":" Be sure to call the base class’s <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> method so that base classes receive the event."}]}]}],"pos":[298842,299240],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[299440,299529],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsKeyboardFocusedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,194],"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsKeyboardFocusedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsKeyboardFocusedChanged\"&gt;&lt;/xref&gt;</ph> event is raised on this element.","pos":[0,134],"source":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsKeyboardFocusedChanged\"></xref> event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[135,194]}]}],"pos":[300857,301052],"yaml":true},{"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> dependency property changes. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is raised with that same event data instance. Notice that the  <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"pos":[0,515],"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> dependency property changes. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is raised with that same event data instance. Notice that the  <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","nodes":[{"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> dependency property changes. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is raised with that same event data instance. Notice that the  <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","pos":[0,515],"nodes":[{"content":"This virtual method is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsKeyboardFocused%2A&gt;</ph> dependency property changes.","pos":[0,138],"source":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> dependency property changes."},{"content":"The virtual method is raised first and can manipulate the event data as necessary.","pos":[139,221]},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> event is raised with that same event data instance.","pos":[222,344],"source":" Then the <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is raised with that same event data instance."},{"content":"Notice that the  <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusedChanged&gt;</ph> event is not a routed event.","pos":[345,452],"source":" Notice that the  <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is not a routed event."},{"content":"Therefore, you cannot mark it as handled in the class handler.","pos":[453,515]}]}]},{"pos":[522,813],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]}],"pos":[301063,301881],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[302118,302223],"yaml":true},{"content":"Invoked just before the <xref href=\"System.Windows.ContentElement.IsKeyboardFocusWithinChanged\"></xref> event is raised by this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,196],"content":"Invoked just before the <xref href=\"System.Windows.ContentElement.IsKeyboardFocusWithinChanged\"></xref> event is raised by this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked just before the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsKeyboardFocusWithinChanged\"&gt;&lt;/xref&gt;</ph> event is raised by this element.","pos":[0,136],"source":"Invoked just before the <xref href=\"System.Windows.ContentElement.IsKeyboardFocusWithinChanged\"></xref> event is raised by this element."},{"content":"Implement this method to add class handling for this event.","pos":[137,196]}]}],"pos":[303562,303759],"yaml":true},{"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"pos":[0,536],"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","nodes":[{"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","pos":[0,536],"nodes":[{"content":"This virtual method is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A&gt;</ph> dependency property changes its value.","pos":[0,152],"source":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> dependency property changes its value."},{"content":"The virtual method is raised first and can manipulate the event data as necessary.","pos":[153,235]},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> event is raised with that same event data instance.","pos":[236,362],"source":" Then the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance."},{"content":"Notice that the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged&gt;</ph> event is not a routed event.","pos":[363,473],"source":" Notice that the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is not a routed event."},{"content":"Therefore, you cannot mark it as handled in the class handler.","pos":[474,536]}]}]},{"pos":[543,834],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]}],"pos":[303770,304609],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,102],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[304850,304953],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsMouseCapturedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,192],"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsMouseCapturedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsMouseCapturedChanged\"&gt;&lt;/xref&gt;</ph> event is raised on this element.","pos":[0,132],"source":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsMouseCapturedChanged\"></xref> event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[133,192]}]}],"pos":[306282,306475],"yaml":true},{"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"pos":[0,518],"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","nodes":[{"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","pos":[0,518],"nodes":[{"content":"This virtual method is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> dependency property changes its value.","pos":[0,146],"source":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseCaptured%2A> dependency property changes its value."},{"content":"The virtual method is raised first and can manipulate the event data as necessary.","pos":[147,229]},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> event is raised with that same event data instance.","pos":[230,350],"source":" Then the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is raised with that same event data instance."},{"content":"Notice that the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsMouseCapturedChanged&gt;</ph> event is not a routed event.","pos":[351,455],"source":" Notice that the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is not a routed event."},{"content":"Therefore, you cannot mark it as handled in the class handler.","pos":[456,518]}]}]},{"pos":[525,816],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]}],"pos":[306486,307307],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[307542,307647],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsMouseCaptureWithinChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,197],"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsMouseCaptureWithinChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsMouseCaptureWithinChanged\"&gt;&lt;/xref&gt;</ph> event is raised on this element.","pos":[0,137],"source":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsMouseCaptureWithinChanged\"></xref> event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[138,197]}]}],"pos":[309000,309198],"yaml":true},{"content":"A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,102],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[309438,309541],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsMouseDirectlyOverChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,196],"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsMouseDirectlyOverChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsMouseDirectlyOverChanged\"&gt;&lt;/xref&gt;</ph> event is raised on this element.","pos":[0,136],"source":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsMouseDirectlyOverChanged\"></xref> event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[137,196]}]}],"pos":[310893,311090],"yaml":true},{"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"pos":[0,530],"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","nodes":[{"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","pos":[0,530],"nodes":[{"content":"This virtual method is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A&gt;</ph> dependency property changes its value.","pos":[0,150],"source":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> dependency property changes its value."},{"content":"The virtual method is raised first and can manipulate the event data as necessary.","pos":[151,233]},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph> event is raised with that same event data instance.","pos":[234,358],"source":" Then the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance."},{"content":"Notice that the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged&gt;</ph> event is not a routed event.","pos":[359,467],"source":" Notice that the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is not a routed event."},{"content":"Therefore, you cannot mark it as handled in the class handler.","pos":[468,530]}]}]},{"pos":[537,828],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]}],"pos":[311101,311934],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[312173,312278],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsStylusCapturedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,193],"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsStylusCapturedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsStylusCapturedChanged\"&gt;&lt;/xref&gt;</ph> event is raised on this element.","pos":[0,133],"source":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsStylusCapturedChanged\"></xref> event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[134,193]}]}],"pos":[313611,313805],"yaml":true},{"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsStylusCapturedChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"pos":[0,460],"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsStylusCapturedChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","nodes":[{"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsStylusCapturedChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","pos":[0,460],"nodes":[{"content":"This virtual method is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> dependency property changes its value.","pos":[0,147],"source":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptured%2A> dependency property changes its value."},{"content":"The virtual method is raised first and can manipulate the event data as necessary.","pos":[148,230]},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsStylusCapturedChanged&gt;</ph> event is raised with that same event data instance.","pos":[231,352],"source":" Then the <xref:System.Windows.ContentElement.IsStylusCapturedChanged> event is raised with that same event data instance."},{"content":"Notice that the event is not a routed event.","pos":[353,397]},{"content":"Therefore, you cannot mark it as handled in the class handler.","pos":[398,460]}]}]},{"pos":[467,758],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]}],"pos":[313816,314579],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,102],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[314815,314918],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsStylusCaptureWithinChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,198],"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsStylusCaptureWithinChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsStylusCaptureWithinChanged\"&gt;&lt;/xref&gt;</ph> event is raised on this element.","pos":[0,138],"source":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsStylusCaptureWithinChanged\"></xref> event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[139,198]}]}],"pos":[316278,316477],"yaml":true},{"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"pos":[0,470],"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","nodes":[{"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.","pos":[0,470],"nodes":[{"content":"This virtual method is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A&gt;</ph> dependency property changes its value.","pos":[0,152],"source":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> dependency property changes its value."},{"content":"The virtual method is raised first and can manipulate the event data as necessary.","pos":[153,235]},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged&gt;</ph> event is raised with that same event data instance.","pos":[236,362],"source":" Then the <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance."},{"content":"Notice that the event is not a routed event.","pos":[363,407]},{"content":"Therefore, you cannot mark it as handled in the class handler.","pos":[408,470]}]}]},{"pos":[477,768],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]}],"pos":[316488,317261],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[317502,317607],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsStylusDirectlyOverChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,197],"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsStylusDirectlyOverChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.IsStylusDirectlyOverChanged\"&gt;&lt;/xref&gt;</ph> event is raised on this element.","pos":[0,137],"source":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsStylusDirectlyOverChanged\"></xref> event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[138,197]}]}],"pos":[318944,319142],"yaml":true},{"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore you cannot mark it as handled in the class handler.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"pos":[0,467],"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore you cannot mark it as handled in the class handler.","nodes":[{"content":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore you cannot mark it as handled in the class handler.","pos":[0,467],"nodes":[{"content":"This virtual method is raised when the value of the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A&gt;</ph> dependency property changes its value.","pos":[0,151],"source":"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> dependency property changes its value."},{"content":"The virtual method is raised first and can manipulate the event data as necessary.","pos":[152,234]},{"content":"Then the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged&gt;</ph> event is raised with that same event data instance.","pos":[235,360],"source":" Then the <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance."},{"content":"Notice that the event is not a routed event.","pos":[361,405]},{"content":"Therefore you cannot mark it as handled in the class handler.","pos":[406,467]}]}]},{"pos":[474,765],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]}],"pos":[319153,319923],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data."}],"pos":[320163,320268],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,224],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.KeyDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,164],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[165,224]}]}],"pos":[321392,321617],"yaml":true},{"content":"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.ContentElement.OnKeyDown%2A> is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,346],"content":"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.ContentElement.OnKeyDown%2A> is not invoked.","nodes":[{"content":"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.ContentElement.OnKeyDown%2A> is not invoked.","pos":[0,346],"nodes":[{"content":"Keystrokes are handled by a dedicated input manager.","pos":[0,52]},{"content":"Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.","pos":[53,217]},{"content":"If these input system features mark the event as handled, then <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnKeyDown%2A&gt;</ph> is not invoked.","pos":[218,346],"source":" If these input system features mark the event as handled, then <xref:System.Windows.ContentElement.OnKeyDown%2A> is not invoked."}]}]},{"pos":[353,548],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[555,1221],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[1228,1622],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[321628,323259],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data."}],"pos":[323447,323536],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,222],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.KeyUp\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,162],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyUp\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[163,222]}]}],"pos":[324606,324829],"yaml":true},{"content":"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.ContentElement.OnKeyUp%2A> is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,344],"content":"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.ContentElement.OnKeyUp%2A> is not invoked.","nodes":[{"content":"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.ContentElement.OnKeyUp%2A> is not invoked.","pos":[0,344],"nodes":[{"content":"Keystrokes are handled by a dedicated input manager.","pos":[0,52]},{"content":"Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke.","pos":[53,217]},{"content":"If these input system features mark the event as handled, then <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnKeyUp%2A&gt;</ph> is not invoked.","pos":[218,344],"source":" If these input system features mark the event as handled, then <xref:System.Windows.ContentElement.OnKeyUp%2A> is not invoked."}]}]},{"pos":[351,546],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[553,1219],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[1226,1620],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[324840,326469],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data."}],"pos":[326655,326744],"yaml":true},{"content":"Raises the <xref href=\"System.Windows.ContentElement.LostFocus\"></xref> routed event by using the event data that is provided.","nodes":[{"pos":[0,126],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.LostFocus\"&gt;&lt;/xref&gt;</ph> routed event by using the event data that is provided.","source":"Raises the <xref href=\"System.Windows.ContentElement.LostFocus\"></xref> routed event by using the event data that is provided."}],"pos":[327858,327985],"yaml":true},{"content":"This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes. This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event.","nodes":[{"pos":[0,88],"content":"This method, although virtual, does have a default implementation that raises the event.","nodes":[{"content":"This method, although virtual, does have a default implementation that raises the event.","pos":[0,88]}]},{"pos":[95,526],"content":"This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes. This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event.","nodes":[{"content":"This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsFocused%2A&gt;</ph> property value changes.","pos":[0,222],"source":"This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes."},{"content":"This implementation differs from some other <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> On* implementations, which only provide a convenient way to add class handling for that event.","pos":[223,431],"source":" This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event."}]}],"pos":[327996,328527],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data. This event data must contain the identifier for the <xref href=\"System.Windows.ContentElement.LostFocus\"></xref> event.","nodes":[{"pos":[0,199],"content":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data. This event data must contain the identifier for the <xref href=\"System.Windows.ContentElement.LostFocus\"></xref> event.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.RoutedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains event data.","pos":[0,79],"source":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data."},{"content":"This event data must contain the identifier for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.LostFocus\"&gt;&lt;/xref&gt;</ph> event.","pos":[80,199],"source":" This event data must contain the identifier for the <xref href=\"System.Windows.ContentElement.LostFocus\"></xref> event."}]}],"pos":[328711,328911],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.LostKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,234],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.LostKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.LostKeyboardFocus\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,174],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.LostKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[175,234]}]}],"pos":[330179,330414],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[330425,331701],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains event data.","nodes":[{"pos":[0,101],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains event data.","source":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains event data."}],"pos":[331933,332035],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.LostMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,230],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.LostMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.LostMouseCapture\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,170],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.LostMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[171,230]}]}],"pos":[333193,333424],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[333435,334711],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains event data.","nodes":[{"pos":[0,86],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseEventArgs\"&gt;&lt;/xref&gt;</ph> that contains event data.","source":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains event data."}],"pos":[334912,334999],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.LostStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,232],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.LostStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.LostStylusCapture\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,172],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.LostStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[173,232]}]}],"pos":[336190,336423],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[336434,337710],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains event data.","nodes":[{"pos":[0,87],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains event data."}],"pos":[337914,338002],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.ContentElement.LostTouchCapture\"></xref> routed event that occurs when this element loses a touch capture.","nodes":[{"pos":[0,165],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.LostTouchCapture\"&gt;&lt;/xref&gt;</ph> routed event that occurs when this element loses a touch capture.","source":"Provides class handling for the <xref href=\"System.Windows.ContentElement.LostTouchCapture\"></xref> routed event that occurs when this element loses a touch capture."}],"pos":[339182,339348],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.ContentElement.LostTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> method so that base classes receive the event.","nodes":[{"pos":[0,401],"content":"The <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.ContentElement.LostTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.ContentElement.LostTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> method so that base classes receive the event.","pos":[0,401],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> method has no default implementation.","pos":[0,100],"source":"The <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.LostTouchCapture&gt;</ph> event.","pos":[101,262],"source":" Override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.ContentElement.LostTouchCapture> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnLostTouchCapture%2A&gt;</ph> method so that base classes receive the event.","pos":[263,401],"source":" Be sure to call the base class’s <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> method so that base classes receive the event."}]}]}],"pos":[339359,339761],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[339962,340051],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,223],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.MouseDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,163],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[164,223]}]}],"pos":[341224,341448],"yaml":true},{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnMouseDown%2A> is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.ContentElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,452],"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnMouseDown%2A> is not invoked.","nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnMouseDown%2A> is not invoked.","pos":[0,452],"nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager.","pos":[0,67]},{"content":"Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.","pos":[68,257]},{"content":"If these input system features mark the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> event as handled, <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph> is not invoked.","pos":[258,452],"source":" If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnMouseDown%2A> is not invoked."}]}]},{"pos":[459,832],"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.","nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.","pos":[0,373],"nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.","pos":[0,224],"source":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown>."},{"content":"Either of these events may be raised on the receiving element when <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> is received.","pos":[225,373],"source":" Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received."}]}]},{"pos":[839,1816],"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.ContentElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; therefore, use caution when you use this virtual method to mark events as handled.","nodes":[{"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.","pos":[0,136]},{"content":"If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph> in order to attach handlers.","pos":[137,432],"source":" If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers."},{"content":"Class handlers also are not invoked unless those class handlers were registered with the <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph>.","pos":[433,700],"source":" Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`."},{"content":"By handling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnMouseDown%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button down actions.","pos":[701,861],"source":" By handling <xref:System.Windows.ContentElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions."},{"content":"This behavior might be unwanted; therefore, use caution when you use this virtual method to mark events as handled.","pos":[862,977]}]},{"pos":[1823,1987],"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","nodes":[{"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","pos":[0,164]}]},{"pos":[1994,2189],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[2196,2862],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[2869,3263],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[341459,344737],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.","nodes":[{"pos":[0,191],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"This event data reports details about the mouse button that was pressed and the handled state.","pos":[97,191]}]}],"pos":[344943,345135],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseEnter\"></xref> attached event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,186],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseEnter\"></xref> attached event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.MouseEnter\"&gt;&lt;/xref&gt;</ph> attached event is raised on this element.","pos":[0,126],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseEnter\"></xref> attached event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[127,186]}]}],"pos":[346271,346458],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"pos":[0,291],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]},{"pos":[298,812],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event, with a direct routing strategy.","pos":[275,357]},{"content":"Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[358,514],"source":" Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked."}]}],"pos":[346469,347286],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data."}],"pos":[347481,347572],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseLeave\"></xref> attached event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,186],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseLeave\"></xref> attached event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.MouseLeave\"&gt;&lt;/xref&gt;</ph> attached event is raised on this element.","pos":[0,126],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseLeave\"></xref> attached event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[127,186]}]}],"pos":[348709,348896],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"pos":[0,291],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]},{"pos":[298,812],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event, with a direct routing strategy.","pos":[275,357]},{"content":"Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[358,514],"source":" Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked."}]}],"pos":[348907,349724],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data."}],"pos":[349919,350010],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseLeftButtonDown\"></xref> routed event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,196],"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseLeftButtonDown\"></xref> routed event is raised on this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.MouseLeftButtonDown\"&gt;&lt;/xref&gt;</ph> routed event is raised on this element.","pos":[0,136],"source":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseLeftButtonDown\"></xref> routed event is raised on this element."},{"content":"Implement this method to add class handling for this event.","pos":[137,196]}]}],"pos":[351237,351434],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseLeftButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>.  \n  \n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.","nodes":[{"pos":[0,817],"content":"The <xref:System.Windows.ContentElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseLeftButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.","pos":[0,142],"source":"The <xref:System.Windows.ContentElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> is the underlying event that is bubble routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph>.","pos":[143,441],"source":" <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseLeftButtonDown>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[442,650],"source":" Although you can mark the <xref:System.Windows.ContentElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[651,817],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[824,1444],"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>.","pos":[0,620],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,227],"source":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[228,296]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph>.","pos":[297,457],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph>.","pos":[458,620],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>."}]}]},{"pos":[1451,2128],"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.","nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.","pos":[0,677],"nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state.","pos":[0,105]},{"content":"Whether you choose to call the base implementation depends on your scenario.","pos":[106,182]},{"content":"Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph>.","pos":[183,366],"source":" Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>."},{"content":"For example, you can derive from <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> and override <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A&gt;</ph> in your derived class without calling the base implementation; however, this override disables the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.","pos":[367,677],"source":" For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event."}]}]}],"pos":[351445,353580],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was pressed.","nodes":[{"pos":[0,159],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was pressed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the left mouse button was pressed.","pos":[97,159]}]}],"pos":[353796,353956],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,232],"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.MouseLeftButtonUp\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,172],"source":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[173,232]}]}],"pos":[355180,355413],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseLeftButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>.","nodes":[{"pos":[0,809],"content":"The <xref:System.Windows.ContentElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseLeftButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.","pos":[0,140],"source":"The <xref:System.Windows.ContentElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> is the underlying event that is bubble routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph>.","pos":[141,435],"source":" <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseLeftButtonUp>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[436,642],"source":" Although you can mark the <xref:System.Windows.ContentElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[643,809],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[816,1430],"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>.","pos":[0,614],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,225],"source":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[226,294]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph>.","pos":[295,453],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A&gt;</ph>.","pos":[454,614],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>."}]}]}],"pos":[355424,356859],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was released.","nodes":[{"pos":[0,160],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was released.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the left mouse button was released.","pos":[97,160]}]}],"pos":[357073,357234],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,223],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.MouseMove\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,163],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseMove\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[164,223]}]}],"pos":[358372,358596],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[358607,359883],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data."}],"pos":[360077,360168],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,235],"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.MouseRightButtonDown\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,175],"source":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[176,235]}]}],"pos":[361400,361636],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>.  \n  \n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.","nodes":[{"pos":[0,820],"content":"The <xref:System.Windows.ContentElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.","pos":[0,143],"source":"The <xref:System.Windows.ContentElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> is the underlying event that is bubble routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.","pos":[144,443],"source":" <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonDown>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[444,653],"source":" Although you can mark the <xref:System.Windows.ContentElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[654,820],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[827,1448],"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>.","pos":[0,621],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,227],"source":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[228,296]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;</ph>.","pos":[297,457],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph>.","pos":[458,621],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>."}]}]},{"pos":[1455,2168],"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.","nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.","pos":[0,713],"nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state.","pos":[0,105]},{"content":"Whether you choose to call the base implementation depends on your scenario.","pos":[106,182]},{"content":"Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph>.","pos":[183,367],"source":" Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>."},{"content":"For example, you can derive from <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control&gt;</ph> and override <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A&gt;</ph> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Control&gt;</ph> default behavior.","pos":[368,713],"source":" For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior."}]}]}],"pos":[361647,363822],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was pressed.","nodes":[{"pos":[0,160],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was pressed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the right mouse button was pressed.","pos":[97,160]}]}],"pos":[364039,364200],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,233],"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.MouseRightButtonUp\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,173],"source":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[174,233]}]}],"pos":[365431,365665],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>.","nodes":[{"pos":[0,812],"content":"The <xref:System.Windows.ContentElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> event appears to travel a bubbling route but actually travels in an indirect way.","pos":[0,141],"source":"The <xref:System.Windows.ContentElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> is the underlying event that is bubble routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>.","pos":[142,437],"source":" <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonUp>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[438,645],"source":" Although you can mark the <xref:System.Windows.ContentElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[646,812],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[819,1434],"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>.","pos":[0,615],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,225],"source":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[226,294]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph>.","pos":[295,453],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A&gt;</ph>.","pos":[454,615],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>."}]}]}],"pos":[365676,367115],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was released.","nodes":[{"pos":[0,161],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was released.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the right mouse button was released.","pos":[97,161]}]}],"pos":[367330,367492],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,219],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.MouseUp\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,159],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseUp\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[160,219]}]}],"pos":[368655,368875],"yaml":true},{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnMouseUp%2A> is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.ContentElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,448],"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnMouseUp%2A> is not invoked.","nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnMouseUp%2A> is not invoked.","pos":[0,448],"nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager.","pos":[0,67]},{"content":"Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.","pos":[68,257]},{"content":"If these input system features mark the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> event as handled, <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph> is not invoked.","pos":[258,448],"source":" If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnMouseUp%2A> is not invoked."}]}]},{"pos":[455,824],"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.","nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.","pos":[0,369],"nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseLeftButtonUp&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.MouseRightButtonUp&gt;</ph>.","pos":[0,220],"source":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp>."},{"content":"Either of these events might be raised on the receiving element when <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;</ph> is received.","pos":[221,369],"source":" Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received."}]}]},{"pos":[831,1804],"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.ContentElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.","nodes":[{"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.","pos":[0,136]},{"content":"If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph> in order to attach handlers.","pos":[137,432],"source":" If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers."},{"content":"Class handlers also are not invoked unless those class handlers were registered with the <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph>.","pos":[433,700],"source":" Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`."},{"content":"By handling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnMouseUp%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button up actions.","pos":[701,857],"source":" By handling <xref:System.Windows.ContentElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions."},{"content":"This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.","pos":[858,973]}]},{"pos":[1811,1975],"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","nodes":[{"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","pos":[0,164]}]},{"pos":[1982,2177],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[2184,2850],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[2857,3251],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[368886,372152],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the mouse button was released.","nodes":[{"pos":[0,155],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the mouse button was released.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the mouse button was released.","pos":[97,155]}]}],"pos":[372356,372512],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseWheel\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,224],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseWheel\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.MouseWheel\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,164],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseWheel\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[165,224]}]}],"pos":[373676,373901],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[373912,375188],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseWheelEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseWheelEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.MouseWheelEventArgs\"></xref> that contains the event data."}],"pos":[375393,375489],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,227],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.PreviewDragEnter\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,167],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragEnter\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[168,227]}]}],"pos":[376638,376866],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[376877,378296],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[378483,378567],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragLeave\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,227],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragLeave\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.PreviewDragLeave\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,167],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragLeave\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[168,227]}]}],"pos":[379722,379950],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[379961,381380],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[381567,381651],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragOver\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,226],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragOver\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.PreviewDragOver\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,166],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragOver\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[167,226]}]}],"pos":[382800,383027],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[383038,384457],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[384643,384727],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDrop\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,222],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDrop\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.PreviewDrop\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,162],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDrop\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[163,222]}]}],"pos":[385851,386074],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[386085,387504],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,83],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data."}],"pos":[387686,387770],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewGiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,230],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewGiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.PreviewGiveFeedback\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,170],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewGiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[171,230]}]}],"pos":[388964,389195],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[389206,390625],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.GiveFeedbackEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.GiveFeedbackEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.GiveFeedbackEventArgs\"></xref> that contains the event data."}],"pos":[390831,390923],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewGotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,240],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewGotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.PreviewGotKeyboardFocus\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,180],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewGotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[181,240]}]}],"pos":[392215,392456],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[392467,393886],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,105],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data."}],"pos":[394124,394230],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,231],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,171],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[172,231]}]}],"pos":[395392,395624],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[395635,397054],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data."}],"pos":[397249,397338],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,229],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.PreviewKeyUp\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,169],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyUp\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[170,229]}]}],"pos":[398457,398687],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[398698,400117],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data."}],"pos":[400310,400399],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,231],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,171],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[172,231]}]}],"pos":[401712,401944],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[401955,403374],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,105],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data."}],"pos":[403613,403719],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseDown\"></xref> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,237],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseDown\"></xref> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.PreviewMouseDown\"&gt;&lt;/xref&gt;</ph> attached routed event reaches an element in its route that is derived from this class.","pos":[0,177],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseDown\"></xref> attached routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[178,237]}]}],"pos":[404942,405180],"yaml":true},{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,466],"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> is not invoked.","nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> is not invoked.","pos":[0,466],"nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager.","pos":[0,67]},{"content":"Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.","pos":[68,257]},{"content":"If these input system features mark the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event as handled, <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph> is not invoked.","pos":[258,466],"source":" If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> is not invoked."}]}]},{"pos":[473,867],"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.","nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.","pos":[0,394],"nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>.","pos":[0,238],"source":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>."},{"content":"Either of these events may be raised on the receiving element when <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> is received.","pos":[239,394],"source":" Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received."}]}]},{"pos":[874,1858],"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.","nodes":[{"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.","pos":[0,136]},{"content":"If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph> in order to attach handlers.","pos":[137,432],"source":" If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers."},{"content":"Class handlers also are not invoked unless those class handlers were registered with the <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph>.","pos":[433,700],"source":" Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`."},{"content":"By handling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button down actions.","pos":[701,868],"source":" By handling <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions."},{"content":"This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.","pos":[869,984]}]},{"pos":[1865,2029],"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","nodes":[{"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","pos":[0,164]}]},{"pos":[2036,2231],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[2238,2904],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[2911,3448],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[405191,408654],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that one or more mouse buttons were pressed.","nodes":[{"pos":[0,164],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that one or more mouse buttons were pressed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that one or more mouse buttons were pressed.","pos":[97,164]}]}],"pos":[408867,409032],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,241],"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonDown\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,181],"source":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonDown\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[182,241]}]}],"pos":[410307,410549],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>.  \n  \n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.","nodes":[{"pos":[0,846],"content":"The <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.","pos":[0,150],"source":"The <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> is the underlying event that is tunnel routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph>.","pos":[151,463],"source":" <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[464,679],"source":" Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[680,846],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[853,1494],"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>.","pos":[0,641],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,234],"source":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[235,303]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph>.","pos":[304,471],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.","pos":[472,641],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>."}]}]},{"pos":[1501,2192],"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.","nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.","pos":[0,691],"nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state.","pos":[0,105]},{"content":"Whether you choose to call the base implementation depends on your scenario.","pos":[106,182]},{"content":"Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph>.","pos":[183,373],"source":" Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>."},{"content":"For example, you can derive from <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button&gt;</ph> and override <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> in your derived class without calling the base implementation; however, this override disables the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event.","pos":[374,691],"source":" For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event."}]}]}],"pos":[410560,412759],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was pressed.","nodes":[{"pos":[0,159],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was pressed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the left mouse button was pressed.","pos":[97,159]}]}],"pos":[412982,413142],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,239],"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonUp\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,179],"source":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[180,239]}]}],"pos":[414393,414633],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>.","nodes":[{"pos":[0,838],"content":"The <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.","pos":[0,148],"source":"The <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> is the underlying event that is tunnel routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph>.","pos":[149,457],"source":" <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[458,671],"source":" Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[672,838],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[845,1480],"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>.","pos":[0,635],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,232],"source":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[233,301]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph>.","pos":[302,467],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph>.","pos":[468,635],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>."}]}]}],"pos":[414644,416129],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was released.","nodes":[{"pos":[0,160],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was released.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the left mouse button was released.","pos":[97,160]}]}],"pos":[416350,416511],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,230],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.PreviewMouseMove\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,170],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseMove\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[171,230]}]}],"pos":[417698,417929],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[417940,419359],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,90],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data."}],"pos":[419560,419651],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,242],"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonDown\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,182],"source":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[183,242]}]}],"pos":[420932,421175],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>.  \n  \n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.","nodes":[{"pos":[0,842],"content":"The <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.","pos":[0,151],"source":"The <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> is the underlying event that is tunnel routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.MouseRightButtonDown&gt;</ph>.","pos":[152,458],"source":" <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonDown>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[459,675],"source":" Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[676,842],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[849,1491],"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>.","pos":[0,642],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,234],"source":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[235,303]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph>.","pos":[304,471],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.","pos":[472,642],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>."}]}]},{"pos":[1498,2225],"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.","nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.","pos":[0,727],"nodes":[{"content":"Alternatively, you can override this method in order to change event handling for a specific mouse state.","pos":[0,105]},{"content":"Whether you choose to call the base implementation depends on your scenario.","pos":[106,182]},{"content":"Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph>.","pos":[183,374],"source":" Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>."},{"content":"For example, you can derive from <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control&gt;</ph> and override <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Control&gt;</ph> default behavior.","pos":[375,727],"source":" For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior."}]}]}],"pos":[421186,423418],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was pressed.","nodes":[{"pos":[0,160],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was pressed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the right mouse button was pressed.","pos":[97,160]}]}],"pos":[423642,423803],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,240],"content":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonUp\"&gt;&lt;/xref&gt;</ph> routed event reaches an element in its route that is derived from this class.","pos":[0,180],"source":"Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[181,240]}]}],"pos":[425083,425324],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \n  \n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>.","nodes":[{"pos":[0,841],"content":"The <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> event appears to travel a tunneling route but actually travels in an indirect way.","pos":[0,149],"source":"The <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> is the underlying event that is tunnel routed, and each <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> along the event route uses identical handling to raise the direct routed event <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>.","pos":[150,459],"source":" <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>."},{"content":"Although you can mark the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route.","pos":[460,674],"source":" Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route."},{"content":"However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[675,841],"source":" However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked."}]},{"pos":[848,1484],"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>.","nodes":[{"content":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>.","pos":[0,636],"nodes":[{"content":"The default implementation for general mouse event handling in <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> listens for <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> and converts it to an appropriate local event.","pos":[0,232],"source":"The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event."},{"content":"If you want to override this logic, you must create a derived class.","pos":[233,301]},{"content":"In the static constructor of your derived class, register an alternative class handler for <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph>.","pos":[302,467],"source":" In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>."},{"content":"You cannot change the mouse handling behavior of <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph> by overriding <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A&gt;</ph>.","pos":[468,636],"source":" You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>."}]}]}],"pos":[425335,426824],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was released.","nodes":[{"pos":[0,161],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was released.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that the right mouse button was released.","pos":[97,161]}]}],"pos":[427046,427208],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,228],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.PreviewMouseUp\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,168],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseUp\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[169,228]}]}],"pos":[428420,428649],"yaml":true},{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,462],"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> is not invoked.","nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> is not invoked.","pos":[0,462],"nodes":[{"content":"Mouse button actions are also handled by a dedicated input manager.","pos":[0,67]},{"content":"Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action.","pos":[68,257]},{"content":"If these input system features mark the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event as handled, <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph> is not invoked.","pos":[258,462],"source":" If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> is not invoked."}]}]},{"pos":[469,859],"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.","nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.","pos":[0,390],"nodes":[{"content":"If you use this class handler to mark the event as handled, you potentially impact the following events: <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>.","pos":[0,234],"source":"If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>."},{"content":"Either of these events might be raised on the receiving element when <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> is received.","pos":[235,390],"source":" Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received."}]}]},{"pos":[866,1846],"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.","nodes":[{"content":"If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data.","pos":[0,136]},{"content":"If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph> in order to attach handlers.","pos":[137,432],"source":" If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers."},{"content":"Class handlers also are not invoked unless those class handlers were registered with the <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature with <ph id=\"ph2\">`handledEventsToo`</ph> <ph id=\"ph3\">`true`</ph>.","pos":[433,700],"source":" Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`."},{"content":"By handling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph>, you are implying that your class handling accounted for all possible mouse button up actions.","pos":[701,864],"source":" By handling <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions."},{"content":"This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.","pos":[865,980]}]},{"pos":[1853,2017],"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","nodes":[{"content":"Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.","pos":[0,164]}]},{"pos":[2024,2219],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[2226,2892],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[2899,3293],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[428660,431968],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that one or more mouse buttons were released.","nodes":[{"pos":[0,165],"content":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that one or more mouse buttons were released.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","pos":[0,96],"source":"The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data."},{"content":"The event data reports that one or more mouse buttons were released.","pos":[97,165]}]}],"pos":[432179,432345],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseWheel\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,231],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseWheel\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.PreviewMouseWheel\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,171],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseWheel\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[172,231]}]}],"pos":[433536,433768],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[433779,435198],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.MouseWheelEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.MouseWheelEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.MouseWheelEventArgs\"></xref> that contains the event data."}],"pos":[435410,435506],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewQueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,235],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewQueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.PreviewQueryContinueDrag\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,175],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewQueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[176,235]}]}],"pos":[436766,437002],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[437013,438432],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.QueryContinueDragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.QueryContinueDragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.QueryContinueDragEventArgs\"></xref> that contains the event data."}],"pos":[438653,438750],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,238],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,178],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[179,238]}]}],"pos":[440021,440260],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[440271,441690],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data."}],"pos":[441912,442010],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,236],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonUp\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,176],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[177,236]}]}],"pos":[443268,443505],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[443516,444935],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data."}],"pos":[445155,445253],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,232],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,172],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[173,232]}]}],"pos":[446473,446706],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[446717,448136],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusDownEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusDownEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusDownEventArgs\"></xref> that contains the event data."}],"pos":[448348,448444],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,237],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusInAirMove\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,177],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[178,237]}]}],"pos":[449666,449904],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[449915,451334],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[451543,451635],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,235],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusInRange\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,175],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInRange\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[176,235]}]}],"pos":[452850,453086],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[453097,454516],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[454723,454815],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,232],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusMove\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,172],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusMove\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[173,232]}]}],"pos":[456010,456243],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[456254,457673],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[457877,457969],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,238],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusOutOfRange\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,178],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[179,238]}]}],"pos":[459197,459436],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[459447,460866],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[461076,461168],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,241],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusSystemGesture\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,181],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[182,241]}]}],"pos":[462476,462718],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[462729,464148],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"></xref> that contains the event data."}],"pos":[464387,464492],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,230],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.PreviewStylusUp\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,170],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusUp\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[171,230]}]}],"pos":[465681,465912],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[465923,467342],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[467544,467636],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.PreviewTextInput\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,247],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.PreviewTextInput\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TextCompositionManager.PreviewTextInput\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,187],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.PreviewTextInput\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[188,247]}]}],"pos":[468874,469122],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1412],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[0,537],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]},{"content":"Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.","pos":[395,537]}]}]}],"pos":[469133,470552],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.TextCompositionEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TextCompositionEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.TextCompositionEventArgs\"></xref> that contains the event data."}],"pos":[470773,470874],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.ContentElement.PreviewTouchDown\"></xref> routed event that occurs when a touch presses this element.","nodes":[{"pos":[0,159],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewTouchDown\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch presses this element.","source":"Provides class handling for the <xref href=\"System.Windows.ContentElement.PreviewTouchDown\"></xref> routed event that occurs when a touch presses this element."}],"pos":[472053,472213],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchDown> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> method so that base classes receive the event.","nodes":[{"pos":[0,401],"content":"The <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchDown> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchDown> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> method so that base classes receive the event.","pos":[0,401],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> method has no default implementation.","pos":[0,100],"source":"The <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> event.","pos":[101,262],"source":" Override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchDown> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> method so that base classes receive the event.","pos":[263,401],"source":" Be sure to call the base class’s <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> method so that base classes receive the event."}]}]}],"pos":[472224,472626],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[472827,472916],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.ContentElement.PreviewTouchMove\"></xref> routed event that occurs when a touch moves while inside this element.","nodes":[{"pos":[0,170],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewTouchMove\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch moves while inside this element.","source":"Provides class handling for the <xref href=\"System.Windows.ContentElement.PreviewTouchMove\"></xref> routed event that occurs when a touch moves while inside this element."}],"pos":[474095,474266],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchMove> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> method so that base classes receive the event.","nodes":[{"pos":[0,401],"content":"The <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchMove> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchMove> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> method so that base classes receive the event.","pos":[0,401],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> method has no default implementation.","pos":[0,100],"source":"The <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt;</ph> event.","pos":[101,262],"source":" Override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchMove> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> method so that base classes receive the event.","pos":[263,401],"source":" Be sure to call the base class’s <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> method so that base classes receive the event."}]}]}],"pos":[474277,474679],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[474880,474969],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.ContentElement.PreviewTouchUp\"></xref> routed event that occurs when a touch is released inside this element.","nodes":[{"pos":[0,168],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewTouchUp\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch is released inside this element.","source":"Provides class handling for the <xref href=\"System.Windows.ContentElement.PreviewTouchUp\"></xref> routed event that occurs when a touch is released inside this element."}],"pos":[476136,476305],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchUp> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> method so that base classes receive the event.","nodes":[{"pos":[0,393],"content":"The <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchUp> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchUp> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> method so that base classes receive the event.","pos":[0,393],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> method has no default implementation.","pos":[0,98],"source":"The <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt;</ph> event.","pos":[99,256],"source":" Override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchUp> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> method so that base classes receive the event.","pos":[257,393],"source":" Be sure to call the base class’s <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> method so that base classes receive the event."}]}]}],"pos":[476316,476710],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[476909,476998],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.QueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,228],"content":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.QueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.DragDrop.QueryContinueDrag\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,168],"source":"Invoked when an unhandled <xref href=\"System.Windows.DragDrop.QueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[169,228]}]}],"pos":[478213,478442],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[478453,479729],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.QueryContinueDragEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.QueryContinueDragEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.QueryContinueDragEventArgs\"></xref> that contains the event data."}],"pos":[479943,480040],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.QueryCursor\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,225],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.QueryCursor\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Mouse.QueryCursor\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,165],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.QueryCursor\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[166,225]}]}],"pos":[481226,481452],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[481463,482739],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.QueryCursorEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,96],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.QueryCursorEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.QueryCursorEventArgs\"></xref> that contains the event data."}],"pos":[482947,483044],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,231],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusButtonDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,171],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[172,231]}]}],"pos":[484260,484492],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[484503,485779],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data."}],"pos":[485994,486092],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,229],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusButtonUp\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,169],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[170,229]}]}],"pos":[487301,487531],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[487542,488818],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,97],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusButtonEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data."}],"pos":[489031,489129],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,225],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusDown\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,165],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusDown\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[166,225]}]}],"pos":[490300,490526],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[490537,491813],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusDownEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,95],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusDownEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusDownEventArgs\"></xref> that contains the event data."}],"pos":[492018,492114],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusEnter\"></xref> attached event is raised by this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,188],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusEnter\"></xref> attached event is raised by this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusEnter\"&gt;&lt;/xref&gt;</ph> attached event is raised by this element.","pos":[0,128],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusEnter\"></xref> attached event is raised by this element."},{"content":"Implement this method to add class handling for this event.","pos":[129,188]}]}],"pos":[493263,493452],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \n  \n The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"pos":[0,291],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]},{"pos":[298,772],"content":"The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The purpose of this method is similar to <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,270],"source":"The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[271,321]},{"content":"Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[322,474],"source":" Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked."}]}],"pos":[493463,494240],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[494438,494530],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,230],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusInAirMove\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,170],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[171,230]}]}],"pos":[495704,495935],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[495946,497222],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[497424,497516],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,228],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusInRange\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,168],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInRange\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[169,228]}]}],"pos":[498660,498889],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[498900,500176],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[500376,500468],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusLeave\"></xref> attached event is raised by this element. Implement this method to add class handling for this event.","nodes":[{"pos":[0,188],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusLeave\"></xref> attached event is raised by this element. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusLeave\"&gt;&lt;/xref&gt;</ph> attached event is raised by this element.","pos":[0,128],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusLeave\"></xref> attached event is raised by this element."},{"content":"Implement this method to add class handling for this event.","pos":[129,188]}]}],"pos":[501620,501809],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \n  \n The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"pos":[0,291],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.","pos":[0,291],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]},{"content":"You may call base either before or after your special handling, depending on your requirements.","pos":[196,291]}]}]},{"pos":[298,772],"content":"The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.","nodes":[{"content":"The purpose of this method is similar to <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,270],"source":"The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[271,321]},{"content":"Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify <ph id=\"ph1\">`handledEventsToo`</ph>) from being invoked.","pos":[322,474],"source":" Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked."}]}],"pos":[501820,502597],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[502795,502887],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,225],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusMove\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,165],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusMove\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[166,225]}]}],"pos":[504031,504257],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[504268,505544],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[505741,505833],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,231],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusOutOfRange\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,171],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[172,231]}]}],"pos":[507012,507244],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[507255,508531],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[508734,508826],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,234],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusSystemGesture\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,174],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[175,234]}]}],"pos":[510107,510342],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[510353,511629],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"></xref> that contains the event data."}],"pos":[511861,511966],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,223],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Stylus.StylusUp\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,163],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusUp\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[164,223]}]}],"pos":[513106,513330],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[513341,514617],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,91],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.StylusEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data."}],"pos":[514812,514904],"yaml":true},{"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.TextInput\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"pos":[0,240],"content":"Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.TextInput\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.","nodes":[{"content":"Invoked when an unhandled <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TextCompositionManager.TextInput\"&gt;&lt;/xref&gt;</ph> attached event reaches an element in its route that is derived from this class.","pos":[0,180],"source":"Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.TextInput\"></xref> attached event reaches an element in its route that is derived from this class."},{"content":"Implement this method to add class handling for this event.","pos":[181,240]}]}],"pos":[516093,516334],"yaml":true},{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"pos":[0,195],"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","nodes":[{"content":"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[0,195],"nodes":[{"content":"This method has no default implementation.","pos":[0,42]},{"content":"Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.","pos":[43,195]}]}]},{"pos":[202,868],"content":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.","nodes":[{"content":"The purpose of this method is similar to the <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler.","pos":[0,274],"source":"The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler."},{"content":"In this case the matching event is a routed event.","pos":[275,325]},{"content":"The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers.","pos":[326,523]},{"content":"Therefore, your implementation needs to examine the source properties of the event data.","pos":[524,612]},{"content":"It should not try to reraise the event in most cases.","pos":[613,666]}]},{"pos":[875,1269],"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","nodes":[{"content":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[0,394],"nodes":[{"content":"Either by overriding this method or by registering class handlers with <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>, derived classes of <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement&gt;</ph> can call private class handler methods when the event is received along the event route.","pos":[0,275],"source":"Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route."},{"content":"One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.","pos":[276,394]}]}]}],"pos":[516345,517621],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Input.TextCompositionEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,100],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TextCompositionEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"The <xref href=\"System.Windows.Input.TextCompositionEventArgs\"></xref> that contains the event data."}],"pos":[517835,517936],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.ContentElement.TouchDown\"></xref> routed event that occurs when a touch presses inside this element.","nodes":[{"pos":[0,159],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.TouchDown\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch presses inside this element.","source":"Provides class handling for the <xref href=\"System.Windows.ContentElement.TouchDown\"></xref> routed event that occurs when a touch presses inside this element."}],"pos":[519066,519226],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.OnTouchDown%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchDown> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchDown%2A> method so that base classes receive the event.","nodes":[{"pos":[0,373],"content":"The <xref:System.Windows.ContentElement.OnTouchDown%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchDown> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchDown%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.ContentElement.OnTouchDown%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchDown> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchDown%2A> method so that base classes receive the event.","pos":[0,373],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> method has no default implementation.","pos":[0,93],"source":"The <xref:System.Windows.ContentElement.OnTouchDown%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> event.","pos":[94,241],"source":" Override <xref:System.Windows.ContentElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchDown> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> method so that base classes receive the event.","pos":[242,373],"source":" Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchDown%2A> method so that base classes receive the event."}]}]}],"pos":[519237,519611],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[519805,519894],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.ContentElement.TouchEnter\"></xref> routed event that occurs when a touch moves from outside to inside the bounds of this element.","nodes":[{"pos":[0,188],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.TouchEnter\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch moves from outside to inside the bounds of this element.","source":"Provides class handling for the <xref href=\"System.Windows.ContentElement.TouchEnter\"></xref> routed event that occurs when a touch moves from outside to inside the bounds of this element."}],"pos":[521030,521219],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.OnTouchEnter%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchEnter> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchEnter%2A> method so that base classes receive the event.","nodes":[{"pos":[0,377],"content":"The <xref:System.Windows.ContentElement.OnTouchEnter%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchEnter> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchEnter%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.ContentElement.OnTouchEnter%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchEnter> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchEnter%2A> method so that base classes receive the event.","pos":[0,377],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> method has no default implementation.","pos":[0,94],"source":"The <xref:System.Windows.ContentElement.OnTouchEnter%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.TouchEnter&gt;</ph> event.","pos":[95,244],"source":" Override <xref:System.Windows.ContentElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchEnter> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> method so that base classes receive the event.","pos":[245,377],"source":" Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchEnter%2A> method so that base classes receive the event."}]}]}],"pos":[521230,521608],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[521803,521892],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.ContentElement.TouchLeave\"></xref> routed event that occurs when a touch moves from inside to outside the bounds of this element.","nodes":[{"pos":[0,188],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.TouchLeave\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch moves from inside to outside the bounds of this element.","source":"Provides class handling for the <xref href=\"System.Windows.ContentElement.TouchLeave\"></xref> routed event that occurs when a touch moves from inside to outside the bounds of this element."}],"pos":[523029,523218],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.OnTouchLeave%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchLeave> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchLeave%2A> method so that base classes receive the event.","nodes":[{"pos":[0,377],"content":"The <xref:System.Windows.ContentElement.OnTouchLeave%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchLeave> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchLeave%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.ContentElement.OnTouchLeave%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchLeave> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchLeave%2A> method so that base classes receive the event.","pos":[0,377],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> method has no default implementation.","pos":[0,94],"source":"The <xref:System.Windows.ContentElement.OnTouchLeave%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.TouchLeave&gt;</ph> event.","pos":[95,244],"source":" Override <xref:System.Windows.ContentElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchLeave> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> method so that base classes receive the event.","pos":[245,377],"source":" Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchLeave%2A> method so that base classes receive the event."}]}]}],"pos":[523229,523607],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[523802,523891],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.ContentElement.TouchMove\"></xref> routed event that occurs when a touch moves while inside this element.","nodes":[{"pos":[0,163],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.TouchMove\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch moves while inside this element.","source":"Provides class handling for the <xref href=\"System.Windows.ContentElement.TouchMove\"></xref> routed event that occurs when a touch moves while inside this element."}],"pos":[525022,525186],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.OnTouchMove%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchMove> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchMove%2A> method so that base classes receive the event.","nodes":[{"pos":[0,373],"content":"The <xref:System.Windows.ContentElement.OnTouchMove%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchMove> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchMove%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.ContentElement.OnTouchMove%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchMove> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchMove%2A> method so that base classes receive the event.","pos":[0,373],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> method has no default implementation.","pos":[0,93],"source":"The <xref:System.Windows.ContentElement.OnTouchMove%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.TouchMove&gt;</ph> event.","pos":[94,241],"source":" Override <xref:System.Windows.ContentElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchMove> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> method so that base classes receive the event.","pos":[242,373],"source":" Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchMove%2A> method so that base classes receive the event."}]}]}],"pos":[525197,525571],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[525765,525854],"yaml":true},{"content":"Provides class handling for the <xref href=\"System.Windows.ContentElement.TouchUp\"></xref> routed event that occurs when a touch is released inside this element.","nodes":[{"pos":[0,161],"content":"Provides class handling for the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.TouchUp\"&gt;&lt;/xref&gt;</ph> routed event that occurs when a touch is released inside this element.","source":"Provides class handling for the <xref href=\"System.Windows.ContentElement.TouchUp\"></xref> routed event that occurs when a touch is released inside this element."}],"pos":[526950,527112],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.OnTouchUp%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchUp> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchUp%2A> method so that base classes receive the event.","nodes":[{"pos":[0,365],"content":"The <xref:System.Windows.ContentElement.OnTouchUp%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchUp> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchUp%2A> method so that base classes receive the event.","nodes":[{"content":"The <xref:System.Windows.ContentElement.OnTouchUp%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchUp> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchUp%2A> method so that base classes receive the event.","pos":[0,365],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> method has no default implementation.","pos":[0,91],"source":"The <xref:System.Windows.ContentElement.OnTouchUp%2A> method has no default implementation."},{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> in a derived class to handle the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.TouchUp&gt;</ph> event.","pos":[92,235],"source":" Override <xref:System.Windows.ContentElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchUp> event."},{"content":"Be sure to call the base class’s <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> method so that base classes receive the event.","pos":[236,365],"source":" Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchUp%2A> method so that base classes receive the event."}]}]}],"pos":[527123,527489],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,88],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data."}],"pos":[527681,527770],"yaml":true},{"content":"When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.","nodes":[{"pos":[0,170],"content":"When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.","nodes":[{"content":"When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.","pos":[0,170]}]}],"pos":[528964,529135],"yaml":true},{"content":"The default implementation of this method in this class is incomplete and always returns `null`.","nodes":[{"pos":[0,96],"content":"The default implementation of this method in this class is incomplete and always returns <ph id=\"ph1\">`null`</ph>.","source":"The default implementation of this method in this class is incomplete and always returns `null`."}],"pos":[529146,529243],"yaml":true,"extradata":"MT"},{"content":"The direction of the requested focus traversal.","nodes":[{"pos":[0,47],"content":"The direction of the requested focus traversal.","nodes":[{"content":"The direction of the requested focus traversal.","pos":[0,47]}]}],"pos":[529498,529546],"yaml":true},{"content":"The element that would have received focus if <xref href=\"System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)\"></xref> were actually invoked.","nodes":[{"pos":[0,168],"content":"The element that would have received focus if <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)\"&gt;&lt;/xref&gt;</ph> were actually invoked.","source":"The element that would have received focus if <xref href=\"System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)\"></xref> were actually invoked."}],"pos":[529621,529790],"yaml":true},{"content":"Occurs when the input system reports an underlying drag event with this element as the drag target.","nodes":[{"pos":[0,99],"content":"Occurs when the input system reports an underlying drag event with this element as the drag target.","nodes":[{"content":"Occurs when the input system reports an underlying drag event with this element as the drag target.","pos":[0,99]}]}],"pos":[530791,530891],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewDragEnter\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewDragEnterEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.DragEnter>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,570],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,570],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,309],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewDragEnter&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[310,570],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[630,654],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[675,691],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[692,750],"content":"<xref:System.Windows.ContentElement.PreviewDragEnterEvent>","nodes":[]},{"pos":[755,771],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[772,781],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[786,794],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[795,833],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[844,927],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.DragEnter>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.DragEnter&gt;</ph>.","pos":[0,83],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.DragEnter>."}]},{"pos":[937,1067],"content":"Override <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewDragEnter%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,130],"source":"Override <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes."}]}],"pos":[530902,531987],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewDragEnter\"></xref> routed event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewDragEnter\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewDragEnter\"></xref> routed event."}],"pos":[533126,533223],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[533234,533774],"yaml":true,"extradata":"MT"},{"content":"Occurs when the input system reports an underlying drag event with this element as the drag origin.","nodes":[{"pos":[0,99],"content":"Occurs when the input system reports an underlying drag event with this element as the drag origin.","nodes":[{"content":"Occurs when the input system reports an underlying drag event with this element as the drag origin.","pos":[0,99]}]}],"pos":[534888,534988],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewDragLeave\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewDragLeaveEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.DragLeave>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,570],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,570],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewDragLeave&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,309],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewDragLeave&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[310,570],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[630,654],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[675,691],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[692,750],"content":"<xref:System.Windows.ContentElement.PreviewDragLeaveEvent>","nodes":[]},{"pos":[755,771],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[772,781],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[786,794],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[795,833],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[844,927],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.DragLeave>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.DragLeave&gt;</ph>.","pos":[0,83],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.DragLeave>."}]},{"pos":[937,1067],"content":"Override <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewDragLeave%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,130],"source":"Override <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes."}]}],"pos":[534999,536084],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewDragLeave\"></xref> routed event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewDragLeave\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewDragLeave\"></xref> routed event."}],"pos":[537223,537320],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[537331,537871],"yaml":true,"extradata":"MT"},{"content":"Occurs when the input system reports an underlying drag event with this element as the potential drop target.","nodes":[{"pos":[0,109],"content":"Occurs when the input system reports an underlying drag event with this element as the potential drop target.","nodes":[{"content":"Occurs when the input system reports an underlying drag event with this element as the potential drop target.","pos":[0,109]}]}],"pos":[538979,539089],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewDragOver\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewDragOverEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.DragOver>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,566],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,566],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewDragOver&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,307],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewDragOver&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[308,566],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[625,649],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[670,686],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[687,744],"content":"<xref:System.Windows.ContentElement.PreviewDragOverEvent>","nodes":[]},{"pos":[749,765],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[766,775],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[780,788],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[789,827],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[838,920],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.DragOver>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.DragOver&gt;</ph>.","pos":[0,82],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.DragOver>."}]},{"pos":[930,1059],"content":"Override <xref:System.Windows.ContentElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewDragOver%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,129],"source":"Override <xref:System.Windows.ContentElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes."}]}],"pos":[539100,540177],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewDragOver\"></xref> routed event.","nodes":[{"pos":[0,95],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewDragOver\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewDragOver\"></xref> routed event."}],"pos":[541309,541405],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[541416,541956],"yaml":true,"extradata":"MT"},{"content":"Occurs when the input system reports an underlying drop event with this element as the drop target.","nodes":[{"pos":[0,99],"content":"Occurs when the input system reports an underlying drop event with this element as the drop target.","nodes":[{"content":"Occurs when the input system reports an underlying drop event with this element as the drop target.","pos":[0,99]}]}],"pos":[543017,543117],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDrop> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewDrop\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewDropEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.DragEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.Drop>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,550],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDrop> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDrop> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,550],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,299],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDrop> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewDrop&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[300,550],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[605,629],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[650,666],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[667,720],"content":"<xref:System.Windows.ContentElement.PreviewDropEvent>","nodes":[]},{"pos":[725,741],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[742,751],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[756,764],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[765,803],"content":"<xref:System.Windows.DragEventHandler>","nodes":[]},{"pos":[814,892],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.Drop>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.Drop&gt;</ph>.","pos":[0,78],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.Drop>."}]},{"pos":[902,1027],"content":"Override <xref:System.Windows.ContentElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewDrop%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.ContentElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes."}]}],"pos":[543128,544173],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewDrop\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewDrop\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewDrop\"></xref> routed event."}],"pos":[545277,545369],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[545380,545920],"yaml":true,"extradata":"MT"},{"content":"Occurs when a drag-and-drop operation is started.","nodes":[{"pos":[0,49],"content":"Occurs when a drag-and-drop operation is started.","nodes":[{"content":"Occurs when a drag-and-drop operation is started.","pos":[0,49]}]}],"pos":[547047,547097],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.  \n  \n This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewGiveFeedback\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.GiveFeedback>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,224],"content":"The <xref:System.Windows.ContentElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.","pos":[0,224],"source":"The <xref:System.Windows.ContentElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation."}]},{"pos":[231,813],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,582],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,315],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewGiveFeedback&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[316,582],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[876,900],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[921,937],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[938,999],"content":"<xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>","nodes":[]},{"pos":[1004,1020],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1021,1030],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1035,1043],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1044,1090],"content":"<xref:System.Windows.GiveFeedbackEventHandler>","nodes":[]},{"pos":[1101,1187],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.GiveFeedback>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.GiveFeedback&gt;</ph>.","pos":[0,86],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.GiveFeedback>."}]},{"pos":[1197,1330],"content":"Override <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,133],"source":"Override <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes."}]}],"pos":[547108,548458],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewGiveFeedback\"></xref> routed event.","nodes":[{"pos":[0,99],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewGiveFeedback\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewGiveFeedback\"></xref> routed event."}],"pos":[549612,549712],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[549723,550263],"yaml":true,"extradata":"MT"},{"content":"Occurs when the keyboard is focused on this element.","nodes":[{"pos":[0,52],"content":"Occurs when the keyboard is focused on this element.","nodes":[{"content":"Occurs when the keyboard is focused on this element.","pos":[0,52]}]}],"pos":[551422,551475],"yaml":true},{"content":"Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewGotKeyboardFocus\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.GotKeyboardFocus>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,287],"content":"Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.","nodes":[{"content":"Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.","pos":[0,287],"nodes":[{"content":"Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached.","pos":[0,163]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that has focus.","pos":[164,287],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus."}]}]},{"pos":[294,904],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,610],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,329],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewGotKeyboardFocus&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[330,610],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[971,995],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1016,1032],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1033,1098],"content":"<xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>","nodes":[]},{"pos":[1103,1119],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1120,1129],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1134,1142],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1143,1203],"content":"<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>","nodes":[]},{"pos":[1214,1304],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.GotKeyboardFocus>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.GotKeyboardFocus&gt;</ph>.","pos":[0,90],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.GotKeyboardFocus>."}]},{"pos":[1314,1451],"content":"Override <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,137],"source":"Override <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes."}]}],"pos":[551486,552957],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewGotKeyboardFocus\"></xref> routed event.","nodes":[{"pos":[0,103],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewGotKeyboardFocus\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewGotKeyboardFocus\"></xref> routed event."}],"pos":[554189,554293],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[554304,554844],"yaml":true,"extradata":"MT"},{"content":"Occurs when a key is pressed while the keyboard is focused on this element.","nodes":[{"pos":[0,75],"content":"Occurs when a key is pressed while the keyboard is focused on this element.","nodes":[{"content":"Occurs when a key is pressed while the keyboard is focused on this element.","pos":[0,75]}]}],"pos":[555931,556007],"yaml":true},{"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.ContentElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewKeyDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewKeyDownEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.KeyDown>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,389],"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.ContentElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.","nodes":[{"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.ContentElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.","pos":[0,389],"nodes":[{"content":"Key handling interacts with other platform features such as commanding and text composition.","pos":[0,92]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.","pos":[93,236],"source":" The <xref:System.Windows.ContentElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls."},{"content":"This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.","pos":[237,389]}]}]},{"pos":[396,970],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,574],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,311],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewKeyDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[312,574],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1028,1052],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1073,1089],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1090,1146],"content":"<xref:System.Windows.ContentElement.PreviewKeyDownEvent>","nodes":[]},{"pos":[1151,1167],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1168,1177],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1182,1190],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1191,1234],"content":"<xref:System.Windows.Input.KeyEventHandler>","nodes":[]},{"pos":[1245,1326],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.KeyDown>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.KeyDown&gt;</ph>.","pos":[0,81],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.KeyDown>."}]},{"pos":[1336,1464],"content":"Override <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewKeyDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,128],"source":"Override <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[556018,557502],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewKeyDown\"></xref> routed event.","nodes":[{"pos":[0,94],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewKeyDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewKeyDown\"></xref> routed event."}],"pos":[558637,558732],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[558743,559283],"yaml":true,"extradata":"MT"},{"content":"Occurs when a key is released while the keyboard is focused on this element.","nodes":[{"pos":[0,76],"content":"Occurs when a key is released while the keyboard is focused on this element.","nodes":[{"content":"Occurs when a key is released while the keyboard is focused on this element.","pos":[0,76]}]}],"pos":[560349,560426],"yaml":true},{"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.ContentElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events. For details, check the documentation for individual controls.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewKeyUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewKeyUpEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.KeyUp>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,449],"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.ContentElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events. For details, check the documentation for individual controls.","nodes":[{"content":"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.ContentElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events. For details, check the documentation for individual controls.","pos":[0,449],"nodes":[{"content":"Key handling interacts with other platform features such as commanding and text composition.","pos":[0,92]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph> event is a lower-level text input event that might not behave as expected on certain controls.","pos":[93,234],"source":" The <xref:System.Windows.ContentElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls."},{"content":"This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.","pos":[235,387]},{"content":"For details, check the documentation for individual controls.","pos":[388,449]}]}]},{"pos":[456,1022],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,566],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,307],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewKeyUp&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[308,566],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1078,1102],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1123,1139],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1140,1194],"content":"<xref:System.Windows.ContentElement.PreviewKeyUpEvent>","nodes":[]},{"pos":[1199,1215],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1216,1225],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1230,1238],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1239,1282],"content":"<xref:System.Windows.Input.KeyEventHandler>","nodes":[]},{"pos":[1293,1372],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.KeyUp>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.KeyUp&gt;</ph>.","pos":[0,79],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.KeyUp>."}]},{"pos":[1382,1508],"content":"Override <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewKeyUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,126],"source":"Override <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[560437,561965],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewKeyUp\"></xref> routed event.","nodes":[{"pos":[0,92],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewKeyUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewKeyUp\"></xref> routed event."}],"pos":[563086,563179],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[563190,563730],"yaml":true,"extradata":"MT"},{"content":"Occurs when the keyboard is no longer focused on this element.","nodes":[{"pos":[0,62],"content":"Occurs when the keyboard is no longer focused on this element.","nodes":[{"content":"Occurs when the keyboard is no longer focused on this element.","pos":[0,62]}]}],"pos":[564888,564951],"yaml":true},{"content":"Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewLostKeyboardFocus\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.LostKeyboardFocus>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,289],"content":"Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.","nodes":[{"content":"Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.","pos":[0,289],"nodes":[{"content":"Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached.","pos":[0,164]},{"content":"Check the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Source%2A&gt;</ph> in the event data to determine the actual element that lost focus.","pos":[165,289],"source":" Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus."}]}]},{"pos":[296,910],"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,614],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,331],"source":"This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewLostKeyboardFocus&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[332,614],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[978,1002],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1023,1039],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1040,1106],"content":"<xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>","nodes":[]},{"pos":[1111,1127],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1128,1137],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1142,1150],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1151,1211],"content":"<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>","nodes":[]},{"pos":[1222,1313],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.LostKeyboardFocus>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.LostKeyboardFocus&gt;</ph>.","pos":[0,91],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.LostKeyboardFocus>."}]},{"pos":[1323,1461],"content":"Override <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,138],"source":"Override <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes."}]}],"pos":[564962,566443],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewLostKeyboardFocus\"></xref> routed event.","nodes":[{"pos":[0,104],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewLostKeyboardFocus\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewLostKeyboardFocus\"></xref> routed event."}],"pos":[567682,567787],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[567798,568338],"yaml":true,"extradata":"MT"},{"content":"Occurs when any mouse button is pressed while the pointer is over this element.","nodes":[{"pos":[0,79],"content":"Occurs when any mouse button is pressed while the pointer is over this element.","nodes":[{"content":"Occurs when any mouse button is pressed while the pointer is over this element.","pos":[0,79]}]}],"pos":[569460,569540],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n The <xref:System.Windows.ContentElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.  \n  \n<a name=\"routedEventInfo_PreviewMouseDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseDownEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseDown>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,576],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,576],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,312],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[313,576],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[583,1414],"content":"The <xref:System.Windows.ContentElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.","nodes":[{"content":"The <xref:System.Windows.ContentElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.","pos":[0,831],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseDown&gt;</ph> event is often raised together with either <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.","pos":[0,303],"source":"The <xref:System.Windows.ContentElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id=\"ph3\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event reaches this element along the event route.","pos":[304,682],"source":" <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event reaches this element along the event route."},{"content":"See Remarks for <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonDown&gt;</ph>.","pos":[683,831],"source":" See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>."}]}]},{"pos":[1474,1498],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1519,1535],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1536,1594],"content":"<xref:System.Windows.ContentElement.PreviewMouseDownEvent>","nodes":[]},{"pos":[1599,1615],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1616,1625],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1630,1638],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1639,1690],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[1701,1784],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseDown>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseDown&gt;</ph>.","pos":[0,83],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseDown>."}]},{"pos":[1794,1924],"content":"Override <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,130],"source":"Override <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[569551,571495],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseDown\"></xref> routed event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewMouseDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseDown\"></xref> routed event."}],"pos":[572660,572757],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[572768,573308],"yaml":true,"extradata":"MT"},{"content":"Occurs when the left mouse button is pressed while the mouse pointer is over this element.","nodes":[{"pos":[0,90],"content":"Occurs when the left mouse button is pressed while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the left mouse button is pressed while the mouse pointer is over this element.","pos":[0,90]}]}],"pos":[574460,574551],"yaml":true},{"content":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \n  \n<a name=\"routedEventInfo_PreviewMouseLeftButtonDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,288],"content":"Although this <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","source":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>."},{"pos":[295,560],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,265],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[567,1075],"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","nodes":[{"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[0,508],"nodes":[{"content":"The arguments of this event expose the arguments of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event.","pos":[0,149],"source":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[150,508],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."}]}]},{"pos":[1082,1737],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,216],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[217,365]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","pos":[366,655],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>."}]},{"pos":[1807,1831],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1852,1868],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1869,1937],"content":"<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>","nodes":[]},{"pos":[1942,1958],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1959,1965],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[1970,1978],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1979,2030],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[2041,2181],"content":"Override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,140],"source":"Override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[574562,576767],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonDown\"></xref> routed event.","nodes":[{"pos":[0,106],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonDown\"></xref> routed event."}],"pos":[578002,578109],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[578120,578660],"yaml":true,"extradata":"MT"},{"content":"Occurs when the left mouse button is released while the mouse pointer is over this element.","nodes":[{"pos":[0,91],"content":"Occurs when the left mouse button is released while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the left mouse button is released while the mouse pointer is over this element.","pos":[0,91]}]}],"pos":[579810,579902],"yaml":true},{"content":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \n  \n<a name=\"routedEventInfo_PreviewMouseLeftButtonUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,288],"content":"Although this <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","source":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>."},{"pos":[295,558],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,263],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[565,1071],"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","nodes":[{"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[0,506],"nodes":[{"content":"The arguments of this event expose the arguments of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event.","pos":[0,147],"source":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[148,506],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."}]}]},{"pos":[1078,1733],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,216],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[217,365]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","pos":[366,655],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>."}]},{"pos":[1801,1825],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1846,1862],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1863,1929],"content":"<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>","nodes":[]},{"pos":[1934,1950],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1951,1957],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[1962,1970],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1971,2022],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[2033,2171],"content":"Override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,138],"source":"Override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[579913,582108],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonUp\"></xref> routed event.","nodes":[{"pos":[0,104],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonUp\"></xref> routed event."}],"pos":[583329,583434],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[583445,583985],"yaml":true,"extradata":"MT"},{"content":"Occurs when the mouse pointer moves while the mouse pointer is over this element.","nodes":[{"pos":[0,81],"content":"Occurs when the mouse pointer moves while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the mouse pointer moves while the mouse pointer is over this element.","pos":[0,81]}]}],"pos":[585107,585189],"yaml":true},{"content":"This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewMouseMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseMoveEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseMove>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,170],"content":"This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.","nodes":[{"content":"This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.","pos":[0,170]}]},{"pos":[177,753],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,576],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,312],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[313,576],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[813,837],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[858,874],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[875,933],"content":"<xref:System.Windows.ContentElement.PreviewMouseMoveEvent>","nodes":[]},{"pos":[938,954],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[955,964],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[969,977],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[978,1023],"content":"<xref:System.Windows.Input.MouseEventHandler>","nodes":[]},{"pos":[1034,1117],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseMove>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseMove&gt;</ph>.","pos":[0,83],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseMove>."}]},{"pos":[1127,1257],"content":"Override <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,130],"source":"Override <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[585200,586477],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseMove\"></xref> routed event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewMouseMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseMove\"></xref> routed event."}],"pos":[587630,587727],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[587738,588278],"yaml":true,"extradata":"MT"},{"content":"Occurs when the right mouse button is pressed while the mouse pointer is over this element.","nodes":[{"pos":[0,91],"content":"Occurs when the right mouse button is pressed while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the right mouse button is pressed while the mouse pointer is over this element.","pos":[0,91]}]}],"pos":[589436,589528],"yaml":true},{"content":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \n  \n<a name=\"routedEventInfo_PreviewMouseRightButtonDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,288],"content":"Although this <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","source":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>."},{"pos":[295,560],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,265],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[567,1075],"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","nodes":[{"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[0,508],"nodes":[{"content":"The arguments of this event expose the arguments of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;</ph> event.","pos":[0,149],"source":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[150,508],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."}]}]},{"pos":[1082,1737],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,216],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[217,365]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","pos":[366,655],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>."}]},{"pos":[1808,1832],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1853,1869],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1870,1939],"content":"<xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>","nodes":[]},{"pos":[1944,1960],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1961,1967],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[1972,1980],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1981,2032],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[2043,2184],"content":"Override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,141],"source":"Override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[589539,591747],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonDown\"></xref> routed event.","nodes":[{"pos":[0,107],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonDown\"></xref> routed event."}],"pos":[592989,593097],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[593108,593648],"yaml":true,"extradata":"MT"},{"content":"Occurs when the right mouse button is released while the mouse pointer is over this element.","nodes":[{"pos":[0,92],"content":"Occurs when the right mouse button is released while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the right mouse button is released while the mouse pointer is over this element.","pos":[0,92]}]}],"pos":[594827,594920],"yaml":true},{"content":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \n  \n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \n  \n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \n  \n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \n  \n<a name=\"routedEventInfo_PreviewMouseRightButtonUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,288],"content":"Although this <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","source":"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>."},{"pos":[295,558],"content":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.","nodes":[{"content":"This event is one of several related events that report the mouse-button specifics of an underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event, which is an attached event that is processed by each element along an event route.","pos":[0,263],"source":"This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route."}]},{"pos":[565,1071],"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","nodes":[{"content":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[0,506],"nodes":[{"content":"The arguments of this event expose the arguments of the underlying <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event.","pos":[0,147],"source":"The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event."},{"content":"If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.AddHandler%2A&gt;</ph>, with the option to handle events that are already marked as handled, in order to be listeners to the event.","pos":[148,506],"source":" If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event."}]}]},{"pos":[1078,1733],"content":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.","nodes":[{"content":"Conceptually, think of this event (and other mouse-button events on <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement&gt;</ph>) to be a mouse \"service\" (with the service definition provided by the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class).","pos":[0,216],"source":"Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \"service\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class)."},{"content":"The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data.","pos":[217,365]},{"content":"For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the <ph id=\"ph1\">[!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)]</ph> on the <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse&gt;</ph> class rather than those on <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph>.","pos":[366,655],"source":" For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>."}]},{"pos":[1802,1826],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1847,1863],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1864,1931],"content":"<xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>","nodes":[]},{"pos":[1936,1952],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1953,1959],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[1964,1972],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1973,2024],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[2035,2174],"content":"Override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,139],"source":"Override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[594931,597129],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonUp\"></xref> routed event.","nodes":[{"pos":[0,105],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonUp\"></xref> routed event."}],"pos":[598357,598463],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[598474,599014],"yaml":true,"extradata":"MT"},{"content":"Occurs when any mouse button is released while the mouse pointer is over this element.","nodes":[{"pos":[0,86],"content":"Occurs when any mouse button is released while the mouse pointer is over this element.","nodes":[{"content":"Occurs when any mouse button is released while the mouse pointer is over this element.","pos":[0,86]}]}],"pos":[600125,600212],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n The <xref:System.Windows.ContentElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.  \n  \n<a name=\"routedEventInfo_PreviewMouseUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseUpEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseUp>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,568],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,568],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,308],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[309,568],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[575,1390],"content":"The <xref:System.Windows.ContentElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.","nodes":[{"content":"The <xref:System.Windows.ContentElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.","pos":[0,815],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseUp&gt;</ph> event is often raised together with either <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>, which correspond to a press of one of the two standard mouse buttons.","pos":[0,297],"source":"The <xref:System.Windows.ContentElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <ph id=\"ph3\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;</ph> event reaches this element along the event route.","pos":[298,670],"source":" <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event reaches this element along the event route."},{"content":"See Remarks for <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewMouseRightButtonUp&gt;</ph>.","pos":[671,815],"source":" See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>."}]}]},{"pos":[1448,1472],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1493,1509],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1510,1566],"content":"<xref:System.Windows.ContentElement.PreviewMouseUpEvent>","nodes":[]},{"pos":[1571,1587],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1588,1597],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1602,1610],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1611,1662],"content":"<xref:System.Windows.Input.MouseButtonEventHandler>","nodes":[]},{"pos":[1673,1754],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseUp>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseUp&gt;</ph>.","pos":[0,81],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseUp>."}]},{"pos":[1764,1892],"content":"Override <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,128],"source":"Override <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[600223,602135],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseUp\"></xref> routed event.","nodes":[{"pos":[0,94],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewMouseUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseUp\"></xref> routed event."}],"pos":[603286,603381],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[603392,603932],"yaml":true,"extradata":"MT"},{"content":"Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.","nodes":[{"pos":[0,90],"content":"Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.","nodes":[{"content":"Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.","pos":[0,90]}]}],"pos":[605028,605119],"yaml":true},{"content":"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewMouseWheel\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseWheelEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseWheel>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,202],"content":"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.","nodes":[{"content":"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.","pos":[0,202]}]},{"pos":[209,787],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,578],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,313],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewMouseMove&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[314,578],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[848,872],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[893,909],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[910,969],"content":"<xref:System.Windows.ContentElement.PreviewMouseWheelEvent>","nodes":[]},{"pos":[974,990],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[991,1000],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1005,1013],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1014,1064],"content":"<xref:System.Windows.Input.MouseWheelEventHandler>","nodes":[]},{"pos":[1075,1159],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseWheel>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.MouseWheel&gt;</ph>.","pos":[0,84],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseWheel>."}]},{"pos":[1169,1300],"content":"Override <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,131],"source":"Override <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes."}]}],"pos":[605130,606450],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseWheel\"></xref> routed event.","nodes":[{"pos":[0,97],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewMouseWheel\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseWheel\"></xref> routed event."}],"pos":[607620,607718],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[607729,608269],"yaml":true,"extradata":"MT"},{"content":"Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.","nodes":[{"pos":[0,101],"content":"Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.","nodes":[{"content":"Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.","pos":[0,101]}]}],"pos":[609432,609534],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.  \n  \n This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewQueryContinueDrag\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.QueryContinueDrag>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,162],"content":"The <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> event enables the drag source to declare whether the drag-and-drop operation should be canceled.","pos":[0,162],"source":"The <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled."}]},{"pos":[169,771],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,602],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,325],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[326,602],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[839,863],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[884,900],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[901,967],"content":"<xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>","nodes":[]},{"pos":[972,988],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[989,998],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1003,1011],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1012,1063],"content":"<xref:System.Windows.QueryContinueDragEventHandler>","nodes":[]},{"pos":[1074,1165],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.QueryContinueDrag>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph>.","pos":[0,91],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.QueryContinueDrag>."}]},{"pos":[1175,1313],"content":"Override <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,138],"source":"Override <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes."}]}],"pos":[609545,610878],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewQueryContinueDrag\"></xref> routed event.","nodes":[{"pos":[0,104],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewQueryContinueDrag\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewQueryContinueDrag\"></xref> routed event."}],"pos":[612077,612182],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[612193,612733],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus button is pressed while the pointer is over this element.","nodes":[{"pos":[0,80],"content":"Occurs when the stylus button is pressed while the pointer is over this element.","nodes":[{"content":"Occurs when the stylus button is pressed while the pointer is over this element.","pos":[0,80]}]}],"pos":[613897,613978],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusButtonDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusButtonDown>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,606],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,606],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,327],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[328,606],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[613,772],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[839,863],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[884,900],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[901,966],"content":"<xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>","nodes":[]},{"pos":[971,987],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[988,997],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1002,1010],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1011,1063],"content":"<xref:System.Windows.Input.StylusButtonEventHandler>","nodes":[]},{"pos":[1074,1164],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusButtonDown>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph>.","pos":[0,90],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusButtonDown>."}]},{"pos":[1174,1311],"content":"Override <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,137],"source":"Override <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[613989,615320],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusButtonDown\"></xref> routed event.","nodes":[{"pos":[0,103],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewStylusButtonDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusButtonDown\"></xref> routed event."}],"pos":[616536,616640],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[616651,617191],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus button is released while the pointer is over this element.","nodes":[{"pos":[0,81],"content":"Occurs when the stylus button is released while the pointer is over this element.","nodes":[{"content":"Occurs when the stylus button is released while the pointer is over this element.","pos":[0,81]}]}],"pos":[618342,618424],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusButtonUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusButtonUp>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,598],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,598],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,323],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[324,598],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[605,764],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[829,853],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[874,890],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[891,954],"content":"<xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>","nodes":[]},{"pos":[959,975],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[976,985],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[990,998],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[999,1051],"content":"<xref:System.Windows.Input.StylusButtonEventHandler>","nodes":[]},{"pos":[1062,1150],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusButtonUp>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph>.","pos":[0,88],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusButtonUp>."}]},{"pos":[1160,1295],"content":"Override <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,135],"source":"Override <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[618435,619750],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusButtonUp\"></xref> routed event.","nodes":[{"pos":[0,101],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewStylusButtonUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusButtonUp\"></xref> routed event."}],"pos":[620952,621054],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[621065,621605],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus touches the digitizer while it is over this element.","nodes":[{"pos":[0,75],"content":"Occurs when the stylus touches the digitizer while it is over this element.","nodes":[{"content":"Occurs when the stylus touches the digitizer while it is over this element.","pos":[0,75]}]}],"pos":[622730,622806],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusDownEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusDown>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,582],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,582],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,315],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[316,582],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[589,748],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[809,833],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[854,870],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[871,930],"content":"<xref:System.Windows.ContentElement.PreviewStylusDownEvent>","nodes":[]},{"pos":[935,951],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[952,961],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[966,974],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[975,1025],"content":"<xref:System.Windows.Input.StylusDownEventHandler>","nodes":[]},{"pos":[1036,1120],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusDown>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph>.","pos":[0,84],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusDown>."}]},{"pos":[1130,1261],"content":"Override <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewStylusDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,131],"source":"Override <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[622817,624098],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusDown\"></xref> routed event.","nodes":[{"pos":[0,97],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewStylusDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusDown\"></xref> routed event."}],"pos":[625268,625366],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[625377,625917],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus moves over an element without actually touching the digitizer.","nodes":[{"pos":[0,85],"content":"Occurs when the stylus moves over an element without actually touching the digitizer.","nodes":[{"content":"Occurs when the stylus moves over an element without actually touching the digitizer.","pos":[0,85]}]}],"pos":[627046,627132],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusInAirMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusInAirMove>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,602],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,602],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,325],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[326,602],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[609,768],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[834,858],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[879,895],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[896,960],"content":"<xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>","nodes":[]},{"pos":[965,981],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[982,991],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[996,1004],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1005,1051],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1062,1151],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusInAirMove>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph>.","pos":[0,89],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusInAirMove>."}]},{"pos":[1161,1297],"content":"Override <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,136],"source":"Override <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[627143,628460],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusInAirMove\"></xref> routed event.","nodes":[{"pos":[0,102],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewStylusInAirMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusInAirMove\"></xref> routed event."}],"pos":[629657,629760],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[629771,630311],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus is close enough to the digitizer to be detected, while over this element.","nodes":[{"pos":[0,96],"content":"Occurs when the stylus is close enough to the digitizer to be detected, while over this element.","nodes":[{"content":"Occurs when the stylus is close enough to the digitizer to be detected, while over this element.","pos":[0,96]}]}],"pos":[631455,631552],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusInRange\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusInRange>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,594],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,594],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,321],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[322,594],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[601,760],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[824,848],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[869,885],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[886,948],"content":"<xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>","nodes":[]},{"pos":[953,969],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[970,979],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[984,992],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[993,1039],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1050,1137],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusInRange>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph>.","pos":[0,87],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusInRange>."}]},{"pos":[1147,1281],"content":"Override <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,134],"source":"Override <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes."}]}],"pos":[631563,632864],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusInRange\"></xref> routed event.","nodes":[{"pos":[0,100],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewStylusInRange\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusInRange\"></xref> routed event."}],"pos":[634047,634148],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[634159,634699],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus moves while over the element. The stylus must move while being detected by the  digitizer  to raise this event, otherwise, <xref href=\"System.Windows.ContentElement.PreviewStylusInAirMove\"></xref> is raised instead.","nodes":[{"pos":[0,238],"content":"Occurs when the stylus moves while over the element. The stylus must move while being detected by the  digitizer  to raise this event, otherwise, <xref href=\"System.Windows.ContentElement.PreviewStylusInAirMove\"></xref> is raised instead.","nodes":[{"content":"Occurs when the stylus moves while over the element.","pos":[0,52]},{"content":"The stylus must move while being detected by the  digitizer  to raise this event, otherwise, <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewStylusInAirMove\"&gt;&lt;/xref&gt;</ph> is raised instead.","pos":[53,238],"source":" The stylus must move while being detected by the  digitizer  to raise this event, otherwise, <xref href=\"System.Windows.ContentElement.PreviewStylusInAirMove\"></xref> is raised instead."}]}],"pos":[635823,636062],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusMoveEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusMove>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,582],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,582],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,315],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[316,582],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[589,748],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[809,833],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[854,870],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[871,930],"content":"<xref:System.Windows.ContentElement.PreviewStylusMoveEvent>","nodes":[]},{"pos":[935,951],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[952,961],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[966,974],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[975,1021],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1032,1116],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusMove>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph>.","pos":[0,84],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusMove>."}]},{"pos":[1126,1257],"content":"Override <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewStylusMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,131],"source":"Override <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[636073,637350],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusMove\"></xref> routed event.","nodes":[{"pos":[0,97],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewStylusMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusMove\"></xref> routed event."}],"pos":[638512,638610],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[638621,639161],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus is too far from the digitizer to be detected.","nodes":[{"pos":[0,68],"content":"Occurs when the stylus is too far from the digitizer to be detected.","nodes":[{"content":"Occurs when the stylus is too far from the digitizer to be detected.","pos":[0,68]}]}],"pos":[640296,640365],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusOutOfRange\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusOutOfRange>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,606],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,606],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,327],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[328,606],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[613,772],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[839,863],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[884,900],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[901,966],"content":"<xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>","nodes":[]},{"pos":[971,987],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[988,997],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1002,1010],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1011,1057],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1068,1158],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusOutOfRange>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph>.","pos":[0,90],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusOutOfRange>."}]},{"pos":[1168,1305],"content":"Override <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,137],"source":"Override <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes."}]}],"pos":[640376,641701],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusOutOfRange\"></xref> routed event.","nodes":[{"pos":[0,103],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewStylusOutOfRange\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusOutOfRange\"></xref> routed event."}],"pos":[642905,643009],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[643020,643560],"yaml":true,"extradata":"MT"},{"content":"Occurs when a user performs one of several stylus gestures.","nodes":[{"pos":[0,59],"content":"Occurs when a user performs one of several stylus gestures.","nodes":[{"content":"Occurs when a user performs one of several stylus gestures.","pos":[0,59]}]}],"pos":[644741,644801],"yaml":true},{"content":"For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusSystemGesture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusSystemGesture>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,85],"content":"For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.","nodes":[{"content":"For information about stylus gestures, see <ph id=\"ph1\">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.","pos":[0,85],"source":"For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>."}]},{"pos":[92,710],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,618],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,333],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[334,618],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[717,876],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[946,970],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[991,1007],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1008,1076],"content":"<xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>","nodes":[]},{"pos":[1081,1097],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1098,1107],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1112,1120],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1121,1180],"content":"<xref:System.Windows.Input.StylusSystemGestureEventHandler>","nodes":[]},{"pos":[1191,1284],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusSystemGesture>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph>.","pos":[0,93],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusSystemGesture>."}]},{"pos":[1294,1434],"content":"Override <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,140],"source":"Override <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes."}]}],"pos":[644812,646268],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusSystemGesture\"></xref> routed event.","nodes":[{"pos":[0,106],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewStylusSystemGesture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusSystemGesture\"></xref> routed event."}],"pos":[647519,647626],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[647637,648177],"yaml":true,"extradata":"MT"},{"content":"Occurs when the user raises the stylus off the digitizer while the stylus is over this element.","nodes":[{"pos":[0,95],"content":"Occurs when the user raises the stylus off the digitizer while the stylus is over this element.","nodes":[{"content":"Occurs when the user raises the stylus off the digitizer while the stylus is over this element.","pos":[0,95]}]}],"pos":[649295,649391],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_PreviewStylusUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusUpEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusUp>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,578],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,578],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,313],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[314,578],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[585,744],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[803,827],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[848,864],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[865,922],"content":"<xref:System.Windows.ContentElement.PreviewStylusUpEvent>","nodes":[]},{"pos":[927,943],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[944,953],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[958,966],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[967,1013],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1024,1106],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusUp>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph>.","pos":[0,82],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusUp>."}]},{"pos":[1116,1245],"content":"Override <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewStylusUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,129],"source":"Override <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[649402,650667],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusUp\"></xref> routed event.","nodes":[{"pos":[0,95],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewStylusUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusUp\"></xref> routed event."}],"pos":[651815,651911],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[651922,652462],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element gets text in a device-independent manner.","nodes":[{"pos":[0,66],"content":"Occurs when this element gets text in a device-independent manner.","nodes":[{"content":"Occurs when this element gets text in a device-independent manner.","pos":[0,66]}]}],"pos":[653575,653642],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.ContentElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.ContentElement.PreviewTextInput>.  \n  \n Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.  \n  \n This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_PreviewTextInput\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewTextInputEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.TextInput>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,368],"content":"The <xref:System.Windows.ContentElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.ContentElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.ContentElement.PreviewTextInput>.","nodes":[{"content":"The <xref:System.Windows.ContentElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.ContentElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.ContentElement.PreviewTextInput>.","pos":[0,368],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> event allows a component or application to listen for text input in a device-independent manner.","pos":[0,154],"source":"The <xref:System.Windows.ContentElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner."},{"content":"The keyboard is the primary means of <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>; but speech, handwriting, and other input devices can also generate <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>.","pos":[155,368],"source":" The keyboard is the primary means of <xref:System.Windows.ContentElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.ContentElement.PreviewTextInput>."}]}]},{"pos":[375,519],"content":"Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.","nodes":[{"content":"Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.","pos":[0,144]}]},{"pos":[526,1136],"content":"This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,610],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,329],"source":"This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[330,610],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1196,1220],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1241,1257],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1258,1316],"content":"<xref:System.Windows.ContentElement.PreviewTextInputEvent>","nodes":[]},{"pos":[1321,1337],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1338,1347],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[1352,1360],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1361,1416],"content":"<xref:System.Windows.Input.TextCompositionEventHandler>","nodes":[]},{"pos":[1427,1510],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.TextInput>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>.","pos":[0,83],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.TextInput>."}]},{"pos":[1520,1650],"content":"Override <xref:System.Windows.ContentElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewTextInput%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,130],"source":"Override <xref:System.Windows.ContentElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes."}]}],"pos":[653653,655325],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewTextInput\"></xref> routed event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewTextInput\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewTextInput\"></xref> routed event."}],"pos":[656476,656573],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[656584,657124],"yaml":true,"extradata":"MT"},{"content":"Occurs when a finger touches the screen while the finger is over this element.","nodes":[{"pos":[0,78],"content":"Occurs when a finger touches the screen while the finger is over this element.","nodes":[{"content":"Occurs when a finger touches the screen while the finger is over this element.","pos":[0,78]}]}],"pos":[658238,658317],"yaml":true},{"content":"By default, the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.  \n  \n To cause the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> attached property to `false` for this element.  \n  \n<a name=\"routedEventInfo_PreviewTouchDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewTouchDownEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchDown>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,392],"content":"By default, the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.","nodes":[{"content":"By default, the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.","pos":[0,392],"nodes":[{"content":"By default, the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events do not occur until a finger touches the screen and moves.","pos":[0,185],"source":"By default, the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events do not occur until a finger touches the screen and moves."},{"content":"Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.","pos":[186,326],"source":" Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>."},{"content":"The press and hold behavior is equivalent to a mouse right-click.","pos":[327,392]}]}]},{"pos":[399,712],"content":"To cause the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events to occur as soon as a finger touches the screen, set the <ph id=\"ph3\">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt;</ph> attached property to <ph id=\"ph4\">`false`</ph> for this element.","source":"To cause the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> attached property to `false` for this element."},{"pos":[772,796],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[817,833],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[834,892],"content":"<xref:System.Windows.ContentElement.PreviewTouchDownEvent>","nodes":[]},{"pos":[897,913],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[914,923],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[928,936],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[937,1019],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[1030,1113],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchDown>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph>.","pos":[0,83],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchDown>."}]},{"pos":[1123,1253],"content":"Override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewTouchDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,130],"source":"Override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[658328,659601],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewTouchDown\"></xref> routed event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewTouchDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewTouchDown\"></xref> routed event."}],"pos":[660761,660858],"yaml":true},{"content":"Occurs when a finger moves on the screen while the finger is over this element.","nodes":[{"pos":[0,79],"content":"Occurs when a finger moves on the screen while the finger is over this element.","nodes":[{"content":"Occurs when a finger moves on the screen while the finger is over this element.","pos":[0,79]}]}],"pos":[661972,662052],"yaml":true},{"content":"<a name=\"routedEventInfo_PreviewTouchMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewTouchMoveEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchMove>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[54,78],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[99,115],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[116,174],"content":"<xref:System.Windows.ContentElement.PreviewTouchMoveEvent>","nodes":[]},{"pos":[179,195],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[196,205],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[210,218],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[219,301],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[312,395],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchMove>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.TouchMove&gt;</ph>.","pos":[0,83],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchMove>."}]},{"pos":[405,535],"content":"Override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewTouchMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,130],"source":"Override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[662063,662614],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewTouchMove\"></xref> routed event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewTouchMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewTouchMove\"></xref> routed event."}],"pos":[663796,663893],"yaml":true},{"content":"Occurs when a finger is raised off of the screen while the finger is over this element.","nodes":[{"pos":[0,87],"content":"Occurs when a finger is raised off of the screen while the finger is over this element.","nodes":[{"content":"Occurs when a finger is raised off of the screen while the finger is over this element.","pos":[0,87]}]}],"pos":[664995,665083],"yaml":true},{"content":"<a name=\"routedEventInfo_PreviewTouchUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.PreviewTouchUpEvent>|  \n|Routing strategy|Tunneling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchUp>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[52,76],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[97,113],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[114,170],"content":"<xref:System.Windows.ContentElement.PreviewTouchUpEvent>","nodes":[]},{"pos":[175,191],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[192,201],"content":"Tunneling","nodes":[{"content":"Tunneling","pos":[0,9]}]},{"pos":[206,214],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[215,297],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[308,389],"content":"The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchUp>.","nodes":[{"content":"The corresponding bubbling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.TouchUp&gt;</ph>.","pos":[0,81],"source":"The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchUp>."}]},{"pos":[399,527],"content":"Override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnPreviewTouchUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,128],"source":"Override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[665094,665637],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewTouchUp\"></xref> routed event.","nodes":[{"pos":[0,94],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.PreviewTouchUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.PreviewTouchUp\"></xref> routed event."}],"pos":[666783,666878],"yaml":true},{"content":"Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.","nodes":[{"pos":[0,101],"content":"Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.","nodes":[{"content":"Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.","pos":[0,101]}]}],"pos":[667996,668098],"yaml":true},{"content":"The <xref:System.Windows.ContentElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.  \n  \n This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_QueryContinueDrag\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.QueryContinueDragEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,157],"content":"The <xref:System.Windows.ContentElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> event enables the drag source to determine whether the drag-and-drop operation should be canceled.","pos":[0,157],"source":"The <xref:System.Windows.ContentElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled."}]},{"pos":[164,738],"content":"This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,574],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,311],"source":"This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.QueryContinueDrag&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[312,574],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[799,823],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[844,860],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[861,920],"content":"<xref:System.Windows.ContentElement.QueryContinueDragEvent>","nodes":[]},{"pos":[925,941],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[942,950],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[955,963],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[964,1015],"content":"<xref:System.Windows.QueryContinueDragEventHandler>","nodes":[]},{"pos":[1026,1125],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewQueryContinueDrag&gt;</ph>.","pos":[0,99],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>."}]},{"pos":[1135,1266],"content":"Override <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnQueryContinueDrag%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,131],"source":"Override <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes."}]}],"pos":[668109,669395],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.QueryContinueDrag\"></xref> routed event.","nodes":[{"pos":[0,97],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.QueryContinueDrag\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.QueryContinueDrag\"></xref> routed event."}],"pos":[670567,670665],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[670676,671216],"yaml":true,"extradata":"MT"},{"content":"Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.","nodes":[{"pos":[0,222],"content":"Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.","nodes":[{"content":"Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.","pos":[0,222],"nodes":[{"content":"Occurs when the cursor is requested to display.","pos":[0,47]},{"content":"This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.","pos":[48,222]}]}]}],"pos":[672301,672524],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.QueryCursor> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point). Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in [!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)] programming. That object is represented by the <xref:System.Windows.Input.Cursor> class in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] input system enables you to change this cursor when it represents the onscreen position of the mouse pointer. You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.  \n  \n Listening for the <xref:System.Windows.ContentElement.QueryCursor> event is not an efficient technique for cursor management. Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. You should only rely on <xref:System.Windows.ContentElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs. For more information on implementing cursor behavior in response to <xref:System.Windows.ContentElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.  \n  \n<a name=\"routedEventInfo_QueryCursor\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.QueryCursorEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.QueryCursorEventHandler>|  \n  \n-   There is no defined corresponding tunneling event.  \n  \n-   Override <xref:System.Windows.ContentElement.OnQueryCursor%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,556],"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.QueryCursor> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.QueryCursor> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,556],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,302],"source":"This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.QueryCursor> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[303,556],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[563,1398],"content":"The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point). Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in [!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)] programming. That object is represented by the <xref:System.Windows.Input.Cursor> class in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] input system enables you to change this cursor when it represents the onscreen position of the mouse pointer. You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.","nodes":[{"content":"The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point).","pos":[0,124]},{"content":"Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)]</ph> programming.","pos":[125,357],"source":" Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in [!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)] programming."},{"content":"That object is represented by the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Cursor&gt;</ph> class in <ph id=\"ph2\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph>.","pos":[358,508],"source":" That object is represented by the <xref:System.Windows.Input.Cursor> class in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]."},{"content":"The <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> input system enables you to change this cursor when it represents the onscreen position of the mouse pointer.","pos":[509,694],"source":" The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] input system enables you to change this cursor when it represents the onscreen position of the mouse pointer."},{"content":"You can use predefined values from the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Cursors&gt;</ph> enumeration, or you can declare a custom cursor as an image file.","pos":[695,835],"source":" You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file."}]},{"pos":[1405,2139],"content":"Listening for the <xref:System.Windows.ContentElement.QueryCursor> event is not an efficient technique for cursor management. Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. You should only rely on <xref:System.Windows.ContentElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs. For more information on implementing cursor behavior in response to <xref:System.Windows.ContentElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.","nodes":[{"content":"Listening for the <xref:System.Windows.ContentElement.QueryCursor> event is not an efficient technique for cursor management. Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. You should only rely on <xref:System.Windows.ContentElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs. For more information on implementing cursor behavior in response to <xref:System.Windows.ContentElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.","pos":[0,734],"nodes":[{"content":"Listening for the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> event is not an efficient technique for cursor management.","pos":[0,125],"source":"Listening for the <xref:System.Windows.ContentElement.QueryCursor> event is not an efficient technique for cursor management."},{"content":"Instead, each element should define its own cursor behavior with <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkContentElement.Cursor%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkContentElement.ForceCursor%2A&gt;</ph>.","pos":[126,312],"source":" Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>."},{"content":"You should only rely on <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs.","pos":[313,559],"source":" You should only rely on <xref:System.Windows.ContentElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs."},{"content":"For more information on implementing cursor behavior in response to <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.QueryCursor&gt;</ph>, see <ph id=\"ph2\">&lt;xref:System.Windows.Input.QueryCursorEventHandler&gt;</ph>.","pos":[560,734],"source":" For more information on implementing cursor behavior in response to <xref:System.Windows.ContentElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>."}]}]},{"pos":[2194,2218],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[2239,2255],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2256,2309],"content":"<xref:System.Windows.ContentElement.QueryCursorEvent>","nodes":[]},{"pos":[2314,2330],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2331,2339],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[2344,2352],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2353,2404],"content":"<xref:System.Windows.Input.QueryCursorEventHandler>","nodes":[]},{"pos":[2415,2465],"content":"There is no defined corresponding tunneling event.","nodes":[{"content":"There is no defined corresponding tunneling event.","pos":[0,50]}]},{"pos":[2475,2600],"content":"Override <xref:System.Windows.ContentElement.OnQueryCursor%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnQueryCursor%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.ContentElement.OnQueryCursor%2A> to implement class handling for this event in derived classes."}]}],"pos":[672535,675157],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.QueryCursor\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.QueryCursor\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.QueryCursor\"></xref> routed event."}],"pos":[676287,676379],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[676390,676930],"yaml":true,"extradata":"MT"},{"content":"Raises a specific routed event. The <xref href=\"System.Windows.RoutedEvent\"></xref> to be raised is identified within the <xref href=\"System.Windows.RoutedEventArgs\"></xref> instance that is provided (as the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of that event data).","nodes":[{"pos":[0,301],"content":"Raises a specific routed event. The <xref href=\"System.Windows.RoutedEvent\"></xref> to be raised is identified within the <xref href=\"System.Windows.RoutedEventArgs\"></xref> instance that is provided (as the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of that event data).","nodes":[{"content":"Raises a specific routed event.","pos":[0,31]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.RoutedEvent\"&gt;&lt;/xref&gt;</ph> to be raised is identified within the <ph id=\"ph2\">&lt;xref href=\"System.Windows.RoutedEventArgs\"&gt;&lt;/xref&gt;</ph> instance that is provided (as the <ph id=\"ph3\">&lt;xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"&gt;&lt;/xref&gt;</ph> property of that event data).","pos":[32,301],"source":" The <xref href=\"System.Windows.RoutedEvent\"></xref> to be raised is identified within the <xref href=\"System.Windows.RoutedEventArgs\"></xref> instance that is provided (as the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of that event data)."}]}],"pos":[678151,678453],"yaml":true},{"content":"The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.  \n  \n <xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise. This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.","nodes":[{"pos":[0,366],"content":"The <ph id=\"ph1\">`e`</ph> parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <ph id=\"ph2\">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.","source":"The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised."},{"pos":[373,730],"content":"<xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise. This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs&gt;</ph> is not just the state properties for the event; it also identifies which routed event to raise.","pos":[0,133],"source":"<xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise."},{"content":"This event-raising pattern and the routed event data both differ from <ph id=\"ph1\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> events and data classes, which typically just contain properties that are related to the event.","pos":[134,357],"source":" This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event."}]}],"pos":[678464,679199],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains the event data and also identifies the event to raise.","nodes":[{"pos":[0,122],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.RoutedEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data and also identifies the event to raise.","source":"A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains the event data and also identifies the event to raise."}],"pos":[679870,679993],"yaml":true},{"content":"Releases all captured touch devices from this element.","nodes":[{"pos":[0,54],"content":"Releases all captured touch devices from this element.","nodes":[{"content":"Releases all captured touch devices from this element.","pos":[0,54]}]}],"pos":[681041,681096],"yaml":true},{"content":"Releases the mouse capture, if this element held the capture.","nodes":[{"pos":[0,61],"content":"Releases the mouse capture, if this element held the capture.","nodes":[{"content":"Releases the mouse capture, if this element held the capture.","pos":[0,61]}]}],"pos":[682193,682255],"yaml":true},{"content":"If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.ContentElement.IsMouseCaptured%2A> before you call this method.","nodes":[{"pos":[0,192],"content":"If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.ContentElement.IsMouseCaptured%2A> before you call this method.","nodes":[{"content":"If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.ContentElement.IsMouseCaptured%2A> before you call this method.","pos":[0,192],"nodes":[{"content":"If this element did not hold the capture, calling this method has no effect.","pos":[0,76]},{"content":"Consider checking the value of <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsMouseCaptured%2A&gt;</ph> before you call this method.","pos":[77,192],"source":" Consider checking the value of <xref:System.Windows.ContentElement.IsMouseCaptured%2A> before you call this method."}]}]}],"pos":[682266,682459],"yaml":true,"extradata":"MT"},{"content":"Releases the stylus device capture, if this element held the capture.","nodes":[{"pos":[0,69],"content":"Releases the stylus device capture, if this element held the capture.","nodes":[{"content":"Releases the stylus device capture, if this element held the capture.","pos":[0,69]}]}],"pos":[684234,684304],"yaml":true},{"content":"If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.ContentElement.IsStylusCaptured%2A> before you call this method.","nodes":[{"pos":[0,193],"content":"If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.ContentElement.IsStylusCaptured%2A> before you call this method.","nodes":[{"content":"If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.ContentElement.IsStylusCaptured%2A> before you call this method.","pos":[0,193],"nodes":[{"content":"If this element did not hold the capture, calling this method has no effect.","pos":[0,76]},{"content":"Consider checking the value of <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.IsStylusCaptured%2A&gt;</ph> before you call this method.","pos":[77,193],"source":" Consider checking the value of <xref:System.Windows.ContentElement.IsStylusCaptured%2A> before you call this method."}]}]}],"pos":[684315,684509],"yaml":true,"extradata":"MT"},{"content":"Attempts to release the specified touch device from this element.","nodes":[{"pos":[0,65],"content":"Attempts to release the specified touch device from this element.","nodes":[{"content":"Attempts to release the specified touch device from this element.","pos":[0,65]}]}],"pos":[685735,685801],"yaml":true},{"content":"The device to release.","nodes":[{"pos":[0,22],"content":"The device to release.","nodes":[{"content":"The device to release.","pos":[0,22]}]}],"pos":[686006,686029],"yaml":true},{"content":"`true` if the touch device is released; otherwise, `false`.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">`true`</ph> if the touch device is released; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the touch device is released; otherwise, `false`."}],"pos":[686087,686149],"yaml":true},{"content":"<code>touchDevice</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;touchDevice&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>touchDevice</code> is `null`."}],"pos":[686328,686364],"yaml":true},{"content":"Removes the specified routed event handler from this element.","nodes":[{"pos":[0,61],"content":"Removes the specified routed event handler from this element.","nodes":[{"content":"Removes the specified routed event handler from this element.","pos":[0,61]}]}],"pos":[687454,687516],"yaml":true},{"content":"The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] \"wrapper\" event that is associated with a custom routed event, specifically when you implement the \"remove\" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level. The example that follows this remarks section illustrates this scenario.  \n  \n Calling this method has no effect if there were no handlers registered with criteria that match the input parameters for the method call.  \n  \n If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed. This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.  \n  \n Neither `routedEvent` nor `handler` may be `null`. Attempting to provide either value as `null` will raise an exception.  \n  \n This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events. Either type of handler is removed.","nodes":[{"pos":[0,455],"content":"The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] \"wrapper\" event that is associated with a custom routed event, specifically when you implement the \"remove\" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level. The example that follows this remarks section illustrates this scenario.","nodes":[{"content":"The most common scenario for using this <ph id=\"ph1\">[!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)]</ph> is when you implement the <ph id=\"ph2\">[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)]</ph> \"wrapper\" event that is associated with a custom routed event, specifically when you implement the \"remove\" logic for handlers at the <ph id=\"ph3\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> level.","pos":[0,382],"source":"The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] \"wrapper\" event that is associated with a custom routed event, specifically when you implement the \"remove\" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level."},{"content":"The example that follows this remarks section illustrates this scenario.","pos":[383,455]}]},{"pos":[462,599],"content":"Calling this method has no effect if there were no handlers registered with criteria that match the input parameters for the method call.","nodes":[{"content":"Calling this method has no effect if there were no handlers registered with criteria that match the input parameters for the method call.","pos":[0,137]}]},{"pos":[606,855],"content":"If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed. This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.","nodes":[{"content":"If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed.","pos":[0,125]},{"content":"This behavior is consistent with <ph id=\"ph1\">[!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)]</ph> behavior of the <ph id=\"ph2\">`-=`</ph> operator.","pos":[126,249],"source":" This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator."}]},{"pos":[862,982],"content":"Neither `routedEvent` nor `handler` may be `null`. Attempting to provide either value as `null` will raise an exception.","nodes":[{"content":"Neither <ph id=\"ph1\">`routedEvent`</ph> nor <ph id=\"ph2\">`handler`</ph> may be <ph id=\"ph3\">`null`</ph>.","pos":[0,50],"source":"Neither `routedEvent` nor `handler` may be `null`."},{"content":"Attempting to provide either value as <ph id=\"ph1\">`null`</ph> will raise an exception.","pos":[51,120],"source":" Attempting to provide either value as `null` will raise an exception."}]},{"pos":[989,1321],"content":"This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events. Either type of handler is removed.","nodes":[{"content":"This method ignores the <ph id=\"ph1\">`handledEventsToo`</ph> parameter information, which is provided if the handler was first added with the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29&gt;</ph> signature that enables handling of already-handled events.","pos":[0,297],"source":"This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events."},{"content":"Either type of handler is removed.","pos":[298,332]}]}],"pos":[687527,688863],"yaml":true,"extradata":"MT"},{"content":"The identifier of the.routed event for which the handler is attached.","nodes":[{"pos":[0,69],"content":"The identifier of the.routed event for which the handler is attached.","nodes":[{"content":"The identifier of the.routed event for which the handler is attached.","pos":[0,69]}]}],"pos":[689068,689138],"yaml":true},{"content":"The specific handler implementation to remove from the event handler collection on this element.","nodes":[{"pos":[0,96],"content":"The specific handler implementation to remove from the event handler collection on this element.","nodes":[{"content":"The specific handler implementation to remove from the event handler collection on this element.","pos":[0,96]}]}],"pos":[689203,689300],"yaml":true},{"content":"Returns whether serialization processes should serialize the contents of the <xref href=\"System.Windows.ContentElement.CommandBindings\"></xref> property on instances of this class.","nodes":[{"pos":[0,180],"content":"Returns whether serialization processes should serialize the contents of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.CommandBindings\"&gt;&lt;/xref&gt;</ph> property on instances of this class.","source":"Returns whether serialization processes should serialize the contents of the <xref href=\"System.Windows.ContentElement.CommandBindings\"></xref> property on instances of this class."}],"pos":[690393,690574],"yaml":true},{"content":"This will return `true` if <xref:System.Windows.ContentElement.CommandBindings%2A> is locally set.  \n  \n This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.  \n  \n For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).","nodes":[{"pos":[0,98],"content":"This will return <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.CommandBindings%2A&gt;</ph> is locally set.","source":"This will return `true` if <xref:System.Windows.ContentElement.CommandBindings%2A> is locally set."},{"pos":[105,488],"content":"This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.","nodes":[{"content":"This <ph id=\"ph1\">`ShouldSerialize`</ph> method is provided because the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.CommandBindings%2A&gt;</ph> property does not have a simple default value.","pos":[0,151],"source":"This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value."},{"content":"This method indicates whether the property has changed from its default value.","pos":[152,230]},{"content":"You typically invoke this method if you are either developing a designer or developing your own control incorporating a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[231,383],"source":" You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>."}]},{"pos":[495,696],"content":"For more information, see <bpt id=\"p1\">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id=\"p1\">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.","source":"For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)."}],"pos":[690585,691288],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Windows.ContentElement.CommandBindings\"></xref> property value should be serialized; otherwise, `false`.","nodes":[{"pos":[0,137],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Windows.ContentElement.CommandBindings\"&gt;&lt;/xref&gt;</ph> property value should be serialized; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Windows.ContentElement.CommandBindings\"></xref> property value should be serialized; otherwise, `false`."}],"pos":[691435,691575],"yaml":true},{"content":"Returns whether serialization processes should serialize the contents of the <xref href=\"System.Windows.ContentElement.InputBindings\"></xref> property on instances of this class.","nodes":[{"pos":[0,178],"content":"Returns whether serialization processes should serialize the contents of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.InputBindings\"&gt;&lt;/xref&gt;</ph> property on instances of this class.","source":"Returns whether serialization processes should serialize the contents of the <xref href=\"System.Windows.ContentElement.InputBindings\"></xref> property on instances of this class."}],"pos":[692690,692869],"yaml":true},{"content":"This will return `true` if <xref:System.Windows.ContentElement.InputBindings%2A> is locally set.  \n  \n This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.  \n  \n For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).","nodes":[{"pos":[0,96],"content":"This will return <ph id=\"ph1\">`true`</ph> if <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.InputBindings%2A&gt;</ph> is locally set.","source":"This will return `true` if <xref:System.Windows.ContentElement.InputBindings%2A> is locally set."},{"pos":[103,484],"content":"This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.","nodes":[{"content":"This <ph id=\"ph1\">`ShouldSerialize`</ph> method is provided because the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.InputBindings%2A&gt;</ph> property does not have a simple default value.","pos":[0,149],"source":"This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value."},{"content":"This method indicates whether the property has changed from its default value.","pos":[150,228]},{"content":"You typically invoke this method if you are either developing a designer or developing your own control incorporating a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph>.","pos":[229,381],"source":" You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>."}]},{"pos":[491,692],"content":"For more information, see <bpt id=\"p1\">[</bpt>Defining Default Values with the ShouldSerialize and Reset Methods<ept id=\"p1\">](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)</ept>.","source":"For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md)."}],"pos":[692880,693579],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Windows.ContentElement.InputBindings\"></xref> property value should be serialized; otherwise, `false`.","nodes":[{"pos":[0,135],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Windows.ContentElement.InputBindings\"&gt;&lt;/xref&gt;</ph> property value should be serialized; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Windows.ContentElement.InputBindings\"></xref> property value should be serialized; otherwise, `false`."}],"pos":[693724,693862],"yaml":true},{"content":"Occurs when the stylus button is pressed while the pointer is over this element.","nodes":[{"pos":[0,80],"content":"Occurs when the stylus button is pressed while the pointer is over this element.","nodes":[{"content":"Occurs when the stylus button is pressed while the pointer is over this element.","pos":[0,80]}]}],"pos":[694896,694977],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusButtonDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.StylusButtonDownEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusButtonDown>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,578],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,578],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,313],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusButtonDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[314,578],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[585,744],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[804,828],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[849,865],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[866,924],"content":"<xref:System.Windows.ContentElement.StylusButtonDownEvent>","nodes":[]},{"pos":[929,945],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[946,954],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[959,967],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[968,1020],"content":"<xref:System.Windows.Input.StylusButtonEventHandler>","nodes":[]},{"pos":[1031,1129],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusButtonDown>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonDown&gt;</ph>.","pos":[0,98],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusButtonDown>."}]},{"pos":[1139,1269],"content":"Override <xref:System.Windows.ContentElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnStylusButtonDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,130],"source":"Override <xref:System.Windows.ContentElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[694988,696277],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.StylusButtonDown\"></xref> routed event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.StylusButtonDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.StylusButtonDown\"></xref> routed event."}],"pos":[697444,697541],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[697552,698092],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus button is released while the pointer is over this element.","nodes":[{"pos":[0,81],"content":"Occurs when the stylus button is released while the pointer is over this element.","nodes":[{"content":"Occurs when the stylus button is released while the pointer is over this element.","pos":[0,81]}]}],"pos":[699194,699276],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusButtonUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.StylusButtonUpEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusButtonUp>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,570],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,570],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,309],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusButtonUp&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[310,570],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[577,736],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[794,818],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[839,855],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[856,912],"content":"<xref:System.Windows.ContentElement.StylusButtonUpEvent>","nodes":[]},{"pos":[917,933],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[934,942],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[947,955],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[956,1008],"content":"<xref:System.Windows.Input.StylusButtonEventHandler>","nodes":[]},{"pos":[1019,1115],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusButtonUp>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusButtonUp&gt;</ph>.","pos":[0,96],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusButtonUp>."}]},{"pos":[1125,1253],"content":"Override <xref:System.Windows.ContentElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnStylusButtonUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,128],"source":"Override <xref:System.Windows.ContentElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[699287,700560],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.StylusButtonUp\"></xref> routed event.","nodes":[{"pos":[0,94],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.StylusButtonUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.StylusButtonUp\"></xref> routed event."}],"pos":[701691,701786],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[701797,702337],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus touches the digitizer while the stylus is over this element.","nodes":[{"pos":[0,83],"content":"Occurs when the stylus touches the digitizer while the stylus is over this element.","nodes":[{"content":"Occurs when the stylus touches the digitizer while the stylus is over this element.","pos":[0,83]}]}],"pos":[703413,703497],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.StylusDownEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusDown>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnStylusDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,554],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,554],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,301],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusDown&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[302,554],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[561,720],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[774,798],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[819,835],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[836,888],"content":"<xref:System.Windows.ContentElement.StylusDownEvent>","nodes":[]},{"pos":[893,909],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[910,918],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[923,931],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[932,982],"content":"<xref:System.Windows.Input.StylusDownEventHandler>","nodes":[]},{"pos":[993,1085],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusDown>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusDown&gt;</ph>.","pos":[0,92],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusDown>."}]},{"pos":[1095,1219],"content":"Override <xref:System.Windows.ContentElement.OnStylusDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnStylusDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,124],"source":"Override <xref:System.Windows.ContentElement.OnStylusDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[703508,704747],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.StylusDown\"></xref> routed event.","nodes":[{"pos":[0,90],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.StylusDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.StylusDown\"></xref> routed event."}],"pos":[705868,705959],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[705970,706510],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus enters the bounds of this element.","nodes":[{"pos":[0,57],"content":"Occurs when the stylus enters the bounds of this element.","nodes":[{"content":"Occurs when the stylus enters the bounds of this element.","pos":[0,57]}]}],"pos":[707588,707646],"yaml":true},{"content":"<xref:System.Windows.ContentElement.StylusEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \n  \n Although <xref:System.Windows.ContentElement.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsStylusOver%2A> property value has changed from `false` to `true` on this element.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusEnter\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.StylusEnterEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   Override <xref:System.Windows.ContentElement.OnStylusEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,407],"content":"<xref:System.Windows.ContentElement.StylusEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> is a <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.","pos":[0,189],"source":"<xref:System.Windows.ContentElement.StylusEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy."},{"content":"Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.","pos":[190,309]},{"content":"However, they do enable other aspects of routed event behavior, such as event triggers in styles.","pos":[310,407]}]},{"pos":[414,690],"content":"Although <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> tracks when the stylus enters the bounds of an element, this event more literally reports that the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> property value has changed from <ph id=\"ph3\">`false`</ph> to <ph id=\"ph4\">`true`</ph> on this element.","source":"Although <xref:System.Windows.ContentElement.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsStylusOver%2A> property value has changed from `false` to `true` on this element."},{"pos":[697,1255],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,558],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,303],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusEnter&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[304,558],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1262,1421],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[1476,1500],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1521,1537],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1538,1591],"content":"<xref:System.Windows.ContentElement.StylusEnterEvent>","nodes":[]},{"pos":[1596,1612],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1613,1619],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[1624,1632],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1633,1679],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1690,1815],"content":"Override <xref:System.Windows.ContentElement.OnStylusEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnStylusEnter%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.ContentElement.OnStylusEnter%2A> to implement class handling for this event in derived classes."}]}],"pos":[707657,709494],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.StylusEnter\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.StylusEnter\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.StylusEnter\"></xref> routed event."}],"pos":[710614,710706],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[710717,711257],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus moves over an element without actually touching the digitizer.","nodes":[{"pos":[0,85],"content":"Occurs when the stylus moves over an element without actually touching the digitizer.","nodes":[{"content":"Occurs when the stylus moves over an element without actually touching the digitizer.","pos":[0,85]}]}],"pos":[712360,712446],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusInAirMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.StylusInAirMoveEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusInAirMove>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,574],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,574],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,311],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusInAirMove&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[312,574],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[581,740],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[799,823],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[844,860],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[861,918],"content":"<xref:System.Windows.ContentElement.StylusInAirMoveEvent>","nodes":[]},{"pos":[923,939],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[940,948],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[953,961],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[962,1008],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1019,1116],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusInAirMove>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusInAirMove&gt;</ph>.","pos":[0,97],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusInAirMove>."}]},{"pos":[1126,1255],"content":"Override <xref:System.Windows.ContentElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnStylusInAirMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,129],"source":"Override <xref:System.Windows.ContentElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[712457,713732],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.StylusInAirMove\"></xref> routed event.","nodes":[{"pos":[0,95],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.StylusInAirMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.StylusInAirMove\"></xref> routed event."}],"pos":[714858,714954],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[714965,715505],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus is close enough to the digitizer to be detected, while over this element.","nodes":[{"pos":[0,96],"content":"Occurs when the stylus is close enough to the digitizer to be detected, while over this element.","nodes":[{"content":"Occurs when the stylus is close enough to the digitizer to be detected, while over this element.","pos":[0,96]}]}],"pos":[716600,716697],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusInRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusInRange\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.StylusInRangeEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusInRange>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnStylusInRange%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,566],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusInRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusInRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,566],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,307],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusInRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusInRange&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[308,566],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[573,732],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[789,813],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[834,850],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[851,906],"content":"<xref:System.Windows.ContentElement.StylusInRangeEvent>","nodes":[]},{"pos":[911,927],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[928,936],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[941,949],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[950,996],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1007,1102],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusInRange>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusInRange&gt;</ph>.","pos":[0,95],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusInRange>."}]},{"pos":[1112,1239],"content":"Override <xref:System.Windows.ContentElement.OnStylusInRange%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnStylusInRange%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,127],"source":"Override <xref:System.Windows.ContentElement.OnStylusInRange%2A> to implement class handling for this event in derived classes."}]}],"pos":[716708,717967],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.StylusInRange\"></xref> routed event.","nodes":[{"pos":[0,93],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.StylusInRange\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.StylusInRange\"></xref> routed event."}],"pos":[719079,719173],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[719184,719724],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus leaves the bounds of the element.","nodes":[{"pos":[0,56],"content":"Occurs when the stylus leaves the bounds of the element.","nodes":[{"content":"Occurs when the stylus leaves the bounds of the element.","pos":[0,56]}]}],"pos":[720783,720840],"yaml":true},{"content":"<xref:System.Windows.ContentElement.StylusLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \n  \n Although <xref:System.Windows.ContentElement.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsStylusOver%2A> property value has changed from `true` to `false` on this element.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusLeave\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.StylusLeaveEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   Override <xref:System.Windows.ContentElement.OnStylusLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,407],"content":"<xref:System.Windows.ContentElement.StylusLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> is a <bpt id=\"p1\">[</bpt>Routed Events Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/routed-events-overview.md)</ept> that uses the direct event handling routing strategy.","pos":[0,189],"source":"<xref:System.Windows.ContentElement.StylusLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy."},{"content":"Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised.","pos":[190,309]},{"content":"However, they do enable other aspects of routed event behavior, such as event triggers in styles.","pos":[310,407]}]},{"pos":[414,690],"content":"Although <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.IsStylusOver%2A&gt;</ph> property value has changed from <ph id=\"ph3\">`true`</ph> to <ph id=\"ph4\">`false`</ph> on this element.","source":"Although <xref:System.Windows.ContentElement.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsStylusOver%2A> property value has changed from `true` to `false` on this element."},{"pos":[697,1255],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,558],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,303],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusLeave&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[304,558],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[1262,1421],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[1476,1500],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[1521,1537],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1538,1591],"content":"<xref:System.Windows.ContentElement.StylusLeaveEvent>","nodes":[]},{"pos":[1596,1612],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1613,1619],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[1624,1632],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1633,1679],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1690,1815],"content":"Override <xref:System.Windows.ContentElement.OnStylusLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnStylusLeave%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,125],"source":"Override <xref:System.Windows.ContentElement.OnStylusLeave%2A> to implement class handling for this event in derived classes."}]}],"pos":[720851,722688],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.StylusLeave\"></xref> routed event.","nodes":[{"pos":[0,91],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.StylusLeave\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.StylusLeave\"></xref> routed event."}],"pos":[723808,723900],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[723911,724451],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <xref href=\"System.Windows.ContentElement.StylusInAirMove\"></xref> is raised instead.","nodes":[{"pos":[0,209],"content":"Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <xref href=\"System.Windows.ContentElement.StylusInAirMove\"></xref> is raised instead.","nodes":[{"content":"Occurs when the stylus moves over this element.","pos":[0,47]},{"content":"The stylus must move while on the digitizer to raise this event.","pos":[48,112]},{"content":"Otherwise, <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.StylusInAirMove\"&gt;&lt;/xref&gt;</ph> is raised instead.","pos":[113,209],"source":" Otherwise, <xref href=\"System.Windows.ContentElement.StylusInAirMove\"></xref> is raised instead."}]}],"pos":[725524,725734],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.StylusMoveEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusMove>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnStylusMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,554],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,554],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,301],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusMove&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[302,554],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[561,720],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[774,798],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[819,835],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[836,888],"content":"<xref:System.Windows.ContentElement.StylusMoveEvent>","nodes":[]},{"pos":[893,909],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[910,918],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[923,931],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[932,978],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[989,1081],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusMove>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusMove&gt;</ph>.","pos":[0,92],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusMove>."}]},{"pos":[1091,1215],"content":"Override <xref:System.Windows.ContentElement.OnStylusMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnStylusMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,124],"source":"Override <xref:System.Windows.ContentElement.OnStylusMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[725745,726980],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.StylusMove\"></xref> routed event.","nodes":[{"pos":[0,90],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.StylusMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.StylusMove\"></xref> routed event."}],"pos":[728093,728184],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[728195,728735],"yaml":true,"extradata":"MT"},{"content":"Occurs when the stylus is too far from the digitizer to be detected, while over this element.","nodes":[{"pos":[0,93],"content":"Occurs when the stylus is too far from the digitizer to be detected, while over this element.","nodes":[{"content":"Occurs when the stylus is too far from the digitizer to be detected, while over this element.","pos":[0,93]}]}],"pos":[729821,729915],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusOutOfRange\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.StylusOutOfRangeEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,578],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,578],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,313],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusOutOfRange&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[314,578],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[585,744],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[804,828],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[849,865],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[866,924],"content":"<xref:System.Windows.ContentElement.StylusOutOfRangeEvent>","nodes":[]},{"pos":[929,945],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[946,954],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[959,967],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[968,1014],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[1025,1123],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusOutOfRange&gt;</ph>.","pos":[0,98],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>."}]},{"pos":[1133,1263],"content":"Override <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnStylusOutOfRange%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,130],"source":"Override <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes."}]}],"pos":[729926,731209],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.StylusOutOfRange\"></xref> routed event.","nodes":[{"pos":[0,96],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.StylusOutOfRange\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.StylusOutOfRange\"></xref> routed event."}],"pos":[732342,732439],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[732450,732990],"yaml":true,"extradata":"MT"},{"content":"Occurs when a user performs one of several stylus gestures.","nodes":[{"pos":[0,59],"content":"Occurs when a user performs one of several stylus gestures.","nodes":[{"content":"Occurs when a user performs one of several stylus gestures.","pos":[0,59]}]}],"pos":[734122,734182],"yaml":true},{"content":"For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.  \n  \n This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusSystemGesture\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.StylusSystemGestureEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,90],"content":"For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.","nodes":[{"content":"For more information about stylus gestures, see <ph id=\"ph1\">&lt;xref:System.Windows.Input.SystemGesture&gt;</ph>.","pos":[0,90],"source":"For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>."}]},{"pos":[97,687],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,590],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,319],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusSystemGesture&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[320,590],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[694,853],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[916,940],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[961,977],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[978,1039],"content":"<xref:System.Windows.ContentElement.StylusSystemGestureEvent>","nodes":[]},{"pos":[1044,1060],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[1061,1069],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[1074,1082],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[1083,1142],"content":"<xref:System.Windows.Input.StylusSystemGestureEventHandler>","nodes":[]},{"pos":[1153,1254],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusSystemGesture&gt;</ph>.","pos":[0,101],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>."}]},{"pos":[1264,1397],"content":"Override <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnStylusSystemGesture%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,133],"source":"Override <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes."}]}],"pos":[734193,735612],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.StylusSystemGesture\"></xref> routed event.","nodes":[{"pos":[0,99],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.StylusSystemGesture\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.StylusSystemGesture\"></xref> routed event."}],"pos":[736814,736914],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[736925,737465],"yaml":true,"extradata":"MT"},{"content":"Occurs when the user raises the stylus off the digitizer while it is over this element.","nodes":[{"pos":[0,87],"content":"Occurs when the user raises the stylus off the digitizer while it is over this element.","nodes":[{"content":"Occurs when the user raises the stylus off the digitizer while it is over this element.","pos":[0,87]}]}],"pos":[738512,738600],"yaml":true},{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \n  \n<a name=\"routedEventInfo_StylusUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.StylusUpEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusUp>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnStylusUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,546],"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,546],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,297],"source":"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.StylusUp&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[298,546],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[553,712],"content":"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).","nodes":[{"content":"Touch, mouse, and stylus input exist in a particular relationship.","pos":[0,66]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Input Overview<ept id=\"p1\">](~/docs/framework/wpf/advanced/input-overview.md)</ept>.","pos":[67,159],"source":" For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md)."}]},{"pos":[764,788],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[809,825],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[826,876],"content":"<xref:System.Windows.ContentElement.StylusUpEvent>","nodes":[]},{"pos":[881,897],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[898,906],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[911,919],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[920,966],"content":"<xref:System.Windows.Input.StylusEventHandler>","nodes":[]},{"pos":[977,1067],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusUp>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewStylusUp&gt;</ph>.","pos":[0,90],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusUp>."}]},{"pos":[1077,1199],"content":"Override <xref:System.Windows.ContentElement.OnStylusUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnStylusUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,122],"source":"Override <xref:System.Windows.ContentElement.OnStylusUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[738611,739830],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.StylusUp\"></xref> routed event.","nodes":[{"pos":[0,88],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.StylusUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.StylusUp\"></xref> routed event."}],"pos":[740929,741018],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[741029,741569],"yaml":true,"extradata":"MT"},{"content":"Occurs when this element gets text in a device-independent manner.","nodes":[{"pos":[0,66],"content":"Occurs when this element gets text in a device-independent manner.","nodes":[{"content":"Occurs when this element gets text in a device-independent manner.","pos":[0,66]}]}],"pos":[742633,742700],"yaml":true},{"content":"> [!IMPORTANT]\n>  This event might already be marked as handled by the internal implementations of composited controls. See Remark below.  \n  \n The <xref:System.Windows.ContentElement.TextInput> event may already be marked as handled by the internal implementations of composited controls. For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.ContentElement.TextInput> event is already marked as handled; within its compositing. Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control. If you use <xref:System.Windows.ContentElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results. This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.  \n  \n The <xref:System.Windows.ContentElement.TextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.ContentElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.ContentElement.TextInput>.  \n  \n Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.  \n  \n This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.TextInput> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event and receive the same event data instance.  \n  \n<a name=\"routedEventInfo_TextInput\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.TextInputEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTextInput>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnTextInput%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[2,137],"content":"[!IMPORTANT]\n This event might already be marked as handled by the internal implementations of composited controls. See Remark below.","leadings":["","> "],"nodes":[{"content":" This event might already be marked as handled by the internal implementations of composited controls. See Remark below.","pos":[13,133],"nodes":[{"content":"This event might already be marked as handled by the internal implementations of composited controls.","pos":[1,102]},{"content":"See Remark below.","pos":[103,120]}]}]},{"pos":[144,955],"content":"The <xref:System.Windows.ContentElement.TextInput> event may already be marked as handled by the internal implementations of composited controls. For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.ContentElement.TextInput> event is already marked as handled; within its compositing. Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control. If you use <xref:System.Windows.ContentElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results. This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.","nodes":[{"content":"The <xref:System.Windows.ContentElement.TextInput> event may already be marked as handled by the internal implementations of composited controls. For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.ContentElement.TextInput> event is already marked as handled; within its compositing. Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control. If you use <xref:System.Windows.ContentElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results. This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.","pos":[0,811],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event may already be marked as handled by the internal implementations of composited controls.","pos":[0,145],"source":"The <xref:System.Windows.ContentElement.TextInput> event may already be marked as handled by the internal implementations of composited controls."},{"content":"For example, a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBox&gt;</ph> is a composited control where the <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event is already marked as handled; within its compositing.","pos":[146,340],"source":" For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.ContentElement.TextInput> event is already marked as handled; within its compositing."},{"content":"Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control.","pos":[341,480]},{"content":"If you use <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph> as the event where you attach handlers for text input, you may receive better results.","pos":[481,632],"source":" If you use <xref:System.Windows.ContentElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results."},{"content":"This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.","pos":[633,811]}]}]},{"pos":[962,1306],"content":"The <xref:System.Windows.ContentElement.TextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.ContentElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.ContentElement.TextInput>.","nodes":[{"content":"The <xref:System.Windows.ContentElement.TextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.ContentElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.ContentElement.TextInput>.","pos":[0,344],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event allows a component or application to listen for text input in a device-independent manner.","pos":[0,147],"source":"The <xref:System.Windows.ContentElement.TextInput> event allows a component or application to listen for text input in a device-independent manner."},{"content":"The keyboard is the primary means of <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>, but speech, handwriting, and other input devices can also raise <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph>.","pos":[148,344],"source":" The keyboard is the primary means of <xref:System.Windows.ContentElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.ContentElement.TextInput>."}]}]},{"pos":[1313,1459],"content":"Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.","nodes":[{"content":"Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.","pos":[0,146]}]},{"pos":[1466,2048],"content":"This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.TextInput> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event and receive the same event data instance.","nodes":[{"content":"This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.TextInput> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event and receive the same event data instance.","pos":[0,582],"nodes":[{"content":"This event creates an alias for the <ph id=\"ph1\">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;</ph> attached event for this class, so that <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> is part of the class members list when <ph id=\"ph3\">&lt;xref:System.Windows.ContentElement&gt;</ph> is inherited as a base element.","pos":[0,315],"source":"This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.TextInput> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element."},{"content":"Event handlers that are attached to the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.TextInput&gt;</ph> event are attached to the underlying <ph id=\"ph2\">&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;</ph> attached event and receive the same event data instance.","pos":[316,582],"source":" Event handlers that are attached to the <xref:System.Windows.ContentElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event and receive the same event data instance."}]}]},{"pos":[2101,2125],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[2146,2162],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[2163,2214],"content":"<xref:System.Windows.ContentElement.TextInputEvent>","nodes":[]},{"pos":[2219,2235],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[2236,2244],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[2249,2257],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[2258,2313],"content":"<xref:System.Windows.Input.TextCompositionEventHandler>","nodes":[]},{"pos":[2324,2415],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTextInput>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewTextInput&gt;</ph>.","pos":[0,91],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTextInput>."}]},{"pos":[2425,2548],"content":"Override <xref:System.Windows.ContentElement.OnTextInput%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTextInput%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,123],"source":"Override <xref:System.Windows.ContentElement.OnTextInput%2A> to implement class handling for this event in derived classes."}]}],"pos":[742711,745286],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.TextInput\"></xref> routed event.","nodes":[{"pos":[0,89],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.TextInput\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.TextInput\"></xref> routed event."}],"pos":[746410,746500],"yaml":true},{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \n  \n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"pos":[0,267],"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","nodes":[{"content":"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.","pos":[0,267],"nodes":[{"content":"Routed event identifiers are created when routed events are registered.","pos":[0,71]},{"content":"These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.","pos":[72,214]},{"content":"You can use these identifiers to add class handlers.","pos":[215,267]}]}]},{"pos":[274,535],"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","nodes":[{"content":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.","pos":[0,261],"nodes":[{"content":"For more information about registering routed events, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterRoutedEvent%2A&gt;</ph>.","pos":[0,116],"source":"For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>."},{"content":"For more information about using routed event identifiers to add class handlers, see <ph id=\"ph1\">&lt;xref:System.Windows.EventManager.RegisterClassHandler%2A&gt;</ph>.","pos":[117,261],"source":" For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>."}]}]}],"pos":[746511,747051],"yaml":true,"extradata":"MT"},{"content":"Occurs when a finger touches the screen while the finger is over this element.","nodes":[{"pos":[0,78],"content":"Occurs when a finger touches the screen while the finger is over this element.","nodes":[{"content":"Occurs when a finger touches the screen while the finger is over this element.","pos":[0,78]}]}],"pos":[748094,748173],"yaml":true},{"content":"By default, the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.  \n  \n To cause the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> attached property to `false` for this element.  \n  \n<a name=\"routedEventInfo_TouchDown\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.TouchDownEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchDown>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnTouchDown%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,392],"content":"By default, the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.","nodes":[{"content":"By default, the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.","pos":[0,392],"nodes":[{"content":"By default, the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events do not occur until a finger touches the screen and moves.","pos":[0,185],"source":"By default, the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events do not occur until a finger touches the screen and moves."},{"content":"Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <ph id=\"ph1\">&lt;xref:System.Windows.Input.Stylus&gt;</ph>.","pos":[186,326],"source":" Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>."},{"content":"The press and hold behavior is equivalent to a mouse right-click.","pos":[327,392]}]}]},{"pos":[399,712],"content":"To cause the <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.ContentElement.TouchDown&gt;</ph> events to occur as soon as a finger touches the screen, set the <ph id=\"ph3\">&lt;xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName&gt;</ph> attached property to <ph id=\"ph4\">`false`</ph> for this element.","source":"To cause the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> attached property to `false` for this element."},{"pos":[765,789],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[810,826],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[827,878],"content":"<xref:System.Windows.ContentElement.TouchDownEvent>","nodes":[]},{"pos":[883,899],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[900,908],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[913,921],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[922,1004],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[1015,1106],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchDown>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewTouchDown&gt;</ph>.","pos":[0,91],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchDown>."}]},{"pos":[1116,1239],"content":"Override <xref:System.Windows.ContentElement.OnTouchDown%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchDown%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,123],"source":"Override <xref:System.Windows.ContentElement.OnTouchDown%2A> to implement class handling for this event in derived classes."}]}],"pos":[748184,749443],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.TouchDown\"></xref> routed event.","nodes":[{"pos":[0,89],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.TouchDown\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.TouchDown\"></xref> routed event."}],"pos":[750576,750666],"yaml":true},{"content":"Occurs when a touch moves from outside to inside the bounds of this element.","nodes":[{"pos":[0,76],"content":"Occurs when a touch moves from outside to inside the bounds of this element.","nodes":[{"content":"Occurs when a touch moves from outside to inside the bounds of this element.","pos":[0,76]}]}],"pos":[751737,751814],"yaml":true},{"content":"This event is always raised, whether or not the touch device is captured to this UI element.  \n  \n<a name=\"routedEventInfo_TouchEnter\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.TouchEnterEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   Override <xref:System.Windows.ContentElement.OnTouchEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[0,92],"content":"This event is always raised, whether or not the touch device is captured to this UI element.","nodes":[{"content":"This event is always raised, whether or not the touch device is captured to this UI element.","pos":[0,92]}]},{"pos":[146,170],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[191,207],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[208,260],"content":"<xref:System.Windows.ContentElement.TouchEnterEvent>","nodes":[]},{"pos":[265,281],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[282,288],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[293,301],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[302,384],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[395,519],"content":"Override <xref:System.Windows.ContentElement.OnTouchEnter%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchEnter%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,124],"source":"Override <xref:System.Windows.ContentElement.OnTouchEnter%2A> to implement class handling for this event in derived classes."}]}],"pos":[751825,752360],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.TouchEnter\"></xref> routed event.","nodes":[{"pos":[0,90],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.TouchEnter\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.TouchEnter\"></xref> routed event."}],"pos":[753500,753591],"yaml":true},{"content":"Gets all touch devices that are captured to this element.","nodes":[{"pos":[0,57],"content":"Gets all touch devices that are captured to this element.","nodes":[{"content":"Gets all touch devices that are captured to this element.","pos":[0,57]}]}],"pos":[754696,754754],"yaml":true},{"content":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are captured to this element.","nodes":[{"pos":[0,114],"content":"An enumeration of <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> objects that are captured to this element.","source":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are captured to this element."}],"pos":[754998,755113],"yaml":true},{"content":"Gets all touch devices that are captured to this element or any child elements in its visual tree.","nodes":[{"pos":[0,98],"content":"Gets all touch devices that are captured to this element or any child elements in its visual tree.","nodes":[{"content":"Gets all touch devices that are captured to this element or any child elements in its visual tree.","pos":[0,98]}]}],"pos":[756150,756249],"yaml":true},{"content":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are captured to this element or any child elements in its visual tree.","nodes":[{"pos":[0,155],"content":"An enumeration of <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> objects that are captured to this element or any child elements in its visual tree.","source":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are captured to this element or any child elements in its visual tree."}],"pos":[756499,756655],"yaml":true},{"content":"Gets all touch devices that are over this element.","nodes":[{"pos":[0,50],"content":"Gets all touch devices that are over this element.","nodes":[{"content":"Gets all touch devices that are over this element.","pos":[0,50]}]}],"pos":[757664,757715],"yaml":true},{"content":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are over this element.","nodes":[{"pos":[0,107],"content":"An enumeration of <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> objects that are over this element.","source":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are over this element."}],"pos":[757963,758071],"yaml":true},{"content":"Gets all touch devices that are over this element or any child elements in its visual tree.","nodes":[{"pos":[0,91],"content":"Gets all touch devices that are over this element or any child elements in its visual tree.","nodes":[{"content":"Gets all touch devices that are over this element or any child elements in its visual tree.","pos":[0,91]}]}],"pos":[759052,759144],"yaml":true},{"content":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are over this element or any child elements in its visual tree.","nodes":[{"pos":[0,148],"content":"An enumeration of <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.TouchDevice\"&gt;&lt;/xref&gt;</ph> objects that are over this element or any child elements in its visual tree.","source":"An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are over this element or any child elements in its visual tree."}],"pos":[759384,759533],"yaml":true},{"content":"Occurs when a touch moves from inside to outside the bounds of this element.","nodes":[{"pos":[0,76],"content":"Occurs when a touch moves from inside to outside the bounds of this element.","nodes":[{"content":"Occurs when a touch moves from inside to outside the bounds of this element.","pos":[0,76]}]}],"pos":[760497,760574],"yaml":true},{"content":"<a name=\"routedEventInfo_TouchLeave\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.TouchLeaveEvent>|  \n|Routing strategy|Direct|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   Override <xref:System.Windows.ContentElement.OnTouchLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[48,72],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[93,109],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[110,162],"content":"<xref:System.Windows.ContentElement.TouchLeaveEvent>","nodes":[]},{"pos":[167,183],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[184,190],"content":"Direct","nodes":[{"content":"Direct","pos":[0,6]}]},{"pos":[195,203],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[204,286],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[297,421],"content":"Override <xref:System.Windows.ContentElement.OnTouchLeave%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchLeave%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,124],"source":"Override <xref:System.Windows.ContentElement.OnTouchLeave%2A> to implement class handling for this event in derived classes."}]}],"pos":[760585,761020],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.TouchLeave\"></xref> routed event.","nodes":[{"pos":[0,90],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.TouchLeave\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.TouchLeave\"></xref> routed event."}],"pos":[762160,762251],"yaml":true},{"content":"Occurs when a finger moves on the screen while the finger is over this element.","nodes":[{"pos":[0,79],"content":"Occurs when a finger moves on the screen while the finger is over this element.","nodes":[{"content":"Occurs when a finger moves on the screen while the finger is over this element.","pos":[0,79]}]}],"pos":[763317,763397],"yaml":true},{"content":"<a name=\"routedEventInfo_TouchMove\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.TouchMoveEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchMove>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnTouchMove%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[47,71],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[92,108],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[109,160],"content":"<xref:System.Windows.ContentElement.TouchMoveEvent>","nodes":[]},{"pos":[165,181],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[182,190],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[195,203],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[204,286],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[297,388],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchMove>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewTouchMove&gt;</ph>.","pos":[0,91],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchMove>."}]},{"pos":[398,521],"content":"Override <xref:System.Windows.ContentElement.OnTouchMove%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchMove%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,123],"source":"Override <xref:System.Windows.ContentElement.OnTouchMove%2A> to implement class handling for this event in derived classes."}]}],"pos":[763408,763945],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.TouchMove\"></xref> routed event.","nodes":[{"pos":[0,89],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.TouchMove\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.TouchMove\"></xref> routed event."}],"pos":[765056,765146],"yaml":true},{"content":"Occurs when a finger is raised off of the screen while the finger is over this element.","nodes":[{"pos":[0,87],"content":"Occurs when a finger is raised off of the screen while the finger is over this element.","nodes":[{"content":"Occurs when a finger is raised off of the screen while the finger is over this element.","pos":[0,87]}]}],"pos":[766199,766287],"yaml":true},{"content":"<a name=\"routedEventInfo_TouchUp\"></a>   \n## Routed Event Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.ContentElement.TouchUpEvent>|  \n|Routing strategy|Bubbling|  \n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \n  \n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchUp>.  \n  \n-   Override <xref:System.Windows.ContentElement.OnTouchUp%2A> to implement class handling for this event in derived classes.","nodes":[{"pos":[45,69],"content":"Routed Event Information","linkify":"Routed Event Information","nodes":[{"content":"Routed Event Information","pos":[0,24]}]},{"pos":[90,106],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[107,156],"content":"<xref:System.Windows.ContentElement.TouchUpEvent>","nodes":[]},{"pos":[161,177],"content":"Routing strategy","nodes":[{"content":"Routing strategy","pos":[0,16]}]},{"pos":[178,186],"content":"Bubbling","nodes":[{"content":"Bubbling","pos":[0,8]}]},{"pos":[191,199],"content":"Delegate","nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[200,282],"content":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.EventHandler%601&gt;</ph> of type <ph id=\"ph2\">&lt;xref:System.Windows.Input.TouchEventArgs&gt;</ph>.","pos":[0,82],"source":"<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>."}]},{"pos":[293,382],"content":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchUp>.","nodes":[{"content":"The corresponding tunneling event is <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.PreviewTouchUp&gt;</ph>.","pos":[0,89],"source":"The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchUp>."}]},{"pos":[392,513],"content":"Override <xref:System.Windows.ContentElement.OnTouchUp%2A> to implement class handling for this event in derived classes.","nodes":[{"content":"Override <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnTouchUp%2A&gt;</ph> to implement class handling for this event in derived classes.","pos":[0,121],"source":"Override <xref:System.Windows.ContentElement.OnTouchUp%2A> to implement class handling for this event in derived classes."}]}],"pos":[766298,766827],"yaml":true,"extradata":"MT"},{"content":"Identifies the <xref href=\"System.Windows.ContentElement.TouchUp\"></xref> routed event.","nodes":[{"pos":[0,87],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.ContentElement.TouchUp\"&gt;&lt;/xref&gt;</ph> routed event.","source":"Identifies the <xref href=\"System.Windows.ContentElement.TouchUp\"></xref> routed event."}],"pos":[767946,768034],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.ContentElement\n  commentId: T:System.Windows.ContentElement\n  id: ContentElement\n  children:\n  - System.Windows.ContentElement.#ctor\n  - System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)\n  - System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  - System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)\n  - System.Windows.ContentElement.AllowDrop\n  - System.Windows.ContentElement.AllowDropProperty\n  - System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  - System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.ContentElement.AreAnyTouchesCaptured\n  - System.Windows.ContentElement.AreAnyTouchesCapturedProperty\n  - System.Windows.ContentElement.AreAnyTouchesCapturedWithin\n  - System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty\n  - System.Windows.ContentElement.AreAnyTouchesDirectlyOver\n  - System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty\n  - System.Windows.ContentElement.AreAnyTouchesOver\n  - System.Windows.ContentElement.AreAnyTouchesOverProperty\n  - System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  - System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.ContentElement.CaptureMouse\n  - System.Windows.ContentElement.CaptureStylus\n  - System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)\n  - System.Windows.ContentElement.CommandBindings\n  - System.Windows.ContentElement.DragEnter\n  - System.Windows.ContentElement.DragEnterEvent\n  - System.Windows.ContentElement.DragLeave\n  - System.Windows.ContentElement.DragLeaveEvent\n  - System.Windows.ContentElement.DragOver\n  - System.Windows.ContentElement.DragOverEvent\n  - System.Windows.ContentElement.Drop\n  - System.Windows.ContentElement.DropEvent\n  - System.Windows.ContentElement.Focus\n  - System.Windows.ContentElement.Focusable\n  - System.Windows.ContentElement.FocusableChanged\n  - System.Windows.ContentElement.FocusableProperty\n  - System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  - System.Windows.ContentElement.GetUIParentCore\n  - System.Windows.ContentElement.GiveFeedback\n  - System.Windows.ContentElement.GiveFeedbackEvent\n  - System.Windows.ContentElement.GotFocus\n  - System.Windows.ContentElement.GotFocusEvent\n  - System.Windows.ContentElement.GotKeyboardFocus\n  - System.Windows.ContentElement.GotKeyboardFocusEvent\n  - System.Windows.ContentElement.GotMouseCapture\n  - System.Windows.ContentElement.GotMouseCaptureEvent\n  - System.Windows.ContentElement.GotStylusCapture\n  - System.Windows.ContentElement.GotStylusCaptureEvent\n  - System.Windows.ContentElement.GotTouchCapture\n  - System.Windows.ContentElement.GotTouchCaptureEvent\n  - System.Windows.ContentElement.HasAnimatedProperties\n  - System.Windows.ContentElement.InputBindings\n  - System.Windows.ContentElement.IsEnabled\n  - System.Windows.ContentElement.IsEnabledChanged\n  - System.Windows.ContentElement.IsEnabledCore\n  - System.Windows.ContentElement.IsEnabledProperty\n  - System.Windows.ContentElement.IsFocused\n  - System.Windows.ContentElement.IsFocusedProperty\n  - System.Windows.ContentElement.IsInputMethodEnabled\n  - System.Windows.ContentElement.IsKeyboardFocused\n  - System.Windows.ContentElement.IsKeyboardFocusedChanged\n  - System.Windows.ContentElement.IsKeyboardFocusedProperty\n  - System.Windows.ContentElement.IsKeyboardFocusWithin\n  - System.Windows.ContentElement.IsKeyboardFocusWithinChanged\n  - System.Windows.ContentElement.IsKeyboardFocusWithinProperty\n  - System.Windows.ContentElement.IsMouseCaptured\n  - System.Windows.ContentElement.IsMouseCapturedChanged\n  - System.Windows.ContentElement.IsMouseCapturedProperty\n  - System.Windows.ContentElement.IsMouseCaptureWithin\n  - System.Windows.ContentElement.IsMouseCaptureWithinChanged\n  - System.Windows.ContentElement.IsMouseCaptureWithinProperty\n  - System.Windows.ContentElement.IsMouseDirectlyOver\n  - System.Windows.ContentElement.IsMouseDirectlyOverChanged\n  - System.Windows.ContentElement.IsMouseDirectlyOverProperty\n  - System.Windows.ContentElement.IsMouseOver\n  - System.Windows.ContentElement.IsMouseOverProperty\n  - System.Windows.ContentElement.IsStylusCaptured\n  - System.Windows.ContentElement.IsStylusCapturedChanged\n  - System.Windows.ContentElement.IsStylusCapturedProperty\n  - System.Windows.ContentElement.IsStylusCaptureWithin\n  - System.Windows.ContentElement.IsStylusCaptureWithinChanged\n  - System.Windows.ContentElement.IsStylusCaptureWithinProperty\n  - System.Windows.ContentElement.IsStylusDirectlyOver\n  - System.Windows.ContentElement.IsStylusDirectlyOverChanged\n  - System.Windows.ContentElement.IsStylusDirectlyOverProperty\n  - System.Windows.ContentElement.IsStylusOver\n  - System.Windows.ContentElement.IsStylusOverProperty\n  - System.Windows.ContentElement.KeyDown\n  - System.Windows.ContentElement.KeyDownEvent\n  - System.Windows.ContentElement.KeyUp\n  - System.Windows.ContentElement.KeyUpEvent\n  - System.Windows.ContentElement.LostFocus\n  - System.Windows.ContentElement.LostFocusEvent\n  - System.Windows.ContentElement.LostKeyboardFocus\n  - System.Windows.ContentElement.LostKeyboardFocusEvent\n  - System.Windows.ContentElement.LostMouseCapture\n  - System.Windows.ContentElement.LostMouseCaptureEvent\n  - System.Windows.ContentElement.LostStylusCapture\n  - System.Windows.ContentElement.LostStylusCaptureEvent\n  - System.Windows.ContentElement.LostTouchCapture\n  - System.Windows.ContentElement.LostTouchCaptureEvent\n  - System.Windows.ContentElement.MouseDown\n  - System.Windows.ContentElement.MouseDownEvent\n  - System.Windows.ContentElement.MouseEnter\n  - System.Windows.ContentElement.MouseEnterEvent\n  - System.Windows.ContentElement.MouseLeave\n  - System.Windows.ContentElement.MouseLeaveEvent\n  - System.Windows.ContentElement.MouseLeftButtonDown\n  - System.Windows.ContentElement.MouseLeftButtonDownEvent\n  - System.Windows.ContentElement.MouseLeftButtonUp\n  - System.Windows.ContentElement.MouseLeftButtonUpEvent\n  - System.Windows.ContentElement.MouseMove\n  - System.Windows.ContentElement.MouseMoveEvent\n  - System.Windows.ContentElement.MouseRightButtonDown\n  - System.Windows.ContentElement.MouseRightButtonDownEvent\n  - System.Windows.ContentElement.MouseRightButtonUp\n  - System.Windows.ContentElement.MouseRightButtonUpEvent\n  - System.Windows.ContentElement.MouseUp\n  - System.Windows.ContentElement.MouseUpEvent\n  - System.Windows.ContentElement.MouseWheel\n  - System.Windows.ContentElement.MouseWheelEvent\n  - System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)\n  - System.Windows.ContentElement.OnCreateAutomationPeer\n  - System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)\n  - System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)\n  - System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)\n  - System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)\n  - System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  - System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)\n  - System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)\n  - System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)\n  - System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)\n  - System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)\n  - System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)\n  - System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)\n  - System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)\n  - System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)\n  - System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)\n  - System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)\n  - System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)\n  - System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)\n  - System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  - System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)\n  - System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)\n  - System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)\n  - System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)\n  - System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  - System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)\n  - System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)\n  - System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)\n  - System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  - System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  - System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)\n  - System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  - System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)\n  - System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)\n  - System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)\n  - System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)\n  - System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)\n  - System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  - System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)\n  - System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)\n  - System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)\n  - System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)\n  - System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  - System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)\n  - System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)\n  - System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)\n  - System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)\n  - System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)\n  - System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)\n  - System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)\n  - System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  - System.Windows.ContentElement.PreviewDragEnter\n  - System.Windows.ContentElement.PreviewDragEnterEvent\n  - System.Windows.ContentElement.PreviewDragLeave\n  - System.Windows.ContentElement.PreviewDragLeaveEvent\n  - System.Windows.ContentElement.PreviewDragOver\n  - System.Windows.ContentElement.PreviewDragOverEvent\n  - System.Windows.ContentElement.PreviewDrop\n  - System.Windows.ContentElement.PreviewDropEvent\n  - System.Windows.ContentElement.PreviewGiveFeedback\n  - System.Windows.ContentElement.PreviewGiveFeedbackEvent\n  - System.Windows.ContentElement.PreviewGotKeyboardFocus\n  - System.Windows.ContentElement.PreviewGotKeyboardFocusEvent\n  - System.Windows.ContentElement.PreviewKeyDown\n  - System.Windows.ContentElement.PreviewKeyDownEvent\n  - System.Windows.ContentElement.PreviewKeyUp\n  - System.Windows.ContentElement.PreviewKeyUpEvent\n  - System.Windows.ContentElement.PreviewLostKeyboardFocus\n  - System.Windows.ContentElement.PreviewLostKeyboardFocusEvent\n  - System.Windows.ContentElement.PreviewMouseDown\n  - System.Windows.ContentElement.PreviewMouseDownEvent\n  - System.Windows.ContentElement.PreviewMouseLeftButtonDown\n  - System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent\n  - System.Windows.ContentElement.PreviewMouseLeftButtonUp\n  - System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent\n  - System.Windows.ContentElement.PreviewMouseMove\n  - System.Windows.ContentElement.PreviewMouseMoveEvent\n  - System.Windows.ContentElement.PreviewMouseRightButtonDown\n  - System.Windows.ContentElement.PreviewMouseRightButtonDownEvent\n  - System.Windows.ContentElement.PreviewMouseRightButtonUp\n  - System.Windows.ContentElement.PreviewMouseRightButtonUpEvent\n  - System.Windows.ContentElement.PreviewMouseUp\n  - System.Windows.ContentElement.PreviewMouseUpEvent\n  - System.Windows.ContentElement.PreviewMouseWheel\n  - System.Windows.ContentElement.PreviewMouseWheelEvent\n  - System.Windows.ContentElement.PreviewQueryContinueDrag\n  - System.Windows.ContentElement.PreviewQueryContinueDragEvent\n  - System.Windows.ContentElement.PreviewStylusButtonDown\n  - System.Windows.ContentElement.PreviewStylusButtonDownEvent\n  - System.Windows.ContentElement.PreviewStylusButtonUp\n  - System.Windows.ContentElement.PreviewStylusButtonUpEvent\n  - System.Windows.ContentElement.PreviewStylusDown\n  - System.Windows.ContentElement.PreviewStylusDownEvent\n  - System.Windows.ContentElement.PreviewStylusInAirMove\n  - System.Windows.ContentElement.PreviewStylusInAirMoveEvent\n  - System.Windows.ContentElement.PreviewStylusInRange\n  - System.Windows.ContentElement.PreviewStylusInRangeEvent\n  - System.Windows.ContentElement.PreviewStylusMove\n  - System.Windows.ContentElement.PreviewStylusMoveEvent\n  - System.Windows.ContentElement.PreviewStylusOutOfRange\n  - System.Windows.ContentElement.PreviewStylusOutOfRangeEvent\n  - System.Windows.ContentElement.PreviewStylusSystemGesture\n  - System.Windows.ContentElement.PreviewStylusSystemGestureEvent\n  - System.Windows.ContentElement.PreviewStylusUp\n  - System.Windows.ContentElement.PreviewStylusUpEvent\n  - System.Windows.ContentElement.PreviewTextInput\n  - System.Windows.ContentElement.PreviewTextInputEvent\n  - System.Windows.ContentElement.PreviewTouchDown\n  - System.Windows.ContentElement.PreviewTouchDownEvent\n  - System.Windows.ContentElement.PreviewTouchMove\n  - System.Windows.ContentElement.PreviewTouchMoveEvent\n  - System.Windows.ContentElement.PreviewTouchUp\n  - System.Windows.ContentElement.PreviewTouchUpEvent\n  - System.Windows.ContentElement.QueryContinueDrag\n  - System.Windows.ContentElement.QueryContinueDragEvent\n  - System.Windows.ContentElement.QueryCursor\n  - System.Windows.ContentElement.QueryCursorEvent\n  - System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)\n  - System.Windows.ContentElement.ReleaseAllTouchCaptures\n  - System.Windows.ContentElement.ReleaseMouseCapture\n  - System.Windows.ContentElement.ReleaseStylusCapture\n  - System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)\n  - System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)\n  - System.Windows.ContentElement.ShouldSerializeCommandBindings\n  - System.Windows.ContentElement.ShouldSerializeInputBindings\n  - System.Windows.ContentElement.StylusButtonDown\n  - System.Windows.ContentElement.StylusButtonDownEvent\n  - System.Windows.ContentElement.StylusButtonUp\n  - System.Windows.ContentElement.StylusButtonUpEvent\n  - System.Windows.ContentElement.StylusDown\n  - System.Windows.ContentElement.StylusDownEvent\n  - System.Windows.ContentElement.StylusEnter\n  - System.Windows.ContentElement.StylusEnterEvent\n  - System.Windows.ContentElement.StylusInAirMove\n  - System.Windows.ContentElement.StylusInAirMoveEvent\n  - System.Windows.ContentElement.StylusInRange\n  - System.Windows.ContentElement.StylusInRangeEvent\n  - System.Windows.ContentElement.StylusLeave\n  - System.Windows.ContentElement.StylusLeaveEvent\n  - System.Windows.ContentElement.StylusMove\n  - System.Windows.ContentElement.StylusMoveEvent\n  - System.Windows.ContentElement.StylusOutOfRange\n  - System.Windows.ContentElement.StylusOutOfRangeEvent\n  - System.Windows.ContentElement.StylusSystemGesture\n  - System.Windows.ContentElement.StylusSystemGestureEvent\n  - System.Windows.ContentElement.StylusUp\n  - System.Windows.ContentElement.StylusUpEvent\n  - System.Windows.ContentElement.TextInput\n  - System.Windows.ContentElement.TextInputEvent\n  - System.Windows.ContentElement.TouchDown\n  - System.Windows.ContentElement.TouchDownEvent\n  - System.Windows.ContentElement.TouchEnter\n  - System.Windows.ContentElement.TouchEnterEvent\n  - System.Windows.ContentElement.TouchesCaptured\n  - System.Windows.ContentElement.TouchesCapturedWithin\n  - System.Windows.ContentElement.TouchesDirectlyOver\n  - System.Windows.ContentElement.TouchesOver\n  - System.Windows.ContentElement.TouchLeave\n  - System.Windows.ContentElement.TouchLeaveEvent\n  - System.Windows.ContentElement.TouchMove\n  - System.Windows.ContentElement.TouchMoveEvent\n  - System.Windows.ContentElement.TouchUp\n  - System.Windows.ContentElement.TouchUpEvent\n  langs:\n  - csharp\n  name: ContentElement\n  nameWithType: ContentElement\n  fullName: System.Windows.ContentElement\n  type: Class\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides a WPF core-level base class for content elements. Content elements are designed for flow-style presentation, using an intuitive markup-oriented layout model and a deliberately simple object model.\n  remarks: \"<xref:System.Windows.ContentElement> defines the following common content characteristics:  \\n  \\n-   Input: All <xref:System.Windows.ContentElement> derived classes provide support for basic input capture from keyboard, mouse, drag-and-drop operations, stylus controls, and accelerators.  \\n  \\n-   Focus: All <xref:System.Windows.ContentElement> derived classes are potentially focusable. (However, the default focusable state for the <xref:System.Windows.ContentElement> base class is `false`. For details on how to make a <xref:System.Windows.ContentElement> focusable, see <xref:System.Windows.ContentElement.Focusable%2A>.) In addition, this class contains [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] that you can use for traversing the focus across related elements.  \\n  \\n-   Events: <xref:System.Windows.ContentElement> includes events that are related to input and focus; it also includes events for changes in state. In many cases, the <xref:System.Windows.ContentElement> events are routed events. In some cases, routed events have both tunneling and bubbling routing strategies, raised as separate events in response to the same state or condition. Also, <xref:System.Windows.ContentElement> defines [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] that can raise routed events and that can add or remove handlers to events.  \\n  \\n <xref:System.Windows.ContentElement> shares many common [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] with <xref:System.Windows.UIElement>. These common [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] do not come from a shared class inheritance. But they do share common naming, similar behavior, and similar internal implementation of [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)] in each class. The similarity is because <xref:System.Windows.ContentElement> and <xref:System.Windows.UIElement> are each classes that are an element base, although each has different intentions for its markup object model behavior.  \\n  \\n In particular, <xref:System.Windows.UIElement> descends from <xref:System.Windows.Media.Visual>, which provides the lower-level graphics support for rendering a <xref:System.Windows.ContentElement> to a rectangular region within a composited window, whereas <xref:System.Windows.ContentElement> defers rendering so that concepts more common to document scenarios, such as flow and wrapping, are more easily supported. These two related classes also implement the common interfaces <xref:System.Windows.IInputElement> and <xref:System.Windows.Media.Animation.IAnimatable>.\"\n  syntax:\n    content: 'public class ContentElement : System.Windows.DependencyObject, System.Windows.IInputElement, System.Windows.Media.Animation.IAnimatable'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.DependencyObject\n  derivedClasses:\n  - System.Windows.FrameworkContentElement\n  implements:\n  - System.Windows.IInputElement\n  - System.Windows.Media.Animation.IAnimatable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.DependencyObjectType\n  - System.Windows.DependencyObject.Equals(System.Object)\n  - System.Windows.DependencyObject.GetHashCode\n  - System.Windows.DependencyObject.GetLocalValueEnumerator\n  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.IsSealed\n  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.#ctor\n  commentId: M:System.Windows.ContentElement.#ctor\n  id: '#ctor'\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: ContentElement()\n  nameWithType: ContentElement.ContentElement()\n  fullName: ContentElement.ContentElement()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.ContentElement\"></xref> class.\n  syntax:\n    content: public ContentElement ();\n    parameters: []\n  overload: System.Windows.ContentElement.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)\n  commentId: M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)\n  id: AddHandler(System.Windows.RoutedEvent,System.Delegate)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: AddHandler(RoutedEvent, Delegate)\n  nameWithType: ContentElement.AddHandler(RoutedEvent, Delegate)\n  fullName: ContentElement.AddHandler(RoutedEvent, Delegate)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element.\n  remarks: \"You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.  \\n  \\n You typically use this method to provide the implementation of the \\\"add\\\" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.\"\n  syntax:\n    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);\n    parameters:\n    - id: routedEvent\n      type: System.Windows.RoutedEvent\n      description: An identifier for the routed event to be handled.\n    - id: handler\n      type: System.Delegate\n      description: A reference to the handler implementation.\n  overload: System.Windows.ContentElement.AddHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  commentId: M:System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  id: AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: AddHandler(RoutedEvent, Delegate, Boolean)\n  nameWithType: ContentElement.AddHandler(RoutedEvent, Delegate, Boolean)\n  fullName: ContentElement.AddHandler(RoutedEvent, Delegate, Boolean)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Adds a routed event handler for a specified routed event, adding the handler to the handler collection on the current element. Specify <code>handledEventsToo</code> as `true` to have the provided handler be invoked for routed event that had already been marked as handled by another element along the event route.\n  remarks: \"Processing low-level input events in a practical way is a complex task. Many controls implement behavior where a certain event is marked as handled, and is replaced by another more intuitive event. Generally, a control will only mark a platform input event as handled if there is some design intention for doing so. In certain scenarios, those design intentions might not be what your particular handling of the input event requires. It is for these scenarios that registering handlers with `handledEventsToo` as `true` is appropriate. But you should not do this routinely. Invoking handlers in response to all events even if handled will complicate your own application event processing logic. You may see a decrease in performance if the handler logic is substantial. You should reserve the use of attaching handlers for already-handled events for situations where you have already discovered during the development process that certain controls are handling events that you still want to handle with application logic.  \\n  \\n Another technique for avoiding the class handling behavior of certain event-control combinations is to use that event's preview alternative. For example, if <xref:System.Windows.ContentElement.MouseLeftButtonDown> is marked handled by class handling, you might be able to add handlers for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> instead.  \\n  \\n You can add the same handler for the same event multiple times without raising an exception. However, the handler is actually invoked multiple times when the event is handled. Therefore, consider how this behavior might have side effects that should be accounted for in your handler implementation.  \\n  \\n You typically use this method to provide the implementation of the \\\"add\\\" accessor for the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] event access pattern of a custom routed event.\"\n  example:\n  - \"The following example implements a handler invoked on the <xref:System.Windows.FrameworkElement.Initialized> event on a page that attaches a defined handler to one of the named elements on the page using `handledEventsToo` `true`. This handler would be invoked even if another element along the route marked the shared event data as handled before reaching the handling element in the route.  \\n  \\n [!code-csharp[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#addhandlerhandledtoo)]\\n [!code-vb[EventOvwSupport#AddHandlerHandledToo](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#addhandlerhandledtoo)]\"\n  syntax:\n    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);\n    parameters:\n    - id: routedEvent\n      type: System.Windows.RoutedEvent\n      description: An identifier for the.routed event to be handled.\n    - id: handler\n      type: System.Delegate\n      description: A reference to the handler implementation.\n    - id: handledEventsToo\n      type: System.Boolean\n      description: \"`true` to register the handler such that it is invoked even when the routed event is marked handled in its event data; `false` to register the handler with the default condition that it will not be invoked if the routed event is already marked handled.  \\n  \\n The default is `false`.  \\n  \\n Do not routinely ask to rehandle a routed event.\"\n  overload: System.Windows.ContentElement.AddHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)\n  commentId: M:System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)\n  id: AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: AddToEventRoute(EventRoute, RoutedEventArgs)\n  nameWithType: ContentElement.AddToEventRoute(EventRoute, RoutedEventArgs)\n  fullName: ContentElement.AddToEventRoute(EventRoute, RoutedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Adds handlers to the specified <xref href=\"System.Windows.EventRoute\"></xref> for the current <xref href=\"System.Windows.ContentElement\"></xref> event handler collection.\n  remarks: Use this method for content host elements (regardless whether they implement <xref:System.Windows.IContentHost>) in order to add handlers for the content host child elements to the host <xref:System.Windows.EventRoute>.\n  syntax:\n    content: public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);\n    parameters:\n    - id: route\n      type: System.Windows.EventRoute\n      description: The event route that handlers are added to.\n    - id: e\n      type: System.Windows.RoutedEventArgs\n      description: The event data that is used to add the handlers. This method uses the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of the arguments to create the handlers.\n  overload: System.Windows.ContentElement.AddToEventRoute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.AllowDrop\n  commentId: P:System.Windows.ContentElement.AllowDrop\n  id: AllowDrop\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: AllowDrop\n  nameWithType: ContentElement.AllowDrop\n  fullName: ContentElement.AllowDrop\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether this element can be used as the target of a drag-and-drop operation.\n  remarks: \"Drag-and-drop operations are not enabled by default, and must be enabled deliberately by setting <xref:System.Windows.ContentElement.AllowDrop%2A> to  `true`. Beyond this basic setting, drag-and-drop behavior is entirely implementation specific and is not defined by <xref:System.Windows.ContentElement> or any other base element class. Certain controls, for example, <xref:System.Windows.Controls.RichTextBox>, do have a default behavior, but no <xref:System.Windows.ContentElement> derived classes have such a behavior. For more information on drag and drop, see [Drag and Drop Overview](~/docs/framework/wpf/advanced/drag-and-drop-overview.md).  \\n  \\n <xref:System.Windows.FrameworkContentElement> overrides the metadata for this dependency property in its implementation. Specifically, <xref:System.Windows.FrameworkContentElement> designates that this property allows property value inheritance (<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> is `true` in metadata). Property value inheritance in this context means that if there are child elements with no other value for <xref:System.Windows.ContentElement.AllowDrop%2A> assigned through local values or styles, the value of the nearest parent element with this value assigned (again, either in styles, by default values, or a local value), then the value from that parent element is assigned to all unassigned child elements by the property system. This means that you can specify whether to allow drop operations at the root element and then propagate the value to all <xref:System.Windows.FrameworkContentElement> child elements that have not specifically assigned it a value of `false`.  \\n  \\n<a name=\\\"dependencyPropertyInfo_AllowDrop\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.AllowDropProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example sets <xref:System.Windows.ContentElement.AllowDrop%2A> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  \\n  \\n [!code-xml[ContentElementsSmorgasbord#AllowDrop](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#allowdrop)]\"\n  syntax:\n    content: public bool AllowDrop { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if this element can be used as the target of a drag-and-drop operation; otherwise, `false`. The default value is `false`.'\n  overload: System.Windows.ContentElement.AllowDrop*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.AllowDropProperty\n  commentId: F:System.Windows.ContentElement.AllowDropProperty\n  id: AllowDropProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: AllowDropProperty\n  nameWithType: ContentElement.AllowDropProperty\n  fullName: ContentElement.AllowDropProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.AllowDrop\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty AllowDropProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  commentId: M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: ApplyAnimationClock(DependencyProperty, AnimationClock)\n  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty, AnimationClock)\n  fullName: ContentElement.ApplyAnimationClock(DependencyProperty, AnimationClock)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Applies an animation to a specified dependency property on this element. Any existing animations are stopped and replaced with the new animation.\n  remarks: To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.\n  syntax:\n    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The identifier for the property to animate.\n    - id: clock\n      type: System.Windows.Media.Animation.AnimationClock\n      description: The animation clock that controls and declares the animation.\n  overload: System.Windows.ContentElement.ApplyAnimationClock*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  commentId: M:System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  id: ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n  fullName: ContentElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Applies an animation to a specified dependency property on this element, with the ability to specify what happens if the property already has a running animation.\n  remarks: To remove an animation from a property, specify the identifier for that property as `dp` and specify `clock` as `null`. This removes the animation and the animated property is set to its base value. However, the originally associated animation clock is not stopped. Any other animations assigned to that clock will continue to run.\n  syntax:\n    content: public void ApplyAnimationClock (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationClock clock, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The property to animate.\n    - id: clock\n      type: System.Windows.Media.Animation.AnimationClock\n      description: The animation clock that controls and declares the animation.\n    - id: handoffBehavior\n      type: System.Windows.Media.Animation.HandoffBehavior\n      description: A value of the enumeration. The default is <xref href=\"System.Windows.Media.Animation.HandoffBehavior.SnapshotAndReplace\"></xref>, which will stop any existing animation and replace with the new one.\n  overload: System.Windows.ContentElement.ApplyAnimationClock*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.AreAnyTouchesCaptured\n  commentId: P:System.Windows.ContentElement.AreAnyTouchesCaptured\n  id: AreAnyTouchesCaptured\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: AreAnyTouchesCaptured\n  nameWithType: ContentElement.AreAnyTouchesCaptured\n  fullName: ContentElement.AreAnyTouchesCaptured\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether at least one touch is captured to this element.\n  syntax:\n    content: public bool AreAnyTouchesCaptured { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if at least one touch is captured to this element; otherwise, `false`.'\n  overload: System.Windows.ContentElement.AreAnyTouchesCaptured*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.AreAnyTouchesCapturedProperty\n  commentId: F:System.Windows.ContentElement.AreAnyTouchesCapturedProperty\n  id: AreAnyTouchesCapturedProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: AreAnyTouchesCapturedProperty\n  nameWithType: ContentElement.AreAnyTouchesCapturedProperty\n  fullName: ContentElement.AreAnyTouchesCapturedProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.AreAnyTouchesCaptured\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithin\n  commentId: P:System.Windows.ContentElement.AreAnyTouchesCapturedWithin\n  id: AreAnyTouchesCapturedWithin\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: AreAnyTouchesCapturedWithin\n  nameWithType: ContentElement.AreAnyTouchesCapturedWithin\n  fullName: ContentElement.AreAnyTouchesCapturedWithin\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether at least one touch is captured to this element or to any child elements in its visual tree.\n  syntax:\n    content: public bool AreAnyTouchesCapturedWithin { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if at least one touch is captured to this element or any child elements in its visual tree; otherwise, `false`.'\n  overload: System.Windows.ContentElement.AreAnyTouchesCapturedWithin*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty\n  commentId: F:System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty\n  id: AreAnyTouchesCapturedWithinProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: AreAnyTouchesCapturedWithinProperty\n  nameWithType: ContentElement.AreAnyTouchesCapturedWithinProperty\n  fullName: ContentElement.AreAnyTouchesCapturedWithinProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.AreAnyTouchesCapturedWithin\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOver\n  commentId: P:System.Windows.ContentElement.AreAnyTouchesDirectlyOver\n  id: AreAnyTouchesDirectlyOver\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: AreAnyTouchesDirectlyOver\n  nameWithType: ContentElement.AreAnyTouchesDirectlyOver\n  fullName: ContentElement.AreAnyTouchesDirectlyOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether at least one touch is pressed over this element.\n  syntax:\n    content: public bool AreAnyTouchesDirectlyOver { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if at least one touch is pressed over this element; otherwise, `false`.'\n  overload: System.Windows.ContentElement.AreAnyTouchesDirectlyOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty\n  commentId: F:System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty\n  id: AreAnyTouchesDirectlyOverProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: AreAnyTouchesDirectlyOverProperty\n  nameWithType: ContentElement.AreAnyTouchesDirectlyOverProperty\n  fullName: ContentElement.AreAnyTouchesDirectlyOverProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.AreAnyTouchesDirectlyOver\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.AreAnyTouchesOver\n  commentId: P:System.Windows.ContentElement.AreAnyTouchesOver\n  id: AreAnyTouchesOver\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: AreAnyTouchesOver\n  nameWithType: ContentElement.AreAnyTouchesOver\n  fullName: ContentElement.AreAnyTouchesOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether at least one touch is pressed over this element or any child elements in its visual tree.\n  syntax:\n    content: public bool AreAnyTouchesOver { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if at least one touch is pressed over this element or any child elements in its visual tree; otherwise, `false`.'\n  overload: System.Windows.ContentElement.AreAnyTouchesOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.AreAnyTouchesOverProperty\n  commentId: F:System.Windows.ContentElement.AreAnyTouchesOverProperty\n  id: AreAnyTouchesOverProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: AreAnyTouchesOverProperty\n  nameWithType: ContentElement.AreAnyTouchesOverProperty\n  fullName: ContentElement.AreAnyTouchesOverProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.AreAnyTouchesOver\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  commentId: M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: BeginAnimation(DependencyProperty, AnimationTimeline)\n  nameWithType: ContentElement.BeginAnimation(DependencyProperty, AnimationTimeline)\n  fullName: ContentElement.BeginAnimation(DependencyProperty, AnimationTimeline)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Starts an animation for a specified animated property on this element.\n  remarks: \"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.  \\n  \\n If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.  \\n  \\n If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.\"\n  syntax:\n    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The property to animate, which is specified as a dependency property identifier.\n    - id: animation\n      type: System.Windows.Media.Animation.AnimationTimeline\n      description: The timeline of the animation to start.\n  overload: System.Windows.ContentElement.BeginAnimation*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  commentId: M:System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  id: BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n  nameWithType: ContentElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n  fullName: ContentElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Starts a specific animation for a specified animated property on this element, with the option of specifying what happens if the property already has a running animation.\n  remarks: \"When you check whether a property is animated, note that the animation will begin and be considered animated when the first frame beyond the non-animated starting point is rendered.  \\n  \\n If the <xref:System.Windows.Media.Animation.Timeline.BeginTime%2A> for `animation` is `null`, then any current animations are removed and the current value of the property is held.  \\n  \\n If the entire `animation` value is `null`, all animations are removed from the property and the property value reverts to its base value. However, the originally associated animation timeline is not stopped. Any other animations assigned to that timeline will continue to run.\"\n  syntax:\n    content: public void BeginAnimation (System.Windows.DependencyProperty dp, System.Windows.Media.Animation.AnimationTimeline animation, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The property to animate, which is specified as the dependency property identifier.\n    - id: animation\n      type: System.Windows.Media.Animation.AnimationTimeline\n      description: The timeline of the animation to be applied.\n    - id: handoffBehavior\n      type: System.Windows.Media.Animation.HandoffBehavior\n      description: A value of the enumeration that specifies how the new animation interacts with any current (running) animations that are already affecting the property value.\n  overload: System.Windows.ContentElement.BeginAnimation*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.CaptureMouse\n  commentId: M:System.Windows.ContentElement.CaptureMouse\n  id: CaptureMouse\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: CaptureMouse()\n  nameWithType: ContentElement.CaptureMouse()\n  fullName: ContentElement.CaptureMouse()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Attempts to force capture of the mouse to this element.\n  remarks: \"To be captured, an element must be enabled. Check whether <xref:System.Windows.ContentElement.IsEnabled%2A> is `true` before you call <xref:System.Windows.ContentElement.CaptureMouse%2A>.  \\n  \\n If calling <xref:System.Windows.ContentElement.CaptureMouse%2A> returns `true`, then <xref:System.Windows.ContentElement.IsMouseCaptured%2A> is also `true`.  \\n  \\n If calling <xref:System.Windows.ContentElement.CaptureMouse%2A> returns `true`, then the <xref:System.Windows.ContentElement.GotMouseCapture> and <xref:System.Windows.ContentElement.IsMouseCapturedChanged> events are raised, with <xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> in the event data reported as the element where the <xref:System.Windows.ContentElement.CaptureMouse%2A> method is called. If you force capture, you might interfere with existing captures—especially with captures that relate to drag-and-drop with the mouse.  \\n  \\n To clear mouse capture from all elements, call <xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName> with the `element` parameter provided as `null`.\"\n  example:\n  - \"The following example captures the mouse or releases capture, based on whether the mouse is already captured by the element. Note that this example casts the prospective capture target element to the <xref:System.Windows.IInputElement> interface, and is thus initially calling the <xref:System.Windows.IInputElement.CaptureMouse%2A?displayProperty=fullName> method. Casting to <xref:System.Windows.IInputElement> is a technique that is useful if you are unsure whether the element you want to have capture the mouse is a <xref:System.Windows.UIElement> or a <xref:System.Windows.ContentElement>. The interface cast and the interface method call then calls the appropriate type-specific CaptureMouse implementation internally without requiring a trial cast to either <xref:System.Windows.UIElement> or <xref:System.Windows.ContentElement>. This same casting technique works for other members that <xref:System.Windows.IInputElement> defines, for instance many of the input-related events, and other input-related methods.  \\n  \\n [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]\\n [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]\"\n  syntax:\n    content: public bool CaptureMouse ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the mouse is successfully captured; otherwise, `false`.'\n  overload: System.Windows.ContentElement.CaptureMouse*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.CaptureStylus\n  commentId: M:System.Windows.ContentElement.CaptureStylus\n  id: CaptureStylus\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: CaptureStylus()\n  nameWithType: ContentElement.CaptureStylus()\n  fullName: ContentElement.CaptureStylus()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Attempts to force capture of the stylus to this element.\n  remarks: \"The default implementation based on the underlying default stylus device always returns `true`. However, if you are extending the input devices that provide the device implementation for the input system, it is possible to create a system with an alternative stylus device implementation that might return different results.  \\n  \\n When an element captures the stylus, it receives stylus input even if the stylus is outside its bounds. The stylus is typically captured only during drag-and-drop operations.  \\n  \\n Calling this method calls an underlying static <xref:System.Windows.Input.Stylus> method <xref:System.Windows.Input.Stylus.Capture%2A>. The actual capture behavior is implemented by the active stylus device implementation.  \\n  \\n To be captured, an element must be enabled. Check whether <xref:System.Windows.ContentElement.IsEnabled%2A> is `true` return before you call <xref:System.Windows.ContentElement.CaptureStylus%2A>.  \\n  \\n If calling <xref:System.Windows.ContentElement.CaptureStylus%2A> returns `true`, <xref:System.Windows.ContentElement.IsStylusCaptured%2A> is also `true`.\"\n  syntax:\n    content: public bool CaptureStylus ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the stylus is successfully captured; otherwise, `false`.'\n  overload: System.Windows.ContentElement.CaptureStylus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)\n  commentId: M:System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)\n  id: CaptureTouch(System.Windows.Input.TouchDevice)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: CaptureTouch(TouchDevice)\n  nameWithType: ContentElement.CaptureTouch(TouchDevice)\n  fullName: ContentElement.CaptureTouch(TouchDevice)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Attempts to force capture of a touch to this element.\n  remarks: \"<xref:System.Windows.ContentElement.CaptureTouch%2A> will return `false` if the <xref:System.Windows.Input.TouchDevice> is currently captured to another element.  \\n  \\n If <xref:System.Windows.ContentElement.CaptureTouch%2A> returns `true`, then the <xref:System.Windows.ContentElement.GotTouchCapture> event is raised.  \\n  \\n To release capture of a single touch from this element, use the <xref:System.Windows.ContentElement.ReleaseTouchCapture%2A> method and specify the touch device to release. To release all touches from this element, use the <xref:System.Windows.ContentElement.ReleaseAllTouchCaptures%2A> method.\"\n  syntax:\n    content: public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);\n    parameters:\n    - id: touchDevice\n      type: System.Windows.Input.TouchDevice\n      description: The device to capture.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified touch is captured to this element; otherwise, `false`.'\n  overload: System.Windows.ContentElement.CaptureTouch*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>touchDevice</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.CommandBindings\n  commentId: P:System.Windows.ContentElement.CommandBindings\n  id: CommandBindings\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: CommandBindings\n  nameWithType: ContentElement.CommandBindings\n  fullName: ContentElement.CommandBindings\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a collection of <xref href=\"System.Windows.Input.CommandBinding\"></xref> objects that are associated with this element.\n  remarks: \"A <xref:System.Windows.Input.CommandBinding> enables command handling of a specific command for this element and declares the linkage between a command, its events, and the handlers that are attached by this element.  \\n  \\n Another typical way to populate the <xref:System.Windows.ContentElement.CommandBindings%2A> collection is to use <xref:System.Windows.Input.CommandManager> methods programmatically.  \\n  \\n<a name=\\\"xamlPropertyElementUsage_CommandBindings\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<object>  \\n  <object.CommandBindings>  \\n    oneOrMoreCommandBindings  </object.CommandBindings>  \\n</object>  \\n```  \\n  \\n<a name=\\\"xamlValues_CommandBindings\\\"></a>   \\n## XAML Values  \\n *oneOrMoreCommandBindings*  \\n One or more <xref:System.Windows.Input.CommandBinding> elements. Each of these should have a <xref:System.Windows.Input.CommandBinding.Command%2A> attribute set to a known command, and attributes set for the <xref:System.Windows.Input.CommandBinding.CanExecute> and <xref:System.Windows.Input.CommandBinding.Executed> handler implementations. For more information see <xref:System.Windows.Input.CommandBinding>.\"\n  syntax:\n    content: public System.Windows.Input.CommandBindingCollection CommandBindings { get; }\n    return:\n      type: System.Windows.Input.CommandBindingCollection\n      description: The collection of all <xref href=\"System.Windows.Input.CommandBinding\"></xref> objects.\n  overload: System.Windows.ContentElement.CommandBindings*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.DragEnter\n  commentId: E:System.Windows.ContentElement.DragEnter\n  id: DragEnter\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: DragEnter\n  nameWithType: ContentElement.DragEnter\n  fullName: ContentElement.DragEnter\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drag event with this element as the drag target.\n  remarks: \"This event creates an alias for the <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.DragEnter?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.DragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_DragEnter\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.DragEnterEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewDragEnter>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnDragEnter%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler DragEnter;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.DragEnterEvent\n  commentId: F:System.Windows.ContentElement.DragEnterEvent\n  id: DragEnterEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: DragEnterEvent\n  nameWithType: ContentElement.DragEnterEvent\n  fullName: ContentElement.DragEnterEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.DragEnter\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent DragEnterEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.DragLeave\n  commentId: E:System.Windows.ContentElement.DragLeave\n  id: DragLeave\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: DragLeave\n  nameWithType: ContentElement.DragLeave\n  fullName: ContentElement.DragLeave\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drag event with this element as the drag origin.\n  remarks: \"This event creates an alias for the <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.DragLeave?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.DragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_DragLeave\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.DragLeaveEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragLeave>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnDragLeave%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler DragLeave;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.DragLeaveEvent\n  commentId: F:System.Windows.ContentElement.DragLeaveEvent\n  id: DragLeaveEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: DragLeaveEvent\n  nameWithType: ContentElement.DragLeaveEvent\n  fullName: ContentElement.DragLeaveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.DragLeave\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent DragLeaveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.DragOver\n  commentId: E:System.Windows.ContentElement.DragOver\n  id: DragOver\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: DragOver\n  nameWithType: ContentElement.DragOver\n  fullName: ContentElement.DragOver\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drag event with this element as the potential drop target.\n  remarks: \"This event occurs even if the drag originates in the element bounds. If the drag starts outside the bounds and then moves inside, this event is also raised, as well as <xref:System.Windows.ContentElement.DragEnter> and related preview events.  \\n  \\n This event creates an alias for the <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.DragOver?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.DragOver> event are attached to the underlying <xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_DragOver\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.DragOverEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.DragDrop.PreviewDragOver>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnDragOver%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler DragOver;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.DragOverEvent\n  commentId: F:System.Windows.ContentElement.DragOverEvent\n  id: DragOverEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: DragOverEvent\n  nameWithType: ContentElement.DragOverEvent\n  fullName: ContentElement.DragOverEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.DragOver\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent DragOverEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.Drop\n  commentId: E:System.Windows.ContentElement.Drop\n  id: Drop\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: Drop\n  nameWithType: ContentElement.Drop\n  fullName: ContentElement.Drop\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drop event with this element as the drop target.\n  remarks: \"This event creates an alias for the <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.Drop?displayProperty=fullName> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.Drop> event are attached to the underlying <xref:System.Windows.DragDrop.Drop?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_Drop\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.DropEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewDrop>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnDrop%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler Drop;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.DropEvent\n  commentId: F:System.Windows.ContentElement.DropEvent\n  id: DropEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: DropEvent\n  nameWithType: ContentElement.DropEvent\n  fullName: ContentElement.DropEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.Drop\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent DropEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.Focus\n  commentId: M:System.Windows.ContentElement.Focus\n  id: Focus\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: Focus()\n  nameWithType: ContentElement.Focus()\n  fullName: ContentElement.Focus()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Attempts to set focus to this element.\n  remarks: \"To be focusable, <xref:System.Windows.ContentElement.Focusable%2A> and <xref:System.Windows.ContentElement.IsEnabled%2A> must both be `true`. Note that nearly all <xref:System.Windows.ContentElement> derived classes are not <xref:System.Windows.ContentElement.Focusable%2A> by default.  \\n  \\n Even if an element is focusable and enabled, event handling within a specific tree, (such as for a composite control) might respond to the preview focus events by not allowing focus there, thus this method would return `false`.  \\n  \\n Focus in general is governed by two separate concepts: keyboard focus and logical focus, which are not always identical. This method sets the logical focus. There is no programmatic means to set keyboard focus specifically; keyboard focus is determined by user input. For more information, see [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md) and [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n If calling <xref:System.Windows.ContentElement.Focus%2A> returns `true`, <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> and <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> are also `true`.  \\n  \\n If the related properties are not already `true`, when you call <xref:System.Windows.ContentElement.Focus%2A>, one or more of the following events are raised in the following order: <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>, <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> (source is the new focus target), <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged>, <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged>, <xref:System.Windows.ContentElement.LostKeyboardFocus>, <xref:System.Windows.ContentElement.GotKeyboardFocus> (source is the new focus target).\"\n  example:\n  - \"The following example is a page-loaded event handler that finds a specified named paragraph in the document and sets focus to it. Paragraphs are not focusable by default; this particular paragraph had a style applied (not shown) that used a style <xref:System.Windows.Setter> to make it focusable.  \\n  \\n [!code-csharp[ContentElementsSmorgasbord#Focus](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#focus)]\\n [!code-vb[ContentElementsSmorgasbord#Focus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#focus)]\"\n  syntax:\n    content: public bool Focus ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if keyboard focus could be set to this element; `false` if this method call did not force focus.'\n  overload: System.Windows.ContentElement.Focus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.Focusable\n  commentId: P:System.Windows.ContentElement.Focusable\n  id: Focusable\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: Focusable\n  nameWithType: ContentElement.Focusable\n  fullName: ContentElement.Focusable\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether the element can receive focus.\n  remarks: \"Only the focused element receives keyboard input.  \\n  \\n Certain derived classes might override metadata for this dependency property such that the derived class is focusable by default.  \\n  \\n When inherited by <xref:System.Windows.Documents.Hyperlink> or its derived classes, <xref:System.Windows.Documents.Hyperlink> overrides the metadata for this dependency property and redefines the default value of this property to be `true`.  \\n  \\n<a name=\\\"dependencyPropertyInfo_Focusable\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.FocusableProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example creates a style that makes a <xref:System.Windows.Documents.Paragraph> focusable by default and gives it a visual behavior when it receives focus.  \\n  \\n [!code-xml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]\"\n  syntax:\n    content: public bool Focusable { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the element is focusable; otherwise `false`. The default is `false`.'\n  overload: System.Windows.ContentElement.Focusable*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.FocusableChanged\n  commentId: E:System.Windows.ContentElement.FocusableChanged\n  id: FocusableChanged\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: FocusableChanged\n  nameWithType: ContentElement.FocusableChanged\n  fullName: ContentElement.FocusableChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.ContentElement.Focusable\"></xref> property changes.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.FocusableProperty\n  commentId: F:System.Windows.ContentElement.FocusableProperty\n  id: FocusableProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: FocusableProperty\n  nameWithType: ContentElement.FocusableProperty\n  fullName: ContentElement.FocusableProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.Focusable\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty FocusableProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  commentId: M:System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  id: GetAnimationBaseValue(System.Windows.DependencyProperty)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: GetAnimationBaseValue(DependencyProperty)\n  nameWithType: ContentElement.GetAnimationBaseValue(DependencyProperty)\n  fullName: ContentElement.GetAnimationBaseValue(DependencyProperty)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Returns the base property value for the specified property on this element, disregarding any possible animated value from a running or stopped animation.\n  remarks: If no animations are attached to the property, then the <xref:System.Windows.ContentElement.GetAnimationBaseValue%2A> return value is always identical to the <xref:System.Windows.DependencyObject.GetValue%2A> return value. If there are animations attached, then all possible animation derived values including the start and stop values are ignored, and the property value is determined based on all other possible inputs. For more information, see [Dependency Property Value Precedence](~/docs/framework/wpf/advanced/dependency-property-value-precedence.md).\n  syntax:\n    content: public object GetAnimationBaseValue (System.Windows.DependencyProperty dp);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The.dependency property to check.\n    return:\n      type: System.Object\n      description: The property value as if no animations are attached to the specified dependency property.\n  overload: System.Windows.ContentElement.GetAnimationBaseValue*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.GetUIParentCore\n  commentId: M:System.Windows.ContentElement.GetUIParentCore\n  id: GetUIParentCore\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: GetUIParentCore()\n  nameWithType: ContentElement.GetUIParentCore()\n  fullName: ContentElement.GetUIParentCore()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: When overridden in a derived class, returns an alternative [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] parent for this element if no visual parent exists.\n  remarks: \"The default virtual implementation of this method returns `null`. <xref:System.Windows.FrameworkContentElement> provides a practical implementation.  \\n  \\n Alternative parents are used for event routing, in cases where an element creates an alternative parent structure so that its events are routed in a way that diverges from the standard pattern of routing up the visual tree to the standard parent, or downward in the preview routing strategy.\"\n  syntax:\n    content: protected virtual System.Windows.DependencyObject GetUIParentCore ();\n    parameters: []\n    return:\n      type: System.Windows.DependencyObject\n      description: An object, if implementation of a derived class has an alternate parent connection to report.\n  overload: System.Windows.ContentElement.GetUIParentCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.GiveFeedback\n  commentId: E:System.Windows.ContentElement.GiveFeedback\n  id: GiveFeedback\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: GiveFeedback\n  nameWithType: ContentElement.GiveFeedback\n  fullName: ContentElement.GiveFeedback\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drag-and-drop event that involves this element.\n  remarks: \"The <xref:System.Windows.ContentElement.GiveFeedback> event allows the source of a drag event to modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation. The visual feedback reinforces that a drag-and-drop operation is in process.  \\n  \\n This event creates an alias for the <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.GiveFeedback> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_GiveFeedback\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.GiveFeedbackEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewGiveFeedback>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnGiveFeedback%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.GiveFeedbackEventHandler GiveFeedback;\n    return:\n      type: System.Windows.GiveFeedbackEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.GiveFeedbackEvent\n  commentId: F:System.Windows.ContentElement.GiveFeedbackEvent\n  id: GiveFeedbackEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: GiveFeedbackEvent\n  nameWithType: ContentElement.GiveFeedbackEvent\n  fullName: ContentElement.GiveFeedbackEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.GiveFeedback\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.GotFocus\n  commentId: E:System.Windows.ContentElement.GotFocus\n  id: GotFocus\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: GotFocus\n  nameWithType: ContentElement.GotFocus\n  fullName: ContentElement.GotFocus\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element gets logical focus.\n  remarks: \"Logical focus differs from keyboard focus if focus is deliberately forced by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus.  \\n  \\n A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.ContentElement.IsFocused%2A> property of an element in the route is changed from `false` to `true`.  \\n  \\n Because this event uses bubbling routing, the element that receives focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.  \\n  \\n<a name=\\\"routedEventInfo_GotFocus\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.GotFocusEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.RoutedEventHandler>|  \\n  \\n-   There is no corresponding tunneling event.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnGotFocus%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.RoutedEventHandler GotFocus;\n    return:\n      type: System.Windows.RoutedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.GotFocusEvent\n  commentId: F:System.Windows.ContentElement.GotFocusEvent\n  id: GotFocusEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: GotFocusEvent\n  nameWithType: ContentElement.GotFocusEvent\n  fullName: ContentElement.GotFocusEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.GotFocus\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent GotFocusEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.GotKeyboardFocus\n  commentId: E:System.Windows.ContentElement.GotKeyboardFocus\n  id: GotKeyboardFocus\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: GotKeyboardFocus\n  nameWithType: ContentElement.GotKeyboardFocus\n  fullName: ContentElement.GotKeyboardFocus\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the keyboard is focused on this element.\n  remarks: \"<xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> is a similar event that tracks status changes in a property that maintains the focus state for an element; the <xref:System.Windows.ContentElement.GotKeyboardFocus> event is raised in many of the same circumstances.  \\n  \\n Because this event uses bubbling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.GotKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_GotKeyboardFocus\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.GotKeyboardFocusEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnGotKeyboardFocus%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;\n    return:\n      type: System.Windows.Input.KeyboardFocusChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.GotKeyboardFocusEvent\n  commentId: F:System.Windows.ContentElement.GotKeyboardFocusEvent\n  id: GotKeyboardFocusEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: GotKeyboardFocusEvent\n  nameWithType: ContentElement.GotKeyboardFocusEvent\n  fullName: ContentElement.GotKeyboardFocusEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.GotKeyboardFocus\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.GotMouseCapture\n  commentId: E:System.Windows.ContentElement.GotMouseCapture\n  id: GotMouseCapture\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: GotMouseCapture\n  nameWithType: ContentElement.GotMouseCapture\n  fullName: ContentElement.GotMouseCapture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element captures the mouse.\n  remarks: \"When an element captures the mouse, it receives mouse input even if the mouse pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations and remains captured until the drop action of the drag-and-drop operation occurs.  \\n  \\n Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has mouse capture.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event for  this class so that <xref:System.Windows.ContentElement.GotMouseCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GotMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_GotMouseCapture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.GotMouseCaptureEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \\n  \\n-   There is no defined corresponding tunneling event.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnGotMouseCapture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseEventHandler GotMouseCapture;\n    return:\n      type: System.Windows.Input.MouseEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.GotMouseCaptureEvent\n  commentId: F:System.Windows.ContentElement.GotMouseCaptureEvent\n  id: GotMouseCaptureEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: GotMouseCaptureEvent\n  nameWithType: ContentElement.GotMouseCaptureEvent\n  fullName: ContentElement.GotMouseCaptureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.GotMouseCapture\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.GotStylusCapture\n  commentId: E:System.Windows.ContentElement.GotStylusCapture\n  id: GotStylusCapture\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: GotStylusCapture\n  nameWithType: ContentElement.GotStylusCapture\n  fullName: ContentElement.GotStylusCapture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element captures the stylus.\n  remarks: \"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations and retains capture until the drop action of the drag-and-drop operation occurs.  \\n  \\n Because this event uses bubbling routing, the element that has capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has capture.  \\n  \\n This event creates an alias for the  attached event for this class so that <xref:System.Windows.ContentElement.GotStylusCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.GotStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_GotStylusCapture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.GotStylusCaptureEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   There is no defined corresponding tunneling event.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnGotStylusCapture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler GotStylusCapture;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.GotStylusCaptureEvent\n  commentId: F:System.Windows.ContentElement.GotStylusCaptureEvent\n  id: GotStylusCaptureEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: GotStylusCaptureEvent\n  nameWithType: ContentElement.GotStylusCaptureEvent\n  fullName: ContentElement.GotStylusCaptureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.GotStylusCapture\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.GotTouchCapture\n  commentId: E:System.Windows.ContentElement.GotTouchCapture\n  id: GotTouchCapture\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: GotTouchCapture\n  nameWithType: ContentElement.GotTouchCapture\n  fullName: ContentElement.GotTouchCapture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a touch is captured to this element.\n  remarks: \"<a name=\\\"routedEventInfo_GotTouchCapture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.GotTouchCaptureEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.GotTouchCaptureEvent\n  commentId: F:System.Windows.ContentElement.GotTouchCaptureEvent\n  id: GotTouchCaptureEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: GotTouchCaptureEvent\n  nameWithType: ContentElement.GotTouchCaptureEvent\n  fullName: ContentElement.GotTouchCaptureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.GotTouchCapture\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.HasAnimatedProperties\n  commentId: P:System.Windows.ContentElement.HasAnimatedProperties\n  id: HasAnimatedProperties\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: HasAnimatedProperties\n  nameWithType: ContentElement.HasAnimatedProperties\n  fullName: ContentElement.HasAnimatedProperties\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether this element has any animated properties.\n  remarks: This property returns `true` either for persistent (unclocked, always-running) animations or for animations that have a specific timeline.\n  syntax:\n    content: public bool HasAnimatedProperties { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this element has animations attached to any of its properties; otherwise, `false`.'\n  overload: System.Windows.ContentElement.HasAnimatedProperties*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.InputBindings\n  commentId: P:System.Windows.ContentElement.InputBindings\n  id: InputBindings\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: InputBindings\n  nameWithType: ContentElement.InputBindings\n  fullName: ContentElement.InputBindings\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets the collection of input bindings that are associated with this element.\n  remarks: \"Input bindings support the binding of commands to input devices. For example, <xref:System.Windows.Input.MouseBinding> implements input bindings that include properties that are specific to mouse devices.  \\n  \\n The collection of input bindings includes both input bindings that pertain to the type and also input bindings that are declared on the instance.  \\n  \\n A related property, <xref:System.Windows.ContentElement.CommandBindings%2A>, maintains a collection of command bindings. These bindings differ from input bindings in that they represent the next level down of command processing - actions that are tied to known commands and class-specific handlers for them.  \\n  \\n<a name=\\\"xamlPropertyElementUsage_InputBindings\\\"></a>   \\n## XAML Property Element Usage  \\n  \\n```  \\n<object>  \\n  <object.InputBindings>  \\n    oneOrMoreInputBindings  </object.InputBindings>  \\n</object>  \\n```  \\n  \\n<a name=\\\"xamlValues_InputBindings\\\"></a>   \\n## XAML Values  \\n *oneOrMoreInputBindings*  \\n One or more <xref:System.Windows.Input.InputBinding> elements (typically the <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding> derived classes). Each of these is expected to have a <xref:System.Windows.Input.InputBinding.Command%2A> and <xref:System.Windows.Input.InputBinding.Gesture%2A> attribute set.\"\n  syntax:\n    content: public System.Windows.Input.InputBindingCollection InputBindings { get; }\n    return:\n      type: System.Windows.Input.InputBindingCollection\n      description: The collection of input bindings.\n  overload: System.Windows.ContentElement.InputBindings*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsEnabled\n  commentId: P:System.Windows.ContentElement.IsEnabled\n  id: IsEnabled\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsEnabled\n  nameWithType: ContentElement.IsEnabled\n  fullName: ContentElement.IsEnabled\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether this element is enabled in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].\n  remarks: \"<a name=\\\"dependencyPropertyInfo_IsEnabled\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.IsEnabledProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example creates a style that includes a property setter that gives an alternate visual behavior when a <xref:System.Windows.Documents.Hyperlink> is set to <xref:System.Windows.ContentElement.IsEnabled%2A> `false`.  \\n  \\n [!code-xml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]\"\n  syntax:\n    content: public bool IsEnabled { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the element is enabled; otherwise, `false`. The default value is `true`.'\n  overload: System.Windows.ContentElement.IsEnabled*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsEnabledChanged\n  commentId: E:System.Windows.ContentElement.IsEnabledChanged\n  id: IsEnabledChanged\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsEnabledChanged\n  nameWithType: ContentElement.IsEnabledChanged\n  fullName: ContentElement.IsEnabledChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsEnabled\"></xref> property on this element changes.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsEnabledCore\n  commentId: P:System.Windows.ContentElement.IsEnabledCore\n  id: IsEnabledCore\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsEnabledCore\n  nameWithType: ContentElement.IsEnabledCore\n  fullName: ContentElement.IsEnabledCore\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that becomes the return value of <xref href=\"System.Windows.ContentElement.IsEnabled\"></xref> in derived classes.\n  syntax:\n    content: protected virtual bool IsEnabledCore { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the element is enabled; otherwise, `false`.'\n  overload: System.Windows.ContentElement.IsEnabledCore*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsEnabledProperty\n  commentId: F:System.Windows.ContentElement.IsEnabledProperty\n  id: IsEnabledProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsEnabledProperty\n  nameWithType: ContentElement.IsEnabledProperty\n  fullName: ContentElement.IsEnabledProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.IsEnabled\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsEnabledProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.IsFocused\n  commentId: P:System.Windows.ContentElement.IsFocused\n  id: IsFocused\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsFocused\n  nameWithType: ContentElement.IsFocused\n  fullName: ContentElement.IsFocused\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that determines whether this element has logical focus.\n  remarks: \"Logical focus might differ from keyboard focus if an application has multiple focus divisions, such as between menu contents and the remainder of the application. In this scenario, keyboard focus can only be on one element of the application  UI, however, certain elements in other focus divisions might still retain logical focus. For more information on logical focus, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md) and [Focus Overview](~/docs/framework/wpf/advanced/focus-overview.md).  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsFocused\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.IsFocusedProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example creates a style that makes a <xref:System.Windows.Documents.Paragraph> focusable by default and gives it a visual behavior when it receives focus.  \\n  \\n [!code-xml[ContentElementsSmorgasbord#Focusable](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#focusable)]\"\n  syntax:\n    content: public bool IsFocused { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this element has logical focus; otherwise, `false`.'\n  overload: System.Windows.ContentElement.IsFocused*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.IsFocusedProperty\n  commentId: F:System.Windows.ContentElement.IsFocusedProperty\n  id: IsFocusedProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsFocusedProperty\n  nameWithType: ContentElement.IsFocusedProperty\n  fullName: ContentElement.IsFocusedProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.IsFocused\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsFocusedProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsInputMethodEnabled\n  commentId: P:System.Windows.ContentElement.IsInputMethodEnabled\n  id: IsInputMethodEnabled\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsInputMethodEnabled\n  nameWithType: ContentElement.IsInputMethodEnabled\n  fullName: ContentElement.IsInputMethodEnabled\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether an input method system, such as an [!INCLUDE[TLA#tla_ime](~/includes/tlasharptla-ime-md.md)], is enabled for processing the input to this element.\n  remarks: This property returns the value that is returned by the attached property <xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName> for the currently enabled input methods (keyboard, speech, and other input devices).\n  syntax:\n    content: public bool IsInputMethodEnabled { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if an input method is active; otherwise, `false`. The default value of the underlying attached property is `true`; however, this value is influenced by the state of input methods at runtime.'\n  overload: System.Windows.ContentElement.IsInputMethodEnabled*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsKeyboardFocused\n  commentId: P:System.Windows.ContentElement.IsKeyboardFocused\n  id: IsKeyboardFocused\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsKeyboardFocused\n  nameWithType: ContentElement.IsKeyboardFocused\n  fullName: ContentElement.IsKeyboardFocused\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether this element has keyboard focus.\n  remarks: \"<a name=\\\"dependencyPropertyInfo_IsKeyboardFocused\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.IsKeyboardFocusedProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsKeyboardFocused { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this element has keyboard focus; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.ContentElement.IsKeyboardFocused*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsKeyboardFocusedChanged\n  commentId: E:System.Windows.ContentElement.IsKeyboardFocusedChanged\n  id: IsKeyboardFocusedChanged\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsKeyboardFocusedChanged\n  nameWithType: ContentElement.IsKeyboardFocusedChanged\n  fullName: ContentElement.IsKeyboardFocusedChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsKeyboardFocused\"></xref> property changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.IsKeyboardFocusedProperty\n  commentId: F:System.Windows.ContentElement.IsKeyboardFocusedProperty\n  id: IsKeyboardFocusedProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsKeyboardFocusedProperty\n  nameWithType: ContentElement.IsKeyboardFocusedProperty\n  fullName: ContentElement.IsKeyboardFocusedProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.IsKeyboardFocused\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsKeyboardFocusWithin\n  commentId: P:System.Windows.ContentElement.IsKeyboardFocusWithin\n  id: IsKeyboardFocusWithin\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsKeyboardFocusWithin\n  nameWithType: ContentElement.IsKeyboardFocusWithin\n  fullName: ContentElement.IsKeyboardFocusWithin\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether keyboard focus is anywhere within the element or child elements.\n  remarks: \"Changes to the value of this property typically raise the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event, unless a derived class has overridden <xref:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged%2A> to suppress the event.  \\n  \\n You do not set this property directly, but you can set the focus to the element by calling <xref:System.Windows.ContentElement.Focus%2A>, or by making a <xref:System.Windows.ContentElement.MoveFocus%2A> request. Either of these method calls might change this property value.  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsKeyboardFocusWithin\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.IsKeyboardFocusWithinProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsKeyboardFocusWithin { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if keyboard focus is on the element or its child elements; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.ContentElement.IsKeyboardFocusWithin*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.IsKeyboardFocusWithinChanged\n  commentId: E:System.Windows.ContentElement.IsKeyboardFocusWithinChanged\n  id: IsKeyboardFocusWithinChanged\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsKeyboardFocusWithinChanged\n  nameWithType: ContentElement.IsKeyboardFocusWithinChanged\n  fullName: ContentElement.IsKeyboardFocusWithinChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsKeyboardFocusWithinChanged\"></xref> property changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsKeyboardFocusWithinProperty\n  commentId: F:System.Windows.ContentElement.IsKeyboardFocusWithinProperty\n  id: IsKeyboardFocusWithinProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsKeyboardFocusWithinProperty\n  nameWithType: ContentElement.IsKeyboardFocusWithinProperty\n  fullName: ContentElement.IsKeyboardFocusWithinProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.IsKeyboardFocusWithin\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsMouseCaptured\n  commentId: P:System.Windows.ContentElement.IsMouseCaptured\n  id: IsMouseCaptured\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsMouseCaptured\n  nameWithType: ContentElement.IsMouseCaptured\n  fullName: ContentElement.IsMouseCaptured\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether the mouse is captured by this element.\n  remarks: \"Mouse capture state is related to in-process drag-and-drop operations.  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsMouseCaptured\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.IsMouseCapturedProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example turns the mouse capture state on or off based on whether the mouse is already captured by the element.  \\n  \\n [!code-csharp[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#ismousecaptured)]\\n [!code-vb[ContentElementsSmorgasbord#IsMouseCaptured](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#ismousecaptured)]\"\n  syntax:\n    content: public bool IsMouseCaptured { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the element has mouse capture; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.ContentElement.IsMouseCaptured*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.IsMouseCapturedChanged\n  commentId: E:System.Windows.ContentElement.IsMouseCapturedChanged\n  id: IsMouseCapturedChanged\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsMouseCapturedChanged\n  nameWithType: ContentElement.IsMouseCapturedChanged\n  fullName: ContentElement.IsMouseCapturedChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsMouseCaptured\"></xref> property changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsMouseCapturedProperty\n  commentId: F:System.Windows.ContentElement.IsMouseCapturedProperty\n  id: IsMouseCapturedProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsMouseCapturedProperty\n  nameWithType: ContentElement.IsMouseCapturedProperty\n  fullName: ContentElement.IsMouseCapturedProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.IsMouseCaptured\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsMouseCaptureWithin\n  commentId: P:System.Windows.ContentElement.IsMouseCaptureWithin\n  id: IsMouseCaptureWithin\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsMouseCaptureWithin\n  nameWithType: ContentElement.IsMouseCaptureWithin\n  fullName: ContentElement.IsMouseCaptureWithin\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that determines whether mouse capture is held by this element or by child elements in its element tree.\n  remarks: \"<a name=\\\"dependencyPropertyInfo_IsMouseCaptureWithin\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.IsMouseCaptureWithinProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsMouseCaptureWithin { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this element or a contained element has mouse capture; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.ContentElement.IsMouseCaptureWithin*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsMouseCaptureWithinChanged\n  commentId: E:System.Windows.ContentElement.IsMouseCaptureWithinChanged\n  id: IsMouseCaptureWithinChanged\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsMouseCaptureWithinChanged\n  nameWithType: ContentElement.IsMouseCaptureWithinChanged\n  fullName: ContentElement.IsMouseCaptureWithinChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsMouseCaptureWithinProperty\"></xref> changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsMouseCaptureWithinProperty\n  commentId: F:System.Windows.ContentElement.IsMouseCaptureWithinProperty\n  id: IsMouseCaptureWithinProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsMouseCaptureWithinProperty\n  nameWithType: ContentElement.IsMouseCaptureWithinProperty\n  fullName: ContentElement.IsMouseCaptureWithinProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.IsMouseCaptureWithin\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsMouseDirectlyOver\n  commentId: P:System.Windows.ContentElement.IsMouseDirectlyOver\n  id: IsMouseDirectlyOver\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsMouseDirectlyOver\n  nameWithType: ContentElement.IsMouseDirectlyOver\n  fullName: ContentElement.IsMouseDirectlyOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether the position of the mouse pointer corresponds to hit test results, which take element compositing into account.\n  remarks: \"Unlike <xref:System.Windows.ContentElement.IsMouseOver%2A>, this property is only `true` if the mouse pointer is over the literal element—as it is for a hit test. If the mouse pointer is instead over a child element, in particular over elements that are part of an element's deeper template and compositing, this property will be `false`. Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.ContentElement.IsMouseOver%2A> instead.  \\n  \\n If the mouse is captured by this element, and this property is `true` at time of capture, this property will continue to return `true` until mouse capture is lost and the pointer is not over its bounds.  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsMouseDirectlyOver\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.IsMouseDirectlyOverProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsMouseDirectlyOver { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the mouse pointer is over the same element result as a hit test; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.ContentElement.IsMouseDirectlyOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsMouseDirectlyOverChanged\n  commentId: E:System.Windows.ContentElement.IsMouseDirectlyOverChanged\n  id: IsMouseDirectlyOverChanged\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsMouseDirectlyOverChanged\n  nameWithType: ContentElement.IsMouseDirectlyOverChanged\n  fullName: ContentElement.IsMouseDirectlyOverChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsMouseDirectlyOver\"></xref> property changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsMouseDirectlyOverProperty\n  commentId: F:System.Windows.ContentElement.IsMouseDirectlyOverProperty\n  id: IsMouseDirectlyOverProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsMouseDirectlyOverProperty\n  nameWithType: ContentElement.IsMouseDirectlyOverProperty\n  fullName: ContentElement.IsMouseDirectlyOverProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.IsMouseDirectlyOver\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsMouseOver\n  commentId: P:System.Windows.ContentElement.IsMouseOver\n  id: IsMouseOver\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsMouseOver\n  nameWithType: ContentElement.IsMouseOver\n  fullName: ContentElement.IsMouseOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether the mouse pointer is located over this element (including visual child elements, or its control compositing).\n  remarks: \"Although an analogous \\\"IsMouseOverChanged\\\" event does not exist, several similar events do. For example, you can use <xref:System.Windows.ContentElement.MouseEnter>, <xref:System.Windows.ContentElement.MouseMove>, and <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged>.  \\n  \\n If this element captures the mouse, this property remains `true` until mouse capture is lost and the mouse pointer leaves the element bounds.  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsMouseOver\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.IsMouseOverProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example creates a style that includes a property setter that gives an alternate visual behavior when a <xref:System.Windows.Documents.Hyperlink> reports <xref:System.Windows.ContentElement.IsMouseOver%2A> `true`.  \\n  \\n [!code-xml[ContentElementsSmorgasbord#IsEnabledIsMouseOver](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#isenabledismouseover)]\"\n  syntax:\n    content: public bool IsMouseOver { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if mouse pointer is over the element or its child elements; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.ContentElement.IsMouseOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsMouseOverProperty\n  commentId: F:System.Windows.ContentElement.IsMouseOverProperty\n  id: IsMouseOverProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsMouseOverProperty\n  nameWithType: ContentElement.IsMouseOverProperty\n  fullName: ContentElement.IsMouseOverProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.IsMouseOver\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsMouseOverProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsStylusCaptured\n  commentId: P:System.Windows.ContentElement.IsStylusCaptured\n  id: IsStylusCaptured\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsStylusCaptured\n  nameWithType: ContentElement.IsStylusCaptured\n  fullName: ContentElement.IsStylusCaptured\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether the stylus is captured to this element.\n  remarks: \"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsStylusCaptured\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.IsStylusCapturedProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsStylusCaptured { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the element has stylus capture; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.ContentElement.IsStylusCaptured*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsStylusCapturedChanged\n  commentId: E:System.Windows.ContentElement.IsStylusCapturedChanged\n  id: IsStylusCapturedChanged\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsStylusCapturedChanged\n  nameWithType: ContentElement.IsStylusCapturedChanged\n  fullName: ContentElement.IsStylusCapturedChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsStylusCaptured\"></xref> property changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsStylusCapturedProperty\n  commentId: F:System.Windows.ContentElement.IsStylusCapturedProperty\n  id: IsStylusCapturedProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsStylusCapturedProperty\n  nameWithType: ContentElement.IsStylusCapturedProperty\n  fullName: ContentElement.IsStylusCapturedProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.IsStylusCaptured\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsStylusCaptureWithin\n  commentId: P:System.Windows.ContentElement.IsStylusCaptureWithin\n  id: IsStylusCaptureWithin\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsStylusCaptureWithin\n  nameWithType: ContentElement.IsStylusCaptureWithin\n  fullName: ContentElement.IsStylusCaptureWithin\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that determines whether stylus capture is held by this element, including child elements and control compositing.\n  remarks: \"Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsStylusCaptureWithin\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.IsStylusCaptureWithinProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsStylusCaptureWithin { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if stylus capture is held within this element; otherwise, `false`.'\n  overload: System.Windows.ContentElement.IsStylusCaptureWithin*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsStylusCaptureWithinChanged\n  commentId: E:System.Windows.ContentElement.IsStylusCaptureWithinChanged\n  id: IsStylusCaptureWithinChanged\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsStylusCaptureWithinChanged\n  nameWithType: ContentElement.IsStylusCaptureWithinChanged\n  fullName: ContentElement.IsStylusCaptureWithinChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsStylusCaptureWithin\"></xref> property changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.IsStylusCaptureWithinProperty\n  commentId: F:System.Windows.ContentElement.IsStylusCaptureWithinProperty\n  id: IsStylusCaptureWithinProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsStylusCaptureWithinProperty\n  nameWithType: ContentElement.IsStylusCaptureWithinProperty\n  fullName: ContentElement.IsStylusCaptureWithinProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.IsStylusCaptureWithin\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsStylusDirectlyOver\n  commentId: P:System.Windows.ContentElement.IsStylusDirectlyOver\n  id: IsStylusDirectlyOver\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsStylusDirectlyOver\n  nameWithType: ContentElement.IsStylusDirectlyOver\n  fullName: ContentElement.IsStylusDirectlyOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether the stylus position corresponds to hit test results, which take element compositing into account.\n  remarks: \"Unlike <xref:System.Windows.ContentElement.IsStylusOver%2A>, this property is only `true` if the stylus is over the element. If the stylus is instead over a child element or over elements that are part of an element's deeper compositing, this property will be `false`.  \\n  \\n Unless you know how a control is composited (for example, you use this property in a custom control template for a control that you define), this property might return unexpected results. For most scenarios where you are not authoring controls, use <xref:System.Windows.ContentElement.IsStylusOver%2A> instead.  \\n  \\n If this element has stylus capture and this property is `true` at the time of capture, this property remains `true` until stylus capture is lost and the stylus is not over its bounds.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsStylusDirectlyOver\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.IsStylusDirectlyOverProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsStylusDirectlyOver { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the stylus is over the same element as a hit test; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.ContentElement.IsStylusDirectlyOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsStylusDirectlyOverChanged\n  commentId: E:System.Windows.ContentElement.IsStylusDirectlyOverChanged\n  id: IsStylusDirectlyOverChanged\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsStylusDirectlyOverChanged\n  nameWithType: ContentElement.IsStylusDirectlyOverChanged\n  fullName: ContentElement.IsStylusDirectlyOverChanged\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the value of the <xref href=\"System.Windows.ContentElement.IsStylusDirectlyOver\"></xref> property changes on this element.\n  remarks: This member is a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event, not a routed event.\n  syntax:\n    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;\n    return:\n      type: System.Windows.DependencyPropertyChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsStylusDirectlyOverProperty\n  commentId: F:System.Windows.ContentElement.IsStylusDirectlyOverProperty\n  id: IsStylusDirectlyOverProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsStylusDirectlyOverProperty\n  nameWithType: ContentElement.IsStylusDirectlyOverProperty\n  fullName: ContentElement.IsStylusDirectlyOverProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.IsStylusDirectlyOver\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsStylusOver\n  commentId: P:System.Windows.ContentElement.IsStylusOver\n  id: IsStylusOver\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsStylusOver\n  nameWithType: ContentElement.IsStylusOver\n  fullName: ContentElement.IsStylusOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets a value that indicates whether the stylus is located over this element (including visual child elements).\n  remarks: \"If this element has stylus capture, this property remains `true` until stylus capture is lost and the pointer is out of its bounds.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"dependencyPropertyInfo_IsStylusOver\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.IsStylusOverProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsStylusOver { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the stylus is over the element or its child elements; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.ContentElement.IsStylusOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.IsStylusOverProperty\n  commentId: F:System.Windows.ContentElement.IsStylusOverProperty\n  id: IsStylusOverProperty\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: IsStylusOverProperty\n  nameWithType: ContentElement.IsStylusOverProperty\n  fullName: ContentElement.IsStylusOverProperty\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.IsStylusOver\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsStylusOverProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.KeyDown\n  commentId: E:System.Windows.ContentElement.KeyDown\n  id: KeyDown\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: KeyDown\n  nameWithType: ContentElement.KeyDown\n  fullName: ContentElement.KeyDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a key is pressed while focus is on this element.\n  remarks: \"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.ContentElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event for this class so that <xref:System.Windows.ContentElement.KeyDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.KeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_KeyDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.KeyDownEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewKeyDown>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnKeyDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyEventHandler KeyDown;\n    return:\n      type: System.Windows.Input.KeyEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.KeyDownEvent\n  commentId: F:System.Windows.ContentElement.KeyDownEvent\n  id: KeyDownEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: KeyDownEvent\n  nameWithType: ContentElement.KeyDownEvent\n  fullName: ContentElement.KeyDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.KeyDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent KeyDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.KeyUp\n  commentId: E:System.Windows.ContentElement.KeyUp\n  id: KeyUp\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: KeyUp\n  nameWithType: ContentElement.KeyUp\n  fullName: ContentElement.KeyUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a key is released while focus is on this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event for this class so that  <xref:System.Windows.ContentElement.KeyUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.KeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_KeyUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.KeyUpEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewKeyUp>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnKeyUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyEventHandler KeyUp;\n    return:\n      type: System.Windows.Input.KeyEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.KeyUpEvent\n  commentId: F:System.Windows.ContentElement.KeyUpEvent\n  id: KeyUpEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: KeyUpEvent\n  nameWithType: ContentElement.KeyUpEvent\n  fullName: ContentElement.KeyUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.KeyUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent KeyUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.LostFocus\n  commentId: E:System.Windows.ContentElement.LostFocus\n  id: LostFocus\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: LostFocus\n  nameWithType: ContentElement.LostFocus\n  fullName: ContentElement.LostFocus\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element loses logical focus.\n  remarks: \"Logical focus differs from keyboard focus if focus is deliberately forced away by using a method call but the previous keyboard focus exists in a different scope. In this scenario, keyboard focus remains where it is, and the element where a <xref:System.Windows.ContentElement.Focus%2A> method is called still gets logical focus.  \\n  \\n A more precise interpretation of this event is that it is raised when the value of the <xref:System.Windows.ContentElement.IsFocused%2A> property of an element in the route changes from `true` to `false`.  \\n  \\n Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that gained focus.  \\n  \\n<a name=\\\"routedEventInfo_LostFocus\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.LostFocusEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.RoutedEventHandler>|  \\n  \\n-   There is no corresponding tunneling event.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnLostFocus%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.RoutedEventHandler LostFocus;\n    return:\n      type: System.Windows.RoutedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.LostFocusEvent\n  commentId: F:System.Windows.ContentElement.LostFocusEvent\n  id: LostFocusEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: LostFocusEvent\n  nameWithType: ContentElement.LostFocusEvent\n  fullName: ContentElement.LostFocusEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.LostFocus\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent LostFocusEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.LostKeyboardFocus\n  commentId: E:System.Windows.ContentElement.LostKeyboardFocus\n  id: LostKeyboardFocus\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: LostKeyboardFocus\n  nameWithType: ContentElement.LostKeyboardFocus\n  fullName: ContentElement.LostKeyboardFocus\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the keyboard is no longer focused on this element.\n  remarks: \"Because this event uses bubbling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.LostKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.LostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_LostKeyboardFocus\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.LostKeyboardFocusEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnLostKeyboardFocus%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;\n    return:\n      type: System.Windows.Input.KeyboardFocusChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.LostKeyboardFocusEvent\n  commentId: F:System.Windows.ContentElement.LostKeyboardFocusEvent\n  id: LostKeyboardFocusEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: LostKeyboardFocusEvent\n  nameWithType: ContentElement.LostKeyboardFocusEvent\n  fullName: ContentElement.LostKeyboardFocusEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.LostKeyboardFocus\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.LostMouseCapture\n  commentId: E:System.Windows.ContentElement.LostMouseCapture\n  id: LostMouseCapture\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: LostMouseCapture\n  nameWithType: ContentElement.LostMouseCapture\n  fullName: ContentElement.LostMouseCapture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element loses mouse capture.\n  remarks: \"When an element captures the mouse, it receives mouse input even if the pointer is outside its bounds. The mouse is typically captured only during drag-and-drop operations.  \\n  \\n Because this event uses bubbling routing, the element that loses capture might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost capture.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.LostMouseCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.LostMouseCapture> event are attached to the underlying <xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_LostMouseCapture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.LostMouseCaptureEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \\n  \\n-   There is no defined corresponding tunneling event.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnLostMouseCapture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseEventHandler LostMouseCapture;\n    return:\n      type: System.Windows.Input.MouseEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.LostMouseCaptureEvent\n  commentId: F:System.Windows.ContentElement.LostMouseCaptureEvent\n  id: LostMouseCaptureEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: LostMouseCaptureEvent\n  nameWithType: ContentElement.LostMouseCaptureEvent\n  fullName: ContentElement.LostMouseCaptureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.LostMouseCapture\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.LostStylusCapture\n  commentId: E:System.Windows.ContentElement.LostStylusCapture\n  id: LostStylusCapture\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: LostStylusCapture\n  nameWithType: ContentElement.LostStylusCapture\n  fullName: ContentElement.LostStylusCapture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element loses stylus capture.\n  remarks: \"When an element captures the stylus, it receives stylus input even if the pointer is outside its bounds. The stylus is typically captured only during drag-and-drop operations.  \\n  \\n Because this event uses bubbling routing, the element that loses focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.LostStylusCapture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.LostStylusCapture> event are attached to the underlying <xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_LostStylusCapture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.LostStylusCaptureEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   There is no defined corresponding tunneling event.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnLostStylusCapture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler LostStylusCapture;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.LostStylusCaptureEvent\n  commentId: F:System.Windows.ContentElement.LostStylusCaptureEvent\n  id: LostStylusCaptureEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: LostStylusCaptureEvent\n  nameWithType: ContentElement.LostStylusCaptureEvent\n  fullName: ContentElement.LostStylusCaptureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.LostStylusCapture\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.LostTouchCapture\n  commentId: E:System.Windows.ContentElement.LostTouchCapture\n  id: LostTouchCapture\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: LostTouchCapture\n  nameWithType: ContentElement.LostTouchCapture\n  fullName: ContentElement.LostTouchCapture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element loses a touch capture.\n  remarks: \"<a name=\\\"routedEventInfo_LostTouchCapture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.LostTouchCaptureEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.LostTouchCaptureEvent\n  commentId: F:System.Windows.ContentElement.LostTouchCaptureEvent\n  id: LostTouchCaptureEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: LostTouchCaptureEvent\n  nameWithType: ContentElement.LostTouchCaptureEvent\n  fullName: ContentElement.LostTouchCaptureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.LostTouchCapture\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.MouseDown\n  commentId: E:System.Windows.ContentElement.MouseDown\n  id: MouseDown\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseDown\n  nameWithType: ContentElement.MouseDown\n  fullName: ContentElement.MouseDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when any mouse button is pressed while the pointer is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n The <xref:System.Windows.ContentElement.MouseDown> event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonDown> or <xref:System.Windows.ContentElement.MouseRightButtonDown>.  \\n  \\n> [!IMPORTANT]\\n>  A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.  \\n  \\n You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.ContentElement.MouseDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:  \\n  \\n-   Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.  \\n  \\n-   Register a handler on the control procedurally by calling <xref:System.Windows.ContentElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.  \\n  \\n<a name=\\\"routedEventInfo_MouseDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.MouseDownEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseDown>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnMouseDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler MouseDown;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MouseDownEvent\n  commentId: F:System.Windows.ContentElement.MouseDownEvent\n  id: MouseDownEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseDownEvent\n  nameWithType: ContentElement.MouseDownEvent\n  fullName: ContentElement.MouseDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.MouseDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MouseEnter\n  commentId: E:System.Windows.ContentElement.MouseEnter\n  id: MouseEnter\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseEnter\n  nameWithType: ContentElement.MouseEnter\n  fullName: ContentElement.MouseEnter\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the mouse pointer enters the bounds of this element.\n  remarks: \"<xref:System.Windows.ContentElement.MouseEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \\n  \\n Although <xref:System.Windows.ContentElement.MouseEnter> tracks when the mouse pointer enters the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsMouseOver%2A> property value has changed from `false` to `true` on this element.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseEnter> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_MouseEnter\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.MouseEnterEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnMouseEnter%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseEventHandler MouseEnter;\n    return:\n      type: System.Windows.Input.MouseEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.MouseEnterEvent\n  commentId: F:System.Windows.ContentElement.MouseEnterEvent\n  id: MouseEnterEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseEnterEvent\n  nameWithType: ContentElement.MouseEnterEvent\n  fullName: ContentElement.MouseEnterEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.MouseEnter\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseEnterEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.MouseLeave\n  commentId: E:System.Windows.ContentElement.MouseLeave\n  id: MouseLeave\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseLeave\n  nameWithType: ContentElement.MouseLeave\n  fullName: ContentElement.MouseLeave\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the mouse pointer leaves the bounds of this element.\n  remarks: \"<xref:System.Windows.ContentElement.MouseLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \\n  \\n Although <xref:System.Windows.ContentElement.MouseLeave> tracks when the mouse leaves an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsMouseOver%2A> property value has changed from `true` to `false` on this element.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseLeave> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_MouseLeave\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.MouseLeaveEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnMouseLeave%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseEventHandler MouseLeave;\n    return:\n      type: System.Windows.Input.MouseEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MouseLeaveEvent\n  commentId: F:System.Windows.ContentElement.MouseLeaveEvent\n  id: MouseLeaveEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseLeaveEvent\n  nameWithType: ContentElement.MouseLeaveEvent\n  fullName: ContentElement.MouseLeaveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.MouseLeave\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseLeaveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.MouseLeftButtonDown\n  commentId: E:System.Windows.ContentElement.MouseLeftButtonDown\n  id: MouseLeftButtonDown\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseLeftButtonDown\n  nameWithType: ContentElement.MouseLeftButtonDown\n  fullName: ContentElement.MouseLeftButtonDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the left mouse button is pressed while the mouse pointer is over this element.\n  remarks: \"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \\n  \\n> [!IMPORTANT]\\n>  A few <xref:System.Windows.ContentElement> derived classes that have control-like behavior, for example, <xref:System.Windows.Documents.Hyperlink>, might have inherent class handling for mouse button events. The left mouse button down event is the most likely event to have class handling in a control. The class handling often marks the underlying <xref:System.Windows.Input.Mouse> class event as handled. Once the event is marked handled, other instance handlers that are attached to that element are not ordinarily raised. Any other class or instance handlers that are attached to elements in the bubbling direction towards the root in the UI tree are also not ordinarily raised.  \\n  \\n You can resolve the issue that is outlined in the preceding Important and still receive <xref:System.Windows.ContentElement.MouseLeftButtonDown> events for left mouse button down events on a derived class that has class handling by using either of these solutions:  \\n  \\n-   Attach handlers for the <xref:System.Windows.ContentElement.PreviewMouseDown> event, which is not marked as handled by the controls. Notice that because this is a preview event, the route starts at the root and tunnels down to the control.  \\n  \\n-   Register a handler on the control procedurally by calling <xref:System.Windows.ContentElement.AddHandler%2A> and choosing the signature option that enables handlers to listen for events even if they are already marked as handled in the routed event data.  \\n  \\n<a name=\\\"routedEventInfo_MouseLeftButtonDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.MouseLeftButtonDownEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MouseLeftButtonDownEvent\n  commentId: F:System.Windows.ContentElement.MouseLeftButtonDownEvent\n  id: MouseLeftButtonDownEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseLeftButtonDownEvent\n  nameWithType: ContentElement.MouseLeftButtonDownEvent\n  fullName: ContentElement.MouseLeftButtonDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.MouseLeftButtonDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MouseLeftButtonUp\n  commentId: E:System.Windows.ContentElement.MouseLeftButtonUp\n  id: MouseLeftButtonUp\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseLeftButtonUp\n  nameWithType: ContentElement.MouseLeftButtonUp\n  fullName: ContentElement.MouseLeftButtonUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the left mouse button is released while the mouse pointer is over this element.\n  remarks: \"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \\n  \\n<a name=\\\"routedEventInfo_MouseLeftButtonUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.MouseLeftButtonUpEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.MouseLeftButtonUpEvent\n  commentId: F:System.Windows.ContentElement.MouseLeftButtonUpEvent\n  id: MouseLeftButtonUpEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseLeftButtonUpEvent\n  nameWithType: ContentElement.MouseLeftButtonUpEvent\n  fullName: ContentElement.MouseLeftButtonUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.MouseLeftButtonUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MouseMove\n  commentId: E:System.Windows.ContentElement.MouseMove\n  id: MouseMove\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseMove\n  nameWithType: ContentElement.MouseMove\n  fullName: ContentElement.MouseMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the mouse pointer moves while over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_MouseMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.MouseMoveEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseMove>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnMouseMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseEventHandler MouseMove;\n    return:\n      type: System.Windows.Input.MouseEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MouseMoveEvent\n  commentId: F:System.Windows.ContentElement.MouseMoveEvent\n  id: MouseMoveEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseMoveEvent\n  nameWithType: ContentElement.MouseMoveEvent\n  fullName: ContentElement.MouseMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.MouseMove\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MouseRightButtonDown\n  commentId: E:System.Windows.ContentElement.MouseRightButtonDown\n  id: MouseRightButtonDown\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseRightButtonDown\n  nameWithType: ContentElement.MouseRightButtonDown\n  fullName: ContentElement.MouseRightButtonDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the right mouse button is pressed while the mouse pointer is over this element.\n  remarks: \"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \\n  \\n Right button mouse events frequently have native handling in application scenarios. For instance, a right mouse button down might display a context menu. See [ContextMenu Overview](~/docs/framework/wpf/controls/contextmenu-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_MouseRightButtonDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.MouseRightButtonDownEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MouseRightButtonDownEvent\n  commentId: F:System.Windows.ContentElement.MouseRightButtonDownEvent\n  id: MouseRightButtonDownEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseRightButtonDownEvent\n  nameWithType: ContentElement.MouseRightButtonDownEvent\n  fullName: ContentElement.MouseRightButtonDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.MouseRightButtonDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MouseRightButtonUp\n  commentId: E:System.Windows.ContentElement.MouseRightButtonUp\n  id: MouseRightButtonUp\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseRightButtonUp\n  nameWithType: ContentElement.MouseRightButtonUp\n  fullName: ContentElement.MouseRightButtonUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the right mouse button is released while the mouse pointer is over this element.\n  remarks: \"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a bubbling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \\n  \\n<a name=\\\"routedEventInfo_MouseRightButtonUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.MouseRightButtonUpEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MouseRightButtonUpEvent\n  commentId: F:System.Windows.ContentElement.MouseRightButtonUpEvent\n  id: MouseRightButtonUpEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseRightButtonUpEvent\n  nameWithType: ContentElement.MouseRightButtonUpEvent\n  fullName: ContentElement.MouseRightButtonUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.MouseRightButtonUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MouseUp\n  commentId: E:System.Windows.ContentElement.MouseUp\n  id: MouseUp\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseUp\n  nameWithType: ContentElement.MouseUp\n  fullName: ContentElement.MouseUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when any mouse button is released over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n The <xref:System.Windows.ContentElement.MouseUp> event is often raised together with either <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>, which correspond to a release of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.MouseLeftButtonUp> or <xref:System.Windows.ContentElement.MouseRightButtonUp>.  \\n  \\n<a name=\\\"routedEventInfo_MouseUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.MouseUpEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseUp>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnMouseUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler MouseUp;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MouseUpEvent\n  commentId: F:System.Windows.ContentElement.MouseUpEvent\n  id: MouseUpEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseUpEvent\n  nameWithType: ContentElement.MouseUpEvent\n  fullName: ContentElement.MouseUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.MouseUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MouseWheel\n  commentId: E:System.Windows.ContentElement.MouseWheel\n  id: MouseWheel\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseWheel\n  nameWithType: ContentElement.MouseWheel\n  fullName: ContentElement.MouseWheel\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.\n  remarks: \"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive the <xref:System.Windows.ContentElement.MouseWheel> event from a focused or captured element, the mouse pointer might actually be over another element.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.MouseWheel> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.MouseWheel> event are attached to the underlying <xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_MouseWheel\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.MouseWheelEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewMouseWheel>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnMouseWheel%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseWheelEventHandler MouseWheel;\n    return:\n      type: System.Windows.Input.MouseWheelEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MouseWheelEvent\n  commentId: F:System.Windows.ContentElement.MouseWheelEvent\n  id: MouseWheelEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MouseWheelEvent\n  nameWithType: ContentElement.MouseWheelEvent\n  fullName: ContentElement.MouseWheelEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.MouseWheel\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent MouseWheelEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)\n  commentId: M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)\n  id: MoveFocus(System.Windows.Input.TraversalRequest)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: MoveFocus(TraversalRequest)\n  nameWithType: ContentElement.MoveFocus(TraversalRequest)\n  fullName: ContentElement.MoveFocus(TraversalRequest)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Attempts to move focus from this element to another element. The direction to move focus is specified by a guidance direction, which is interpreted within the organization of the visual parent for this element.\n  remarks: Make sure you check the return value of this method. A return value of `false` might be returned if the traversal runs into a tab stop that is defined by a control's composition, and the traversal request did not request to wrap.\n  syntax:\n    content: public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);\n    parameters:\n    - id: request\n      type: System.Windows.Input.TraversalRequest\n      description: A traversal request, which contains a property that indicates either a mode to traverse in existing tab order, or a direction to move visually.\n    return:\n      type: System.Boolean\n      description: '`true` if the requested traversal was performed; otherwise, `false`.'\n  overload: System.Windows.ContentElement.MoveFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnCreateAutomationPeer\n  commentId: M:System.Windows.ContentElement.OnCreateAutomationPeer\n  id: OnCreateAutomationPeer\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnCreateAutomationPeer()\n  nameWithType: ContentElement.OnCreateAutomationPeer()\n  fullName: ContentElement.OnCreateAutomationPeer()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Returns class-specific <xref href=\"System.Windows.Automation.Peers.AutomationPeer\"></xref> implementations for the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure.\n  syntax:\n    content: protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();\n    parameters: []\n    return:\n      type: System.Windows.Automation.Peers.AutomationPeer\n      description: The type-specific <xref href=\"System.Windows.Automation.Peers.AutomationPeer\"></xref> implementation.\n  overload: System.Windows.ContentElement.OnCreateAutomationPeer*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)\n  id: OnDragEnter(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnDragEnter(DragEventArgs)\n  nameWithType: ContentElement.OnDragEnter(DragEventArgs)\n  fullName: ContentElement.OnDragEnter(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnDragEnter (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnDragEnter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)\n  id: OnDragLeave(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnDragLeave(DragEventArgs)\n  nameWithType: ContentElement.OnDragLeave(DragEventArgs)\n  fullName: ContentElement.OnDragLeave(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragLeave\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnDragLeave (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnDragLeave*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)\n  id: OnDragOver(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnDragOver(DragEventArgs)\n  nameWithType: ContentElement.OnDragOver(DragEventArgs)\n  fullName: ContentElement.OnDragOver(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragOver\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnDragOver (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnDragOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)\n  id: OnDrop(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnDrop(DragEventArgs)\n  nameWithType: ContentElement.OnDrop(DragEventArgs)\n  fullName: ContentElement.OnDrop(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.DragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnDrop (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnDrop*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  commentId: M:System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  id: OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnGiveFeedback(GiveFeedbackEventArgs)\n  nameWithType: ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)\n  fullName: ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.GiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.GiveFeedbackEventArgs\n      description: The <xref href=\"System.Windows.GiveFeedbackEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnGiveFeedback*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)\n  commentId: M:System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)\n  id: OnGotFocus(System.Windows.RoutedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnGotFocus(RoutedEventArgs)\n  nameWithType: ContentElement.OnGotFocus(RoutedEventArgs)\n  fullName: ContentElement.OnGotFocus(RoutedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Raises the <xref href=\"System.Windows.ContentElement.GotFocus\"></xref> routed event by using the event data provided.\n  remarks: \"This method, although virtual, does have a default implementation that raises the event.  \\n  \\n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes. The <xref:System.Windows.ContentElement.OnGotFocus%2A> implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event.\"\n  syntax:\n    content: protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.RoutedEventArgs\n      description: A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data. This event data must contain the identifier for the <xref href=\"System.Windows.ContentElement.GotFocus\"></xref> event.\n  overload: System.Windows.ContentElement.OnGotFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  commentId: M:System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  id: OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.GotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyboardFocusChangedEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnGotKeyboardFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)\n  commentId: M:System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)\n  id: OnGotMouseCapture(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnGotMouseCapture(MouseEventArgs)\n  nameWithType: ContentElement.OnGotMouseCapture(MouseEventArgs)\n  fullName: ContentElement.OnGotMouseCapture(MouseEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.GotMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnGotMouseCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)\n  id: OnGotStylusCapture(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnGotStylusCapture(StylusEventArgs)\n  nameWithType: ContentElement.OnGotStylusCapture(StylusEventArgs)\n  fullName: ContentElement.OnGotStylusCapture(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.GotStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnGotStylusCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)\n  id: OnGotTouchCapture(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnGotTouchCapture(TouchEventArgs)\n  nameWithType: ContentElement.OnGotTouchCapture(TouchEventArgs)\n  fullName: ContentElement.OnGotTouchCapture(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.ContentElement.GotTouchCapture\"></xref> routed event that occurs when a touch is captured to this element.\n  remarks: The <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> in a derived class to handle the <xref:System.Windows.ContentElement.GotTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnGotTouchCapture%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnGotTouchCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsKeyboardFocusedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocused%2A> dependency property changes. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is raised with that same event data instance. Notice that the  <xref:System.Windows.ContentElement.IsKeyboardFocusedChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.\"\n  syntax:\n    content: protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnIsKeyboardFocusedChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked just before the <xref href=\"System.Windows.ContentElement.IsKeyboardFocusWithinChanged\"></xref> event is raised by this element. Implement this method to add class handling for this event.\n  remarks: \"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsKeyboardFocusWithin%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.ContentElement.IsKeyboardFocusWithinChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.\"\n  syntax:\n    content: protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsMouseCapturedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.ContentElement.IsMouseCapturedChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.\"\n  syntax:\n    content: protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnIsMouseCapturedChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsMouseCaptureWithinChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.\n  syntax:\n    content: protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsMouseDirectlyOverChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsMouseDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is raised with that same event data instance. Notice that the <xref:System.Windows.ContentElement.IsMouseDirectlyOverChanged> event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.\"\n  syntax:\n    content: protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsStylusCapturedChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptured%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsStylusCapturedChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.\"\n  syntax:\n    content: protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: A <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnIsStylusCapturedChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsStylusCaptureWithinChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusCaptureWithin%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsStylusCaptureWithinChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore, you cannot mark it as handled in the class handler.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.\"\n  syntax:\n    content: protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  commentId: M:System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  id: OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.ContentElement.IsStylusDirectlyOverChanged\"></xref> event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This virtual method is raised when the value of the <xref:System.Windows.ContentElement.IsStylusDirectlyOver%2A> dependency property changes its value. The virtual method is raised first and can manipulate the event data as necessary. Then the <xref:System.Windows.ContentElement.IsStylusDirectlyOverChanged> event is raised with that same event data instance. Notice that the event is not a routed event. Therefore you cannot mark it as handled in the class handler.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.\"\n  syntax:\n    content: protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DependencyPropertyChangedEventArgs\n      description: The <xref href=\"System.Windows.DependencyPropertyChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)\n  commentId: M:System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)\n  id: OnKeyDown(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnKeyDown(KeyEventArgs)\n  nameWithType: ContentElement.OnKeyDown(KeyEventArgs)\n  fullName: ContentElement.OnKeyDown(KeyEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.ContentElement.OnKeyDown%2A> is not invoked.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnKeyDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)\n  commentId: M:System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)\n  id: OnKeyUp(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnKeyUp(KeyEventArgs)\n  nameWithType: ContentElement.OnKeyUp(KeyEventArgs)\n  fullName: ContentElement.OnKeyUp(KeyEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.KeyUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then <xref:System.Windows.ContentElement.OnKeyUp%2A> is not invoked.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnKeyUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)\n  commentId: M:System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)\n  id: OnLostFocus(System.Windows.RoutedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnLostFocus(RoutedEventArgs)\n  nameWithType: ContentElement.OnLostFocus(RoutedEventArgs)\n  fullName: ContentElement.OnLostFocus(RoutedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Raises the <xref href=\"System.Windows.ContentElement.LostFocus\"></xref> routed event by using the event data that is provided.\n  remarks: \"This method, although virtual, does have a default implementation that raises the event.  \\n  \\n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.ContentElement.IsFocused%2A> property value changes. This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] On* implementations, which only provide a convenient way to add class handling for that event.\"\n  syntax:\n    content: protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.RoutedEventArgs\n      description: A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains event data. This event data must contain the identifier for the <xref href=\"System.Windows.ContentElement.LostFocus\"></xref> event.\n  overload: System.Windows.ContentElement.OnLostFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  commentId: M:System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  id: OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.LostKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyboardFocusChangedEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains event data.\n  overload: System.Windows.ContentElement.OnLostKeyboardFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)\n  commentId: M:System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)\n  id: OnLostMouseCapture(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnLostMouseCapture(MouseEventArgs)\n  nameWithType: ContentElement.OnLostMouseCapture(MouseEventArgs)\n  fullName: ContentElement.OnLostMouseCapture(MouseEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.LostMouseCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains event data.\n  overload: System.Windows.ContentElement.OnLostMouseCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)\n  id: OnLostStylusCapture(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnLostStylusCapture(StylusEventArgs)\n  nameWithType: ContentElement.OnLostStylusCapture(StylusEventArgs)\n  fullName: ContentElement.OnLostStylusCapture(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.LostStylusCapture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains event data.\n  overload: System.Windows.ContentElement.OnLostStylusCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)\n  id: OnLostTouchCapture(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnLostTouchCapture(TouchEventArgs)\n  nameWithType: ContentElement.OnLostTouchCapture(TouchEventArgs)\n  fullName: ContentElement.OnLostTouchCapture(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.ContentElement.LostTouchCapture\"></xref> routed event that occurs when this element loses a touch capture.\n  remarks: The <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> in a derived class to handle the <xref:System.Windows.ContentElement.LostTouchCapture> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnLostTouchCapture%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnLostTouchCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  id: OnMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnMouseDown(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnMouseDown(MouseButtonEventArgs)\n  fullName: ContentElement.OnMouseDown(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnMouseDown%2A> is not invoked.  \\n  \\n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonDown> and <xref:System.Windows.ContentElement.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.  \\n  \\n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.ContentElement.OnMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; therefore, use caution when you use this virtual method to mark events as handled.  \\n  \\n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.\n  overload: System.Windows.ContentElement.OnMouseDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)\n  commentId: M:System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)\n  id: OnMouseEnter(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnMouseEnter(MouseEventArgs)\n  nameWithType: ContentElement.OnMouseEnter(MouseEventArgs)\n  fullName: ContentElement.OnMouseEnter(MouseEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseEnter\"></xref> attached event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.\"\n  syntax:\n    content: protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnMouseEnter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)\n  commentId: M:System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)\n  id: OnMouseLeave(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnMouseLeave(MouseEventArgs)\n  nameWithType: ContentElement.OnMouseLeave(MouseEventArgs)\n  fullName: ContentElement.OnMouseLeave(MouseEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseLeave\"></xref> attached event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event, with a direct routing strategy. Marking the event as handled is still useful for preventing the typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.\"\n  syntax:\n    content: protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnMouseLeave*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  id: OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnMouseLeftButtonDown(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)\n  fullName: ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseLeftButtonDown\"></xref> routed event is raised on this element. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.ContentElement.MouseLeftButtonDown> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseLeftButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.MouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>.  \\n  \\n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.ContentElement.OnMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.\"\n  syntax:\n    content: protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was pressed.\n  overload: System.Windows.ContentElement.OnMouseLeftButtonDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  id: OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnMouseLeftButtonUp(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)\n  fullName: ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.ContentElement.MouseLeftButtonUp> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseLeftButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.MouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseLeftButtonUp%2A>.\"\n  syntax:\n    content: protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was released.\n  overload: System.Windows.ContentElement.OnMouseLeftButtonUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)\n  commentId: M:System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)\n  id: OnMouseMove(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnMouseMove(MouseEventArgs)\n  nameWithType: ContentElement.OnMouseMove(MouseEventArgs)\n  fullName: ContentElement.OnMouseMove(MouseEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnMouseMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  id: OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnMouseRightButtonDown(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)\n  fullName: ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.ContentElement.MouseRightButtonDown> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.MouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>.  \\n  \\n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.ContentElement.OnMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.\"\n  syntax:\n    content: protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was pressed.\n  overload: System.Windows.ContentElement.OnMouseRightButtonDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  id: OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnMouseRightButtonUp(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)\n  fullName: ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.ContentElement.MouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.ContentElement.MouseRightButtonUp> event appears to travel a bubbling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is the underlying event that is bubble routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.MouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnMouseRightButtonUp%2A>.\"\n  syntax:\n    content: protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was released.\n  overload: System.Windows.ContentElement.OnMouseRightButtonUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  id: OnMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnMouseUp(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnMouseUp(MouseButtonEventArgs)\n  fullName: ContentElement.OnMouseUp(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnMouseUp%2A> is not invoked.  \\n  \\n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.MouseLeftButtonUp> and <xref:System.Windows.ContentElement.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.  \\n  \\n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.ContentElement.OnMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \\n  \\n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the mouse button was released.\n  overload: System.Windows.ContentElement.OnMouseUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  commentId: M:System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  id: OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnMouseWheel(MouseWheelEventArgs)\n  nameWithType: ContentElement.OnMouseWheel(MouseWheelEventArgs)\n  fullName: ContentElement.OnMouseWheel(MouseWheelEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.MouseWheel\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseWheelEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseWheelEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnMouseWheel*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)\n  id: OnPreviewDragEnter(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewDragEnter(DragEventArgs)\n  nameWithType: ContentElement.OnPreviewDragEnter(DragEventArgs)\n  fullName: ContentElement.OnPreviewDragEnter(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragEnter\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewDragEnter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)\n  id: OnPreviewDragLeave(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewDragLeave(DragEventArgs)\n  nameWithType: ContentElement.OnPreviewDragLeave(DragEventArgs)\n  fullName: ContentElement.OnPreviewDragLeave(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragLeave\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewDragLeave*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)\n  id: OnPreviewDragOver(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewDragOver(DragEventArgs)\n  nameWithType: ContentElement.OnPreviewDragOver(DragEventArgs)\n  fullName: ContentElement.OnPreviewDragOver(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDragOver\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewDragOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)\n  id: OnPreviewDrop(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewDrop(DragEventArgs)\n  nameWithType: ContentElement.OnPreviewDrop(DragEventArgs)\n  fullName: ContentElement.OnPreviewDrop(DragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewDrop\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.DragEventArgs\n      description: The <xref href=\"System.Windows.DragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewDrop*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  id: OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)\n  nameWithType: ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)\n  fullName: ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewGiveFeedback\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.GiveFeedbackEventArgs\n      description: The <xref href=\"System.Windows.GiveFeedbackEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewGiveFeedback*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  id: OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewGotKeyboardFocus\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyboardFocusChangedEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewGotKeyboardFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)\n  id: OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewKeyDown(KeyEventArgs)\n  nameWithType: ContentElement.OnPreviewKeyDown(KeyEventArgs)\n  fullName: ContentElement.OnPreviewKeyDown(KeyEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewKeyDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)\n  id: OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewKeyUp(KeyEventArgs)\n  nameWithType: ContentElement.OnPreviewKeyUp(KeyEventArgs)\n  fullName: ContentElement.OnPreviewKeyUp(KeyEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewKeyUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  id: OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Keyboard.PreviewKeyDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.KeyboardFocusChangedEventArgs\n      description: The <xref href=\"System.Windows.Input.KeyboardFocusChangedEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewLostKeyboardFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  id: OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewMouseDown(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)\n  fullName: ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseDown\"></xref> attached routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> is not invoked.  \\n  \\n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.  \\n  \\n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A>, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \\n  \\n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that one or more mouse buttons were pressed.\n  overload: System.Windows.ContentElement.OnPreviewMouseDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  id: OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)\n  fullName: ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>.  \\n  \\n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Button> and override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> in your derived class without calling the base implementation; however, this override disables the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was pressed.\n  overload: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  id: OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)\n  fullName: ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A>.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the left mouse button was released.\n  overload: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)\n  id: OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewMouseMove(MouseEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseMove(MouseEventArgs)\n  fullName: ContentElement.OnPreviewMouseMove(MouseEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewMouseMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  id: OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)\n  fullName: ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonDown\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.MouseRightButtonDown>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>.  \\n  \\n Alternatively, you can override this method in order to change event handling for a specific mouse state. Whether you choose to call the base implementation depends on your scenario. Failing to call base disables default input handling for that mouse event on ancestor classes that also expect to invoke <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A>. For example, you can derive from <xref:System.Windows.Controls.Control> and override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> in your derived class without calling base; however, this override disables the context menu services on your control, which are part of the <xref:System.Windows.Controls.Control> default behavior.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was pressed.\n  overload: System.Windows.ContentElement.OnPreviewMouseRightButtonDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  id: OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)\n  fullName: ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonUp\"></xref> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"The <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> event appears to travel a tunneling route but actually travels in an indirect way. <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is the underlying event that is tunnel routed, and each <xref:System.Windows.ContentElement> along the event route uses identical handling to raise the direct routed event <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Although you can mark the <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> event as handled for purposes of this element, the handled state does not perpetuate to other elements along the event route. However, you might want to mark the event as handled in order to prevent general instance handlers (those that did not specify `handledEventsToo`) from being invoked.  \\n  \\n The default implementation for general mouse event handling in <xref:System.Windows.ContentElement> listens for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> and converts it to an appropriate local event. If you want to override this logic, you must create a derived class. In the static constructor of your derived class, register an alternative class handler for <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>. You cannot change the mouse handling behavior of <xref:System.Windows.ContentElement> by overriding <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A>.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that the right mouse button was released.\n  overload: System.Windows.ContentElement.OnPreviewMouseRightButtonUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  id: OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewMouseUp(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)\n  fullName: ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> is not invoked.  \\n  \\n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.  \\n  \\n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A>, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted; Therefore, use caution when you use this virtual method to mark events as handled.  \\n  \\n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \\n  \\n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseButtonEventArgs\"></xref> that contains the event data. The event data reports that one or more mouse buttons were released.\n  overload: System.Windows.ContentElement.OnPreviewMouseUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  id: OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewMouseWheel(MouseWheelEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)\n  fullName: ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.PreviewMouseWheel\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.MouseWheelEventArgs\n      description: The <xref href=\"System.Windows.Input.MouseWheelEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewMouseWheel*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  id: OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)\n  nameWithType: ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)\n  fullName: ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.PreviewQueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.QueryContinueDragEventArgs\n      description: The <xref href=\"System.Windows.QueryContinueDragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewQueryContinueDrag*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  id: OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)\n  fullName: ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewStylusButtonDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  id: OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)\n  fullName: ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewStylusButtonUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)\n  id: OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewStylusDown(StylusDownEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusDown(StylusDownEventArgs)\n  fullName: ContentElement.OnPreviewStylusDown(StylusDownEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusDownEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusDownEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewStylusDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  id: OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewStylusInAirMove(StylusEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)\n  fullName: ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewStylusInAirMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)\n  id: OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewStylusInRange(StylusEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusInRange(StylusEventArgs)\n  fullName: ContentElement.OnPreviewStylusInRange(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusInRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewStylusInRange*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)\n  id: OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewStylusMove(StylusEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusMove(StylusEventArgs)\n  fullName: ContentElement.OnPreviewStylusMove(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewStylusMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  id: OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewStylusOutOfRange(StylusEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)\n  fullName: ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewStylusOutOfRange*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  id: OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)\n  fullName: ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusSystemGestureEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewStylusSystemGesture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)\n  id: OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewStylusUp(StylusEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusUp(StylusEventArgs)\n  fullName: ContentElement.OnPreviewStylusUp(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.PreviewStylusUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewStylusUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)\n  id: OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewTextInput(TextCompositionEventArgs)\n  nameWithType: ContentElement.OnPreviewTextInput(TextCompositionEventArgs)\n  fullName: ContentElement.OnPreviewTextInput(TextCompositionEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.PreviewTextInput\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.\"\n  syntax:\n    content: protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TextCompositionEventArgs\n      description: The <xref href=\"System.Windows.Input.TextCompositionEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewTextInput*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)\n  id: OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewTouchDown(TouchEventArgs)\n  nameWithType: ContentElement.OnPreviewTouchDown(TouchEventArgs)\n  fullName: ContentElement.OnPreviewTouchDown(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.ContentElement.PreviewTouchDown\"></xref> routed event that occurs when a touch presses this element.\n  remarks: The <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchDown> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewTouchDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)\n  id: OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewTouchMove(TouchEventArgs)\n  nameWithType: ContentElement.OnPreviewTouchMove(TouchEventArgs)\n  fullName: ContentElement.OnPreviewTouchMove(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.ContentElement.PreviewTouchMove\"></xref> routed event that occurs when a touch moves while inside this element.\n  remarks: The <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchMove> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewTouchMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)\n  id: OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnPreviewTouchUp(TouchEventArgs)\n  nameWithType: ContentElement.OnPreviewTouchUp(TouchEventArgs)\n  fullName: ContentElement.OnPreviewTouchUp(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.ContentElement.PreviewTouchUp\"></xref> routed event that occurs when a touch is released inside this element.\n  remarks: The <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> in a derived class to handle the <xref:System.Windows.ContentElement.PreviewTouchUp> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnPreviewTouchUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  commentId: M:System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  id: OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnQueryContinueDrag(QueryContinueDragEventArgs)\n  nameWithType: ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)\n  fullName: ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.DragDrop.QueryContinueDrag\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.QueryContinueDragEventArgs\n      description: The <xref href=\"System.Windows.QueryContinueDragEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnQueryContinueDrag*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)\n  commentId: M:System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)\n  id: OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnQueryCursor(QueryCursorEventArgs)\n  nameWithType: ContentElement.OnQueryCursor(QueryCursorEventArgs)\n  fullName: ContentElement.OnQueryCursor(QueryCursorEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Mouse.QueryCursor\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.QueryCursorEventArgs\n      description: The <xref href=\"System.Windows.Input.QueryCursorEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnQueryCursor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  id: OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnStylusButtonDown(StylusButtonEventArgs)\n  nameWithType: ContentElement.OnStylusButtonDown(StylusButtonEventArgs)\n  fullName: ContentElement.OnStylusButtonDown(StylusButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnStylusButtonDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  commentId: M:System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  id: OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnStylusButtonUp(StylusButtonEventArgs)\n  nameWithType: ContentElement.OnStylusButtonUp(StylusButtonEventArgs)\n  fullName: ContentElement.OnStylusButtonUp(StylusButtonEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusButtonUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusButtonEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusButtonEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnStylusButtonUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)\n  commentId: M:System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)\n  id: OnStylusDown(System.Windows.Input.StylusDownEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnStylusDown(StylusDownEventArgs)\n  nameWithType: ContentElement.OnStylusDown(StylusDownEventArgs)\n  fullName: ContentElement.OnStylusDown(StylusDownEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusDown\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusDownEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusDownEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnStylusDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)\n  id: OnStylusEnter(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnStylusEnter(StylusEventArgs)\n  nameWithType: ContentElement.OnStylusEnter(StylusEventArgs)\n  fullName: ContentElement.OnStylusEnter(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusEnter\"></xref> attached event is raised by this element. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \\n  \\n The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.\"\n  syntax:\n    content: protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnStylusEnter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  id: OnStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnStylusInAirMove(StylusEventArgs)\n  nameWithType: ContentElement.OnStylusInAirMove(StylusEventArgs)\n  fullName: ContentElement.OnStylusInAirMove(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInAirMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnStylusInAirMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)\n  id: OnStylusInRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnStylusInRange(StylusEventArgs)\n  nameWithType: ContentElement.OnStylusInRange(StylusEventArgs)\n  fullName: ContentElement.OnStylusInRange(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusInRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnStylusInRange*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)\n  id: OnStylusLeave(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnStylusLeave(StylusEventArgs)\n  nameWithType: ContentElement.OnStylusLeave(StylusEventArgs)\n  fullName: ContentElement.OnStylusLeave(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusLeave\"></xref> attached event is raised by this element. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation. You may call base either before or after your special handling, depending on your requirements.  \\n  \\n The purpose of this method is similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. Marking the event as handled is still useful for preventing typical instance handlers (those that do not specify `handledEventsToo`) from being invoked.\"\n  syntax:\n    content: protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnStylusLeave*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)\n  id: OnStylusMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnStylusMove(StylusEventArgs)\n  nameWithType: ContentElement.OnStylusMove(StylusEventArgs)\n  fullName: ContentElement.OnStylusMove(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusMove\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnStylusMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  id: OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnStylusOutOfRange(StylusEventArgs)\n  nameWithType: ContentElement.OnStylusOutOfRange(StylusEventArgs)\n  fullName: ContentElement.OnStylusOutOfRange(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusOutOfRange\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnStylusOutOfRange*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  commentId: M:System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  id: OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)\n  nameWithType: ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)\n  fullName: ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusSystemGesture\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusSystemGestureEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusSystemGestureEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnStylusSystemGesture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)\n  commentId: M:System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)\n  id: OnStylusUp(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnStylusUp(StylusEventArgs)\n  nameWithType: ContentElement.OnStylusUp(StylusEventArgs)\n  fullName: ContentElement.OnStylusUp(StylusEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.Stylus.StylusUp\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.StylusEventArgs\n      description: The <xref href=\"System.Windows.Input.StylusEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnStylusUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)\n  commentId: M:System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)\n  id: OnTextInput(System.Windows.Input.TextCompositionEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnTextInput(TextCompositionEventArgs)\n  nameWithType: ContentElement.OnTextInput(TextCompositionEventArgs)\n  fullName: ContentElement.OnTextInput(TextCompositionEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Invoked when an unhandled <xref href=\"System.Windows.Input.TextCompositionManager.TextInput\"></xref> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.\n  remarks: \"This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \\n  \\n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \\n  \\n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.ContentElement> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.\"\n  syntax:\n    content: protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TextCompositionEventArgs\n      description: The <xref href=\"System.Windows.Input.TextCompositionEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnTextInput*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)\n  id: OnTouchDown(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnTouchDown(TouchEventArgs)\n  nameWithType: ContentElement.OnTouchDown(TouchEventArgs)\n  fullName: ContentElement.OnTouchDown(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.ContentElement.TouchDown\"></xref> routed event that occurs when a touch presses inside this element.\n  remarks: The <xref:System.Windows.ContentElement.OnTouchDown%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchDown%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchDown> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchDown%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnTouchDown*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)\n  id: OnTouchEnter(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnTouchEnter(TouchEventArgs)\n  nameWithType: ContentElement.OnTouchEnter(TouchEventArgs)\n  fullName: ContentElement.OnTouchEnter(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.ContentElement.TouchEnter\"></xref> routed event that occurs when a touch moves from outside to inside the bounds of this element.\n  remarks: The <xref:System.Windows.ContentElement.OnTouchEnter%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchEnter%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchEnter> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchEnter%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnTouchEnter*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)\n  id: OnTouchLeave(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnTouchLeave(TouchEventArgs)\n  nameWithType: ContentElement.OnTouchLeave(TouchEventArgs)\n  fullName: ContentElement.OnTouchLeave(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.ContentElement.TouchLeave\"></xref> routed event that occurs when a touch moves from inside to outside the bounds of this element.\n  remarks: The <xref:System.Windows.ContentElement.OnTouchLeave%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchLeave%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchLeave> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchLeave%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnTouchLeave*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)\n  id: OnTouchMove(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnTouchMove(TouchEventArgs)\n  nameWithType: ContentElement.OnTouchMove(TouchEventArgs)\n  fullName: ContentElement.OnTouchMove(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.ContentElement.TouchMove\"></xref> routed event that occurs when a touch moves while inside this element.\n  remarks: The <xref:System.Windows.ContentElement.OnTouchMove%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchMove%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchMove> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchMove%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnTouchMove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)\n  commentId: M:System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)\n  id: OnTouchUp(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: OnTouchUp(TouchEventArgs)\n  nameWithType: ContentElement.OnTouchUp(TouchEventArgs)\n  fullName: ContentElement.OnTouchUp(TouchEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Provides class handling for the <xref href=\"System.Windows.ContentElement.TouchUp\"></xref> routed event that occurs when a touch is released inside this element.\n  remarks: The <xref:System.Windows.ContentElement.OnTouchUp%2A> method has no default implementation. Override <xref:System.Windows.ContentElement.OnTouchUp%2A> in a derived class to handle the <xref:System.Windows.ContentElement.TouchUp> event. Be sure to call the base class’s <xref:System.Windows.ContentElement.OnTouchUp%2A> method so that base classes receive the event.\n  syntax:\n    content: protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.TouchEventArgs\n      description: A <xref href=\"System.Windows.Input.TouchEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.ContentElement.OnTouchUp*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  commentId: M:System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  id: PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PredictFocus(FocusNavigationDirection)\n  nameWithType: ContentElement.PredictFocus(FocusNavigationDirection)\n  fullName: ContentElement.PredictFocus(FocusNavigationDirection)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: When overridden in a derived class, returns the element that would receive focus for a specified focus traversal direction, without actually moving focus to that element.\n  remarks: The default implementation of this method in this class is incomplete and always returns `null`.\n  syntax:\n    content: public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);\n    parameters:\n    - id: direction\n      type: System.Windows.Input.FocusNavigationDirection\n      description: The direction of the requested focus traversal.\n    return:\n      type: System.Windows.DependencyObject\n      description: The element that would have received focus if <xref href=\"System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)\"></xref> were actually invoked.\n  overload: System.Windows.ContentElement.PredictFocus*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewDragEnter\n  commentId: E:System.Windows.ContentElement.PreviewDragEnter\n  id: PreviewDragEnter\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewDragEnter\n  nameWithType: ContentElement.PreviewDragEnter\n  fullName: ContentElement.PreviewDragEnter\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drag event with this element as the drag target.\n  remarks: \"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragEnter> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewDragEnter\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewDragEnterEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.DragEnter>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewDragEnter%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler PreviewDragEnter;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewDragEnterEvent\n  commentId: F:System.Windows.ContentElement.PreviewDragEnterEvent\n  id: PreviewDragEnterEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewDragEnterEvent\n  nameWithType: ContentElement.PreviewDragEnterEvent\n  fullName: ContentElement.PreviewDragEnterEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewDragEnter\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewDragLeave\n  commentId: E:System.Windows.ContentElement.PreviewDragLeave\n  id: PreviewDragLeave\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewDragLeave\n  nameWithType: ContentElement.PreviewDragLeave\n  fullName: ContentElement.PreviewDragLeave\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drag event with this element as the drag origin.\n  remarks: \"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragLeave> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewDragLeave\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewDragLeaveEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.DragLeave>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewDragLeave%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler PreviewDragLeave;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewDragLeaveEvent\n  commentId: F:System.Windows.ContentElement.PreviewDragLeaveEvent\n  id: PreviewDragLeaveEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewDragLeaveEvent\n  nameWithType: ContentElement.PreviewDragLeaveEvent\n  fullName: ContentElement.PreviewDragLeaveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewDragLeave\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewDragOver\n  commentId: E:System.Windows.ContentElement.PreviewDragOver\n  id: PreviewDragOver\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewDragOver\n  nameWithType: ContentElement.PreviewDragOver\n  fullName: ContentElement.PreviewDragOver\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drag event with this element as the potential drop target.\n  remarks: \"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDragOver> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDragOver> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewDragOver\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewDragOverEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.DragOver>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewDragOver%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler PreviewDragOver;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewDragOverEvent\n  commentId: F:System.Windows.ContentElement.PreviewDragOverEvent\n  id: PreviewDragOverEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewDragOverEvent\n  nameWithType: ContentElement.PreviewDragOverEvent\n  fullName: ContentElement.PreviewDragOverEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewDragOver\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.PreviewDrop\n  commentId: E:System.Windows.ContentElement.PreviewDrop\n  id: PreviewDrop\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewDrop\n  nameWithType: ContentElement.PreviewDrop\n  fullName: ContentElement.PreviewDrop\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the input system reports an underlying drop event with this element as the drop target.\n  remarks: \"This event creates an alias for the <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewDrop> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewDrop> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewDrop\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewDropEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.DragEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.Drop>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewDrop%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.DragEventHandler PreviewDrop;\n    return:\n      type: System.Windows.DragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewDropEvent\n  commentId: F:System.Windows.ContentElement.PreviewDropEvent\n  id: PreviewDropEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewDropEvent\n  nameWithType: ContentElement.PreviewDropEvent\n  fullName: ContentElement.PreviewDropEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewDrop\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewDropEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewGiveFeedback\n  commentId: E:System.Windows.ContentElement.PreviewGiveFeedback\n  id: PreviewGiveFeedback\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewGiveFeedback\n  nameWithType: ContentElement.PreviewGiveFeedback\n  fullName: ContentElement.PreviewGiveFeedback\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a drag-and-drop operation is started.\n  remarks: \"The <xref:System.Windows.ContentElement.PreviewGiveFeedback> event enables the source of a drag event to modify the appearance of the mouse pointer, in order to give the user visual feedback during a drag-and-drop operation.  \\n  \\n This event creates an alias for the <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewGiveFeedback> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewGiveFeedback> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewGiveFeedback\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewGiveFeedbackEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.GiveFeedbackEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.GiveFeedback>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewGiveFeedback%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;\n    return:\n      type: System.Windows.GiveFeedbackEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.PreviewGiveFeedbackEvent\n  commentId: F:System.Windows.ContentElement.PreviewGiveFeedbackEvent\n  id: PreviewGiveFeedbackEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewGiveFeedbackEvent\n  nameWithType: ContentElement.PreviewGiveFeedbackEvent\n  fullName: ContentElement.PreviewGiveFeedbackEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewGiveFeedback\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewGotKeyboardFocus\n  commentId: E:System.Windows.ContentElement.PreviewGotKeyboardFocus\n  id: PreviewGotKeyboardFocus\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewGotKeyboardFocus\n  nameWithType: ContentElement.PreviewGotKeyboardFocus\n  fullName: ContentElement.PreviewGotKeyboardFocus\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the keyboard is focused on this element.\n  remarks: \"Because this event uses tunneling routing, the element that has focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that has focus.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewGotKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewGotKeyboardFocus\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.GotKeyboardFocus>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewGotKeyboardFocus%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;\n    return:\n      type: System.Windows.Input.KeyboardFocusChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewGotKeyboardFocusEvent\n  commentId: F:System.Windows.ContentElement.PreviewGotKeyboardFocusEvent\n  id: PreviewGotKeyboardFocusEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewGotKeyboardFocusEvent\n  nameWithType: ContentElement.PreviewGotKeyboardFocusEvent\n  fullName: ContentElement.PreviewGotKeyboardFocusEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewGotKeyboardFocus\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.PreviewKeyDown\n  commentId: E:System.Windows.ContentElement.PreviewKeyDown\n  id: PreviewKeyDown\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewKeyDown\n  nameWithType: ContentElement.PreviewKeyDown\n  fullName: ContentElement.PreviewKeyDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a key is pressed while the keyboard is focused on this element.\n  remarks: \"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.ContentElement.KeyDown> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewKeyDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewKeyDown> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewKeyDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewKeyDownEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.KeyDown>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewKeyDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyEventHandler PreviewKeyDown;\n    return:\n      type: System.Windows.Input.KeyEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewKeyDownEvent\n  commentId: F:System.Windows.ContentElement.PreviewKeyDownEvent\n  id: PreviewKeyDownEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewKeyDownEvent\n  nameWithType: ContentElement.PreviewKeyDownEvent\n  fullName: ContentElement.PreviewKeyDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewKeyDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.PreviewKeyUp\n  commentId: E:System.Windows.ContentElement.PreviewKeyUp\n  id: PreviewKeyUp\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewKeyUp\n  nameWithType: ContentElement.PreviewKeyUp\n  fullName: ContentElement.PreviewKeyUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a key is released while the keyboard is focused on this element.\n  remarks: \"Key handling interacts with other platform features such as commanding and text composition. The <xref:System.Windows.ContentElement.KeyUp> event is a lower-level text input event that might not behave as expected on certain controls. This is because some controls have control compositing or class handling that provides a higher-level version of text input handling and related events. For details, check the documentation for individual controls.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewKeyUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewKeyUp> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewKeyUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewKeyUpEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.KeyEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.KeyUp>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewKeyUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyEventHandler PreviewKeyUp;\n    return:\n      type: System.Windows.Input.KeyEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewKeyUpEvent\n  commentId: F:System.Windows.ContentElement.PreviewKeyUpEvent\n  id: PreviewKeyUpEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewKeyUpEvent\n  nameWithType: ContentElement.PreviewKeyUpEvent\n  fullName: ContentElement.PreviewKeyUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewKeyUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewLostKeyboardFocus\n  commentId: E:System.Windows.ContentElement.PreviewLostKeyboardFocus\n  id: PreviewLostKeyboardFocus\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewLostKeyboardFocus\n  nameWithType: ContentElement.PreviewLostKeyboardFocus\n  fullName: ContentElement.PreviewLostKeyboardFocus\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the keyboard is no longer focused on this element.\n  remarks: \"Because this event uses tunneling routing, the element that lost focus might be a child element instead of the element where the event handler is actually attached. Check the <xref:System.Windows.RoutedEventArgs.Source%2A> in the event data to determine the actual element that lost focus.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewLostKeyboardFocus> event are attached to the underlying <xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewLostKeyboardFocus\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.LostKeyboardFocus>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewLostKeyboardFocus%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;\n    return:\n      type: System.Windows.Input.KeyboardFocusChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewLostKeyboardFocusEvent\n  commentId: F:System.Windows.ContentElement.PreviewLostKeyboardFocusEvent\n  id: PreviewLostKeyboardFocusEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewLostKeyboardFocusEvent\n  nameWithType: ContentElement.PreviewLostKeyboardFocusEvent\n  fullName: ContentElement.PreviewLostKeyboardFocusEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewLostKeyboardFocus\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewMouseDown\n  commentId: E:System.Windows.ContentElement.PreviewMouseDown\n  id: PreviewMouseDown\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseDown\n  nameWithType: ContentElement.PreviewMouseDown\n  fullName: ContentElement.PreviewMouseDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when any mouse button is pressed while the pointer is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseDown> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n The <xref:System.Windows.ContentElement.PreviewMouseDown> event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonDown> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonDown>.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseDownEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseDown>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewMouseDownEvent\n  commentId: F:System.Windows.ContentElement.PreviewMouseDownEvent\n  id: PreviewMouseDownEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseDownEvent\n  nameWithType: ContentElement.PreviewMouseDownEvent\n  fullName: ContentElement.PreviewMouseDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDown\n  commentId: E:System.Windows.ContentElement.PreviewMouseLeftButtonDown\n  id: PreviewMouseLeftButtonDown\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseLeftButtonDown\n  nameWithType: ContentElement.PreviewMouseLeftButtonDown\n  fullName: ContentElement.PreviewMouseLeftButtonDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the left mouse button is pressed while the mouse pointer is over this element.\n  remarks: \"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseLeftButtonDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent\n  commentId: F:System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent\n  id: PreviewMouseLeftButtonDownEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseLeftButtonDownEvent\n  nameWithType: ContentElement.PreviewMouseLeftButtonDownEvent\n  fullName: ContentElement.PreviewMouseLeftButtonDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUp\n  commentId: E:System.Windows.ContentElement.PreviewMouseLeftButtonUp\n  id: PreviewMouseLeftButtonUp\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseLeftButtonUp\n  nameWithType: ContentElement.PreviewMouseLeftButtonUp\n  fullName: ContentElement.PreviewMouseLeftButtonUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the left mouse button is released while the mouse pointer is over this element.\n  remarks: \"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseLeftButtonUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseLeftButtonUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent\n  commentId: F:System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent\n  id: PreviewMouseLeftButtonUpEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseLeftButtonUpEvent\n  nameWithType: ContentElement.PreviewMouseLeftButtonUpEvent\n  fullName: ContentElement.PreviewMouseLeftButtonUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseLeftButtonUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewMouseMove\n  commentId: E:System.Windows.ContentElement.PreviewMouseMove\n  id: PreviewMouseMove\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseMove\n  nameWithType: ContentElement.PreviewMouseMove\n  fullName: ContentElement.PreviewMouseMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the mouse pointer moves while the mouse pointer is over this element.\n  remarks: \"This event occurs both when the mouse pointer first enters into the element bounds, and also when the mouse pointer moves while still remaining within the element bounds.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseMoveEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.MouseEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseMove>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseEventHandler PreviewMouseMove;\n    return:\n      type: System.Windows.Input.MouseEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewMouseMoveEvent\n  commentId: F:System.Windows.ContentElement.PreviewMouseMoveEvent\n  id: PreviewMouseMoveEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseMoveEvent\n  nameWithType: ContentElement.PreviewMouseMoveEvent\n  fullName: ContentElement.PreviewMouseMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseMove\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.PreviewMouseRightButtonDown\n  commentId: E:System.Windows.ContentElement.PreviewMouseRightButtonDown\n  id: PreviewMouseRightButtonDown\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseRightButtonDown\n  nameWithType: ContentElement.PreviewMouseRightButtonDown\n  fullName: ContentElement.PreviewMouseRightButtonDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the right mouse button is pressed while the mouse pointer is over this element.\n  remarks: \"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseRightButtonDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewMouseRightButtonDownEvent\n  commentId: F:System.Windows.ContentElement.PreviewMouseRightButtonDownEvent\n  id: PreviewMouseRightButtonDownEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseRightButtonDownEvent\n  nameWithType: ContentElement.PreviewMouseRightButtonDownEvent\n  fullName: ContentElement.PreviewMouseRightButtonDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewMouseRightButtonUp\n  commentId: E:System.Windows.ContentElement.PreviewMouseRightButtonUp\n  id: PreviewMouseRightButtonUp\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseRightButtonUp\n  nameWithType: ContentElement.PreviewMouseRightButtonUp\n  fullName: ContentElement.PreviewMouseRightButtonUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the right mouse button is released while the mouse pointer is over this element.\n  remarks: \"Although this [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) seems to follow a tunneling route through an element tree, it actually is a direct routed event that is raised and reraised along the element tree by each <xref:System.Windows.ContentElement>.  \\n  \\n This event is one of several related events that report the mouse-button specifics of an underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event, which is an attached event that is processed by each element along an event route.  \\n  \\n The arguments of this event expose the arguments of the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event. If that event is marked as handled along the event route, the mouse-button specific events are still raised; however, handlers of the mouse-button specific events must be added by explicitly calling <xref:System.Windows.ContentElement.AddHandler%2A>, with the option to handle events that are already marked as handled, in order to be listeners to the event.  \\n  \\n Conceptually, think of this event (and other mouse-button events on <xref:System.Windows.ContentElement>) to be a mouse \\\"service\\\" (with the service definition provided by the <xref:System.Windows.Input.Mouse> class). The event adds the convenience of not needing to check the mouse button states (left-right, up-down) of the original mouse events in the event data. For more advanced scenarios, such as checking for states of non-standard buttons, you might need to use the [!INCLUDE[TLA#tla_api#plural](~/includes/tlasharptla-apisharpplural-md.md)] on the <xref:System.Windows.Input.Mouse> class rather than those on <xref:System.Windows.ContentElement>.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseRightButtonUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseRightButtonUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewMouseRightButtonUpEvent\n  commentId: F:System.Windows.ContentElement.PreviewMouseRightButtonUpEvent\n  id: PreviewMouseRightButtonUpEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseRightButtonUpEvent\n  nameWithType: ContentElement.PreviewMouseRightButtonUpEvent\n  fullName: ContentElement.PreviewMouseRightButtonUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseRightButtonUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewMouseUp\n  commentId: E:System.Windows.ContentElement.PreviewMouseUp\n  id: PreviewMouseUp\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseUp\n  nameWithType: ContentElement.PreviewMouseUp\n  fullName: ContentElement.PreviewMouseUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when any mouse button is released while the mouse pointer is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseUp> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n The <xref:System.Windows.ContentElement.PreviewMouseUp> event is often raised together with either <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>, which correspond to a press of one of the two standard mouse buttons. <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> and <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp> are also routed events, but they are direct routed events, and the appropriate button-specific event is raised when the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event reaches this element along the event route. See Remarks for <xref:System.Windows.ContentElement.PreviewMouseLeftButtonUp> or <xref:System.Windows.ContentElement.PreviewMouseRightButtonUp>.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseUpEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.MouseButtonEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseUp>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;\n    return:\n      type: System.Windows.Input.MouseButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewMouseUpEvent\n  commentId: F:System.Windows.ContentElement.PreviewMouseUpEvent\n  id: PreviewMouseUpEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseUpEvent\n  nameWithType: ContentElement.PreviewMouseUpEvent\n  fullName: ContentElement.PreviewMouseUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.PreviewMouseWheel\n  commentId: E:System.Windows.ContentElement.PreviewMouseWheel\n  id: PreviewMouseWheel\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseWheel\n  nameWithType: ContentElement.PreviewMouseWheel\n  fullName: ContentElement.PreviewMouseWheel\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the user rotates the mouse wheel while the mouse pointer is over this element.\n  remarks: \"Focus or mouse capture take precedence over where the mouse pointer is; therefore, if you receive this event from a focused or captured element, the mouse pointer might actually be over another element.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewMouseMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewMouseMove> event are attached to the underlying <xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewMouseWheel\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewMouseWheelEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.MouseWheelEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.MouseWheel>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewMouseWheel%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;\n    return:\n      type: System.Windows.Input.MouseWheelEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewMouseWheelEvent\n  commentId: F:System.Windows.ContentElement.PreviewMouseWheelEvent\n  id: PreviewMouseWheelEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewMouseWheelEvent\n  nameWithType: ContentElement.PreviewMouseWheelEvent\n  fullName: ContentElement.PreviewMouseWheelEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewMouseWheel\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewQueryContinueDrag\n  commentId: E:System.Windows.ContentElement.PreviewQueryContinueDrag\n  id: PreviewQueryContinueDrag\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewQueryContinueDrag\n  nameWithType: ContentElement.PreviewQueryContinueDrag\n  fullName: ContentElement.PreviewQueryContinueDrag\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.\n  remarks: \"The <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> event enables the drag source to declare whether the drag-and-drop operation should be canceled.  \\n  \\n This event creates an alias for the <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewQueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewQueryContinueDrag\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewQueryContinueDragEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.QueryContinueDrag>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewQueryContinueDrag%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;\n    return:\n      type: System.Windows.QueryContinueDragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.PreviewQueryContinueDragEvent\n  commentId: F:System.Windows.ContentElement.PreviewQueryContinueDragEvent\n  id: PreviewQueryContinueDragEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewQueryContinueDragEvent\n  nameWithType: ContentElement.PreviewQueryContinueDragEvent\n  fullName: ContentElement.PreviewQueryContinueDragEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewQueryContinueDrag\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusButtonDown\n  commentId: E:System.Windows.ContentElement.PreviewStylusButtonDown\n  id: PreviewStylusButtonDown\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusButtonDown\n  nameWithType: ContentElement.PreviewStylusButtonDown\n  fullName: ContentElement.PreviewStylusButtonDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus button is pressed while the pointer is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusButtonDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusButtonDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusButtonDownEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusButtonDown>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusButtonDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;\n    return:\n      type: System.Windows.Input.StylusButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusButtonDownEvent\n  commentId: F:System.Windows.ContentElement.PreviewStylusButtonDownEvent\n  id: PreviewStylusButtonDownEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusButtonDownEvent\n  nameWithType: ContentElement.PreviewStylusButtonDownEvent\n  fullName: ContentElement.PreviewStylusButtonDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusButtonDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusButtonUp\n  commentId: E:System.Windows.ContentElement.PreviewStylusButtonUp\n  id: PreviewStylusButtonUp\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusButtonUp\n  nameWithType: ContentElement.PreviewStylusButtonUp\n  fullName: ContentElement.PreviewStylusButtonUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus button is released while the pointer is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusButtonUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusButtonUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusButtonUpEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusButtonUp>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusButtonUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;\n    return:\n      type: System.Windows.Input.StylusButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusButtonUpEvent\n  commentId: F:System.Windows.ContentElement.PreviewStylusButtonUpEvent\n  id: PreviewStylusButtonUpEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusButtonUpEvent\n  nameWithType: ContentElement.PreviewStylusButtonUpEvent\n  fullName: ContentElement.PreviewStylusButtonUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusButtonUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusDown\n  commentId: E:System.Windows.ContentElement.PreviewStylusDown\n  id: PreviewStylusDown\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusDown\n  nameWithType: ContentElement.PreviewStylusDown\n  fullName: ContentElement.PreviewStylusDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus touches the digitizer while it is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusDownEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusDown>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;\n    return:\n      type: System.Windows.Input.StylusDownEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusDownEvent\n  commentId: F:System.Windows.ContentElement.PreviewStylusDownEvent\n  id: PreviewStylusDownEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusDownEvent\n  nameWithType: ContentElement.PreviewStylusDownEvent\n  fullName: ContentElement.PreviewStylusDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.PreviewStylusInAirMove\n  commentId: E:System.Windows.ContentElement.PreviewStylusInAirMove\n  id: PreviewStylusInAirMove\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusInAirMove\n  nameWithType: ContentElement.PreviewStylusInAirMove\n  fullName: ContentElement.PreviewStylusInAirMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus moves over an element without actually touching the digitizer.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusInAirMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusInAirMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusInAirMoveEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusInAirMove>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusInAirMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusInAirMoveEvent\n  commentId: F:System.Windows.ContentElement.PreviewStylusInAirMoveEvent\n  id: PreviewStylusInAirMoveEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusInAirMoveEvent\n  nameWithType: ContentElement.PreviewStylusInAirMoveEvent\n  fullName: ContentElement.PreviewStylusInAirMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusInAirMove\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusInRange\n  commentId: E:System.Windows.ContentElement.PreviewStylusInRange\n  id: PreviewStylusInRange\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusInRange\n  nameWithType: ContentElement.PreviewStylusInRange\n  fullName: ContentElement.PreviewStylusInRange\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus is close enough to the digitizer to be detected, while over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusInRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusInRange\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusInRangeEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusInRange>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusInRange%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusInRangeEvent\n  commentId: F:System.Windows.ContentElement.PreviewStylusInRangeEvent\n  id: PreviewStylusInRangeEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusInRangeEvent\n  nameWithType: ContentElement.PreviewStylusInRangeEvent\n  fullName: ContentElement.PreviewStylusInRangeEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusInRange\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusMove\n  commentId: E:System.Windows.ContentElement.PreviewStylusMove\n  id: PreviewStylusMove\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusMove\n  nameWithType: ContentElement.PreviewStylusMove\n  fullName: ContentElement.PreviewStylusMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus moves while over the element. The stylus must move while being detected by the  digitizer  to raise this event, otherwise, <xref href=\"System.Windows.ContentElement.PreviewStylusInAirMove\"></xref> is raised instead.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusMoveEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusMove>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler PreviewStylusMove;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusMoveEvent\n  commentId: F:System.Windows.ContentElement.PreviewStylusMoveEvent\n  id: PreviewStylusMoveEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusMoveEvent\n  nameWithType: ContentElement.PreviewStylusMoveEvent\n  fullName: ContentElement.PreviewStylusMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusMove\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.PreviewStylusOutOfRange\n  commentId: E:System.Windows.ContentElement.PreviewStylusOutOfRange\n  id: PreviewStylusOutOfRange\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusOutOfRange\n  nameWithType: ContentElement.PreviewStylusOutOfRange\n  fullName: ContentElement.PreviewStylusOutOfRange\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus is too far from the digitizer to be detected.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusOutOfRange\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusOutOfRange>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusOutOfRange%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusOutOfRangeEvent\n  commentId: F:System.Windows.ContentElement.PreviewStylusOutOfRangeEvent\n  id: PreviewStylusOutOfRangeEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusOutOfRangeEvent\n  nameWithType: ContentElement.PreviewStylusOutOfRangeEvent\n  fullName: ContentElement.PreviewStylusOutOfRangeEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusOutOfRange\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusSystemGesture\n  commentId: E:System.Windows.ContentElement.PreviewStylusSystemGesture\n  id: PreviewStylusSystemGesture\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusSystemGesture\n  nameWithType: ContentElement.PreviewStylusSystemGesture\n  fullName: ContentElement.PreviewStylusSystemGesture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a user performs one of several stylus gestures.\n  remarks: \"For information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusSystemGesture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusSystemGestureEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusSystemGesture>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusSystemGesture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;\n    return:\n      type: System.Windows.Input.StylusSystemGestureEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusSystemGestureEvent\n  commentId: F:System.Windows.ContentElement.PreviewStylusSystemGestureEvent\n  id: PreviewStylusSystemGestureEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusSystemGestureEvent\n  nameWithType: ContentElement.PreviewStylusSystemGestureEvent\n  fullName: ContentElement.PreviewStylusSystemGestureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusSystemGesture\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusUp\n  commentId: E:System.Windows.ContentElement.PreviewStylusUp\n  id: PreviewStylusUp\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusUp\n  nameWithType: ContentElement.PreviewStylusUp\n  fullName: ContentElement.PreviewStylusUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the user raises the stylus off the digitizer while the stylus is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewStylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewStylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_PreviewStylusUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewStylusUpEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.StylusUp>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewStylusUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler PreviewStylusUp;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewStylusUpEvent\n  commentId: F:System.Windows.ContentElement.PreviewStylusUpEvent\n  id: PreviewStylusUpEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewStylusUpEvent\n  nameWithType: ContentElement.PreviewStylusUpEvent\n  fullName: ContentElement.PreviewStylusUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewStylusUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewTextInput\n  commentId: E:System.Windows.ContentElement.PreviewTextInput\n  id: PreviewTextInput\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewTextInput\n  nameWithType: ContentElement.PreviewTextInput\n  fullName: ContentElement.PreviewTextInput\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element gets text in a device-independent manner.\n  remarks: \"The <xref:System.Windows.ContentElement.PreviewTextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.ContentElement.PreviewTextInput>; but speech, handwriting, and other input devices can also generate <xref:System.Windows.ContentElement.PreviewTextInput>.  \\n  \\n Because of key combinations—either in default keyboards or through input method editors—multiple key events may raise just one text input event.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.PreviewTextInput> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.PreviewTextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_PreviewTextInput\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewTextInputEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.TextInput>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewTextInput%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;\n    return:\n      type: System.Windows.Input.TextCompositionEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.PreviewTextInputEvent\n  commentId: F:System.Windows.ContentElement.PreviewTextInputEvent\n  id: PreviewTextInputEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewTextInputEvent\n  nameWithType: ContentElement.PreviewTextInputEvent\n  fullName: ContentElement.PreviewTextInputEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewTextInput\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewTouchDown\n  commentId: E:System.Windows.ContentElement.PreviewTouchDown\n  id: PreviewTouchDown\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewTouchDown\n  nameWithType: ContentElement.PreviewTouchDown\n  fullName: ContentElement.PreviewTouchDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a finger touches the screen while the finger is over this element.\n  remarks: \"By default, the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.  \\n  \\n To cause the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> attached property to `false` for this element.  \\n  \\n<a name=\\\"routedEventInfo_PreviewTouchDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewTouchDownEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchDown>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewTouchDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.PreviewTouchDownEvent\n  commentId: F:System.Windows.ContentElement.PreviewTouchDownEvent\n  id: PreviewTouchDownEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewTouchDownEvent\n  nameWithType: ContentElement.PreviewTouchDownEvent\n  fullName: ContentElement.PreviewTouchDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewTouchDown\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewTouchMove\n  commentId: E:System.Windows.ContentElement.PreviewTouchMove\n  id: PreviewTouchMove\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewTouchMove\n  nameWithType: ContentElement.PreviewTouchMove\n  fullName: ContentElement.PreviewTouchMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a finger moves on the screen while the finger is over this element.\n  remarks: \"<a name=\\\"routedEventInfo_PreviewTouchMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewTouchMoveEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchMove>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewTouchMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewTouchMoveEvent\n  commentId: F:System.Windows.ContentElement.PreviewTouchMoveEvent\n  id: PreviewTouchMoveEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewTouchMoveEvent\n  nameWithType: ContentElement.PreviewTouchMoveEvent\n  fullName: ContentElement.PreviewTouchMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewTouchMove\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.PreviewTouchUp\n  commentId: E:System.Windows.ContentElement.PreviewTouchUp\n  id: PreviewTouchUp\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewTouchUp\n  nameWithType: ContentElement.PreviewTouchUp\n  fullName: ContentElement.PreviewTouchUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a finger is raised off of the screen while the finger is over this element.\n  remarks: \"<a name=\\\"routedEventInfo_PreviewTouchUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.PreviewTouchUpEvent>|  \\n|Routing strategy|Tunneling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   The corresponding bubbling event is <xref:System.Windows.ContentElement.TouchUp>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnPreviewTouchUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.PreviewTouchUpEvent\n  commentId: F:System.Windows.ContentElement.PreviewTouchUpEvent\n  id: PreviewTouchUpEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: PreviewTouchUpEvent\n  nameWithType: ContentElement.PreviewTouchUpEvent\n  fullName: ContentElement.PreviewTouchUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.PreviewTouchUp\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.QueryContinueDrag\n  commentId: E:System.Windows.ContentElement.QueryContinueDrag\n  id: QueryContinueDrag\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: QueryContinueDrag\n  nameWithType: ContentElement.QueryContinueDrag\n  fullName: ContentElement.QueryContinueDrag\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when there is a change in the keyboard or mouse button state during a drag-and-drop operation.\n  remarks: \"The <xref:System.Windows.ContentElement.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.  \\n  \\n This event creates an alias for the <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.QueryContinueDrag> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.QueryContinueDrag> event are attached to the underlying <xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_QueryContinueDrag\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.QueryContinueDragEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.QueryContinueDragEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewQueryContinueDrag>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnQueryContinueDrag%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;\n    return:\n      type: System.Windows.QueryContinueDragEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.QueryContinueDragEvent\n  commentId: F:System.Windows.ContentElement.QueryContinueDragEvent\n  id: QueryContinueDragEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: QueryContinueDragEvent\n  nameWithType: ContentElement.QueryContinueDragEvent\n  fullName: ContentElement.QueryContinueDragEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.QueryContinueDrag\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.QueryCursor\n  commentId: E:System.Windows.ContentElement.QueryCursor\n  id: QueryCursor\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: QueryCursor\n  nameWithType: ContentElement.QueryCursor\n  fullName: ContentElement.QueryCursor\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the cursor is requested to display. This event is raised on an element each time that the mouse pointer moves to a new location, which means the cursor object might need to be changed based on its new position.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.QueryCursor> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.QueryCursor> event are attached to the underlying <xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n The cursor being referred to by this event name is not necessarily the text cursor (sometimes known as the insertion point). Instead, the cursor in this context is the object that declares the onscreen graphical display related to several possible input-related devices or concepts in [!INCLUDE[TLA2#tla_win](~/includes/tla2sharptla-win-md.md)] programming. That object is represented by the <xref:System.Windows.Input.Cursor> class in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]. The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] input system enables you to change this cursor when it represents the onscreen position of the mouse pointer. You can use predefined values from the <xref:System.Windows.Input.Cursors> enumeration, or you can declare a custom cursor as an image file.  \\n  \\n Listening for the <xref:System.Windows.ContentElement.QueryCursor> event is not an efficient technique for cursor management. Instead, each element should define its own cursor behavior with <xref:System.Windows.FrameworkContentElement.Cursor%2A> and <xref:System.Windows.FrameworkContentElement.ForceCursor%2A>. You should only rely on <xref:System.Windows.ContentElement.QueryCursor> if you are not using the WPF framework-level base elements, or in extraordinary circumstances where defining cursor behavior on a per-element basis does not meet your needs. For more information on implementing cursor behavior in response to <xref:System.Windows.ContentElement.QueryCursor>, see <xref:System.Windows.Input.QueryCursorEventHandler>.  \\n  \\n<a name=\\\"routedEventInfo_QueryCursor\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.QueryCursorEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.QueryCursorEventHandler>|  \\n  \\n-   There is no defined corresponding tunneling event.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnQueryCursor%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.QueryCursorEventHandler QueryCursor;\n    return:\n      type: System.Windows.Input.QueryCursorEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.QueryCursorEvent\n  commentId: F:System.Windows.ContentElement.QueryCursorEvent\n  id: QueryCursorEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: QueryCursorEvent\n  nameWithType: ContentElement.QueryCursorEvent\n  fullName: ContentElement.QueryCursorEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.QueryCursor\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent QueryCursorEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)\n  commentId: M:System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)\n  id: RaiseEvent(System.Windows.RoutedEventArgs)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: RaiseEvent(RoutedEventArgs)\n  nameWithType: ContentElement.RaiseEvent(RoutedEventArgs)\n  fullName: ContentElement.RaiseEvent(RoutedEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Raises a specific routed event. The <xref href=\"System.Windows.RoutedEvent\"></xref> to be raised is identified within the <xref href=\"System.Windows.RoutedEventArgs\"></xref> instance that is provided (as the <xref href=\"System.Windows.RoutedEventArgs.RoutedEvent\"></xref> property of that event data).\n  remarks: \"The `e` parameter is typed as the common base type for all routed event data; however, the event data should be given as the most specific event data type that is available for the event being raised, because <xref:System.Windows.RoutedEventArgs> derived classes contain the actual specific data properties that are intended for the specific event when it is raised.  \\n  \\n <xref:System.Windows.RoutedEventArgs> is not just the state properties for the event; it also identifies which routed event to raise. This event-raising pattern and the routed event data both differ from [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] events and data classes, which typically just contain properties that are related to the event.\"\n  example:\n  - \"The following example creates event data, appends the event identifier to the data, and then uses the event data instance to raise a custom routed event.  \\n  \\n [!code-csharp[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#raiseevent)]\\n [!code-vb[ContentElementsSmorgasbord#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#raiseevent)]\"\n  syntax:\n    content: public void RaiseEvent (System.Windows.RoutedEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.RoutedEventArgs\n      description: A <xref href=\"System.Windows.RoutedEventArgs\"></xref> that contains the event data and also identifies the event to raise.\n  overload: System.Windows.ContentElement.RaiseEvent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.ReleaseAllTouchCaptures\n  commentId: M:System.Windows.ContentElement.ReleaseAllTouchCaptures\n  id: ReleaseAllTouchCaptures\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: ReleaseAllTouchCaptures()\n  nameWithType: ContentElement.ReleaseAllTouchCaptures()\n  fullName: ContentElement.ReleaseAllTouchCaptures()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Releases all captured touch devices from this element.\n  syntax:\n    content: public void ReleaseAllTouchCaptures ();\n    parameters: []\n  overload: System.Windows.ContentElement.ReleaseAllTouchCaptures*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.ReleaseMouseCapture\n  commentId: M:System.Windows.ContentElement.ReleaseMouseCapture\n  id: ReleaseMouseCapture\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: ReleaseMouseCapture()\n  nameWithType: ContentElement.ReleaseMouseCapture()\n  fullName: ContentElement.ReleaseMouseCapture()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Releases the mouse capture, if this element held the capture.\n  remarks: If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.ContentElement.IsMouseCaptured%2A> before you call this method.\n  example:\n  - \"The following handler captures or releases mouse capture according to mouse button states. The example shows how to use captured mouse movement for alternative purposes other than moving the mouse pointer in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].  \\n  \\n [!code-csharp[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/Trackball.cs#uielementmousecapture)]\\n [!code-vb[ContentElementsSmorgasbord#UIElementMouseCapture](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/trackball.vb#uielementmousecapture)]\"\n  syntax:\n    content: public void ReleaseMouseCapture ();\n    parameters: []\n  overload: System.Windows.ContentElement.ReleaseMouseCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.ReleaseStylusCapture\n  commentId: M:System.Windows.ContentElement.ReleaseStylusCapture\n  id: ReleaseStylusCapture\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: ReleaseStylusCapture()\n  nameWithType: ContentElement.ReleaseStylusCapture()\n  fullName: ContentElement.ReleaseStylusCapture()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Releases the stylus device capture, if this element held the capture.\n  remarks: If this element did not hold the capture, calling this method has no effect. Consider checking the value of <xref:System.Windows.ContentElement.IsStylusCaptured%2A> before you call this method.\n  syntax:\n    content: public void ReleaseStylusCapture ();\n    parameters: []\n  overload: System.Windows.ContentElement.ReleaseStylusCapture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)\n  commentId: M:System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)\n  id: ReleaseTouchCapture(System.Windows.Input.TouchDevice)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: ReleaseTouchCapture(TouchDevice)\n  nameWithType: ContentElement.ReleaseTouchCapture(TouchDevice)\n  fullName: ContentElement.ReleaseTouchCapture(TouchDevice)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Attempts to release the specified touch device from this element.\n  syntax:\n    content: public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);\n    parameters:\n    - id: touchDevice\n      type: System.Windows.Input.TouchDevice\n      description: The device to release.\n    return:\n      type: System.Boolean\n      description: '`true` if the touch device is released; otherwise, `false`.'\n  overload: System.Windows.ContentElement.ReleaseTouchCapture*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>touchDevice</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)\n  commentId: M:System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)\n  id: RemoveHandler(System.Windows.RoutedEvent,System.Delegate)\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: RemoveHandler(RoutedEvent, Delegate)\n  nameWithType: ContentElement.RemoveHandler(RoutedEvent, Delegate)\n  fullName: ContentElement.RemoveHandler(RoutedEvent, Delegate)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Removes the specified routed event handler from this element.\n  remarks: \"The most common scenario for using this [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)] is when you implement the [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] \\\"wrapper\\\" event that is associated with a custom routed event, specifically when you implement the \\\"remove\\\" logic for handlers at the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] level. The example that follows this remarks section illustrates this scenario.  \\n  \\n Calling this method has no effect if there were no handlers registered with criteria that match the input parameters for the method call.  \\n  \\n If more than one handler is attached that matched the criteria, only the first handler in the event handler store is removed. This behavior is consistent with [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] behavior of the `-=` operator.  \\n  \\n Neither `routedEvent` nor `handler` may be `null`. Attempting to provide either value as `null` will raise an exception.  \\n  \\n This method ignores the `handledEventsToo` parameter information, which is provided if the handler was first added with the <xref:System.Windows.ContentElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature that enables handling of already-handled events. Either type of handler is removed.\"\n  syntax:\n    content: public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);\n    parameters:\n    - id: routedEvent\n      type: System.Windows.RoutedEvent\n      description: The identifier of the.routed event for which the handler is attached.\n    - id: handler\n      type: System.Delegate\n      description: The specific handler implementation to remove from the event handler collection on this element.\n  overload: System.Windows.ContentElement.RemoveHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.ShouldSerializeCommandBindings\n  commentId: M:System.Windows.ContentElement.ShouldSerializeCommandBindings\n  id: ShouldSerializeCommandBindings\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: ShouldSerializeCommandBindings()\n  nameWithType: ContentElement.ShouldSerializeCommandBindings()\n  fullName: ContentElement.ShouldSerializeCommandBindings()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Returns whether serialization processes should serialize the contents of the <xref href=\"System.Windows.ContentElement.CommandBindings\"></xref> property on instances of this class.\n  remarks: \"This will return `true` if <xref:System.Windows.ContentElement.CommandBindings%2A> is locally set.  \\n  \\n This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.CommandBindings%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.  \\n  \\n For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).\"\n  syntax:\n    content: public bool ShouldSerializeCommandBindings ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Windows.ContentElement.CommandBindings\"></xref> property value should be serialized; otherwise, `false`.'\n  overload: System.Windows.ContentElement.ShouldSerializeCommandBindings*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.ShouldSerializeInputBindings\n  commentId: M:System.Windows.ContentElement.ShouldSerializeInputBindings\n  id: ShouldSerializeInputBindings\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: ShouldSerializeInputBindings()\n  nameWithType: ContentElement.ShouldSerializeInputBindings()\n  fullName: ContentElement.ShouldSerializeInputBindings()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Returns whether serialization processes should serialize the contents of the <xref href=\"System.Windows.ContentElement.InputBindings\"></xref> property on instances of this class.\n  remarks: \"This will return `true` if <xref:System.Windows.ContentElement.InputBindings%2A> is locally set.  \\n  \\n This `ShouldSerialize` method is provided because the <xref:System.Windows.UIElement.InputBindings%2A> property does not have a simple default value. This method indicates whether the property has changed from its default value. You typically invoke this method if you are either developing a designer or developing your own control incorporating a <xref:System.Windows.UIElement>.  \\n  \\n For more information, see [Defining Default Values with the ShouldSerialize and Reset Methods](~/docs/framework/winforms/controls/defining-default-values-with-the-shouldserialize-and-reset-methods.md).\"\n  syntax:\n    content: public bool ShouldSerializeInputBindings ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Windows.ContentElement.InputBindings\"></xref> property value should be serialized; otherwise, `false`.'\n  overload: System.Windows.ContentElement.ShouldSerializeInputBindings*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.StylusButtonDown\n  commentId: E:System.Windows.ContentElement.StylusButtonDown\n  id: StylusButtonDown\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusButtonDown\n  nameWithType: ContentElement.StylusButtonDown\n  fullName: ContentElement.StylusButtonDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus button is pressed while the pointer is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusButtonDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusButtonDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusButtonDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.StylusButtonDownEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusButtonDown>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnStylusButtonDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;\n    return:\n      type: System.Windows.Input.StylusButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.StylusButtonDownEvent\n  commentId: F:System.Windows.ContentElement.StylusButtonDownEvent\n  id: StylusButtonDownEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusButtonDownEvent\n  nameWithType: ContentElement.StylusButtonDownEvent\n  fullName: ContentElement.StylusButtonDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.StylusButtonDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.StylusButtonUp\n  commentId: E:System.Windows.ContentElement.StylusButtonUp\n  id: StylusButtonUp\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusButtonUp\n  nameWithType: ContentElement.StylusButtonUp\n  fullName: ContentElement.StylusButtonUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus button is released while the pointer is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusButtonUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusButtonUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusButtonUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.StylusButtonUpEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusButtonEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusButtonUp>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnStylusButtonUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;\n    return:\n      type: System.Windows.Input.StylusButtonEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.StylusButtonUpEvent\n  commentId: F:System.Windows.ContentElement.StylusButtonUpEvent\n  id: StylusButtonUpEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusButtonUpEvent\n  nameWithType: ContentElement.StylusButtonUpEvent\n  fullName: ContentElement.StylusButtonUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.StylusButtonUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.StylusDown\n  commentId: E:System.Windows.ContentElement.StylusDown\n  id: StylusDown\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusDown\n  nameWithType: ContentElement.StylusDown\n  fullName: ContentElement.StylusDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus touches the digitizer while the stylus is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusDown> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusDown> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.StylusDownEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusDownEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusDown>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnStylusDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusDownEventHandler StylusDown;\n    return:\n      type: System.Windows.Input.StylusDownEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.StylusDownEvent\n  commentId: F:System.Windows.ContentElement.StylusDownEvent\n  id: StylusDownEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusDownEvent\n  nameWithType: ContentElement.StylusDownEvent\n  fullName: ContentElement.StylusDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.StylusDown\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.StylusEnter\n  commentId: E:System.Windows.ContentElement.StylusEnter\n  id: StylusEnter\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusEnter\n  nameWithType: ContentElement.StylusEnter\n  fullName: ContentElement.StylusEnter\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus enters the bounds of this element.\n  remarks: \"<xref:System.Windows.ContentElement.StylusEnter> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \\n  \\n Although <xref:System.Windows.ContentElement.StylusEnter> tracks when the stylus enters the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsStylusOver%2A> property value has changed from `false` to `true` on this element.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusEnter> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusEnter> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusEnter\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.StylusEnterEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnStylusEnter%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler StylusEnter;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.StylusEnterEvent\n  commentId: F:System.Windows.ContentElement.StylusEnterEvent\n  id: StylusEnterEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusEnterEvent\n  nameWithType: ContentElement.StylusEnterEvent\n  fullName: ContentElement.StylusEnterEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.StylusEnter\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusEnterEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.StylusInAirMove\n  commentId: E:System.Windows.ContentElement.StylusInAirMove\n  id: StylusInAirMove\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusInAirMove\n  nameWithType: ContentElement.StylusInAirMove\n  fullName: ContentElement.StylusInAirMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus moves over an element without actually touching the digitizer.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusInAirMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusInAirMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusInAirMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.StylusInAirMoveEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusInAirMove>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnStylusInAirMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler StylusInAirMove;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.StylusInAirMoveEvent\n  commentId: F:System.Windows.ContentElement.StylusInAirMoveEvent\n  id: StylusInAirMoveEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusInAirMoveEvent\n  nameWithType: ContentElement.StylusInAirMoveEvent\n  fullName: ContentElement.StylusInAirMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.StylusInAirMove\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.StylusInRange\n  commentId: E:System.Windows.ContentElement.StylusInRange\n  id: StylusInRange\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusInRange\n  nameWithType: ContentElement.StylusInRange\n  fullName: ContentElement.StylusInRange\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus is close enough to the digitizer to be detected, while over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusInRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusInRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusInRange\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.StylusInRangeEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusInRange>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnStylusInRange%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler StylusInRange;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.StylusInRangeEvent\n  commentId: F:System.Windows.ContentElement.StylusInRangeEvent\n  id: StylusInRangeEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusInRangeEvent\n  nameWithType: ContentElement.StylusInRangeEvent\n  fullName: ContentElement.StylusInRangeEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.StylusInRange\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusInRangeEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.StylusLeave\n  commentId: E:System.Windows.ContentElement.StylusLeave\n  id: StylusLeave\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusLeave\n  nameWithType: ContentElement.StylusLeave\n  fullName: ContentElement.StylusLeave\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus leaves the bounds of the element.\n  remarks: \"<xref:System.Windows.ContentElement.StylusLeave> is a [Routed Events Overview](~/docs/framework/wpf/advanced/routed-events-overview.md) that uses the direct event handling routing strategy. Direct routed events are not raised along a route; instead, they are handled in the same element where they are raised. However, they do enable other aspects of routed event behavior, such as event triggers in styles.  \\n  \\n Although <xref:System.Windows.ContentElement.StylusLeave> tracks when the stylus leaves the bounds of an element, this event more literally reports that the <xref:System.Windows.ContentElement.IsStylusOver%2A> property value has changed from `true` to `false` on this element.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusLeave> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusLeave> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusLeave\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.StylusLeaveEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnStylusLeave%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler StylusLeave;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.StylusLeaveEvent\n  commentId: F:System.Windows.ContentElement.StylusLeaveEvent\n  id: StylusLeaveEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusLeaveEvent\n  nameWithType: ContentElement.StylusLeaveEvent\n  fullName: ContentElement.StylusLeaveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.StylusLeave\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusLeaveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.StylusMove\n  commentId: E:System.Windows.ContentElement.StylusMove\n  id: StylusMove\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusMove\n  nameWithType: ContentElement.StylusMove\n  fullName: ContentElement.StylusMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus moves over this element. The stylus must move while on the digitizer to raise this event. Otherwise, <xref href=\"System.Windows.ContentElement.StylusInAirMove\"></xref> is raised instead.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusMove> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusMove> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.StylusMoveEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusMove>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnStylusMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler StylusMove;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.StylusMoveEvent\n  commentId: F:System.Windows.ContentElement.StylusMoveEvent\n  id: StylusMoveEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusMoveEvent\n  nameWithType: ContentElement.StylusMoveEvent\n  fullName: ContentElement.StylusMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.StylusMove\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.StylusOutOfRange\n  commentId: E:System.Windows.ContentElement.StylusOutOfRange\n  id: StylusOutOfRange\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusOutOfRange\n  nameWithType: ContentElement.StylusOutOfRange\n  fullName: ContentElement.StylusOutOfRange\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the stylus is too far from the digitizer to be detected, while over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusOutOfRange> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusOutOfRange> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusOutOfRange\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.StylusOutOfRangeEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusOutOfRange>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnStylusOutOfRange%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler StylusOutOfRange;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.StylusOutOfRangeEvent\n  commentId: F:System.Windows.ContentElement.StylusOutOfRangeEvent\n  id: StylusOutOfRangeEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusOutOfRangeEvent\n  nameWithType: ContentElement.StylusOutOfRangeEvent\n  fullName: ContentElement.StylusOutOfRangeEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.StylusOutOfRange\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.StylusSystemGesture\n  commentId: E:System.Windows.ContentElement.StylusSystemGesture\n  id: StylusSystemGesture\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusSystemGesture\n  nameWithType: ContentElement.StylusSystemGesture\n  fullName: ContentElement.StylusSystemGesture\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a user performs one of several stylus gestures.\n  remarks: \"For more information about stylus gestures, see <xref:System.Windows.Input.SystemGesture>.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusSystemGesture> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusSystemGesture> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusSystemGesture\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.StylusSystemGestureEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusSystemGestureEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusSystemGesture>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnStylusSystemGesture%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;\n    return:\n      type: System.Windows.Input.StylusSystemGestureEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.StylusSystemGestureEvent\n  commentId: F:System.Windows.ContentElement.StylusSystemGestureEvent\n  id: StylusSystemGestureEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusSystemGestureEvent\n  nameWithType: ContentElement.StylusSystemGestureEvent\n  fullName: ContentElement.StylusSystemGestureEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.StylusSystemGesture\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.StylusUp\n  commentId: E:System.Windows.ContentElement.StylusUp\n  id: StylusUp\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusUp\n  nameWithType: ContentElement.StylusUp\n  fullName: ContentElement.StylusUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when the user raises the stylus off the digitizer while it is over this element.\n  remarks: \"This event creates an alias for the <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.StylusUp> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.StylusUp> event are attached to the underlying <xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n Touch, mouse, and stylus input exist in a particular relationship. For more information, see [Input Overview](~/docs/framework/wpf/advanced/input-overview.md).  \\n  \\n<a name=\\\"routedEventInfo_StylusUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.StylusUpEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.StylusEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewStylusUp>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnStylusUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.StylusEventHandler StylusUp;\n    return:\n      type: System.Windows.Input.StylusEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.StylusUpEvent\n  commentId: F:System.Windows.ContentElement.StylusUpEvent\n  id: StylusUpEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: StylusUpEvent\n  nameWithType: ContentElement.StylusUpEvent\n  fullName: ContentElement.StylusUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.StylusUp\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent StylusUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.TextInput\n  commentId: E:System.Windows.ContentElement.TextInput\n  id: TextInput\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TextInput\n  nameWithType: ContentElement.TextInput\n  fullName: ContentElement.TextInput\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when this element gets text in a device-independent manner.\n  remarks: \"> [!IMPORTANT]\\n>  This event might already be marked as handled by the internal implementations of composited controls. See Remark below.  \\n  \\n The <xref:System.Windows.ContentElement.TextInput> event may already be marked as handled by the internal implementations of composited controls. For example, a <xref:System.Windows.Controls.TextBox> is a composited control where the <xref:System.Windows.ContentElement.TextInput> event is already marked as handled; within its compositing. Controls do this because the control needs to interpret some types of input, such as arrow keys, as having special meaning to that control. If you use <xref:System.Windows.ContentElement.PreviewTextInput> as the event where you attach handlers for text input, you may receive better results. This technique circumvents most cases where control composition has already marked this event as handled and prevents your handler from receiving the event along the event route.  \\n  \\n The <xref:System.Windows.ContentElement.TextInput> event allows a component or application to listen for text input in a device-independent manner. The keyboard is the primary means of <xref:System.Windows.ContentElement.TextInput>, but speech, handwriting, and other input devices can also raise <xref:System.Windows.ContentElement.TextInput>.  \\n  \\n Because of key combinations—either in default keyboards or through input method editors—multiple key events might raise just one text input event.  \\n  \\n This event creates an alias for the <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event for this class, so that <xref:System.Windows.ContentElement.TextInput> is part of the class members list when <xref:System.Windows.ContentElement> is inherited as a base element. Event handlers that are attached to the <xref:System.Windows.ContentElement.TextInput> event are attached to the underlying <xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> attached event and receive the same event data instance.  \\n  \\n<a name=\\\"routedEventInfo_TextInput\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.TextInputEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.Windows.Input.TextCompositionEventHandler>|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTextInput>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnTextInput%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event System.Windows.Input.TextCompositionEventHandler TextInput;\n    return:\n      type: System.Windows.Input.TextCompositionEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.TextInputEvent\n  commentId: F:System.Windows.ContentElement.TextInputEvent\n  id: TextInputEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TextInputEvent\n  nameWithType: ContentElement.TextInputEvent\n  fullName: ContentElement.TextInputEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.TextInput\"></xref> routed event.\n  remarks: \"Routed event identifiers are created when routed events are registered. These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event. You can use these identifiers to add class handlers.  \\n  \\n For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>. For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.\"\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent TextInputEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.TouchDown\n  commentId: E:System.Windows.ContentElement.TouchDown\n  id: TouchDown\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TouchDown\n  nameWithType: ContentElement.TouchDown\n  fullName: ContentElement.TouchDown\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a finger touches the screen while the finger is over this element.\n  remarks: \"By default, the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events do not occur until a finger touches the screen and moves. Pressing a finger on the screen and holding it without moving it causes the press and hold behavior of a <xref:System.Windows.Input.Stylus>. The press and hold behavior is equivalent to a mouse right-click.  \\n  \\n To cause the <xref:System.Windows.ContentElement.PreviewTouchDown> and <xref:System.Windows.ContentElement.TouchDown> events to occur as soon as a finger touches the screen, set the <xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> attached property to `false` for this element.  \\n  \\n<a name=\\\"routedEventInfo_TouchDown\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.TouchDownEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchDown>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnTouchDown%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchDown;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.TouchDownEvent\n  commentId: F:System.Windows.ContentElement.TouchDownEvent\n  id: TouchDownEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TouchDownEvent\n  nameWithType: ContentElement.TouchDownEvent\n  fullName: ContentElement.TouchDownEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.TouchDown\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent TouchDownEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.TouchEnter\n  commentId: E:System.Windows.ContentElement.TouchEnter\n  id: TouchEnter\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TouchEnter\n  nameWithType: ContentElement.TouchEnter\n  fullName: ContentElement.TouchEnter\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a touch moves from outside to inside the bounds of this element.\n  remarks: \"This event is always raised, whether or not the touch device is captured to this UI element.  \\n  \\n<a name=\\\"routedEventInfo_TouchEnter\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.TouchEnterEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnTouchEnter%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.TouchEnterEvent\n  commentId: F:System.Windows.ContentElement.TouchEnterEvent\n  id: TouchEnterEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TouchEnterEvent\n  nameWithType: ContentElement.TouchEnterEvent\n  fullName: ContentElement.TouchEnterEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.TouchEnter\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent TouchEnterEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.TouchesCaptured\n  commentId: P:System.Windows.ContentElement.TouchesCaptured\n  id: TouchesCaptured\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TouchesCaptured\n  nameWithType: ContentElement.TouchesCaptured\n  fullName: ContentElement.TouchesCaptured\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets all touch devices that are captured to this element.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}\n      description: An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are captured to this element.\n  overload: System.Windows.ContentElement.TouchesCaptured*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.TouchesCapturedWithin\n  commentId: P:System.Windows.ContentElement.TouchesCapturedWithin\n  id: TouchesCapturedWithin\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TouchesCapturedWithin\n  nameWithType: ContentElement.TouchesCapturedWithin\n  fullName: ContentElement.TouchesCapturedWithin\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets all touch devices that are captured to this element or any child elements in its visual tree.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}\n      description: An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are captured to this element or any child elements in its visual tree.\n  overload: System.Windows.ContentElement.TouchesCapturedWithin*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.TouchesDirectlyOver\n  commentId: P:System.Windows.ContentElement.TouchesDirectlyOver\n  id: TouchesDirectlyOver\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TouchesDirectlyOver\n  nameWithType: ContentElement.TouchesDirectlyOver\n  fullName: ContentElement.TouchesDirectlyOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets all touch devices that are over this element.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}\n      description: An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are over this element.\n  overload: System.Windows.ContentElement.TouchesDirectlyOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.TouchesOver\n  commentId: P:System.Windows.ContentElement.TouchesOver\n  id: TouchesOver\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TouchesOver\n  nameWithType: ContentElement.TouchesOver\n  fullName: ContentElement.TouchesOver\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Gets all touch devices that are over this element or any child elements in its visual tree.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get; }\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}\n      description: An enumeration of <xref href=\"System.Windows.Input.TouchDevice\"></xref> objects that are over this element or any child elements in its visual tree.\n  overload: System.Windows.ContentElement.TouchesOver*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.TouchLeave\n  commentId: E:System.Windows.ContentElement.TouchLeave\n  id: TouchLeave\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TouchLeave\n  nameWithType: ContentElement.TouchLeave\n  fullName: ContentElement.TouchLeave\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a touch moves from inside to outside the bounds of this element.\n  remarks: \"<a name=\\\"routedEventInfo_TouchLeave\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.TouchLeaveEvent>|  \\n|Routing strategy|Direct|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnTouchLeave%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.TouchLeaveEvent\n  commentId: F:System.Windows.ContentElement.TouchLeaveEvent\n  id: TouchLeaveEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TouchLeaveEvent\n  nameWithType: ContentElement.TouchLeaveEvent\n  fullName: ContentElement.TouchLeaveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.TouchLeave\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent TouchLeaveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.TouchMove\n  commentId: E:System.Windows.ContentElement.TouchMove\n  id: TouchMove\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TouchMove\n  nameWithType: ContentElement.TouchMove\n  fullName: ContentElement.TouchMove\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a finger moves on the screen while the finger is over this element.\n  remarks: \"<a name=\\\"routedEventInfo_TouchMove\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.TouchMoveEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchMove>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnTouchMove%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchMove;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.ContentElement.TouchMoveEvent\n  commentId: F:System.Windows.ContentElement.TouchMoveEvent\n  id: TouchMoveEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TouchMoveEvent\n  nameWithType: ContentElement.TouchMoveEvent\n  fullName: ContentElement.TouchMoveEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.TouchMove\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent TouchMoveEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.TouchUp\n  commentId: E:System.Windows.ContentElement.TouchUp\n  id: TouchUp\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TouchUp\n  nameWithType: ContentElement.TouchUp\n  fullName: ContentElement.TouchUp\n  type: Event\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Occurs when a finger is raised off of the screen while the finger is over this element.\n  remarks: \"<a name=\\\"routedEventInfo_TouchUp\\\"></a>   \\n## Routed Event Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.ContentElement.TouchUpEvent>|  \\n|Routing strategy|Bubbling|  \\n|Delegate|<xref:System.EventHandler%601> of type <xref:System.Windows.Input.TouchEventArgs>.|  \\n  \\n-   The corresponding tunneling event is <xref:System.Windows.ContentElement.PreviewTouchUp>.  \\n  \\n-   Override <xref:System.Windows.ContentElement.OnTouchUp%2A> to implement class handling for this event in derived classes.\"\n  syntax:\n    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchUp;\n    return:\n      type: System.EventHandler{System.Windows.Input.TouchEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.ContentElement.TouchUpEvent\n  commentId: F:System.Windows.ContentElement.TouchUpEvent\n  id: TouchUpEvent\n  parent: System.Windows.ContentElement\n  langs:\n  - csharp\n  name: TouchUpEvent\n  nameWithType: ContentElement.TouchUpEvent\n  fullName: ContentElement.TouchUpEvent\n  type: Field\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.ContentElement.TouchUp\"></xref> routed event.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent TouchUpEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.DependencyObject\n  parent: System.Windows\n  isExternal: false\n  name: DependencyObject\n  nameWithType: DependencyObject\n  fullName: System.Windows.DependencyObject\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Windows.ContentElement.#ctor\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ContentElement()\n  nameWithType: ContentElement.ContentElement()\n  fullName: ContentElement.ContentElement()\n- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AddHandler(RoutedEvent, Delegate)\n  nameWithType: ContentElement.AddHandler(RoutedEvent, Delegate)\n  fullName: ContentElement.AddHandler(RoutedEvent, Delegate)\n- uid: System.Windows.RoutedEvent\n  parent: System.Windows\n  isExternal: false\n  name: RoutedEvent\n  nameWithType: RoutedEvent\n  fullName: System.Windows.RoutedEvent\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Windows.ContentElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AddHandler(RoutedEvent, Delegate, Boolean)\n  nameWithType: ContentElement.AddHandler(RoutedEvent, Delegate, Boolean)\n  fullName: ContentElement.AddHandler(RoutedEvent, Delegate, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.ContentElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AddToEventRoute(EventRoute, RoutedEventArgs)\n  nameWithType: ContentElement.AddToEventRoute(EventRoute, RoutedEventArgs)\n  fullName: ContentElement.AddToEventRoute(EventRoute, RoutedEventArgs)\n- uid: System.Windows.EventRoute\n  parent: System.Windows\n  isExternal: false\n  name: EventRoute\n  nameWithType: EventRoute\n  fullName: System.Windows.EventRoute\n- uid: System.Windows.RoutedEventArgs\n  parent: System.Windows\n  isExternal: false\n  name: RoutedEventArgs\n  nameWithType: RoutedEventArgs\n  fullName: System.Windows.RoutedEventArgs\n- uid: System.Windows.ContentElement.AllowDrop\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AllowDrop\n  nameWithType: ContentElement.AllowDrop\n  fullName: ContentElement.AllowDrop\n- uid: System.Windows.ContentElement.AllowDropProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AllowDropProperty\n  nameWithType: ContentElement.AllowDropProperty\n  fullName: ContentElement.AllowDropProperty\n- uid: System.Windows.DependencyProperty\n  parent: System.Windows\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Windows.DependencyProperty\n- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ApplyAnimationClock(DependencyProperty, AnimationClock)\n  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty, AnimationClock)\n  fullName: ContentElement.ApplyAnimationClock(DependencyProperty, AnimationClock)\n- uid: System.Windows.Media.Animation.AnimationClock\n  parent: System.Windows.Media.Animation\n  isExternal: false\n  name: AnimationClock\n  nameWithType: AnimationClock\n  fullName: System.Windows.Media.Animation.AnimationClock\n- uid: System.Windows.ContentElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n  nameWithType: ContentElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n  fullName: ContentElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n- uid: System.Windows.Media.Animation.HandoffBehavior\n  parent: System.Windows.Media.Animation\n  isExternal: false\n  name: HandoffBehavior\n  nameWithType: HandoffBehavior\n  fullName: System.Windows.Media.Animation.HandoffBehavior\n- uid: System.Windows.ContentElement.AreAnyTouchesCaptured\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AreAnyTouchesCaptured\n  nameWithType: ContentElement.AreAnyTouchesCaptured\n  fullName: ContentElement.AreAnyTouchesCaptured\n- uid: System.Windows.ContentElement.AreAnyTouchesCapturedProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AreAnyTouchesCapturedProperty\n  nameWithType: ContentElement.AreAnyTouchesCapturedProperty\n  fullName: ContentElement.AreAnyTouchesCapturedProperty\n- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithin\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AreAnyTouchesCapturedWithin\n  nameWithType: ContentElement.AreAnyTouchesCapturedWithin\n  fullName: ContentElement.AreAnyTouchesCapturedWithin\n- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithinProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AreAnyTouchesCapturedWithinProperty\n  nameWithType: ContentElement.AreAnyTouchesCapturedWithinProperty\n  fullName: ContentElement.AreAnyTouchesCapturedWithinProperty\n- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOver\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AreAnyTouchesDirectlyOver\n  nameWithType: ContentElement.AreAnyTouchesDirectlyOver\n  fullName: ContentElement.AreAnyTouchesDirectlyOver\n- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOverProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AreAnyTouchesDirectlyOverProperty\n  nameWithType: ContentElement.AreAnyTouchesDirectlyOverProperty\n  fullName: ContentElement.AreAnyTouchesDirectlyOverProperty\n- uid: System.Windows.ContentElement.AreAnyTouchesOver\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AreAnyTouchesOver\n  nameWithType: ContentElement.AreAnyTouchesOver\n  fullName: ContentElement.AreAnyTouchesOver\n- uid: System.Windows.ContentElement.AreAnyTouchesOverProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AreAnyTouchesOverProperty\n  nameWithType: ContentElement.AreAnyTouchesOverProperty\n  fullName: ContentElement.AreAnyTouchesOverProperty\n- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: BeginAnimation(DependencyProperty, AnimationTimeline)\n  nameWithType: ContentElement.BeginAnimation(DependencyProperty, AnimationTimeline)\n  fullName: ContentElement.BeginAnimation(DependencyProperty, AnimationTimeline)\n- uid: System.Windows.Media.Animation.AnimationTimeline\n  parent: System.Windows.Media.Animation\n  isExternal: false\n  name: AnimationTimeline\n  nameWithType: AnimationTimeline\n  fullName: System.Windows.Media.Animation.AnimationTimeline\n- uid: System.Windows.ContentElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n  nameWithType: ContentElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n  fullName: ContentElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n- uid: System.Windows.ContentElement.CaptureMouse\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: CaptureMouse()\n  nameWithType: ContentElement.CaptureMouse()\n  fullName: ContentElement.CaptureMouse()\n- uid: System.Windows.ContentElement.CaptureStylus\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: CaptureStylus()\n  nameWithType: ContentElement.CaptureStylus()\n  fullName: ContentElement.CaptureStylus()\n- uid: System.Windows.ContentElement.CaptureTouch(System.Windows.Input.TouchDevice)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: CaptureTouch(TouchDevice)\n  nameWithType: ContentElement.CaptureTouch(TouchDevice)\n  fullName: ContentElement.CaptureTouch(TouchDevice)\n- uid: System.Windows.Input.TouchDevice\n  parent: System.Windows.Input\n  isExternal: false\n  name: TouchDevice\n  nameWithType: TouchDevice\n  fullName: System.Windows.Input.TouchDevice\n- uid: System.Windows.ContentElement.CommandBindings\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: CommandBindings\n  nameWithType: ContentElement.CommandBindings\n  fullName: ContentElement.CommandBindings\n- uid: System.Windows.Input.CommandBindingCollection\n  parent: System.Windows.Input\n  isExternal: false\n  name: CommandBindingCollection\n  nameWithType: CommandBindingCollection\n  fullName: System.Windows.Input.CommandBindingCollection\n- uid: System.Windows.ContentElement.DragEnter\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: DragEnter\n  nameWithType: ContentElement.DragEnter\n  fullName: ContentElement.DragEnter\n- uid: System.Windows.DragEventHandler\n  parent: System.Windows\n  isExternal: false\n  name: DragEventHandler\n  nameWithType: DragEventHandler\n  fullName: System.Windows.DragEventHandler\n- uid: System.Windows.ContentElement.DragEnterEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: DragEnterEvent\n  nameWithType: ContentElement.DragEnterEvent\n  fullName: ContentElement.DragEnterEvent\n- uid: System.Windows.ContentElement.DragLeave\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: DragLeave\n  nameWithType: ContentElement.DragLeave\n  fullName: ContentElement.DragLeave\n- uid: System.Windows.ContentElement.DragLeaveEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: DragLeaveEvent\n  nameWithType: ContentElement.DragLeaveEvent\n  fullName: ContentElement.DragLeaveEvent\n- uid: System.Windows.ContentElement.DragOver\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: DragOver\n  nameWithType: ContentElement.DragOver\n  fullName: ContentElement.DragOver\n- uid: System.Windows.ContentElement.DragOverEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: DragOverEvent\n  nameWithType: ContentElement.DragOverEvent\n  fullName: ContentElement.DragOverEvent\n- uid: System.Windows.ContentElement.Drop\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: Drop\n  nameWithType: ContentElement.Drop\n  fullName: ContentElement.Drop\n- uid: System.Windows.ContentElement.DropEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: DropEvent\n  nameWithType: ContentElement.DropEvent\n  fullName: ContentElement.DropEvent\n- uid: System.Windows.ContentElement.Focus\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: Focus()\n  nameWithType: ContentElement.Focus()\n  fullName: ContentElement.Focus()\n- uid: System.Windows.ContentElement.Focusable\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: Focusable\n  nameWithType: ContentElement.Focusable\n  fullName: ContentElement.Focusable\n- uid: System.Windows.ContentElement.FocusableChanged\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: FocusableChanged\n  nameWithType: ContentElement.FocusableChanged\n  fullName: ContentElement.FocusableChanged\n- uid: System.Windows.DependencyPropertyChangedEventHandler\n  parent: System.Windows\n  isExternal: false\n  name: DependencyPropertyChangedEventHandler\n  nameWithType: DependencyPropertyChangedEventHandler\n  fullName: System.Windows.DependencyPropertyChangedEventHandler\n- uid: System.Windows.ContentElement.FocusableProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: FocusableProperty\n  nameWithType: ContentElement.FocusableProperty\n  fullName: ContentElement.FocusableProperty\n- uid: System.Windows.ContentElement.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GetAnimationBaseValue(DependencyProperty)\n  nameWithType: ContentElement.GetAnimationBaseValue(DependencyProperty)\n  fullName: ContentElement.GetAnimationBaseValue(DependencyProperty)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.ContentElement.GetUIParentCore\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GetUIParentCore()\n  nameWithType: ContentElement.GetUIParentCore()\n  fullName: ContentElement.GetUIParentCore()\n- uid: System.Windows.ContentElement.GiveFeedback\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GiveFeedback\n  nameWithType: ContentElement.GiveFeedback\n  fullName: ContentElement.GiveFeedback\n- uid: System.Windows.GiveFeedbackEventHandler\n  parent: System.Windows\n  isExternal: false\n  name: GiveFeedbackEventHandler\n  nameWithType: GiveFeedbackEventHandler\n  fullName: System.Windows.GiveFeedbackEventHandler\n- uid: System.Windows.ContentElement.GiveFeedbackEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GiveFeedbackEvent\n  nameWithType: ContentElement.GiveFeedbackEvent\n  fullName: ContentElement.GiveFeedbackEvent\n- uid: System.Windows.ContentElement.GotFocus\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GotFocus\n  nameWithType: ContentElement.GotFocus\n  fullName: ContentElement.GotFocus\n- uid: System.Windows.RoutedEventHandler\n  parent: System.Windows\n  isExternal: false\n  name: RoutedEventHandler\n  nameWithType: RoutedEventHandler\n  fullName: System.Windows.RoutedEventHandler\n- uid: System.Windows.ContentElement.GotFocusEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GotFocusEvent\n  nameWithType: ContentElement.GotFocusEvent\n  fullName: ContentElement.GotFocusEvent\n- uid: System.Windows.ContentElement.GotKeyboardFocus\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GotKeyboardFocus\n  nameWithType: ContentElement.GotKeyboardFocus\n  fullName: ContentElement.GotKeyboardFocus\n- uid: System.Windows.Input.KeyboardFocusChangedEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: KeyboardFocusChangedEventHandler\n  nameWithType: KeyboardFocusChangedEventHandler\n  fullName: System.Windows.Input.KeyboardFocusChangedEventHandler\n- uid: System.Windows.ContentElement.GotKeyboardFocusEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GotKeyboardFocusEvent\n  nameWithType: ContentElement.GotKeyboardFocusEvent\n  fullName: ContentElement.GotKeyboardFocusEvent\n- uid: System.Windows.ContentElement.GotMouseCapture\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GotMouseCapture\n  nameWithType: ContentElement.GotMouseCapture\n  fullName: ContentElement.GotMouseCapture\n- uid: System.Windows.Input.MouseEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseEventHandler\n  nameWithType: MouseEventHandler\n  fullName: System.Windows.Input.MouseEventHandler\n- uid: System.Windows.ContentElement.GotMouseCaptureEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GotMouseCaptureEvent\n  nameWithType: ContentElement.GotMouseCaptureEvent\n  fullName: ContentElement.GotMouseCaptureEvent\n- uid: System.Windows.ContentElement.GotStylusCapture\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GotStylusCapture\n  nameWithType: ContentElement.GotStylusCapture\n  fullName: ContentElement.GotStylusCapture\n- uid: System.Windows.Input.StylusEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusEventHandler\n  nameWithType: StylusEventHandler\n  fullName: System.Windows.Input.StylusEventHandler\n- uid: System.Windows.ContentElement.GotStylusCaptureEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GotStylusCaptureEvent\n  nameWithType: ContentElement.GotStylusCaptureEvent\n  fullName: ContentElement.GotStylusCaptureEvent\n- uid: System.Windows.ContentElement.GotTouchCapture\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GotTouchCapture\n  nameWithType: ContentElement.GotTouchCapture\n  fullName: ContentElement.GotTouchCapture\n- uid: System.EventHandler`1\n  name: EventHandler<TEventArgs>\n  nameWithType: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n- uid: System.Windows.Input.TouchEventArgs\n  name: TouchEventArgs\n  nameWithType: TouchEventArgs\n  fullName: System.Windows.Input.TouchEventArgs\n- uid: System.EventHandler{System.Windows.Input.TouchEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<TouchEventArgs>\n  nameWithType: EventHandler<TouchEventArgs>\n  fullName: System.EventHandler<System.Windows.Input.TouchEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.TouchEventArgs\n    name: TouchEventArgs\n    nameWithType: TouchEventArgs\n    fullName: System.Windows.Input.TouchEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.ContentElement.GotTouchCaptureEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GotTouchCaptureEvent\n  nameWithType: ContentElement.GotTouchCaptureEvent\n  fullName: ContentElement.GotTouchCaptureEvent\n- uid: System.Windows.ContentElement.HasAnimatedProperties\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: HasAnimatedProperties\n  nameWithType: ContentElement.HasAnimatedProperties\n  fullName: ContentElement.HasAnimatedProperties\n- uid: System.Windows.ContentElement.InputBindings\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: InputBindings\n  nameWithType: ContentElement.InputBindings\n  fullName: ContentElement.InputBindings\n- uid: System.Windows.Input.InputBindingCollection\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputBindingCollection\n  nameWithType: InputBindingCollection\n  fullName: System.Windows.Input.InputBindingCollection\n- uid: System.Windows.ContentElement.IsEnabled\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsEnabled\n  nameWithType: ContentElement.IsEnabled\n  fullName: ContentElement.IsEnabled\n- uid: System.Windows.ContentElement.IsEnabledChanged\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsEnabledChanged\n  nameWithType: ContentElement.IsEnabledChanged\n  fullName: ContentElement.IsEnabledChanged\n- uid: System.Windows.ContentElement.IsEnabledCore\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsEnabledCore\n  nameWithType: ContentElement.IsEnabledCore\n  fullName: ContentElement.IsEnabledCore\n- uid: System.Windows.ContentElement.IsEnabledProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsEnabledProperty\n  nameWithType: ContentElement.IsEnabledProperty\n  fullName: ContentElement.IsEnabledProperty\n- uid: System.Windows.ContentElement.IsFocused\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsFocused\n  nameWithType: ContentElement.IsFocused\n  fullName: ContentElement.IsFocused\n- uid: System.Windows.ContentElement.IsFocusedProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsFocusedProperty\n  nameWithType: ContentElement.IsFocusedProperty\n  fullName: ContentElement.IsFocusedProperty\n- uid: System.Windows.ContentElement.IsInputMethodEnabled\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsInputMethodEnabled\n  nameWithType: ContentElement.IsInputMethodEnabled\n  fullName: ContentElement.IsInputMethodEnabled\n- uid: System.Windows.ContentElement.IsKeyboardFocused\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsKeyboardFocused\n  nameWithType: ContentElement.IsKeyboardFocused\n  fullName: ContentElement.IsKeyboardFocused\n- uid: System.Windows.ContentElement.IsKeyboardFocusedChanged\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsKeyboardFocusedChanged\n  nameWithType: ContentElement.IsKeyboardFocusedChanged\n  fullName: ContentElement.IsKeyboardFocusedChanged\n- uid: System.Windows.ContentElement.IsKeyboardFocusedProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsKeyboardFocusedProperty\n  nameWithType: ContentElement.IsKeyboardFocusedProperty\n  fullName: ContentElement.IsKeyboardFocusedProperty\n- uid: System.Windows.ContentElement.IsKeyboardFocusWithin\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsKeyboardFocusWithin\n  nameWithType: ContentElement.IsKeyboardFocusWithin\n  fullName: ContentElement.IsKeyboardFocusWithin\n- uid: System.Windows.ContentElement.IsKeyboardFocusWithinChanged\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsKeyboardFocusWithinChanged\n  nameWithType: ContentElement.IsKeyboardFocusWithinChanged\n  fullName: ContentElement.IsKeyboardFocusWithinChanged\n- uid: System.Windows.ContentElement.IsKeyboardFocusWithinProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsKeyboardFocusWithinProperty\n  nameWithType: ContentElement.IsKeyboardFocusWithinProperty\n  fullName: ContentElement.IsKeyboardFocusWithinProperty\n- uid: System.Windows.ContentElement.IsMouseCaptured\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsMouseCaptured\n  nameWithType: ContentElement.IsMouseCaptured\n  fullName: ContentElement.IsMouseCaptured\n- uid: System.Windows.ContentElement.IsMouseCapturedChanged\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsMouseCapturedChanged\n  nameWithType: ContentElement.IsMouseCapturedChanged\n  fullName: ContentElement.IsMouseCapturedChanged\n- uid: System.Windows.ContentElement.IsMouseCapturedProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsMouseCapturedProperty\n  nameWithType: ContentElement.IsMouseCapturedProperty\n  fullName: ContentElement.IsMouseCapturedProperty\n- uid: System.Windows.ContentElement.IsMouseCaptureWithin\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsMouseCaptureWithin\n  nameWithType: ContentElement.IsMouseCaptureWithin\n  fullName: ContentElement.IsMouseCaptureWithin\n- uid: System.Windows.ContentElement.IsMouseCaptureWithinChanged\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsMouseCaptureWithinChanged\n  nameWithType: ContentElement.IsMouseCaptureWithinChanged\n  fullName: ContentElement.IsMouseCaptureWithinChanged\n- uid: System.Windows.ContentElement.IsMouseCaptureWithinProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsMouseCaptureWithinProperty\n  nameWithType: ContentElement.IsMouseCaptureWithinProperty\n  fullName: ContentElement.IsMouseCaptureWithinProperty\n- uid: System.Windows.ContentElement.IsMouseDirectlyOver\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsMouseDirectlyOver\n  nameWithType: ContentElement.IsMouseDirectlyOver\n  fullName: ContentElement.IsMouseDirectlyOver\n- uid: System.Windows.ContentElement.IsMouseDirectlyOverChanged\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsMouseDirectlyOverChanged\n  nameWithType: ContentElement.IsMouseDirectlyOverChanged\n  fullName: ContentElement.IsMouseDirectlyOverChanged\n- uid: System.Windows.ContentElement.IsMouseDirectlyOverProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsMouseDirectlyOverProperty\n  nameWithType: ContentElement.IsMouseDirectlyOverProperty\n  fullName: ContentElement.IsMouseDirectlyOverProperty\n- uid: System.Windows.ContentElement.IsMouseOver\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsMouseOver\n  nameWithType: ContentElement.IsMouseOver\n  fullName: ContentElement.IsMouseOver\n- uid: System.Windows.ContentElement.IsMouseOverProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsMouseOverProperty\n  nameWithType: ContentElement.IsMouseOverProperty\n  fullName: ContentElement.IsMouseOverProperty\n- uid: System.Windows.ContentElement.IsStylusCaptured\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsStylusCaptured\n  nameWithType: ContentElement.IsStylusCaptured\n  fullName: ContentElement.IsStylusCaptured\n- uid: System.Windows.ContentElement.IsStylusCapturedChanged\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsStylusCapturedChanged\n  nameWithType: ContentElement.IsStylusCapturedChanged\n  fullName: ContentElement.IsStylusCapturedChanged\n- uid: System.Windows.ContentElement.IsStylusCapturedProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsStylusCapturedProperty\n  nameWithType: ContentElement.IsStylusCapturedProperty\n  fullName: ContentElement.IsStylusCapturedProperty\n- uid: System.Windows.ContentElement.IsStylusCaptureWithin\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsStylusCaptureWithin\n  nameWithType: ContentElement.IsStylusCaptureWithin\n  fullName: ContentElement.IsStylusCaptureWithin\n- uid: System.Windows.ContentElement.IsStylusCaptureWithinChanged\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsStylusCaptureWithinChanged\n  nameWithType: ContentElement.IsStylusCaptureWithinChanged\n  fullName: ContentElement.IsStylusCaptureWithinChanged\n- uid: System.Windows.ContentElement.IsStylusCaptureWithinProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsStylusCaptureWithinProperty\n  nameWithType: ContentElement.IsStylusCaptureWithinProperty\n  fullName: ContentElement.IsStylusCaptureWithinProperty\n- uid: System.Windows.ContentElement.IsStylusDirectlyOver\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsStylusDirectlyOver\n  nameWithType: ContentElement.IsStylusDirectlyOver\n  fullName: ContentElement.IsStylusDirectlyOver\n- uid: System.Windows.ContentElement.IsStylusDirectlyOverChanged\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsStylusDirectlyOverChanged\n  nameWithType: ContentElement.IsStylusDirectlyOverChanged\n  fullName: ContentElement.IsStylusDirectlyOverChanged\n- uid: System.Windows.ContentElement.IsStylusDirectlyOverProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsStylusDirectlyOverProperty\n  nameWithType: ContentElement.IsStylusDirectlyOverProperty\n  fullName: ContentElement.IsStylusDirectlyOverProperty\n- uid: System.Windows.ContentElement.IsStylusOver\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsStylusOver\n  nameWithType: ContentElement.IsStylusOver\n  fullName: ContentElement.IsStylusOver\n- uid: System.Windows.ContentElement.IsStylusOverProperty\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsStylusOverProperty\n  nameWithType: ContentElement.IsStylusOverProperty\n  fullName: ContentElement.IsStylusOverProperty\n- uid: System.Windows.ContentElement.KeyDown\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: KeyDown\n  nameWithType: ContentElement.KeyDown\n  fullName: ContentElement.KeyDown\n- uid: System.Windows.Input.KeyEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: KeyEventHandler\n  nameWithType: KeyEventHandler\n  fullName: System.Windows.Input.KeyEventHandler\n- uid: System.Windows.ContentElement.KeyDownEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: KeyDownEvent\n  nameWithType: ContentElement.KeyDownEvent\n  fullName: ContentElement.KeyDownEvent\n- uid: System.Windows.ContentElement.KeyUp\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: KeyUp\n  nameWithType: ContentElement.KeyUp\n  fullName: ContentElement.KeyUp\n- uid: System.Windows.ContentElement.KeyUpEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: KeyUpEvent\n  nameWithType: ContentElement.KeyUpEvent\n  fullName: ContentElement.KeyUpEvent\n- uid: System.Windows.ContentElement.LostFocus\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: LostFocus\n  nameWithType: ContentElement.LostFocus\n  fullName: ContentElement.LostFocus\n- uid: System.Windows.ContentElement.LostFocusEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: LostFocusEvent\n  nameWithType: ContentElement.LostFocusEvent\n  fullName: ContentElement.LostFocusEvent\n- uid: System.Windows.ContentElement.LostKeyboardFocus\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: LostKeyboardFocus\n  nameWithType: ContentElement.LostKeyboardFocus\n  fullName: ContentElement.LostKeyboardFocus\n- uid: System.Windows.ContentElement.LostKeyboardFocusEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: LostKeyboardFocusEvent\n  nameWithType: ContentElement.LostKeyboardFocusEvent\n  fullName: ContentElement.LostKeyboardFocusEvent\n- uid: System.Windows.ContentElement.LostMouseCapture\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: LostMouseCapture\n  nameWithType: ContentElement.LostMouseCapture\n  fullName: ContentElement.LostMouseCapture\n- uid: System.Windows.ContentElement.LostMouseCaptureEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: LostMouseCaptureEvent\n  nameWithType: ContentElement.LostMouseCaptureEvent\n  fullName: ContentElement.LostMouseCaptureEvent\n- uid: System.Windows.ContentElement.LostStylusCapture\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: LostStylusCapture\n  nameWithType: ContentElement.LostStylusCapture\n  fullName: ContentElement.LostStylusCapture\n- uid: System.Windows.ContentElement.LostStylusCaptureEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: LostStylusCaptureEvent\n  nameWithType: ContentElement.LostStylusCaptureEvent\n  fullName: ContentElement.LostStylusCaptureEvent\n- uid: System.Windows.ContentElement.LostTouchCapture\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: LostTouchCapture\n  nameWithType: ContentElement.LostTouchCapture\n  fullName: ContentElement.LostTouchCapture\n- uid: System.Windows.ContentElement.LostTouchCaptureEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: LostTouchCaptureEvent\n  nameWithType: ContentElement.LostTouchCaptureEvent\n  fullName: ContentElement.LostTouchCaptureEvent\n- uid: System.Windows.ContentElement.MouseDown\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseDown\n  nameWithType: ContentElement.MouseDown\n  fullName: ContentElement.MouseDown\n- uid: System.Windows.Input.MouseButtonEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseButtonEventHandler\n  nameWithType: MouseButtonEventHandler\n  fullName: System.Windows.Input.MouseButtonEventHandler\n- uid: System.Windows.ContentElement.MouseDownEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseDownEvent\n  nameWithType: ContentElement.MouseDownEvent\n  fullName: ContentElement.MouseDownEvent\n- uid: System.Windows.ContentElement.MouseEnter\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseEnter\n  nameWithType: ContentElement.MouseEnter\n  fullName: ContentElement.MouseEnter\n- uid: System.Windows.ContentElement.MouseEnterEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseEnterEvent\n  nameWithType: ContentElement.MouseEnterEvent\n  fullName: ContentElement.MouseEnterEvent\n- uid: System.Windows.ContentElement.MouseLeave\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseLeave\n  nameWithType: ContentElement.MouseLeave\n  fullName: ContentElement.MouseLeave\n- uid: System.Windows.ContentElement.MouseLeaveEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseLeaveEvent\n  nameWithType: ContentElement.MouseLeaveEvent\n  fullName: ContentElement.MouseLeaveEvent\n- uid: System.Windows.ContentElement.MouseLeftButtonDown\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseLeftButtonDown\n  nameWithType: ContentElement.MouseLeftButtonDown\n  fullName: ContentElement.MouseLeftButtonDown\n- uid: System.Windows.ContentElement.MouseLeftButtonDownEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseLeftButtonDownEvent\n  nameWithType: ContentElement.MouseLeftButtonDownEvent\n  fullName: ContentElement.MouseLeftButtonDownEvent\n- uid: System.Windows.ContentElement.MouseLeftButtonUp\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseLeftButtonUp\n  nameWithType: ContentElement.MouseLeftButtonUp\n  fullName: ContentElement.MouseLeftButtonUp\n- uid: System.Windows.ContentElement.MouseLeftButtonUpEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseLeftButtonUpEvent\n  nameWithType: ContentElement.MouseLeftButtonUpEvent\n  fullName: ContentElement.MouseLeftButtonUpEvent\n- uid: System.Windows.ContentElement.MouseMove\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseMove\n  nameWithType: ContentElement.MouseMove\n  fullName: ContentElement.MouseMove\n- uid: System.Windows.ContentElement.MouseMoveEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseMoveEvent\n  nameWithType: ContentElement.MouseMoveEvent\n  fullName: ContentElement.MouseMoveEvent\n- uid: System.Windows.ContentElement.MouseRightButtonDown\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseRightButtonDown\n  nameWithType: ContentElement.MouseRightButtonDown\n  fullName: ContentElement.MouseRightButtonDown\n- uid: System.Windows.ContentElement.MouseRightButtonDownEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseRightButtonDownEvent\n  nameWithType: ContentElement.MouseRightButtonDownEvent\n  fullName: ContentElement.MouseRightButtonDownEvent\n- uid: System.Windows.ContentElement.MouseRightButtonUp\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseRightButtonUp\n  nameWithType: ContentElement.MouseRightButtonUp\n  fullName: ContentElement.MouseRightButtonUp\n- uid: System.Windows.ContentElement.MouseRightButtonUpEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseRightButtonUpEvent\n  nameWithType: ContentElement.MouseRightButtonUpEvent\n  fullName: ContentElement.MouseRightButtonUpEvent\n- uid: System.Windows.ContentElement.MouseUp\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseUp\n  nameWithType: ContentElement.MouseUp\n  fullName: ContentElement.MouseUp\n- uid: System.Windows.ContentElement.MouseUpEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseUpEvent\n  nameWithType: ContentElement.MouseUpEvent\n  fullName: ContentElement.MouseUpEvent\n- uid: System.Windows.ContentElement.MouseWheel\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseWheel\n  nameWithType: ContentElement.MouseWheel\n  fullName: ContentElement.MouseWheel\n- uid: System.Windows.Input.MouseWheelEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseWheelEventHandler\n  nameWithType: MouseWheelEventHandler\n  fullName: System.Windows.Input.MouseWheelEventHandler\n- uid: System.Windows.ContentElement.MouseWheelEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MouseWheelEvent\n  nameWithType: ContentElement.MouseWheelEvent\n  fullName: ContentElement.MouseWheelEvent\n- uid: System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MoveFocus(TraversalRequest)\n  nameWithType: ContentElement.MoveFocus(TraversalRequest)\n  fullName: ContentElement.MoveFocus(TraversalRequest)\n- uid: System.Windows.Input.TraversalRequest\n  parent: System.Windows.Input\n  isExternal: false\n  name: TraversalRequest\n  nameWithType: TraversalRequest\n  fullName: System.Windows.Input.TraversalRequest\n- uid: System.Windows.ContentElement.OnCreateAutomationPeer\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnCreateAutomationPeer()\n  nameWithType: ContentElement.OnCreateAutomationPeer()\n  fullName: ContentElement.OnCreateAutomationPeer()\n- uid: System.Windows.Automation.Peers.AutomationPeer\n  parent: System.Windows.Automation.Peers\n  isExternal: false\n  name: AutomationPeer\n  nameWithType: AutomationPeer\n  fullName: System.Windows.Automation.Peers.AutomationPeer\n- uid: System.Windows.ContentElement.OnDragEnter(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnDragEnter(DragEventArgs)\n  nameWithType: ContentElement.OnDragEnter(DragEventArgs)\n  fullName: ContentElement.OnDragEnter(DragEventArgs)\n- uid: System.Windows.DragEventArgs\n  parent: System.Windows\n  isExternal: false\n  name: DragEventArgs\n  nameWithType: DragEventArgs\n  fullName: System.Windows.DragEventArgs\n- uid: System.Windows.ContentElement.OnDragLeave(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnDragLeave(DragEventArgs)\n  nameWithType: ContentElement.OnDragLeave(DragEventArgs)\n  fullName: ContentElement.OnDragLeave(DragEventArgs)\n- uid: System.Windows.ContentElement.OnDragOver(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnDragOver(DragEventArgs)\n  nameWithType: ContentElement.OnDragOver(DragEventArgs)\n  fullName: ContentElement.OnDragOver(DragEventArgs)\n- uid: System.Windows.ContentElement.OnDrop(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnDrop(DragEventArgs)\n  nameWithType: ContentElement.OnDrop(DragEventArgs)\n  fullName: ContentElement.OnDrop(DragEventArgs)\n- uid: System.Windows.ContentElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnGiveFeedback(GiveFeedbackEventArgs)\n  nameWithType: ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)\n  fullName: ContentElement.OnGiveFeedback(GiveFeedbackEventArgs)\n- uid: System.Windows.GiveFeedbackEventArgs\n  parent: System.Windows\n  isExternal: false\n  name: GiveFeedbackEventArgs\n  nameWithType: GiveFeedbackEventArgs\n  fullName: System.Windows.GiveFeedbackEventArgs\n- uid: System.Windows.ContentElement.OnGotFocus(System.Windows.RoutedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnGotFocus(RoutedEventArgs)\n  nameWithType: ContentElement.OnGotFocus(RoutedEventArgs)\n  fullName: ContentElement.OnGotFocus(RoutedEventArgs)\n- uid: System.Windows.ContentElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: ContentElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n- uid: System.Windows.Input.KeyboardFocusChangedEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: KeyboardFocusChangedEventArgs\n  nameWithType: KeyboardFocusChangedEventArgs\n  fullName: System.Windows.Input.KeyboardFocusChangedEventArgs\n- uid: System.Windows.ContentElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnGotMouseCapture(MouseEventArgs)\n  nameWithType: ContentElement.OnGotMouseCapture(MouseEventArgs)\n  fullName: ContentElement.OnGotMouseCapture(MouseEventArgs)\n- uid: System.Windows.Input.MouseEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseEventArgs\n  nameWithType: MouseEventArgs\n  fullName: System.Windows.Input.MouseEventArgs\n- uid: System.Windows.ContentElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnGotStylusCapture(StylusEventArgs)\n  nameWithType: ContentElement.OnGotStylusCapture(StylusEventArgs)\n  fullName: ContentElement.OnGotStylusCapture(StylusEventArgs)\n- uid: System.Windows.Input.StylusEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusEventArgs\n  nameWithType: StylusEventArgs\n  fullName: System.Windows.Input.StylusEventArgs\n- uid: System.Windows.ContentElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnGotTouchCapture(TouchEventArgs)\n  nameWithType: ContentElement.OnGotTouchCapture(TouchEventArgs)\n  fullName: ContentElement.OnGotTouchCapture(TouchEventArgs)\n- uid: System.Windows.ContentElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.DependencyPropertyChangedEventArgs\n  parent: System.Windows\n  isExternal: false\n  name: DependencyPropertyChangedEventArgs\n  nameWithType: DependencyPropertyChangedEventArgs\n  fullName: System.Windows.DependencyPropertyChangedEventArgs\n- uid: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.ContentElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.ContentElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  fullName: ContentElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.ContentElement.OnKeyDown(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnKeyDown(KeyEventArgs)\n  nameWithType: ContentElement.OnKeyDown(KeyEventArgs)\n  fullName: ContentElement.OnKeyDown(KeyEventArgs)\n- uid: System.Windows.Input.KeyEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: KeyEventArgs\n  nameWithType: KeyEventArgs\n  fullName: System.Windows.Input.KeyEventArgs\n- uid: System.Windows.ContentElement.OnKeyUp(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnKeyUp(KeyEventArgs)\n  nameWithType: ContentElement.OnKeyUp(KeyEventArgs)\n  fullName: ContentElement.OnKeyUp(KeyEventArgs)\n- uid: System.Windows.ContentElement.OnLostFocus(System.Windows.RoutedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnLostFocus(RoutedEventArgs)\n  nameWithType: ContentElement.OnLostFocus(RoutedEventArgs)\n  fullName: ContentElement.OnLostFocus(RoutedEventArgs)\n- uid: System.Windows.ContentElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: ContentElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n- uid: System.Windows.ContentElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnLostMouseCapture(MouseEventArgs)\n  nameWithType: ContentElement.OnLostMouseCapture(MouseEventArgs)\n  fullName: ContentElement.OnLostMouseCapture(MouseEventArgs)\n- uid: System.Windows.ContentElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnLostStylusCapture(StylusEventArgs)\n  nameWithType: ContentElement.OnLostStylusCapture(StylusEventArgs)\n  fullName: ContentElement.OnLostStylusCapture(StylusEventArgs)\n- uid: System.Windows.ContentElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnLostTouchCapture(TouchEventArgs)\n  nameWithType: ContentElement.OnLostTouchCapture(TouchEventArgs)\n  fullName: ContentElement.OnLostTouchCapture(TouchEventArgs)\n- uid: System.Windows.ContentElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseDown(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnMouseDown(MouseButtonEventArgs)\n  fullName: ContentElement.OnMouseDown(MouseButtonEventArgs)\n- uid: System.Windows.Input.MouseButtonEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseButtonEventArgs\n  nameWithType: MouseButtonEventArgs\n  fullName: System.Windows.Input.MouseButtonEventArgs\n- uid: System.Windows.ContentElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseEnter(MouseEventArgs)\n  nameWithType: ContentElement.OnMouseEnter(MouseEventArgs)\n  fullName: ContentElement.OnMouseEnter(MouseEventArgs)\n- uid: System.Windows.ContentElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseLeave(MouseEventArgs)\n  nameWithType: ContentElement.OnMouseLeave(MouseEventArgs)\n  fullName: ContentElement.OnMouseLeave(MouseEventArgs)\n- uid: System.Windows.ContentElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseLeftButtonDown(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)\n  fullName: ContentElement.OnMouseLeftButtonDown(MouseButtonEventArgs)\n- uid: System.Windows.ContentElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseLeftButtonUp(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)\n  fullName: ContentElement.OnMouseLeftButtonUp(MouseButtonEventArgs)\n- uid: System.Windows.ContentElement.OnMouseMove(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseMove(MouseEventArgs)\n  nameWithType: ContentElement.OnMouseMove(MouseEventArgs)\n  fullName: ContentElement.OnMouseMove(MouseEventArgs)\n- uid: System.Windows.ContentElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseRightButtonDown(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)\n  fullName: ContentElement.OnMouseRightButtonDown(MouseButtonEventArgs)\n- uid: System.Windows.ContentElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseRightButtonUp(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)\n  fullName: ContentElement.OnMouseRightButtonUp(MouseButtonEventArgs)\n- uid: System.Windows.ContentElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseUp(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnMouseUp(MouseButtonEventArgs)\n  fullName: ContentElement.OnMouseUp(MouseButtonEventArgs)\n- uid: System.Windows.ContentElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseWheel(MouseWheelEventArgs)\n  nameWithType: ContentElement.OnMouseWheel(MouseWheelEventArgs)\n  fullName: ContentElement.OnMouseWheel(MouseWheelEventArgs)\n- uid: System.Windows.Input.MouseWheelEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: MouseWheelEventArgs\n  nameWithType: MouseWheelEventArgs\n  fullName: System.Windows.Input.MouseWheelEventArgs\n- uid: System.Windows.ContentElement.OnPreviewDragEnter(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewDragEnter(DragEventArgs)\n  nameWithType: ContentElement.OnPreviewDragEnter(DragEventArgs)\n  fullName: ContentElement.OnPreviewDragEnter(DragEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewDragLeave(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewDragLeave(DragEventArgs)\n  nameWithType: ContentElement.OnPreviewDragLeave(DragEventArgs)\n  fullName: ContentElement.OnPreviewDragLeave(DragEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewDragOver(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewDragOver(DragEventArgs)\n  nameWithType: ContentElement.OnPreviewDragOver(DragEventArgs)\n  fullName: ContentElement.OnPreviewDragOver(DragEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewDrop(System.Windows.DragEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewDrop(DragEventArgs)\n  nameWithType: ContentElement.OnPreviewDrop(DragEventArgs)\n  fullName: ContentElement.OnPreviewDrop(DragEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)\n  nameWithType: ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)\n  fullName: ContentElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: ContentElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewKeyDown(KeyEventArgs)\n  nameWithType: ContentElement.OnPreviewKeyDown(KeyEventArgs)\n  fullName: ContentElement.OnPreviewKeyDown(KeyEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewKeyUp(KeyEventArgs)\n  nameWithType: ContentElement.OnPreviewKeyUp(KeyEventArgs)\n  fullName: ContentElement.OnPreviewKeyUp(KeyEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: ContentElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseDown(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)\n  fullName: ContentElement.OnPreviewMouseDown(MouseButtonEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)\n  fullName: ContentElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)\n  fullName: ContentElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseMove(MouseEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseMove(MouseEventArgs)\n  fullName: ContentElement.OnPreviewMouseMove(MouseEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)\n  fullName: ContentElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)\n  fullName: ContentElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseUp(MouseButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)\n  fullName: ContentElement.OnPreviewMouseUp(MouseButtonEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseWheel(MouseWheelEventArgs)\n  nameWithType: ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)\n  fullName: ContentElement.OnPreviewMouseWheel(MouseWheelEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)\n  nameWithType: ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)\n  fullName: ContentElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)\n- uid: System.Windows.QueryContinueDragEventArgs\n  parent: System.Windows\n  isExternal: false\n  name: QueryContinueDragEventArgs\n  nameWithType: QueryContinueDragEventArgs\n  fullName: System.Windows.QueryContinueDragEventArgs\n- uid: System.Windows.ContentElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)\n  fullName: ContentElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)\n- uid: System.Windows.Input.StylusButtonEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusButtonEventArgs\n  nameWithType: StylusButtonEventArgs\n  fullName: System.Windows.Input.StylusButtonEventArgs\n- uid: System.Windows.ContentElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)\n  fullName: ContentElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusDown(StylusDownEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusDown(StylusDownEventArgs)\n  fullName: ContentElement.OnPreviewStylusDown(StylusDownEventArgs)\n- uid: System.Windows.Input.StylusDownEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusDownEventArgs\n  nameWithType: StylusDownEventArgs\n  fullName: System.Windows.Input.StylusDownEventArgs\n- uid: System.Windows.ContentElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusInAirMove(StylusEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)\n  fullName: ContentElement.OnPreviewStylusInAirMove(StylusEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusInRange(StylusEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusInRange(StylusEventArgs)\n  fullName: ContentElement.OnPreviewStylusInRange(StylusEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusMove(StylusEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusMove(StylusEventArgs)\n  fullName: ContentElement.OnPreviewStylusMove(StylusEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusOutOfRange(StylusEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)\n  fullName: ContentElement.OnPreviewStylusOutOfRange(StylusEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)\n  fullName: ContentElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)\n- uid: System.Windows.Input.StylusSystemGestureEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusSystemGestureEventArgs\n  nameWithType: StylusSystemGestureEventArgs\n  fullName: System.Windows.Input.StylusSystemGestureEventArgs\n- uid: System.Windows.ContentElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusUp(StylusEventArgs)\n  nameWithType: ContentElement.OnPreviewStylusUp(StylusEventArgs)\n  fullName: ContentElement.OnPreviewStylusUp(StylusEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewTextInput(TextCompositionEventArgs)\n  nameWithType: ContentElement.OnPreviewTextInput(TextCompositionEventArgs)\n  fullName: ContentElement.OnPreviewTextInput(TextCompositionEventArgs)\n- uid: System.Windows.Input.TextCompositionEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: TextCompositionEventArgs\n  nameWithType: TextCompositionEventArgs\n  fullName: System.Windows.Input.TextCompositionEventArgs\n- uid: System.Windows.ContentElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewTouchDown(TouchEventArgs)\n  nameWithType: ContentElement.OnPreviewTouchDown(TouchEventArgs)\n  fullName: ContentElement.OnPreviewTouchDown(TouchEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewTouchMove(TouchEventArgs)\n  nameWithType: ContentElement.OnPreviewTouchMove(TouchEventArgs)\n  fullName: ContentElement.OnPreviewTouchMove(TouchEventArgs)\n- uid: System.Windows.ContentElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewTouchUp(TouchEventArgs)\n  nameWithType: ContentElement.OnPreviewTouchUp(TouchEventArgs)\n  fullName: ContentElement.OnPreviewTouchUp(TouchEventArgs)\n- uid: System.Windows.ContentElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnQueryContinueDrag(QueryContinueDragEventArgs)\n  nameWithType: ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)\n  fullName: ContentElement.OnQueryContinueDrag(QueryContinueDragEventArgs)\n- uid: System.Windows.ContentElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnQueryCursor(QueryCursorEventArgs)\n  nameWithType: ContentElement.OnQueryCursor(QueryCursorEventArgs)\n  fullName: ContentElement.OnQueryCursor(QueryCursorEventArgs)\n- uid: System.Windows.Input.QueryCursorEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: QueryCursorEventArgs\n  nameWithType: QueryCursorEventArgs\n  fullName: System.Windows.Input.QueryCursorEventArgs\n- uid: System.Windows.ContentElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusButtonDown(StylusButtonEventArgs)\n  nameWithType: ContentElement.OnStylusButtonDown(StylusButtonEventArgs)\n  fullName: ContentElement.OnStylusButtonDown(StylusButtonEventArgs)\n- uid: System.Windows.ContentElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusButtonUp(StylusButtonEventArgs)\n  nameWithType: ContentElement.OnStylusButtonUp(StylusButtonEventArgs)\n  fullName: ContentElement.OnStylusButtonUp(StylusButtonEventArgs)\n- uid: System.Windows.ContentElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusDown(StylusDownEventArgs)\n  nameWithType: ContentElement.OnStylusDown(StylusDownEventArgs)\n  fullName: ContentElement.OnStylusDown(StylusDownEventArgs)\n- uid: System.Windows.ContentElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusEnter(StylusEventArgs)\n  nameWithType: ContentElement.OnStylusEnter(StylusEventArgs)\n  fullName: ContentElement.OnStylusEnter(StylusEventArgs)\n- uid: System.Windows.ContentElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusInAirMove(StylusEventArgs)\n  nameWithType: ContentElement.OnStylusInAirMove(StylusEventArgs)\n  fullName: ContentElement.OnStylusInAirMove(StylusEventArgs)\n- uid: System.Windows.ContentElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusInRange(StylusEventArgs)\n  nameWithType: ContentElement.OnStylusInRange(StylusEventArgs)\n  fullName: ContentElement.OnStylusInRange(StylusEventArgs)\n- uid: System.Windows.ContentElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusLeave(StylusEventArgs)\n  nameWithType: ContentElement.OnStylusLeave(StylusEventArgs)\n  fullName: ContentElement.OnStylusLeave(StylusEventArgs)\n- uid: System.Windows.ContentElement.OnStylusMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusMove(StylusEventArgs)\n  nameWithType: ContentElement.OnStylusMove(StylusEventArgs)\n  fullName: ContentElement.OnStylusMove(StylusEventArgs)\n- uid: System.Windows.ContentElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusOutOfRange(StylusEventArgs)\n  nameWithType: ContentElement.OnStylusOutOfRange(StylusEventArgs)\n  fullName: ContentElement.OnStylusOutOfRange(StylusEventArgs)\n- uid: System.Windows.ContentElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)\n  nameWithType: ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)\n  fullName: ContentElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)\n- uid: System.Windows.ContentElement.OnStylusUp(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusUp(StylusEventArgs)\n  nameWithType: ContentElement.OnStylusUp(StylusEventArgs)\n  fullName: ContentElement.OnStylusUp(StylusEventArgs)\n- uid: System.Windows.ContentElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnTextInput(TextCompositionEventArgs)\n  nameWithType: ContentElement.OnTextInput(TextCompositionEventArgs)\n  fullName: ContentElement.OnTextInput(TextCompositionEventArgs)\n- uid: System.Windows.ContentElement.OnTouchDown(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnTouchDown(TouchEventArgs)\n  nameWithType: ContentElement.OnTouchDown(TouchEventArgs)\n  fullName: ContentElement.OnTouchDown(TouchEventArgs)\n- uid: System.Windows.ContentElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnTouchEnter(TouchEventArgs)\n  nameWithType: ContentElement.OnTouchEnter(TouchEventArgs)\n  fullName: ContentElement.OnTouchEnter(TouchEventArgs)\n- uid: System.Windows.ContentElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnTouchLeave(TouchEventArgs)\n  nameWithType: ContentElement.OnTouchLeave(TouchEventArgs)\n  fullName: ContentElement.OnTouchLeave(TouchEventArgs)\n- uid: System.Windows.ContentElement.OnTouchMove(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnTouchMove(TouchEventArgs)\n  nameWithType: ContentElement.OnTouchMove(TouchEventArgs)\n  fullName: ContentElement.OnTouchMove(TouchEventArgs)\n- uid: System.Windows.ContentElement.OnTouchUp(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnTouchUp(TouchEventArgs)\n  nameWithType: ContentElement.OnTouchUp(TouchEventArgs)\n  fullName: ContentElement.OnTouchUp(TouchEventArgs)\n- uid: System.Windows.ContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PredictFocus(FocusNavigationDirection)\n  nameWithType: ContentElement.PredictFocus(FocusNavigationDirection)\n  fullName: ContentElement.PredictFocus(FocusNavigationDirection)\n- uid: System.Windows.Input.FocusNavigationDirection\n  parent: System.Windows.Input\n  isExternal: false\n  name: FocusNavigationDirection\n  nameWithType: FocusNavigationDirection\n  fullName: System.Windows.Input.FocusNavigationDirection\n- uid: System.Windows.ContentElement.PreviewDragEnter\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewDragEnter\n  nameWithType: ContentElement.PreviewDragEnter\n  fullName: ContentElement.PreviewDragEnter\n- uid: System.Windows.ContentElement.PreviewDragEnterEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewDragEnterEvent\n  nameWithType: ContentElement.PreviewDragEnterEvent\n  fullName: ContentElement.PreviewDragEnterEvent\n- uid: System.Windows.ContentElement.PreviewDragLeave\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewDragLeave\n  nameWithType: ContentElement.PreviewDragLeave\n  fullName: ContentElement.PreviewDragLeave\n- uid: System.Windows.ContentElement.PreviewDragLeaveEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewDragLeaveEvent\n  nameWithType: ContentElement.PreviewDragLeaveEvent\n  fullName: ContentElement.PreviewDragLeaveEvent\n- uid: System.Windows.ContentElement.PreviewDragOver\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewDragOver\n  nameWithType: ContentElement.PreviewDragOver\n  fullName: ContentElement.PreviewDragOver\n- uid: System.Windows.ContentElement.PreviewDragOverEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewDragOverEvent\n  nameWithType: ContentElement.PreviewDragOverEvent\n  fullName: ContentElement.PreviewDragOverEvent\n- uid: System.Windows.ContentElement.PreviewDrop\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewDrop\n  nameWithType: ContentElement.PreviewDrop\n  fullName: ContentElement.PreviewDrop\n- uid: System.Windows.ContentElement.PreviewDropEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewDropEvent\n  nameWithType: ContentElement.PreviewDropEvent\n  fullName: ContentElement.PreviewDropEvent\n- uid: System.Windows.ContentElement.PreviewGiveFeedback\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewGiveFeedback\n  nameWithType: ContentElement.PreviewGiveFeedback\n  fullName: ContentElement.PreviewGiveFeedback\n- uid: System.Windows.ContentElement.PreviewGiveFeedbackEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewGiveFeedbackEvent\n  nameWithType: ContentElement.PreviewGiveFeedbackEvent\n  fullName: ContentElement.PreviewGiveFeedbackEvent\n- uid: System.Windows.ContentElement.PreviewGotKeyboardFocus\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewGotKeyboardFocus\n  nameWithType: ContentElement.PreviewGotKeyboardFocus\n  fullName: ContentElement.PreviewGotKeyboardFocus\n- uid: System.Windows.ContentElement.PreviewGotKeyboardFocusEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewGotKeyboardFocusEvent\n  nameWithType: ContentElement.PreviewGotKeyboardFocusEvent\n  fullName: ContentElement.PreviewGotKeyboardFocusEvent\n- uid: System.Windows.ContentElement.PreviewKeyDown\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewKeyDown\n  nameWithType: ContentElement.PreviewKeyDown\n  fullName: ContentElement.PreviewKeyDown\n- uid: System.Windows.ContentElement.PreviewKeyDownEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewKeyDownEvent\n  nameWithType: ContentElement.PreviewKeyDownEvent\n  fullName: ContentElement.PreviewKeyDownEvent\n- uid: System.Windows.ContentElement.PreviewKeyUp\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewKeyUp\n  nameWithType: ContentElement.PreviewKeyUp\n  fullName: ContentElement.PreviewKeyUp\n- uid: System.Windows.ContentElement.PreviewKeyUpEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewKeyUpEvent\n  nameWithType: ContentElement.PreviewKeyUpEvent\n  fullName: ContentElement.PreviewKeyUpEvent\n- uid: System.Windows.ContentElement.PreviewLostKeyboardFocus\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewLostKeyboardFocus\n  nameWithType: ContentElement.PreviewLostKeyboardFocus\n  fullName: ContentElement.PreviewLostKeyboardFocus\n- uid: System.Windows.ContentElement.PreviewLostKeyboardFocusEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewLostKeyboardFocusEvent\n  nameWithType: ContentElement.PreviewLostKeyboardFocusEvent\n  fullName: ContentElement.PreviewLostKeyboardFocusEvent\n- uid: System.Windows.ContentElement.PreviewMouseDown\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseDown\n  nameWithType: ContentElement.PreviewMouseDown\n  fullName: ContentElement.PreviewMouseDown\n- uid: System.Windows.ContentElement.PreviewMouseDownEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseDownEvent\n  nameWithType: ContentElement.PreviewMouseDownEvent\n  fullName: ContentElement.PreviewMouseDownEvent\n- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDown\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseLeftButtonDown\n  nameWithType: ContentElement.PreviewMouseLeftButtonDown\n  fullName: ContentElement.PreviewMouseLeftButtonDown\n- uid: System.Windows.ContentElement.PreviewMouseLeftButtonDownEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseLeftButtonDownEvent\n  nameWithType: ContentElement.PreviewMouseLeftButtonDownEvent\n  fullName: ContentElement.PreviewMouseLeftButtonDownEvent\n- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUp\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseLeftButtonUp\n  nameWithType: ContentElement.PreviewMouseLeftButtonUp\n  fullName: ContentElement.PreviewMouseLeftButtonUp\n- uid: System.Windows.ContentElement.PreviewMouseLeftButtonUpEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseLeftButtonUpEvent\n  nameWithType: ContentElement.PreviewMouseLeftButtonUpEvent\n  fullName: ContentElement.PreviewMouseLeftButtonUpEvent\n- uid: System.Windows.ContentElement.PreviewMouseMove\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseMove\n  nameWithType: ContentElement.PreviewMouseMove\n  fullName: ContentElement.PreviewMouseMove\n- uid: System.Windows.ContentElement.PreviewMouseMoveEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseMoveEvent\n  nameWithType: ContentElement.PreviewMouseMoveEvent\n  fullName: ContentElement.PreviewMouseMoveEvent\n- uid: System.Windows.ContentElement.PreviewMouseRightButtonDown\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseRightButtonDown\n  nameWithType: ContentElement.PreviewMouseRightButtonDown\n  fullName: ContentElement.PreviewMouseRightButtonDown\n- uid: System.Windows.ContentElement.PreviewMouseRightButtonDownEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseRightButtonDownEvent\n  nameWithType: ContentElement.PreviewMouseRightButtonDownEvent\n  fullName: ContentElement.PreviewMouseRightButtonDownEvent\n- uid: System.Windows.ContentElement.PreviewMouseRightButtonUp\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseRightButtonUp\n  nameWithType: ContentElement.PreviewMouseRightButtonUp\n  fullName: ContentElement.PreviewMouseRightButtonUp\n- uid: System.Windows.ContentElement.PreviewMouseRightButtonUpEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseRightButtonUpEvent\n  nameWithType: ContentElement.PreviewMouseRightButtonUpEvent\n  fullName: ContentElement.PreviewMouseRightButtonUpEvent\n- uid: System.Windows.ContentElement.PreviewMouseUp\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseUp\n  nameWithType: ContentElement.PreviewMouseUp\n  fullName: ContentElement.PreviewMouseUp\n- uid: System.Windows.ContentElement.PreviewMouseUpEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseUpEvent\n  nameWithType: ContentElement.PreviewMouseUpEvent\n  fullName: ContentElement.PreviewMouseUpEvent\n- uid: System.Windows.ContentElement.PreviewMouseWheel\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseWheel\n  nameWithType: ContentElement.PreviewMouseWheel\n  fullName: ContentElement.PreviewMouseWheel\n- uid: System.Windows.ContentElement.PreviewMouseWheelEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewMouseWheelEvent\n  nameWithType: ContentElement.PreviewMouseWheelEvent\n  fullName: ContentElement.PreviewMouseWheelEvent\n- uid: System.Windows.ContentElement.PreviewQueryContinueDrag\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewQueryContinueDrag\n  nameWithType: ContentElement.PreviewQueryContinueDrag\n  fullName: ContentElement.PreviewQueryContinueDrag\n- uid: System.Windows.QueryContinueDragEventHandler\n  parent: System.Windows\n  isExternal: false\n  name: QueryContinueDragEventHandler\n  nameWithType: QueryContinueDragEventHandler\n  fullName: System.Windows.QueryContinueDragEventHandler\n- uid: System.Windows.ContentElement.PreviewQueryContinueDragEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewQueryContinueDragEvent\n  nameWithType: ContentElement.PreviewQueryContinueDragEvent\n  fullName: ContentElement.PreviewQueryContinueDragEvent\n- uid: System.Windows.ContentElement.PreviewStylusButtonDown\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusButtonDown\n  nameWithType: ContentElement.PreviewStylusButtonDown\n  fullName: ContentElement.PreviewStylusButtonDown\n- uid: System.Windows.Input.StylusButtonEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusButtonEventHandler\n  nameWithType: StylusButtonEventHandler\n  fullName: System.Windows.Input.StylusButtonEventHandler\n- uid: System.Windows.ContentElement.PreviewStylusButtonDownEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusButtonDownEvent\n  nameWithType: ContentElement.PreviewStylusButtonDownEvent\n  fullName: ContentElement.PreviewStylusButtonDownEvent\n- uid: System.Windows.ContentElement.PreviewStylusButtonUp\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusButtonUp\n  nameWithType: ContentElement.PreviewStylusButtonUp\n  fullName: ContentElement.PreviewStylusButtonUp\n- uid: System.Windows.ContentElement.PreviewStylusButtonUpEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusButtonUpEvent\n  nameWithType: ContentElement.PreviewStylusButtonUpEvent\n  fullName: ContentElement.PreviewStylusButtonUpEvent\n- uid: System.Windows.ContentElement.PreviewStylusDown\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusDown\n  nameWithType: ContentElement.PreviewStylusDown\n  fullName: ContentElement.PreviewStylusDown\n- uid: System.Windows.Input.StylusDownEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusDownEventHandler\n  nameWithType: StylusDownEventHandler\n  fullName: System.Windows.Input.StylusDownEventHandler\n- uid: System.Windows.ContentElement.PreviewStylusDownEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusDownEvent\n  nameWithType: ContentElement.PreviewStylusDownEvent\n  fullName: ContentElement.PreviewStylusDownEvent\n- uid: System.Windows.ContentElement.PreviewStylusInAirMove\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusInAirMove\n  nameWithType: ContentElement.PreviewStylusInAirMove\n  fullName: ContentElement.PreviewStylusInAirMove\n- uid: System.Windows.ContentElement.PreviewStylusInAirMoveEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusInAirMoveEvent\n  nameWithType: ContentElement.PreviewStylusInAirMoveEvent\n  fullName: ContentElement.PreviewStylusInAirMoveEvent\n- uid: System.Windows.ContentElement.PreviewStylusInRange\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusInRange\n  nameWithType: ContentElement.PreviewStylusInRange\n  fullName: ContentElement.PreviewStylusInRange\n- uid: System.Windows.ContentElement.PreviewStylusInRangeEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusInRangeEvent\n  nameWithType: ContentElement.PreviewStylusInRangeEvent\n  fullName: ContentElement.PreviewStylusInRangeEvent\n- uid: System.Windows.ContentElement.PreviewStylusMove\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusMove\n  nameWithType: ContentElement.PreviewStylusMove\n  fullName: ContentElement.PreviewStylusMove\n- uid: System.Windows.ContentElement.PreviewStylusMoveEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusMoveEvent\n  nameWithType: ContentElement.PreviewStylusMoveEvent\n  fullName: ContentElement.PreviewStylusMoveEvent\n- uid: System.Windows.ContentElement.PreviewStylusOutOfRange\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusOutOfRange\n  nameWithType: ContentElement.PreviewStylusOutOfRange\n  fullName: ContentElement.PreviewStylusOutOfRange\n- uid: System.Windows.ContentElement.PreviewStylusOutOfRangeEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusOutOfRangeEvent\n  nameWithType: ContentElement.PreviewStylusOutOfRangeEvent\n  fullName: ContentElement.PreviewStylusOutOfRangeEvent\n- uid: System.Windows.ContentElement.PreviewStylusSystemGesture\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusSystemGesture\n  nameWithType: ContentElement.PreviewStylusSystemGesture\n  fullName: ContentElement.PreviewStylusSystemGesture\n- uid: System.Windows.Input.StylusSystemGestureEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: StylusSystemGestureEventHandler\n  nameWithType: StylusSystemGestureEventHandler\n  fullName: System.Windows.Input.StylusSystemGestureEventHandler\n- uid: System.Windows.ContentElement.PreviewStylusSystemGestureEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusSystemGestureEvent\n  nameWithType: ContentElement.PreviewStylusSystemGestureEvent\n  fullName: ContentElement.PreviewStylusSystemGestureEvent\n- uid: System.Windows.ContentElement.PreviewStylusUp\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusUp\n  nameWithType: ContentElement.PreviewStylusUp\n  fullName: ContentElement.PreviewStylusUp\n- uid: System.Windows.ContentElement.PreviewStylusUpEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewStylusUpEvent\n  nameWithType: ContentElement.PreviewStylusUpEvent\n  fullName: ContentElement.PreviewStylusUpEvent\n- uid: System.Windows.ContentElement.PreviewTextInput\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewTextInput\n  nameWithType: ContentElement.PreviewTextInput\n  fullName: ContentElement.PreviewTextInput\n- uid: System.Windows.Input.TextCompositionEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: TextCompositionEventHandler\n  nameWithType: TextCompositionEventHandler\n  fullName: System.Windows.Input.TextCompositionEventHandler\n- uid: System.Windows.ContentElement.PreviewTextInputEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewTextInputEvent\n  nameWithType: ContentElement.PreviewTextInputEvent\n  fullName: ContentElement.PreviewTextInputEvent\n- uid: System.Windows.ContentElement.PreviewTouchDown\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewTouchDown\n  nameWithType: ContentElement.PreviewTouchDown\n  fullName: ContentElement.PreviewTouchDown\n- uid: System.Windows.ContentElement.PreviewTouchDownEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewTouchDownEvent\n  nameWithType: ContentElement.PreviewTouchDownEvent\n  fullName: ContentElement.PreviewTouchDownEvent\n- uid: System.Windows.ContentElement.PreviewTouchMove\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewTouchMove\n  nameWithType: ContentElement.PreviewTouchMove\n  fullName: ContentElement.PreviewTouchMove\n- uid: System.Windows.ContentElement.PreviewTouchMoveEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewTouchMoveEvent\n  nameWithType: ContentElement.PreviewTouchMoveEvent\n  fullName: ContentElement.PreviewTouchMoveEvent\n- uid: System.Windows.ContentElement.PreviewTouchUp\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewTouchUp\n  nameWithType: ContentElement.PreviewTouchUp\n  fullName: ContentElement.PreviewTouchUp\n- uid: System.Windows.ContentElement.PreviewTouchUpEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PreviewTouchUpEvent\n  nameWithType: ContentElement.PreviewTouchUpEvent\n  fullName: ContentElement.PreviewTouchUpEvent\n- uid: System.Windows.ContentElement.QueryContinueDrag\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: QueryContinueDrag\n  nameWithType: ContentElement.QueryContinueDrag\n  fullName: ContentElement.QueryContinueDrag\n- uid: System.Windows.ContentElement.QueryContinueDragEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: QueryContinueDragEvent\n  nameWithType: ContentElement.QueryContinueDragEvent\n  fullName: ContentElement.QueryContinueDragEvent\n- uid: System.Windows.ContentElement.QueryCursor\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: QueryCursor\n  nameWithType: ContentElement.QueryCursor\n  fullName: ContentElement.QueryCursor\n- uid: System.Windows.Input.QueryCursorEventHandler\n  parent: System.Windows.Input\n  isExternal: false\n  name: QueryCursorEventHandler\n  nameWithType: QueryCursorEventHandler\n  fullName: System.Windows.Input.QueryCursorEventHandler\n- uid: System.Windows.ContentElement.QueryCursorEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: QueryCursorEvent\n  nameWithType: ContentElement.QueryCursorEvent\n  fullName: ContentElement.QueryCursorEvent\n- uid: System.Windows.ContentElement.RaiseEvent(System.Windows.RoutedEventArgs)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: RaiseEvent(RoutedEventArgs)\n  nameWithType: ContentElement.RaiseEvent(RoutedEventArgs)\n  fullName: ContentElement.RaiseEvent(RoutedEventArgs)\n- uid: System.Windows.ContentElement.ReleaseAllTouchCaptures\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ReleaseAllTouchCaptures()\n  nameWithType: ContentElement.ReleaseAllTouchCaptures()\n  fullName: ContentElement.ReleaseAllTouchCaptures()\n- uid: System.Windows.ContentElement.ReleaseMouseCapture\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ReleaseMouseCapture()\n  nameWithType: ContentElement.ReleaseMouseCapture()\n  fullName: ContentElement.ReleaseMouseCapture()\n- uid: System.Windows.ContentElement.ReleaseStylusCapture\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ReleaseStylusCapture()\n  nameWithType: ContentElement.ReleaseStylusCapture()\n  fullName: ContentElement.ReleaseStylusCapture()\n- uid: System.Windows.ContentElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ReleaseTouchCapture(TouchDevice)\n  nameWithType: ContentElement.ReleaseTouchCapture(TouchDevice)\n  fullName: ContentElement.ReleaseTouchCapture(TouchDevice)\n- uid: System.Windows.ContentElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: RemoveHandler(RoutedEvent, Delegate)\n  nameWithType: ContentElement.RemoveHandler(RoutedEvent, Delegate)\n  fullName: ContentElement.RemoveHandler(RoutedEvent, Delegate)\n- uid: System.Windows.ContentElement.ShouldSerializeCommandBindings\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ShouldSerializeCommandBindings()\n  nameWithType: ContentElement.ShouldSerializeCommandBindings()\n  fullName: ContentElement.ShouldSerializeCommandBindings()\n- uid: System.Windows.ContentElement.ShouldSerializeInputBindings\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ShouldSerializeInputBindings()\n  nameWithType: ContentElement.ShouldSerializeInputBindings()\n  fullName: ContentElement.ShouldSerializeInputBindings()\n- uid: System.Windows.ContentElement.StylusButtonDown\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusButtonDown\n  nameWithType: ContentElement.StylusButtonDown\n  fullName: ContentElement.StylusButtonDown\n- uid: System.Windows.ContentElement.StylusButtonDownEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusButtonDownEvent\n  nameWithType: ContentElement.StylusButtonDownEvent\n  fullName: ContentElement.StylusButtonDownEvent\n- uid: System.Windows.ContentElement.StylusButtonUp\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusButtonUp\n  nameWithType: ContentElement.StylusButtonUp\n  fullName: ContentElement.StylusButtonUp\n- uid: System.Windows.ContentElement.StylusButtonUpEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusButtonUpEvent\n  nameWithType: ContentElement.StylusButtonUpEvent\n  fullName: ContentElement.StylusButtonUpEvent\n- uid: System.Windows.ContentElement.StylusDown\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusDown\n  nameWithType: ContentElement.StylusDown\n  fullName: ContentElement.StylusDown\n- uid: System.Windows.ContentElement.StylusDownEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusDownEvent\n  nameWithType: ContentElement.StylusDownEvent\n  fullName: ContentElement.StylusDownEvent\n- uid: System.Windows.ContentElement.StylusEnter\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusEnter\n  nameWithType: ContentElement.StylusEnter\n  fullName: ContentElement.StylusEnter\n- uid: System.Windows.ContentElement.StylusEnterEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusEnterEvent\n  nameWithType: ContentElement.StylusEnterEvent\n  fullName: ContentElement.StylusEnterEvent\n- uid: System.Windows.ContentElement.StylusInAirMove\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusInAirMove\n  nameWithType: ContentElement.StylusInAirMove\n  fullName: ContentElement.StylusInAirMove\n- uid: System.Windows.ContentElement.StylusInAirMoveEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusInAirMoveEvent\n  nameWithType: ContentElement.StylusInAirMoveEvent\n  fullName: ContentElement.StylusInAirMoveEvent\n- uid: System.Windows.ContentElement.StylusInRange\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusInRange\n  nameWithType: ContentElement.StylusInRange\n  fullName: ContentElement.StylusInRange\n- uid: System.Windows.ContentElement.StylusInRangeEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusInRangeEvent\n  nameWithType: ContentElement.StylusInRangeEvent\n  fullName: ContentElement.StylusInRangeEvent\n- uid: System.Windows.ContentElement.StylusLeave\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusLeave\n  nameWithType: ContentElement.StylusLeave\n  fullName: ContentElement.StylusLeave\n- uid: System.Windows.ContentElement.StylusLeaveEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusLeaveEvent\n  nameWithType: ContentElement.StylusLeaveEvent\n  fullName: ContentElement.StylusLeaveEvent\n- uid: System.Windows.ContentElement.StylusMove\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusMove\n  nameWithType: ContentElement.StylusMove\n  fullName: ContentElement.StylusMove\n- uid: System.Windows.ContentElement.StylusMoveEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusMoveEvent\n  nameWithType: ContentElement.StylusMoveEvent\n  fullName: ContentElement.StylusMoveEvent\n- uid: System.Windows.ContentElement.StylusOutOfRange\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusOutOfRange\n  nameWithType: ContentElement.StylusOutOfRange\n  fullName: ContentElement.StylusOutOfRange\n- uid: System.Windows.ContentElement.StylusOutOfRangeEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusOutOfRangeEvent\n  nameWithType: ContentElement.StylusOutOfRangeEvent\n  fullName: ContentElement.StylusOutOfRangeEvent\n- uid: System.Windows.ContentElement.StylusSystemGesture\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusSystemGesture\n  nameWithType: ContentElement.StylusSystemGesture\n  fullName: ContentElement.StylusSystemGesture\n- uid: System.Windows.ContentElement.StylusSystemGestureEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusSystemGestureEvent\n  nameWithType: ContentElement.StylusSystemGestureEvent\n  fullName: ContentElement.StylusSystemGestureEvent\n- uid: System.Windows.ContentElement.StylusUp\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusUp\n  nameWithType: ContentElement.StylusUp\n  fullName: ContentElement.StylusUp\n- uid: System.Windows.ContentElement.StylusUpEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: StylusUpEvent\n  nameWithType: ContentElement.StylusUpEvent\n  fullName: ContentElement.StylusUpEvent\n- uid: System.Windows.ContentElement.TextInput\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TextInput\n  nameWithType: ContentElement.TextInput\n  fullName: ContentElement.TextInput\n- uid: System.Windows.ContentElement.TextInputEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TextInputEvent\n  nameWithType: ContentElement.TextInputEvent\n  fullName: ContentElement.TextInputEvent\n- uid: System.Windows.ContentElement.TouchDown\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchDown\n  nameWithType: ContentElement.TouchDown\n  fullName: ContentElement.TouchDown\n- uid: System.Windows.ContentElement.TouchDownEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchDownEvent\n  nameWithType: ContentElement.TouchDownEvent\n  fullName: ContentElement.TouchDownEvent\n- uid: System.Windows.ContentElement.TouchEnter\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchEnter\n  nameWithType: ContentElement.TouchEnter\n  fullName: ContentElement.TouchEnter\n- uid: System.Windows.ContentElement.TouchEnterEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchEnterEvent\n  nameWithType: ContentElement.TouchEnterEvent\n  fullName: ContentElement.TouchEnterEvent\n- uid: System.Windows.ContentElement.TouchesCaptured\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchesCaptured\n  nameWithType: ContentElement.TouchesCaptured\n  fullName: ContentElement.TouchesCaptured\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<TouchDevice>\n  nameWithType: IEnumerable<TouchDevice>\n  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Windows.Input.TouchDevice\n    name: TouchDevice\n    nameWithType: TouchDevice\n    fullName: System.Windows.Input.TouchDevice\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.ContentElement.TouchesCapturedWithin\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchesCapturedWithin\n  nameWithType: ContentElement.TouchesCapturedWithin\n  fullName: ContentElement.TouchesCapturedWithin\n- uid: System.Windows.ContentElement.TouchesDirectlyOver\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchesDirectlyOver\n  nameWithType: ContentElement.TouchesDirectlyOver\n  fullName: ContentElement.TouchesDirectlyOver\n- uid: System.Windows.ContentElement.TouchesOver\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchesOver\n  nameWithType: ContentElement.TouchesOver\n  fullName: ContentElement.TouchesOver\n- uid: System.Windows.ContentElement.TouchLeave\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchLeave\n  nameWithType: ContentElement.TouchLeave\n  fullName: ContentElement.TouchLeave\n- uid: System.Windows.ContentElement.TouchLeaveEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchLeaveEvent\n  nameWithType: ContentElement.TouchLeaveEvent\n  fullName: ContentElement.TouchLeaveEvent\n- uid: System.Windows.ContentElement.TouchMove\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchMove\n  nameWithType: ContentElement.TouchMove\n  fullName: ContentElement.TouchMove\n- uid: System.Windows.ContentElement.TouchMoveEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchMoveEvent\n  nameWithType: ContentElement.TouchMoveEvent\n  fullName: ContentElement.TouchMoveEvent\n- uid: System.Windows.ContentElement.TouchUp\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchUp\n  nameWithType: ContentElement.TouchUp\n  fullName: ContentElement.TouchUp\n- uid: System.Windows.ContentElement.TouchUpEvent\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchUpEvent\n  nameWithType: ContentElement.TouchUpEvent\n  fullName: ContentElement.TouchUpEvent\n- uid: System.Windows.ContentElement.#ctor*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ContentElement\n  nameWithType: ContentElement.ContentElement\n  fullName: ContentElement.ContentElement\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.AddHandler*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AddHandler\n  nameWithType: ContentElement.AddHandler\n  fullName: ContentElement.AddHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.AddToEventRoute*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AddToEventRoute\n  nameWithType: ContentElement.AddToEventRoute\n  fullName: ContentElement.AddToEventRoute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.AllowDrop*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AllowDrop\n  nameWithType: ContentElement.AllowDrop\n  fullName: ContentElement.AllowDrop\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.ApplyAnimationClock*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ApplyAnimationClock\n  nameWithType: ContentElement.ApplyAnimationClock\n  fullName: ContentElement.ApplyAnimationClock\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.AreAnyTouchesCaptured*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AreAnyTouchesCaptured\n  nameWithType: ContentElement.AreAnyTouchesCaptured\n  fullName: ContentElement.AreAnyTouchesCaptured\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.AreAnyTouchesCapturedWithin*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AreAnyTouchesCapturedWithin\n  nameWithType: ContentElement.AreAnyTouchesCapturedWithin\n  fullName: ContentElement.AreAnyTouchesCapturedWithin\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.AreAnyTouchesDirectlyOver*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AreAnyTouchesDirectlyOver\n  nameWithType: ContentElement.AreAnyTouchesDirectlyOver\n  fullName: ContentElement.AreAnyTouchesDirectlyOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.AreAnyTouchesOver*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: AreAnyTouchesOver\n  nameWithType: ContentElement.AreAnyTouchesOver\n  fullName: ContentElement.AreAnyTouchesOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.BeginAnimation*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: BeginAnimation\n  nameWithType: ContentElement.BeginAnimation\n  fullName: ContentElement.BeginAnimation\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.CaptureMouse*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: CaptureMouse\n  nameWithType: ContentElement.CaptureMouse\n  fullName: ContentElement.CaptureMouse\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.CaptureStylus*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: CaptureStylus\n  nameWithType: ContentElement.CaptureStylus\n  fullName: ContentElement.CaptureStylus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.CaptureTouch*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: CaptureTouch\n  nameWithType: ContentElement.CaptureTouch\n  fullName: ContentElement.CaptureTouch\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.CommandBindings*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: CommandBindings\n  nameWithType: ContentElement.CommandBindings\n  fullName: ContentElement.CommandBindings\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.Focus*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: Focus\n  nameWithType: ContentElement.Focus\n  fullName: ContentElement.Focus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.Focusable*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: Focusable\n  nameWithType: ContentElement.Focusable\n  fullName: ContentElement.Focusable\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.GetAnimationBaseValue*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GetAnimationBaseValue\n  nameWithType: ContentElement.GetAnimationBaseValue\n  fullName: ContentElement.GetAnimationBaseValue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.GetUIParentCore*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: GetUIParentCore\n  nameWithType: ContentElement.GetUIParentCore\n  fullName: ContentElement.GetUIParentCore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.HasAnimatedProperties*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: HasAnimatedProperties\n  nameWithType: ContentElement.HasAnimatedProperties\n  fullName: ContentElement.HasAnimatedProperties\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.InputBindings*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: InputBindings\n  nameWithType: ContentElement.InputBindings\n  fullName: ContentElement.InputBindings\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.IsEnabled*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsEnabled\n  nameWithType: ContentElement.IsEnabled\n  fullName: ContentElement.IsEnabled\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.IsEnabledCore*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsEnabledCore\n  nameWithType: ContentElement.IsEnabledCore\n  fullName: ContentElement.IsEnabledCore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.IsFocused*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsFocused\n  nameWithType: ContentElement.IsFocused\n  fullName: ContentElement.IsFocused\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.IsInputMethodEnabled*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsInputMethodEnabled\n  nameWithType: ContentElement.IsInputMethodEnabled\n  fullName: ContentElement.IsInputMethodEnabled\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.IsKeyboardFocused*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsKeyboardFocused\n  nameWithType: ContentElement.IsKeyboardFocused\n  fullName: ContentElement.IsKeyboardFocused\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.IsKeyboardFocusWithin*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsKeyboardFocusWithin\n  nameWithType: ContentElement.IsKeyboardFocusWithin\n  fullName: ContentElement.IsKeyboardFocusWithin\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.IsMouseCaptured*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsMouseCaptured\n  nameWithType: ContentElement.IsMouseCaptured\n  fullName: ContentElement.IsMouseCaptured\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.IsMouseCaptureWithin*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsMouseCaptureWithin\n  nameWithType: ContentElement.IsMouseCaptureWithin\n  fullName: ContentElement.IsMouseCaptureWithin\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.IsMouseDirectlyOver*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsMouseDirectlyOver\n  nameWithType: ContentElement.IsMouseDirectlyOver\n  fullName: ContentElement.IsMouseDirectlyOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.IsMouseOver*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsMouseOver\n  nameWithType: ContentElement.IsMouseOver\n  fullName: ContentElement.IsMouseOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.IsStylusCaptured*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsStylusCaptured\n  nameWithType: ContentElement.IsStylusCaptured\n  fullName: ContentElement.IsStylusCaptured\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.IsStylusCaptureWithin*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsStylusCaptureWithin\n  nameWithType: ContentElement.IsStylusCaptureWithin\n  fullName: ContentElement.IsStylusCaptureWithin\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.IsStylusDirectlyOver*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsStylusDirectlyOver\n  nameWithType: ContentElement.IsStylusDirectlyOver\n  fullName: ContentElement.IsStylusDirectlyOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.IsStylusOver*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: IsStylusOver\n  nameWithType: ContentElement.IsStylusOver\n  fullName: ContentElement.IsStylusOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.MoveFocus*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: MoveFocus\n  nameWithType: ContentElement.MoveFocus\n  fullName: ContentElement.MoveFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnCreateAutomationPeer*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnCreateAutomationPeer\n  nameWithType: ContentElement.OnCreateAutomationPeer\n  fullName: ContentElement.OnCreateAutomationPeer\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnDragEnter*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnDragEnter\n  nameWithType: ContentElement.OnDragEnter\n  fullName: ContentElement.OnDragEnter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnDragLeave*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnDragLeave\n  nameWithType: ContentElement.OnDragLeave\n  fullName: ContentElement.OnDragLeave\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnDragOver*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnDragOver\n  nameWithType: ContentElement.OnDragOver\n  fullName: ContentElement.OnDragOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnDrop*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnDrop\n  nameWithType: ContentElement.OnDrop\n  fullName: ContentElement.OnDrop\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnGiveFeedback*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnGiveFeedback\n  nameWithType: ContentElement.OnGiveFeedback\n  fullName: ContentElement.OnGiveFeedback\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnGotFocus*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnGotFocus\n  nameWithType: ContentElement.OnGotFocus\n  fullName: ContentElement.OnGotFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnGotKeyboardFocus*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnGotKeyboardFocus\n  nameWithType: ContentElement.OnGotKeyboardFocus\n  fullName: ContentElement.OnGotKeyboardFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnGotMouseCapture*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnGotMouseCapture\n  nameWithType: ContentElement.OnGotMouseCapture\n  fullName: ContentElement.OnGotMouseCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnGotStylusCapture*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnGotStylusCapture\n  nameWithType: ContentElement.OnGotStylusCapture\n  fullName: ContentElement.OnGotStylusCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnGotTouchCapture*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnGotTouchCapture\n  nameWithType: ContentElement.OnGotTouchCapture\n  fullName: ContentElement.OnGotTouchCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnIsKeyboardFocusedChanged*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsKeyboardFocusedChanged\n  nameWithType: ContentElement.OnIsKeyboardFocusedChanged\n  fullName: ContentElement.OnIsKeyboardFocusedChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnIsKeyboardFocusWithinChanged*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsKeyboardFocusWithinChanged\n  nameWithType: ContentElement.OnIsKeyboardFocusWithinChanged\n  fullName: ContentElement.OnIsKeyboardFocusWithinChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnIsMouseCapturedChanged*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsMouseCapturedChanged\n  nameWithType: ContentElement.OnIsMouseCapturedChanged\n  fullName: ContentElement.OnIsMouseCapturedChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnIsMouseCaptureWithinChanged*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsMouseCaptureWithinChanged\n  nameWithType: ContentElement.OnIsMouseCaptureWithinChanged\n  fullName: ContentElement.OnIsMouseCaptureWithinChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnIsMouseDirectlyOverChanged*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsMouseDirectlyOverChanged\n  nameWithType: ContentElement.OnIsMouseDirectlyOverChanged\n  fullName: ContentElement.OnIsMouseDirectlyOverChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnIsStylusCapturedChanged*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsStylusCapturedChanged\n  nameWithType: ContentElement.OnIsStylusCapturedChanged\n  fullName: ContentElement.OnIsStylusCapturedChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnIsStylusCaptureWithinChanged*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsStylusCaptureWithinChanged\n  nameWithType: ContentElement.OnIsStylusCaptureWithinChanged\n  fullName: ContentElement.OnIsStylusCaptureWithinChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnIsStylusDirectlyOverChanged*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnIsStylusDirectlyOverChanged\n  nameWithType: ContentElement.OnIsStylusDirectlyOverChanged\n  fullName: ContentElement.OnIsStylusDirectlyOverChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnKeyDown*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnKeyDown\n  nameWithType: ContentElement.OnKeyDown\n  fullName: ContentElement.OnKeyDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnKeyUp*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnKeyUp\n  nameWithType: ContentElement.OnKeyUp\n  fullName: ContentElement.OnKeyUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnLostFocus*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnLostFocus\n  nameWithType: ContentElement.OnLostFocus\n  fullName: ContentElement.OnLostFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnLostKeyboardFocus*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnLostKeyboardFocus\n  nameWithType: ContentElement.OnLostKeyboardFocus\n  fullName: ContentElement.OnLostKeyboardFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnLostMouseCapture*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnLostMouseCapture\n  nameWithType: ContentElement.OnLostMouseCapture\n  fullName: ContentElement.OnLostMouseCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnLostStylusCapture*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnLostStylusCapture\n  nameWithType: ContentElement.OnLostStylusCapture\n  fullName: ContentElement.OnLostStylusCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnLostTouchCapture*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnLostTouchCapture\n  nameWithType: ContentElement.OnLostTouchCapture\n  fullName: ContentElement.OnLostTouchCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnMouseDown*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseDown\n  nameWithType: ContentElement.OnMouseDown\n  fullName: ContentElement.OnMouseDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnMouseEnter*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseEnter\n  nameWithType: ContentElement.OnMouseEnter\n  fullName: ContentElement.OnMouseEnter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnMouseLeave*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseLeave\n  nameWithType: ContentElement.OnMouseLeave\n  fullName: ContentElement.OnMouseLeave\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnMouseLeftButtonDown*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseLeftButtonDown\n  nameWithType: ContentElement.OnMouseLeftButtonDown\n  fullName: ContentElement.OnMouseLeftButtonDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnMouseLeftButtonUp*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseLeftButtonUp\n  nameWithType: ContentElement.OnMouseLeftButtonUp\n  fullName: ContentElement.OnMouseLeftButtonUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnMouseMove*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseMove\n  nameWithType: ContentElement.OnMouseMove\n  fullName: ContentElement.OnMouseMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnMouseRightButtonDown*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseRightButtonDown\n  nameWithType: ContentElement.OnMouseRightButtonDown\n  fullName: ContentElement.OnMouseRightButtonDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnMouseRightButtonUp*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseRightButtonUp\n  nameWithType: ContentElement.OnMouseRightButtonUp\n  fullName: ContentElement.OnMouseRightButtonUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnMouseUp*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseUp\n  nameWithType: ContentElement.OnMouseUp\n  fullName: ContentElement.OnMouseUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnMouseWheel*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnMouseWheel\n  nameWithType: ContentElement.OnMouseWheel\n  fullName: ContentElement.OnMouseWheel\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewDragEnter*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewDragEnter\n  nameWithType: ContentElement.OnPreviewDragEnter\n  fullName: ContentElement.OnPreviewDragEnter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewDragLeave*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewDragLeave\n  nameWithType: ContentElement.OnPreviewDragLeave\n  fullName: ContentElement.OnPreviewDragLeave\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewDragOver*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewDragOver\n  nameWithType: ContentElement.OnPreviewDragOver\n  fullName: ContentElement.OnPreviewDragOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewDrop*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewDrop\n  nameWithType: ContentElement.OnPreviewDrop\n  fullName: ContentElement.OnPreviewDrop\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewGiveFeedback*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewGiveFeedback\n  nameWithType: ContentElement.OnPreviewGiveFeedback\n  fullName: ContentElement.OnPreviewGiveFeedback\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewGotKeyboardFocus*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewGotKeyboardFocus\n  nameWithType: ContentElement.OnPreviewGotKeyboardFocus\n  fullName: ContentElement.OnPreviewGotKeyboardFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewKeyDown*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewKeyDown\n  nameWithType: ContentElement.OnPreviewKeyDown\n  fullName: ContentElement.OnPreviewKeyDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewKeyUp*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewKeyUp\n  nameWithType: ContentElement.OnPreviewKeyUp\n  fullName: ContentElement.OnPreviewKeyUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewLostKeyboardFocus*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewLostKeyboardFocus\n  nameWithType: ContentElement.OnPreviewLostKeyboardFocus\n  fullName: ContentElement.OnPreviewLostKeyboardFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewMouseDown*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseDown\n  nameWithType: ContentElement.OnPreviewMouseDown\n  fullName: ContentElement.OnPreviewMouseDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonDown*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseLeftButtonDown\n  nameWithType: ContentElement.OnPreviewMouseLeftButtonDown\n  fullName: ContentElement.OnPreviewMouseLeftButtonDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewMouseLeftButtonUp*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseLeftButtonUp\n  nameWithType: ContentElement.OnPreviewMouseLeftButtonUp\n  fullName: ContentElement.OnPreviewMouseLeftButtonUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewMouseMove*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseMove\n  nameWithType: ContentElement.OnPreviewMouseMove\n  fullName: ContentElement.OnPreviewMouseMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonDown*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseRightButtonDown\n  nameWithType: ContentElement.OnPreviewMouseRightButtonDown\n  fullName: ContentElement.OnPreviewMouseRightButtonDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewMouseRightButtonUp*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseRightButtonUp\n  nameWithType: ContentElement.OnPreviewMouseRightButtonUp\n  fullName: ContentElement.OnPreviewMouseRightButtonUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewMouseUp*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseUp\n  nameWithType: ContentElement.OnPreviewMouseUp\n  fullName: ContentElement.OnPreviewMouseUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewMouseWheel*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewMouseWheel\n  nameWithType: ContentElement.OnPreviewMouseWheel\n  fullName: ContentElement.OnPreviewMouseWheel\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewQueryContinueDrag*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewQueryContinueDrag\n  nameWithType: ContentElement.OnPreviewQueryContinueDrag\n  fullName: ContentElement.OnPreviewQueryContinueDrag\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewStylusButtonDown*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusButtonDown\n  nameWithType: ContentElement.OnPreviewStylusButtonDown\n  fullName: ContentElement.OnPreviewStylusButtonDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewStylusButtonUp*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusButtonUp\n  nameWithType: ContentElement.OnPreviewStylusButtonUp\n  fullName: ContentElement.OnPreviewStylusButtonUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewStylusDown*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusDown\n  nameWithType: ContentElement.OnPreviewStylusDown\n  fullName: ContentElement.OnPreviewStylusDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewStylusInAirMove*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusInAirMove\n  nameWithType: ContentElement.OnPreviewStylusInAirMove\n  fullName: ContentElement.OnPreviewStylusInAirMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewStylusInRange*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusInRange\n  nameWithType: ContentElement.OnPreviewStylusInRange\n  fullName: ContentElement.OnPreviewStylusInRange\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewStylusMove*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusMove\n  nameWithType: ContentElement.OnPreviewStylusMove\n  fullName: ContentElement.OnPreviewStylusMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewStylusOutOfRange*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusOutOfRange\n  nameWithType: ContentElement.OnPreviewStylusOutOfRange\n  fullName: ContentElement.OnPreviewStylusOutOfRange\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewStylusSystemGesture*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusSystemGesture\n  nameWithType: ContentElement.OnPreviewStylusSystemGesture\n  fullName: ContentElement.OnPreviewStylusSystemGesture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewStylusUp*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewStylusUp\n  nameWithType: ContentElement.OnPreviewStylusUp\n  fullName: ContentElement.OnPreviewStylusUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewTextInput*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewTextInput\n  nameWithType: ContentElement.OnPreviewTextInput\n  fullName: ContentElement.OnPreviewTextInput\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewTouchDown*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewTouchDown\n  nameWithType: ContentElement.OnPreviewTouchDown\n  fullName: ContentElement.OnPreviewTouchDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewTouchMove*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewTouchMove\n  nameWithType: ContentElement.OnPreviewTouchMove\n  fullName: ContentElement.OnPreviewTouchMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnPreviewTouchUp*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnPreviewTouchUp\n  nameWithType: ContentElement.OnPreviewTouchUp\n  fullName: ContentElement.OnPreviewTouchUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnQueryContinueDrag*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnQueryContinueDrag\n  nameWithType: ContentElement.OnQueryContinueDrag\n  fullName: ContentElement.OnQueryContinueDrag\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnQueryCursor*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnQueryCursor\n  nameWithType: ContentElement.OnQueryCursor\n  fullName: ContentElement.OnQueryCursor\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnStylusButtonDown*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusButtonDown\n  nameWithType: ContentElement.OnStylusButtonDown\n  fullName: ContentElement.OnStylusButtonDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnStylusButtonUp*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusButtonUp\n  nameWithType: ContentElement.OnStylusButtonUp\n  fullName: ContentElement.OnStylusButtonUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnStylusDown*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusDown\n  nameWithType: ContentElement.OnStylusDown\n  fullName: ContentElement.OnStylusDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnStylusEnter*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusEnter\n  nameWithType: ContentElement.OnStylusEnter\n  fullName: ContentElement.OnStylusEnter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnStylusInAirMove*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusInAirMove\n  nameWithType: ContentElement.OnStylusInAirMove\n  fullName: ContentElement.OnStylusInAirMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnStylusInRange*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusInRange\n  nameWithType: ContentElement.OnStylusInRange\n  fullName: ContentElement.OnStylusInRange\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnStylusLeave*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusLeave\n  nameWithType: ContentElement.OnStylusLeave\n  fullName: ContentElement.OnStylusLeave\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnStylusMove*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusMove\n  nameWithType: ContentElement.OnStylusMove\n  fullName: ContentElement.OnStylusMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnStylusOutOfRange*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusOutOfRange\n  nameWithType: ContentElement.OnStylusOutOfRange\n  fullName: ContentElement.OnStylusOutOfRange\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnStylusSystemGesture*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusSystemGesture\n  nameWithType: ContentElement.OnStylusSystemGesture\n  fullName: ContentElement.OnStylusSystemGesture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnStylusUp*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnStylusUp\n  nameWithType: ContentElement.OnStylusUp\n  fullName: ContentElement.OnStylusUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnTextInput*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnTextInput\n  nameWithType: ContentElement.OnTextInput\n  fullName: ContentElement.OnTextInput\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnTouchDown*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnTouchDown\n  nameWithType: ContentElement.OnTouchDown\n  fullName: ContentElement.OnTouchDown\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnTouchEnter*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnTouchEnter\n  nameWithType: ContentElement.OnTouchEnter\n  fullName: ContentElement.OnTouchEnter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnTouchLeave*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnTouchLeave\n  nameWithType: ContentElement.OnTouchLeave\n  fullName: ContentElement.OnTouchLeave\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnTouchMove*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnTouchMove\n  nameWithType: ContentElement.OnTouchMove\n  fullName: ContentElement.OnTouchMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.OnTouchUp*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: OnTouchUp\n  nameWithType: ContentElement.OnTouchUp\n  fullName: ContentElement.OnTouchUp\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.PredictFocus*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: PredictFocus\n  nameWithType: ContentElement.PredictFocus\n  fullName: ContentElement.PredictFocus\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.RaiseEvent*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: RaiseEvent\n  nameWithType: ContentElement.RaiseEvent\n  fullName: ContentElement.RaiseEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.ReleaseAllTouchCaptures*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ReleaseAllTouchCaptures\n  nameWithType: ContentElement.ReleaseAllTouchCaptures\n  fullName: ContentElement.ReleaseAllTouchCaptures\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.ReleaseMouseCapture*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ReleaseMouseCapture\n  nameWithType: ContentElement.ReleaseMouseCapture\n  fullName: ContentElement.ReleaseMouseCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.ReleaseStylusCapture*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ReleaseStylusCapture\n  nameWithType: ContentElement.ReleaseStylusCapture\n  fullName: ContentElement.ReleaseStylusCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.ReleaseTouchCapture*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ReleaseTouchCapture\n  nameWithType: ContentElement.ReleaseTouchCapture\n  fullName: ContentElement.ReleaseTouchCapture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.RemoveHandler*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: RemoveHandler\n  nameWithType: ContentElement.RemoveHandler\n  fullName: ContentElement.RemoveHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.ShouldSerializeCommandBindings*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ShouldSerializeCommandBindings\n  nameWithType: ContentElement.ShouldSerializeCommandBindings\n  fullName: ContentElement.ShouldSerializeCommandBindings\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.ShouldSerializeInputBindings*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: ShouldSerializeInputBindings\n  nameWithType: ContentElement.ShouldSerializeInputBindings\n  fullName: ContentElement.ShouldSerializeInputBindings\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.TouchesCaptured*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchesCaptured\n  nameWithType: ContentElement.TouchesCaptured\n  fullName: ContentElement.TouchesCaptured\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.TouchesCapturedWithin*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchesCapturedWithin\n  nameWithType: ContentElement.TouchesCapturedWithin\n  fullName: ContentElement.TouchesCapturedWithin\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.TouchesDirectlyOver*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchesDirectlyOver\n  nameWithType: ContentElement.TouchesDirectlyOver\n  fullName: ContentElement.TouchesDirectlyOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.ContentElement.TouchesOver*\n  parent: System.Windows.ContentElement\n  isExternal: false\n  name: TouchesOver\n  nameWithType: ContentElement.TouchesOver\n  fullName: ContentElement.TouchesOver\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/ContentElement.xml\n- uid: System.Windows.DependencyObject.Equals(System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: DependencyObject.Equals(Object)\n  fullName: DependencyObject.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Windows.DependencyObject.GetHashCode\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: DependencyObject.GetHashCode()\n  fullName: DependencyObject.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Windows.Threading.DispatcherObject.CheckAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: CheckAccess()\n  nameWithType: DispatcherObject.CheckAccess()\n  fullName: DispatcherObject.CheckAccess()\n- uid: System.Windows.Threading.DispatcherObject.Dispatcher\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherObject.Dispatcher\n  fullName: DispatcherObject.Dispatcher\n- uid: System.Windows.Threading.DispatcherObject.VerifyAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: VerifyAccess()\n  nameWithType: DispatcherObject.VerifyAccess()\n  fullName: DispatcherObject.VerifyAccess()\n- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ClearValue(DependencyProperty)\n  nameWithType: DependencyObject.ClearValue(DependencyProperty)\n  fullName: DependencyObject.ClearValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ClearValue(DependencyPropertyKey)\n  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)\n  fullName: DependencyObject.ClearValue(DependencyPropertyKey)\n- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: CoerceValue(DependencyProperty)\n  nameWithType: DependencyObject.CoerceValue(DependencyProperty)\n  fullName: DependencyObject.CoerceValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.DependencyObjectType\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: DependencyObjectType\n  nameWithType: DependencyObject.DependencyObjectType\n  fullName: DependencyObject.DependencyObjectType\n- uid: System.Windows.DependencyObject.GetLocalValueEnumerator\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetLocalValueEnumerator()\n  nameWithType: DependencyObject.GetLocalValueEnumerator()\n  fullName: DependencyObject.GetLocalValueEnumerator()\n- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetValue(DependencyProperty)\n  nameWithType: DependencyObject.GetValue(DependencyProperty)\n  fullName: DependencyObject.GetValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: InvalidateProperty(DependencyProperty)\n  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)\n  fullName: DependencyObject.InvalidateProperty(DependencyProperty)\n- uid: System.Windows.DependencyObject.IsSealed\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: IsSealed\n  nameWithType: DependencyObject.IsSealed\n  fullName: DependencyObject.IsSealed\n- uid: System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  fullName: DependencyObject.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ReadLocalValue(DependencyProperty)\n  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)\n  fullName: DependencyObject.ReadLocalValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetCurrentValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetCurrentValue(DependencyProperty, Object)\n- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetValue(DependencyProperty, Object)\n- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetValue(DependencyPropertyKey, Object)\n  nameWithType: DependencyObject.SetValue(DependencyPropertyKey, Object)\n  fullName: DependencyObject.SetValue(DependencyPropertyKey, Object)\n- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ShouldSerializeProperty(DependencyProperty)\n  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)\n  fullName: DependencyObject.ShouldSerializeProperty(DependencyProperty)\n- uid: System.Windows.IInputElement\n  parent: System.Windows\n  isExternal: false\n  name: IInputElement\n  nameWithType: IInputElement\n  fullName: System.Windows.IInputElement\n- uid: System.Windows.Media.Animation.IAnimatable\n  parent: System.Windows.Media.Animation\n  isExternal: false\n  name: IAnimatable\n  nameWithType: IAnimatable\n  fullName: System.Windows.Media.Animation.IAnimatable\n"}