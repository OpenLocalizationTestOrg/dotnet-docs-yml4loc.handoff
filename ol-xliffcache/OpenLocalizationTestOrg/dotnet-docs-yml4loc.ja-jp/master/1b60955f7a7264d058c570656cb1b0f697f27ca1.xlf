<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1b60955f7a7264d058c570656cb1b0f697f27ca1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.CodeDom.Compiler.ICodeGenerator.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b1b77c07c1e8f897e09e555ba90b0b3a1aee1706</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2a1a12549a0cc206b8be16cd8ad68fe028c22c7b</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Defines an interface for generating code.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the .NET Framework versions 1.0 and 1.1, code providers consist of implementations of <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>, <ph id="ph2">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>, <ph id="ph3">&lt;xref:System.CodeDom.Compiler.ICodeParser&gt;</ph>, and <ph id="ph4">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> methods are obsolete, and the methods of <ph id="ph5">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> and <ph id="ph6">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> are directly available in the <ph id="ph7">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>You should override those methods in your code provider implementation and not call the base methods.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>Developers of compilers can implement this interface to allow people to dynamically generate code in a particular language.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>This can be used for a variety of purposes, such as creating code-generating wizards, creating dynamic assemblies with content that can be debugged, and for templated documents with embedded code, such as ASP.NET.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>An <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is typically obtained through a call to the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Creates an escaped identifier for the specified value.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier%2A&gt;</ph> tests whether the identifier conflicts with reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is referred to an escaped identifier.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>The escaped identifier will contain the same <ph id="ph1">`value`</ph> but will have escape code formatting added to differentiate the identifier from the keyword.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Two implementation examples are preceding the <ph id="ph1">`value`</ph> with "@" or bracketing the <ph id="ph2">`value`</ph> with "[" and "]".</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The string to create an escaped identifier for.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>The escaped identifier for the value.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>Creates a valid identifier for the specified value.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier%2A&gt;</ph> tests whether the identifier conflicts with reserved or language keywords, and returns a valid identifier name that does not conflict.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The returned identifier will contain the same <ph id="ph1">`value`</ph> but, if it conflicts with reserved or language keywords, will have escape code formatting added to differentiate the identifier from the keyword.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, if the value needs modification, value is returned preceded by an underscore "_".</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The string to generate a valid identifier for.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>A valid identifier for the specified value.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeCompileUnit"&gt;&lt;/xref&gt;</ph> to generate code for.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> to output code to.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;&lt;/xref&gt;</ph> that indicates the options to use for generating code.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeExpression"&gt;&lt;/xref&gt;</ph> that indicates the expression to generate code for.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> to output code to.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;&lt;/xref&gt;</ph> that indicates the options to use for generating code.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeNamespace"&gt;&lt;/xref&gt;</ph> that indicates the namespace to generate code for.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> to output code to.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;&lt;/xref&gt;</ph> that indicates the options to use for generating code.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeStatement"&gt;&lt;/xref&gt;</ph> containing the CodeDOM elements to translate.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> to output code to.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;&lt;/xref&gt;</ph> that indicates the options to use for generating code.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeDeclaration"&gt;&lt;/xref&gt;</ph> that indicates the type to generate code for.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.IO.TextWriter"&gt;&lt;/xref&gt;</ph> to output code to.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.CodeGeneratorOptions"&gt;&lt;/xref&gt;</ph> that indicates the options to use for generating code.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>Gets the type indicated by the specified <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.CodeDom.CodeTypeReference"&gt;&lt;/xref&gt;</ph> that indicates the type to return.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>A text representation of the specified type for the language this code generator is designed to generate code in.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>For example, in Visual Basic, passing in type System.Int32 will return "Integer".</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates whether the specified value is a valid identifier for the current language.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method tests whether an identifier is valid.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>When implementing <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier%2A&gt;</ph> in a derived class, design the method to test the value passed to it, and return <ph id="ph2">`true`</ph> only if the value fits the rules of the language and does not conflict with a keyword.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>The value to test for being a valid identifier.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">value</ph><ept id="p1">&lt;/code&gt;</ept> parameter is a valid identifier; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>Gets a value indicating whether the generator provides support for the language features represented by the specified <ph id="ph1">&lt;xref href="System.CodeDom.Compiler.GeneratorSupport"&gt;&lt;/xref&gt;</ph> object.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method can be called with a number of <ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph> flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary "Or" operator (&amp;#124;).</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>The capabilities to test the generator for.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified capabilities are supported; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Throws an exception if the specified value is not a valid identifier.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>Rather than returning a value, this method throws an exception if the specified identifier is not valid according to the method implementation.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>Typically, the exception is an <ph id="ph1">&lt;xref:System.ArgumentException&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>This method enables a code generator that implements this method to produce an informative error message based upon the value of an invalid identifier.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>The identifier to validate.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>The identifier is not valid.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>