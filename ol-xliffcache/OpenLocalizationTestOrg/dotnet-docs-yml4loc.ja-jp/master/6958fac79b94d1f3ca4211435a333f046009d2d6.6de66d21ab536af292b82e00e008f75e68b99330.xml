{"nodes":[{"content":"Implements an <xref href=\"System.IO.Log.IRecordSequence\"></xref> on top of a file. This class cannot be inherited.","nodes":[{"pos":[0,114],"content":"Implements an <xref href=\"System.IO.Log.IRecordSequence\"></xref> on top of a file. This class cannot be inherited.","nodes":[{"content":"Implements an <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.IRecordSequence\"&gt;&lt;/xref&gt;</ph> on top of a file.","pos":[0,82],"source":"Implements an <xref href=\"System.IO.Log.IRecordSequence\"></xref> on top of a file."},{"content":"This class cannot be inherited.","pos":[83,114]}]}],"pos":[5984,6099],"yaml":true},{"content":"The <xref:System.IO.Log.FileRecordSequence> is a record sequence based on a single log file in the file system. It is a simple implementation of the <xref:System.IO.Log.IRecordSequence> interface, on top of a simple file-based log.  \n  \n To manipulate a file-based log, the account that your application is running in must have sufficient privileges, as dictated by the file system security at the time the <xref:System.IO.Log.FileRecordSequence> is constructed. In addition, a demand for FullTrust is made at construction time. The permission verification results are cached thereafter in keeping with the Windows security model. You should ensure that you do not accidentally expose the contents of the record sequence to an unauthorized user.","nodes":[{"pos":[0,231],"content":"The <xref:System.IO.Log.FileRecordSequence> is a record sequence based on a single log file in the file system. It is a simple implementation of the <xref:System.IO.Log.IRecordSequence> interface, on top of a simple file-based log.","nodes":[{"content":"The <xref:System.IO.Log.FileRecordSequence> is a record sequence based on a single log file in the file system. It is a simple implementation of the <xref:System.IO.Log.IRecordSequence> interface, on top of a simple file-based log.","pos":[0,231],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence&gt;</ph> is a record sequence based on a single log file in the file system.","pos":[0,111],"source":"The <xref:System.IO.Log.FileRecordSequence> is a record sequence based on a single log file in the file system."},{"content":"It is a simple implementation of the <ph id=\"ph1\">&lt;xref:System.IO.Log.IRecordSequence&gt;</ph> interface, on top of a simple file-based log.","pos":[112,231],"source":" It is a simple implementation of the <xref:System.IO.Log.IRecordSequence> interface, on top of a simple file-based log."}]}]},{"pos":[238,745],"content":"To manipulate a file-based log, the account that your application is running in must have sufficient privileges, as dictated by the file system security at the time the <xref:System.IO.Log.FileRecordSequence> is constructed. In addition, a demand for FullTrust is made at construction time. The permission verification results are cached thereafter in keeping with the Windows security model. You should ensure that you do not accidentally expose the contents of the record sequence to an unauthorized user.","nodes":[{"content":"To manipulate a file-based log, the account that your application is running in must have sufficient privileges, as dictated by the file system security at the time the <xref:System.IO.Log.FileRecordSequence> is constructed. In addition, a demand for FullTrust is made at construction time. The permission verification results are cached thereafter in keeping with the Windows security model. You should ensure that you do not accidentally expose the contents of the record sequence to an unauthorized user.","pos":[0,507],"nodes":[{"content":"To manipulate a file-based log, the account that your application is running in must have sufficient privileges, as dictated by the file system security at the time the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence&gt;</ph> is constructed.","pos":[0,224],"source":"To manipulate a file-based log, the account that your application is running in must have sufficient privileges, as dictated by the file system security at the time the <xref:System.IO.Log.FileRecordSequence> is constructed."},{"content":"In addition, a demand for FullTrust is made at construction time.","pos":[225,290]},{"content":"The permission verification results are cached thereafter in keeping with the Windows security model.","pos":[291,392]},{"content":"You should ensure that you do not accidentally expose the contents of the record sequence to an unauthorized user.","pos":[393,507]}]}]}],"pos":[6110,6860],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class with a specified file.","nodes":[{"pos":[0,116],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph> class with a specified file.","source":"Initializes a new instance of the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class with a specified file."}],"pos":[8716,8833],"yaml":true},{"content":"This constructor creates read/write access to the file, and opens the file with share Read access. This means that requests to open the file for writing by this or another process fails until this <xref:System.IO.Log.FileRecordSequence> instance has been disposed of, but read attempts will succeed. If `path` is not found, a new file is created with a size of 0 bytes.","nodes":[{"pos":[0,369],"content":"This constructor creates read/write access to the file, and opens the file with share Read access. This means that requests to open the file for writing by this or another process fails until this <xref:System.IO.Log.FileRecordSequence> instance has been disposed of, but read attempts will succeed. If `path` is not found, a new file is created with a size of 0 bytes.","nodes":[{"content":"This constructor creates read/write access to the file, and opens the file with share Read access.","pos":[0,98]},{"content":"This means that requests to open the file for writing by this or another process fails until this <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence&gt;</ph> instance has been disposed of, but read attempts will succeed.","pos":[99,299],"source":" This means that requests to open the file for writing by this or another process fails until this <xref:System.IO.Log.FileRecordSequence> instance has been disposed of, but read attempts will succeed."},{"content":"If <ph id=\"ph1\">`path`</ph> is not found, a new file is created with a size of 0 bytes.","pos":[300,369],"source":" If `path` is not found, a new file is created with a size of 0 bytes."}]}],"pos":[8844,9214],"yaml":true,"extradata":"MT"},{"content":"A relative or absolute path for the file that this <xref href=\"System.IO.Log.FileRecordSequence\"></xref> instance will encapsulate.","nodes":[{"pos":[0,131],"content":"A relative or absolute path for the file that this <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph> instance will encapsulate.","source":"A relative or absolute path for the file that this <xref href=\"System.IO.Log.FileRecordSequence\"></xref> instance will encapsulate."}],"pos":[9730,9862],"yaml":true},{"content":"The file specified by <code>path</code> is not valid.","nodes":[{"pos":[0,53],"content":"The file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not valid.","source":"The file specified by <code>path</code> is not valid."}],"pos":[10022,10076],"yaml":true},{"content":"The file specified by <code>path</code> cannot be found.","nodes":[{"pos":[0,56],"content":"The file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be found.","source":"The file specified by <code>path</code> cannot be found."}],"pos":[10184,10241],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[10329,10401],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[10501,10570],"yaml":true},{"content":"Access for the specified log store is denied by the operating system.","nodes":[{"pos":[0,69],"content":"Access for the specified log store is denied by the operating system.","nodes":[{"content":"Access for the specified log store is denied by the operating system.","pos":[0,69]}]}],"pos":[10684,10754],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class with a specified file and an access mode.","nodes":[{"pos":[0,135],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph> class with a specified file and an access mode.","source":"Initializes a new instance of the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class with a specified file and an access mode."}],"pos":[11848,11984],"yaml":true},{"content":"A relative or absolute path for the file that this <xref href=\"System.IO.Log.FileRecordSequence\"></xref> instance will encapsulate.","nodes":[{"pos":[0,131],"content":"A relative or absolute path for the file that this <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph> instance will encapsulate.","source":"A relative or absolute path for the file that this <xref href=\"System.IO.Log.FileRecordSequence\"></xref> instance will encapsulate."}],"pos":[12153,12285],"yaml":true},{"content":"A valid <xref href=\"System.IO.FileAccess\"></xref> value that controls the kind of access users have to a log file.","nodes":[{"pos":[0,114],"content":"A valid <ph id=\"ph1\">&lt;xref href=\"System.IO.FileAccess\"&gt;&lt;/xref&gt;</ph> value that controls the kind of access users have to a log file.","source":"A valid <xref href=\"System.IO.FileAccess\"></xref> value that controls the kind of access users have to a log file."}],"pos":[12354,12469],"yaml":true},{"content":"The file specified by <code>path</code> is not valid.","nodes":[{"pos":[0,53],"content":"The file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not valid.","source":"The file specified by <code>path</code> is not valid."}],"pos":[12629,12683],"yaml":true},{"content":"The file specified by <code>path</code> cannot be found.","nodes":[{"pos":[0,56],"content":"The file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be found.","source":"The file specified by <code>path</code> cannot be found."}],"pos":[12791,12848],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[12936,13008],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[13108,13177],"yaml":true},{"content":"Access for the specified log store is denied by the operating system.","nodes":[{"pos":[0,69],"content":"Access for the specified log store is denied by the operating system.","nodes":[{"content":"Access for the specified log store is denied by the operating system.","pos":[0,69]}]}],"pos":[13291,13361],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class with a specified file, an access mode, and a file size.","nodes":[{"pos":[0,149],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph> class with a specified file, an access mode, and a file size.","source":"Initializes a new instance of the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class with a specified file, an access mode, and a file size."}],"pos":[14515,14665],"yaml":true},{"content":"A relative or absolute path for the file that this <xref href=\"System.IO.Log.FileRecordSequence\"></xref> instance will encapsulate.","nodes":[{"pos":[0,131],"content":"A relative or absolute path for the file that this <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph> instance will encapsulate.","source":"A relative or absolute path for the file that this <xref href=\"System.IO.Log.FileRecordSequence\"></xref> instance will encapsulate."}],"pos":[14844,14976],"yaml":true},{"content":"A valid <xref href=\"System.IO.FileAccess\"></xref> value that controls the kind of access users have to a log file.","nodes":[{"pos":[0,114],"content":"A valid <ph id=\"ph1\">&lt;xref href=\"System.IO.FileAccess\"&gt;&lt;/xref&gt;</ph> value that controls the kind of access users have to a log file.","source":"A valid <xref href=\"System.IO.FileAccess\"></xref> value that controls the kind of access users have to a log file."}],"pos":[15045,15160],"yaml":true},{"content":"The size of the log file to be opened.","nodes":[{"pos":[0,38],"content":"The size of the log file to be opened.","nodes":[{"content":"The size of the log file to be opened.","pos":[0,38]}]}],"pos":[15219,15258],"yaml":true},{"content":"One or more of the parameters are out of the valid range.","nodes":[{"pos":[0,57],"content":"One or more of the parameters are out of the valid range.","nodes":[{"content":"One or more of the parameters are out of the valid range.","pos":[0,57]}]}],"pos":[15438,15496],"yaml":true},{"content":"The file specified by <code>path</code> is not valid.","nodes":[{"pos":[0,53],"content":"The file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not valid.","source":"The file specified by <code>path</code> is not valid."}],"pos":[15590,15644],"yaml":true},{"content":"The file specified by <code>path</code> cannot be found.","nodes":[{"pos":[0,56],"content":"The file specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> cannot be found.","source":"The file specified by <code>path</code> cannot be found."}],"pos":[15752,15809],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[15897,15969],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[16069,16138],"yaml":true},{"content":"Access for the specified log store is denied by the operating system.","nodes":[{"pos":[0,69],"content":"Access for the specified log store is denied by the operating system.","nodes":[{"content":"Access for the specified log store is denied by the operating system.","pos":[0,69]}]}],"pos":[16252,16322],"yaml":true},{"content":"Moves the base sequence number of the log forward. This method cannot be inherited.","nodes":[{"pos":[0,83],"content":"Moves the base sequence number of the log forward. This method cannot be inherited.","nodes":[{"content":"Moves the base sequence number of the log forward. This method cannot be inherited.","pos":[0,83],"nodes":[{"content":"Moves the base sequence number of the log forward.","pos":[0,50]},{"content":"This method cannot be inherited.","pos":[51,83]}]}]}],"pos":[17460,17544],"yaml":true},{"content":"The new base sequence number of the record sequence.","nodes":[{"pos":[0,52],"content":"The new base sequence number of the record sequence.","nodes":[{"content":"The new base sequence number of the record sequence.","pos":[0,52]}]}],"pos":[17767,17820],"yaml":true},{"content":"<code>newBaseSequenceNumber</code> is invalid.","nodes":[{"pos":[0,46],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSequenceNumber&lt;/code&gt;</ph> is invalid.","source":"<code>newBaseSequenceNumber</code> is invalid."}],"pos":[18000,18047],"yaml":true},{"content":"<code>newBaseSequenceNumber</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,102],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSequenceNumber&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>newBaseSequenceNumber</code> is not between the base and last sequence numbers of this sequence."}],"pos":[18161,18264],"yaml":true},{"content":"An I/O error occurred while modifying the sequence.","nodes":[{"pos":[0,51],"content":"An I/O error occurred while modifying the sequence.","nodes":[{"content":"An I/O error occurred while modifying the sequence.","pos":[0,51]}]}],"pos":[18352,18404],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[18510,18573],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[18673,18742],"yaml":true},{"content":"Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"pos":[0,114],"content":"Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"content":"Writes a log record to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph>.","pos":[0,81],"source":"Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>."},{"content":"This method cannot be inherited.","pos":[82,114]}]}],"pos":[20225,20340],"yaml":true},{"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,212],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[219,516],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.FileRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,297],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method."}]}],"pos":[20351,20872],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[21458,21542],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[21627,21695],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[21780,21838],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[21933,22052],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[22124,22172],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[22341,22382],"yaml":true},{"content":"One or more of the arguments are out of range.","nodes":[{"pos":[0,46],"content":"One or more of the arguments are out of range.","nodes":[{"content":"One or more of the arguments are out of range.","pos":[0,46]}]}],"pos":[22496,22543],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[22645,22741],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]}],"pos":[22829,22904],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[23010,23073],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[23173,23242],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[23358,23387],"yaml":true},{"content":"Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"pos":[0,114],"content":"Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"content":"Writes a log record to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph>.","pos":[0,81],"source":"Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>."},{"content":"This method cannot be inherited.","pos":[82,114]}]}],"pos":[24993,25108],"yaml":true},{"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,212],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[219,516],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.FileRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,297],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method."}]}],"pos":[25119,25640],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[26377,26461],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[26546,26614],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[26699,26757],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[26852,26971],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[27043,27091],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[27260,27301],"yaml":true},{"content":"One or more of the arguments are out of range.","nodes":[{"pos":[0,46],"content":"One or more of the arguments are out of range.","nodes":[{"content":"One or more of the arguments are out of range.","pos":[0,46]}]}],"pos":[27415,27462],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[27564,27660],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]}],"pos":[27748,27823],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[27929,27992],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[28092,28161],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[28277,28306],"yaml":true},{"content":"Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,163],"content":"Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"content":"Writes a log record to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph>, using space previously reserved in the sequence.","pos":[0,130],"source":"Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>, using space previously reserved in the sequence."},{"content":"This method cannot be inherited.","pos":[131,163]}]}],"pos":[29966,30130],"yaml":true},{"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,212],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[219,512],"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","nodes":[{"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the <ph id=\"ph1\">`reservations`</ph> parameter.","pos":[0,136],"source":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter."},{"content":"If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","pos":[137,293]}]},{"pos":[519,816],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.FileRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,297],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method."}]}],"pos":[30141,30964],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[31347,31431],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[31516,31584],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[31669,31727],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[31822,31941],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this record.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record."}],"pos":[32031,32157],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[32229,32277],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[32446,32487],"yaml":true},{"content":"One or more of the arguments are out of range.","nodes":[{"pos":[0,46],"content":"One or more of the arguments are out of range.","nodes":[{"content":"One or more of the arguments are out of range.","pos":[0,46]}]}],"pos":[32601,32648],"yaml":true},{"content":"<code>reservations</code> was not created by this record sequence..","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence..","source":"<code>reservations</code> was not created by this record sequence.."}],"pos":[32742,32810],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[32912,33008],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]}],"pos":[33096,33171],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[33277,33340],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[33440,33509],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[33625,33654],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[33784,33880],"yaml":true},{"content":"Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,163],"content":"Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"content":"Writes a log record to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph>, using space previously reserved in the sequence.","pos":[0,130],"source":"Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>, using space previously reserved in the sequence."},{"content":"This method cannot be inherited.","pos":[131,163]}]}],"pos":[35663,35827],"yaml":true},{"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,212],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[219,512],"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","nodes":[{"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the <ph id=\"ph1\">`reservations`</ph> parameter.","pos":[0,136],"source":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter."},{"content":"If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","pos":[137,293]}]},{"pos":[519,816],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.FileRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,297],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method."}]}],"pos":[35838,36661],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[37112,37196],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[37281,37349],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[37434,37492],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[37587,37706],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this record.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record."}],"pos":[37796,37922],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[37994,38042],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[38211,38252],"yaml":true},{"content":"One or more of the arguments are out of range.","nodes":[{"pos":[0,46],"content":"One or more of the arguments are out of range.","nodes":[{"content":"One or more of the arguments are out of range.","pos":[0,46]}]}],"pos":[38366,38413],"yaml":true},{"content":"<code>reservations</code> was not created by this record sequence..","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence..","source":"<code>reservations</code> was not created by this record sequence.."}],"pos":[38507,38575],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[38677,38773],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]}],"pos":[38861,38936],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[39042,39105],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[39205,39274],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[39390,39419],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[39549,39645],"yaml":true},{"content":"Gets the sequence number of the first valid record in the current <xref href=\"System.IO.Log.FileRecordSequence\"></xref>.","nodes":[{"pos":[0,120],"content":"Gets the sequence number of the first valid record in the current <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the sequence number of the first valid record in the current <xref href=\"System.IO.Log.FileRecordSequence\"></xref>."}],"pos":[40605,40726],"yaml":true},{"content":"Valid sequence numbers are greater than or equal to <xref:System.IO.Log.FileRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.FileRecordSequence.LastSequenceNumber%2A>. All other sequence numbers are invalid.  \n  \n The value of this property can be changed by calling the <xref:System.IO.Log.FileRecordSequence.WriteRestartArea%2A> or <xref:System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber%2A> method.","nodes":[{"pos":[0,230],"content":"Valid sequence numbers are greater than or equal to <xref:System.IO.Log.FileRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.FileRecordSequence.LastSequenceNumber%2A>. All other sequence numbers are invalid.","nodes":[{"content":"Valid sequence numbers are greater than or equal to <xref:System.IO.Log.FileRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.FileRecordSequence.LastSequenceNumber%2A>. All other sequence numbers are invalid.","pos":[0,230],"nodes":[{"content":"Valid sequence numbers are greater than or equal to <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.BaseSequenceNumber%2A&gt;</ph> and less than <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.LastSequenceNumber%2A&gt;</ph>.","pos":[0,190],"source":"Valid sequence numbers are greater than or equal to <xref:System.IO.Log.FileRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.FileRecordSequence.LastSequenceNumber%2A>."},{"content":"All other sequence numbers are invalid.","pos":[191,230]}]}]},{"pos":[237,433],"content":"The value of this property can be changed by calling the <xref:System.IO.Log.FileRecordSequence.WriteRestartArea%2A> or <xref:System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber%2A> method.","nodes":[{"content":"The value of this property can be changed by calling the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.WriteRestartArea%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber%2A&gt;</ph> method.","pos":[0,196],"source":"The value of this property can be changed by calling the <xref:System.IO.Log.FileRecordSequence.WriteRestartArea%2A> or <xref:System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber%2A> method."}]}],"pos":[40737,41175],"yaml":true,"extradata":"MT"},{"content":"The lowest sequence number that corresponds to a valid record in the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>.","nodes":[{"pos":[0,123],"content":"The lowest sequence number that corresponds to a valid record in the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph>.","source":"The lowest sequence number that corresponds to a valid record in the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>."}],"pos":[41693,41817],"yaml":true},{"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"pos":[0,66],"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"content":"The property was accessed after the sequence has been disposed of.","pos":[0,66]}]}],"pos":[42002,42069],"yaml":true},{"content":"Begins an asynchronous append operation using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,121],"content":"Begins an asynchronous append operation using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous append operation using space previously reserved in the sequence. This method cannot be inherited.","pos":[0,121],"nodes":[{"content":"Begins an asynchronous append operation using space previously reserved in the sequence.","pos":[0,88]},{"content":"This method cannot be inherited.","pos":[89,121]}]}]}],"pos":[44056,44178],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,454],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,454],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.EndAppend%2A&gt;</ph> method, to ensure that the append operation has completed and resources can be freed appropriately.","pos":[0,230],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndAppend%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[231,454],"source":" If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[461,673],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[680,973],"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","nodes":[{"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the <ph id=\"ph1\">`reservations`</ph> parameter.","pos":[0,136],"source":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter."},{"content":"If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","pos":[137,293]}]},{"pos":[980,1277],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.FileRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,297],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method."}]}],"pos":[44189,45475],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[45953,46037],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[46122,46190],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[46275,46333],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[46428,46547],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this record.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record."}],"pos":[46637,46763],"yaml":true},{"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"pos":[0,76],"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the append is complete.","pos":[0,76]}]}],"pos":[46834,46911],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"pos":[0,106],"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","pos":[0,106]}]}],"pos":[46972,47079],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.","nodes":[{"pos":[0,114],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous append, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending."}],"pos":[47142,47257],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[47431,47472],"yaml":true},{"content":"One or more of the arguments are out of range.","nodes":[{"pos":[0,46],"content":"One or more of the arguments are out of range.","nodes":[{"content":"One or more of the arguments are out of range.","pos":[0,46]}]}],"pos":[47586,47633],"yaml":true},{"content":"<code>reservations</code> was not created by this record sequence.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."}],"pos":[47727,47794],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[47896,47992],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[48080,48152],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[48258,48321],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[48421,48490],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[48606,48635],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[48765,48861],"yaml":true},{"content":"Begins an asynchronous append operation using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,121],"content":"Begins an asynchronous append operation using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous append operation using space previously reserved in the sequence. This method cannot be inherited.","pos":[0,121],"nodes":[{"content":"Begins an asynchronous append operation using space previously reserved in the sequence.","pos":[0,88]},{"content":"This method cannot be inherited.","pos":[89,121]}]}]}],"pos":[50725,50847],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,454],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,454],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.EndAppend%2A&gt;</ph> method, to ensure that the append operation has completed and resources can be freed appropriately.","pos":[0,230],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndAppend%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[231,454],"source":" If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[461,673],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[680,973],"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","nodes":[{"content":"The appended record will consume space that has been previously reserved, using a reservation specified by the <ph id=\"ph1\">`reservations`</ph> parameter.","pos":[0,136],"source":"The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter."},{"content":"If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.","pos":[137,293]}]},{"pos":[980,1277],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.FileRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,297],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method."}]}],"pos":[50858,52144],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[52554,52638],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[52723,52791],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[52876,52934],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[53029,53148],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.","nodes":[{"pos":[0,125],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this record.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record."}],"pos":[53238,53364],"yaml":true},{"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"pos":[0,76],"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the append is complete.","pos":[0,76]}]}],"pos":[53435,53512],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"pos":[0,106],"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","pos":[0,106]}]}],"pos":[53573,53680],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.","nodes":[{"pos":[0,114],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous append, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending."}],"pos":[53743,53858],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[54032,54073],"yaml":true},{"content":"One or more of the arguments are out of range.","nodes":[{"pos":[0,46],"content":"One or more of the arguments are out of range.","nodes":[{"content":"One or more of the arguments are out of range.","pos":[0,46]}]}],"pos":[54187,54234],"yaml":true},{"content":"<code>reservations</code> was not created by this record sequence.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."}],"pos":[54328,54395],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[54497,54593],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[54681,54753],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[54859,54922],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[55022,55091],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[55207,55236],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[55366,55462],"yaml":true},{"content":"Begins an asynchronous append operation. This method cannot be inherited.","nodes":[{"pos":[0,73],"content":"Begins an asynchronous append operation. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous append operation. This method cannot be inherited.","pos":[0,73],"nodes":[{"content":"Begins an asynchronous append operation.","pos":[0,40]},{"content":"This method cannot be inherited.","pos":[41,73]}]}]}],"pos":[57149,57223],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,454],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,454],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.EndAppend%2A&gt;</ph> method, to ensure that the append operation has completed and resources can be freed appropriately.","pos":[0,230],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndAppend%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[231,454],"source":" If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[461,673],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[680,977],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.FileRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,297],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method."}]}],"pos":[57234,58218],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[58578,58662],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[58747,58815],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[58900,58958],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[59053,59172],"yaml":true},{"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"pos":[0,76],"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the append is complete.","pos":[0,76]}]}],"pos":[59243,59320],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"pos":[0,106],"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","pos":[0,106]}]}],"pos":[59381,59488],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.","nodes":[{"pos":[0,114],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous append, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending."}],"pos":[59551,59666],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[59840,59881],"yaml":true},{"content":"One or more of the arguments are out of range.","nodes":[{"pos":[0,46],"content":"One or more of the arguments are out of range.","nodes":[{"content":"One or more of the arguments are out of range.","pos":[0,46]}]}],"pos":[59995,60042],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[60144,60240],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[60328,60400],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[60506,60569],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[60669,60738],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[60854,60883],"yaml":true},{"content":"Begins an asynchronous append operation. This method cannot be inherited.","nodes":[{"pos":[0,73],"content":"Begins an asynchronous append operation. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous append operation. This method cannot be inherited.","pos":[0,73],"nodes":[{"content":"Begins an asynchronous append operation.","pos":[0,40]},{"content":"This method cannot be inherited.","pos":[41,73]}]}]}],"pos":[62693,62767],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,454],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,454],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.EndAppend%2A&gt;</ph> method, to ensure that the append operation has completed and resources can be freed appropriately.","pos":[0,230],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndAppend%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[231,454],"source":" If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[461,673],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[680,977],"content":"Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method completes before the record has been written.","pos":[0,67]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.FileRecordSequence.Flush%2A&gt;</ph> method.","pos":[68,297],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method."}]}],"pos":[62778,63762],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[64190,64274],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[64359,64427],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[64512,64570],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[64665,64784],"yaml":true},{"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"pos":[0,76],"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the append is complete.","pos":[0,76]}]}],"pos":[64855,64932],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"pos":[0,106],"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","pos":[0,106]}]}],"pos":[64993,65100],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.","nodes":[{"pos":[0,114],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous append, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending."}],"pos":[65163,65278],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[65452,65493],"yaml":true},{"content":"One or more of the arguments are out of range.","nodes":[{"pos":[0,46],"content":"One or more of the arguments are out of range.","nodes":[{"content":"One or more of the arguments are out of range.","pos":[0,46]}]}],"pos":[65607,65654],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[65756,65852],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[65940,66012],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[66118,66181],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[66281,66350],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[66466,66495],"yaml":true},{"content":"Begins an asynchronous flush operation, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,121],"content":"Begins an asynchronous flush operation, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous flush operation, using space previously reserved in the sequence. This method cannot be inherited.","pos":[0,121],"nodes":[{"content":"Begins an asynchronous flush operation, using space previously reserved in the sequence.","pos":[0,88]},{"content":"This method cannot be inherited.","pos":[89,121]}]}]}],"pos":[67717,67839],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by the current method to the <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> method to ensure that the flush completes and resources are freed appropriately. If an error occurs during an asynchronous flush, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.FileRecordSequence> are durably written.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> method is called.","nodes":[{"pos":[0,433],"content":"You should pass the <xref:System.IAsyncResult> returned by the current method to the <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> method to ensure that the flush completes and resources are freed appropriately. If an error occurs during an asynchronous flush, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by the current method to the <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> method to ensure that the flush completes and resources are freed appropriately. If an error occurs during an asynchronous flush, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,433],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by the current method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.EndFlush%2A&gt;</ph> method to ensure that the flush completes and resources are freed appropriately.","pos":[0,217],"source":"You should pass the <xref:System.IAsyncResult> returned by the current method to the <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> method to ensure that the flush completes and resources are freed appropriately."},{"content":"If an error occurs during an asynchronous flush, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndFlush%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[218,433],"source":" If an error occurs during an asynchronous flush, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[440,576],"content":"Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.FileRecordSequence> are durably written.","nodes":[{"content":"Calling this method ensures that all records that have been appended to the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence&gt;</ph> are durably written.","pos":[0,136],"source":"Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.FileRecordSequence> are durably written."}]},{"pos":[583,947],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> method is called.","pos":[0,364],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndFlush%2A&gt;</ph> method is called.","pos":[136,364],"source":" Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> method is called."}]}]}],"pos":[67850,68804],"yaml":true,"extradata":"MT"},{"content":"The sequence number of the latest record that must be written. If <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written.","nodes":[{"pos":[0,161],"content":"The sequence number of the latest record that must be written. If <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written.","nodes":[{"content":"The sequence number of the latest record that must be written.","pos":[0,62]},{"content":"If <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.SequenceNumber\"&gt;&lt;/xref&gt;</ph> is invalid, then all records must be written.","pos":[63,161],"source":" If <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written."}]}],"pos":[69044,69206],"yaml":true},{"content":"An optional asynchronous callback, to be called when the flush is complete.","nodes":[{"pos":[0,75],"content":"An optional asynchronous callback, to be called when the flush is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the flush is complete.","pos":[0,75]}]}],"pos":[69277,69353],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous flush request from other requests.","nodes":[{"pos":[0,105],"content":"A user-provided object that distinguishes this particular asynchronous flush request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous flush request from other requests.","pos":[0,105]}]}],"pos":[69414,69520],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous flush operation, which could still be pending.","nodes":[{"pos":[0,123],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous flush operation, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous flush operation, which could still be pending."}],"pos":[69583,69707],"yaml":true},{"content":"One or more of the arguments is invalid.  \n  \n <code>sequenceNumber</code> is not valid for this sequence.","nodes":[{"pos":[0,40],"content":"One or more of the arguments is invalid.","nodes":[{"content":"One or more of the arguments is invalid.","pos":[0,40]}]},{"pos":[47,106],"content":"<ph id=\"ph1\">&lt;code&gt;sequenceNumber&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>sequenceNumber</code> is not valid for this sequence."}],"pos":[69872,69983],"yaml":true},{"content":"<code>sequenceNumber</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">&lt;code&gt;sequenceNumber&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>sequenceNumber</code> is not between the base and last sequence numbers of this sequence."}],"pos":[70097,70193],"yaml":true},{"content":"An I/O error occurred while flushing the data.","nodes":[{"pos":[0,46],"content":"An I/O error occurred while flushing the data.","nodes":[{"content":"An I/O error occurred while flushing the data.","pos":[0,46]}]}],"pos":[70281,70328],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[70434,70497],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[70597,70666],"yaml":true},{"content":"Begins an asynchronous reserve and append operation. This method cannot be inherited.","nodes":[{"pos":[0,85],"content":"Begins an asynchronous reserve and append operation. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous reserve and append operation. This method cannot be inherited.","pos":[0,85],"nodes":[{"content":"Begins an asynchronous reserve and append operation.","pos":[0,52]},{"content":"This method cannot be inherited.","pos":[53,85]}]}]}],"pos":[72662,72748],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \n  \n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"pos":[0,474],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,474],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A&gt;</ph> method, to ensure that the append operation has completed and resources can be freed appropriately.","pos":[0,240],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[241,474],"source":" If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[481,693],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[700,873],"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","pos":[0,173],"nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.","pos":[0,130]},{"content":"If the append fails, no space is reserved.","pos":[131,173]}]}]},{"pos":[880,1180],"content":"Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method may complete before the record has been written.","pos":[0,70]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.FileRecordSequence.Flush%2A&gt;</ph> method.","pos":[71,300],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method."}]},{"pos":[1187,1563],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.","pos":[0,376],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called.","pos":[136,376],"source":" Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called."}]}]}],"pos":[72759,74333],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[74783,74867],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[74952,75020],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[75105,75163],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[75258,75377],"yaml":true},{"content":"The reservation collection to make reservations in.","nodes":[{"pos":[0,51],"content":"The reservation collection to make reservations in.","nodes":[{"content":"The reservation collection to make reservations in.","pos":[0,51]}]}],"pos":[75476,75528],"yaml":true},{"content":"The reservations to make, in bytes.","nodes":[{"pos":[0,35],"content":"The reservations to make, in bytes.","nodes":[{"content":"The reservations to make, in bytes.","pos":[0,35]}]}],"pos":[75597,75633],"yaml":true},{"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"pos":[0,76],"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the append is complete.","pos":[0,76]}]}],"pos":[75704,75781],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"pos":[0,106],"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","pos":[0,106]}]}],"pos":[75842,75949],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents this asynchronous operation, which could still be pending.","nodes":[{"pos":[0,118],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents this asynchronous operation, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents this asynchronous operation, which could still be pending."}],"pos":[76012,76131],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[76315,76356],"yaml":true},{"content":"One or more of the arguments are out of range.","nodes":[{"pos":[0,46],"content":"One or more of the arguments are out of range.","nodes":[{"content":"One or more of the arguments are out of range.","pos":[0,46]}]}],"pos":[76470,76517],"yaml":true},{"content":"<code>reservations</code> was not created by this record sequence.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."}],"pos":[76611,76678],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[76780,76876],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]}],"pos":[76964,77039],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[77145,77208],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[77308,77377],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[77493,77522],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[77652,77748],"yaml":true},{"content":"Begins an asynchronous reserve and append operation. This method cannot be inherited.","nodes":[{"pos":[0,85],"content":"Begins an asynchronous reserve and append operation. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous reserve and append operation. This method cannot be inherited.","pos":[0,85],"nodes":[{"content":"Begins an asynchronous reserve and append operation.","pos":[0,52]},{"content":"This method cannot be inherited.","pos":[53,85]}]}]}],"pos":[79867,79953],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \n  \n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"pos":[0,474],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,474],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A&gt;</ph> method, to ensure that the append operation has completed and resources can be freed appropriately.","pos":[0,240],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous append, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[241,474],"source":" If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[481,693],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[700,873],"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","pos":[0,173],"nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.","pos":[0,130]},{"content":"If the append fails, no space is reserved.","pos":[131,173]}]}]},{"pos":[880,1180],"content":"Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method may complete before the record has been written.","pos":[0,70]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.FileRecordSequence.Flush%2A&gt;</ph> method.","pos":[71,300],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method."}]},{"pos":[1187,1563],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.","pos":[0,376],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called.","pos":[136,376],"source":" Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called."}]}]}],"pos":[79964,81538],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[82056,82140],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[82225,82293],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[82378,82436],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[82531,82650],"yaml":true},{"content":"The reservation collection to make reservations in.","nodes":[{"pos":[0,51],"content":"The reservation collection to make reservations in.","nodes":[{"content":"The reservation collection to make reservations in.","pos":[0,51]}]}],"pos":[82749,82801],"yaml":true},{"content":"The reservations to make, in bytes.","nodes":[{"pos":[0,35],"content":"The reservations to make, in bytes.","nodes":[{"content":"The reservations to make, in bytes.","pos":[0,35]}]}],"pos":[82870,82906],"yaml":true},{"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"pos":[0,76],"content":"An optional asynchronous callback, to be called when the append is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the append is complete.","pos":[0,76]}]}],"pos":[82977,83054],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"pos":[0,106],"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous append request from other requests.","pos":[0,106]}]}],"pos":[83115,83222],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents this asynchronous operation, which could still be pending.","nodes":[{"pos":[0,118],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents this asynchronous operation, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents this asynchronous operation, which could still be pending."}],"pos":[83285,83404],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[83588,83629],"yaml":true},{"content":"One or more of the arguments are out of range.","nodes":[{"pos":[0,46],"content":"One or more of the arguments are out of range.","nodes":[{"content":"One or more of the arguments are out of range.","pos":[0,46]}]}],"pos":[83743,83790],"yaml":true},{"content":"<code>reservations</code> was not created by this record sequence.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."}],"pos":[83884,83951],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[84053,84149],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]}],"pos":[84237,84312],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[84418,84481],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[84581,84650],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[84766,84795],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[84925,85021],"yaml":true},{"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,134],"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.","pos":[0,134],"nodes":[{"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence.","pos":[0,101]},{"content":"This method cannot be inherited.","pos":[102,134]}]}]}],"pos":[86645,86780],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method, to assure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \n  \n If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called.","nodes":[{"pos":[0,508],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method, to assure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method, to assure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,508],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A&gt;</ph> method, to assure that the restart area write operation has completed and resources can be freed appropriately.","pos":[0,252],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method, to assure that the restart area write operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[253,508],"source":" If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[515,727],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[734,914],"content":"When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","nodes":[{"content":"When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[0,180],"nodes":[{"content":"When the operation successfully completes, the base sequence number has been updated.","pos":[0,85]},{"content":"All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[86,180]}]}]},{"pos":[921,1257],"content":"If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.","nodes":[{"content":"If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.","pos":[0,336],"nodes":[{"content":"If a <ph id=\"ph1\">&lt;xref:System.IO.Log.ReservationCollection&gt;</ph> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.","pos":[0,189],"source":"If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection."},{"content":"If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.","pos":[190,336]}]}]},{"pos":[1264,1640],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called.","pos":[0,376],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A&gt;</ph> method is called.","pos":[136,376],"source":" Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called."}]}]}],"pos":[86791,88442],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[88760,88844],"yaml":true},{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"pos":[0,126],"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","pos":[0,126],"nodes":[{"content":"The new base sequence number.","pos":[0,29]},{"content":"The specified sequence number must be greater than or equal to the current base sequence number.","pos":[30,126]}]}]}],"pos":[88928,89055],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this restart area.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area."}],"pos":[89144,89276],"yaml":true},{"content":"An optional asynchronous callback, to be called when the restart area write is complete.","nodes":[{"pos":[0,88],"content":"An optional asynchronous callback, to be called when the restart area write is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the restart area write is complete.","pos":[0,88]}]}],"pos":[89347,89436],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.","nodes":[{"pos":[0,118],"content":"A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.","pos":[0,118]}]}],"pos":[89497,89616],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous restart area write operation, which could still be pending.","nodes":[{"pos":[0,136],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous restart area write operation, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous restart area write operation, which could still be pending."}],"pos":[89679,89816],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[90000,90041],"yaml":true},{"content":"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.  \n  \n -or-  \n  \n A new or existing archive tail or base of the active log is invalid.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence."},{"pos":[101,105],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[112,180],"content":"A new or existing archive tail or base of the active log is invalid.","nodes":[{"content":"A new or existing archive tail or base of the active log is invalid.","pos":[0,68]}]}],"pos":[90155,90342],"yaml":true},{"content":"<code>reservations</code> was not created by this record sequence.  \n  \n -or-  \n  \n <code>newBaseSeqNum</code> is not valid for this sequence.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,142],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>newBaseSeqNum</code> is not valid for this sequence."}],"pos":[90436,90585],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[90687,90783],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[90871,90943],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[91049,91112],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[91212,91281],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[91397,91426],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[91556,91652],"yaml":true},{"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,134],"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.","nodes":[{"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.","pos":[0,134],"nodes":[{"content":"Begins an asynchronous restart area write operation, using space previously reserved in the sequence.","pos":[0,101]},{"content":"This method cannot be inherited.","pos":[102,134]}]}]}],"pos":[93399,93534],"yaml":true},{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method, to assure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \n  \n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \n  \n If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called.","nodes":[{"pos":[0,508],"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method, to assure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","nodes":[{"content":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method, to assure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.","pos":[0,508],"nodes":[{"content":"You should pass the <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method to the <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A&gt;</ph> method, to assure that the restart area write operation has completed and resources can be freed appropriately.","pos":[0,252],"source":"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method, to assure that the restart area write operation has completed and resources can be freed appropriately."},{"content":"If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A&gt;</ph> method is called with the <ph id=\"ph2\">&lt;xref:System.IAsyncResult&gt;</ph> returned by this method.","pos":[253,508],"source":" If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method."}]}]},{"pos":[515,727],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[734,914],"content":"When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","nodes":[{"content":"When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[0,180],"nodes":[{"content":"When the operation successfully completes, the base sequence number has been updated.","pos":[0,85]},{"content":"All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[86,180]}]}]},{"pos":[921,1257],"content":"If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.","nodes":[{"content":"If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.","pos":[0,336],"nodes":[{"content":"If a <ph id=\"ph1\">&lt;xref:System.IO.Log.ReservationCollection&gt;</ph> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.","pos":[0,189],"source":"If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection."},{"content":"If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.","pos":[190,336]}]}]},{"pos":[1264,1640],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called.","pos":[0,376],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A&gt;</ph> method is called.","pos":[136,376],"source":" Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called."}]}]}],"pos":[93545,95196],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[95582,95666],"yaml":true},{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"pos":[0,126],"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","pos":[0,126],"nodes":[{"content":"The new base sequence number.","pos":[0,29]},{"content":"The specified sequence number must be greater than or equal to the current base sequence number.","pos":[30,126]}]}]}],"pos":[95750,95877],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this restart area.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area."}],"pos":[95966,96098],"yaml":true},{"content":"An optional asynchronous callback, to be called when the restart area write is complete.","nodes":[{"pos":[0,88],"content":"An optional asynchronous callback, to be called when the restart area write is complete.","nodes":[{"content":"An optional asynchronous callback, to be called when the restart area write is complete.","pos":[0,88]}]}],"pos":[96169,96258],"yaml":true},{"content":"A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.","nodes":[{"pos":[0,118],"content":"A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.","nodes":[{"content":"A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.","pos":[0,118]}]}],"pos":[96319,96438],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous restart area write operation, which could still be pending.","nodes":[{"pos":[0,136],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> that represents the asynchronous restart area write operation, which could still be pending.","source":"An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous restart area write operation, which could still be pending."}],"pos":[96501,96638],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[96822,96863],"yaml":true},{"content":"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.  \n  \n -or-  \n  \n A new or existing archive tail or base of the active log is invalid.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence."},{"pos":[101,105],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[112,180],"content":"A new or existing archive tail or base of the active log is invalid.","nodes":[{"content":"A new or existing archive tail or base of the active log is invalid.","pos":[0,68]}]}],"pos":[96977,97164],"yaml":true},{"content":"<code>reservations</code> was not created by this record sequence.  \n  \n -or-  \n  \n <code>newBaseSeqNum</code> is not valid for this sequence.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,142],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>newBaseSeqNum</code> is not valid for this sequence."}],"pos":[97258,97407],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[97509,97605],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[97693,97765],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[97871,97934],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[98034,98103],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[98219,98248],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[98378,98474],"yaml":true},{"content":"Creates a new <xref href=\"System.IO.Log.ReservationCollection\"></xref>. This method cannot be inherited.","nodes":[{"pos":[0,104],"content":"Creates a new <xref href=\"System.IO.Log.ReservationCollection\"></xref>. This method cannot be inherited.","nodes":[{"content":"Creates a new <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph>.","pos":[0,71],"source":"Creates a new <xref href=\"System.IO.Log.ReservationCollection\"></xref>."},{"content":"This method cannot be inherited.","pos":[72,104]}]}],"pos":[99492,99597],"yaml":true},{"content":"The newly created <xref href=\"System.IO.Log.ReservationCollection\"></xref>.","nodes":[{"pos":[0,75],"content":"The newly created <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph>.","source":"The newly created <xref href=\"System.IO.Log.ReservationCollection\"></xref>."}],"pos":[99793,99869],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[100057,100126],"yaml":true},{"content":"Immediately releases the unmanaged resources used by an object.","nodes":[{"pos":[0,63],"content":"Immediately releases the unmanaged resources used by an object.","nodes":[{"content":"Immediately releases the unmanaged resources used by an object.","pos":[0,63]}]}],"pos":[101024,101088],"yaml":true},{"content":"An I/O error occurred while flushing the data.","nodes":[{"pos":[0,46],"content":"An I/O error occurred while flushing the data.","nodes":[{"content":"An I/O error occurred while flushing the data.","pos":[0,46]}]}],"pos":[101310,101357],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[101463,101526],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[101626,101695],"yaml":true},{"content":"Ends an asynchronous append operation. This method cannot be inherited.","nodes":[{"pos":[0,71],"content":"Ends an asynchronous append operation. This method cannot be inherited.","nodes":[{"content":"Ends an asynchronous append operation. This method cannot be inherited.","pos":[0,71],"nodes":[{"content":"Ends an asynchronous append operation.","pos":[0,38]},{"content":"This method cannot be inherited.","pos":[39,71]}]}]}],"pos":[102704,102776],"yaml":true},{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> is called.  \n  \n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginAppend%2A> method.","nodes":[{"pos":[0,244],"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> is called.","nodes":[{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> is called.","pos":[0,244],"nodes":[{"content":"This method blocks until the I/O operation has completed.","pos":[0,57]},{"content":"Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndAppend%2A&gt;</ph> is called.","pos":[58,244],"source":" Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> is called."}]}]},{"pos":[251,405],"content":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginAppend%2A> method.","nodes":[{"content":"This method must be called exactly once on every <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.BeginAppend%2A&gt;</ph> method.","pos":[0,154],"source":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginAppend%2A> method."}]}],"pos":[102787,103197],"yaml":true,"extradata":"MT"},{"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"pos":[0,56],"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"content":"A reference to the outstanding asynchronous I/O request.","pos":[0,56]}]}],"pos":[103373,103430],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[103502,103550],"yaml":true},{"content":"<code>result</code> is invalid.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;result&lt;/code&gt;</ph> is invalid.","source":"<code>result</code> is invalid."}],"pos":[103714,103746],"yaml":true},{"content":"`End` has already been called for this asynchronous operation.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`End`</ph> has already been called for this asynchronous operation.","source":"`End` has already been called for this asynchronous operation."}],"pos":[103856,103921],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[104009,104081],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[104187,104250],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[104350,104419],"yaml":true},{"content":"Ends an asynchronous flush operation. This method cannot be inherited.","nodes":[{"pos":[0,70],"content":"Ends an asynchronous flush operation. This method cannot be inherited.","nodes":[{"content":"Ends an asynchronous flush operation. This method cannot be inherited.","pos":[0,70],"nodes":[{"content":"Ends an asynchronous flush operation.","pos":[0,37]},{"content":"This method cannot be inherited.","pos":[38,70]}]}]}],"pos":[105422,105493],"yaml":true},{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> is called.  \n  \n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginFlush%2A> method.","nodes":[{"pos":[0,243],"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> is called.","nodes":[{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> is called.","pos":[0,243],"nodes":[{"content":"This method blocks until the I/O operation has completed.","pos":[0,57]},{"content":"Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndFlush%2A&gt;</ph> is called.","pos":[58,243],"source":" Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> is called."}]}]},{"pos":[250,403],"content":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginFlush%2A> method.","nodes":[{"content":"This method must be called exactly once on every <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.BeginFlush%2A&gt;</ph> method.","pos":[0,153],"source":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginFlush%2A> method."}]}],"pos":[105504,105912],"yaml":true,"extradata":"MT"},{"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"pos":[0,56],"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"content":"A reference to the outstanding asynchronous I/O request.","pos":[0,56]}]}],"pos":[106087,106144],"yaml":true},{"content":"The sequence number of the last record written.","nodes":[{"pos":[0,47],"content":"The sequence number of the last record written.","nodes":[{"content":"The sequence number of the last record written.","pos":[0,47]}]}],"pos":[106216,106264],"yaml":true},{"content":"<code>result</code> is invalid.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;result&lt;/code&gt;</ph> is invalid.","source":"<code>result</code> is invalid."}],"pos":[106427,106459],"yaml":true},{"content":"`End` has already been called for this asynchronous operation.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`End`</ph> has already been called for this asynchronous operation.","source":"`End` has already been called for this asynchronous operation."}],"pos":[106569,106634],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[106722,106794],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[106900,106963],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[107063,107132],"yaml":true},{"content":"Ends an asynchronous reserve and append operation. This method cannot be inherited.","nodes":[{"pos":[0,83],"content":"Ends an asynchronous reserve and append operation. This method cannot be inherited.","nodes":[{"content":"Ends an asynchronous reserve and append operation. This method cannot be inherited.","pos":[0,83],"nodes":[{"content":"Ends an asynchronous reserve and append operation.","pos":[0,50]},{"content":"This method cannot be inherited.","pos":[51,83]}]}]}],"pos":[108201,108285],"yaml":true},{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> is called.  \n  \n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginReserveAndAppend%2A> method.","nodes":[{"pos":[0,254],"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> is called.","nodes":[{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> is called.","pos":[0,254],"nodes":[{"content":"This method blocks until the I/O operation has completed.","pos":[0,57]},{"content":"Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A&gt;</ph> is called.","pos":[58,254],"source":" Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> is called."}]}]},{"pos":[261,425],"content":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginReserveAndAppend%2A> method.","nodes":[{"content":"This method must be called exactly once on every <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.BeginReserveAndAppend%2A&gt;</ph> method.","pos":[0,164],"source":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginReserveAndAppend%2A> method."}]}],"pos":[108296,108726],"yaml":true,"extradata":"MT"},{"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"pos":[0,56],"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"content":"A reference to the outstanding asynchronous I/O request.","pos":[0,56]}]}],"pos":[108912,108969],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[109041,109089],"yaml":true},{"content":"<code>result</code> is invalid.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;result&lt;/code&gt;</ph> is invalid.","source":"<code>result</code> is invalid."}],"pos":[109263,109295],"yaml":true},{"content":"`End` has already been called for this asynchronous operation.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`End`</ph> has already been called for this asynchronous operation.","source":"`End` has already been called for this asynchronous operation."}],"pos":[109405,109470],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[109558,109630],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[109736,109799],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[109899,109968],"yaml":true},{"content":"Ends an asynchronous restart area write operation. This method cannot be inherited.","nodes":[{"pos":[0,83],"content":"Ends an asynchronous restart area write operation. This method cannot be inherited.","nodes":[{"content":"Ends an asynchronous restart area write operation. This method cannot be inherited.","pos":[0,83],"nodes":[{"content":"Ends an asynchronous restart area write operation.","pos":[0,50]},{"content":"This method cannot be inherited.","pos":[51,83]}]}]}],"pos":[111037,111121],"yaml":true},{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> is called.  \n  \n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginWriteRestartArea%2A> method.","nodes":[{"pos":[0,254],"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> is called.","nodes":[{"content":"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> is called.","pos":[0,254],"nodes":[{"content":"This method blocks until the I/O operation has completed.","pos":[0,57]},{"content":"Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A&gt;</ph> is called.","pos":[58,254],"source":" Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> is called."}]}]},{"pos":[261,425],"content":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginWriteRestartArea%2A> method.","nodes":[{"content":"This method must be called exactly once on every <ph id=\"ph1\">&lt;xref:System.IAsyncResult&gt;</ph> returned by the <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.BeginWriteRestartArea%2A&gt;</ph> method.","pos":[0,164],"source":"This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginWriteRestartArea%2A> method."}]}],"pos":[111132,111562],"yaml":true,"extradata":"MT"},{"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"pos":[0,56],"content":"A reference to the outstanding asynchronous I/O request.","nodes":[{"content":"A reference to the outstanding asynchronous I/O request.","pos":[0,56]}]}],"pos":[111748,111805],"yaml":true},{"content":"The sequence number of the written log record.","nodes":[{"pos":[0,46],"content":"The sequence number of the written log record.","nodes":[{"content":"The sequence number of the written log record.","pos":[0,46]}]}],"pos":[111877,111924],"yaml":true},{"content":"<code>result</code> is invalid.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;result&lt;/code&gt;</ph> is invalid.","source":"<code>result</code> is invalid."}],"pos":[112098,112130],"yaml":true},{"content":"`End` has already been called for this asynchronous operation.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`End`</ph> has already been called for this asynchronous operation.","source":"`End` has already been called for this asynchronous operation."}],"pos":[112240,112305],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[112393,112465],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[112571,112634],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[112734,112803],"yaml":true},{"content":"Ensures that all appended records have been written. This method cannot be inherited.","nodes":[{"pos":[0,85],"content":"Ensures that all appended records have been written. This method cannot be inherited.","nodes":[{"content":"Ensures that all appended records have been written. This method cannot be inherited.","pos":[0,85],"nodes":[{"content":"Ensures that all appended records have been written.","pos":[0,52]},{"content":"This method cannot be inherited.","pos":[53,85]}]}]}],"pos":[113689,113775],"yaml":true},{"content":"Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.FileRecordSequence> have been durably written.","nodes":[{"pos":[0,142],"content":"Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.FileRecordSequence> have been durably written.","nodes":[{"content":"Calling this method ensures that all records that have been appended to the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence&gt;</ph> have been durably written.","pos":[0,142],"source":"Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.FileRecordSequence> have been durably written."}]}],"pos":[113786,113929],"yaml":true,"extradata":"MT"},{"content":"The sequence number of the last record written.","nodes":[{"pos":[0,47],"content":"The sequence number of the last record written.","nodes":[{"content":"The sequence number of the last record written.","pos":[0,47]}]}],"pos":[114089,114137],"yaml":true},{"content":"An I/O error occurred while flushing the data.","nodes":[{"pos":[0,46],"content":"An I/O error occurred while flushing the data.","nodes":[{"content":"An I/O error occurred while flushing the data.","pos":[0,46]}]}],"pos":[114291,114338],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[114444,114507],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[114607,114676],"yaml":true},{"content":"Ensures that all appended records have been written. This method cannot be inherited.","nodes":[{"pos":[0,85],"content":"Ensures that all appended records have been written. This method cannot be inherited.","nodes":[{"content":"Ensures that all appended records have been written. This method cannot be inherited.","pos":[0,85],"nodes":[{"content":"Ensures that all appended records have been written.","pos":[0,52]},{"content":"This method cannot be inherited.","pos":[53,85]}]}]}],"pos":[115694,115780],"yaml":true},{"content":"Calling this method ensures that all records with sequence numbers up to and including the specified sequence number have been durably written.","nodes":[{"pos":[0,143],"content":"Calling this method ensures that all records with sequence numbers up to and including the specified sequence number have been durably written.","nodes":[{"content":"Calling this method ensures that all records with sequence numbers up to and including the specified sequence number have been durably written.","pos":[0,143]}]}],"pos":[115791,115935],"yaml":true,"extradata":"MT"},{"content":"The sequence number of the latest record that must be written. If this <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written.","nodes":[{"pos":[0,166],"content":"The sequence number of the latest record that must be written. If this <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written.","nodes":[{"content":"The sequence number of the latest record that must be written.","pos":[0,62]},{"content":"If this <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.SequenceNumber\"&gt;&lt;/xref&gt;</ph> is invalid, then all records must be written.","pos":[63,166],"source":" If this <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written."}]}],"pos":[116148,116315],"yaml":true},{"content":"The sequence number of the last record written.","nodes":[{"pos":[0,47],"content":"The sequence number of the last record written.","nodes":[{"content":"The sequence number of the last record written.","pos":[0,47]}]}],"pos":[116387,116435],"yaml":true},{"content":"<code>sequenceNumber</code> is not between the base and last sequence numbers of this sequence.","nodes":[{"pos":[0,95],"content":"<ph id=\"ph1\">&lt;code&gt;sequenceNumber&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>sequenceNumber</code> is not between the base and last sequence numbers of this sequence."}],"pos":[116615,116711],"yaml":true},{"content":"<code>sequenceNumber</code> is not valid for this sequence.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;sequenceNumber&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>sequenceNumber</code> is not valid for this sequence."}],"pos":[116805,116865],"yaml":true},{"content":"An I/O error occurred while flushing the data.","nodes":[{"pos":[0,46],"content":"An I/O error occurred while flushing the data.","nodes":[{"content":"An I/O error occurred while flushing the data.","pos":[0,46]}]}],"pos":[116953,117000],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[117106,117169],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[117269,117338],"yaml":true},{"content":"Gets the sequence number which is greater than the last record appended.","nodes":[{"pos":[0,72],"content":"Gets the sequence number which is greater than the last record appended.","nodes":[{"content":"Gets the sequence number which is greater than the last record appended.","pos":[0,72]}]}],"pos":[118298,118371],"yaml":true},{"content":"This property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record. Valid sequence numbers are greater than or equal to <xref:System.IO.Log.FileRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.FileRecordSequence.LastSequenceNumber%2A>. All other sequence numbers are invalid.","nodes":[{"pos":[0,357],"content":"This property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record. Valid sequence numbers are greater than or equal to <xref:System.IO.Log.FileRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.FileRecordSequence.LastSequenceNumber%2A>. All other sequence numbers are invalid.","nodes":[{"content":"This property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record. Valid sequence numbers are greater than or equal to <xref:System.IO.Log.FileRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.FileRecordSequence.LastSequenceNumber%2A>. All other sequence numbers are invalid.","pos":[0,357],"nodes":[{"content":"This property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record.","pos":[0,126]},{"content":"Valid sequence numbers are greater than or equal to <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.BaseSequenceNumber%2A&gt;</ph> and less than <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.LastSequenceNumber%2A&gt;</ph>.","pos":[127,317],"source":" Valid sequence numbers are greater than or equal to <xref:System.IO.Log.FileRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.FileRecordSequence.LastSequenceNumber%2A>."},{"content":"All other sequence numbers are invalid.","pos":[318,357]}]}]}],"pos":[118382,118740],"yaml":true,"extradata":"MT"},{"content":"A sequence number which is greater than the last record appended.","nodes":[{"pos":[0,65],"content":"A sequence number which is greater than the last record appended.","nodes":[{"content":"A sequence number which is greater than the last record appended.","pos":[0,65]}]}],"pos":[118899,118965],"yaml":true},{"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"pos":[0,66],"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"content":"The property was accessed after the sequence has been disposed of.","pos":[0,66]}]}],"pos":[119150,119217],"yaml":true},{"content":"Gets the size of the largest record that can be appended to or read from this sequence, in bytes.","nodes":[{"pos":[0,97],"content":"Gets the size of the largest record that can be appended to or read from this sequence, in bytes.","nodes":[{"content":"Gets the size of the largest record that can be appended to or read from this sequence, in bytes.","pos":[0,97]}]}],"pos":[120183,120281],"yaml":true},{"content":"The size of the largest record that can be appended to or read from this sequence, in bytes.","nodes":[{"pos":[0,92],"content":"The size of the largest record that can be appended to or read from this sequence, in bytes.","nodes":[{"content":"The size of the largest record that can be appended to or read from this sequence, in bytes.","pos":[0,92]}]}],"pos":[120401,120494],"yaml":true},{"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"pos":[0,66],"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"content":"The property was accessed after the sequence has been disposed of.","pos":[0,66]}]}],"pos":[120680,120747],"yaml":true},{"content":"Returns an enumerable collection of records in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,93],"content":"Returns an enumerable collection of records in the sequence. This method cannot be inherited.","nodes":[{"content":"Returns an enumerable collection of records in the sequence. This method cannot be inherited.","pos":[0,93],"nodes":[{"content":"Returns an enumerable collection of records in the sequence.","pos":[0,60]},{"content":"This method cannot be inherited.","pos":[61,93]}]}]}],"pos":[122008,122102],"yaml":true},{"content":"This method returns an enumerable collection of records in the sequence. The order of the enumerated records depends on the value of the `logRecordEnum` parameter.","nodes":[{"pos":[0,163],"content":"This method returns an enumerable collection of records in the sequence. The order of the enumerated records depends on the value of the `logRecordEnum` parameter.","nodes":[{"content":"This method returns an enumerable collection of records in the sequence.","pos":[0,72]},{"content":"The order of the enumerated records depends on the value of the <ph id=\"ph1\">`logRecordEnum`</ph> parameter.","pos":[73,163],"source":" The order of the enumerated records depends on the value of the `logRecordEnum` parameter."}]}],"pos":[122113,122277],"yaml":true,"extradata":"MT"},{"content":"The sequence number of the first record where the reading starts.","nodes":[{"pos":[0,65],"content":"The sequence number of the first record where the reading starts.","nodes":[{"content":"The sequence number of the first record where the reading starts.","pos":[0,65]}]}],"pos":[122916,122982],"yaml":true},{"content":"A valid <xref href=\"System.IO.Log.LogRecordEnumeratorType\"></xref> value that specifies the manner (that is, forward or backward) in which records should be read from a <xref href=\"System.IO.Log.LogRecordSequence\"></xref>.","nodes":[{"pos":[0,222],"content":"A valid <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.LogRecordEnumeratorType\"&gt;&lt;/xref&gt;</ph> value that specifies the manner (that is, forward or backward) in which records should be read from a <ph id=\"ph2\">&lt;xref href=\"System.IO.Log.LogRecordSequence\"&gt;&lt;/xref&gt;</ph>.","source":"A valid <xref href=\"System.IO.Log.LogRecordEnumeratorType\"></xref> value that specifies the manner (that is, forward or backward) in which records should be read from a <xref href=\"System.IO.Log.LogRecordSequence\"></xref>."}],"pos":[123075,123298],"yaml":true},{"content":"An enumerable collection of records in the sequence.","nodes":[{"pos":[0,52],"content":"An enumerable collection of records in the sequence.","nodes":[{"content":"An enumerable collection of records in the sequence.","pos":[0,52]}]}],"pos":[123405,123458],"yaml":true},{"content":"One or more of the arguments are out of range.","nodes":[{"pos":[0,46],"content":"One or more of the arguments are out of range.","nodes":[{"content":"One or more of the arguments are out of range.","pos":[0,46]}]}],"pos":[123647,123694],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with write-only access.","nodes":[{"pos":[0,96],"content":"The operation cannot be performed because the record sequence was opened with write-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with write-only access.","pos":[0,96]}]}],"pos":[123796,123893],"yaml":true},{"content":"The record sequence is corrupted.  \n  \n -or-  \n  \n The record was written with an incompatible version of the record sequence.","nodes":[{"pos":[0,33],"content":"The record sequence is corrupted.","nodes":[{"content":"The record sequence is corrupted.","pos":[0,33]}]},{"pos":[40,44],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[51,126],"content":"The record was written with an incompatible version of the record sequence.","nodes":[{"content":"The record was written with an incompatible version of the record sequence.","pos":[0,75]}]}],"pos":[123981,124114],"yaml":true},{"content":"The enumeration has ended.  \n  \n -or-  \n  \n The enumeration has not been started. A call to <xref href=\"System.Collections.IEnumerator.MoveNext\"></xref> must be made.","nodes":[{"pos":[0,26],"content":"The enumeration has ended.","nodes":[{"content":"The enumeration has ended.","pos":[0,26]}]},{"pos":[33,37],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[44,166],"content":"The enumeration has not been started. A call to <xref href=\"System.Collections.IEnumerator.MoveNext\"></xref> must be made.","nodes":[{"content":"The enumeration has not been started.","pos":[0,37]},{"content":"A call to <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator.MoveNext\"&gt;&lt;/xref&gt;</ph> must be made.","pos":[38,122],"source":" A call to <xref href=\"System.Collections.IEnumerator.MoveNext\"></xref> must be made."}]}],"pos":[124224,124399],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[124505,124568],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[124668,124737],"yaml":true},{"content":"Returns an enumerable collection of the restart areas in the sequence. This method cannot be inherited.","nodes":[{"pos":[0,103],"content":"Returns an enumerable collection of the restart areas in the sequence. This method cannot be inherited.","nodes":[{"content":"Returns an enumerable collection of the restart areas in the sequence. This method cannot be inherited.","pos":[0,103],"nodes":[{"content":"Returns an enumerable collection of the restart areas in the sequence.","pos":[0,70]},{"content":"This method cannot be inherited.","pos":[71,103]}]}]}],"pos":[125689,125793],"yaml":true},{"content":"The restart areas are enumerated in reverse sequence number order, that is, from the highest sequence number to the lowest sequence number. Only restart areas with sequence numbers between the last sequence number and the base sequence number are enumerated.","nodes":[{"pos":[0,258],"content":"The restart areas are enumerated in reverse sequence number order, that is, from the highest sequence number to the lowest sequence number. Only restart areas with sequence numbers between the last sequence number and the base sequence number are enumerated.","nodes":[{"content":"The restart areas are enumerated in reverse sequence number order, that is, from the highest sequence number to the lowest sequence number. Only restart areas with sequence numbers between the last sequence number and the base sequence number are enumerated.","pos":[0,258],"nodes":[{"content":"The restart areas are enumerated in reverse sequence number order, that is, from the highest sequence number to the lowest sequence number.","pos":[0,139]},{"content":"Only restart areas with sequence numbers between the last sequence number and the base sequence number are enumerated.","pos":[140,258]}]}]}],"pos":[125804,126063],"yaml":true,"extradata":"MT"},{"content":"An enumerable collection of the restart areas in the sequence.","nodes":[{"pos":[0,62],"content":"An enumerable collection of the restart areas in the sequence.","nodes":[{"content":"An enumerable collection of the restart areas in the sequence.","pos":[0,62]}]}],"pos":[126304,126367],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with write-only access.","nodes":[{"pos":[0,96],"content":"The operation cannot be performed because the record sequence was opened with write-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with write-only access.","pos":[0,96]}]}],"pos":[126546,126643],"yaml":true},{"content":"The record sequence is corrupted.  \n  \n -or-  \n  \n The record was written with an incompatible version of the record sequence.","nodes":[{"pos":[0,33],"content":"The record sequence is corrupted.","nodes":[{"content":"The record sequence is corrupted.","pos":[0,33]}]},{"pos":[40,44],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[51,126],"content":"The record was written with an incompatible version of the record sequence.","nodes":[{"content":"The record was written with an incompatible version of the record sequence.","pos":[0,75]}]}],"pos":[126731,126864],"yaml":true},{"content":"The enumeration has ended.  \n  \n -or-  \n  \n The enumeration has not been started. A call to <xref href=\"System.Collections.IEnumerator.MoveNext\"></xref> must be made.","nodes":[{"pos":[0,26],"content":"The enumeration has ended.","nodes":[{"content":"The enumeration has ended.","pos":[0,26]}]},{"pos":[33,37],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[44,166],"content":"The enumeration has not been started. A call to <xref href=\"System.Collections.IEnumerator.MoveNext\"></xref> must be made.","nodes":[{"content":"The enumeration has not been started.","pos":[0,37]},{"content":"A call to <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator.MoveNext\"&gt;&lt;/xref&gt;</ph> must be made.","pos":[38,122],"source":" A call to <xref href=\"System.Collections.IEnumerator.MoveNext\"></xref> must be made."}]}],"pos":[126974,127149],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[127255,127318],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[127418,127487],"yaml":true},{"content":"Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.","nodes":[{"pos":[0,111],"content":"Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.","nodes":[{"content":"Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.","pos":[0,111],"nodes":[{"content":"Automatically makes a single reservation and appends a record to the sequence.","pos":[0,78]},{"content":"This method cannot be inherited.","pos":[79,111]}]}]}],"pos":[129402,129514],"yaml":true},{"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \n  \n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,212],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[219,392],"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","pos":[0,173],"nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.","pos":[0,130]},{"content":"If the append fails, no space is reserved.","pos":[131,173]}]}]},{"pos":[399,699],"content":"Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method may complete before the record has been written.","pos":[0,70]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.FileRecordSequence.Flush%2A&gt;</ph> method.","pos":[71,300],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method."}]}],"pos":[129525,130231],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[130722,130806],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[130891,130959],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[131044,131102],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[131197,131316],"yaml":true},{"content":"The reservation collection to make reservations in.","nodes":[{"pos":[0,51],"content":"The reservation collection to make reservations in.","nodes":[{"content":"The reservation collection to make reservations in.","pos":[0,51]}]}],"pos":[131415,131467],"yaml":true},{"content":"The reservations to make, in bytes.","nodes":[{"pos":[0,35],"content":"The reservations to make, in bytes.","nodes":[{"content":"The reservations to make, in bytes.","pos":[0,35]}]}],"pos":[131536,131572],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[131644,131692],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[131871,131912],"yaml":true},{"content":"One or more of the arguments are out of range.","nodes":[{"pos":[0,46],"content":"One or more of the arguments are out of range.","nodes":[{"content":"One or more of the arguments are out of range.","pos":[0,46]}]}],"pos":[132026,132073],"yaml":true},{"content":"<code>reservations</code> was not created by this record sequence..","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence..","source":"<code>reservations</code> was not created by this record sequence.."}],"pos":[132167,132235],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[132337,132433],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]}],"pos":[132521,132596],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[132702,132765],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[132865,132934],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[133050,133079],"yaml":true},{"content":"Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.","nodes":[{"pos":[0,111],"content":"Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.","nodes":[{"content":"Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.","pos":[0,111],"nodes":[{"content":"Automatically makes a single reservation and appends a record to the sequence.","pos":[0,78]},{"content":"This method cannot be inherited.","pos":[79,111]}]}]}],"pos":[134871,134983],"yaml":true},{"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \n  \n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \n  \n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"pos":[0,212],"content":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.","nodes":[{"content":"Data contained in the <ph id=\"ph1\">`data`</ph> parameter will be concatenated into a single byte array for appending as the record.","pos":[0,113],"source":"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record."},{"content":"However, no provision is made for splitting data back into array segments when the record is read.","pos":[114,212]}]},{"pos":[219,392],"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.","pos":[0,173],"nodes":[{"content":"The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation.","pos":[0,130]},{"content":"If the append fails, no space is reserved.","pos":[131,173]}]}]},{"pos":[399,699],"content":"Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.","nodes":[{"content":"Normally, this method may complete before the record has been written.","pos":[0,70]},{"content":"To ensure that a record has been written, either specify the <ph id=\"ph1\">&lt;xref:System.IO.Log.RecordAppendOptions.ForceFlush&gt;</ph> flag using the <ph id=\"ph2\">`recordAppendOptions`</ph> parameter, or call the <ph id=\"ph3\">&lt;xref:System.IO.Log.FileRecordSequence.Flush%2A&gt;</ph> method.","pos":[71,300],"source":" To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method."}]}],"pos":[134994,135700],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[136123,136207],"yaml":true},{"content":"The sequence number of the next record in the user-specified order.","nodes":[{"pos":[0,67],"content":"The sequence number of the next record in the user-specified order.","nodes":[{"content":"The sequence number of the next record in the user-specified order.","pos":[0,67]}]}],"pos":[136292,136360],"yaml":true},{"content":"The sequence number of the next record in Previous order.","nodes":[{"pos":[0,57],"content":"The sequence number of the next record in Previous order.","nodes":[{"content":"The sequence number of the next record in Previous order.","pos":[0,57]}]}],"pos":[136445,136503],"yaml":true},{"content":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.","nodes":[{"pos":[0,118],"content":"A valid value of <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.RecordAppendOptions\"&gt;&lt;/xref&gt;</ph> that specifies how the data should be written.","source":"A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written."}],"pos":[136598,136717],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the collection to make reservations in.","nodes":[{"pos":[0,112],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the collection to make reservations in.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the collection to make reservations in."}],"pos":[136816,136929],"yaml":true},{"content":"The reservations to make, in bytes.","nodes":[{"pos":[0,35],"content":"The reservations to make, in bytes.","nodes":[{"content":"The reservations to make, in bytes.","pos":[0,35]}]}],"pos":[136998,137034],"yaml":true},{"content":"The sequence number of the appended log record.","nodes":[{"pos":[0,47],"content":"The sequence number of the appended log record.","nodes":[{"content":"The sequence number of the appended log record.","pos":[0,47]}]}],"pos":[137106,137154],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[137333,137374],"yaml":true},{"content":"One or more of the arguments are out of range.","nodes":[{"pos":[0,46],"content":"One or more of the arguments are out of range.","nodes":[{"content":"One or more of the arguments are out of range.","pos":[0,46]}]}],"pos":[137488,137535],"yaml":true},{"content":"<code>reservations</code> was not created by this record sequence..","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence..","source":"<code>reservations</code> was not created by this record sequence.."}],"pos":[137629,137697],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[137799,137895],"yaml":true},{"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,74],"content":"The request could not be performed because of an unexpected I/O exception.","nodes":[{"content":"The request could not be performed because of an unexpected I/O exception.","pos":[0,74]}]}],"pos":[137983,138058],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[138164,138227],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[138327,138396],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[138512,138541],"yaml":true},{"content":"Gets the total number of bytes that have been reserved.","nodes":[{"pos":[0,55],"content":"Gets the total number of bytes that have been reserved.","nodes":[{"content":"Gets the total number of bytes that have been reserved.","pos":[0,55]}]}],"pos":[139471,139527],"yaml":true},{"content":"The total size of all reservations made in this record sequence.","nodes":[{"pos":[0,64],"content":"The total size of all reservations made in this record sequence.","nodes":[{"content":"The total size of all reservations made in this record sequence.","pos":[0,64]}]}],"pos":[139641,139706],"yaml":true},{"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"pos":[0,66],"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"content":"The property was accessed after the sequence has been disposed of.","pos":[0,66]}]}],"pos":[139886,139953],"yaml":true},{"content":"Gets the sequence number of the most recently written restart area.","nodes":[{"pos":[0,67],"content":"Gets the sequence number of the most recently written restart area.","nodes":[{"content":"Gets the sequence number of the most recently written restart area.","pos":[0,67]}]}],"pos":[140931,140999],"yaml":true},{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","nodes":[{"pos":[0,473],"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[0,473],"nodes":[{"content":"A restart area is used to temporarily store information containing a client's last checkpoint operation.","pos":[0,104]},{"content":"The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available.","pos":[105,229]},{"content":"When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation.","pos":[230,344]},{"content":"This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[345,473]}]}]}],"pos":[141010,141484],"yaml":true,"extradata":"MT"},{"content":"The sequence number of the most recently written restart area.","nodes":[{"pos":[0,62],"content":"The sequence number of the most recently written restart area.","nodes":[{"content":"The sequence number of the most recently written restart area.","pos":[0,62]}]}],"pos":[141646,141709],"yaml":true},{"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"pos":[0,66],"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"content":"The property was accessed after the sequence has been disposed of.","pos":[0,66]}]}],"pos":[141897,141964],"yaml":true},{"content":"Gets or sets a value indicating whether or not appends are automatically retried if the log is full.","nodes":[{"pos":[0,100],"content":"Gets or sets a value indicating whether or not appends are automatically retried if the log is full.","nodes":[{"content":"Gets or sets a value indicating whether or not appends are automatically retried if the log is full.","pos":[0,100]}]}],"pos":[142882,142983],"yaml":true},{"content":"If the value of this property is `true`, and an <xref:System.IO.Log.FileRecordSequence.Append%2A> call fails because there is not enough space in the sequence, the record sequence will try to free space and retry the append.","nodes":[{"pos":[0,224],"content":"If the value of this property is <ph id=\"ph1\">`true`</ph>, and an <ph id=\"ph2\">&lt;xref:System.IO.Log.FileRecordSequence.Append%2A&gt;</ph> call fails because there is not enough space in the sequence, the record sequence will try to free space and retry the append.","source":"If the value of this property is `true`, and an <xref:System.IO.Log.FileRecordSequence.Append%2A> call fails because there is not enough space in the sequence, the record sequence will try to free space and retry the append."}],"pos":[142994,143219],"yaml":true,"extradata":"MT"},{"content":"`true` if appends are automatically retried if the log is full; otherwise, `false`. The default is `true`.","nodes":[{"pos":[0,106],"content":"`true` if appends are automatically retried if the log is full; otherwise, `false`. The default is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if appends are automatically retried if the log is full; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,83],"source":"`true` if appends are automatically retried if the log is full; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`true`</ph>.","pos":[84,106],"source":" The default is `true`."}]}],"pos":[143338,143447],"yaml":true},{"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"pos":[0,66],"content":"The property was accessed after the sequence has been disposed of.","nodes":[{"content":"The property was accessed after the sequence has been disposed of.","pos":[0,66]}]}],"pos":[143625,143692],"yaml":true},{"content":"Occurs when the record sequence determines that the tail must be moved forward. This method cannot be inherited.","nodes":[{"pos":[0,112],"content":"Occurs when the record sequence determines that the tail must be moved forward. This method cannot be inherited.","nodes":[{"content":"Occurs when the record sequence determines that the tail must be moved forward. This method cannot be inherited.","pos":[0,112],"nodes":[{"content":"Occurs when the record sequence determines that the tail must be moved forward.","pos":[0,79]},{"content":"This method cannot be inherited.","pos":[80,112]}]}]}],"pos":[144601,144714],"yaml":true},{"content":"You can fire this event when the record sequence has run out of space. When this event is fired, the tail of the sequence (that is, the base sequence number) is moved forward to free up space.","nodes":[{"pos":[0,192],"content":"You can fire this event when the record sequence has run out of space. When this event is fired, the tail of the sequence (that is, the base sequence number) is moved forward to free up space.","nodes":[{"content":"You can fire this event when the record sequence has run out of space. When this event is fired, the tail of the sequence (that is, the base sequence number) is moved forward to free up space.","pos":[0,192],"nodes":[{"content":"You can fire this event when the record sequence has run out of space.","pos":[0,70]},{"content":"When this event is fired, the tail of the sequence (that is, the base sequence number) is moved forward to free up space.","pos":[71,192]}]}]}],"pos":[144725,144918],"yaml":true,"extradata":"MT"},{"content":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"pos":[0,116],"content":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"content":"Writes a restart area to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph>.","pos":[0,83],"source":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>."},{"content":"This method cannot be inherited.","pos":[84,116]}]}],"pos":[146552,146669],"yaml":true},{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \n  \n A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.  \n  \n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \n  \n If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.  \n  \n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"pos":[0,357],"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","nodes":[{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[0,357],"nodes":[{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation.","pos":[0,108]},{"content":"When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation.","pos":[109,228]},{"content":"This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[229,357]}]}]},{"pos":[364,468],"content":"A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.","nodes":[{"content":"A restart area can be read using the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A&gt;</ph> method.","pos":[0,104],"source":"A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method."}]},{"pos":[475,709],"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","pos":[0,234],"nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.","pos":[0,138]},{"content":"No provision is made for splitting data back into array segments when the restart area is read.","pos":[139,234]}]}]},{"pos":[716,1024],"content":"If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.","nodes":[{"content":"If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.","pos":[0,308],"nodes":[{"content":"If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.","pos":[0,158]},{"content":"If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.","pos":[159,308]}]}]},{"pos":[1031,1209],"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","nodes":[{"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[0,178],"nodes":[{"content":"When this method successfully completes, the base sequence number has been updated.","pos":[0,83]},{"content":"All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[84,178]}]}]},{"pos":[1216,1592],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.","pos":[0,376],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called.","pos":[136,376],"source":" Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called."}]}]}],"pos":[146680,148285],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[148577,148661],"yaml":true},{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"pos":[0,126],"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","pos":[0,126],"nodes":[{"content":"The new base sequence number.","pos":[0,29]},{"content":"The specified sequence number must be greater than or equal to the current base sequence number.","pos":[30,126]}]}]}],"pos":[148745,148872],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this restart area.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area."}],"pos":[148962,149094],"yaml":true},{"content":"The sequence number of the written restart area.","nodes":[{"pos":[0,48],"content":"The sequence number of the written restart area.","nodes":[{"content":"The sequence number of the written restart area.","pos":[0,48]}]}],"pos":[149166,149215],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[149394,149435],"yaml":true},{"content":"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.  \n  \n -or-  \n  \n A new or existing archive tail or base of the active log is invalid.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence."},{"pos":[101,105],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[112,180],"content":"A new or existing archive tail or base of the active log is invalid.","nodes":[{"content":"A new or existing archive tail or base of the active log is invalid.","pos":[0,68]}]}],"pos":[149549,149736],"yaml":true},{"content":"<code>reservations</code> was not created by this record sequence.  \n  \n -or-  \n  \n <code>newBaseSeqNum</code> is not valid for this sequence.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,142],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>newBaseSeqNum</code> is not valid for this sequence."}],"pos":[149830,149979],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[150081,150177],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[150265,150337],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[150443,150506],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[150606,150675],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[150791,150820],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[150950,151046],"yaml":true},{"content":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"pos":[0,116],"content":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"content":"Writes a restart area to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph>.","pos":[0,83],"source":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>."},{"content":"This method cannot be inherited.","pos":[84,116]}]}],"pos":[152154,152271],"yaml":true},{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \n  \n A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.  \n  \n The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"pos":[0,357],"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","nodes":[{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[0,357],"nodes":[{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation.","pos":[0,108]},{"content":"When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation.","pos":[109,228]},{"content":"This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[229,357]}]}]},{"pos":[364,468],"content":"A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.","nodes":[{"content":"A restart area can be read using the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A&gt;</ph> method.","pos":[0,104],"source":"A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method."}]},{"pos":[475,681],"content":"The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"content":"The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","pos":[0,206],"nodes":[{"content":"The data in the byte array segments will be concatenated into a single byte array for appending as the record.","pos":[0,110]},{"content":"No provision is made for splitting data back into array segments when the restart area is read.","pos":[111,206]}]}]}],"pos":[152282,152970],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[153168,153252],"yaml":true},{"content":"The sequence number of the written restart area.","nodes":[{"pos":[0,48],"content":"The sequence number of the written restart area.","nodes":[{"content":"The sequence number of the written restart area.","pos":[0,48]}]}],"pos":[153324,153373],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[153552,153593],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[153695,153791],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[153879,153951],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[154057,154120],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[154220,154289],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[154405,154434],"yaml":true},{"content":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"pos":[0,116],"content":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"content":"Writes a restart area to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph>.","pos":[0,83],"source":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>."},{"content":"This method cannot be inherited.","pos":[84,116]}]}],"pos":[155665,155782],"yaml":true},{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \n  \n A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.  \n  \n The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"pos":[0,357],"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","nodes":[{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[0,357],"nodes":[{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation.","pos":[0,108]},{"content":"When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation.","pos":[109,228]},{"content":"This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[229,357]}]}]},{"pos":[364,468],"content":"A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.","nodes":[{"content":"A restart area can be read using the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A&gt;</ph> method.","pos":[0,104],"source":"A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method."}]},{"pos":[475,681],"content":"The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"content":"The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","pos":[0,206],"nodes":[{"content":"The data in the byte array segments will be concatenated into a single byte array for appending as the record.","pos":[0,110]},{"content":"No provision is made for splitting data back into array segments when the restart area is read.","pos":[111,206]}]}]}],"pos":[155793,156481],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[156747,156831],"yaml":true},{"content":"The sequence number of the written restart area.","nodes":[{"pos":[0,48],"content":"The sequence number of the written restart area.","nodes":[{"content":"The sequence number of the written restart area.","pos":[0,48]}]}],"pos":[156903,156952],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[157131,157172],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[157274,157370],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[157458,157530],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[157636,157699],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[157799,157868],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[157984,158013],"yaml":true},{"content":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"pos":[0,116],"content":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"content":"Writes a restart area to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph>.","pos":[0,83],"source":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>."},{"content":"This method cannot be inherited.","pos":[84,116]}]}],"pos":[159256,159373],"yaml":true},{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \n  \n A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.  \n  \n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \n  \n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","nodes":[{"pos":[0,357],"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","nodes":[{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[0,357],"nodes":[{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation.","pos":[0,108]},{"content":"When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation.","pos":[109,228]},{"content":"This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[229,357]}]}]},{"pos":[364,468],"content":"A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.","nodes":[{"content":"A restart area can be read using the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A&gt;</ph> method.","pos":[0,104],"source":"A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method."}]},{"pos":[475,709],"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","pos":[0,234],"nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.","pos":[0,138]},{"content":"No provision is made for splitting data back into array segments when the restart area is read.","pos":[139,234]}]}]},{"pos":[716,894],"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","nodes":[{"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[0,178],"nodes":[{"content":"When this method successfully completes, the base sequence number has been updated.","pos":[0,83]},{"content":"All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[84,178]}]}]}],"pos":[159384,160287],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[160529,160613],"yaml":true},{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"pos":[0,126],"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","pos":[0,126],"nodes":[{"content":"The new base sequence number.","pos":[0,29]},{"content":"The specified sequence number must be greater than or equal to the current base sequence number.","pos":[30,126]}]}]}],"pos":[160697,160824],"yaml":true},{"content":"The sequence number of the written restart area.","nodes":[{"pos":[0,48],"content":"The sequence number of the written restart area.","nodes":[{"content":"The sequence number of the written restart area.","pos":[0,48]}]}],"pos":[160896,160945],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[161124,161165],"yaml":true},{"content":"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.  \n  \n -or-  \n  \n A new or existing archive tail or base of the active log is invalid.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence."},{"pos":[101,105],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[112,180],"content":"A new or existing archive tail or base of the active log is invalid.","nodes":[{"content":"A new or existing archive tail or base of the active log is invalid.","pos":[0,68]}]}],"pos":[161279,161466],"yaml":true},{"content":"<code>newBaseSeqNum</code> is not valid for this sequence.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>newBaseSeqNum</code> is not valid for this sequence."}],"pos":[161560,161619],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[161721,161817],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[161905,161977],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[162083,162146],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[162246,162315],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[162431,162460],"yaml":true},{"content":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"pos":[0,116],"content":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"content":"Writes a restart area to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph>.","pos":[0,83],"source":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>."},{"content":"This method cannot be inherited.","pos":[84,116]}]}],"pos":[163826,163943],"yaml":true},{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \n  \n A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.  \n  \n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \n  \n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","nodes":[{"pos":[0,357],"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","nodes":[{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[0,357],"nodes":[{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation.","pos":[0,108]},{"content":"When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation.","pos":[109,228]},{"content":"This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[229,357]}]}]},{"pos":[364,468],"content":"A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.","nodes":[{"content":"A restart area can be read using the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A&gt;</ph> method.","pos":[0,104],"source":"A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method."}]},{"pos":[475,709],"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","pos":[0,234],"nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.","pos":[0,138]},{"content":"No provision is made for splitting data back into array segments when the restart area is read.","pos":[139,234]}]}]},{"pos":[716,894],"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","nodes":[{"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[0,178],"nodes":[{"content":"When this method successfully completes, the base sequence number has been updated.","pos":[0,83]},{"content":"All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[84,178]}]}]}],"pos":[163954,164857],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[165167,165251],"yaml":true},{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"pos":[0,126],"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","pos":[0,126],"nodes":[{"content":"The new base sequence number.","pos":[0,29]},{"content":"The specified sequence number must be greater than or equal to the current base sequence number.","pos":[30,126]}]}]}],"pos":[165335,165462],"yaml":true},{"content":"The sequence number of the written restart area.","nodes":[{"pos":[0,48],"content":"The sequence number of the written restart area.","nodes":[{"content":"The sequence number of the written restart area.","pos":[0,48]}]}],"pos":[165534,165583],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[165762,165803],"yaml":true},{"content":"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.  \n  \n -or-  \n  \n A new or existing archive tail or base of the active log is invalid.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence."},{"pos":[101,105],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[112,180],"content":"A new or existing archive tail or base of the active log is invalid.","nodes":[{"content":"A new or existing archive tail or base of the active log is invalid.","pos":[0,68]}]}],"pos":[165917,166104],"yaml":true},{"content":"<code>newBaseSeqNum</code> is not valid for this sequence.","nodes":[{"pos":[0,58],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>newBaseSeqNum</code> is not valid for this sequence."}],"pos":[166198,166257],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[166359,166455],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[166543,166615],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[166721,166784],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[166884,166953],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[167069,167098],"yaml":true},{"content":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"pos":[0,116],"content":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.","nodes":[{"content":"Writes a restart area to the <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.FileRecordSequence\"&gt;&lt;/xref&gt;</ph>.","pos":[0,83],"source":"Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>."},{"content":"This method cannot be inherited.","pos":[84,116]}]}],"pos":[168641,168758],"yaml":true},{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \n  \n A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.  \n  \n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \n  \n If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.  \n  \n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \n  \n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"pos":[0,357],"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","nodes":[{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[0,357],"nodes":[{"content":"A restart area can be used to temporarily store information containing a client's last checkpoint operation.","pos":[0,108]},{"content":"When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation.","pos":[109,228]},{"content":"This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.","pos":[229,357]}]}]},{"pos":[364,468],"content":"A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.","nodes":[{"content":"A restart area can be read using the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A&gt;</ph> method.","pos":[0,104],"source":"A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method."}]},{"pos":[475,709],"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.","pos":[0,234],"nodes":[{"content":"When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record.","pos":[0,138]},{"content":"No provision is made for splitting data back into array segments when the restart area is read.","pos":[139,234]}]}]},{"pos":[716,1024],"content":"If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.","nodes":[{"content":"If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.","pos":[0,308],"nodes":[{"content":"If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection.","pos":[0,158]},{"content":"If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.","pos":[159,308]}]}]},{"pos":[1031,1209],"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","nodes":[{"content":"When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[0,178],"nodes":[{"content":"When this method successfully completes, the base sequence number has been updated.","pos":[0,83]},{"content":"All log records with sequence numbers less than the new base sequence number are inaccessible.","pos":[84,178]}]}]},{"pos":[1216,1592],"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.","nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.","pos":[0,376],"nodes":[{"content":"If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation.","pos":[0,135]},{"content":"Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <ph id=\"ph1\">&lt;xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A&gt;</ph> method is called.","pos":[136,376],"source":" Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called."}]}]}],"pos":[168769,170374],"yaml":true,"extradata":"MT"},{"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"pos":[0,83],"content":"A list of byte array segments that will be concatenated and appended as the record.","nodes":[{"content":"A list of byte array segments that will be concatenated and appended as the record.","pos":[0,83]}]}],"pos":[170734,170818],"yaml":true},{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"pos":[0,126],"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","nodes":[{"content":"The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.","pos":[0,126],"nodes":[{"content":"The new base sequence number.","pos":[0,29]},{"content":"The specified sequence number must be greater than or equal to the current base sequence number.","pos":[30,126]}]}]}],"pos":[170902,171029],"yaml":true},{"content":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.","nodes":[{"pos":[0,131],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.IO.Log.ReservationCollection\"&gt;&lt;/xref&gt;</ph> that contains the reservation that should be used for this restart area.","source":"A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area."}],"pos":[171119,171251],"yaml":true},{"content":"The sequence number of the written restart area.","nodes":[{"pos":[0,48],"content":"The sequence number of the written restart area.","nodes":[{"content":"The sequence number of the written restart area.","pos":[0,48]}]}],"pos":[171323,171372],"yaml":true},{"content":"One or more of the arguments are `null`.","nodes":[{"pos":[0,40],"content":"One or more of the arguments are <ph id=\"ph1\">`null`</ph>.","source":"One or more of the arguments are `null`."}],"pos":[171551,171592],"yaml":true},{"content":"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.  \n  \n -or-  \n  \n A new or existing archive tail or base of the active log is invalid.","nodes":[{"pos":[0,94],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not between the base and last sequence numbers of this sequence.","source":"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence."},{"pos":[101,105],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[112,180],"content":"A new or existing archive tail or base of the active log is invalid.","nodes":[{"content":"A new or existing archive tail or base of the active log is invalid.","pos":[0,68]}]}],"pos":[171706,171893],"yaml":true},{"content":"<code>reservations</code> was not created by this record sequence.  \n  \n -or-  \n  \n <code>newBaseSeqNum</code> is not valid for this sequence.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;reservations&lt;/code&gt;</ph> was not created by this record sequence.","source":"<code>reservations</code> was not created by this record sequence."},{"pos":[73,77],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[84,142],"content":"<ph id=\"ph1\">&lt;code&gt;newBaseSeqNum&lt;/code&gt;</ph> is not valid for this sequence.","source":"<code>newBaseSeqNum</code> is not valid for this sequence."}],"pos":[171987,172136],"yaml":true},{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"pos":[0,95],"content":"The operation cannot be performed because the record sequence was opened with read-only access.","nodes":[{"content":"The operation cannot be performed because the record sequence was opened with read-only access.","pos":[0,95]}]}],"pos":[172238,172334],"yaml":true},{"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"pos":[0,71],"content":"The request cannot be performed because of an unexpected I/O exception.","nodes":[{"content":"The request cannot be performed because of an unexpected I/O exception.","pos":[0,71]}]}],"pos":[172422,172494],"yaml":true},{"content":"The method was called after the sequence has been disposed of.","nodes":[{"pos":[0,62],"content":"The method was called after the sequence has been disposed of.","nodes":[{"content":"The method was called after the sequence has been disposed of.","pos":[0,62]}]}],"pos":[172600,172663],"yaml":true},{"content":"There is not enough memory to continue the execution of the program.","nodes":[{"pos":[0,68],"content":"There is not enough memory to continue the execution of the program.","nodes":[{"content":"There is not enough memory to continue the execution of the program.","pos":[0,68]}]}],"pos":[172763,172832],"yaml":true},{"content":"The record sequence is full.","nodes":[{"pos":[0,28],"content":"The record sequence is full.","nodes":[{"content":"The record sequence is full.","pos":[0,28]}]}],"pos":[172948,172977],"yaml":true},{"content":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.","nodes":[{"pos":[0,95],"content":"No reservation large enough to fit <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">data</ph><ept id=\"p1\">&lt;/code&gt;</ept> can be found in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">reservations</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>."}],"pos":[173107,173203],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.Log.FileRecordSequence\n  commentId: T:System.IO.Log.FileRecordSequence\n  id: FileRecordSequence\n  children:\n  - System.IO.Log.FileRecordSequence.#ctor(System.String)\n  - System.IO.Log.FileRecordSequence.#ctor(System.String,System.IO.FileAccess)\n  - System.IO.Log.FileRecordSequence.#ctor(System.String,System.IO.FileAccess,System.Int32)\n  - System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)\n  - System.IO.Log.FileRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  - System.IO.Log.FileRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  - System.IO.Log.FileRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  - System.IO.Log.FileRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  - System.IO.Log.FileRecordSequence.BaseSequenceNumber\n  - System.IO.Log.FileRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  - System.IO.Log.FileRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  - System.IO.Log.FileRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  - System.IO.Log.FileRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  - System.IO.Log.FileRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)\n  - System.IO.Log.FileRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  - System.IO.Log.FileRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  - System.IO.Log.FileRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  - System.IO.Log.FileRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  - System.IO.Log.FileRecordSequence.CreateReservationCollection\n  - System.IO.Log.FileRecordSequence.Dispose\n  - System.IO.Log.FileRecordSequence.EndAppend(System.IAsyncResult)\n  - System.IO.Log.FileRecordSequence.EndFlush(System.IAsyncResult)\n  - System.IO.Log.FileRecordSequence.EndReserveAndAppend(System.IAsyncResult)\n  - System.IO.Log.FileRecordSequence.EndWriteRestartArea(System.IAsyncResult)\n  - System.IO.Log.FileRecordSequence.Flush\n  - System.IO.Log.FileRecordSequence.Flush(System.IO.Log.SequenceNumber)\n  - System.IO.Log.FileRecordSequence.LastSequenceNumber\n  - System.IO.Log.FileRecordSequence.MaximumRecordLength\n  - System.IO.Log.FileRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)\n  - System.IO.Log.FileRecordSequence.ReadRestartAreas\n  - System.IO.Log.FileRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  - System.IO.Log.FileRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  - System.IO.Log.FileRecordSequence.ReservedBytes\n  - System.IO.Log.FileRecordSequence.RestartSequenceNumber\n  - System.IO.Log.FileRecordSequence.RetryAppend\n  - System.IO.Log.FileRecordSequence.TailPinned\n  - System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  - System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})\n  - System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})\n  - System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)\n  - System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)\n  - System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  langs:\n  - csharp\n  name: FileRecordSequence\n  nameWithType: FileRecordSequence\n  fullName: System.IO.Log.FileRecordSequence\n  type: Class\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Implements an <xref href=\"System.IO.Log.IRecordSequence\"></xref> on top of a file. This class cannot be inherited.\n  remarks: \"The <xref:System.IO.Log.FileRecordSequence> is a record sequence based on a single log file in the file system. It is a simple implementation of the <xref:System.IO.Log.IRecordSequence> interface, on top of a simple file-based log.  \\n  \\n To manipulate a file-based log, the account that your application is running in must have sufficient privileges, as dictated by the file system security at the time the <xref:System.IO.Log.FileRecordSequence> is constructed. In addition, a demand for FullTrust is made at construction time. The permission verification results are cached thereafter in keeping with the Windows security model. You should ensure that you do not accidentally expose the contents of the record sequence to an unauthorized user.\"\n  example:\n  - \"The following example creates a record sequence, appends record to it, and finally reads the records.  \\n  \\n [!code-csharp[IRecordSequence#1](~/samples/snippets/csharp/VS_Snippets_CFX/irecordsequence/cs/readrecord.cs#1)]\\n [!code-vb[IRecordSequence#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/irecordsequence/vb/readrecord.vb#1)]\"\n  syntax:\n    content: 'public sealed class FileRecordSequence : IDisposable, System.IO.Log.IRecordSequence'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  - System.IO.Log.IRecordSequence\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.#ctor(System.String)\n  commentId: M:System.IO.Log.FileRecordSequence.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: FileRecordSequence(String)\n  nameWithType: FileRecordSequence.FileRecordSequence(String)\n  fullName: FileRecordSequence.FileRecordSequence(String)\n  type: Constructor\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Initializes a new instance of the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class with a specified file.\n  remarks: This constructor creates read/write access to the file, and opens the file with share Read access. This means that requests to open the file for writing by this or another process fails until this <xref:System.IO.Log.FileRecordSequence> instance has been disposed of, but read attempts will succeed. If `path` is not found, a new file is created with a size of 0 bytes.\n  example:\n  - \"The following example creates a record sequence, appends record to it, reads the records, and finally diposes the sequence.  \\n  \\n [!code-csharp[IRecordSequence#1](~/samples/snippets/csharp/VS_Snippets_CFX/irecordsequence/cs/readrecord.cs#1)]\\n [!code-vb[IRecordSequence#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/irecordsequence/vb/readrecord.vb#1)]\"\n  syntax:\n    content: public FileRecordSequence (string path);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the file that this <xref href=\"System.IO.Log.FileRecordSequence\"></xref> instance will encapsulate.\n  overload: System.IO.Log.FileRecordSequence.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The file specified by <code>path</code> is not valid.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file specified by <code>path</code> cannot be found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log store is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.#ctor(System.String,System.IO.FileAccess)\n  commentId: M:System.IO.Log.FileRecordSequence.#ctor(System.String,System.IO.FileAccess)\n  id: '#ctor(System.String,System.IO.FileAccess)'\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: FileRecordSequence(String, FileAccess)\n  nameWithType: FileRecordSequence.FileRecordSequence(String, FileAccess)\n  fullName: FileRecordSequence.FileRecordSequence(String, FileAccess)\n  type: Constructor\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Initializes a new instance of the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class with a specified file and an access mode.\n  syntax:\n    content: public FileRecordSequence (string path, System.IO.FileAccess access);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the file that this <xref href=\"System.IO.Log.FileRecordSequence\"></xref> instance will encapsulate.\n    - id: access\n      type: System.IO.FileAccess\n      description: A valid <xref href=\"System.IO.FileAccess\"></xref> value that controls the kind of access users have to a log file.\n  overload: System.IO.Log.FileRecordSequence.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The file specified by <code>path</code> is not valid.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file specified by <code>path</code> cannot be found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log store is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.#ctor(System.String,System.IO.FileAccess,System.Int32)\n  commentId: M:System.IO.Log.FileRecordSequence.#ctor(System.String,System.IO.FileAccess,System.Int32)\n  id: '#ctor(System.String,System.IO.FileAccess,System.Int32)'\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: FileRecordSequence(String, FileAccess, Int32)\n  nameWithType: FileRecordSequence.FileRecordSequence(String, FileAccess, Int32)\n  fullName: FileRecordSequence.FileRecordSequence(String, FileAccess, Int32)\n  type: Constructor\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Initializes a new instance of the <xref href=\"System.IO.Log.FileRecordSequence\"></xref> class with a specified file, an access mode, and a file size.\n  syntax:\n    content: public FileRecordSequence (string path, System.IO.FileAccess access, int size);\n    parameters:\n    - id: path\n      type: System.String\n      description: A relative or absolute path for the file that this <xref href=\"System.IO.Log.FileRecordSequence\"></xref> instance will encapsulate.\n    - id: access\n      type: System.IO.FileAccess\n      description: A valid <xref href=\"System.IO.FileAccess\"></xref> value that controls the kind of access users have to a log file.\n    - id: size\n      type: System.Int32\n      description: The size of the log file to be opened.\n  overload: System.IO.Log.FileRecordSequence.#ctor*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One or more of the parameters are out of the valid range.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The file specified by <code>path</code> is not valid.\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: The file specified by <code>path</code> cannot be found.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: Access for the specified log store is denied by the operating system.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)\n  commentId: M:System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)\n  id: AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: AdvanceBaseSequenceNumber(SequenceNumber)\n  nameWithType: FileRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)\n  fullName: FileRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Moves the base sequence number of the log forward. This method cannot be inherited.\n  syntax:\n    content: public void AdvanceBaseSequenceNumber (System.IO.Log.SequenceNumber newBaseSequenceNumber);\n    parameters:\n    - id: newBaseSequenceNumber\n      type: System.IO.Log.SequenceNumber\n      description: The new base sequence number of the record sequence.\n  overload: System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>newBaseSequenceNumber</code> is invalid.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>newBaseSequenceNumber</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while modifying the sequence.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  commentId: M:System.IO.Log.FileRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  id: Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  nameWithType: FileRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  fullName: FileRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.\n  remarks: \"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.\"\n  example:\n  - \"The following example creates a record sequence, appends record to it, and finally reads the records.  \\n  \\n [!code-csharp[FileRecordSequence#0](~/samples/snippets/csharp/VS_Snippets_CFX/filerecordsequence/cs/filerecordsequence.cs#0)]\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber Append (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.FileRecordSequence.Append*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One or more of the arguments are out of range.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request could not be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  commentId: M:System.IO.Log.FileRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  id: Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  nameWithType: FileRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  fullName: FileRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.\n  remarks: \"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.\"\n  example:\n  - \"The following example shows how you can create a record sequence with this method.  \\n  \\n [!code-csharp[IRecordSequence#3](~/samples/snippets/csharp/VS_Snippets_CFX/irecordsequence/cs/readrecord.cs#3)] \\n [!code-vb[IRecordSequence#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/irecordsequence/vb/readrecord.vb#3)]\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.FileRecordSequence.Append*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One or more of the arguments are out of range.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request could not be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  commentId: M:System.IO.Log.FileRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  id: Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  nameWithType: FileRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  fullName: FileRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>, using space previously reserved in the sequence. This method cannot be inherited.\n  remarks: \"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber Append (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservations\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.FileRecordSequence.Append*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One or more of the arguments are out of range.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>reservations</code> was not created by this record sequence..\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request could not be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  commentId: M:System.IO.Log.FileRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  id: Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  nameWithType: FileRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  fullName: FileRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a log record to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>, using space previously reserved in the sequence. This method cannot be inherited.\n  remarks: \"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber Append (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservations\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.FileRecordSequence.Append*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One or more of the arguments are out of range.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>reservations</code> was not created by this record sequence..\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request could not be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.BaseSequenceNumber\n  commentId: P:System.IO.Log.FileRecordSequence.BaseSequenceNumber\n  id: BaseSequenceNumber\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: BaseSequenceNumber\n  nameWithType: FileRecordSequence.BaseSequenceNumber\n  fullName: FileRecordSequence.BaseSequenceNumber\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets the sequence number of the first valid record in the current <xref href=\"System.IO.Log.FileRecordSequence\"></xref>.\n  remarks: \"Valid sequence numbers are greater than or equal to <xref:System.IO.Log.FileRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.FileRecordSequence.LastSequenceNumber%2A>. All other sequence numbers are invalid.  \\n  \\n The value of this property can be changed by calling the <xref:System.IO.Log.FileRecordSequence.WriteRestartArea%2A> or <xref:System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber%2A> method.\"\n  example:\n  - \"The following example shows using <xref:System.IO.Log.FileRecordSequence.BaseSequenceNumber%2A> in a loop:  \\n  \\n [!code-csharp[IRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/irecordsequence/cs/readrecord.cs#2)]\\n [!code-vb[IRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/irecordsequence/vb/readrecord.vb#2)]\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber BaseSequenceNumber { get; }\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The lowest sequence number that corresponds to a valid record in the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>.\n  overload: System.IO.Log.FileRecordSequence.BaseSequenceNumber*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The property was accessed after the sequence has been disposed of.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.FileRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  id: BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous append operation using space previously reserved in the sequence. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public IAsyncResult BeginAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservations\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the append is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous append request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.\n  overload: System.IO.Log.FileRecordSequence.BeginAppend*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One or more of the arguments are out of range.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>reservations</code> was not created by this record sequence.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.FileRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  id: BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous append operation using space previously reserved in the sequence. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The appended record will consume space that has been previously reserved, using a reservation specified by the `reservations` parameter. If the append succeeds, it will consume the smallest reservation area that can hold the data, and that reservation area will be removed from the collection.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public IAsyncResult BeginAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservations, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservations\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this record.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the append is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous append request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.\n  overload: System.IO.Log.FileRecordSequence.BeginAppend*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One or more of the arguments are out of range.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>reservations</code> was not created by this record sequence.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.FileRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  id: BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous append operation. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public IAsyncResult BeginAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the append is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous append request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.\n  overload: System.IO.Log.FileRecordSequence.BeginAppend*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One or more of the arguments are out of range.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.FileRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  id: BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous append operation. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n Normally, this method completes before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public IAsyncResult BeginAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the append is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous append request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous append, which could still be pending.\n  overload: System.IO.Log.FileRecordSequence.BeginAppend*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One or more of the arguments are out of range.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.FileRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)\n  id: BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: BeginFlush(SequenceNumber, AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginFlush(SequenceNumber, AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginFlush(SequenceNumber, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous flush operation, using space previously reserved in the sequence. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by the current method to the <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> method to ensure that the flush completes and resources are freed appropriately. If an error occurs during an asynchronous flush, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.FileRecordSequence> are durably written.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous flush request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> method is called.\"\n  syntax:\n    content: public IAsyncResult BeginFlush (System.IO.Log.SequenceNumber sequenceNumber, AsyncCallback callback, object state);\n    parameters:\n    - id: sequenceNumber\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the latest record that must be written. If <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the flush is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous flush request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous flush operation, which could still be pending.\n  overload: System.IO.Log.FileRecordSequence.BeginFlush*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"One or more of the arguments is invalid.  \\n  \\n <code>sequenceNumber</code> is not valid for this sequence.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>sequenceNumber</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while flushing the data.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.FileRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  id: BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: BeginReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous reserve and append operation. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \\n  \\n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.\"\n  syntax:\n    content: public IAsyncResult BeginReserveAndAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservationCollection\n      type: System.IO.Log.ReservationCollection\n      description: The reservation collection to make reservations in.\n    - id: reservations\n      type: System.Int64[]\n      description: The reservations to make, in bytes.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the append is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous append request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents this asynchronous operation, which could still be pending.\n  overload: System.IO.Log.FileRecordSequence.BeginReserveAndAppend*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One or more of the arguments are out of range.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>reservations</code> was not created by this record sequence.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request could not be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.FileRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  id: BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: BeginReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous reserve and append operation. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method, to ensure that the append operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous append, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \\n  \\n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.\"\n  syntax:\n    content: public IAsyncResult BeginReserveAndAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservationCollection\n      type: System.IO.Log.ReservationCollection\n      description: The reservation collection to make reservations in.\n    - id: reservations\n      type: System.Int64[]\n      description: The reservations to make, in bytes.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the append is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous append request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents this asynchronous operation, which could still be pending.\n  overload: System.IO.Log.FileRecordSequence.BeginReserveAndAppend*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One or more of the arguments are out of range.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>reservations</code> was not created by this record sequence.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request could not be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.FileRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  id: BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: BeginWriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method, to assure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \\n  \\n If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called.\"\n  syntax:\n    content: public IAsyncResult BeginWriteRestartArea (ArraySegment<byte> data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: newBaseSeqNum\n      type: System.IO.Log.SequenceNumber\n      description: The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.\n    - id: reservation\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the restart area write is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous restart area write operation, which could still be pending.\n  overload: System.IO.Log.FileRecordSequence.BeginWriteRestartArea*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.  \\n  \\n -or-  \\n  \\n A new or existing archive tail or base of the active log is invalid.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>reservations</code> was not created by this record sequence.  \\n  \\n -or-  \\n  \\n <code>newBaseSeqNum</code> is not valid for this sequence.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  commentId: M:System.IO.Log.FileRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  id: BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: BeginWriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Begins an asynchronous restart area write operation, using space previously reserved in the sequence. This method cannot be inherited.\n  remarks: \"You should pass the <xref:System.IAsyncResult> returned by this method to the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method, to assure that the restart area write operation has completed and resources can be freed appropriately. If an error has occurred during an asynchronous restart area write operation, an exception is not thrown until the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called with the <xref:System.IAsyncResult> returned by this method.  \\n  \\n Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n When the operation successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \\n  \\n If a <xref:System.IO.Log.ReservationCollection> is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can hold the data, and that reservation will be removed from the collection.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> method is called.\"\n  syntax:\n    content: public IAsyncResult BeginWriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservation, AsyncCallback callback, object state);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: newBaseSeqNum\n      type: System.IO.Log.SequenceNumber\n      description: The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.\n    - id: reservation\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.\n    - id: callback\n      type: System.AsyncCallback\n      description: An optional asynchronous callback, to be called when the restart area write is complete.\n    - id: state\n      type: System.Object\n      description: A user-provided object that distinguishes this particular asynchronous restart area write request from other requests.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> that represents the asynchronous restart area write operation, which could still be pending.\n  overload: System.IO.Log.FileRecordSequence.BeginWriteRestartArea*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.  \\n  \\n -or-  \\n  \\n A new or existing archive tail or base of the active log is invalid.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>reservations</code> was not created by this record sequence.  \\n  \\n -or-  \\n  \\n <code>newBaseSeqNum</code> is not valid for this sequence.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.CreateReservationCollection\n  commentId: M:System.IO.Log.FileRecordSequence.CreateReservationCollection\n  id: CreateReservationCollection\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: CreateReservationCollection()\n  nameWithType: FileRecordSequence.CreateReservationCollection()\n  fullName: FileRecordSequence.CreateReservationCollection()\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Creates a new <xref href=\"System.IO.Log.ReservationCollection\"></xref>. This method cannot be inherited.\n  syntax:\n    content: public System.IO.Log.ReservationCollection CreateReservationCollection ();\n    parameters: []\n    return:\n      type: System.IO.Log.ReservationCollection\n      description: The newly created <xref href=\"System.IO.Log.ReservationCollection\"></xref>.\n  overload: System.IO.Log.FileRecordSequence.CreateReservationCollection*\n  exceptions:\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.Dispose\n  commentId: M:System.IO.Log.FileRecordSequence.Dispose\n  id: Dispose\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: FileRecordSequence.Dispose()\n  fullName: FileRecordSequence.Dispose()\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Immediately releases the unmanaged resources used by an object.\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.IO.Log.FileRecordSequence.Dispose*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while flushing the data.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.EndAppend(System.IAsyncResult)\n  commentId: M:System.IO.Log.FileRecordSequence.EndAppend(System.IAsyncResult)\n  id: EndAppend(System.IAsyncResult)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: EndAppend(IAsyncResult)\n  nameWithType: FileRecordSequence.EndAppend(IAsyncResult)\n  fullName: FileRecordSequence.EndAppend(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Ends an asynchronous append operation. This method cannot be inherited.\n  remarks: \"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndAppend%2A> is called.  \\n  \\n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginAppend%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber EndAppend (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: A reference to the outstanding asynchronous I/O request.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.FileRecordSequence.EndAppend*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>result</code> is invalid.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: '`End` has already been called for this asynchronous operation.'\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.EndFlush(System.IAsyncResult)\n  commentId: M:System.IO.Log.FileRecordSequence.EndFlush(System.IAsyncResult)\n  id: EndFlush(System.IAsyncResult)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: EndFlush(IAsyncResult)\n  nameWithType: FileRecordSequence.EndFlush(IAsyncResult)\n  fullName: FileRecordSequence.EndFlush(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Ends an asynchronous flush operation. This method cannot be inherited.\n  remarks: \"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous flush request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndFlush%2A> is called.  \\n  \\n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginFlush%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber EndFlush (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: A reference to the outstanding asynchronous I/O request.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the last record written.\n  overload: System.IO.Log.FileRecordSequence.EndFlush*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>result</code> is invalid.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: '`End` has already been called for this asynchronous operation.'\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.EndReserveAndAppend(System.IAsyncResult)\n  commentId: M:System.IO.Log.FileRecordSequence.EndReserveAndAppend(System.IAsyncResult)\n  id: EndReserveAndAppend(System.IAsyncResult)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: EndReserveAndAppend(IAsyncResult)\n  nameWithType: FileRecordSequence.EndReserveAndAppend(IAsyncResult)\n  fullName: FileRecordSequence.EndReserveAndAppend(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Ends an asynchronous reserve and append operation. This method cannot be inherited.\n  remarks: \"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> is called.  \\n  \\n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginReserveAndAppend%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber EndReserveAndAppend (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: A reference to the outstanding asynchronous I/O request.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.FileRecordSequence.EndReserveAndAppend*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>result</code> is invalid.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: '`End` has already been called for this asynchronous operation.'\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.EndWriteRestartArea(System.IAsyncResult)\n  commentId: M:System.IO.Log.FileRecordSequence.EndWriteRestartArea(System.IAsyncResult)\n  id: EndWriteRestartArea(System.IAsyncResult)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: EndWriteRestartArea(IAsyncResult)\n  nameWithType: FileRecordSequence.EndWriteRestartArea(IAsyncResult)\n  fullName: FileRecordSequence.EndWriteRestartArea(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Ends an asynchronous restart area write operation. This method cannot be inherited.\n  remarks: \"This method blocks until the I/O operation has completed. Errors that occur during an asynchronous write request, such as a disk failure during the I/O request, become visible when <xref:System.IO.Log.FileRecordSequence.EndWriteRestartArea%2A> is called.  \\n  \\n This method must be called exactly once on every <xref:System.IAsyncResult> returned by the <xref:System.IO.Log.FileRecordSequence.BeginWriteRestartArea%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber EndWriteRestartArea (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: A reference to the outstanding asynchronous I/O request.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the written log record.\n  overload: System.IO.Log.FileRecordSequence.EndWriteRestartArea*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>result</code> is invalid.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: '`End` has already been called for this asynchronous operation.'\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.Flush\n  commentId: M:System.IO.Log.FileRecordSequence.Flush\n  id: Flush\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: FileRecordSequence.Flush()\n  fullName: FileRecordSequence.Flush()\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Ensures that all appended records have been written. This method cannot be inherited.\n  remarks: Calling this method ensures that all records that have been appended to the <xref:System.IO.Log.FileRecordSequence> have been durably written.\n  syntax:\n    content: public System.IO.Log.SequenceNumber Flush ();\n    parameters: []\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the last record written.\n  overload: System.IO.Log.FileRecordSequence.Flush*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while flushing the data.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.Flush(System.IO.Log.SequenceNumber)\n  commentId: M:System.IO.Log.FileRecordSequence.Flush(System.IO.Log.SequenceNumber)\n  id: Flush(System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: Flush(SequenceNumber)\n  nameWithType: FileRecordSequence.Flush(SequenceNumber)\n  fullName: FileRecordSequence.Flush(SequenceNumber)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Ensures that all appended records have been written. This method cannot be inherited.\n  remarks: Calling this method ensures that all records with sequence numbers up to and including the specified sequence number have been durably written.\n  syntax:\n    content: public System.IO.Log.SequenceNumber Flush (System.IO.Log.SequenceNumber sequenceNumber);\n    parameters:\n    - id: sequenceNumber\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the latest record that must be written. If this <xref href=\"System.IO.Log.SequenceNumber\"></xref> is invalid, then all records must be written.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the last record written.\n  overload: System.IO.Log.FileRecordSequence.Flush*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>sequenceNumber</code> is not between the base and last sequence numbers of this sequence.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>sequenceNumber</code> is not valid for this sequence.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurred while flushing the data.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.LastSequenceNumber\n  commentId: P:System.IO.Log.FileRecordSequence.LastSequenceNumber\n  id: LastSequenceNumber\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: LastSequenceNumber\n  nameWithType: FileRecordSequence.LastSequenceNumber\n  fullName: FileRecordSequence.LastSequenceNumber\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets the sequence number which is greater than the last record appended.\n  remarks: This property contains a sequence number that is guaranteed to be larger than the sequence number of the last appended record. Valid sequence numbers are greater than or equal to <xref:System.IO.Log.FileRecordSequence.BaseSequenceNumber%2A> and less than <xref:System.IO.Log.FileRecordSequence.LastSequenceNumber%2A>. All other sequence numbers are invalid.\n  syntax:\n    content: public System.IO.Log.SequenceNumber LastSequenceNumber { get; }\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: A sequence number which is greater than the last record appended.\n  overload: System.IO.Log.FileRecordSequence.LastSequenceNumber*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The property was accessed after the sequence has been disposed of.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.MaximumRecordLength\n  commentId: P:System.IO.Log.FileRecordSequence.MaximumRecordLength\n  id: MaximumRecordLength\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: MaximumRecordLength\n  nameWithType: FileRecordSequence.MaximumRecordLength\n  fullName: FileRecordSequence.MaximumRecordLength\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets the size of the largest record that can be appended to or read from this sequence, in bytes.\n  syntax:\n    content: public long MaximumRecordLength { get; }\n    return:\n      type: System.Int64\n      description: The size of the largest record that can be appended to or read from this sequence, in bytes.\n  overload: System.IO.Log.FileRecordSequence.MaximumRecordLength*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The property was accessed after the sequence has been disposed of.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)\n  commentId: M:System.IO.Log.FileRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)\n  id: ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: ReadLogRecords(SequenceNumber, LogRecordEnumeratorType)\n  nameWithType: FileRecordSequence.ReadLogRecords(SequenceNumber, LogRecordEnumeratorType)\n  fullName: FileRecordSequence.ReadLogRecords(SequenceNumber, LogRecordEnumeratorType)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Returns an enumerable collection of records in the sequence. This method cannot be inherited.\n  remarks: This method returns an enumerable collection of records in the sequence. The order of the enumerated records depends on the value of the `logRecordEnum` parameter.\n  example:\n  - \"The following example shows how you can use this method to read the records in a log sequence.  \\n  \\n [!code-csharp[IRecordSequence#2](~/samples/snippets/csharp/VS_Snippets_CFX/irecordsequence/cs/readrecord.cs#2)]\\n [!code-vb[IRecordSequence#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/irecordsequence/vb/readrecord.vb#2)]\"\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.Log.LogRecord> ReadLogRecords (System.IO.Log.SequenceNumber start, System.IO.Log.LogRecordEnumeratorType logRecordEnum);\n    parameters:\n    - id: start\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the first record where the reading starts.\n    - id: logRecordEnum\n      type: System.IO.Log.LogRecordEnumeratorType\n      description: A valid <xref href=\"System.IO.Log.LogRecordEnumeratorType\"></xref> value that specifies the manner (that is, forward or backward) in which records should be read from a <xref href=\"System.IO.Log.LogRecordSequence\"></xref>.\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.Log.LogRecord}\n      description: An enumerable collection of records in the sequence.\n  overload: System.IO.Log.FileRecordSequence.ReadLogRecords*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One or more of the arguments are out of range.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with write-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The record sequence is corrupted.  \\n  \\n -or-  \\n  \\n The record was written with an incompatible version of the record sequence.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The enumeration has ended.  \\n  \\n -or-  \\n  \\n The enumeration has not been started. A call to <xref href=\\\"System.Collections.IEnumerator.MoveNext\\\"></xref> must be made.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.ReadRestartAreas\n  commentId: M:System.IO.Log.FileRecordSequence.ReadRestartAreas\n  id: ReadRestartAreas\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: ReadRestartAreas()\n  nameWithType: FileRecordSequence.ReadRestartAreas()\n  fullName: FileRecordSequence.ReadRestartAreas()\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Returns an enumerable collection of the restart areas in the sequence. This method cannot be inherited.\n  remarks: The restart areas are enumerated in reverse sequence number order, that is, from the highest sequence number to the lowest sequence number. Only restart areas with sequence numbers between the last sequence number and the base sequence number are enumerated.\n  syntax:\n    content: public System.Collections.Generic.IEnumerable<System.IO.Log.LogRecord> ReadRestartAreas ();\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.IO.Log.LogRecord}\n      description: An enumerable collection of the restart areas in the sequence.\n  overload: System.IO.Log.FileRecordSequence.ReadRestartAreas*\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with write-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"The record sequence is corrupted.  \\n  \\n -or-  \\n  \\n The record was written with an incompatible version of the record sequence.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The enumeration has ended.  \\n  \\n -or-  \\n  \\n The enumeration has not been started. A call to <xref href=\\\"System.Collections.IEnumerator.MoveNext\\\"></xref> must be made.\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  commentId: M:System.IO.Log.FileRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  id: ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: ReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  nameWithType: FileRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  fullName: FileRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.\n  remarks: \"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \\n  \\n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber ReserveAndAppend (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservationCollection\n      type: System.IO.Log.ReservationCollection\n      description: The reservation collection to make reservations in.\n    - id: reservations\n      type: System.Int64[]\n      description: The reservations to make, in bytes.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.FileRecordSequence.ReserveAndAppend*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One or more of the arguments are out of range.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>reservations</code> was not created by this record sequence..\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request could not be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  commentId: M:System.IO.Log.FileRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  id: ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: ReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  nameWithType: FileRecordSequence.ReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  fullName: FileRecordSequence.ReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Automatically makes a single reservation and appends a record to the sequence. This method cannot be inherited.\n  remarks: \"Data contained in the `data` parameter will be concatenated into a single byte array for appending as the record. However, no provision is made for splitting data back into array segments when the record is read.  \\n  \\n The specified reservations are added to the provided reservation collection in an atomic operation with a record append operation. If the append fails, no space is reserved.  \\n  \\n Normally, this method may complete before the record has been written. To ensure that a record has been written, either specify the <xref:System.IO.Log.RecordAppendOptions.ForceFlush> flag using the `recordAppendOptions` parameter, or call the <xref:System.IO.Log.FileRecordSequence.Flush%2A> method.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber ReserveAndAppend (ArraySegment<byte> data, System.IO.Log.SequenceNumber nextUndoRecord, System.IO.Log.SequenceNumber previousRecord, System.IO.Log.RecordAppendOptions recordAppendOptions, System.IO.Log.ReservationCollection reservationCollection, long[] reservations);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: nextUndoRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in the user-specified order.\n    - id: previousRecord\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the next record in Previous order.\n    - id: recordAppendOptions\n      type: System.IO.Log.RecordAppendOptions\n      description: A valid value of <xref href=\"System.IO.Log.RecordAppendOptions\"></xref> that specifies how the data should be written.\n    - id: reservationCollection\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the collection to make reservations in.\n    - id: reservations\n      type: System.Int64[]\n      description: The reservations to make, in bytes.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the appended log record.\n  overload: System.IO.Log.FileRecordSequence.ReserveAndAppend*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One or more of the arguments are out of range.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>reservations</code> was not created by this record sequence..\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request could not be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.ReservedBytes\n  commentId: P:System.IO.Log.FileRecordSequence.ReservedBytes\n  id: ReservedBytes\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: ReservedBytes\n  nameWithType: FileRecordSequence.ReservedBytes\n  fullName: FileRecordSequence.ReservedBytes\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets the total number of bytes that have been reserved.\n  syntax:\n    content: public long ReservedBytes { get; }\n    return:\n      type: System.Int64\n      description: The total size of all reservations made in this record sequence.\n  overload: System.IO.Log.FileRecordSequence.ReservedBytes*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The property was accessed after the sequence has been disposed of.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.RestartSequenceNumber\n  commentId: P:System.IO.Log.FileRecordSequence.RestartSequenceNumber\n  id: RestartSequenceNumber\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: RestartSequenceNumber\n  nameWithType: FileRecordSequence.RestartSequenceNumber\n  fullName: FileRecordSequence.RestartSequenceNumber\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets the sequence number of the most recently written restart area.\n  remarks: A restart area is used to temporarily store information containing a client's last checkpoint operation. The Common Log File System (CLFS) maintains two restart areas to guarantee that at least one valid area is always available. When a recovery is necessary, the CLFS reads its restart area and all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.\n  syntax:\n    content: public System.IO.Log.SequenceNumber RestartSequenceNumber { get; }\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the most recently written restart area.\n  overload: System.IO.Log.FileRecordSequence.RestartSequenceNumber*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The property was accessed after the sequence has been disposed of.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.RetryAppend\n  commentId: P:System.IO.Log.FileRecordSequence.RetryAppend\n  id: RetryAppend\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: RetryAppend\n  nameWithType: FileRecordSequence.RetryAppend\n  fullName: FileRecordSequence.RetryAppend\n  type: Property\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Gets or sets a value indicating whether or not appends are automatically retried if the log is full.\n  remarks: If the value of this property is `true`, and an <xref:System.IO.Log.FileRecordSequence.Append%2A> call fails because there is not enough space in the sequence, the record sequence will try to free space and retry the append.\n  syntax:\n    content: public bool RetryAppend { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if appends are automatically retried if the log is full; otherwise, `false`. The default is `true`.'\n  overload: System.IO.Log.FileRecordSequence.RetryAppend*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The property was accessed after the sequence has been disposed of.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.TailPinned\n  commentId: E:System.IO.Log.FileRecordSequence.TailPinned\n  id: TailPinned\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: TailPinned\n  nameWithType: FileRecordSequence.TailPinned\n  fullName: FileRecordSequence.TailPinned\n  type: Event\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Occurs when the record sequence determines that the tail must be moved forward. This method cannot be inherited.\n  remarks: You can fire this event when the record sequence has run out of space. When this event is fired, the tail of the sequence (that is, the base sequence number) is moved forward to free up space.\n  syntax:\n    content: public event EventHandler<System.IO.Log.TailPinnedEventArgs> TailPinned;\n    return:\n      type: System.EventHandler{System.IO.Log.TailPinnedEventArgs}\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  commentId: M:System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  id: WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: WriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection)\n  nameWithType: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection)\n  fullName: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.\n  remarks: \"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \\n  \\n A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.  \\n  \\n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \\n  \\n If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.  \\n  \\n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment<byte> data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservations);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: newBaseSeqNum\n      type: System.IO.Log.SequenceNumber\n      description: The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.\n    - id: reservations\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the written restart area.\n  overload: System.IO.Log.FileRecordSequence.WriteRestartArea*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.  \\n  \\n -or-  \\n  \\n A new or existing archive tail or base of the active log is invalid.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>reservations</code> was not created by this record sequence.  \\n  \\n -or-  \\n  \\n <code>newBaseSeqNum</code> is not valid for this sequence.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})\n  commentId: M:System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})\n  id: WriteRestartArea(System.ArraySegment{System.Byte})\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: WriteRestartArea(ArraySegment<Byte>)\n  nameWithType: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>)\n  fullName: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.\n  remarks: \"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \\n  \\n A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.  \\n  \\n The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment<byte> data);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the written restart area.\n  overload: System.IO.Log.FileRecordSequence.WriteRestartArea*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})\n  commentId: M:System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})\n  id: WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: WriteRestartArea(IList<ArraySegment<Byte>>)\n  nameWithType: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)\n  fullName: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.\n  remarks: \"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \\n  \\n A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.  \\n  \\n The data in the byte array segments will be concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the written restart area.\n  overload: System.IO.Log.FileRecordSequence.WriteRestartArea*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)\n  commentId: M:System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)\n  id: WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: WriteRestartArea(ArraySegment<Byte>, SequenceNumber)\n  nameWithType: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber)\n  fullName: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.\n  remarks: \"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \\n  \\n A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.  \\n  \\n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \\n  \\n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber WriteRestartArea (ArraySegment<byte> data, System.IO.Log.SequenceNumber newBaseSeqNum);\n    parameters:\n    - id: data\n      type: System.ArraySegment{System.Byte}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: newBaseSeqNum\n      type: System.IO.Log.SequenceNumber\n      description: The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the written restart area.\n  overload: System.IO.Log.FileRecordSequence.WriteRestartArea*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.  \\n  \\n -or-  \\n  \\n A new or existing archive tail or base of the active log is invalid.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>newBaseSeqNum</code> is not valid for this sequence.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)\n  commentId: M:System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)\n  id: WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber)\n  nameWithType: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber)\n  fullName: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.\n  remarks: \"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \\n  \\n A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.  \\n  \\n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \\n  \\n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber newBaseSeqNum);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: newBaseSeqNum\n      type: System.IO.Log.SequenceNumber\n      description: The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the written restart area.\n  overload: System.IO.Log.FileRecordSequence.WriteRestartArea*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.  \\n  \\n -or-  \\n  \\n A new or existing archive tail or base of the active log is invalid.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>newBaseSeqNum</code> is not valid for this sequence.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  commentId: M:System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  id: WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.FileRecordSequence\n  langs:\n  - csharp\n  name: WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection)\n  nameWithType: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection)\n  fullName: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection)\n  type: Method\n  assemblies:\n  - System.IO.Log\n  namespace: System.IO.Log\n  summary: Writes a restart area to the <xref href=\"System.IO.Log.FileRecordSequence\"></xref>. This method cannot be inherited.\n  remarks: \"A restart area can be used to temporarily store information containing a client's last checkpoint operation. When a recovery is necessary, you can read a restart area and retrieve all the data from the last checkpoint operation. This data initializes the transaction table, dirty pages table, and open file table so they can be used in the recovery process.  \\n  \\n A restart area can be read using the <xref:System.IO.Log.FileRecordSequence.ReadRestartAreas%2A> method.  \\n  \\n When a restart area is written, the data in the byte array segments are concatenated into a single byte array for appending as the record. No provision is made for splitting data back into array segments when the restart area is read.  \\n  \\n If a reservation is specified, the written restart area will consume space that has been previously reserved, using a reservation contained in the collection. If the method succeeds, it will consume the smallest reservation that can contain the data, and that reservation will be removed from the collection.  \\n  \\n When this method successfully completes, the base sequence number has been updated. All log records with sequence numbers less than the new base sequence number are inaccessible.  \\n  \\n If a record sequence has been disposed of, or if you pass an invalid argument, exceptions are thrown immediately within this operation. Errors that occurred during an asynchronous append request, for example, a disk failure during the I/O request, will result in exceptions being thrown when the <xref:System.IO.Log.FileRecordSequence.EndReserveAndAppend%2A> method is called.\"\n  syntax:\n    content: public System.IO.Log.SequenceNumber WriteRestartArea (System.Collections.Generic.IList<ArraySegment<byte>> data, System.IO.Log.SequenceNumber newBaseSeqNum, System.IO.Log.ReservationCollection reservations);\n    parameters:\n    - id: data\n      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n      description: A list of byte array segments that will be concatenated and appended as the record.\n    - id: newBaseSeqNum\n      type: System.IO.Log.SequenceNumber\n      description: The new base sequence number. The specified sequence number must be greater than or equal to the current base sequence number.\n    - id: reservations\n      type: System.IO.Log.ReservationCollection\n      description: A <xref href=\"System.IO.Log.ReservationCollection\"></xref> that contains the reservation that should be used for this restart area.\n    return:\n      type: System.IO.Log.SequenceNumber\n      description: The sequence number of the written restart area.\n  overload: System.IO.Log.FileRecordSequence.WriteRestartArea*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: One or more of the arguments are `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>newBaseSeqNum</code> is not between the base and last sequence numbers of this sequence.  \\n  \\n -or-  \\n  \\n A new or existing archive tail or base of the active log is invalid.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>reservations</code> was not created by this record sequence.  \\n  \\n -or-  \\n  \\n <code>newBaseSeqNum</code> is not valid for this sequence.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The operation cannot be performed because the record sequence was opened with read-only access.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The request cannot be performed because of an unexpected I/O exception.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The method was called after the sequence has been disposed of.\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: There is not enough memory to continue the execution of the program.\n  - type: System.IO.Log.SequenceFullException\n    commentId: T:System.IO.Log.SequenceFullException\n    description: The record sequence is full.\n  - type: System.IO.Log.ReservationNotFoundException\n    commentId: T:System.IO.Log.ReservationNotFoundException\n    description: No reservation large enough to fit <code>data</code> can be found in <code>reservations</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.IO.FileNotFoundException\n  parent: System.IO\n  isExternal: false\n  name: FileNotFoundException\n  nameWithType: FileNotFoundException\n  fullName: System.IO.FileNotFoundException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  nameWithType: IOException\n  fullName: System.IO.IOException\n- uid: System.OutOfMemoryException\n  parent: System\n  isExternal: false\n  name: OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.IO.Log.SequenceFullException\n  parent: System.IO.Log\n  isExternal: false\n  name: SequenceFullException\n  nameWithType: SequenceFullException\n  fullName: System.IO.Log.SequenceFullException\n- uid: System.IO.Log.ReservationNotFoundException\n  parent: System.IO.Log\n  isExternal: false\n  name: ReservationNotFoundException\n  nameWithType: ReservationNotFoundException\n  fullName: System.IO.Log.ReservationNotFoundException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.IO.Log.FileRecordSequence.#ctor(System.String)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: FileRecordSequence(String)\n  nameWithType: FileRecordSequence.FileRecordSequence(String)\n  fullName: FileRecordSequence.FileRecordSequence(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IO.Log.FileRecordSequence.#ctor(System.String,System.IO.FileAccess)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: FileRecordSequence(String, FileAccess)\n  nameWithType: FileRecordSequence.FileRecordSequence(String, FileAccess)\n  fullName: FileRecordSequence.FileRecordSequence(String, FileAccess)\n- uid: System.IO.FileAccess\n  parent: System.IO\n  isExternal: false\n  name: FileAccess\n  nameWithType: FileAccess\n  fullName: System.IO.FileAccess\n- uid: System.IO.Log.FileRecordSequence.#ctor(System.String,System.IO.FileAccess,System.Int32)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: FileRecordSequence(String, FileAccess, Int32)\n  nameWithType: FileRecordSequence.FileRecordSequence(String, FileAccess, Int32)\n  fullName: FileRecordSequence.FileRecordSequence(String, FileAccess, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber(System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: AdvanceBaseSequenceNumber(SequenceNumber)\n  nameWithType: FileRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)\n  fullName: FileRecordSequence.AdvanceBaseSequenceNumber(SequenceNumber)\n- uid: System.IO.Log.SequenceNumber\n  parent: System.IO.Log\n  isExternal: false\n  name: SequenceNumber\n  nameWithType: SequenceNumber\n  fullName: System.IO.Log.SequenceNumber\n- uid: System.IO.Log.FileRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  nameWithType: FileRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  fullName: FileRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n- uid: System.ArraySegment`1\n  name: ArraySegment<T>\n  nameWithType: ArraySegment<T>\n  fullName: System.ArraySegment<T>\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.ArraySegment{System.Byte}\n  parent: System\n  isExternal: false\n  name: ArraySegment<Byte>\n  nameWithType: ArraySegment<Byte>\n  fullName: System.ArraySegment<System.Byte>\n  spec.csharp:\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    nameWithType: ArraySegment\n    fullName: System.ArraySegment\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.Log.RecordAppendOptions\n  parent: System.IO.Log\n  isExternal: false\n  name: RecordAppendOptions\n  nameWithType: RecordAppendOptions\n  fullName: System.IO.Log.RecordAppendOptions\n- uid: System.IO.Log.FileRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  nameWithType: FileRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n  fullName: FileRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions)\n- uid: System.Collections.Generic.IList`1\n  name: IList<T>\n  nameWithType: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n- uid: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IList<ArraySegment<Byte>>\n  nameWithType: IList<ArraySegment<Byte>>\n  fullName: System.Collections.Generic.IList<System.ArraySegment<System.Byte>>\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    nameWithType: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ArraySegment`1\n    name: ArraySegment\n    nameWithType: ArraySegment\n    fullName: System.ArraySegment\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.Log.FileRecordSequence.Append(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  nameWithType: FileRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  fullName: FileRecordSequence.Append(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n- uid: System.IO.Log.ReservationCollection\n  parent: System.IO.Log\n  isExternal: false\n  name: ReservationCollection\n  nameWithType: ReservationCollection\n  fullName: System.IO.Log.ReservationCollection\n- uid: System.IO.Log.FileRecordSequence.Append(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  nameWithType: FileRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n  fullName: FileRecordSequence.Append(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection)\n- uid: System.IO.Log.FileRecordSequence.BaseSequenceNumber\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: BaseSequenceNumber\n  nameWithType: FileRecordSequence.BaseSequenceNumber\n  fullName: FileRecordSequence.BaseSequenceNumber\n- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: false\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, AsyncCallback, Object)\n- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n- uid: System.IO.Log.FileRecordSequence.BeginAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, AsyncCallback, Object)\n- uid: System.IO.Log.FileRecordSequence.BeginFlush(System.IO.Log.SequenceNumber,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: BeginFlush(SequenceNumber, AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginFlush(SequenceNumber, AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginFlush(SequenceNumber, AsyncCallback, Object)\n- uid: System.IO.Log.FileRecordSequence.BeginReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: BeginReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n- uid: System.Int64\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.Int64[]\n  parent: System\n  isExternal: false\n  name: Int64[]\n  nameWithType: Int64[]\n  fullName: System.Int64[]\n  spec.csharp:\n  - uid: System.Int64\n    name: Int64\n    nameWithType: Int64\n    fullName: System.Int64\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.Log.FileRecordSequence.BeginReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[],System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: BeginReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[], AsyncCallback, Object)\n- uid: System.IO.Log.FileRecordSequence.BeginWriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: BeginWriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginWriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n- uid: System.IO.Log.FileRecordSequence.BeginWriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection,System.AsyncCallback,System.Object)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: BeginWriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  nameWithType: FileRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n  fullName: FileRecordSequence.BeginWriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection, AsyncCallback, Object)\n- uid: System.IO.Log.FileRecordSequence.CreateReservationCollection\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: CreateReservationCollection()\n  nameWithType: FileRecordSequence.CreateReservationCollection()\n  fullName: FileRecordSequence.CreateReservationCollection()\n- uid: System.IO.Log.FileRecordSequence.Dispose\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: Dispose()\n  nameWithType: FileRecordSequence.Dispose()\n  fullName: FileRecordSequence.Dispose()\n- uid: System.IO.Log.FileRecordSequence.EndAppend(System.IAsyncResult)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: EndAppend(IAsyncResult)\n  nameWithType: FileRecordSequence.EndAppend(IAsyncResult)\n  fullName: FileRecordSequence.EndAppend(IAsyncResult)\n- uid: System.IO.Log.FileRecordSequence.EndFlush(System.IAsyncResult)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: EndFlush(IAsyncResult)\n  nameWithType: FileRecordSequence.EndFlush(IAsyncResult)\n  fullName: FileRecordSequence.EndFlush(IAsyncResult)\n- uid: System.IO.Log.FileRecordSequence.EndReserveAndAppend(System.IAsyncResult)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: EndReserveAndAppend(IAsyncResult)\n  nameWithType: FileRecordSequence.EndReserveAndAppend(IAsyncResult)\n  fullName: FileRecordSequence.EndReserveAndAppend(IAsyncResult)\n- uid: System.IO.Log.FileRecordSequence.EndWriteRestartArea(System.IAsyncResult)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: EndWriteRestartArea(IAsyncResult)\n  nameWithType: FileRecordSequence.EndWriteRestartArea(IAsyncResult)\n  fullName: FileRecordSequence.EndWriteRestartArea(IAsyncResult)\n- uid: System.IO.Log.FileRecordSequence.Flush\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: Flush()\n  nameWithType: FileRecordSequence.Flush()\n  fullName: FileRecordSequence.Flush()\n- uid: System.IO.Log.FileRecordSequence.Flush(System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: Flush(SequenceNumber)\n  nameWithType: FileRecordSequence.Flush(SequenceNumber)\n  fullName: FileRecordSequence.Flush(SequenceNumber)\n- uid: System.IO.Log.FileRecordSequence.LastSequenceNumber\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: LastSequenceNumber\n  nameWithType: FileRecordSequence.LastSequenceNumber\n  fullName: FileRecordSequence.LastSequenceNumber\n- uid: System.IO.Log.FileRecordSequence.MaximumRecordLength\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: MaximumRecordLength\n  nameWithType: FileRecordSequence.MaximumRecordLength\n  fullName: FileRecordSequence.MaximumRecordLength\n- uid: System.IO.Log.FileRecordSequence.ReadLogRecords(System.IO.Log.SequenceNumber,System.IO.Log.LogRecordEnumeratorType)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: ReadLogRecords(SequenceNumber, LogRecordEnumeratorType)\n  nameWithType: FileRecordSequence.ReadLogRecords(SequenceNumber, LogRecordEnumeratorType)\n  fullName: FileRecordSequence.ReadLogRecords(SequenceNumber, LogRecordEnumeratorType)\n- uid: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.IO.Log.LogRecord\n  name: LogRecord\n  nameWithType: LogRecord\n  fullName: System.IO.Log.LogRecord\n- uid: System.Collections.Generic.IEnumerable{System.IO.Log.LogRecord}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<LogRecord>\n  nameWithType: IEnumerable<LogRecord>\n  fullName: System.Collections.Generic.IEnumerable<System.IO.Log.LogRecord>\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    nameWithType: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IO.Log.LogRecord\n    name: LogRecord\n    nameWithType: LogRecord\n    fullName: System.IO.Log.LogRecord\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.Log.LogRecordEnumeratorType\n  parent: System.IO.Log\n  isExternal: false\n  name: LogRecordEnumeratorType\n  nameWithType: LogRecordEnumeratorType\n  fullName: System.IO.Log.LogRecordEnumeratorType\n- uid: System.IO.Log.FileRecordSequence.ReadRestartAreas\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: ReadRestartAreas()\n  nameWithType: FileRecordSequence.ReadRestartAreas()\n  fullName: FileRecordSequence.ReadRestartAreas()\n- uid: System.IO.Log.FileRecordSequence.ReserveAndAppend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: ReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  nameWithType: FileRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  fullName: FileRecordSequence.ReserveAndAppend(IList<ArraySegment<Byte>>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n- uid: System.IO.Log.FileRecordSequence.ReserveAndAppend(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.SequenceNumber,System.IO.Log.RecordAppendOptions,System.IO.Log.ReservationCollection,System.Int64[])\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: ReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  nameWithType: FileRecordSequence.ReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n  fullName: FileRecordSequence.ReserveAndAppend(ArraySegment<Byte>, SequenceNumber, SequenceNumber, RecordAppendOptions, ReservationCollection, Int64[])\n- uid: System.IO.Log.FileRecordSequence.ReservedBytes\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: ReservedBytes\n  nameWithType: FileRecordSequence.ReservedBytes\n  fullName: FileRecordSequence.ReservedBytes\n- uid: System.IO.Log.FileRecordSequence.RestartSequenceNumber\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: RestartSequenceNumber\n  nameWithType: FileRecordSequence.RestartSequenceNumber\n  fullName: FileRecordSequence.RestartSequenceNumber\n- uid: System.IO.Log.FileRecordSequence.RetryAppend\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: RetryAppend\n  nameWithType: FileRecordSequence.RetryAppend\n  fullName: FileRecordSequence.RetryAppend\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.Log.FileRecordSequence.TailPinned\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: TailPinned\n  nameWithType: FileRecordSequence.TailPinned\n  fullName: FileRecordSequence.TailPinned\n- uid: System.EventHandler`1\n  name: EventHandler<TEventArgs>\n  nameWithType: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n- uid: System.IO.Log.TailPinnedEventArgs\n  name: TailPinnedEventArgs\n  nameWithType: TailPinnedEventArgs\n  fullName: System.IO.Log.TailPinnedEventArgs\n- uid: System.EventHandler{System.IO.Log.TailPinnedEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<TailPinnedEventArgs>\n  nameWithType: EventHandler<TailPinnedEventArgs>\n  fullName: System.EventHandler<System.IO.Log.TailPinnedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IO.Log.TailPinnedEventArgs\n    name: TailPinnedEventArgs\n    nameWithType: TailPinnedEventArgs\n    fullName: System.IO.Log.TailPinnedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: WriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection)\n  nameWithType: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection)\n  fullName: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber, ReservationCollection)\n- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte})\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: WriteRestartArea(ArraySegment<Byte>)\n  nameWithType: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>)\n  fullName: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>)\n- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: WriteRestartArea(IList<ArraySegment<Byte>>)\n  nameWithType: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)\n  fullName: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>)\n- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.ArraySegment{System.Byte},System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: WriteRestartArea(ArraySegment<Byte>, SequenceNumber)\n  nameWithType: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber)\n  fullName: FileRecordSequence.WriteRestartArea(ArraySegment<Byte>, SequenceNumber)\n- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber)\n  nameWithType: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber)\n  fullName: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber)\n- uid: System.IO.Log.FileRecordSequence.WriteRestartArea(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.IO.Log.SequenceNumber,System.IO.Log.ReservationCollection)\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection)\n  nameWithType: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection)\n  fullName: FileRecordSequence.WriteRestartArea(IList<ArraySegment<Byte>>, SequenceNumber, ReservationCollection)\n- uid: System.IO.Log.FileRecordSequence.Append*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: Append\n  nameWithType: FileRecordSequence.Append\n  fullName: FileRecordSequence.Append\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.WriteRestartArea*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: WriteRestartArea\n  nameWithType: FileRecordSequence.WriteRestartArea\n  fullName: FileRecordSequence.WriteRestartArea\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.#ctor*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: FileRecordSequence\n  nameWithType: FileRecordSequence.FileRecordSequence\n  fullName: FileRecordSequence.FileRecordSequence\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.AdvanceBaseSequenceNumber*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: AdvanceBaseSequenceNumber\n  nameWithType: FileRecordSequence.AdvanceBaseSequenceNumber\n  fullName: FileRecordSequence.AdvanceBaseSequenceNumber\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.BaseSequenceNumber*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: BaseSequenceNumber\n  nameWithType: FileRecordSequence.BaseSequenceNumber\n  fullName: FileRecordSequence.BaseSequenceNumber\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.BeginAppend*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: BeginAppend\n  nameWithType: FileRecordSequence.BeginAppend\n  fullName: FileRecordSequence.BeginAppend\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.BeginFlush*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: BeginFlush\n  nameWithType: FileRecordSequence.BeginFlush\n  fullName: FileRecordSequence.BeginFlush\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.BeginReserveAndAppend*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: BeginReserveAndAppend\n  nameWithType: FileRecordSequence.BeginReserveAndAppend\n  fullName: FileRecordSequence.BeginReserveAndAppend\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.BeginWriteRestartArea*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: BeginWriteRestartArea\n  nameWithType: FileRecordSequence.BeginWriteRestartArea\n  fullName: FileRecordSequence.BeginWriteRestartArea\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.CreateReservationCollection*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: CreateReservationCollection\n  nameWithType: FileRecordSequence.CreateReservationCollection\n  fullName: FileRecordSequence.CreateReservationCollection\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.Dispose*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: Dispose\n  nameWithType: FileRecordSequence.Dispose\n  fullName: FileRecordSequence.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.EndAppend*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: EndAppend\n  nameWithType: FileRecordSequence.EndAppend\n  fullName: FileRecordSequence.EndAppend\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.EndFlush*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: EndFlush\n  nameWithType: FileRecordSequence.EndFlush\n  fullName: FileRecordSequence.EndFlush\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.EndReserveAndAppend*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: EndReserveAndAppend\n  nameWithType: FileRecordSequence.EndReserveAndAppend\n  fullName: FileRecordSequence.EndReserveAndAppend\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.EndWriteRestartArea*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: EndWriteRestartArea\n  nameWithType: FileRecordSequence.EndWriteRestartArea\n  fullName: FileRecordSequence.EndWriteRestartArea\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.Flush*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: Flush\n  nameWithType: FileRecordSequence.Flush\n  fullName: FileRecordSequence.Flush\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.LastSequenceNumber*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: LastSequenceNumber\n  nameWithType: FileRecordSequence.LastSequenceNumber\n  fullName: FileRecordSequence.LastSequenceNumber\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.MaximumRecordLength*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: MaximumRecordLength\n  nameWithType: FileRecordSequence.MaximumRecordLength\n  fullName: FileRecordSequence.MaximumRecordLength\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.ReadLogRecords*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: ReadLogRecords\n  nameWithType: FileRecordSequence.ReadLogRecords\n  fullName: FileRecordSequence.ReadLogRecords\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.ReadRestartAreas*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: ReadRestartAreas\n  nameWithType: FileRecordSequence.ReadRestartAreas\n  fullName: FileRecordSequence.ReadRestartAreas\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.ReserveAndAppend*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: ReserveAndAppend\n  nameWithType: FileRecordSequence.ReserveAndAppend\n  fullName: FileRecordSequence.ReserveAndAppend\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.ReservedBytes*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: ReservedBytes\n  nameWithType: FileRecordSequence.ReservedBytes\n  fullName: FileRecordSequence.ReservedBytes\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.RestartSequenceNumber*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: RestartSequenceNumber\n  nameWithType: FileRecordSequence.RestartSequenceNumber\n  fullName: FileRecordSequence.RestartSequenceNumber\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.IO.Log.FileRecordSequence.RetryAppend*\n  parent: System.IO.Log.FileRecordSequence\n  isExternal: false\n  name: RetryAppend\n  nameWithType: FileRecordSequence.RetryAppend\n  fullName: FileRecordSequence.RetryAppend\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO.Log/FileRecordSequence.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n- uid: System.IO.Log.IRecordSequence\n  parent: System.IO.Log\n  isExternal: false\n  name: IRecordSequence\n  nameWithType: IRecordSequence\n  fullName: System.IO.Log.IRecordSequence\n"}