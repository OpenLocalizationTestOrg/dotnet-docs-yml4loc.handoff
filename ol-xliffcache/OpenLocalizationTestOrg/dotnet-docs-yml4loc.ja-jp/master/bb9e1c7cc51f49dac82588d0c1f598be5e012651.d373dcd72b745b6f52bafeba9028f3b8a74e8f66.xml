{"nodes":[{"content":"Specifies whether a lock can be entered multiple times by the same thread.","nodes":[{"pos":[0,74],"content":"Specifies whether a lock can be entered multiple times by the same thread.","nodes":[{"content":"Specifies whether a lock can be entered multiple times by the same thread.","pos":[0,74]}]}],"pos":[536,611],"yaml":true},{"content":"The default recursion policy depends on the type of lock. For the default policy and the precise behavior of lock recursion for any given lock type, see the documentation for the type. For example, the <xref:System.Threading.ReaderWriterLockSlim> class does not allow a thread to enter the lock in write mode if it already entered the lock in read mode, regardless of the lock policy setting, in order to reduce the chance of deadlocks.  \n  \n Currently only one lock uses this enumeration:  \n  \n-   <xref:System.Threading.ReaderWriterLockSlim>. For more information, see the <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> property.","nodes":[{"pos":[0,436],"content":"The default recursion policy depends on the type of lock. For the default policy and the precise behavior of lock recursion for any given lock type, see the documentation for the type. For example, the <xref:System.Threading.ReaderWriterLockSlim> class does not allow a thread to enter the lock in write mode if it already entered the lock in read mode, regardless of the lock policy setting, in order to reduce the chance of deadlocks.","nodes":[{"content":"The default recursion policy depends on the type of lock. For the default policy and the precise behavior of lock recursion for any given lock type, see the documentation for the type. For example, the <xref:System.Threading.ReaderWriterLockSlim> class does not allow a thread to enter the lock in write mode if it already entered the lock in read mode, regardless of the lock policy setting, in order to reduce the chance of deadlocks.","pos":[0,436],"nodes":[{"content":"The default recursion policy depends on the type of lock.","pos":[0,57]},{"content":"For the default policy and the precise behavior of lock recursion for any given lock type, see the documentation for the type.","pos":[58,184]},{"content":"For example, the <ph id=\"ph1\">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph> class does not allow a thread to enter the lock in write mode if it already entered the lock in read mode, regardless of the lock policy setting, in order to reduce the chance of deadlocks.","pos":[185,436],"source":" For example, the <xref:System.Threading.ReaderWriterLockSlim> class does not allow a thread to enter the lock in write mode if it already entered the lock in read mode, regardless of the lock policy setting, in order to reduce the chance of deadlocks."}]}]},{"pos":[443,489],"content":"Currently only one lock uses this enumeration:","nodes":[{"content":"Currently only one lock uses this enumeration:","pos":[0,46]}]},{"pos":[499,648],"content":"<xref:System.Threading.ReaderWriterLockSlim>. For more information, see the <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> property.","nodes":[{"content":"<xref:System.Threading.ReaderWriterLockSlim>. For more information, see the <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> property.","pos":[0,149],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.ReaderWriterLockSlim&gt;</ph>.","pos":[0,45],"source":"<xref:System.Threading.ReaderWriterLockSlim>."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A&gt;</ph> property.","pos":[46,149],"source":" For more information, see the <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> property."}]}]}],"pos":[622,1277],"yaml":true,"extradata":"MT"},{"content":"If a thread tries to enter a lock recursively, an exception is thrown. Some classes may allow certain recursions when this setting is in effect.","nodes":[{"pos":[0,144],"content":"If a thread tries to enter a lock recursively, an exception is thrown. Some classes may allow certain recursions when this setting is in effect.","nodes":[{"content":"If a thread tries to enter a lock recursively, an exception is thrown. Some classes may allow certain recursions when this setting is in effect.","pos":[0,144],"nodes":[{"content":"If a thread tries to enter a lock recursively, an exception is thrown.","pos":[0,70]},{"content":"Some classes may allow certain recursions when this setting is in effect.","pos":[71,144]}]}]}],"pos":[3988,4133],"yaml":true},{"content":"A thread can enter a lock recursively. Some classes may restrict this capability.","nodes":[{"pos":[0,81],"content":"A thread can enter a lock recursively. Some classes may restrict this capability.","nodes":[{"content":"A thread can enter a lock recursively. Some classes may restrict this capability.","pos":[0,81],"nodes":[{"content":"A thread can enter a lock recursively.","pos":[0,38]},{"content":"Some classes may restrict this capability.","pos":[39,81]}]}]}],"pos":[5683,5765],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.LockRecursionPolicy\n  commentId: T:System.Threading.LockRecursionPolicy\n  id: LockRecursionPolicy\n  children:\n  - System.Threading.LockRecursionPolicy.NoRecursion\n  - System.Threading.LockRecursionPolicy.SupportsRecursion\n  langs:\n  - csharp\n  name: LockRecursionPolicy\n  nameWithType: LockRecursionPolicy\n  fullName: System.Threading.LockRecursionPolicy\n  type: Enum\n  assemblies:\n  - System.Threading\n  - System.Core\n  - netstandard\n  namespace: System.Threading\n  summary: Specifies whether a lock can be entered multiple times by the same thread.\n  remarks: \"The default recursion policy depends on the type of lock. For the default policy and the precise behavior of lock recursion for any given lock type, see the documentation for the type. For example, the <xref:System.Threading.ReaderWriterLockSlim> class does not allow a thread to enter the lock in write mode if it already entered the lock in read mode, regardless of the lock policy setting, in order to reduce the chance of deadlocks.  \\n  \\n Currently only one lock uses this enumeration:  \\n  \\n-   <xref:System.Threading.ReaderWriterLockSlim>. For more information, see the <xref:System.Threading.ReaderWriterLockSlim.RecursionPolicy%2A> property.\"\n  example:\n  - \"The following example shows two exception scenarios, one that depends on the <xref:System.Threading.LockRecursionPolicy> setting and one that does not.  \\n  \\n In the first scenario, the thread enters the lock in read mode and then tries to enter read mode recursively. If the <xref:System.Threading.ReaderWriterLockSlim> is created by using the default constructor, which sets recursion policy to NoRecursion, an exception is thrown. If SupportsRecursion is used to create the <xref:System.Threading.ReaderWriterLockSlim>, no exception is thrown.  \\n  \\n In the second scenario, the thread enters the lock in read mode and then tries to enter the lock in write mode. <xref:System.Threading.LockRecursionException> is thrown regardless of the lock recursion policy.  \\n  \\n [!code-csharp[System.Threading.LockRecursionPolicy#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/cs/example1.cs#1)]\\n [!code-vb[System.Threading.LockRecursionPolicy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.LockRecursionPolicy/vb/source.vb#1)]\"\n  syntax:\n    content: public enum LockRecursionPolicy\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/LockRecursionPolicy.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.LockRecursionPolicy.NoRecursion\n  commentId: F:System.Threading.LockRecursionPolicy.NoRecursion\n  id: NoRecursion\n  parent: System.Threading.LockRecursionPolicy\n  langs:\n  - csharp\n  name: NoRecursion\n  nameWithType: LockRecursionPolicy.NoRecursion\n  fullName: LockRecursionPolicy.NoRecursion\n  type: Field\n  assemblies:\n  - System.Threading\n  - System.Core\n  - netstandard\n  namespace: System.Threading\n  summary: If a thread tries to enter a lock recursively, an exception is thrown. Some classes may allow certain recursions when this setting is in effect.\n  syntax:\n    content: NoRecursion\n    return:\n      type: System.Threading.LockRecursionPolicy\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/LockRecursionPolicy.xml\n- uid: System.Threading.LockRecursionPolicy.SupportsRecursion\n  commentId: F:System.Threading.LockRecursionPolicy.SupportsRecursion\n  id: SupportsRecursion\n  parent: System.Threading.LockRecursionPolicy\n  langs:\n  - csharp\n  name: SupportsRecursion\n  nameWithType: LockRecursionPolicy.SupportsRecursion\n  fullName: LockRecursionPolicy.SupportsRecursion\n  type: Field\n  assemblies:\n  - System.Threading\n  - System.Core\n  - netstandard\n  namespace: System.Threading\n  summary: A thread can enter a lock recursively. Some classes may restrict this capability.\n  syntax:\n    content: SupportsRecursion\n    return:\n      type: System.Threading.LockRecursionPolicy\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/LockRecursionPolicy.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.Threading.LockRecursionPolicy.NoRecursion\n  parent: System.Threading.LockRecursionPolicy\n  isExternal: false\n  name: NoRecursion\n  nameWithType: LockRecursionPolicy.NoRecursion\n  fullName: LockRecursionPolicy.NoRecursion\n- uid: System.Threading.LockRecursionPolicy\n  parent: System.Threading\n  isExternal: false\n  name: LockRecursionPolicy\n  nameWithType: LockRecursionPolicy\n  fullName: System.Threading.LockRecursionPolicy\n- uid: System.Threading.LockRecursionPolicy.SupportsRecursion\n  parent: System.Threading.LockRecursionPolicy\n  isExternal: false\n  name: SupportsRecursion\n  nameWithType: LockRecursionPolicy.SupportsRecursion\n  fullName: LockRecursionPolicy.SupportsRecursion\n"}