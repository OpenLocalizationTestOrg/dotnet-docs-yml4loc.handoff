### YamlMime:ManagedReference
items:
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  id: Assembly
  children:
  - System.Reflection.Assembly.#ctor
  - System.Reflection.Assembly.CodeBase
  - System.Reflection.Assembly.CreateInstance(System.String)
  - System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)
  - System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)
  - System.Reflection.Assembly.CustomAttributes
  - System.Reflection.Assembly.DefinedTypes
  - System.Reflection.Assembly.EntryPoint
  - System.Reflection.Assembly.Equals(System.Object)
  - System.Reflection.Assembly.EscapedCodeBase
  - System.Reflection.Assembly.Evidence
  - System.Reflection.Assembly.ExportedTypes
  - System.Reflection.Assembly.FullName
  - System.Reflection.Assembly.GetAssembly(System.Type)
  - System.Reflection.Assembly.GetCallingAssembly
  - System.Reflection.Assembly.GetCustomAttributes(System.Boolean)
  - System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.Assembly.GetCustomAttributesData
  - System.Reflection.Assembly.GetEntryAssembly
  - System.Reflection.Assembly.GetExecutingAssembly
  - System.Reflection.Assembly.GetExportedTypes
  - System.Reflection.Assembly.GetFile(System.String)
  - System.Reflection.Assembly.GetFiles
  - System.Reflection.Assembly.GetFiles(System.Boolean)
  - System.Reflection.Assembly.GetHashCode
  - System.Reflection.Assembly.GetLoadedModules
  - System.Reflection.Assembly.GetLoadedModules(System.Boolean)
  - System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  - System.Reflection.Assembly.GetManifestResourceNames
  - System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)
  - System.Reflection.Assembly.GetManifestResourceStream(System.String)
  - System.Reflection.Assembly.GetModule(System.String)
  - System.Reflection.Assembly.GetModules
  - System.Reflection.Assembly.GetModules(System.Boolean)
  - System.Reflection.Assembly.GetName
  - System.Reflection.Assembly.GetName(System.Boolean)
  - System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Reflection.Assembly.GetReferencedAssemblies
  - System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)
  - System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)
  - System.Reflection.Assembly.GetType(System.String,System.Boolean)
  - System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  - System.Reflection.Assembly.GetType(System.String)
  - System.Reflection.Assembly.GetTypes
  - System.Reflection.Assembly.GlobalAssemblyCache
  - System.Reflection.Assembly.HostContext
  - System.Reflection.Assembly.ImageRuntimeVersion
  - System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)
  - System.Reflection.Assembly.IsDynamic
  - System.Reflection.Assembly.IsFullyTrusted
  - System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  - System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)
  - System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)
  - System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)
  - System.Reflection.Assembly.Load(System.Byte[])
  - System.Reflection.Assembly.Load(System.Byte[],System.Byte[])
  - System.Reflection.Assembly.Load(System.String)
  - System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)
  - System.Reflection.Assembly.LoadFile(System.String)
  - System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)
  - System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  - System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  - System.Reflection.Assembly.LoadFrom(System.String)
  - System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)
  - System.Reflection.Assembly.LoadModule(System.String,System.Byte[])
  - System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])
  - System.Reflection.Assembly.LoadWithPartialName(System.String)
  - System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)
  - System.Reflection.Assembly.Location
  - System.Reflection.Assembly.ManifestModule
  - System.Reflection.Assembly.ModuleResolve
  - System.Reflection.Assembly.Modules
  - System.Reflection.Assembly.op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)
  - System.Reflection.Assembly.op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)
  - System.Reflection.Assembly.PermissionSet
  - System.Reflection.Assembly.ReflectionOnly
  - System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])
  - System.Reflection.Assembly.ReflectionOnlyLoad(System.String)
  - System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)
  - System.Reflection.Assembly.SecurityRuleSet
  - System.Reflection.Assembly.ToString
  - System.Reflection.Assembly.UnsafeLoadFrom(System.String)
  - System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  - System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  - System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType
  langs:
  - csharp
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
  type: Class
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Represents an assembly, which is a reusable, versionable, and self-describing building block of a common language runtime application.
  remarks: "Use the <xref:System.Reflection.Assembly> class to load assemblies, to explore the metadata and constituent parts of assemblies, to discover the types contained in assemblies, and to create instances of those types.  \n  \n To get an array of <xref:System.Reflection.Assembly> objects representing the assemblies currently loaded into an application domain (for example, the default application domain of a simple project), use the <xref:System.AppDomain.GetAssemblies%2A?displayProperty=fullName> method.  \n  \n To load assemblies dynamically, the <xref:System.Reflection.Assembly> class provides the following static methods (`Shared` methods in Visual Basic). Assemblies are loaded into the application domain where the load operation occurs.  \n  \n-   The recommended way to load assemblies is to use the <xref:System.AppDomain.Load%2A> method, which identifies the assembly to be loaded by its display name (for example, \"System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"). The search for the assembly follows the rules described in [How the Runtime Locates Assemblies](~/docs/framework/deployment/how-the-runtime-locates-assemblies.md).  \n  \n-   The <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods enable you to load an assembly for reflection, but not for execution. For example, an assembly that targets a 64-bit platform can be examined by code that is running on a 32-bit platform.  \n  \n-   The <xref:System.Reflection.Assembly.LoadFile%2A> and <xref:System.Reflection.Assembly.LoadFrom%2A> methods are provided for rare scenarios in which an assembly must be identified by path.  \n  \n To get an <xref:System.Reflection.Assembly> object for the currently executing assembly, use the <xref:System.Reflection.Assembly.GetExecutingAssembly%2A> method.  \n  \n Many members of the <xref:System.Reflection.Assembly> class provide information about an assembly. For example:  \n  \n-   The <xref:System.Reflection.Assembly.GetName%2A> method returns an <xref:System.Reflection.AssemblyName> object that provides access to the parts of the assembly display name.  \n  \n-   The <xref:System.Reflection.Assembly.GetCustomAttributes%2A> method lists the attributes applied to the assembly.  \n  \n-   The <xref:System.Reflection.Assembly.GetFiles%2A> method provides access to the files in the assembly manifest.  \n  \n-   The <xref:System.Reflection.Assembly.GetManifestResourceNames%2A> method provides the names of the resources in the assembly manifest.  \n  \n The <xref:System.Reflection.Assembly.GetTypes%2A> method lists all the types in the assembly. The <xref:System.Reflection.Assembly.GetExportedTypes%2A> method lists the types that are visible to callers outside the assembly. The <xref:System.Reflection.Assembly.GetType%2A> method can be used to search for a particular type in the assembly. The <xref:System.Reflection.Assembly.CreateInstance%2A> method can be used to search for and create instances of types in the assembly.  \n  \n For more information on assemblies, see the \"Application Domains and Assemblies\" section in the [Application Domains](~/docs/framework/app-domains/application-domains.md) topic."
  example:
  - "The following code example shows how to obtain the currently executing assembly, create an instance of a type contained in that assembly, and invoke one of the type's methods with late binding. For this purpose, the code example defines a class named `Example`, with a method named `SampleMethod`. The constructor of the class accepts an integer, which is used to compute the return value of the method.  \n  \n The code example also demonstrates the use of the <xref:System.Reflection.Assembly.GetName%2A> method to obtain an <xref:System.Reflection.AssemblyName> object that can be used to parse the full name of the assembly. The example displays the version number of the assembly, the <xref:System.Reflection.Assembly.CodeBase%2A> property, and the <xref:System.Reflection.Assembly.EntryPoint%2A> property.  \n  \n [!code-cpp[AssemblyClass#1](~/samples/snippets/cpp/VS_Snippets_CLR/AssemblyClass/cpp/source.cpp#1)]\n [!code-csharp[AssemblyClass#1](~/samples/snippets/csharp/VS_Snippets_CLR/AssemblyClass/cs/source.cs#1)]\n [!code-vb[AssemblyClass#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AssemblyClass/vb/source.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Assembly : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._Assembly, System.Runtime.Serialization.ISerializable, System.Security.IEvidenceFactory
  inheritance:
  - System.Object
  derivedClasses:
  - System.Reflection.Emit.AssemblyBuilder
  implements:
  - System.Reflection.ICustomAttributeProvider
  - System.Runtime.InteropServices._Assembly
  - System.Runtime.Serialization.ISerializable
  - System.Security.IEvidenceFactory
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)
  - System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)
  - System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)
  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)
  - System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Reflection.Assembly,System.Byte*@,System.Int32@)
  attributes:
  - type: System.Runtime.InteropServices.ClassInterfaceAttribute
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.#ctor
  commentId: M:System.Reflection.Assembly.#ctor
  id: '#ctor'
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: Assembly()
  nameWithType: Assembly.Assembly()
  fullName: Assembly.Assembly()
  type: Constructor
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Initializes a new instance of the <xref href="System.Reflection.Assembly"></xref> class.
  remarks: This constructor is invoked by derived classes during the construction of <xref:System.Reflection.Assembly> objects.
  syntax:
    content: protected Assembly ();
    parameters: []
  overload: System.Reflection.Assembly.#ctor*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.CodeBase
  commentId: P:System.Reflection.Assembly.CodeBase
  id: CodeBase
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: CodeBase
  nameWithType: Assembly.CodeBase
  fullName: Assembly.CodeBase
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the location of the assembly as specified originally, for example, in an <xref href="System.Reflection.AssemblyName"></xref> object.
  remarks: "To get the absolute path to the loaded manifest-containing file, use the <xref:System.Reflection.Assembly.Location%2A?displayProperty=fullName> property instead.  \n  \n If the assembly was loaded as a byte array, using an overload of the <xref:System.Reflection.Assembly.Load%2A> method that takes an array of bytes, this property returns the location of the caller of the method, not the location of the loaded assembly."
  example:
  - "The following example uses the <xref:System.Reflection.Assembly.CodeBase%2A> property.  \n  \n [!code-cpp[System.Reflection.Assembly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/codebase1.cpp#1)]\n [!code-csharp[System.Reflection.Assembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/codebase1.cs#1)]\n [!code-vb[System.Reflection.Assembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/codebase1.vb#1)]"
  syntax:
    content: public virtual string CodeBase { get; }
    return:
      type: System.String
      description: The location of the assembly as specified originally.
  overload: System.Reflection.Assembly.CodeBase*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.CreateInstance(System.String)
  commentId: M:System.Reflection.Assembly.CreateInstance(System.String)
  id: CreateInstance(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: CreateInstance(String)
  nameWithType: Assembly.CreateInstance(String)
  fullName: Assembly.CreateInstance(String)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Locates the specified type from this assembly and creates an instance of it using the system activator, using case-sensitive search.
  remarks: "If the runtime is unable to find `typeName` in the <xref:System.Reflection.Assembly> instance, it returns `null` instead of throwing an exception. This might happen because:  \n  \n-   You haven't specified the fully qualified name of the type.  \n  \n-   You've specified the fully qualified type name, but its case doesn’t match the case of the type's <xref:System.Type.FullName%2A?displayProperty=fullName> property. For a case-insensitive comparison of `typeName` with the type's full name, call the <xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29> overload and specify `true` for the `ignoreCase` argument.  \n  \n-   The type doesn’t exist in the current <xref:System.Reflection.Assembly> instance."
  example:
  - "The following example defines a `Person` class and calls the <xref:System.Reflection.Assembly.CreateInstance%28System.String%29> method to instantiate it.  \n  \n [!code-csharp[System.Reflection.Assembly.CreateInstance#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/cs/createinstance1.cs#1)]\n [!code-vb[System.Reflection.Assembly.CreateInstance#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/vb/createinstance1.vb#1)]"
  syntax:
    content: public object CreateInstance (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: The <xref href="System.Type.FullName"></xref> of the type to locate.
    return:
      type: System.Object
      description: An instance of the specified type created with the default constructor; or `null` if <code>typeName</code> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <xref href="System.Reflection.BindingFlags"></xref> set to `Public` or `Instance`.
  overload: System.Reflection.Assembly.CreateInstance*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>typeName</code> is an empty string (\"\") or a string beginning with a null character.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching constructor was found.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>typeName</code> requires a dependent assembly that could not be found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "<code>typeName</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>typeName</code> requires a dependent assembly that was not preloaded."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>typeName</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>typeName</code> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)
  commentId: M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)
  id: CreateInstance(System.String,System.Boolean)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: CreateInstance(String, Boolean)
  nameWithType: Assembly.CreateInstance(String, Boolean)
  fullName: Assembly.CreateInstance(String, Boolean)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search.
  remarks: "If the runtime is unable to find `typeName` in the <xref:System.Reflection.Assembly> instance, it returns `null` instead of throwing an exception. This might happen because:  \n  \n-   You haven't specified the fully qualified name of the type.  \n  \n-   The type doesn’t exist in the current <xref:System.Reflection.Assembly> instance."
  example:
  - "The following example defines a `Person` class. It then calls the <xref:System.Reflection.Assembly.CreateInstance%28System.String%29> method to instantiate it, but because the casing of the `typeName` argument doesn’t match that of the type's <xref:System.Type.FullName%2A> property, the method returns `null`. When the example passes the same string to the <xref:System.Reflection.Assembly.CreateInstance%28System.String%2CSystem.Boolean%29> overload and specifies that the comparison should be case-insensitive, the `Person` class is found, and a `Person` object is successfully instantiated.  \n  \n [!code-csharp[System.Reflection.Assembly.CreateInstance#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/cs/createinstance2.cs#2)]\n [!code-vb[System.Reflection.Assembly.CreateInstance#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.createinstance/vb/createinstance2.vb#2)]"
  syntax:
    content: public object CreateInstance (string typeName, bool ignoreCase);
    parameters:
    - id: typeName
      type: System.String
      description: The <xref href="System.Type.FullName"></xref> of the type to locate.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to ignore the case of the type name; otherwise, `false`.'
    return:
      type: System.Object
      description: An instance of the specified type created with the default constructor; or `null` if <code>typeName</code> is not found. The type is resolved using the default binder, without specifying culture or activation attributes, and with <xref href="System.Reflection.BindingFlags"></xref> set to `Public` or `Instance`.
  overload: System.Reflection.Assembly.CreateInstance*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>typeName</code> is an empty string (\"\") or a string beginning with a null character.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context."
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching constructor was found.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>typeName</code> requires a dependent assembly that could not be found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "<code>typeName</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>typeName</code> requires a dependent assembly that was not preloaded."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>typeName</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>typeName</code> requires a dependent assembly that was compiled for a version of the runtime that is later than the currently loaded version."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  commentId: M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  id: CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: CreateInstance(String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  nameWithType: Assembly.CreateInstance(String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  fullName: Assembly.CreateInstance(String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Locates the specified type from this assembly and creates an instance of it using the system activator, with optional case-sensitive search and having the specified culture, arguments, and binding and activation attributes.
  syntax:
    content: public virtual object CreateInstance (string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);
    parameters:
    - id: typeName
      type: System.String
      description: The <xref href="System.Type.FullName"></xref> of the type to locate.
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to ignore the case of the type name; otherwise, `false`.'
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: A bitmask that affects the way in which the search is conducted. The value is a combination of bit flags from <xref href="System.Reflection.BindingFlags"></xref>.
    - id: binder
      type: System.Reflection.Binder
      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection. If <code>binder</code> is `null`, the default binder is used.
    - id: args
      type: System.Object[]
      description: An array that contains the arguments to be passed to the constructor. This array of arguments must match in number, order, and type the parameters of the constructor to be invoked. If the default constructor is desired, <code>args</code> must be an empty array or `null`.
    - id: culture
      type: System.Globalization.CultureInfo
      description: An instance of `CultureInfo` used to govern the coercion of types. If this is `null`, the `CultureInfo` for the current thread is used. (This is necessary to convert a `String` that represents 1000 to a `Double` value, for example, since 1000 is represented differently by different cultures.)
    - id: activationAttributes
      type: System.Object[]
      description: An array of one or more attributes that can participate in activation. Typically, an array that contains a single <xref href="System.Runtime.Remoting.Activation.UrlAttribute"></xref> object that specifies the URL that is required to activate a remote object.  This parameter is related to client-activated objects. Client activation is a legacy technology that is retained for backward compatibility but is not recommended for new development. Distributed applications should instead use Windows Communication Foundation.
    return:
      type: System.Object
      description: An instance of the specified type, or `null` if <code>typeName</code> is not found. The supplied arguments are used to resolve the type, and to bind the constructor that is used to create the instance.
  overload: System.Reflection.Assembly.CreateInstance*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>typeName</code> is an empty string (\"\") or a string beginning with a null character.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>typeName</code> is `null`.
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: No matching constructor was found.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: A non-empty activation attributes array is passed to a type that does not inherit from <xref href="System.MarshalByRefObject"></xref>.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>typeName</code> requires a dependent assembly that could not be found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "<code>typeName</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>typeName</code> requires a dependent assembly that was not preloaded."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>typeName</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>typeName</code> requires a dependent assembly which that was compiled for a version of the runtime that is later than the currently loaded version."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)
  commentId: M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)
  id: CreateQualifiedName(System.String,System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: CreateQualifiedName(String, String)
  nameWithType: Assembly.CreateQualifiedName(String, String)
  fullName: Assembly.CreateQualifiedName(String, String)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Creates the name of a type qualified by the display name of its assembly.
  remarks: "The format of the returned string is:  \n  \n \\<FullTypeName>, \\<AssemblyDisplayName>  \n  \n See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.  \n  \n To accommodate changes in versions of the common language runtime, use this method rather than constructing the qualified name yourself.  For information about qualified assembly names, see <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=fullName>."
  syntax:
    content: public static string CreateQualifiedName (string assemblyName, string typeName);
    parameters:
    - id: assemblyName
      type: System.String
      description: The display name of an assembly.
    - id: typeName
      type: System.String
      description: The full name of a type.
    return:
      type: System.String
      description: The full name of the type qualified by the display name of the assembly.
  overload: System.Reflection.Assembly.CreateQualifiedName*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.CustomAttributes
  commentId: P:System.Reflection.Assembly.CustomAttributes
  id: CustomAttributes
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: CustomAttributes
  nameWithType: Assembly.CustomAttributes
  fullName: Assembly.CustomAttributes
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a collection that contains this assembly's custom attributes.
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData> CustomAttributes { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
      description: A collection that contains this assembly's custom attributes.
  overload: System.Reflection.Assembly.CustomAttributes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.DefinedTypes
  commentId: P:System.Reflection.Assembly.DefinedTypes
  id: DefinedTypes
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: DefinedTypes
  nameWithType: Assembly.DefinedTypes
  fullName: Assembly.DefinedTypes
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a collection of the types defined in this assembly.
  remarks: "The <xref:System.Reflection.Assembly.DefinedTypes%2A> property is comparable to the <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName> method, except that the <xref:System.Reflection.Assembly.DefinedTypes%2A> property returns a [collection](../Topic/IEnumerable\\(T\\)%20Interface.md) of <xref:System.Reflection.TypeInfo> objects, and the <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=fullName> method returns an array of <xref:System.Type> objects.  \n  \n The returned array includes nested types."
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo> DefinedTypes { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
      description: A collection of the types defined in this assembly.
  overload: System.Reflection.Assembly.DefinedTypes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.EntryPoint
  commentId: P:System.Reflection.Assembly.EntryPoint
  id: EntryPoint
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: EntryPoint
  nameWithType: Assembly.EntryPoint
  fullName: Assembly.EntryPoint
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the entry point of this assembly.
  syntax:
    content: public virtual System.Reflection.MethodInfo EntryPoint { get; }
    return:
      type: System.Reflection.MethodInfo
      description: An object that represents the entry point of this assembly. If no entry point is found (for example, the assembly is a DLL), `null` is returned.
  overload: System.Reflection.Assembly.EntryPoint*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.Equals(System.Object)
  commentId: M:System.Reflection.Assembly.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Assembly.Equals(Object)
  fullName: Assembly.Equals(Object)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Determines whether this assembly and the specified object are equal.
  remarks: The <xref:System.Reflection.Assembly.Equals%2A> method performs a test for reference equality to determine whether the current instance and `o` are equal.
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: The object to compare with this instance.
    return:
      type: System.Boolean
      description: '`true` if <code>o</code> is equal to this instance; otherwise, `false`.'
  overload: System.Reflection.Assembly.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.EscapedCodeBase
  commentId: P:System.Reflection.Assembly.EscapedCodeBase
  id: EscapedCodeBase
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: EscapedCodeBase
  nameWithType: Assembly.EscapedCodeBase
  fullName: Assembly.EscapedCodeBase
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the URI, including escape characters, that represents the codebase.
  syntax:
    content: public virtual string EscapedCodeBase { get; }
    return:
      type: System.String
      description: A URI with escape characters.
  overload: System.Reflection.Assembly.EscapedCodeBase*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.Evidence
  commentId: P:System.Reflection.Assembly.Evidence
  id: Evidence
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: Evidence
  nameWithType: Assembly.Evidence
  fullName: Assembly.Evidence
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the evidence for this assembly.
  remarks: Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.
  syntax:
    content: public virtual System.Security.Policy.Evidence Evidence { get; }
    return:
      type: System.Security.Policy.Evidence
      description: The evidence for this assembly.
  overload: System.Reflection.Assembly.Evidence*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.ExportedTypes
  commentId: P:System.Reflection.Assembly.ExportedTypes
  id: ExportedTypes
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: ExportedTypes
  nameWithType: Assembly.ExportedTypes
  fullName: Assembly.ExportedTypes
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a collection of the public types defined in this assembly that are visible outside the assembly.
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<Type> ExportedTypes { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: A collection of the public types defined in this assembly that are visible outside the assembly.
  overload: System.Reflection.Assembly.ExportedTypes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.FullName
  commentId: P:System.Reflection.Assembly.FullName
  id: FullName
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: FullName
  nameWithType: Assembly.FullName
  fullName: Assembly.FullName
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the display name of the assembly.
  remarks: "See <xref:System.Reflection.AssemblyName> for a description of the format of the display name of an assembly.  \n  \n> [!NOTE]\n>  Writing your own code to parse display names is not recommended. Instead, pass the display name to the <xref:System.Reflection.AssemblyName.%23ctor%2A> constructor, which parses it and populates the appropriate fields of the new <xref:System.Reflection.AssemblyName>.  \n  \n In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. However, it is not included in the string returned by the <xref:System.Reflection.Assembly.FullName%2A> property, for compatibility reasons. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>."
  example:
  - "The following example retrieves the display name of the currently executing assembly, and the display name of the assembly that contains the <xref:System.Int32> type (`int` in C#, `Integer` in Visual Basic).  \n  \n [!code-cpp[Assembly.FullName#1](~/samples/snippets/cpp/VS_Snippets_CLR/Assembly.FullName/CPP/Example.cpp#1)]\n [!code-csharp[Assembly.FullName#1](~/samples/snippets/csharp/VS_Snippets_CLR/Assembly.FullName/CS/Example.cs#1)]\n [!code-vb[Assembly.FullName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Assembly.FullName/VB/Example.vb#1)]"
  syntax:
    content: public virtual string FullName { get; }
    return:
      type: System.String
      description: The display name of the assembly.
  overload: System.Reflection.Assembly.FullName*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetAssembly(System.Type)
  commentId: M:System.Reflection.Assembly.GetAssembly(System.Type)
  id: GetAssembly(System.Type)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetAssembly(Type)
  nameWithType: Assembly.GetAssembly(Type)
  fullName: Assembly.GetAssembly(Type)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the currently loaded assembly in which the specified type is defined.
  remarks: "Calling this method is equivalent to retrieving the value of the  <xref:System.Type.Assembly?displayProperty=fullName> property. However, the <xref:System.Type.Assembly?displayProperty=fullName> property typically offers superior performance.  \n  \n In order to call this method, you must have a <xref:System.Type> object, which means that the assembly in which the class is defined must already be loaded."
  example:
  - "The following example retrieves the assembly that contains the <xref:System.Int32> type and displays its name and file location.  \n  \n [!code-cpp[System.Reflection.Assembly#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/GetAssembly1.cpp#12)]\n [!code-csharp[System.Reflection.Assembly#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/GetAssembly1.cs#12)]\n [!code-vb[System.Reflection.Assembly#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/GetAssembly1.vb#12)]"
  syntax:
    content: public static System.Reflection.Assembly GetAssembly (Type type);
    parameters:
    - id: type
      type: System.Type
      description: An object representing a type in the assembly that will be returned.
    return:
      type: System.Reflection.Assembly
      description: The assembly in which the specified type is defined.
  overload: System.Reflection.Assembly.GetAssembly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>type</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetCallingAssembly
  commentId: M:System.Reflection.Assembly.GetCallingAssembly
  id: GetCallingAssembly
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetCallingAssembly()
  nameWithType: Assembly.GetCallingAssembly()
  fullName: Assembly.GetCallingAssembly()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the <xref href="System.Reflection.Assembly"></xref> of the method that invoked the currently executing method.
  remarks: "If the method that calls the <xref:System.Reflection.Assembly.GetCallingAssembly%2A> method is expanded inline by the just-in-time (JIT) compiler, or if its caller is expanded inline, the assembly that is returned by <xref:System.Reflection.Assembly.GetCallingAssembly%2A>may differ unexpectedly. For example, consider the following methods and assemblies:  \n  \n-   Method `M1` in assembly `A1` calls <xref:System.Reflection.Assembly.GetCallingAssembly%2A>.  \n  \n-   Method `M2` in assembly `A2` calls `M1`.  \n  \n-   Method `M3` in assembly `A3` calls `M2`.  \n  \n When `M1` is not inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A2`. When `M1` is inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A3`. Similarly, when `M2` is not inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A2`. When `M2` is inlined, <xref:System.Reflection.Assembly.GetCallingAssembly%2A> returns `A3`.  \n  \n This effect also occurs when `M1` executes as a tail call from `M2`, or when `M2` executes as a tail call from `M3`. You can prevent the JIT compiler from inlining the method that calls <xref:System.Reflection.Assembly.GetCallingAssembly%2A>, by applying the <xref:System.Runtime.CompilerServices.MethodImplAttribute> attribute with the <xref:System.Runtime.CompilerServices.MethodImplOptions?displayProperty=fullName> flag, but there is no similar mechanism for preventing tail calls."
  example:
  - "The following example gets the calling assembly of the current method.  \n  \n [!code-cpp[System.Reflection.Assembly#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/getcallingassembly1.cpp#4)]\n [!code-csharp[System.Reflection.Assembly#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/getcallingassembly1.cs#4)]\n [!code-vb[System.Reflection.Assembly#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/getcallingassembly1.vb#4)]"
  syntax:
    content: public static System.Reflection.Assembly GetCallingAssembly ();
    parameters: []
    return:
      type: System.Reflection.Assembly
      description: The `Assembly` object of the method that invoked the currently executing method.
  overload: System.Reflection.Assembly.GetCallingAssembly*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetCustomAttributes(System.Boolean)
  commentId: M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)
  id: GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetCustomAttributes(Boolean)
  nameWithType: Assembly.GetCustomAttributes(Boolean)
  fullName: Assembly.GetCustomAttributes(Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets all the custom attributes for this assembly.
  remarks: "This method implements the corresponding <xref:System.Reflection.ICustomAttributeProvider> interface method. Therefore, the `inherit` parameter must be specified even though it is ignored.  \n  \n A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present. Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded. Some of the resulting bits cannot be accessed using existing reflection APIs.  \n  \n The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.  \n  \n|Pseudo-Attribute|Metadata Bits|Reflection Accessor|  \n|-----------------------|-------------------|-------------------------|  \n|DllImportAttribute|CorPInvokeMap<br /><br /> DLL name|No accessor for PInvokeMap for ordinary method/global method attributes.<br /><br /> No accessor for DLL name.|  \n|GuidAttribute|Stored as a real custom attribute.|Accessed as a real custom attribute.|  \n|ComImportAttribute|CorTypeAttr.tdImport|Type.Attributes.Import|  \n|SerializableAttribute|CorTypeAttr.tdSerializable|Type.Attributes.Serializable|  \n|NonSerializedAttribute|CorFieldAttr.fdNotSerialized|FieldInfo.Attributes.NotSerialized|  \n|MethodImplAttribute|CorMethodImpl|MethodInfo.GetMethodImplementationFlags()<br /><br /> ConstructorInfo.GetMethodImplementationFlags()|  \n|MarshalAsAttribute|Various bits.|No accessor.|  \n|PreserveSigAttribute|CorMethodImpl.miOLE|MethodInfo.GetMethodImplementationFlags().OLE<br /><br /> ConstructorInfo.GetMethodImplementationFlags().OLE|  \n|InAttribute|CorParamAttr.pdIn|ParameterInfo.Attributes.In|  \n|OutAttribute|CorParamAttr.pdOut|ParameterInfo.Attributes.Out|  \n|StructLayoutAttribute|CorTypeAttr.tdLayoutSequential<br /><br /> CorTypeAttr.tdExplicitLayout<br /><br /> CorTypeAttr.tdAnsiClass<br /><br /> CorTypeAttr.tdUnicodeClass<br /><br /> CorTypeAttr.tdAutoClass<br /><br /> Class packing.|Type.Attributes.LayoutSequential<br /><br /> Type.Attributes.ExplicitLayout<br /><br /> Type.Attributes.AnsiClass<br /><br /> Type.Attributes.UnicodeClass<br /><br /> Type.Attributes.AutoClass<br /><br /> No accessor.|  \n|FieldOffsetAttribute|Field offset.|No accessor.|  \n|AssemblyLoadAttribute|CorAssemblyFlags|No accessor or enumerator.|"
  syntax:
    content: public virtual object[] GetCustomAttributes (bool inherit);
    parameters:
    - id: inherit
      type: System.Boolean
      description: This argument is ignored for objects of type <xref href="System.Reflection.Assembly"></xref>.
    return:
      type: System.Object[]
      description: An array that contains the custom attributes for this assembly.
  overload: System.Reflection.Assembly.GetCustomAttributes*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)
  commentId: M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)
  id: GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetCustomAttributes(Type, Boolean)
  nameWithType: Assembly.GetCustomAttributes(Type, Boolean)
  fullName: Assembly.GetCustomAttributes(Type, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the custom attributes for this assembly as specified by type.
  remarks: "This method implements the corresponding <xref:System.Reflection.ICustomAttributeProvider> interface method. Therefore, the `inherit` parameter must be specified even though it is ignored.  \n  \n A pseudo-attribute indicates bits of the core metadata that must be set when the attribute is present. Unlike a custom attribute that extends the metadata for a type and is saved along with the type, a pseudo-attribute modifies the metadata for the type and then is discarded. Some of the resulting bits cannot be accessed using existing reflection APIs.  \n  \n The following table summarizes the different pseudo-attributes and the accessors for the bits that are available in reflection.  \n  \n|Pseudo-Attribute|Metadata Bits|Reflection Accessor|  \n|-----------------------|-------------------|-------------------------|  \n|DllImportAttribute|CorPInvokeMap<br /><br /> DLL name|No accessor for PInvokeMap for ordinary method/global method attributes.<br /><br /> No accessor for DLL name.|  \n|GuidAttribute|Stored as a real custom attribute.|Accessed as a real custom attribute.|  \n|ComImportAttribute|CorTypeAttr.tdImport|Type.Attributes.Import|  \n|SerializableAttribute|CorTypeAttr.tdSerializable|Type.Attributes.Serializable|  \n|NonSerializedAttribute|CorFieldAttr.fdNotSerialized|FieldInfo.Attributes.NotSerialized|  \n|MethodImplAttribute|CorMethodImpl|MethodInfo.GetMethodImplementationFlags()<br /><br /> ConstructorInfo.GetMethodImplementationFlags()|  \n|MarshalAsAttribute|Various bits.|No accessor.|  \n|PreserveSigAttribute|CorMethodImpl.miOLE|MethodInfo.GetMethodImplementationFlags().OLE<br /><br /> ConstructorInfo.GetMethodImplementationFlags().OLE|  \n|InAttribute|CorParamAttr.pdIn|ParameterInfo.Attributes.In|  \n|OutAttribute|CorParamAttr.pdOut|ParameterInfo.Attributes.Out|  \n|StructLayoutAttribute|CorTypeAttr.tdLayoutSequential<br /><br /> CorTypeAttr.tdExplicitLayout<br /><br /> CorTypeAttr.tdAnsiClass<br /><br /> CorTypeAttr.tdUnicodeClass<br /><br /> CorTypeAttr.tdAutoClass<br /><br /> Class packing.|Type.Attributes.LayoutSequential<br /><br /> Type.Attributes.ExplicitLayout<br /><br /> Type.Attributes.AnsiClass<br /><br /> Type.Attributes.UnicodeClass<br /><br /> Type.Attributes.AutoClass<br /><br /> No accessor.|  \n|FieldOffsetAttribute|Field offset.|No accessor.|  \n|AssemblyLoadAttribute|CorAssemblyFlags|No accessor or enumerator.|"
  syntax:
    content: public virtual object[] GetCustomAttributes (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The type for which the custom attributes are to be returned.
    - id: inherit
      type: System.Boolean
      description: This argument is ignored for objects of type <xref href="System.Reflection.Assembly"></xref>.
    return:
      type: System.Object[]
      description: An array that contains the custom attributes for this assembly as specified by <code>attributeType</code>.
  overload: System.Reflection.Assembly.GetCustomAttributes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>attributeType</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>attributeType</code> is not a runtime type.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetCustomAttributesData
  commentId: M:System.Reflection.Assembly.GetCustomAttributesData
  id: GetCustomAttributesData
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetCustomAttributesData()
  nameWithType: Assembly.GetCustomAttributesData()
  fullName: Assembly.GetCustomAttributesData()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns information about the attributes that have been applied to the current <xref href="System.Reflection.Assembly"></xref>, expressed as <xref href="System.Reflection.CustomAttributeData"></xref> objects.
  remarks: Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context. Methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=fullName> and <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=fullName> cannot be used in such cases, because they create instances of the attributes. Code in the reflection-only context cannot be executed. For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class.
  syntax:
    content: public virtual System.Collections.Generic.IList<System.Reflection.CustomAttributeData> GetCustomAttributesData ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
      description: A generic list of <xref href="System.Reflection.CustomAttributeData"></xref> objects representing data about the attributes that have been applied to the current assembly.
  overload: System.Reflection.Assembly.GetCustomAttributesData*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetEntryAssembly
  commentId: M:System.Reflection.Assembly.GetEntryAssembly
  id: GetEntryAssembly
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetEntryAssembly()
  nameWithType: Assembly.GetEntryAssembly()
  fullName: Assembly.GetEntryAssembly()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the process executable in the default application domain. In other application domains, this is the first executable that was executed by <xref href="System.AppDomain.ExecuteAssembly(System.String)"></xref>.
  remarks: The <xref:System.Reflection.Assembly.GetEntryAssembly%2A> method can return `null` when a managed assembly has been loaded from an unmanaged application. For example, if an unmanaged application creates an instance of a COM component written in C#, a call to the <xref:System.Reflection.Assembly.GetEntryAssembly%2A> method from the C# component returns null, because the entry point for the process was unmanaged code rather than a managed assembly.
  syntax:
    content: public static System.Reflection.Assembly GetEntryAssembly ();
    parameters: []
    return:
      type: System.Reflection.Assembly
      description: The assembly that is the process executable in the default application domain, or the first executable that was executed by <xref href="System.AppDomain.ExecuteAssembly(System.String)"></xref>. Can return `null` when called from unmanaged code.
  overload: System.Reflection.Assembly.GetEntryAssembly*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetExecutingAssembly
  commentId: M:System.Reflection.Assembly.GetExecutingAssembly
  id: GetExecutingAssembly
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetExecutingAssembly()
  nameWithType: Assembly.GetExecutingAssembly()
  fullName: Assembly.GetExecutingAssembly()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the assembly that contains the code that is currently executing.
  remarks: "For performance reasons, you should call this method only when you do not know at design time what assembly is currently executing. The recommended way to retrieve an <xref:System.Reflection.Assembly> object that represents the current assembly is to use the <xref:System.Type.Assembly%2A?displayProperty=fullName> property of a type found in the assembly, as the following example illustrates.  \n  \n [!code-csharp[System.Reflection.Assembly.GetExecutingAssembly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/cs/assembly1.cs#1)]\n [!code-vb[System.Reflection.Assembly.GetExecutingAssembly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/vb/assembly1.vb#1)]  \n  \n To get the assembly that contains the method that called the currently executing code, use <xref:System.Reflection.Assembly.GetCallingAssembly%2A>."
  example:
  - "The following example uses the <xref:System.Type.Assembly%2A?displayProperty=fullName> property to get the currently executing assembly based on a type contained in that assembly. It also calls the <xref:System.Reflection.Assembly.GetExecutingAssembly%2A> method to show that it returns an <xref:System.Reflection.Assembly> object that represents the same assembly.  \n  \n [!code-cpp[System.Reflection.Assembly.GetExecutingAssembly#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/cpp/getexecutingassembly1.cpp#5)]\n [!code-csharp[System.Reflection.Assembly.GetExecutingAssembly#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/cs/getexecutingassembly1.cs#5)]\n [!code-vb[System.Reflection.Assembly.GetExecutingAssembly#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.getexecutingassembly/vb/getexecutingassembly1.vb#5)]"
  syntax:
    content: public static System.Reflection.Assembly GetExecutingAssembly ();
    parameters: []
    return:
      type: System.Reflection.Assembly
      description: The assembly that contains the code that is currently executing.
  overload: System.Reflection.Assembly.GetExecutingAssembly*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetExportedTypes
  commentId: M:System.Reflection.Assembly.GetExportedTypes
  id: GetExportedTypes
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetExportedTypes()
  nameWithType: Assembly.GetExportedTypes()
  fullName: Assembly.GetExportedTypes()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the public types defined in this assembly that are visible outside the assembly.
  remarks: The only types visible outside an assembly are public types and public types nested within other public types.
  example:
  - "The following code sample defines a number of classes with various access levels, and calls <xref:System.Reflection.Assembly.GetExportedTypes%2A> to display the ones that are visible from outside the assembly.  \n  \n [!code-cpp[Assembly.GetExportedTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR/Assembly.GetExportedTypes/CPP/source.cpp#1)]\n [!code-csharp[Assembly.GetExportedTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR/Assembly.GetExportedTypes/CS/source.cs#1)]\n [!code-vb[Assembly.GetExportedTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Assembly.GetExportedTypes/VB/source.vb#1)]"
  syntax:
    content: public virtual Type[] GetExportedTypes ();
    parameters: []
    return:
      type: System.Type[]
      description: An array that represents the types defined in this assembly that are visible outside the assembly.
  overload: System.Reflection.Assembly.GetExportedTypes*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The assembly is a dynamic assembly.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetFile(System.String)
  commentId: M:System.Reflection.Assembly.GetFile(System.String)
  id: GetFile(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetFile(String)
  nameWithType: Assembly.GetFile(String)
  fullName: Assembly.GetFile(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a <xref href="System.IO.FileStream"></xref> for the specified file in the file table of the manifest of this assembly.
  remarks: "This method works on both public and private resource files.  \n  \n The `name` should not include the path to the file."
  syntax:
    content: public virtual System.IO.FileStream GetFile (string name);
    parameters:
    - id: name
      type: System.String
      description: The name of the specified file. Do not include the path to the file.
    return:
      type: System.IO.FileStream
      description: A stream that contains the specified file, or `null` if the file is not found.
  overload: System.Reflection.Assembly.GetFile*
  exceptions:
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: A file that was found could not be loaded.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>name</code> parameter is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>name</code> parameter is an empty string ("").
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>name</code> was not found.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: <code>name</code> is not a valid assembly.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetFiles
  commentId: M:System.Reflection.Assembly.GetFiles
  id: GetFiles
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetFiles()
  nameWithType: Assembly.GetFiles()
  fullName: Assembly.GetFiles()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the files in the file table of an assembly manifest.
  remarks: "This method works on public and private resource files.  \n  \n This overload is equivalent to calling the <xref:System.Reflection.Assembly.GetFiles%28System.Boolean%29> overload and specifying `false`."
  syntax:
    content: public virtual System.IO.FileStream[] GetFiles ();
    parameters: []
    return:
      type: System.IO.FileStream[]
      description: An array of streams that contain the files.
  overload: System.Reflection.Assembly.GetFiles*
  exceptions:
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: A file that was found could not be loaded.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: A file was not found.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: A file was not a valid assembly.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetFiles(System.Boolean)
  commentId: M:System.Reflection.Assembly.GetFiles(System.Boolean)
  id: GetFiles(System.Boolean)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetFiles(Boolean)
  nameWithType: Assembly.GetFiles(Boolean)
  fullName: Assembly.GetFiles(Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.
  remarks: This method works on public and private resource files.
  syntax:
    content: public virtual System.IO.FileStream[] GetFiles (bool getResourceModules);
    parameters:
    - id: getResourceModules
      type: System.Boolean
      description: '`true` to include resource modules; otherwise, `false`.'
    return:
      type: System.IO.FileStream[]
      description: An array of streams that contain the files.
  overload: System.Reflection.Assembly.GetFiles*
  exceptions:
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: A file that was found could not be loaded.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: A file was not found.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: A file was not a valid assembly.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetHashCode
  commentId: M:System.Reflection.Assembly.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Assembly.GetHashCode()
  fullName: Assembly.GetHashCode()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Reflection.Assembly.GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetLoadedModules
  commentId: M:System.Reflection.Assembly.GetLoadedModules
  id: GetLoadedModules
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetLoadedModules()
  nameWithType: Assembly.GetLoadedModules()
  fullName: Assembly.GetLoadedModules()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets all the loaded modules that are part of this assembly.
  syntax:
    content: public System.Reflection.Module[] GetLoadedModules ();
    parameters: []
    return:
      type: System.Reflection.Module[]
      description: An array of modules.
  overload: System.Reflection.Assembly.GetLoadedModules*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetLoadedModules(System.Boolean)
  commentId: M:System.Reflection.Assembly.GetLoadedModules(System.Boolean)
  id: GetLoadedModules(System.Boolean)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetLoadedModules(Boolean)
  nameWithType: Assembly.GetLoadedModules(Boolean)
  fullName: Assembly.GetLoadedModules(Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets all the loaded modules that are part of this assembly, specifying whether to include resource modules.
  syntax:
    content: public virtual System.Reflection.Module[] GetLoadedModules (bool getResourceModules);
    parameters:
    - id: getResourceModules
      type: System.Boolean
      description: '`true` to include resource modules; otherwise, `false`.'
    return:
      type: System.Reflection.Module[]
      description: An array of modules.
  overload: System.Reflection.Assembly.GetLoadedModules*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  commentId: M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  id: GetManifestResourceInfo(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetManifestResourceInfo(String)
  nameWithType: Assembly.GetManifestResourceInfo(String)
  fullName: Assembly.GetManifestResourceInfo(String)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns information about how the given resource has been persisted.
  remarks: Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.
  syntax:
    content: public virtual System.Reflection.ManifestResourceInfo GetManifestResourceInfo (string resourceName);
    parameters:
    - id: resourceName
      type: System.String
      description: The case-sensitive name of the resource.
    return:
      type: System.Reflection.ManifestResourceInfo
      description: An object that is populated with information about the resource's topology, or `null` if the resource is not found.
  overload: System.Reflection.Assembly.GetManifestResourceInfo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>resourceName</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>resourceName</code> parameter is an empty string ("").
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetManifestResourceNames
  commentId: M:System.Reflection.Assembly.GetManifestResourceNames
  id: GetManifestResourceNames
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetManifestResourceNames()
  nameWithType: Assembly.GetManifestResourceNames()
  fullName: Assembly.GetManifestResourceNames()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the names of all the resources in this assembly.
  remarks: "You can use each resource name in the array returned by this method as follows:  \n  \n-   You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceInfo%2A> method to get additional information about the resource.  \n  \n-   If the name identifies a binary .resources file, you can remove its .resources file extension and pass it to the <xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29?displayProperty=fullName> constructor to instantiate the resource manager.  \n  \n-   You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> method to retrieve a <xref:System.IO.Stream> object that you can then pass to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29?displayProperty=fullName> constructor.  \n  \n-   You can pass the resource name to the <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> method to retrieve a <xref:System.IO.Stream> object that you can then pass to the <xref:System.Resources.ResourceSet.%23ctor%28System.IO.Stream%29?displayProperty=fullName> constructor.  \n  \n Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>."
  syntax:
    content: public virtual string[] GetManifestResourceNames ();
    parameters: []
    return:
      type: System.String[]
      description: An array that contains the names of all the resources.
  overload: System.Reflection.Assembly.GetManifestResourceNames*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)
  commentId: M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)
  id: GetManifestResourceStream(System.Type,System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetManifestResourceStream(Type, String)
  nameWithType: Assembly.GetManifestResourceStream(Type, String)
  fullName: Assembly.GetManifestResourceStream(Type, String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.
  remarks: "For example, if the full name specified for `type` is \"MyNameSpace.MyClasses\" and `name` is \"Net\", this method overload searches for a resource named \"MyNameSpace.Net\".  \n  \n A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time. For more information about manifest resources, see [Microsoft .NET Framework Resource Basics](http://go.microsoft.com/fwlink/?LinkId=204554) in the MSDN Library.  \n  \n Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.  \n  \n> [!NOTE]\n>  This method returns `null` if a private resource in another assembly is accessed and the caller does not have <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag.  \n  \n If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time. If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>."
  syntax:
    content: public virtual System.IO.Stream GetManifestResourceStream (Type type, string name);
    parameters:
    - id: type
      type: System.Type
      description: The type whose namespace is used to scope the manifest resource name.
    - id: name
      type: System.String
      description: The case-sensitive name of the manifest resource being requested.
    return:
      type: System.IO.Stream
      description: The manifest resource; or `null` if no resources were specified during compilation or if the resource is not visible to the caller.
  overload: System.Reflection.Assembly.GetManifestResourceStream*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>name</code> parameter is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>name</code> parameter is an empty string ("").
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: A file that was found could not be loaded.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>name</code> was not found.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: <code>name</code> is not a valid assembly.
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Resource length is greater than <xref href="System.Int64.MaxValue"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetManifestResourceStream(System.String)
  commentId: M:System.Reflection.Assembly.GetManifestResourceStream(System.String)
  id: GetManifestResourceStream(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetManifestResourceStream(String)
  nameWithType: Assembly.GetManifestResourceStream(String)
  fullName: Assembly.GetManifestResourceStream(String)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads the specified manifest resource from this assembly.
  remarks: "A manifest resource is a resource (such as an image file) that is embedded in the assembly at compile time. For more information about manifest resources, see [Microsoft .NET Framework Resource Basics](http://go.microsoft.com/fwlink/?LinkId=204554) in the MSDN Library.  \n  \n Resource information is returned only if the resource is visible to the caller, or the caller has <xref:System.Security.Permissions.ReflectionPermission>.  \n  \n> [!NOTE]\n>  This method returns `null` if a private resource in another assembly is accessed and the caller does not have <xref:System.Security.Permissions.ReflectionPermission> with the <xref:System.Security.Permissions.ReflectionPermissionFlag?displayProperty=fullName> flag.  \n  \n If the assembly manifest lists a resource file, <xref:System.Reflection.Assembly.GetManifestResourceStream%2A> returns a <xref:System.IO.Stream> object even if the resource file cannot be found on disk at the time. If the resource file is not found, passing the resulting <xref:System.IO.Stream> object to the <xref:System.Resources.ResourceReader> constructor causes an <xref:System.ArgumentException>."
  syntax:
    content: public virtual System.IO.Stream GetManifestResourceStream (string name);
    parameters:
    - id: name
      type: System.String
      description: The case-sensitive name of the manifest resource being requested.
    return:
      type: System.IO.Stream
      description: The manifest resource; or `null` if no resources were specified during compilation or if the resource is not visible to the caller.
  overload: System.Reflection.Assembly.GetManifestResourceStream*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>name</code> parameter is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>name</code> parameter is an empty string ("").
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n A file that was found could not be loaded."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>name</code> was not found.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: <code>name</code> is not a valid assembly.
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Resource length is greater than <xref href="System.Int64.MaxValue"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetModule(System.String)
  commentId: M:System.Reflection.Assembly.GetModule(System.String)
  id: GetModule(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetModule(String)
  nameWithType: Assembly.GetModule(String)
  fullName: Assembly.GetModule(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the specified module in this assembly.
  remarks: "This method works on file names.  \n  \n Classes in the `Reflection.Emit` namespace emit the scope name for a dynamic module. The scope name can be determined by the <xref:System.Reflection.Module.ScopeName%2A?displayProperty=fullName> property. Pass the kind of module you want to `Assembly.GetModule`. For example, if you want the module that contains the assembly manifest, pass the scope name of the module to `GetModule`. Otherwise, pass the file name of the module. Assemblies loaded by one of the `Load` methods that have a byte[] parameter have only one module, and that is the manifest module. Always seek these modules using the scope name.  \n  \n A type can be retrieved from a specific module using <xref:System.Reflection.Module.GetType%2A?displayProperty=fullName>. Calling `Module.GetType` on the module containing the manifest will not initiate a search of the entire assembly. To retrieve a type from an assembly, regardless of which module it is in, you must call <xref:System.Reflection.Assembly.GetType%2A?displayProperty=fullName>."
  syntax:
    content: public virtual System.Reflection.Module GetModule (string name);
    parameters:
    - id: name
      type: System.String
      description: The name of the module being requested.
    return:
      type: System.Reflection.Module
      description: The module being requested, or `null` if the module is not found.
  overload: System.Reflection.Assembly.GetModule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>name</code> parameter is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>name</code> parameter is an empty string ("").
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: A file that was found could not be loaded.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>name</code> was not found.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: <code>name</code> is not a valid assembly.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetModules
  commentId: M:System.Reflection.Assembly.GetModules
  id: GetModules
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetModules()
  nameWithType: Assembly.GetModules()
  fullName: Assembly.GetModules()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets all the modules that are part of this assembly.
  remarks: "This method works on public and private resource files.  \n  \n> [!NOTE]\n>  Modules must be emitted with file name extensions."
  example:
  - "The following example displays the name of the module in the returned array that contains the assembly manifest.  \n  \n [!code-cpp[Classic Assembly.GetModules Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Assembly.GetModules Example/CPP/source.cpp#1)]\n [!code-csharp[Classic Assembly.GetModules Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Assembly.GetModules Example/CS/source.cs#1)]\n [!code-vb[Classic Assembly.GetModules Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Assembly.GetModules Example/VB/source.vb#1)]"
  syntax:
    content: public System.Reflection.Module[] GetModules ();
    parameters: []
    return:
      type: System.Reflection.Module[]
      description: An array of modules.
  overload: System.Reflection.Assembly.GetModules*
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: The module to be loaded does not specify a file name extension.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetModules(System.Boolean)
  commentId: M:System.Reflection.Assembly.GetModules(System.Boolean)
  id: GetModules(System.Boolean)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetModules(Boolean)
  nameWithType: Assembly.GetModules(Boolean)
  fullName: Assembly.GetModules(Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets all the modules that are part of this assembly, specifying whether to include resource modules.
  remarks: "This method works on public and private resource files.  \n  \n> [!NOTE]\n>  Modules must be emitted with file name extensions."
  syntax:
    content: public virtual System.Reflection.Module[] GetModules (bool getResourceModules);
    parameters:
    - id: getResourceModules
      type: System.Boolean
      description: '`true` to include resource modules; otherwise, `false`.'
    return:
      type: System.Reflection.Module[]
      description: An array of modules.
  overload: System.Reflection.Assembly.GetModules*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetName
  commentId: M:System.Reflection.Assembly.GetName
  id: GetName
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetName()
  nameWithType: Assembly.GetName()
  fullName: Assembly.GetName()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets an <xref href="System.Reflection.AssemblyName"></xref> for this assembly.
  syntax:
    content: public virtual System.Reflection.AssemblyName GetName ();
    parameters: []
    return:
      type: System.Reflection.AssemblyName
      description: An object that contains the fully parsed display name for this assembly.
  overload: System.Reflection.Assembly.GetName*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetName(System.Boolean)
  commentId: M:System.Reflection.Assembly.GetName(System.Boolean)
  id: GetName(System.Boolean)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetName(Boolean)
  nameWithType: Assembly.GetName(Boolean)
  fullName: Assembly.GetName(Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets an <xref href="System.Reflection.AssemblyName"></xref> for this assembly, setting the codebase as specified by <code>copiedName</code>.
  syntax:
    content: public virtual System.Reflection.AssemblyName GetName (bool copiedName);
    parameters:
    - id: copiedName
      type: System.Boolean
      description: '`true` to set the <xref href="System.Reflection.Assembly.CodeBase"></xref> to the location of the assembly after it was shadow copied; `false` to set <xref href="System.Reflection.Assembly.CodeBase"></xref> to the original location.'
    return:
      type: System.Reflection.AssemblyName
      description: An object that contains the fully parsed display name for this assembly.
  overload: System.Reflection.Assembly.GetName*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Assembly.GetObjectData(SerializationInfo, StreamingContext)
  fullName: Assembly.GetObjectData(SerializationInfo, StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets serialization information with all of the data needed to reinstantiate this assembly.
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: The object to be populated with serialization information.
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: The destination context of the serialization.
  overload: System.Reflection.Assembly.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>info</code> is `null`.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetReferencedAssemblies
  commentId: M:System.Reflection.Assembly.GetReferencedAssemblies
  id: GetReferencedAssemblies
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetReferencedAssemblies()
  nameWithType: Assembly.GetReferencedAssemblies()
  fullName: Assembly.GetReferencedAssemblies()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the <xref href="System.Reflection.AssemblyName"></xref> objects for all the assemblies referenced by this assembly.
  remarks: >-
    > [!IMPORTANT]

    >  Starting with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property of an <xref:System.Reflection.AssemblyName> object that is returned by this method is <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> if there is no hash algorithm for the referenced assembly, or if the hash algorithm of the referenced assembly is not identified by the <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> enumeration. In previous versions of the .NET Framework, the <xref:System.Reflection.AssemblyName.HashAlgorithm%2A> property returned <xref:System.Configuration.Assemblies.AssemblyHashAlgorithm?displayProperty=fullName> in this situation.
  example:
  - "The following code example demonstrates calling the <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A> method. This code example is part of a larger example provided for the <xref:System.Reflection.Assembly> class.  \n  \n [!code-cpp[Reflection#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection/CPP/reflection.cpp#1)]\n [!code-csharp[Reflection#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection/CS/Reflection.cs#1)]\n [!code-vb[Reflection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection/VB/Reflection.vb#1)]"
  syntax:
    content: public virtual System.Reflection.AssemblyName[] GetReferencedAssemblies ();
    parameters: []
    return:
      type: System.Reflection.AssemblyName[]
      description: An array that contains the fully parsed display names of all the assemblies referenced by this assembly.
  overload: System.Reflection.Assembly.GetReferencedAssemblies*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)
  commentId: M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)
  id: GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetSatelliteAssembly(CultureInfo, Version)
  nameWithType: Assembly.GetSatelliteAssembly(CultureInfo, Version)
  fullName: Assembly.GetSatelliteAssembly(CultureInfo, Version)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the specified version of the satellite assembly for the specified culture.
  remarks: "Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.  \n  \n Call the <xref:System.Reflection.Assembly.GetSatelliteAssembly%28System.Globalization.CultureInfo%29> overload to use your current assembly version.  \n  \n If `version` is `null`, the current assembly version is used if both the resource and main assemblies are signed."
  syntax:
    content: public virtual System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture, Version version);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The specified culture.
    - id: version
      type: System.Version
      description: The version of the satellite assembly.
    return:
      type: System.Reflection.Assembly
      description: The specified satellite assembly.
  overload: System.Reflection.Assembly.GetSatelliteAssembly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>culture</code> is `null`.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: The satellite assembly with a matching file name was found, but the `CultureInfo` or the version did not match the one specified.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: The assembly cannot be found.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: The satellite assembly is not a valid assembly.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)
  commentId: M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)
  id: GetSatelliteAssembly(System.Globalization.CultureInfo)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetSatelliteAssembly(CultureInfo)
  nameWithType: Assembly.GetSatelliteAssembly(CultureInfo)
  fullName: Assembly.GetSatelliteAssembly(CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the satellite assembly for the specified culture.
  remarks: "Satellite assemblies contain localized resources, as distinct from main application assemblies, which contain non-localizable executable code and resources for a single culture that serve as the default or neutral culture.  \n  \n Call this method to use your current assembly version."
  syntax:
    content: public virtual System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: The specified culture.
    return:
      type: System.Reflection.Assembly
      description: The specified satellite assembly.
  overload: System.Reflection.Assembly.GetSatelliteAssembly*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>culture</code> is `null`.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: The assembly cannot be found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: The satellite assembly with a matching file name was found, but the `CultureInfo` did not match the one specified.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: The satellite assembly is not a valid assembly.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetType(System.String,System.Boolean)
  commentId: M:System.Reflection.Assembly.GetType(System.String,System.Boolean)
  id: GetType(System.String,System.Boolean)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetType(String, Boolean)
  nameWithType: Assembly.GetType(String, Boolean)
  fullName: Assembly.GetType(String, Boolean)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the <xref href="System.Type"></xref> object with the specified name in the assembly instance and optionally throws an exception if the type is not found.
  remarks: "This method only searches the current assembly instance. The `name` parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload, which can optionally include an assembly display name as part of the type name.  \n  \n> [!NOTE]\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \n  \n The `throwOnError` parameter only affects what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`."
  syntax:
    content: public virtual Type GetType (string name, bool throwOnError);
    parameters:
    - id: name
      type: System.String
      description: The full name of the type.
    - id: throwOnError
      type: System.Boolean
      description: '`true` to throw an exception if the type is not found; `false` to return `null`.'
    return:
      type: System.Type
      description: An object that represents the specified class.
  overload: System.Reflection.Assembly.GetType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code> is invalid.  \n  \n -or-  \n  \n The length of <code>name</code> exceeds 1024 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>throwOnError</code> is `true`, and the type cannot be found.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>name</code> requires a dependent assembly that could not be found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "<code>name</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>name</code> requires a dependent assembly that was not preloaded."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>name</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>name</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  commentId: M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  id: GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetType(String, Boolean, Boolean)
  nameWithType: Assembly.GetType(String, Boolean, Boolean)
  fullName: Assembly.GetType(String, Boolean, Boolean)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the <xref href="System.Type"></xref> object with the specified name in the assembly instance, with the options of ignoring the case, and of throwing an exception if the type is not found.
  remarks: "This method only searches the current assembly instance. The `name` parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload, which can optionally include an assembly display name as part of the type name.  \n  \n> [!NOTE]\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \n  \n The `throwOnError` parameter only affects what happens when the type is not found. It does not affect any other exceptions that might be thrown. In particular, if the type is found but cannot be loaded, <xref:System.TypeLoadException> can be thrown even if `throwOnError` is `false`."
  syntax:
    content: public virtual Type GetType (string name, bool throwOnError, bool ignoreCase);
    parameters:
    - id: name
      type: System.String
      description: The full name of the type.
    - id: throwOnError
      type: System.Boolean
      description: '`true` to throw an exception if the type is not found; `false` to return `null`.'
    - id: ignoreCase
      type: System.Boolean
      description: '`true` to ignore the case of the type name; otherwise, `false`.'
    return:
      type: System.Type
      description: An object that represents the specified class.
  overload: System.Reflection.Assembly.GetType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code> is invalid.  \n  \n -or-  \n  \n The length of <code>name</code> exceeds 1024 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: <code>throwOnError</code> is `true`, and the type cannot be found.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>name</code> requires a dependent assembly that could not be found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "<code>name</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>name</code> requires a dependent assembly that was not preloaded."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>name</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>name</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetType(System.String)
  commentId: M:System.Reflection.Assembly.GetType(System.String)
  id: GetType(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetType(String)
  nameWithType: Assembly.GetType(String)
  fullName: Assembly.GetType(String)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the <xref href="System.Type"></xref> object with the specified name in the assembly instance.
  remarks: "This method only searches the current assembly instance. The `name` parameter includes the namespace but not the assembly. To search other assemblies for a type, use the <xref:System.Type.GetType%28System.String%29?displayProperty=fullName> method overload, which can optionally include an assembly display name as part of the type name.  \n  \n> [!NOTE]\n>  If the type has been forwarded to another assembly, it is still returned by this method. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md)."
  example:
  - "The following example defines an abstract `MeansOfTransportation` class in the `Transportation` namespace. It calls the <xref:System.Reflection.Assembly.GetType%28System.String%29> method to retrieve its <xref:System.Type> object, calls the <xref:System.Type.GetProperties%2A?displayProperty=fullName> method to get an array of <xref:System.Reflection.PropertyInfo> objects that represent the type's properties, and then displays information on the type's abstract properties. Note that the call to the <xref:System.Reflection.Assembly.GetType%28System.String%29> method uses the type's fully qualified name (that is, its namespace along with its type name).  \n  \n [!code-csharp[System.Reflection.Assembly.GetType#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.gettype/cs/gettype1.cs#1)]\n [!code-vb[System.Reflection.Assembly.GetType#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.gettype/vb/gettype1.vb#1)]"
  syntax:
    content: public virtual Type GetType (string name);
    parameters:
    - id: name
      type: System.String
      description: The full name of the type.
    return:
      type: System.Type
      description: An object that represents the specified class, or `null` if the class is not found.
  overload: System.Reflection.Assembly.GetType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>name</code> is invalid.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>name</code> is `null`.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>name</code> requires a dependent assembly that could not be found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead.  \n  \n</p>\n    </block>\n    <code>name</code> requires a dependent assembly that was found but could not be loaded.  \n  \n -or-  \n  \n The current assembly was loaded into the reflection-only context, and <code>name</code> requires a dependent assembly that was not preloaded."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>name</code> requires a dependent assembly, but the file is not a valid assembly.  \n  \n -or-  \n  \n <code>name</code> requires a dependent assembly which was compiled for a version of the runtime later than the currently loaded version."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GetTypes
  commentId: M:System.Reflection.Assembly.GetTypes
  id: GetTypes
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GetTypes()
  nameWithType: Assembly.GetTypes()
  fullName: Assembly.GetTypes()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the types defined in this assembly.
  remarks: "The returned array includes nested types.  \n  \n If the <xref:System.Reflection.Assembly.GetTypes%2A> method is called on an assembly and a type in that assembly is dependent on a type in an assembly that has not been loaded (for example, if it derives from a type in the second assembly), a <xref:System.Reflection.ReflectionTypeLoadException> is thrown. For example, this can happen if the first assembly was loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> or <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods, and the second assembly was not loaded. It can also happen with assemblies loaded using the <xref:System.Reflection.Assembly.Load%2A> and <xref:System.Reflection.Assembly.LoadFile%2A> methods if the second assembly cannot be located when the <xref:System.Reflection.Assembly.GetTypes%2A> method is called.  \n  \n> [!NOTE]\n>  If a type has been forwarded to another assembly, it is not included in the returned array. For information on type forwarding, see [Type Forwarding in the Common Language Runtime](~/docs/framework/app-domains/type-forwarding-in-the-common-language-runtime.md).  \n  \n To retrieve a collection of <xref:System.Reflection.TypeInfo> objects instead of an array of <xref:System.Type> objects, use the <xref:System.Reflection.Assembly.DefinedTypes%2A?displayProperty=fullName> property."
  example:
  - "The following example displays parameters of one method on a type in the specified assembly.  \n  \n [!code-cpp[System.Reflection.Assembly#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/assembly.cpp#11)]\n [!code-csharp[System.Reflection.Assembly#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/assembly.cs#11)]\n [!code-vb[System.Reflection.Assembly#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/assembly.vb#11)]"
  syntax:
    content: public virtual Type[] GetTypes ();
    parameters: []
    return:
      type: System.Type[]
      description: An array that contains all the types that are defined in this assembly.
  overload: System.Reflection.Assembly.GetTypes*
  exceptions:
  - type: System.Reflection.ReflectionTypeLoadException
    commentId: T:System.Reflection.ReflectionTypeLoadException
    description: The assembly contains one or more types that cannot be loaded. The array returned by the <xref href="System.Reflection.ReflectionTypeLoadException.Types"></xref> property of this exception contains a <xref href="System.Type"></xref> object for each type that was loaded and `null` for each type that could not be loaded, while the <xref href="System.Reflection.ReflectionTypeLoadException.LoaderExceptions"></xref> property contains an exception for each type that could not be loaded.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.GlobalAssemblyCache
  commentId: P:System.Reflection.Assembly.GlobalAssemblyCache
  id: GlobalAssemblyCache
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: GlobalAssemblyCache
  nameWithType: Assembly.GlobalAssemblyCache
  fullName: Assembly.GlobalAssemblyCache
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value indicating whether the assembly was loaded from the global assembly cache.
  syntax:
    content: public virtual bool GlobalAssemblyCache { get; }
    return:
      type: System.Boolean
      description: '`true` if the assembly was loaded from the global assembly cache; otherwise, `false`.'
  overload: System.Reflection.Assembly.GlobalAssemblyCache*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.HostContext
  commentId: P:System.Reflection.Assembly.HostContext
  id: HostContext
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: HostContext
  nameWithType: Assembly.HostContext
  fullName: Assembly.HostContext
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the host context with which the assembly was loaded.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public virtual long HostContext { get; }
    return:
      type: System.Int64
      description: An <xref href="System.Int64"></xref> value that indicates the host context with which the assembly was loaded, if any.
  overload: System.Reflection.Assembly.HostContext*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.ImageRuntimeVersion
  commentId: P:System.Reflection.Assembly.ImageRuntimeVersion
  id: ImageRuntimeVersion
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: ImageRuntimeVersion
  nameWithType: Assembly.ImageRuntimeVersion
  fullName: Assembly.ImageRuntimeVersion
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a string representing the version of the common language runtime (CLR) saved in the file containing the manifest.
  remarks: "For example, the value for the .NET Framework version 1.1 would be v1.1.4322. The binary files for that version would be located in the path %windir%\\Microsoft.NET\\Framework\\v1.1.4322.  \n  \n By default, <xref:System.Reflection.Assembly.ImageRuntimeVersion%2A> is set to the version of the CLR used to build the assembly. However, it might have been set to another value at compile time."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public virtual string ImageRuntimeVersion { get; }
    return:
      type: System.String
      description: The CLR version folder name. This is not a full path.
  overload: System.Reflection.Assembly.ImageRuntimeVersion*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)
  commentId: M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)
  id: IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: IsDefined(Type, Boolean)
  nameWithType: Assembly.IsDefined(Type, Boolean)
  fullName: Assembly.IsDefined(Type, Boolean)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Indicates whether or not a specified attribute has been applied to the assembly.
  remarks: ''
  example:
  - "The following code example applies the <xref:System.Reflection.AssemblyTitleAttribute> attribute to an assembly and then uses <xref:System.Reflection.Assembly.IsDefined%2A> to indicate whether it was applied. It also tests an attribute that was not applied.  \n  \n [!code-csharp[System.Reflection.Assembly.IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.isdefined/CS/isdefined.cs#1)]\n [!code-vb[System.Reflection.Assembly.IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.isdefined/VB/isdefined.vb#1)]"
  syntax:
    content: public virtual bool IsDefined (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: The type of the attribute to be checked for this assembly.
    - id: inherit
      type: System.Boolean
      description: This argument is ignored for objects of this type.
    return:
      type: System.Boolean
      description: '`true` if the attribute has been applied to the assembly; otherwise, `false`.'
  overload: System.Reflection.Assembly.IsDefined*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>attributeType</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>attributeType</code> uses an invalid type.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.IsDynamic
  commentId: P:System.Reflection.Assembly.IsDynamic
  id: IsDynamic
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: IsDynamic
  nameWithType: Assembly.IsDynamic
  fullName: Assembly.IsDynamic
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value that indicates whether the current assembly was generated dynamically in the current process by using reflection emit.
  remarks: "Dynamic assemblies are represented by the derived class <xref:System.Reflection.Emit.AssemblyBuilder>.  \n  \n When a dynamic assembly is saved to disk, the saved assembly is not dynamic. If the saved assembly is loaded into another application domain or process, the <xref:System.Reflection.Assembly.IsDynamic%2A> property returns `false`."
  syntax:
    content: public virtual bool IsDynamic { get; }
    return:
      type: System.Boolean
      description: '`true` if the current assembly was generated dynamically in the current process; otherwise, `false`.'
  overload: System.Reflection.Assembly.IsDynamic*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.IsFullyTrusted
  commentId: P:System.Reflection.Assembly.IsFullyTrusted
  id: IsFullyTrusted
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: IsFullyTrusted
  nameWithType: Assembly.IsFullyTrusted
  fullName: Assembly.IsFullyTrusted
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value that indicates whether the current assembly is loaded with full trust.
  syntax:
    content: public bool IsFullyTrusted { get; }
    return:
      type: System.Boolean
      description: '`true` if the current assembly is loaded with full trust; otherwise, `false`.'
  overload: System.Reflection.Assembly.IsFullyTrusted*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  commentId: M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  id: Load(System.Reflection.AssemblyName)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: Load(AssemblyName)
  nameWithType: Assembly.Load(AssemblyName)
  fullName: Assembly.Load(AssemblyName)
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads an assembly given its <xref href="System.Reflection.AssemblyName"></xref>.
  remarks: "<xref:System.IO.FileLoadException> is thrown if `assemblyRef` specifies the full assembly name and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  \n  \n> [!NOTE]\n>  Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set. The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method. Instead, the assembly is loaded using load-from rules. For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md).  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  \n  \n    > [!NOTE]\n    >  In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  \n  \n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \n  \n> [!NOTE]\n>  If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property). If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly. If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly. If the match fails, a <xref:System.IO.FileLoadException> is thrown."
  example:
  - "The following example instantiates an <xref:System.Reflection.AssemblyName> object and uses it to load the `sysglobal.dll` assembly. The example then displays the full name of the assembly's public types.  \n  \n [!code-csharp[System.Reflection.Assembly.Load#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.load/cs/Load2.cs#2)]\n [!code-vb[System.Reflection.Assembly.Load#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.load/vb/Load2.vb#2)]"
  syntax:
    content: public static System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef);
    parameters:
    - id: assemblyRef
      type: System.Reflection.AssemblyName
      description: The object that describes the assembly to be loaded.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>assemblyRef</code> is `null`.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyRef</code> is not found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "<block subset=\"none\" type=\"note\">\n      <p>  \n In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](~/docs/standard/cross-platform/cross-platform-development-with-the-portable-class-library.md), catch the base class exception, <xref href=\"System.IO.IOException\"></xref>, instead.  \n  \n</p>\n    </block>  \n  \n A file that was found could not be loaded."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyRef</code> is not a valid assembly. -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyRef</code> was compiled with a later version."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)
  commentId: M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)
  id: Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: Load(Byte[], Byte[], SecurityContextSource)
  nameWithType: Assembly.Load(Byte[], Byte[], SecurityContextSource)
  fullName: Assembly.Load(Byte[], Byte[], SecurityContextSource)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and specifying the source for the security context. The assembly is loaded into the application domain of the caller.
  remarks: The assembly is loaded into the application domain of the caller using the specified source for the security context. If `rawSymbolStore` was specified, the raw bytes that represent the symbols for the assembly are also loaded.
  syntax:
    content: public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.SecurityContextSource securityContextSource);
    parameters:
    - id: rawAssembly
      type: System.Byte[]
      description: A byte array that is a COFF-based image containing an emitted assembly.
    - id: rawSymbolStore
      type: System.Byte[]
      description: A byte array that contains the raw bytes representing the symbols for the assembly.
    - id: securityContextSource
      type: System.Security.SecurityContextSource
      description: The source of the security context.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>rawAssembly</code> is `null`.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>rawAssembly</code> is not a valid assembly.  \n  \n -or-  \n  \n <code>rawAssembly</code> was compiled with a later version of the common language runtime than the version that is currently loaded."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value of <code>securityContextSource</code> is not one of the enumeration values.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)
  commentId: M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)
  id: Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: Load(Byte[], Byte[], Evidence)
  nameWithType: Assembly.Load(Byte[], Byte[], Evidence)
  fullName: Assembly.Load(Byte[], Byte[], Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols and evidence for the assembly. The assembly is loaded into the application domain of the caller.
  remarks: "The assembly is loaded into the domain of the caller using the supplied evidence. The raw bytes representing the symbols for the assembly are also loaded.  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  \n  \n    > [!NOTE]\n    >  In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image are ignored.  \n  \n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \n  \n If you call the [\\], Byte\\<xref:System.Reflection.Assembly.Load%2A>method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  \n  \n Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping."
  syntax:
    content: >-
      [System.Obsolete]

      public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence);
    parameters:
    - id: rawAssembly
      type: System.Byte[]
      description: A byte array that is a COFF-based image containing an emitted assembly.
    - id: rawSymbolStore
      type: System.Byte[]
      description: A byte array that contains the raw bytes representing the symbols for the assembly.
    - id: securityEvidence
      type: System.Security.Policy.Evidence
      description: Evidence for loading the assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>rawAssembly</code> is `null`.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>rawAssembly</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version."
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code>securityEvidence</code> is not `null`.  By default, legacy CAS policy is not enabled in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]; when it is not enabled, <code>securityEvidence</code> must be `null`.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)
  commentId: M:System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)
  id: Load(System.String,System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: Load(String, Evidence)
  nameWithType: Assembly.Load(String, Evidence)
  fullName: Assembly.Load(String, Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Loads an assembly given its display name, loading the assembly into the domain of the caller using the supplied evidence.
  remarks: "<xref:System.IO.FileLoadException> is thrown if `assemblyString` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  \n  \n    > [!NOTE]\n    >  In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  \n  \n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \n  \n If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  \n  \n In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, \"ProcessorArchitecture=msil\". However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>."
  syntax:
    content: >-
      [System.Obsolete]

      public static System.Reflection.Assembly Load (string assemblyString, System.Security.Policy.Evidence assemblySecurity);
    parameters:
    - id: assemblyString
      type: System.String
      description: The display name of the assembly.
    - id: assemblySecurity
      type: System.Security.Policy.Evidence
      description: Evidence for loading the assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>assemblyString</code> is `null`.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyString</code> is not found.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyString</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version."
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "A file that was found could not be loaded.  \n  \n -or-  \n  \n An assembly or module was loaded twice with two different evidences."
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.Load(System.Byte[])
  commentId: M:System.Reflection.Assembly.Load(System.Byte[])
  id: Load(System.Byte[])
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: Load(Byte[])
  nameWithType: Assembly.Load(Byte[])
  fullName: Assembly.Load(Byte[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the application domain of the caller.
  remarks: "The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly. To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload. For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload.  \n  \n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \n  \n Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping."
  syntax:
    content: public static System.Reflection.Assembly Load (byte[] rawAssembly);
    parameters:
    - id: rawAssembly
      type: System.Byte[]
      description: A byte array that is a COFF-based image containing an emitted assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>rawAssembly</code> is `null`.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>rawAssembly</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[])
  commentId: M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[])
  id: Load(System.Byte[],System.Byte[])
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: Load(Byte[], Byte[])
  nameWithType: Assembly.Load(Byte[], Byte[])
  fullName: Assembly.Load(Byte[], Byte[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads the assembly with a common object file format (COFF)-based image containing an emitted assembly, optionally including symbols for the assembly. The assembly is loaded into the application domain of the caller.
  remarks: "The trust level of an assembly that is loaded by using this method is the same as the trust level of the calling assembly. To load an assembly from a byte array with the trust level of the application domain, use the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.SecurityContextSource%29> method overload. For more information about the use of evidence with overloads of the <xref:System.Reflection.Assembly.Load%2A> method that take byte arrays, see the <xref:System.Reflection.Assembly.Load%28System.Byte%5B%5D%2CSystem.Byte%5B%5D%2CSystem.Security.Policy.Evidence%29> method overload.  \n  \n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \n  \n Note that this method overload always creates a new <xref:System.Reflection.Assembly> object with its own mapping."
  syntax:
    content: public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore);
    parameters:
    - id: rawAssembly
      type: System.Byte[]
      description: A byte array that is a COFF-based image containing an emitted assembly.
    - id: rawSymbolStore
      type: System.Byte[]
      description: A byte array that contains the raw bytes representing the symbols for the assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>rawAssembly</code> is `null`.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>rawAssembly</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.Load(System.String)
  commentId: M:System.Reflection.Assembly.Load(System.String)
  id: Load(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: Load(String)
  nameWithType: Assembly.Load(String)
  fullName: Assembly.Load(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads an assembly given the long form of its name.
  remarks: "The long form of an assembly name consists of its simple name (such as \"System\" for the System.dll assembly) along with its version, culture, public key token, and optionally its processor architecture. It corresponds to the assembly's <xref:System.Reflection.Assembly.FullName%2A> property. The following example illustrates the use of a long name to load the System.dll assembly for the .NET Framework 4.  \n  \n [!code-csharp[System.Reflection.Assembly.Load#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.reflection.assembly.load/cs/load1.cs#1)]\n [!code-vb[System.Reflection.Assembly.Load#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.reflection.assembly.load/vb/load1.vb#1)]  \n  \n <xref:System.IO.FileLoadException> is thrown if `assemblyString` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  \n  \n    > [!NOTE]\n    >  In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  \n  \n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \n  \n In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, \"ProcessorArchitecture=msil\". However, the recommended way to specify an assembly name is to create an <xref:System.Reflection.AssemblyName> object and pass it to an appropriate overload of the <xref:System.Reflection.Assembly.Load%2A> method. See <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A?displayProperty=fullName>."
  example:
  - "The following example loads an assembly given its fully qualified name, and lists all the types contained in the specified assembly. For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/docs/framework/app-domains/assembly-names.md).  \n  \n [!code-cpp[assembly.load1#1](~/samples/snippets/cpp/VS_Snippets_CLR/Assembly.Load1/CPP/load1.cpp#1)]\n [!code-csharp[assembly.load1#1](~/samples/snippets/csharp/VS_Snippets_CLR/Assembly.Load1/CS/load1.cs#1)]\n [!code-vb[assembly.load1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Assembly.Load1/VB/load1.vb#1)]"
  syntax:
    content: public static System.Reflection.Assembly Load (string assemblyString);
    parameters:
    - id: assemblyString
      type: System.String
      description: The long form of the assembly name.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>assemblyString</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>assemblyString</code> is a zero-length string.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyString</code> is not found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: A file that was found could not be loaded.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyString</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)
  commentId: M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)
  id: Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: Load(AssemblyName, Evidence)
  nameWithType: Assembly.Load(AssemblyName, Evidence)
  fullName: Assembly.Load(AssemblyName, Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Loads an assembly given its <xref href="System.Reflection.AssemblyName"></xref>. The assembly is loaded into the domain of the caller using the supplied evidence.
  remarks: "<xref:System.IO.FileLoadException> is thrown if `assemblyRef` specifies the full assembly name, and the first assembly that matches the simple name has a different version, culture, or public key token. The loader does not continue probing for other assemblies that match the simple name.  \n  \n> [!NOTE]\n>  Do not use an <xref:System.Reflection.AssemblyName> with only the <xref:System.Reflection.AssemblyName.CodeBase%2A> property set. The <xref:System.Reflection.AssemblyName.CodeBase%2A> property does not supply any elements of the assembly identity (such as name or version), so loading does not occur according to load-by-identity rules, as you would expect from the <xref:System.Reflection.Assembly.Load%2A> method. Instead, the assembly is loaded using load-from rules. For information about the disadvantages of using the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%2A?displayProperty=fullName> method overload or [Best Practices for Assembly Loading](~/docs/framework/deployment/best-practices-for-assembly-loading.md).  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.Load%2A> method supersede pieces of evidence supplied by the loader.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is inherited from the calling assembly. This applies to the .NET Framework version 1.1 Service Pack 1 (SP1) and subsequent releases.  \n  \n    > [!NOTE]\n    >  In the .NET Framework version 1.0 and in version 1.1 without SP1, when you use a <xref:System.Reflection.Assembly.Load%2A> method overload with a `Byte[]` parameter to load a COFF image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \n  \n-   When you use a <xref:System.Reflection.Assembly.Load%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored.  \n  \n Reflecting on C++ executable files might throw a <xref:System.BadImageFormatException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the `.reloc` section from your executable file. To preserve the `.reloc` address for your C++ executable file, specify `/fixed:no` when you are linking.  \n  \n> [!NOTE]\n>  If both the <xref:System.Reflection.AssemblyName.Name%2A?displayProperty=fullName> property and the <xref:System.Reflection.AssemblyName.CodeBase%2A?displayProperty=fullName> property are set, the first attempt to load the assembly uses the display name (including version, culture, and so on, as returned by the <xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName> property). If the file is not found, <xref:System.Reflection.AssemblyName.CodeBase%2A> is used to search for the assembly. If the assembly is found using <xref:System.Reflection.AssemblyName.CodeBase%2A>, the display name is matched against the assembly. If the match fails, a <xref:System.IO.FileLoadException> is thrown.  \n  \n If you call the <xref:System.Reflection.Assembly.Load%2A> method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used."
  syntax:
    content: >-
      [System.Obsolete]

      public static System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity);
    parameters:
    - id: assemblyRef
      type: System.Reflection.AssemblyName
      description: The object that describes the assembly to be loaded.
    - id: assemblySecurity
      type: System.Security.Policy.Evidence
      description: Evidence for loading the assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>assemblyRef</code> is `null`.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyRef</code> is not found.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyRef</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyRef</code> was compiled with a later version."
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different evidences.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.LoadFile(System.String)
  commentId: M:System.Reflection.Assembly.LoadFile(System.String)
  id: LoadFile(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: LoadFile(String)
  nameWithType: Assembly.LoadFile(String)
  fullName: Assembly.LoadFile(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads the contents of an assembly file on the specified path.
  remarks: Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths.<xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the load-from  context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does. <xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.
  syntax:
    content: public static System.Reflection.Assembly LoadFile (string path);
    parameters:
    - id: path
      type: System.String
      description: The fully qualified path of the file to load.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.LoadFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>path</code> argument is not an absolute path.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>path</code> parameter is `null`.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: A file that was found could not be loaded.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: The <code>path</code> parameter is an empty string ("") or does not exist.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>path</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>path</code> was compiled with a later version."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)
  commentId: M:System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)
  id: LoadFile(System.String,System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: LoadFile(String, Evidence)
  nameWithType: Assembly.LoadFile(String, Evidence)
  fullName: Assembly.LoadFile(String, Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Loads an assembly given its path, loading the assembly into the domain of the caller using the supplied evidence.
  remarks: Use the <xref:System.Reflection.Assembly.LoadFile%2A> method to load and examine assemblies that have the same identity, but are located in different paths. <xref:System.Reflection.Assembly.LoadFile%2A> does not load files into the <xref:System.Reflection.Assembly.LoadFrom%2A> context, and does not resolve dependencies using the load path, as the <xref:System.Reflection.Assembly.LoadFrom%2A> method does. <xref:System.Reflection.Assembly.LoadFile%2A> is useful in this limited scenario because <xref:System.Reflection.Assembly.LoadFrom%2A> cannot be used to load assemblies that have the same identities but different paths; it will load only the first such assembly.
  syntax:
    content: >-
      [System.Obsolete]

      public static System.Reflection.Assembly LoadFile (string path, System.Security.Policy.Evidence securityEvidence);
    parameters:
    - id: path
      type: System.String
      description: The fully qualified path of the assembly file.
    - id: securityEvidence
      type: System.Security.Policy.Evidence
      description: Evidence for loading the assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.LoadFile*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>path</code> argument is not an absolute path.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>path</code> parameter is `null`.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: The <code>path</code> parameter is an empty string ("") or does not exist.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: A file that was found could not be loaded.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>path</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>path</code> was compiled with a later version."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: <code>securityEvidence</code> is not `null`. By default, legacy CAS policy is not enabled in the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]; when it is not enabled, <code>securityEvidence</code> must be `null`.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  commentId: M:System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  id: LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: LoadFrom(String, Evidence, Byte[], AssemblyHashAlgorithm)
  nameWithType: Assembly.LoadFrom(String, Evidence, Byte[], AssemblyHashAlgorithm)
  fullName: Assembly.LoadFrom(String, Evidence, Byte[], AssemblyHashAlgorithm)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Loads an assembly given its file name or path, security evidence, hash value, and hash algorithm.
  remarks: "The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  \n  \n> [!NOTE]\n>  File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.  \n  \n `assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.  \n  \n Assemblies can be loaded into one of three contexts, or can be loaded without context:  \n  \n-   The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.  \n  \n-   The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.  \n  \n-   The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.  \n  \n-   If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  \n  \n The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  \n  \n The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.  \n  \n-   If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.  \n  \n-   <xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.  \n  \n-   If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain neutral.  \n  \n-   In the .NET Framework version 1.0 and 1.1, policy is not applied.  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader.  \n  \n-   If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored."
  syntax:
    content: >-
      [System.Obsolete]

      public static System.Reflection.Assembly LoadFrom (string assemblyFile, System.Security.Policy.Evidence securityEvidence, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name or path of the file that contains the manifest of the assembly.
    - id: securityEvidence
      type: System.Security.Policy.Evidence
      description: Evidence for loading the assembly.
    - id: hashValue
      type: System.Byte[]
      description: The value of the computed hash code.
    - id: hashAlgorithm
      type: System.Configuration.Assemblies.AssemblyHashAlgorithm
      description: The hash algorithm used for hashing files and for generating the strong name.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.LoadFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>assemblyFile</code> is `null`.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "A file that was found could not be loaded.  \n  \n -or-  \n  \n The <code>securityEvidence</code> is not ambiguous and is determined to be invalid."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A codebase that does not start with "file://" was specified without the required <xref href="System.Net.WebPermission"></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>assemblyFile</code> parameter is an empty string ("").
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: The assembly name is longer than MAX_PATH characters.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  commentId: M:System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  id: LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: LoadFrom(String, Byte[], AssemblyHashAlgorithm)
  nameWithType: Assembly.LoadFrom(String, Byte[], AssemblyHashAlgorithm)
  fullName: Assembly.LoadFrom(String, Byte[], AssemblyHashAlgorithm)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads an assembly given its file name or path, hash value, and hash algorithm.
  remarks: "The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  \n  \n> [!NOTE]\n>  File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.  \n  \n `assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.  \n  \n Assemblies can be loaded into one of three contexts, or can be loaded without context:  \n  \n-   The load context contains assemblies found by probing: in the global assembly cache, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.  \n  \n-   The load-from context contains assemblies for which the user provided a path that is not included in probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.  \n  \n-   The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.  \n  \n-   If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  \n  \n The load-from context allows an assembly to be loaded from a path that is not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  \n  \n The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.  \n  \n-   If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.  \n  \n-   <xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.  \n  \n-   If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain-neutral.  \n  \n The assembly is loaded with the evidence that the loader supplies."
  syntax:
    content: public static System.Reflection.Assembly LoadFrom (string assemblyFile, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name or path of the file that contains the manifest of the assembly.
    - id: hashValue
      type: System.Byte[]
      description: The value of the computed hash code.
    - id: hashAlgorithm
      type: System.Configuration.Assemblies.AssemblyHashAlgorithm
      description: The hash algorithm used for hashing files and for generating the strong name.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.LoadFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>assemblyFile</code> is `null`.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyFile</code> is not found, or the module you are trying to load does not specify a file name extension.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: A file that was found could not be loaded.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  \n  \n -or-  \n  \n <code>assemblyFile</code> was compiled with a later version of the common language runtime than the version that is currently loaded."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A codebase that does not start with "file://" was specified without the required <xref href="System.Net.WebPermission"></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>assemblyFile</code> parameter is an empty string ("").
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: The assembly name is longer than MAX_PATH characters.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.LoadFrom(System.String)
  commentId: M:System.Reflection.Assembly.LoadFrom(System.String)
  id: LoadFrom(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: LoadFrom(String)
  nameWithType: Assembly.LoadFrom(String)
  fullName: Assembly.LoadFrom(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads an assembly given its file name or path.
  remarks: "The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  \n  \n> [!NOTE]\n>  File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.  \n  \n `assemblyFile` may be absolute or relative to the current directory, and the assembly is loaded into the domain of the caller.  \n  \n Assemblies can be loaded into one of three contexts, or can be loaded without context:  \n  \n-   The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.  \n  \n-   The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.  \n  \n-   The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.  \n  \n-   If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  \n  \n The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  \n  \n The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.  \n  \n-   If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is de-serialized.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.  \n  \n-   <xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.  \n  \n-   If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain neutral.  \n  \n-   In the .NET Framework version 1.0 and 1.1, policy is not applied."
  example:
  - "The following example loads an assembly given its file name or path.  \n  \n [!code-cpp[System.Reflection.Assembly#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/assembly.cpp#11)]\n [!code-csharp[System.Reflection.Assembly#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/assembly.cs#11)]\n [!code-vb[System.Reflection.Assembly#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/assembly.vb#11)]"
  syntax:
    content: public static System.Reflection.Assembly LoadFrom (string assemblyFile);
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name or path of the file that contains the manifest of the assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.LoadFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>assemblyFile</code> is `null`.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: A file that was found could not be loaded.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A codebase that does not start with "file://" was specified without the required <xref href="System.Net.WebPermission"></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>assemblyFile</code> parameter is an empty string ("").
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: The assembly name is longer than MAX_PATH characters.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)
  commentId: M:System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)
  id: LoadFrom(System.String,System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: LoadFrom(String, Evidence)
  nameWithType: Assembly.LoadFrom(String, Evidence)
  fullName: Assembly.LoadFrom(String, Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Loads an assembly given its file name or path and supplying security evidence.
  remarks: "The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  \n  \n> [!NOTE]\n>  File transfer protocol (FTP) is not supported. If the URI supplied for `assemblyFile` is an FTP address, the assembly is not loaded. No exception is thrown.  \n  \n `assemblyFile` may be absolute or  relative to the current directory, and the assembly is loaded into the domain of the caller.  \n  \n Assemblies can be loaded into one of three contexts, or can be loaded without context:  \n  \n-   The load context contains assemblies found by probing: in the GAC, in a host assembly store if the runtime is hosted, or in the <xref:System.AppDomainSetup.ApplicationBase%2A> and <xref:System.AppDomainSetup.PrivateBinPath%2A> of the application domain. Most overloads of the <xref:System.Reflection.Assembly.Load%2A> method load assemblies into this context.  \n  \n-   The load-from context contains assemblies for which the user provided a path not included in the directories searched by probing. <xref:System.Reflection.Assembly.LoadFrom%2A>, <xref:System.AppDomain.CreateInstanceFrom%2A>, and <xref:System.AppDomain.ExecuteAssembly%2A> are examples of methods that load by path.  \n  \n-   The reflection-only context contains assemblies loaded with the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> and <xref:System.Reflection.Assembly.ReflectionOnlyLoadFrom%2A> methods; code in these contexts cannot be executed.  \n  \n-   If the user generated or found the assembly, it is not in any context. This applies to assemblies loaded using overloads of the <xref:System.Reflection.Assembly.Load%2A> method that specify a byte array containing an assembly, and to transient dynamic assemblies created with reflection emit and not saved to disk.  \n  \n The load-from context allows an assembly to be loaded from a path not included in probing, and yet allows dependencies on that path to be found and loaded because the path information is maintained by the context.  \n  \n The <xref:System.Reflection.Assembly.LoadFrom%2A> method has the following disadvantages. Consider using <xref:System.Reflection.Assembly.Load%2A> instead.  \n  \n-   If an assembly with the same identity is already loaded, <xref:System.Reflection.Assembly.LoadFrom%2A> returns the loaded assembly even if a different path was specified.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and later an assembly in the load context attempts to load the same assembly by display name, the load attempt fails. This can occur when an assembly is deserialized.  \n  \n-   If an assembly is loaded with <xref:System.Reflection.Assembly.LoadFrom%2A>, and the probing path includes an assembly with the same identity but a different location, an <xref:System.InvalidCastException>, <xref:System.MissingMethodException>, or other unexpected behavior can occur.  \n  \n-   <xref:System.Reflection.Assembly.LoadFrom%2A> demands <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName> and <xref:System.Security.Permissions.FileIOPermissionAccess?displayProperty=fullName>, or <xref:System.Net.WebPermission>, on the specified path.  \n  \n-   If a native image exists for `assemblyFile`, it is not used. The assembly cannot be loaded as domain neutral.  \n  \n-   In the .NET Framework version 1.0 and 1.1, policy is not applied.  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with no <xref:System.Security.Policy.Evidence> parameter, the assembly is loaded with the evidence that the loader supplies.  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with an <xref:System.Security.Policy.Evidence> parameter, pieces of evidence are merged. Pieces of evidence supplied as an argument to the <xref:System.Reflection.Assembly.LoadFrom%2A> method supersede pieces of evidence supplied by the loader.  \n  \n-   If you call this method more than once on the same assembly but with a different evidence specified, the common language runtime does not throw a <xref:System.IO.FileLoadException> because the equality and integrity of the different evidence specifications cannot be determined. The evidence that first succeeds is the evidence that is used.  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter to load a common object file format (COFF) image, evidence is combined. `Zone`, `Url` and `Site` are inherited from the calling assembly, and `Hash` and `StrongName` are taken from the COFF assembly.  \n  \n-   When you use a <xref:System.Reflection.Assembly.LoadFrom%2A> method with a `Byte[]` parameter and <xref:System.Security.Policy.Evidence> to load a COFF image, only the supplied evidence is used. Evidence of the calling assembly and evidence of the COFF image is ignored."
  syntax:
    content: >-
      [System.Obsolete]

      public static System.Reflection.Assembly LoadFrom (string assemblyFile, System.Security.Policy.Evidence securityEvidence);
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name or path of the file that contains the manifest of the assembly.
    - id: securityEvidence
      type: System.Security.Policy.Evidence
      description: Evidence for loading the assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.LoadFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>assemblyFile</code> is `null`.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "A file that was found could not be loaded.  \n  \n -or-  \n  \n The <code>securityEvidence</code> is not ambiguous and is determined to be invalid."
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code> is not a valid assembly; for example, a 32-bit assembly in a 64-bit process. See the exception topic for more information.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A codebase that does not start with "file://" was specified without the required <xref href="System.Net.WebPermission"></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>assemblyFile</code> parameter is an empty string ("").
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: The assembly name is longer than MAX_PATH characters.
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.LoadModule(System.String,System.Byte[])
  commentId: M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[])
  id: LoadModule(System.String,System.Byte[])
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: LoadModule(String, Byte[])
  nameWithType: Assembly.LoadModule(String, Byte[])
  fullName: Assembly.LoadModule(String, Byte[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file.
  syntax:
    content: public System.Reflection.Module LoadModule (string moduleName, byte[] rawModule);
    parameters:
    - id: moduleName
      type: System.String
      description: The name of the module. This string must correspond to a file name in this assembly's manifest.
    - id: rawModule
      type: System.Byte[]
      description: A byte array that is a COFF-based image containing an emitted module, or a resource.
    return:
      type: System.Reflection.Module
      description: The loaded module.
  overload: System.Reflection.Assembly.LoadModule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>moduleName</code> or <code>rawModule</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>moduleName</code> does not match a file entry in this assembly's manifest.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: <code>rawModule</code> is not a valid module.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: A file that was found could not be loaded.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])
  commentId: M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])
  id: LoadModule(System.String,System.Byte[],System.Byte[])
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: LoadModule(String, Byte[], Byte[])
  nameWithType: Assembly.LoadModule(String, Byte[], Byte[])
  fullName: Assembly.LoadModule(String, Byte[], Byte[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads the module, internal to this assembly, with a common object file format (COFF)-based image containing an emitted module, or a resource file. The raw bytes representing the symbols for the module are also loaded.
  syntax:
    content: public virtual System.Reflection.Module LoadModule (string moduleName, byte[] rawModule, byte[] rawSymbolStore);
    parameters:
    - id: moduleName
      type: System.String
      description: The name of the module. This string must correspond to a file name in this assembly's manifest.
    - id: rawModule
      type: System.Byte[]
      description: A byte array that is a COFF-based image containing an emitted module, or a resource.
    - id: rawSymbolStore
      type: System.Byte[]
      description: A byte array containing the raw bytes representing the symbols for the module. Must be `null` if this is a resource file.
    return:
      type: System.Reflection.Module
      description: The loaded module.
  overload: System.Reflection.Assembly.LoadModule*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>moduleName</code> or <code>rawModule</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>moduleName</code> does not match a file entry in this assembly's manifest.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: <code>rawModule</code> is not a valid module.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: A file that was found could not be loaded.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.LoadWithPartialName(System.String)
  commentId: M:System.Reflection.Assembly.LoadWithPartialName(System.String)
  id: LoadWithPartialName(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: LoadWithPartialName(String)
  nameWithType: Assembly.LoadWithPartialName(String)
  fullName: Assembly.LoadWithPartialName(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads an assembly from the application directory or from the global assembly cache using a partial name.
  remarks: "> [!IMPORTANT]\n>  The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%29> method is obsolete and has been retained for backward compatibility. The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=fullName>.  \n  \n Applications that load assemblies with this method will be affected by upgrades of those assemblies. Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%28System.String%29> method overload or the <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> method overload.  \n  \n This method first calls <xref:System.Reflection.Assembly.Load%2A>. If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number."
  syntax:
    content: >-
      [System.Obsolete]

      public static System.Reflection.Assembly LoadWithPartialName (string partialName);
    parameters:
    - id: partialName
      type: System.String
      description: The display name of the assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly. If <code>partialName</code> is not found, this method returns `null`.
  overload: System.Reflection.Assembly.LoadWithPartialName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>partialName</code> parameter is `null`.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>partialName</code> was compiled with a later version."
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)
  commentId: M:System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)
  id: LoadWithPartialName(System.String,System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: LoadWithPartialName(String, Evidence)
  nameWithType: Assembly.LoadWithPartialName(String, Evidence)
  fullName: Assembly.LoadWithPartialName(String, Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Loads an assembly from the application directory or from the global assembly cache using a partial name. The assembly is loaded into the domain of the caller using the supplied evidence.
  remarks: "> [!IMPORTANT]\n>  The <xref:System.Reflection.Assembly.LoadWithPartialName%28System.String%2CSystem.Security.Policy.Evidence%29> method is obsolete and has been retained for backward compatibility. The non-obsolete alternative is <xref:System.Reflection.Assembly.Load%28System.String%29?displayProperty=fullName>.  \n  \n Evidence is the set of information that constitutes input to security policy decisions, such as what permissions can be granted to code.  \n  \n Applications that load assemblies with this method will be affected by upgrades of those assemblies. Therefore, do not use this method; redesign the application to use the <xref:System.Reflection.Assembly.Load%2A> method or the <xref:System.Reflection.Assembly.LoadFrom%2A> method.  \n  \n This method first calls <xref:System.Reflection.Assembly.Load%2A>. If the assembly is not found, this method returns the assembly from the global assembly cache that has the same simple name, and the highest version number."
  syntax:
    content: >-
      [System.Obsolete]

      public static System.Reflection.Assembly LoadWithPartialName (string partialName, System.Security.Policy.Evidence securityEvidence);
    parameters:
    - id: partialName
      type: System.String
      description: The display name of the assembly.
    - id: securityEvidence
      type: System.Security.Policy.Evidence
      description: Evidence for loading the assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly. If <code>partialName</code> is not found, this method returns `null`.
  overload: System.Reflection.Assembly.LoadWithPartialName*
  exceptions:
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: An assembly or module was loaded twice with two different sets of evidence.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>partialName</code> parameter is `null`.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>partialName</code> was compiled with a later version."
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.Location
  commentId: P:System.Reflection.Assembly.Location
  id: Location
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: Location
  nameWithType: Assembly.Location
  fullName: Assembly.Location
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the full path or UNC location of the loaded file that contains the manifest.
  remarks: To get the location before the file has been shadow-copied, use the <xref:System.Reflection.Assembly.CodeBase%2A> property.
  example:
  - "The following example displays the location of the loaded file that contains the manifest.  \n  \n [!code-cpp[System.Reflection.Assembly#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.Assembly/CPP/assembly.cpp#3)]\n [!code-csharp[System.Reflection.Assembly#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.Assembly/CS/assembly.cs#3)]\n [!code-vb[System.Reflection.Assembly#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.Assembly/VB/assembly.vb#3)]"
  syntax:
    content: public virtual string Location { get; }
    return:
      type: System.String
      description: The location of the loaded file that contains the manifest. If the loaded file was shadow-copied, the location is that of the file after being shadow-copied. If the assembly is loaded from a byte array, such as when using the <xref href="System.Reflection.Assembly.Load(System.Byte[])"></xref> method overload, the value returned is an empty string ("").
  overload: System.Reflection.Assembly.Location*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The current assembly is a dynamic assembly, represented by an <xref href="System.Reflection.Emit.AssemblyBuilder"></xref> object.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.ManifestModule
  commentId: P:System.Reflection.Assembly.ManifestModule
  id: ManifestModule
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: ManifestModule
  nameWithType: Assembly.ManifestModule
  fullName: Assembly.ManifestModule
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets the module that contains the manifest for the current assembly.
  syntax:
    content: public virtual System.Reflection.Module ManifestModule { get; }
    return:
      type: System.Reflection.Module
      description: The module that contains the manifest for the assembly.
  overload: System.Reflection.Assembly.ManifestModule*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.ModuleResolve
  commentId: E:System.Reflection.Assembly.ModuleResolve
  id: ModuleResolve
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: ModuleResolve
  nameWithType: Assembly.ModuleResolve
  fullName: Assembly.ModuleResolve
  type: Event
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Occurs when the common language runtime class loader cannot resolve a reference to an internal module of an assembly through normal means.
  remarks: This event gives the callback a chance to find and load the module itself and return it.
  syntax:
    content: public virtual event System.Reflection.ModuleResolveEventHandler ModuleResolve;
    return:
      type: System.Reflection.ModuleResolveEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.Modules
  commentId: P:System.Reflection.Assembly.Modules
  id: Modules
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: Modules
  nameWithType: Assembly.Modules
  fullName: Assembly.Modules
  type: Property
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a collection that contains the modules in this assembly.
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Reflection.Module> Modules { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.Module}
      description: A collection that contains the modules in this assembly.
  overload: System.Reflection.Assembly.Modules*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)
  commentId: M:System.Reflection.Assembly.op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)
  id: op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: op_Equality(Assembly, Assembly)
  nameWithType: Assembly.op_Equality(Assembly, Assembly)
  fullName: Assembly.op_Equality(Assembly, Assembly)
  type: Operator
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Indicates whether two <xref href="System.Reflection.Assembly"></xref> objects are equal.
  syntax:
    content: public static bool op_Equality (System.Reflection.Assembly left, System.Reflection.Assembly right);
    parameters:
    - id: left
      type: System.Reflection.Assembly
      description: The assembly to compare to <code>right</code>.
    - id: right
      type: System.Reflection.Assembly
      description: The assembly to compare to <code>left</code>.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is equal to <code>right</code>; otherwise, `false`.'
  overload: System.Reflection.Assembly.op_Equality*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)
  commentId: M:System.Reflection.Assembly.op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)
  id: op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: op_Inequality(Assembly, Assembly)
  nameWithType: Assembly.op_Inequality(Assembly, Assembly)
  fullName: Assembly.op_Inequality(Assembly, Assembly)
  type: Operator
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Indicates whether two <xref href="System.Reflection.Assembly"></xref> objects are not equal.
  syntax:
    content: public static bool op_Inequality (System.Reflection.Assembly left, System.Reflection.Assembly right);
    parameters:
    - id: left
      type: System.Reflection.Assembly
      description: The assembly to compare to <code>right</code>.
    - id: right
      type: System.Reflection.Assembly
      description: The assembly to compare to <code>left</code>.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is not equal to <code>right</code>; otherwise, `false`.'
  overload: System.Reflection.Assembly.op_Inequality*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.PermissionSet
  commentId: P:System.Reflection.Assembly.PermissionSet
  id: PermissionSet
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: PermissionSet
  nameWithType: Assembly.PermissionSet
  fullName: Assembly.PermissionSet
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Gets the grant set of the current assembly.
  remarks: <xref:System.Security.PermissionSet> objects can contain sensitive information such as paths. Therefore, full trust is required to access these objects.
  syntax:
    content: public virtual System.Security.PermissionSet PermissionSet { get; }
    return:
      type: System.Security.PermissionSet
      description: The grant set of the current assembly.
  overload: System.Reflection.Assembly.PermissionSet*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.ReflectionOnly
  commentId: P:System.Reflection.Assembly.ReflectionOnly
  id: ReflectionOnly
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: ReflectionOnly
  nameWithType: Assembly.ReflectionOnly
  fullName: Assembly.ReflectionOnly
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a <xref href="System.Boolean"></xref> value indicating whether this assembly was loaded into the reflection-only context.
  remarks: If an assembly has been loaded into the reflection-only context, using the <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A> method, you cannot execute code in the assembly. To execute code, the assembly must be loaded into the execution context.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public virtual bool ReflectionOnly { get; }
    return:
      type: System.Boolean
      description: '`true` if the assembly was loaded into the reflection-only context, rather than the execution context; otherwise, `false`.'
  overload: System.Reflection.Assembly.ReflectionOnly*
  exceptions: []
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])
  commentId: M:System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])
  id: ReflectionOnlyLoad(System.Byte[])
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: ReflectionOnlyLoad(Byte[])
  nameWithType: Assembly.ReflectionOnlyLoad(Byte[])
  fullName: Assembly.ReflectionOnlyLoad(Byte[])
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads the assembly from a common object file format (COFF)-based image containing an emitted assembly. The assembly is loaded into the reflection-only context of the caller's application domain.
  remarks: "You cannot execute code from an assembly loaded into the reflection-only context. To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method.  \n  \n The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain."
  syntax:
    content: public static System.Reflection.Assembly ReflectionOnlyLoad (byte[] rawAssembly);
    parameters:
    - id: rawAssembly
      type: System.Byte[]
      description: A byte array that is a COFF-based image containing an emitted assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.ReflectionOnlyLoad*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>rawAssembly</code> is `null`.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>rawAssembly</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>rawAssembly</code> was compiled with a later version."
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: <code>rawAssembly</code> cannot be loaded.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.ReflectionOnlyLoad(System.String)
  commentId: M:System.Reflection.Assembly.ReflectionOnlyLoad(System.String)
  id: ReflectionOnlyLoad(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: ReflectionOnlyLoad(String)
  nameWithType: Assembly.ReflectionOnlyLoad(String)
  fullName: Assembly.ReflectionOnlyLoad(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads an assembly into the reflection-only context, given its display name.
  remarks: "Dependencies are not automatically loaded into the reflection-only context.  \n  \n You cannot execute code from an assembly loaded into the reflection-only context. To execute code, the assembly must be loaded into the execution context as well, using the <xref:System.Reflection.Assembly.Load%2A> method.  \n  \n Whether certain permissions are granted or not granted to an assembly is based on evidence. The rules for assembly and security evidence merging are as follows:  \n  \n> [!NOTE]\n>  Reflecting on executable files compiled in C++ might throw a <xref:System.IO.FileLoadException>. This is most likely caused by the C++ compiler stripping the relocation addresses or the .reloc section from your executable file. To preserve the .reloc address, specify `/fixed:no` when you are linking.  \n  \n The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain."
  syntax:
    content: public static System.Reflection.Assembly ReflectionOnlyLoad (string assemblyString);
    parameters:
    - id: assemblyString
      type: System.String
      description: The display name of the assembly, as returned by the <xref href="System.Reflection.AssemblyName.FullName"></xref> property.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.ReflectionOnlyLoad*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>assemblyString</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>assemblyString</code> is an empty string ("").
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyString</code> is not found.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: <code>assemblyString</code> is found, but cannot be loaded.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyString</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyString</code> was compiled with a later version."
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)
  commentId: M:System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)
  id: ReflectionOnlyLoadFrom(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: ReflectionOnlyLoadFrom(String)
  nameWithType: Assembly.ReflectionOnlyLoadFrom(String)
  fullName: Assembly.ReflectionOnlyLoadFrom(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads an assembly into the reflection-only context, given its path.
  remarks: "Dependencies are not automatically loaded into the reflection-only context. To automatically load dependencies, handle the <xref:System.AppDomain.ReflectionOnlyAssemblyResolve> event and load the dependency in the event handler.  \n  \n You cannot execute code from an assembly that has been loaded into the reflection-only context. To execute the code, load the assembly with the <xref:System.Reflection.Assembly.LoadFile%2A> method.  \n  \n The `assemblyFile` parameter must refer to a URI without escape characters. This method supplies escape characters for all invalid characters in the URI.  \n  \n The path specified for `assemblyFile` is relative to the current directory. The assembly is loaded into the domain of the caller.  \n  \n The reflection-only context is no different from other contexts. Assemblies that are loaded into the context can be unloaded only by unloading the application domain."
  syntax:
    content: public static System.Reflection.Assembly ReflectionOnlyLoadFrom (string assemblyFile);
    parameters:
    - id: assemblyFile
      type: System.String
      description: The path of the file that contains the manifest of the assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.ReflectionOnlyLoadFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>assemblyFile</code> is `null`.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyFile</code> is not found, or the module you are trying to load does not specify a file name extension.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: <code>assemblyFile</code> is found, but could not be loaded.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code> is not a valid assembly.  \n  \n -or-  \n  \n Version 2.0 or later of the common language runtime is currently loaded and <code>assemblyFile</code> was compiled with a later version."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A codebase that does not start with "file://" was specified without the required <xref href="System.Net.WebPermission"></xref>.
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: The assembly name is longer than MAX_PATH characters.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>assemblyFile</code> is an empty string ("").
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.SecurityRuleSet
  commentId: P:System.Reflection.Assembly.SecurityRuleSet
  id: SecurityRuleSet
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: SecurityRuleSet
  nameWithType: Assembly.SecurityRuleSet
  fullName: Assembly.SecurityRuleSet
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Gets a value that indicates which set of security rules the common language runtime (CLR) enforces for this assembly.
  remarks: "By default, assemblies that you compile with the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] have  transparency, although you can explicitly make them  instead. Assemblies that were compiled with earlier versions of the .NET Framework have level 1 transparency.  \n  \n See [Security Changes](~/docs/framework/security/security-changes.md)."
  syntax:
    content: public virtual System.Security.SecurityRuleSet SecurityRuleSet { get; }
    return:
      type: System.Security.SecurityRuleSet
      description: The security rule set that the CLR enforces for this assembly.
  overload: System.Reflection.Assembly.SecurityRuleSet*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.ToString
  commentId: M:System.Reflection.Assembly.ToString
  id: ToString
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: ToString()
  nameWithType: Assembly.ToString()
  fullName: Assembly.ToString()
  type: Method
  assemblies:
  - System.Reflection
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Returns the full name of the assembly, also known as the display name.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The full name of the assembly, or the class name if the full name of the assembly cannot be determined.
  overload: System.Reflection.Assembly.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.UnsafeLoadFrom(System.String)
  commentId: M:System.Reflection.Assembly.UnsafeLoadFrom(System.String)
  id: UnsafeLoadFrom(System.String)
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: UnsafeLoadFrom(String)
  nameWithType: Assembly.UnsafeLoadFrom(String)
  fullName: Assembly.UnsafeLoadFrom(String)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Runtime
  namespace: System.Reflection
  summary: Loads an assembly into the load-from context, bypassing some security checks.
  remarks: "Use this method to load a local assembly that the operating system has flagged as having been loaded from the Web (for example, a temporary file that was downloaded from the Internet or intranet). Before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], such assemblies were automatically loaded into a sandboxed application domain. Starting with the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], they are loaded with full trust.  \n  \n As an alternative to using this method, you can apply the [\\&lt;NetFx40_LegacySecurityPolicy\\&gt; Element](~/docs/framework/configure-apps/file-schema/runtime/netfx40-legacysecuritypolicy-element.md) in your application configuration file. This causes the common language runtime to revert to the security policy of the [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)].  \n  \n> [!CAUTION]\n>  If you use either of these solutions, you must be certain that it is safe to load `assemblyFile` with full trust.  \n  \n For a discussion of load contexts, including the load-from context, see the <xref:System.Reflection.Assembly.LoadFrom%28System.String%29> method overload."
  syntax:
    content: public static System.Reflection.Assembly UnsafeLoadFrom (string assemblyFile);
    parameters:
    - id: assemblyFile
      type: System.String
      description: The name or path of the file that contains the manifest of the assembly.
    return:
      type: System.Reflection.Assembly
      description: The loaded assembly.
  overload: System.Reflection.Assembly.UnsafeLoadFrom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>assemblyFile</code> is `null`.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: <code>assemblyFile</code> is not found, or the module you are trying to load does not specify a filename extension.
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: A file that was found could not be loaded.
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: "<code>assemblyFile</code> is not a valid assembly.  \n  \n -or-  \n  \n <code>assemblyFile</code> was compiled with a later version of the common language runtime than the version that is currently loaded."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: A codebase that does not start with "file://" was specified without the required <xref href="System.Net.WebPermission"></xref>.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <code>assemblyFile</code> parameter is an empty string ("").
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: The assembly name is longer than MAX_PATH characters.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  commentId: M:System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  isEii: true
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  nameWithType: Assembly.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  fullName: Assembly.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  type: Method
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: object[] ICustomAttributeProvider.GetCustomAttributes (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: ''
    - id: inherit
      type: System.Boolean
      description: ''
    return:
      type: System.Object[]
      description: ''
  overload: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  commentId: M:System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  isEii: true
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)
  nameWithType: Assembly.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  fullName: Assembly.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  type: Method
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: object[] ICustomAttributeProvider.GetCustomAttributes (bool inherit);
    parameters:
    - id: inherit
      type: System.Boolean
      description: ''
    return:
      type: System.Object[]
      description: ''
  overload: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  commentId: M:System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  id: System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  isEii: true
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: ICustomAttributeProvider.IsDefined(Type, Boolean)
  nameWithType: Assembly.ICustomAttributeProvider.IsDefined(Type, Boolean)
  fullName: Assembly.ICustomAttributeProvider.IsDefined(Type, Boolean)
  type: Method
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: bool ICustomAttributeProvider.IsDefined (Type attributeType, bool inherit);
    parameters:
    - id: attributeType
      type: System.Type
      description: ''
    - id: inherit
      type: System.Boolean
      description: ''
    return:
      type: System.Boolean
      description: ''
  overload: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType
  commentId: M:System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType
  id: System#Runtime#InteropServices#_Assembly#GetType
  isEii: true
  parent: System.Reflection.Assembly
  langs:
  - csharp
  name: _Assembly.GetType()
  nameWithType: Assembly._Assembly.GetType()
  fullName: Assembly._Assembly.GetType()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: Returns the type of the current instance.
  syntax:
    content: Type _Assembly.GetType ();
    parameters: []
    return:
      type: System.Type
      description: An object that represents the <xref href="System.Reflection.Assembly"></xref> type.
  overload: System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.MissingMethodException
  parent: System
  isExternal: false
  name: MissingMethodException
  nameWithType: MissingMethodException
  fullName: System.MissingMethodException
- uid: System.IO.FileNotFoundException
  parent: System.IO
  isExternal: false
  name: FileNotFoundException
  nameWithType: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.IO.FileLoadException
  parent: System.IO
  isExternal: false
  name: FileLoadException
  nameWithType: FileLoadException
  fullName: System.IO.FileLoadException
- uid: System.BadImageFormatException
  parent: System
  isExternal: false
  name: BadImageFormatException
  nameWithType: BadImageFormatException
  fullName: System.BadImageFormatException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.NotImplementedException
  parent: System
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.TypeLoadException
  parent: System
  isExternal: false
  name: TypeLoadException
  nameWithType: TypeLoadException
  fullName: System.TypeLoadException
- uid: System.Reflection.ReflectionTypeLoadException
  parent: System.Reflection
  isExternal: false
  name: ReflectionTypeLoadException
  nameWithType: ReflectionTypeLoadException
  fullName: System.Reflection.ReflectionTypeLoadException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Security.SecurityException
  parent: System.Security
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.IO.PathTooLongException
  parent: System.IO
  isExternal: false
  name: PathTooLongException
  nameWithType: PathTooLongException
  fullName: System.IO.PathTooLongException
- uid: System.Reflection.Assembly.#ctor
  parent: System.Reflection.Assembly
  isExternal: false
  name: Assembly()
  nameWithType: Assembly.Assembly()
  fullName: Assembly.Assembly()
- uid: System.Reflection.Assembly.CodeBase
  parent: System.Reflection.Assembly
  isExternal: false
  name: CodeBase
  nameWithType: Assembly.CodeBase
  fullName: Assembly.CodeBase
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Assembly.CreateInstance(System.String)
  parent: System.Reflection.Assembly
  isExternal: false
  name: CreateInstance(String)
  nameWithType: Assembly.CreateInstance(String)
  fullName: Assembly.CreateInstance(String)
- uid: System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: false
  name: CreateInstance(String, Boolean)
  nameWithType: Assembly.CreateInstance(String, Boolean)
  fullName: Assembly.CreateInstance(String, Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Reflection.Assembly
  isExternal: false
  name: CreateInstance(String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  nameWithType: Assembly.CreateInstance(String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  fullName: Assembly.CreateInstance(String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Object[]
  parent: System
  isExternal: false
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)
  parent: System.Reflection.Assembly
  isExternal: false
  name: CreateQualifiedName(String, String)
  nameWithType: Assembly.CreateQualifiedName(String, String)
  fullName: Assembly.CreateQualifiedName(String, String)
- uid: System.Reflection.Assembly.CustomAttributes
  parent: System.Reflection.Assembly
  isExternal: false
  name: CustomAttributes
  nameWithType: Assembly.CustomAttributes
  fullName: Assembly.CustomAttributes
- uid: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Reflection.CustomAttributeData
  name: CustomAttributeData
  nameWithType: CustomAttributeData
  fullName: System.Reflection.CustomAttributeData
- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<CustomAttributeData>
  nameWithType: IEnumerable<CustomAttributeData>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    nameWithType: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.Assembly.DefinedTypes
  parent: System.Reflection.Assembly
  isExternal: false
  name: DefinedTypes
  nameWithType: Assembly.DefinedTypes
  fullName: Assembly.DefinedTypes
- uid: System.Reflection.TypeInfo
  name: TypeInfo
  nameWithType: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TypeInfo>
  nameWithType: IEnumerable<TypeInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: System.Reflection.TypeInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.Assembly.EntryPoint
  parent: System.Reflection.Assembly
  isExternal: false
  name: EntryPoint
  nameWithType: Assembly.EntryPoint
  fullName: Assembly.EntryPoint
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.Assembly.Equals(System.Object)
  parent: System.Reflection.Assembly
  isExternal: false
  name: Equals(Object)
  nameWithType: Assembly.Equals(Object)
  fullName: Assembly.Equals(Object)
- uid: System.Reflection.Assembly.EscapedCodeBase
  parent: System.Reflection.Assembly
  isExternal: false
  name: EscapedCodeBase
  nameWithType: Assembly.EscapedCodeBase
  fullName: Assembly.EscapedCodeBase
- uid: System.Reflection.Assembly.Evidence
  parent: System.Reflection.Assembly
  isExternal: false
  name: Evidence
  nameWithType: Assembly.Evidence
  fullName: Assembly.Evidence
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.Reflection.Assembly.ExportedTypes
  parent: System.Reflection.Assembly
  isExternal: false
  name: ExportedTypes
  nameWithType: Assembly.ExportedTypes
  fullName: Assembly.ExportedTypes
- uid: System.Type
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.Assembly.FullName
  parent: System.Reflection.Assembly
  isExternal: false
  name: FullName
  nameWithType: Assembly.FullName
  fullName: Assembly.FullName
- uid: System.Reflection.Assembly.GetAssembly(System.Type)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetAssembly(Type)
  nameWithType: Assembly.GetAssembly(Type)
  fullName: Assembly.GetAssembly(Type)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.Assembly.GetCallingAssembly
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetCallingAssembly()
  nameWithType: Assembly.GetCallingAssembly()
  fullName: Assembly.GetCallingAssembly()
- uid: System.Reflection.Assembly.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetCustomAttributes(Boolean)
  nameWithType: Assembly.GetCustomAttributes(Boolean)
  fullName: Assembly.GetCustomAttributes(Boolean)
- uid: System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetCustomAttributes(Type, Boolean)
  nameWithType: Assembly.GetCustomAttributes(Type, Boolean)
  fullName: Assembly.GetCustomAttributes(Type, Boolean)
- uid: System.Reflection.Assembly.GetCustomAttributesData
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetCustomAttributesData()
  nameWithType: Assembly.GetCustomAttributesData()
  fullName: Assembly.GetCustomAttributesData()
- uid: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
- uid: System.Collections.Generic.IList{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<CustomAttributeData>
  nameWithType: IList<CustomAttributeData>
  fullName: System.Collections.Generic.IList<System.Reflection.CustomAttributeData>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    nameWithType: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.Assembly.GetEntryAssembly
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetEntryAssembly()
  nameWithType: Assembly.GetEntryAssembly()
  fullName: Assembly.GetEntryAssembly()
- uid: System.Reflection.Assembly.GetExecutingAssembly
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetExecutingAssembly()
  nameWithType: Assembly.GetExecutingAssembly()
  fullName: Assembly.GetExecutingAssembly()
- uid: System.Reflection.Assembly.GetExportedTypes
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetExportedTypes()
  nameWithType: Assembly.GetExportedTypes()
  fullName: Assembly.GetExportedTypes()
- uid: System.Type[]
  parent: System
  isExternal: false
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Assembly.GetFile(System.String)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetFile(String)
  nameWithType: Assembly.GetFile(String)
  fullName: Assembly.GetFile(String)
- uid: System.IO.FileStream
  parent: System.IO
  isExternal: false
  name: FileStream
  nameWithType: FileStream
  fullName: System.IO.FileStream
- uid: System.Reflection.Assembly.GetFiles
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetFiles()
  nameWithType: Assembly.GetFiles()
  fullName: Assembly.GetFiles()
- uid: System.IO.FileStream[]
  parent: System.IO
  isExternal: false
  name: FileStream[]
  nameWithType: FileStream[]
  fullName: System.IO.FileStream[]
  spec.csharp:
  - uid: System.IO.FileStream
    name: FileStream
    nameWithType: FileStream
    fullName: System.IO.FileStream
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Assembly.GetFiles(System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetFiles(Boolean)
  nameWithType: Assembly.GetFiles(Boolean)
  fullName: Assembly.GetFiles(Boolean)
- uid: System.Reflection.Assembly.GetHashCode
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetHashCode()
  nameWithType: Assembly.GetHashCode()
  fullName: Assembly.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Assembly.GetLoadedModules
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetLoadedModules()
  nameWithType: Assembly.GetLoadedModules()
  fullName: Assembly.GetLoadedModules()
- uid: System.Reflection.Module
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.Module[]
  parent: System.Reflection
  isExternal: false
  name: Module[]
  nameWithType: Module[]
  fullName: System.Reflection.Module[]
  spec.csharp:
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Assembly.GetLoadedModules(System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetLoadedModules(Boolean)
  nameWithType: Assembly.GetLoadedModules(Boolean)
  fullName: Assembly.GetLoadedModules(Boolean)
- uid: System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetManifestResourceInfo(String)
  nameWithType: Assembly.GetManifestResourceInfo(String)
  fullName: Assembly.GetManifestResourceInfo(String)
- uid: System.Reflection.ManifestResourceInfo
  parent: System.Reflection
  isExternal: false
  name: ManifestResourceInfo
  nameWithType: ManifestResourceInfo
  fullName: System.Reflection.ManifestResourceInfo
- uid: System.Reflection.Assembly.GetManifestResourceNames
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetManifestResourceNames()
  nameWithType: Assembly.GetManifestResourceNames()
  fullName: Assembly.GetManifestResourceNames()
- uid: System.String[]
  parent: System
  isExternal: false
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetManifestResourceStream(Type, String)
  nameWithType: Assembly.GetManifestResourceStream(Type, String)
  fullName: Assembly.GetManifestResourceStream(Type, String)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Reflection.Assembly.GetManifestResourceStream(System.String)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetManifestResourceStream(String)
  nameWithType: Assembly.GetManifestResourceStream(String)
  fullName: Assembly.GetManifestResourceStream(String)
- uid: System.Reflection.Assembly.GetModule(System.String)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetModule(String)
  nameWithType: Assembly.GetModule(String)
  fullName: Assembly.GetModule(String)
- uid: System.Reflection.Assembly.GetModules
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetModules()
  nameWithType: Assembly.GetModules()
  fullName: Assembly.GetModules()
- uid: System.Reflection.Assembly.GetModules(System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetModules(Boolean)
  nameWithType: Assembly.GetModules(Boolean)
  fullName: Assembly.GetModules(Boolean)
- uid: System.Reflection.Assembly.GetName
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetName()
  nameWithType: Assembly.GetName()
  fullName: Assembly.GetName()
- uid: System.Reflection.AssemblyName
  parent: System.Reflection
  isExternal: false
  name: AssemblyName
  nameWithType: AssemblyName
  fullName: System.Reflection.AssemblyName
- uid: System.Reflection.Assembly.GetName(System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetName(Boolean)
  nameWithType: Assembly.GetName(Boolean)
  fullName: Assembly.GetName(Boolean)
- uid: System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Assembly.GetObjectData(SerializationInfo, StreamingContext)
  fullName: Assembly.GetObjectData(SerializationInfo, StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: false
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Reflection.Assembly.GetReferencedAssemblies
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetReferencedAssemblies()
  nameWithType: Assembly.GetReferencedAssemblies()
  fullName: Assembly.GetReferencedAssemblies()
- uid: System.Reflection.AssemblyName[]
  parent: System.Reflection
  isExternal: false
  name: AssemblyName[]
  nameWithType: AssemblyName[]
  fullName: System.Reflection.AssemblyName[]
  spec.csharp:
  - uid: System.Reflection.AssemblyName
    name: AssemblyName
    nameWithType: AssemblyName
    fullName: System.Reflection.AssemblyName
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetSatelliteAssembly(CultureInfo, Version)
  nameWithType: Assembly.GetSatelliteAssembly(CultureInfo, Version)
  fullName: Assembly.GetSatelliteAssembly(CultureInfo, Version)
- uid: System.Version
  parent: System
  isExternal: false
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetSatelliteAssembly(CultureInfo)
  nameWithType: Assembly.GetSatelliteAssembly(CultureInfo)
  fullName: Assembly.GetSatelliteAssembly(CultureInfo)
- uid: System.Reflection.Assembly.GetType(System.String,System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetType(String, Boolean)
  nameWithType: Assembly.GetType(String, Boolean)
  fullName: Assembly.GetType(String, Boolean)
- uid: System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetType(String, Boolean, Boolean)
  nameWithType: Assembly.GetType(String, Boolean, Boolean)
  fullName: Assembly.GetType(String, Boolean, Boolean)
- uid: System.Reflection.Assembly.GetType(System.String)
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetType(String)
  nameWithType: Assembly.GetType(String)
  fullName: Assembly.GetType(String)
- uid: System.Reflection.Assembly.GetTypes
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetTypes()
  nameWithType: Assembly.GetTypes()
  fullName: Assembly.GetTypes()
- uid: System.Reflection.Assembly.GlobalAssemblyCache
  parent: System.Reflection.Assembly
  isExternal: false
  name: GlobalAssemblyCache
  nameWithType: Assembly.GlobalAssemblyCache
  fullName: Assembly.GlobalAssemblyCache
- uid: System.Reflection.Assembly.HostContext
  parent: System.Reflection.Assembly
  isExternal: false
  name: HostContext
  nameWithType: Assembly.HostContext
  fullName: Assembly.HostContext
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Reflection.Assembly.ImageRuntimeVersion
  parent: System.Reflection.Assembly
  isExternal: false
  name: ImageRuntimeVersion
  nameWithType: Assembly.ImageRuntimeVersion
  fullName: Assembly.ImageRuntimeVersion
- uid: System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: false
  name: IsDefined(Type, Boolean)
  nameWithType: Assembly.IsDefined(Type, Boolean)
  fullName: Assembly.IsDefined(Type, Boolean)
- uid: System.Reflection.Assembly.IsDynamic
  parent: System.Reflection.Assembly
  isExternal: false
  name: IsDynamic
  nameWithType: Assembly.IsDynamic
  fullName: Assembly.IsDynamic
- uid: System.Reflection.Assembly.IsFullyTrusted
  parent: System.Reflection.Assembly
  isExternal: false
  name: IsFullyTrusted
  nameWithType: Assembly.IsFullyTrusted
  fullName: Assembly.IsFullyTrusted
- uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  parent: System.Reflection.Assembly
  isExternal: false
  name: Load(AssemblyName)
  nameWithType: Assembly.Load(AssemblyName)
  fullName: Assembly.Load(AssemblyName)
- uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)
  parent: System.Reflection.Assembly
  isExternal: false
  name: Load(Byte[], Byte[], SecurityContextSource)
  nameWithType: Assembly.Load(Byte[], Byte[], SecurityContextSource)
  fullName: Assembly.Load(Byte[], Byte[], SecurityContextSource)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.SecurityContextSource
  parent: System.Security
  isExternal: false
  name: SecurityContextSource
  nameWithType: SecurityContextSource
  fullName: System.Security.SecurityContextSource
- uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  isExternal: false
  name: Load(Byte[], Byte[], Evidence)
  nameWithType: Assembly.Load(Byte[], Byte[], Evidence)
  fullName: Assembly.Load(Byte[], Byte[], Evidence)
- uid: System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  isExternal: false
  name: Load(String, Evidence)
  nameWithType: Assembly.Load(String, Evidence)
  fullName: Assembly.Load(String, Evidence)
- uid: System.Reflection.Assembly.Load(System.Byte[])
  parent: System.Reflection.Assembly
  isExternal: false
  name: Load(Byte[])
  nameWithType: Assembly.Load(Byte[])
  fullName: Assembly.Load(Byte[])
- uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[])
  parent: System.Reflection.Assembly
  isExternal: false
  name: Load(Byte[], Byte[])
  nameWithType: Assembly.Load(Byte[], Byte[])
  fullName: Assembly.Load(Byte[], Byte[])
- uid: System.Reflection.Assembly.Load(System.String)
  parent: System.Reflection.Assembly
  isExternal: false
  name: Load(String)
  nameWithType: Assembly.Load(String)
  fullName: Assembly.Load(String)
- uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  isExternal: false
  name: Load(AssemblyName, Evidence)
  nameWithType: Assembly.Load(AssemblyName, Evidence)
  fullName: Assembly.Load(AssemblyName, Evidence)
- uid: System.Reflection.Assembly.LoadFile(System.String)
  parent: System.Reflection.Assembly
  isExternal: false
  name: LoadFile(String)
  nameWithType: Assembly.LoadFile(String)
  fullName: Assembly.LoadFile(String)
- uid: System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  isExternal: false
  name: LoadFile(String, Evidence)
  nameWithType: Assembly.LoadFile(String, Evidence)
  fullName: Assembly.LoadFile(String, Evidence)
- uid: System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  parent: System.Reflection.Assembly
  isExternal: false
  name: LoadFrom(String, Evidence, Byte[], AssemblyHashAlgorithm)
  nameWithType: Assembly.LoadFrom(String, Evidence, Byte[], AssemblyHashAlgorithm)
  fullName: Assembly.LoadFrom(String, Evidence, Byte[], AssemblyHashAlgorithm)
- uid: System.Configuration.Assemblies.AssemblyHashAlgorithm
  parent: System.Configuration.Assemblies
  isExternal: false
  name: AssemblyHashAlgorithm
  nameWithType: AssemblyHashAlgorithm
  fullName: System.Configuration.Assemblies.AssemblyHashAlgorithm
- uid: System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  parent: System.Reflection.Assembly
  isExternal: false
  name: LoadFrom(String, Byte[], AssemblyHashAlgorithm)
  nameWithType: Assembly.LoadFrom(String, Byte[], AssemblyHashAlgorithm)
  fullName: Assembly.LoadFrom(String, Byte[], AssemblyHashAlgorithm)
- uid: System.Reflection.Assembly.LoadFrom(System.String)
  parent: System.Reflection.Assembly
  isExternal: false
  name: LoadFrom(String)
  nameWithType: Assembly.LoadFrom(String)
  fullName: Assembly.LoadFrom(String)
- uid: System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  isExternal: false
  name: LoadFrom(String, Evidence)
  nameWithType: Assembly.LoadFrom(String, Evidence)
  fullName: Assembly.LoadFrom(String, Evidence)
- uid: System.Reflection.Assembly.LoadModule(System.String,System.Byte[])
  parent: System.Reflection.Assembly
  isExternal: false
  name: LoadModule(String, Byte[])
  nameWithType: Assembly.LoadModule(String, Byte[])
  fullName: Assembly.LoadModule(String, Byte[])
- uid: System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])
  parent: System.Reflection.Assembly
  isExternal: false
  name: LoadModule(String, Byte[], Byte[])
  nameWithType: Assembly.LoadModule(String, Byte[], Byte[])
  fullName: Assembly.LoadModule(String, Byte[], Byte[])
- uid: System.Reflection.Assembly.LoadWithPartialName(System.String)
  parent: System.Reflection.Assembly
  isExternal: false
  name: LoadWithPartialName(String)
  nameWithType: Assembly.LoadWithPartialName(String)
  fullName: Assembly.LoadWithPartialName(String)
- uid: System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  isExternal: false
  name: LoadWithPartialName(String, Evidence)
  nameWithType: Assembly.LoadWithPartialName(String, Evidence)
  fullName: Assembly.LoadWithPartialName(String, Evidence)
- uid: System.Reflection.Assembly.Location
  parent: System.Reflection.Assembly
  isExternal: false
  name: Location
  nameWithType: Assembly.Location
  fullName: Assembly.Location
- uid: System.Reflection.Assembly.ManifestModule
  parent: System.Reflection.Assembly
  isExternal: false
  name: ManifestModule
  nameWithType: Assembly.ManifestModule
  fullName: Assembly.ManifestModule
- uid: System.Reflection.Assembly.ModuleResolve
  parent: System.Reflection.Assembly
  isExternal: false
  name: ModuleResolve
  nameWithType: Assembly.ModuleResolve
  fullName: Assembly.ModuleResolve
- uid: System.Reflection.ModuleResolveEventHandler
  parent: System.Reflection
  isExternal: false
  name: ModuleResolveEventHandler
  nameWithType: ModuleResolveEventHandler
  fullName: System.Reflection.ModuleResolveEventHandler
- uid: System.Reflection.Assembly.Modules
  parent: System.Reflection.Assembly
  isExternal: false
  name: Modules
  nameWithType: Assembly.Modules
  fullName: Assembly.Modules
- uid: System.Collections.Generic.IEnumerable{System.Reflection.Module}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Module>
  nameWithType: IEnumerable<Module>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Module>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Reflection.Assembly.op_Equality(System.Reflection.Assembly,System.Reflection.Assembly)
  parent: System.Reflection.Assembly
  isExternal: false
  name: op_Equality(Assembly, Assembly)
  nameWithType: Assembly.op_Equality(Assembly, Assembly)
  fullName: Assembly.op_Equality(Assembly, Assembly)
- uid: System.Reflection.Assembly.op_Inequality(System.Reflection.Assembly,System.Reflection.Assembly)
  parent: System.Reflection.Assembly
  isExternal: false
  name: op_Inequality(Assembly, Assembly)
  nameWithType: Assembly.op_Inequality(Assembly, Assembly)
  fullName: Assembly.op_Inequality(Assembly, Assembly)
- uid: System.Reflection.Assembly.PermissionSet
  parent: System.Reflection.Assembly
  isExternal: false
  name: PermissionSet
  nameWithType: Assembly.PermissionSet
  fullName: Assembly.PermissionSet
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Reflection.Assembly.ReflectionOnly
  parent: System.Reflection.Assembly
  isExternal: false
  name: ReflectionOnly
  nameWithType: Assembly.ReflectionOnly
  fullName: Assembly.ReflectionOnly
- uid: System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])
  parent: System.Reflection.Assembly
  isExternal: false
  name: ReflectionOnlyLoad(Byte[])
  nameWithType: Assembly.ReflectionOnlyLoad(Byte[])
  fullName: Assembly.ReflectionOnlyLoad(Byte[])
- uid: System.Reflection.Assembly.ReflectionOnlyLoad(System.String)
  parent: System.Reflection.Assembly
  isExternal: false
  name: ReflectionOnlyLoad(String)
  nameWithType: Assembly.ReflectionOnlyLoad(String)
  fullName: Assembly.ReflectionOnlyLoad(String)
- uid: System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)
  parent: System.Reflection.Assembly
  isExternal: false
  name: ReflectionOnlyLoadFrom(String)
  nameWithType: Assembly.ReflectionOnlyLoadFrom(String)
  fullName: Assembly.ReflectionOnlyLoadFrom(String)
- uid: System.Reflection.Assembly.SecurityRuleSet
  parent: System.Reflection.Assembly
  isExternal: false
  name: SecurityRuleSet
  nameWithType: Assembly.SecurityRuleSet
  fullName: Assembly.SecurityRuleSet
- uid: System.Security.SecurityRuleSet
  parent: System.Security
  isExternal: false
  name: SecurityRuleSet
  nameWithType: SecurityRuleSet
  fullName: System.Security.SecurityRuleSet
- uid: System.Reflection.Assembly.ToString
  parent: System.Reflection.Assembly
  isExternal: false
  name: ToString()
  nameWithType: Assembly.ToString()
  fullName: Assembly.ToString()
- uid: System.Reflection.Assembly.UnsafeLoadFrom(System.String)
  parent: System.Reflection.Assembly
  isExternal: false
  name: UnsafeLoadFrom(String)
  nameWithType: Assembly.UnsafeLoadFrom(String)
  fullName: Assembly.UnsafeLoadFrom(String)
- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: false
  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  nameWithType: Assembly.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  fullName: Assembly.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: false
  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)
  nameWithType: Assembly.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  fullName: Assembly.ICustomAttributeProvider.GetCustomAttributes(Boolean)
- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: false
  name: ICustomAttributeProvider.IsDefined(Type, Boolean)
  nameWithType: Assembly.ICustomAttributeProvider.IsDefined(Type, Boolean)
  fullName: Assembly.ICustomAttributeProvider.IsDefined(Type, Boolean)
- uid: System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType
  parent: System.Reflection.Assembly
  isExternal: false
  name: _Assembly.GetType()
  nameWithType: Assembly._Assembly.GetType()
  fullName: Assembly._Assembly.GetType()
- uid: System.Reflection.Assembly.LoadWithPartialName*
  parent: System.Reflection.Assembly
  isExternal: false
  name: LoadWithPartialName
  nameWithType: Assembly.LoadWithPartialName
  fullName: Assembly.LoadWithPartialName
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.#ctor*
  parent: System.Reflection.Assembly
  isExternal: false
  name: Assembly
  nameWithType: Assembly.Assembly
  fullName: Assembly.Assembly
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.CodeBase*
  parent: System.Reflection.Assembly
  isExternal: false
  name: CodeBase
  nameWithType: Assembly.CodeBase
  fullName: Assembly.CodeBase
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.CreateInstance*
  parent: System.Reflection.Assembly
  isExternal: false
  name: CreateInstance
  nameWithType: Assembly.CreateInstance
  fullName: Assembly.CreateInstance
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.CreateQualifiedName*
  parent: System.Reflection.Assembly
  isExternal: false
  name: CreateQualifiedName
  nameWithType: Assembly.CreateQualifiedName
  fullName: Assembly.CreateQualifiedName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.CustomAttributes*
  parent: System.Reflection.Assembly
  isExternal: false
  name: CustomAttributes
  nameWithType: Assembly.CustomAttributes
  fullName: Assembly.CustomAttributes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.DefinedTypes*
  parent: System.Reflection.Assembly
  isExternal: false
  name: DefinedTypes
  nameWithType: Assembly.DefinedTypes
  fullName: Assembly.DefinedTypes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.EntryPoint*
  parent: System.Reflection.Assembly
  isExternal: false
  name: EntryPoint
  nameWithType: Assembly.EntryPoint
  fullName: Assembly.EntryPoint
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.Equals*
  parent: System.Reflection.Assembly
  isExternal: false
  name: Equals
  nameWithType: Assembly.Equals
  fullName: Assembly.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.EscapedCodeBase*
  parent: System.Reflection.Assembly
  isExternal: false
  name: EscapedCodeBase
  nameWithType: Assembly.EscapedCodeBase
  fullName: Assembly.EscapedCodeBase
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.Evidence*
  parent: System.Reflection.Assembly
  isExternal: false
  name: Evidence
  nameWithType: Assembly.Evidence
  fullName: Assembly.Evidence
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.ExportedTypes*
  parent: System.Reflection.Assembly
  isExternal: false
  name: ExportedTypes
  nameWithType: Assembly.ExportedTypes
  fullName: Assembly.ExportedTypes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.FullName*
  parent: System.Reflection.Assembly
  isExternal: false
  name: FullName
  nameWithType: Assembly.FullName
  fullName: Assembly.FullName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetAssembly*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetAssembly
  nameWithType: Assembly.GetAssembly
  fullName: Assembly.GetAssembly
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetCallingAssembly*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetCallingAssembly
  nameWithType: Assembly.GetCallingAssembly
  fullName: Assembly.GetCallingAssembly
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetCustomAttributes*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetCustomAttributes
  nameWithType: Assembly.GetCustomAttributes
  fullName: Assembly.GetCustomAttributes
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetCustomAttributesData*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetCustomAttributesData
  nameWithType: Assembly.GetCustomAttributesData
  fullName: Assembly.GetCustomAttributesData
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetEntryAssembly*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetEntryAssembly
  nameWithType: Assembly.GetEntryAssembly
  fullName: Assembly.GetEntryAssembly
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetExecutingAssembly*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetExecutingAssembly
  nameWithType: Assembly.GetExecutingAssembly
  fullName: Assembly.GetExecutingAssembly
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetExportedTypes*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetExportedTypes
  nameWithType: Assembly.GetExportedTypes
  fullName: Assembly.GetExportedTypes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetFile*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetFile
  nameWithType: Assembly.GetFile
  fullName: Assembly.GetFile
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetFiles*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetFiles
  nameWithType: Assembly.GetFiles
  fullName: Assembly.GetFiles
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetHashCode*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetHashCode
  nameWithType: Assembly.GetHashCode
  fullName: Assembly.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetLoadedModules*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetLoadedModules
  nameWithType: Assembly.GetLoadedModules
  fullName: Assembly.GetLoadedModules
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetManifestResourceInfo*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetManifestResourceInfo
  nameWithType: Assembly.GetManifestResourceInfo
  fullName: Assembly.GetManifestResourceInfo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetManifestResourceNames*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetManifestResourceNames
  nameWithType: Assembly.GetManifestResourceNames
  fullName: Assembly.GetManifestResourceNames
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetManifestResourceStream*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetManifestResourceStream
  nameWithType: Assembly.GetManifestResourceStream
  fullName: Assembly.GetManifestResourceStream
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetModule*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetModule
  nameWithType: Assembly.GetModule
  fullName: Assembly.GetModule
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetModules*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetModules
  nameWithType: Assembly.GetModules
  fullName: Assembly.GetModules
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetName*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetName
  nameWithType: Assembly.GetName
  fullName: Assembly.GetName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetObjectData*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetObjectData
  nameWithType: Assembly.GetObjectData
  fullName: Assembly.GetObjectData
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetReferencedAssemblies*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetReferencedAssemblies
  nameWithType: Assembly.GetReferencedAssemblies
  fullName: Assembly.GetReferencedAssemblies
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetSatelliteAssembly*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetSatelliteAssembly
  nameWithType: Assembly.GetSatelliteAssembly
  fullName: Assembly.GetSatelliteAssembly
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetType*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetType
  nameWithType: Assembly.GetType
  fullName: Assembly.GetType
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GetTypes*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GetTypes
  nameWithType: Assembly.GetTypes
  fullName: Assembly.GetTypes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.GlobalAssemblyCache*
  parent: System.Reflection.Assembly
  isExternal: false
  name: GlobalAssemblyCache
  nameWithType: Assembly.GlobalAssemblyCache
  fullName: Assembly.GlobalAssemblyCache
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.HostContext*
  parent: System.Reflection.Assembly
  isExternal: false
  name: HostContext
  nameWithType: Assembly.HostContext
  fullName: Assembly.HostContext
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.ImageRuntimeVersion*
  parent: System.Reflection.Assembly
  isExternal: false
  name: ImageRuntimeVersion
  nameWithType: Assembly.ImageRuntimeVersion
  fullName: Assembly.ImageRuntimeVersion
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.IsDefined*
  parent: System.Reflection.Assembly
  isExternal: false
  name: IsDefined
  nameWithType: Assembly.IsDefined
  fullName: Assembly.IsDefined
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.IsDynamic*
  parent: System.Reflection.Assembly
  isExternal: false
  name: IsDynamic
  nameWithType: Assembly.IsDynamic
  fullName: Assembly.IsDynamic
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.IsFullyTrusted*
  parent: System.Reflection.Assembly
  isExternal: false
  name: IsFullyTrusted
  nameWithType: Assembly.IsFullyTrusted
  fullName: Assembly.IsFullyTrusted
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.Load*
  parent: System.Reflection.Assembly
  isExternal: false
  name: Load
  nameWithType: Assembly.Load
  fullName: Assembly.Load
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.LoadFile*
  parent: System.Reflection.Assembly
  isExternal: false
  name: LoadFile
  nameWithType: Assembly.LoadFile
  fullName: Assembly.LoadFile
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.LoadFrom*
  parent: System.Reflection.Assembly
  isExternal: false
  name: LoadFrom
  nameWithType: Assembly.LoadFrom
  fullName: Assembly.LoadFrom
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-2.0
  - netstandard-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.LoadModule*
  parent: System.Reflection.Assembly
  isExternal: false
  name: LoadModule
  nameWithType: Assembly.LoadModule
  fullName: Assembly.LoadModule
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.Location*
  parent: System.Reflection.Assembly
  isExternal: false
  name: Location
  nameWithType: Assembly.Location
  fullName: Assembly.Location
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.ManifestModule*
  parent: System.Reflection.Assembly
  isExternal: false
  name: ManifestModule
  nameWithType: Assembly.ManifestModule
  fullName: Assembly.ManifestModule
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.Modules*
  parent: System.Reflection.Assembly
  isExternal: false
  name: Modules
  nameWithType: Assembly.Modules
  fullName: Assembly.Modules
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.op_Equality*
  parent: System.Reflection.Assembly
  isExternal: false
  name: op_Equality
  nameWithType: Assembly.op_Equality
  fullName: Assembly.op_Equality
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.op_Inequality*
  parent: System.Reflection.Assembly
  isExternal: false
  name: op_Inequality
  nameWithType: Assembly.op_Inequality
  fullName: Assembly.op_Inequality
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.PermissionSet*
  parent: System.Reflection.Assembly
  isExternal: false
  name: PermissionSet
  nameWithType: Assembly.PermissionSet
  fullName: Assembly.PermissionSet
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.ReflectionOnly*
  parent: System.Reflection.Assembly
  isExternal: false
  name: ReflectionOnly
  nameWithType: Assembly.ReflectionOnly
  fullName: Assembly.ReflectionOnly
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.ReflectionOnlyLoad*
  parent: System.Reflection.Assembly
  isExternal: false
  name: ReflectionOnlyLoad
  nameWithType: Assembly.ReflectionOnlyLoad
  fullName: Assembly.ReflectionOnlyLoad
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.ReflectionOnlyLoadFrom*
  parent: System.Reflection.Assembly
  isExternal: false
  name: ReflectionOnlyLoadFrom
  nameWithType: Assembly.ReflectionOnlyLoadFrom
  fullName: Assembly.ReflectionOnlyLoadFrom
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.SecurityRuleSet*
  parent: System.Reflection.Assembly
  isExternal: false
  name: SecurityRuleSet
  nameWithType: Assembly.SecurityRuleSet
  fullName: Assembly.SecurityRuleSet
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.ToString*
  parent: System.Reflection.Assembly
  isExternal: false
  name: ToString
  nameWithType: Assembly.ToString
  fullName: Assembly.ToString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.5
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.UnsafeLoadFrom*
  parent: System.Reflection.Assembly
  isExternal: false
  name: UnsafeLoadFrom
  nameWithType: Assembly.UnsafeLoadFrom
  fullName: Assembly.UnsafeLoadFrom
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#GetCustomAttributes*
  parent: System.Reflection.Assembly
  isExternal: false
  name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  nameWithType: Assembly.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  fullName: Assembly.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.System#Reflection#ICustomAttributeProvider#IsDefined*
  parent: System.Reflection.Assembly
  isExternal: false
  name: System.Reflection.ICustomAttributeProvider.IsDefined
  nameWithType: Assembly.System.Reflection.ICustomAttributeProvider.IsDefined
  fullName: Assembly.System.Reflection.ICustomAttributeProvider.IsDefined
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.5
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType*
  parent: System.Reflection.Assembly
  isExternal: false
  name: System.Runtime.InteropServices._Assembly.GetType
  nameWithType: Assembly.System.Runtime.InteropServices._Assembly.GetType
  fullName: Assembly.System.Runtime.InteropServices._Assembly.GetType
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/Assembly.xml
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)
  parent: System.Reflection.AssemblyExtensions
  isExternal: false
  name: GetExportedTypes(Assembly)
  nameWithType: AssemblyExtensions.GetExportedTypes(Assembly)
  fullName: AssemblyExtensions.GetExportedTypes(Assembly)
- uid: System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)
  parent: System.Reflection.AssemblyExtensions
  isExternal: false
  name: GetModules(Assembly)
  nameWithType: AssemblyExtensions.GetModules(Assembly)
  fullName: AssemblyExtensions.GetModules(Assembly)
- uid: System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)
  parent: System.Reflection.AssemblyExtensions
  isExternal: false
  name: GetTypes(Assembly)
  nameWithType: AssemblyExtensions.GetTypes(Assembly)
  fullName: AssemblyExtensions.GetTypes(Assembly)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttribute(Assembly, Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute(Assembly, Type)
  fullName: CustomAttributeExtensions.GetCustomAttribute(Assembly, Type)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttribute<T>(Assembly)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(Assembly)
  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(Assembly)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes(Assembly)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Assembly)
  fullName: CustomAttributeExtensions.GetCustomAttributes(Assembly)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes(Assembly, Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Assembly, Type)
  fullName: CustomAttributeExtensions.GetCustomAttributes(Assembly, Type)
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: GetCustomAttributes<T>(Assembly)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(Assembly)
  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(Assembly)
- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  isExternal: false
  name: IsDefined(Assembly, Type)
  nameWithType: CustomAttributeExtensions.IsDefined(Assembly, Type)
  fullName: CustomAttributeExtensions.IsDefined(Assembly, Type)
- uid: System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Reflection.Assembly,System.Byte*@,System.Int32@)
  parent: System.Reflection.Metadata.AssemblyExtensions
  isExternal: false
  name: TryGetRawMetadata(Assembly, Byte*, Int32)
  nameWithType: AssemblyExtensions.TryGetRawMetadata(Assembly, Byte*, Int32)
  fullName: AssemblyExtensions.TryGetRawMetadata(Assembly, Byte*, Int32)
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Runtime.InteropServices._Assembly
  parent: System.Runtime.InteropServices
  isExternal: false
  name: _Assembly
  nameWithType: _Assembly
  fullName: System.Runtime.InteropServices._Assembly
- uid: System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: false
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Security.IEvidenceFactory
  parent: System.Security
  isExternal: false
  name: IEvidenceFactory
  nameWithType: IEvidenceFactory
  fullName: System.Security.IEvidenceFactory
