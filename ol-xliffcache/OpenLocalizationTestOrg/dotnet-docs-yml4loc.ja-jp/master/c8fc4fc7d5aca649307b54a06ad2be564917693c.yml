### YamlMime:ManagedReference
items:
- uid: System.Web.Util.RequestValidator
  commentId: T:System.Web.Util.RequestValidator
  id: RequestValidator
  children:
  - System.Web.Util.RequestValidator.#ctor
  - System.Web.Util.RequestValidator.Current
  - System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  - System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  langs:
  - csharp
  name: RequestValidator
  nameWithType: RequestValidator
  fullName: System.Web.Util.RequestValidator
  type: Class
  assemblies:
  - System.Web
  namespace: System.Web.Util
  summary: Defines base methods for custom request validation.
  remarks: "By default, ASP.NET does not validate requests until code explicitly requests a value from the request. For example, ASP.NET does not validate query-string values until code accesses the <xref:System.Web.HttpRequest.QueryString%2A> collection. By default, ASP.NET also does not validate some types of request data, such as form values, cookies, the names of files that have been uploaded using HTTP, and the value of the <xref:System.Web.HttpRequest.RawUrl%2A> property.  \n  \n The <xref:System.Web.Util.RequestValidator> class is a base class that you can implement in order to provide custom request validation. By implementing this class, you can determine when validation occurs and what type of request data to perform validation on.  \n  \n By default, ASP.NET provides cross-site scripting (XSS) checks. However, you can supplement or replace the request validation logic that is provided in ASP.NET by creating a custom implementation of the XSS. For example, you can write a custom request validation implementation that scans for SQL injection attacks in addition to checking for XSS attacks.  \n  \n To create custom request validation, you write a custom class that derives from the <xref:System.Web.Util.RequestValidator> base class. You then configure ASP.NET to use the custom request validator in the application-level Web.config file. You can put the custom class in the App_Code folder, in a compiled class library in the Bin folder, or in a compiled class library in the GAC.  \n  \n> [!NOTE]\n>  Only one custom request validation type can be configured for an application. It is not possible to configure a different request validation type for individual virtual paths or pages."
  example:
  - "The following example shows how to create a custom request validator that allows only a specific string to be used for query-string values.  \n  \n [!code-csharp[System.Web.Util.RequestValidator#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.util.requestvalidator/cs/requestvalidator.cs#1)]\n [!code-vb[System.Web.Util.RequestValidator#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.util.requestvalidator/vb/requestvalidator.vb#1)]  \n  \n The following example shows how to configure ASP.NET to use the custom validator in the Web.config file for an application.  \n  \n```  \n<system.web>  \n  <httpRuntime requestValidationType=\"CustomRequestValidation\" />  \n</system.web>  \n```"
  syntax:
    content: public class RequestValidator
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Util/RequestValidator.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Util.RequestValidator.#ctor
  commentId: M:System.Web.Util.RequestValidator.#ctor
  id: '#ctor'
  parent: System.Web.Util.RequestValidator
  langs:
  - csharp
  name: RequestValidator()
  nameWithType: RequestValidator.RequestValidator()
  fullName: RequestValidator.RequestValidator()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Util
  summary: Initializes a new instance of the <xref href="System.Web.Util.RequestValidator"></xref> class.
  remarks: "The <xref:System.Web.Util.RequestValidator> class has a default constructor. When a new instance of the class is initialized, an internal method retrieves custom validation details from the application's configuration information. The configuration details are contained in the <xref:System.Web.Configuration.HttpRuntimeSection> section. For more information, see [httpRuntime Element (ASP.NET Settings Schema)](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369) and the <xref:System.Web.Configuration.HttpRuntimeSection.RequestValidationType%2A> attribute.  \n  \n During initialization, a single instance of the <xref:System.Web.Util.RequestValidator> class is created, and a reference to the instance is maintained in the <xref:System.Web.Util.RequestValidator.Current%2A> property. ASP.NET does not create a new request validator instance per request. Therefore, custom implementations of the <xref:System.Web.Util.RequestValidator> class must be thread-safe."
  syntax:
    content: public RequestValidator ();
    parameters: []
  overload: System.Web.Util.RequestValidator.#ctor*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Util/RequestValidator.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Util.RequestValidator.Current
  commentId: P:System.Web.Util.RequestValidator.Current
  id: Current
  parent: System.Web.Util.RequestValidator
  langs:
  - csharp
  name: Current
  nameWithType: RequestValidator.Current
  fullName: RequestValidator.Current
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Util
  summary: Gets or sets a reference to the current <xref href="System.Web.Util.RequestValidator"></xref> instance that will be used in an application.
  remarks: "The <xref:System.Web.Util.RequestValidator.Current%2A> property maintains a reference to the single allowed instance of the <xref:System.Web.Util.RequestValidator> class. If no instance exists, a new one is created. If an instance already exists, the current instance is returned.  \n  \n During initialization, a single instance of the <xref:System.Web.Util.RequestValidator> class is created, and a reference to the instance is made available in the <xref:System.Web.Util.RequestValidator.Current%2A> property. ASP.NET does not create a new request validator instance per request. Therefore, custom implementations of the <xref:System.Web.Util.RequestValidator> class must be thread-safe.  \n  \n> [!NOTE]\n>  The <xref:System.Web.Util.RequestValidator.Current%2A> property is not thread-safe while the property is setting a reference to the current <xref:System.Web.Util.RequestValidator> class."
  syntax:
    content: public static System.Web.Util.RequestValidator Current { get; set; }
    return:
      type: System.Web.Util.RequestValidator
      description: An instance of the <xref href="System.Web.Util.RequestValidator"></xref> class.
  overload: System.Web.Util.RequestValidator.Current*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The property is `null`.
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Util/RequestValidator.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  commentId: M:System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  id: InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  parent: System.Web.Util.RequestValidator
  langs:
  - csharp
  name: InvokeIsValidRequestString(HttpContext, String, RequestValidationSource, String, Int32)
  nameWithType: RequestValidator.InvokeIsValidRequestString(HttpContext, String, RequestValidationSource, String, Int32)
  fullName: RequestValidator.InvokeIsValidRequestString(HttpContext, String, RequestValidationSource, String, Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Util
  summary: Provides a public method that calls the protected <xref href="System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)"></xref> method in order to validate HTTP request data.
  remarks: "The <xref:System.Web.Util.RequestValidator.InvokeIsValidRequestString%2A> method provides public access to the protected <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> method. This lets you create a custom wrapper class for the <xref:System.Web.Util.RequestValidator> class and call the <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> method without having to inherit from the <xref:System.Web.Util.RequestValidator> class.  \n  \n For information about request validation, see <xref:System.Web.UnvalidatedRequestValues>."
  syntax:
    content: public bool InvokeIsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: The HTTP context of the request.
    - id: value
      type: System.String
      description: The HTTP request data to validate.
    - id: requestValidationSource
      type: System.Web.Util.RequestValidationSource
      description: "An enumeration that represents the source of request data that is being validated. The following are possible values for the enumeration:  \n  \n-   `QueryString`  \n  \n-   `Form`  \n  \n-   `Cookies`  \n  \n-   `Files`  \n  \n-   `Path`  \n  \n-   `PathInfo`  \n  \n-   `Headers`"
    - id: collectionKey
      type: System.String
      description: (Optional) The key in the request collection of the item to validate. This parameter is used if the data to validate is obtained from a collection. If the data to validate is not from a collection, this parameter can be `null`.
    - id: validationFailureIndex
      type: System.Int32
      description: When this method returns, indicates the zero-based starting point of the problematic or invalid text in the request collection. This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: '`true` if the string to validate does not contain unencoded characters that could be used in a malicious scripting attack; otherwise, `false`.'
  overload: System.Web.Util.RequestValidator.InvokeIsValidRequestString*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Util/RequestValidator.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
- uid: System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  commentId: M:System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  id: IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  parent: System.Web.Util.RequestValidator
  langs:
  - csharp
  name: IsValidRequestString(HttpContext, String, RequestValidationSource, String, Int32)
  nameWithType: RequestValidator.IsValidRequestString(HttpContext, String, RequestValidationSource, String, Int32)
  fullName: RequestValidator.IsValidRequestString(HttpContext, String, RequestValidationSource, String, Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Util
  summary: Validates a string that contains HTTP request data.
  remarks: "You implement this method to perform custom validation of request data. The base behavior of the <xref:System.Web.Util.RequestValidator.IsValidRequestString%28System.Web.HttpContext%2CSystem.String%2CSystem.Web.Util.RequestValidationSource%2CSystem.String%2CSystem.Int32%40%29> method is like the behavior that ASP.NET implements internally to check for dangerous strings in cross-site scripting validation. For more information, see [How To: Prevent Cross-Site Scripting in ASP.NET](http://go.microsoft.com/fwlink/?LinkID=178708).  \n  \n If custom validation logic detects an error, this method should return `false` and provide a value in `validationFailureIndex` to indicate the starting point of the text that caused the error. The value in `validationFailureIndex` must be 0 or a positive integer.  \n  \n The logic in a request validation check proceeds as follows:  \n  \n-   The <xref:System.Web.HttpRequest> class performs a null-character removal check on the incoming data.  \n  \n-   The <xref:System.Web.HttpRequest> class calls either the <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> method (the default implementation of the base method) or calls a derived version of the method.  \n  \n-   If <xref:System.Web.Util.RequestValidator.IsValidRequestString%2A> method returns `false` to indicate a validation failure, ASP.NET constructs an error string (if necessary) and throws an <xref:System.Web.HttpRequestValidationException> exception."
  syntax:
    content: protected virtual bool IsValidRequestString (System.Web.HttpContext context, string value, System.Web.Util.RequestValidationSource requestValidationSource, string collectionKey, out int validationFailureIndex);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: The context of the current request.
    - id: value
      type: System.String
      description: The HTTP request data to validate.
    - id: requestValidationSource
      type: System.Web.Util.RequestValidationSource
      description: "An enumeration that represents the source of request data that is being validated. The following are possible values for the enumeration:  \n  \n- `QueryString`\n- `Form `\n- `Cookies`\n- `Files`\n- `RawUrl`\n- `Path`\n- `PathInfo`\n- `Headers`"
    - id: collectionKey
      type: System.String
      description: The key in the request collection of the item to validate. This parameter is optional. This parameter is used if the data to validate is obtained from a collection. If the data to validate is not from a collection, <code>collectionKey</code> can be `null`.
    - id: validationFailureIndex
      type: System.Int32
      description: When this method returns, indicates the zero-based starting point of the problematic or invalid text in the request collection. This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: '`true` if the string to be validated is valid; otherwise, `false`.'
  overload: System.Web.Util.RequestValidator.IsValidRequestString*
  exceptions: []
  version:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Util/RequestValidator.xml
  ms.technology:
  - dotnet-webforms
  author: tdykstra
  ms.author: tdykstra
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Web.Util.RequestValidator.#ctor
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: RequestValidator()
  nameWithType: RequestValidator.RequestValidator()
  fullName: RequestValidator.RequestValidator()
- uid: System.Web.Util.RequestValidator.Current
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: Current
  nameWithType: RequestValidator.Current
  fullName: RequestValidator.Current
- uid: System.Web.Util.RequestValidator
  parent: System.Web.Util
  isExternal: false
  name: RequestValidator
  nameWithType: RequestValidator
  fullName: System.Web.Util.RequestValidator
- uid: System.Web.Util.RequestValidator.InvokeIsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: InvokeIsValidRequestString(HttpContext, String, RequestValidationSource, String, Int32)
  nameWithType: RequestValidator.InvokeIsValidRequestString(HttpContext, String, RequestValidationSource, String, Int32)
  fullName: RequestValidator.InvokeIsValidRequestString(HttpContext, String, RequestValidationSource, String, Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Util.RequestValidationSource
  parent: System.Web.Util
  isExternal: false
  name: RequestValidationSource
  nameWithType: RequestValidationSource
  fullName: System.Web.Util.RequestValidationSource
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Util.RequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: IsValidRequestString(HttpContext, String, RequestValidationSource, String, Int32)
  nameWithType: RequestValidator.IsValidRequestString(HttpContext, String, RequestValidationSource, String, Int32)
  fullName: RequestValidator.IsValidRequestString(HttpContext, String, RequestValidationSource, String, Int32)
- uid: System.Web.Util.RequestValidator.#ctor*
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: RequestValidator
  nameWithType: RequestValidator.RequestValidator
  fullName: RequestValidator.RequestValidator
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Util/RequestValidator.xml
- uid: System.Web.Util.RequestValidator.Current*
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: Current
  nameWithType: RequestValidator.Current
  fullName: RequestValidator.Current
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Util/RequestValidator.xml
- uid: System.Web.Util.RequestValidator.InvokeIsValidRequestString*
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: InvokeIsValidRequestString
  nameWithType: RequestValidator.InvokeIsValidRequestString
  fullName: RequestValidator.InvokeIsValidRequestString
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Util/RequestValidator.xml
- uid: System.Web.Util.RequestValidator.IsValidRequestString*
  parent: System.Web.Util.RequestValidator
  isExternal: false
  name: IsValidRequestString
  nameWithType: RequestValidator.IsValidRequestString
  fullName: RequestValidator.IsValidRequestString
  monikers:
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.Util/RequestValidator.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
