{"nodes":[{"content":"Provides a forward-only cursor to enumerate through messages in a message queue.","nodes":[{"pos":[0,80],"content":"Provides a forward-only cursor to enumerate through messages in a message queue.","nodes":[{"content":"Provides a forward-only cursor to enumerate through messages in a message queue.","pos":[0,80]}]}],"pos":[1462,1543],"yaml":true},{"content":"Use <xref:System.Messaging.MessageEnumerator> for dynamic interaction with messages in a queue. Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageEnumerator> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.  \n  \n Unlike a static snapshot, an enumerator allows you to modify the collection. Using a <xref:System.Messaging.MessageEnumerator>, you can remove messages from the queue, and the change is immediately reflected in the queue.  \n  \n An enumerator does not remove the messages from the queue when it queries the queue. It returns information about the message at the current cursor position, but it leaves the message in the queue.  \n  \n A <xref:System.Messaging.MessageEnumerator> is a cursor, initialized to the head of a dynamic list. The list order is the same as the order of the messages in the queue, according to message priority. You can move the cursor to the first message in the queue by calling <xref:System.Messaging.MessageEnumerator.MoveNext%2A>. After the enumerator has been initialized, you can use <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to step forward through the remaining messages. You can specify whether to wait for a message to become available by passing a timeout into the <xref:System.Messaging.MessageEnumerator.MoveNext%2A> method.  \n  \n Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator. A message that is inserted before the cursor's current position cannot be accessed. It is not possible to step backward with a <xref:System.Messaging.MessageEnumerator>. A cursor allows forward-only movement. The <xref:System.Messaging.MessageEnumerator.Reset%2A> method enables you to place the cursor back at the beginning of the queue.  \n  \n Instances of <xref:System.Messaging.MessageEnumerator> for a given queue work independently. You can create two <xref:System.Messaging.MessageEnumerator> instances that apply to the same queue. The changes that one <xref:System.Messaging.MessageEnumerator> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first. However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <xref:System.Messaging.MessageEnumerator.Current%2A> property on the now-deleted message.  \n  \n> [!NOTE]\n>  If you create an instance of <xref:System.Messaging.MessageQueue> with <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName> set to `true`, no other application can modify the messages in your enumerator while you have the connection to the queue.","nodes":[{"pos":[0,408],"content":"Use <xref:System.Messaging.MessageEnumerator> for dynamic interaction with messages in a queue. Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageEnumerator> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.","nodes":[{"content":"Use <xref:System.Messaging.MessageEnumerator> for dynamic interaction with messages in a queue. Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageEnumerator> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.","pos":[0,408],"nodes":[{"content":"Use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> for dynamic interaction with messages in a queue.","pos":[0,95],"source":"Use <xref:System.Messaging.MessageEnumerator> for dynamic interaction with messages in a queue."},{"content":"Methods available through the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class can return either a <ph id=\"ph2\">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.","pos":[96,408],"source":" Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageEnumerator> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called."}]}]},{"pos":[415,636],"content":"Unlike a static snapshot, an enumerator allows you to modify the collection. Using a <xref:System.Messaging.MessageEnumerator>, you can remove messages from the queue, and the change is immediately reflected in the queue.","nodes":[{"content":"Unlike a static snapshot, an enumerator allows you to modify the collection. Using a <xref:System.Messaging.MessageEnumerator>, you can remove messages from the queue, and the change is immediately reflected in the queue.","pos":[0,221],"nodes":[{"content":"Unlike a static snapshot, an enumerator allows you to modify the collection.","pos":[0,76]},{"content":"Using a <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>, you can remove messages from the queue, and the change is immediately reflected in the queue.","pos":[77,221],"source":" Using a <xref:System.Messaging.MessageEnumerator>, you can remove messages from the queue, and the change is immediately reflected in the queue."}]}]},{"pos":[643,840],"content":"An enumerator does not remove the messages from the queue when it queries the queue. It returns information about the message at the current cursor position, but it leaves the message in the queue.","nodes":[{"content":"An enumerator does not remove the messages from the queue when it queries the queue. It returns information about the message at the current cursor position, but it leaves the message in the queue.","pos":[0,197],"nodes":[{"content":"An enumerator does not remove the messages from the queue when it queries the queue.","pos":[0,84]},{"content":"It returns information about the message at the current cursor position, but it leaves the message in the queue.","pos":[85,197]}]}]},{"pos":[847,1486],"content":"A <xref:System.Messaging.MessageEnumerator> is a cursor, initialized to the head of a dynamic list. The list order is the same as the order of the messages in the queue, according to message priority. You can move the cursor to the first message in the queue by calling <xref:System.Messaging.MessageEnumerator.MoveNext%2A>. After the enumerator has been initialized, you can use <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to step forward through the remaining messages. You can specify whether to wait for a message to become available by passing a timeout into the <xref:System.Messaging.MessageEnumerator.MoveNext%2A> method.","nodes":[{"content":"A <xref:System.Messaging.MessageEnumerator> is a cursor, initialized to the head of a dynamic list. The list order is the same as the order of the messages in the queue, according to message priority. You can move the cursor to the first message in the queue by calling <xref:System.Messaging.MessageEnumerator.MoveNext%2A>. After the enumerator has been initialized, you can use <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to step forward through the remaining messages. You can specify whether to wait for a message to become available by passing a timeout into the <xref:System.Messaging.MessageEnumerator.MoveNext%2A> method.","pos":[0,639],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> is a cursor, initialized to the head of a dynamic list.","pos":[0,99],"source":"A <xref:System.Messaging.MessageEnumerator> is a cursor, initialized to the head of a dynamic list."},{"content":"The list order is the same as the order of the messages in the queue, according to message priority.","pos":[100,200]},{"content":"You can move the cursor to the first message in the queue by calling <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph>.","pos":[201,324],"source":" You can move the cursor to the first message in the queue by calling <xref:System.Messaging.MessageEnumerator.MoveNext%2A>."},{"content":"After the enumerator has been initialized, you can use <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> to step forward through the remaining messages.","pos":[325,481],"source":" After the enumerator has been initialized, you can use <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to step forward through the remaining messages."},{"content":"You can specify whether to wait for a message to become available by passing a timeout into the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> method.","pos":[482,639],"source":" You can specify whether to wait for a message to become available by passing a timeout into the <xref:System.Messaging.MessageEnumerator.MoveNext%2A> method."}]}]},{"pos":[1493,2001],"content":"Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator. A message that is inserted before the cursor's current position cannot be accessed. It is not possible to step backward with a <xref:System.Messaging.MessageEnumerator>. A cursor allows forward-only movement. The <xref:System.Messaging.MessageEnumerator.Reset%2A> method enables you to place the cursor back at the beginning of the queue.","nodes":[{"content":"Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator. A message that is inserted before the cursor's current position cannot be accessed. It is not possible to step backward with a <xref:System.Messaging.MessageEnumerator>. A cursor allows forward-only movement. The <xref:System.Messaging.MessageEnumerator.Reset%2A> method enables you to place the cursor back at the beginning of the queue.","pos":[0,508],"nodes":[{"content":"Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator.","pos":[0,169]},{"content":"A message that is inserted before the cursor's current position cannot be accessed.","pos":[170,253]},{"content":"It is not possible to step backward with a <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph>.","pos":[254,339],"source":" It is not possible to step backward with a <xref:System.Messaging.MessageEnumerator>."},{"content":"A cursor allows forward-only movement.","pos":[340,378]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> method enables you to place the cursor back at the beginning of the queue.","pos":[379,508],"source":" The <xref:System.Messaging.MessageEnumerator.Reset%2A> method enables you to place the cursor back at the beginning of the queue."}]}]},{"pos":[2008,2684],"content":"Instances of <xref:System.Messaging.MessageEnumerator> for a given queue work independently. You can create two <xref:System.Messaging.MessageEnumerator> instances that apply to the same queue. The changes that one <xref:System.Messaging.MessageEnumerator> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first. However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <xref:System.Messaging.MessageEnumerator.Current%2A> property on the now-deleted message.","nodes":[{"content":"Instances of <xref:System.Messaging.MessageEnumerator> for a given queue work independently. You can create two <xref:System.Messaging.MessageEnumerator> instances that apply to the same queue. The changes that one <xref:System.Messaging.MessageEnumerator> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first. However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <xref:System.Messaging.MessageEnumerator.Current%2A> property on the now-deleted message.","pos":[0,676],"nodes":[{"content":"Instances of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> for a given queue work independently.","pos":[0,92],"source":"Instances of <xref:System.Messaging.MessageEnumerator> for a given queue work independently."},{"content":"You can create two <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> instances that apply to the same queue.","pos":[93,193],"source":" You can create two <xref:System.Messaging.MessageEnumerator> instances that apply to the same queue."},{"content":"The changes that one <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first.","pos":[194,401],"source":" The changes that one <xref:System.Messaging.MessageEnumerator> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first."},{"content":"However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;</ph> property on the now-deleted message.","pos":[402,676],"source":" However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <xref:System.Messaging.MessageEnumerator.Current%2A> property on the now-deleted message."}]}]},{"pos":[2692,2979],"content":"[!NOTE]\n If you create an instance of <xref:System.Messaging.MessageQueue> with <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName> set to `true`, no other application can modify the messages in your enumerator while you have the connection to the queue.","leadings":["","> "],"nodes":[{"content":"If you create an instance of <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> with <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName&gt;</ph> set to <ph id=\"ph3\">`true`</ph>, no other application can modify the messages in your enumerator while you have the connection to the queue.","pos":[9,285],"source":" If you create an instance of <xref:System.Messaging.MessageQueue> with <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName> set to `true`, no other application can modify the messages in your enumerator while you have the connection to the queue."}]}],"pos":[1554,4549],"yaml":true,"extradata":"MT"},{"content":"Frees the resources associated with the enumerator.","nodes":[{"pos":[0,51],"content":"Frees the resources associated with the enumerator.","nodes":[{"content":"Frees the resources associated with the enumerator.","pos":[0,51]}]}],"pos":[6967,7019],"yaml":true},{"content":"The operating system retains an open handle to the queue during the lifetime of the cursor. When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release the resources associated with the handle.","nodes":[{"pos":[0,252],"content":"The operating system retains an open handle to the queue during the lifetime of the cursor. When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release the resources associated with the handle.","nodes":[{"content":"The operating system retains an open handle to the queue during the lifetime of the cursor. When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release the resources associated with the handle.","pos":[0,252],"nodes":[{"content":"The operating system retains an open handle to the queue during the lifetime of the cursor.","pos":[0,91]},{"content":"When you have finished working with the enumerator, call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;</ph> to release the resources associated with the handle.","pos":[92,252],"source":" When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release the resources associated with the handle."}]}]}],"pos":[7030,7283],"yaml":true,"extradata":"MT"},{"content":"Gets the current <xref href=\"System.Messaging.Message\"></xref> that this enumerator points to.","nodes":[{"pos":[0,94],"content":"Gets the current <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that this enumerator points to.","source":"Gets the current <xref href=\"System.Messaging.Message\"></xref> that this enumerator points to."}],"pos":[8325,8420],"yaml":true},{"content":"When the enumerator is created, it points to the head of the queue, at a location before the first message. In this case, <xref:System.Messaging.MessageEnumerator.Current%2A> is not valid and will throw an exception if it is accessed. You must call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to position the cursor at the first message in the queue.","nodes":[{"pos":[0,360],"content":"When the enumerator is created, it points to the head of the queue, at a location before the first message. In this case, <xref:System.Messaging.MessageEnumerator.Current%2A> is not valid and will throw an exception if it is accessed. You must call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to position the cursor at the first message in the queue.","nodes":[{"content":"When the enumerator is created, it points to the head of the queue, at a location before the first message. In this case, <xref:System.Messaging.MessageEnumerator.Current%2A> is not valid and will throw an exception if it is accessed. You must call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to position the cursor at the first message in the queue.","pos":[0,360],"nodes":[{"content":"When the enumerator is created, it points to the head of the queue, at a location before the first message.","pos":[0,107]},{"content":"In this case, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.Current%2A&gt;</ph> is not valid and will throw an exception if it is accessed.","pos":[108,234],"source":" In this case, <xref:System.Messaging.MessageEnumerator.Current%2A> is not valid and will throw an exception if it is accessed."},{"content":"You must call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> to position the cursor at the first message in the queue.","pos":[235,360],"source":" You must call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to position the cursor at the first message in the queue."}]}]}],"pos":[8431,8792],"yaml":true,"extradata":"MT"},{"content":"The current message.","nodes":[{"pos":[0,20],"content":"The current message.","nodes":[{"content":"The current message.","pos":[0,20]}]}],"pos":[8932,8953],"yaml":true},{"content":"You called <xref href=\"System.Messaging.MessageEnumerator.Current\"></xref> before the first call to <xref href=\"System.Messaging.MessageEnumerator.MoveNext\"></xref>. The cursor is located before the first element of the message enumeration.  \n  \n -or-  \n  \n You called <xref href=\"System.Messaging.MessageEnumerator.Current\"></xref> after a call to <xref href=\"System.Messaging.MessageEnumerator.MoveNext\"></xref> had returned `false` (indicating the cursor is located after the last element of the message enumeration.)","nodes":[{"pos":[0,240],"content":"You called <xref href=\"System.Messaging.MessageEnumerator.Current\"></xref> before the first call to <xref href=\"System.Messaging.MessageEnumerator.MoveNext\"></xref>. The cursor is located before the first element of the message enumeration.","nodes":[{"content":"You called <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageEnumerator.Current\"&gt;&lt;/xref&gt;</ph> before the first call to <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageEnumerator.MoveNext\"&gt;&lt;/xref&gt;</ph>.","pos":[0,165],"source":"You called <xref href=\"System.Messaging.MessageEnumerator.Current\"></xref> before the first call to <xref href=\"System.Messaging.MessageEnumerator.MoveNext\"></xref>."},{"content":"The cursor is located before the first element of the message enumeration.","pos":[166,240]}]},{"pos":[247,251],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[258,520],"content":"You called <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageEnumerator.Current\"&gt;&lt;/xref&gt;</ph> after a call to <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageEnumerator.MoveNext\"&gt;&lt;/xref&gt;</ph> had returned <ph id=\"ph3\">`false`</ph> (indicating the cursor is located after the last element of the message enumeration.)","source":"You called <xref href=\"System.Messaging.MessageEnumerator.Current\"></xref> after a call to <xref href=\"System.Messaging.MessageEnumerator.MoveNext\"></xref> had returned `false` (indicating the cursor is located after the last element of the message enumeration.)"}],"pos":[9133,9668],"yaml":true},{"content":"The message the enumerator is currently pointing to no longer exists. It might have been deleted.","nodes":[{"pos":[0,97],"content":"The message the enumerator is currently pointing to no longer exists. It might have been deleted.","nodes":[{"content":"The message the enumerator is currently pointing to no longer exists. It might have been deleted.","pos":[0,97],"nodes":[{"content":"The message the enumerator is currently pointing to no longer exists.","pos":[0,69]},{"content":"It might have been deleted.","pos":[70,97]}]}]}],"pos":[9790,9888],"yaml":true},{"content":"Gets the native Message Queuing cursor handle used to browse messages in the queue.","nodes":[{"pos":[0,83],"content":"Gets the native Message Queuing cursor handle used to browse messages in the queue.","nodes":[{"content":"Gets the native Message Queuing cursor handle used to browse messages in the queue.","pos":[0,83]}]}],"pos":[10825,10909],"yaml":true},{"content":"This property contains the native handle to the enumeration. When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release this resource.","nodes":[{"pos":[0,194],"content":"This property contains the native handle to the enumeration. When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release this resource.","nodes":[{"content":"This property contains the native handle to the enumeration. When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release this resource.","pos":[0,194],"nodes":[{"content":"This property contains the native handle to the enumeration.","pos":[0,60]},{"content":"When you have finished working with the enumerator, call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.Close%2A&gt;</ph> to release this resource.","pos":[61,194],"source":" When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release this resource."}]}]}],"pos":[10920,11115],"yaml":true,"extradata":"MT"},{"content":"The native cursor handle.","nodes":[{"pos":[0,25],"content":"The native cursor handle.","nodes":[{"content":"The native cursor handle.","pos":[0,25]}]}],"pos":[11231,11257],"yaml":true},{"content":"The handle does not exist.","nodes":[{"pos":[0,26],"content":"The handle does not exist.","nodes":[{"content":"The handle does not exist.","pos":[0,26]}]}],"pos":[11454,11481],"yaml":true},{"content":"Releases all resources used by the <xref href=\"System.Messaging.MessageEnumerator\"></xref>.","nodes":[{"pos":[0,91],"content":"Releases all resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageEnumerator\"&gt;&lt;/xref&gt;</ph>.","source":"Releases all resources used by the <xref href=\"System.Messaging.MessageEnumerator\"></xref>."}],"pos":[12392,12484],"yaml":true},{"content":"Calling <xref:System.Messaging.MessageEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageEnumerator> to be reallocated for other purposes. For more information about <xref:System.Messaging.MessageEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).","nodes":[{"pos":[0,342],"content":"Calling <xref:System.Messaging.MessageEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageEnumerator> to be reallocated for other purposes. For more information about <xref:System.Messaging.MessageEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).","nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph> allows the resources used by the <ph id=\"ph2\">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> to be reallocated for other purposes.","pos":[0,173],"source":"Calling <xref:System.Messaging.MessageEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageEnumerator> to be reallocated for other purposes."},{"content":"For more information about <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph>, see <bpt id=\"p1\">[</bpt>Cleaning Up Unmanaged Resources<ept id=\"p1\">](~/docs/standard/garbage-collection/unmanaged.md)</ept>.","pos":[174,342],"source":" For more information about <xref:System.Messaging.MessageEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md)."}]}],"pos":[12495,12838],"yaml":true,"extradata":"MT"},{"content":"Releases the unmanaged resources used by the <xref href=\"System.Messaging.MessageEnumerator\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,147],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageEnumerator\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.Messaging.MessageEnumerator\"></xref> and optionally releases the managed resources."}],"pos":[13957,14105],"yaml":true},{"content":"This method is called by the public <xref:System.Messaging.MessageEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageEnumerator> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"pos":[0,334],"content":"This method is called by the public <xref:System.Messaging.MessageEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.Dispose%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,144],"source":"This method is called by the public <xref:System.Messaging.MessageEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">`Dispose()`</ph> invokes the protected <ph id=\"ph2\">`Dispose(Boolean)`</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[145,250],"source":"`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id=\"ph2\">`Dispose`</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[251,334],"source":" <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`."}]},{"pos":[341,579],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageEnumerator> references. This method invokes the `Dispose()` method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.Messaging.MessageEnumerator&gt;</ph> references.","pos":[0,168],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageEnumerator> references."},{"content":"This method invokes the <ph id=\"ph1\">`Dispose()`</ph> method of each referenced object.","pos":[169,238],"source":" This method invokes the `Dispose()` method of each referenced object."}]}],"pos":[14116,14700],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[14854,14957],"yaml":true},{"content":"Advances the enumerator to the next message in the queue, if one is currently available.","nodes":[{"pos":[0,88],"content":"Advances the enumerator to the next message in the queue, if one is currently available.","nodes":[{"content":"Advances the enumerator to the next message in the queue, if one is currently available.","pos":[0,88]}]}],"pos":[16627,16716],"yaml":true},{"content":"This overload returns immediately if there is no message in the queue. There is another overload that waits a specified <xref:System.TimeSpan> for a message to arrive.  \n  \n If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> returns `false` to the calling method.  \n  \n Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the queue into view.","nodes":[{"pos":[0,167],"content":"This overload returns immediately if there is no message in the queue. There is another overload that waits a specified <xref:System.TimeSpan> for a message to arrive.","nodes":[{"content":"This overload returns immediately if there is no message in the queue. There is another overload that waits a specified <xref:System.TimeSpan> for a message to arrive.","pos":[0,167],"nodes":[{"content":"This overload returns immediately if there is no message in the queue.","pos":[0,70]},{"content":"There is another overload that waits a specified <ph id=\"ph1\">&lt;xref:System.TimeSpan&gt;</ph> for a message to arrive.","pos":[71,167],"source":" There is another overload that waits a specified <xref:System.TimeSpan> for a message to arrive."}]}]},{"pos":[174,402],"content":"If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> returns <ph id=\"ph2\">`false`</ph> to the calling method.","source":"If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> returns `false` to the calling method."},{"pos":[409,628],"content":"Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the queue into view.","nodes":[{"content":"Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> brings the first message of the queue into view.","pos":[0,219],"source":"Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the queue into view."}]}],"pos":[16727,17362],"yaml":true,"extradata":"MT"},{"content":"`true` if the enumerator was succesfully advanced to the next message; `false` if the enumerator has reached the end of the queue.","nodes":[{"pos":[0,130],"content":"<ph id=\"ph1\">`true`</ph> if the enumerator was succesfully advanced to the next message; <ph id=\"ph2\">`false`</ph> if the enumerator has reached the end of the queue.","source":"`true` if the enumerator was succesfully advanced to the next message; `false` if the enumerator has reached the end of the queue."}],"pos":[17487,17620],"yaml":true},{"content":"An exception specific to Message Queuing was thrown.","nodes":[{"pos":[0,52],"content":"An exception specific to Message Queuing was thrown.","nodes":[{"content":"An exception specific to Message Queuing was thrown.","pos":[0,52]}]}],"pos":[17813,17866],"yaml":true},{"content":"Advances the enumerator to the next message in the queue. If the enumerator is positioned at the end of the queue, <xref href=\"System.Messaging.MessageEnumerator.MoveNext\"></xref> waits until a message is available or the given timeout expires.","nodes":[{"pos":[0,244],"content":"Advances the enumerator to the next message in the queue. If the enumerator is positioned at the end of the queue, <xref href=\"System.Messaging.MessageEnumerator.MoveNext\"></xref> waits until a message is available or the given timeout expires.","nodes":[{"content":"Advances the enumerator to the next message in the queue.","pos":[0,57]},{"content":"If the enumerator is positioned at the end of the queue, <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageEnumerator.MoveNext\"&gt;&lt;/xref&gt;</ph> waits until a message is available or the given timeout expires.","pos":[58,244],"source":" If the enumerator is positioned at the end of the queue, <xref href=\"System.Messaging.MessageEnumerator.MoveNext\"></xref> waits until a message is available or the given timeout expires."}]}],"pos":[18858,19103],"yaml":true},{"content":"This overload waits if there is no message in the queue or if the cursor has reached the end of the queue. If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> waits the specified timeout.  \n  \n If the cursor is already at the end of the queue, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> only returns `true` if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue. An overload with no parameter returns immediately if no further messages are in the queue.  \n  \n Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the enumeration into view.","nodes":[{"pos":[0,325],"content":"This overload waits if there is no message in the queue or if the cursor has reached the end of the queue. If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> waits the specified timeout.","nodes":[{"content":"This overload waits if there is no message in the queue or if the cursor has reached the end of the queue. If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> waits the specified timeout.","pos":[0,325],"nodes":[{"content":"This overload waits if there is no message in the queue or if the cursor has reached the end of the queue.","pos":[0,106]},{"content":"If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> waits the specified timeout.","pos":[107,325],"source":" If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> waits the specified timeout."}]}]},{"pos":[332,708],"content":"If the cursor is already at the end of the queue, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> only returns `true` if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue. An overload with no parameter returns immediately if no further messages are in the queue.","nodes":[{"content":"If the cursor is already at the end of the queue, <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> only returns <ph id=\"ph2\">`true`</ph> if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue.","pos":[0,285],"source":"If the cursor is already at the end of the queue, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> only returns `true` if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue."},{"content":"An overload with no parameter returns immediately if no further messages are in the queue.","pos":[286,376]}]},{"pos":[715,946],"content":"Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the enumeration into view.","nodes":[{"content":"Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> brings the first message of the enumeration into view.","pos":[0,231],"source":"Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the enumeration into view."}]}],"pos":[19114,20067],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.TimeSpan\"></xref> to wait for a message to be available if the enumerator is positioned at the end of the queue.","nodes":[{"pos":[0,135],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.TimeSpan\"&gt;&lt;/xref&gt;</ph> to wait for a message to be available if the enumerator is positioned at the end of the queue.","source":"The <xref href=\"System.TimeSpan\"></xref> to wait for a message to be available if the enumerator is positioned at the end of the queue."}],"pos":[20212,20348],"yaml":true},{"content":"`true` if the enumerator successfully advanced to the next message; `false` if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <code>timeout</code> parameter.","nodes":[{"pos":[0,231],"content":"<ph id=\"ph1\">`true`</ph> if the enumerator successfully advanced to the next message; <ph id=\"ph2\">`false`</ph> if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"`true` if the enumerator successfully advanced to the next message; `false` if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <code>timeout</code> parameter."}],"pos":[20406,20640],"yaml":true},{"content":"The value specified for the timeout parameter is invalid. It might represent a negative number.","nodes":[{"pos":[0,95],"content":"The value specified for the timeout parameter is invalid. It might represent a negative number.","nodes":[{"content":"The value specified for the timeout parameter is invalid. It might represent a negative number.","pos":[0,95],"nodes":[{"content":"The value specified for the timeout parameter is invalid.","pos":[0,57]},{"content":"It might represent a negative number.","pos":[58,95]}]}]}],"pos":[20805,20901],"yaml":true},{"content":"An exception specific to Message Queuing was thrown.  \n  \n -or-  \n  \n The timeout has expired.","nodes":[{"pos":[0,52],"content":"An exception specific to Message Queuing was thrown.","nodes":[{"content":"An exception specific to Message Queuing was thrown.","pos":[0,52]}]},{"pos":[59,63],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[70,94],"content":"The timeout has expired.","nodes":[{"content":"The timeout has expired.","pos":[0,24]}]}],"pos":[21023,21124],"yaml":true},{"content":"Removes the current message from a transactional or non-transactional queue and returns the message to the calling application. There is no timeout specified for a message to arrive in the queue.","nodes":[{"pos":[0,195],"content":"Removes the current message from a transactional or non-transactional queue and returns the message to the calling application. There is no timeout specified for a message to arrive in the queue.","nodes":[{"content":"Removes the current message from a transactional or non-transactional queue and returns the message to the calling application. There is no timeout specified for a message to arrive in the queue.","pos":[0,195],"nodes":[{"content":"Removes the current message from a transactional or non-transactional queue and returns the message to the calling application.","pos":[0,127]},{"content":"There is no timeout specified for a message to arrive in the queue.","pos":[128,195]}]}]}],"pos":[22071,22267],"yaml":true},{"content":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.  \n  \n If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.  \n  \n When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.  \n  \n If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.","nodes":[{"pos":[0,124],"content":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location.","pos":[0,124],"source":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location."}]},{"pos":[131,351],"content":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.","nodes":[{"content":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.","pos":[0,220],"source":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does."}]},{"pos":[358,587],"content":"When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","nodes":[{"content":"When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","pos":[0,229],"nodes":[{"content":"When you remove the current message, the cursor is moved to the next message.","pos":[0,77]},{"content":"You do not have to call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.","pos":[78,229],"source":" You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>."}]}]},{"pos":[594,700],"content":"If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.","nodes":[{"content":"If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.","pos":[0,106]}]}],"pos":[22278,22987],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references the first message available in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue."}],"pos":[23147,23253],"yaml":true},{"content":"Removes the current message from a transactional queue and returns the message to the calling application. There is no timeout specified for a message to arrive in the queue.","nodes":[{"pos":[0,174],"content":"Removes the current message from a transactional queue and returns the message to the calling application. There is no timeout specified for a message to arrive in the queue.","nodes":[{"content":"Removes the current message from a transactional queue and returns the message to the calling application. There is no timeout specified for a message to arrive in the queue.","pos":[0,174],"nodes":[{"content":"Removes the current message from a transactional queue and returns the message to the calling application.","pos":[0,106]},{"content":"There is no timeout specified for a message to arrive in the queue.","pos":[107,174]}]}]}],"pos":[24474,24649],"yaml":true},{"content":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using the internal transaction context defined by the `transaction` parameter.  \n  \n If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.  \n  \n When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.  \n  \n When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","nodes":[{"pos":[0,203],"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location, using the internal transaction context defined by the <ph id=\"ph2\">`transaction`</ph> parameter.","source":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using the internal transaction context defined by the `transaction` parameter."},{"pos":[210,430],"content":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.","nodes":[{"content":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.","pos":[0,220],"source":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does."}]},{"pos":[437,701],"content":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.","nodes":[{"content":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.","pos":[0,264],"nodes":[{"content":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.","pos":[0,196],"source":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue."},{"content":"The removal is not irreversible until the transaction is committed.","pos":[197,264]}]}]},{"pos":[708,937],"content":"When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","nodes":[{"content":"When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","pos":[0,229],"nodes":[{"content":"When you remove the current message, the cursor is moved to the next message.","pos":[0,77]},{"content":"You do not have to call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.","pos":[78,229],"source":" You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>."}]}]}],"pos":[24660,25606],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object that specifies the transaction in which the message will be removed.","nodes":[{"pos":[0,141],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransaction\"&gt;&lt;/xref&gt;</ph> object that specifies the transaction in which the message will be removed.","source":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object that specifies the transaction in which the message will be removed."}],"pos":[25841,25983],"yaml":true},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references the first message available in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue."}],"pos":[26051,26157],"yaml":true},{"content":"The <code>transaction</code> parameter is `null`.","nodes":[{"pos":[0,49],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transaction</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>transaction</code> parameter is `null`."}],"pos":[26335,26385],"yaml":true},{"content":"Removes the current message from a queue and returns the message to the calling application. There is no timeout specified for a message to arrive in the queue.","nodes":[{"pos":[0,160],"content":"Removes the current message from a queue and returns the message to the calling application. There is no timeout specified for a message to arrive in the queue.","nodes":[{"content":"Removes the current message from a queue and returns the message to the calling application. There is no timeout specified for a message to arrive in the queue.","pos":[0,160],"nodes":[{"content":"Removes the current message from a queue and returns the message to the calling application.","pos":[0,92]},{"content":"There is no timeout specified for a message to arrive in the queue.","pos":[93,160]}]}]}],"pos":[27551,27712],"yaml":true},{"content":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.  \n  \n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \n  \n If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.  \n  \n When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.  \n  \n When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","nodes":[{"pos":[0,196],"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location, using a transaction context defined by the <ph id=\"ph2\">`transactionType`</ph> parameter.","source":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter."},{"pos":[203,581],"content":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.","nodes":[{"content":"Specify <ph id=\"ph1\">`Automatic`</ph> for the <ph id=\"ph2\">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.","pos":[0,175],"source":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message."},{"content":"Specify <ph id=\"ph1\">`Single`</ph> if you want to receive the message as a single internal transaction.","pos":[176,261],"source":" Specify `Single` if you want to receive the message as a single internal transaction."},{"content":"You can specify <ph id=\"ph1\">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.","pos":[262,378],"source":" You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context."}]},{"pos":[588,808],"content":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.","nodes":[{"content":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.","pos":[0,220],"source":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does."}]},{"pos":[815,1079],"content":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.","nodes":[{"content":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.","pos":[0,264],"nodes":[{"content":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.","pos":[0,196],"source":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue."},{"content":"The removal is not irreversible until the transaction is committed.","pos":[197,264]}]}]},{"pos":[1086,1315],"content":"When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","nodes":[{"content":"When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","pos":[0,229],"nodes":[{"content":"When you remove the current message, the cursor is moved to the next message.","pos":[0,77]},{"content":"You do not have to call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.","pos":[78,229],"source":" You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>."}]}]}],"pos":[27723,29049],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.","nodes":[{"pos":[0,158],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> values, describing the type of transaction context to associate with the message.","source":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message."}],"pos":[29300,29459],"yaml":true},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references the first message available in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue."}],"pos":[29527,29633],"yaml":true},{"content":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.","nodes":[{"pos":[0,135],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transactionType</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not one of the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> members.","source":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members."}],"pos":[29855,29991],"yaml":true},{"content":"Removes the current message from the queue and returns the message to the calling application. If there is a message to remove, the method returns it immediately. Otherwise, the method waits the specified timeout for a new message to arrive.","nodes":[{"pos":[0,241],"content":"Removes the current message from the queue and returns the message to the calling application. If there is a message to remove, the method returns it immediately. Otherwise, the method waits the specified timeout for a new message to arrive.","nodes":[{"content":"Removes the current message from the queue and returns the message to the calling application. If there is a message to remove, the method returns it immediately. Otherwise, the method waits the specified timeout for a new message to arrive.","pos":[0,241],"nodes":[{"content":"Removes the current message from the queue and returns the message to the calling application.","pos":[0,94]},{"content":"If there is a message to remove, the method returns it immediately.","pos":[95,162]},{"content":"Otherwise, the method waits the specified timeout for a new message to arrive.","pos":[163,241]}]}]}],"pos":[31013,31255],"yaml":true},{"content":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location. If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.  \n  \n If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.  \n  \n When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.  \n  \n If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.","nodes":[{"pos":[0,295],"content":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location. If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location.","pos":[0,124],"source":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location."},{"content":"If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id=\"ph1\">`timeout`</ph> parameter has expired.","pos":[125,295],"source":" If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired."}]},{"pos":[302,522],"content":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.","nodes":[{"content":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.","pos":[0,220],"source":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does."}]},{"pos":[529,758],"content":"When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","nodes":[{"content":"When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","pos":[0,229],"nodes":[{"content":"When you remove the current message, the cursor is moved to the next message.","pos":[0,77]},{"content":"You do not have to call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.","pos":[78,229],"source":" You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>."}]}]},{"pos":[765,871],"content":"If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.","nodes":[{"content":"If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.","pos":[0,106]}]}],"pos":[31266,32146],"yaml":true,"extradata":"MT"},{"content":"The interval of time to wait for a message to arrive in the queue.","nodes":[{"pos":[0,66],"content":"The interval of time to wait for a message to arrive in the queue.","nodes":[{"content":"The interval of time to wait for a message to arrive in the queue.","pos":[0,66]}]}],"pos":[32316,32383],"yaml":true},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references the first message available in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue."}],"pos":[32451,32557],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is invalid.","nodes":[{"pos":[0,70],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is invalid.","source":"The value specified for the <code>timeout</code> parameter is invalid."}],"pos":[32727,32798],"yaml":true},{"content":"The timeout has expired.","nodes":[{"pos":[0,24],"content":"The timeout has expired.","nodes":[{"content":"The timeout has expired.","pos":[0,24]}]}],"pos":[32920,32945],"yaml":true},{"content":"Removes the current message from a transactional queue and returns the message to the calling application. If there is a message to remove, the method returns it immediately. Otherwise, the method waits the specified timeout for a new message to arrive.","nodes":[{"pos":[0,253],"content":"Removes the current message from a transactional queue and returns the message to the calling application. If there is a message to remove, the method returns it immediately. Otherwise, the method waits the specified timeout for a new message to arrive.","nodes":[{"content":"Removes the current message from a transactional queue and returns the message to the calling application. If there is a message to remove, the method returns it immediately. Otherwise, the method waits the specified timeout for a new message to arrive.","pos":[0,253],"nodes":[{"content":"Removes the current message from a transactional queue and returns the message to the calling application.","pos":[0,106]},{"content":"If there is a message to remove, the method returns it immediately.","pos":[107,174]},{"content":"Otherwise, the method waits the specified timeout for a new message to arrive.","pos":[175,253]}]}]}],"pos":[34165,34419],"yaml":true},{"content":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location. If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.  \n  \n When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.  \n  \n If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.  \n  \n When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","nodes":[{"pos":[0,295],"content":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location. If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location.","pos":[0,124],"source":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location."},{"content":"If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id=\"ph1\">`timeout`</ph> parameter has expired.","pos":[125,295],"source":" If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired."}]},{"pos":[302,566],"content":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.","nodes":[{"content":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.","pos":[0,264],"nodes":[{"content":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.","pos":[0,196],"source":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue."},{"content":"The removal is not irreversible until the transaction is committed.","pos":[197,264]}]}]},{"pos":[573,793],"content":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.","nodes":[{"content":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.","pos":[0,220],"source":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does."}]},{"pos":[800,1029],"content":"When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","nodes":[{"content":"When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","pos":[0,229],"nodes":[{"content":"When you remove the current message, the cursor is moved to the next message.","pos":[0,77]},{"content":"You do not have to call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.","pos":[78,229],"source":" You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>."}]}]}],"pos":[34430,35468],"yaml":true,"extradata":"MT"},{"content":"The interval of time to wait for the message to be removed.","nodes":[{"pos":[0,59],"content":"The interval of time to wait for the message to be removed.","nodes":[{"content":"The interval of time to wait for the message to be removed.","pos":[0,59]}]}],"pos":[35692,35752],"yaml":true},{"content":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object that specifies the transaction context for the message.","nodes":[{"pos":[0,128],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransaction\"&gt;&lt;/xref&gt;</ph> object that specifies the transaction context for the message.","source":"The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object that specifies the transaction context for the message."}],"pos":[35846,35975],"yaml":true},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references the first message available in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue."}],"pos":[36043,36149],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is invalid.","nodes":[{"pos":[0,70],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is invalid.","source":"The value specified for the <code>timeout</code> parameter is invalid."}],"pos":[36319,36390],"yaml":true},{"content":"The <code>transaction</code> parameter is `null`.","nodes":[{"pos":[0,49],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transaction</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>transaction</code> parameter is `null`."}],"pos":[36492,36542],"yaml":true},{"content":"The timeout has expired.","nodes":[{"pos":[0,24],"content":"The timeout has expired.","nodes":[{"content":"The timeout has expired.","pos":[0,24]}]}],"pos":[36664,36689],"yaml":true},{"content":"Removes the current message from a queue and returns the message to the calling application. If there is a message to remove, the method returns it immediately. Otherwise, the method waits the specified timeout for a new message to arrive.","nodes":[{"pos":[0,239],"content":"Removes the current message from a queue and returns the message to the calling application. If there is a message to remove, the method returns it immediately. Otherwise, the method waits the specified timeout for a new message to arrive.","nodes":[{"content":"Removes the current message from a queue and returns the message to the calling application. If there is a message to remove, the method returns it immediately. Otherwise, the method waits the specified timeout for a new message to arrive.","pos":[0,239],"nodes":[{"content":"Removes the current message from a queue and returns the message to the calling application.","pos":[0,92]},{"content":"If there is a message to remove, the method returns it immediately.","pos":[93,160]},{"content":"Otherwise, the method waits the specified timeout for a new message to arrive.","pos":[161,239]}]}]}],"pos":[37933,38173],"yaml":true},{"content":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter. If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.  \n  \n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \n  \n If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.  \n  \n When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.  \n  \n When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","nodes":[{"pos":[0,367],"content":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter. If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> removes and returns the message at the cursor's current location, using a transaction context defined by the <ph id=\"ph2\">`transactionType`</ph> parameter.","pos":[0,196],"source":"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter."},{"content":"If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the <ph id=\"ph1\">`timeout`</ph> parameter has expired.","pos":[197,367],"source":" If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired."}]},{"pos":[374,752],"content":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.","nodes":[{"content":"Specify <ph id=\"ph1\">`Automatic`</ph> for the <ph id=\"ph2\">`transactionType`</ph> parameter if there is already an external transaction context attached to the thread that you want to use to receive the message.","pos":[0,175],"source":"Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message."},{"content":"Specify <ph id=\"ph1\">`Single`</ph> if you want to receive the message as a single internal transaction.","pos":[176,261],"source":" Specify `Single` if you want to receive the message as a single internal transaction."},{"content":"You can specify <ph id=\"ph1\">`None`</ph> if you want to receive a message from a transactional queue outside of a transaction context.","pos":[262,378],"source":" You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context."}]},{"pos":[759,979],"content":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.","nodes":[{"content":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <ph id=\"ph1\">&lt;xref:System.Messaging.MessageQueue&gt;</ph> class's <ph id=\"ph2\">&lt;xref:System.Messaging.MessageQueue.Receive%2A&gt;</ph> method does.","pos":[0,220],"source":"If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does."}]},{"pos":[986,1250],"content":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.","nodes":[{"content":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.","pos":[0,264],"nodes":[{"content":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph> to be returned to the queue.","pos":[0,196],"source":"When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue."},{"content":"The removal is not irreversible until the transaction is committed.","pos":[197,264]}]}]},{"pos":[1257,1486],"content":"When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","nodes":[{"content":"When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.","pos":[0,229],"nodes":[{"content":"When you remove the current message, the cursor is moved to the next message.","pos":[0,77]},{"content":"You do not have to call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A&gt;</ph>.","pos":[78,229],"source":" You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>."}]}]}],"pos":[38184,39681],"yaml":true,"extradata":"MT"},{"content":"The interval of time to wait for the message to be removed.","nodes":[{"pos":[0,59],"content":"The interval of time to wait for the message to be removed.","nodes":[{"content":"The interval of time to wait for the message to be removed.","pos":[0,59]}]}],"pos":[39913,39973],"yaml":true},{"content":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.","nodes":[{"pos":[0,158],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> values, describing the type of transaction context to associate with the message.","source":"One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message."}],"pos":[40075,40234],"yaml":true},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.","nodes":[{"pos":[0,105],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references the first message available in the queue.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue."}],"pos":[40302,40408],"yaml":true},{"content":"The value specified for the <code>timeout</code> parameter is invalid.","nodes":[{"pos":[0,70],"content":"The value specified for the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">timeout</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is invalid.","source":"The value specified for the <code>timeout</code> parameter is invalid."}],"pos":[40578,40649],"yaml":true},{"content":"The timeout has expired.","nodes":[{"pos":[0,24],"content":"The timeout has expired.","nodes":[{"content":"The timeout has expired.","pos":[0,24]}]}],"pos":[40771,40796],"yaml":true},{"content":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.","nodes":[{"pos":[0,135],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">transactionType</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not one of the <ph id=\"ph2\">&lt;xref href=\"System.Messaging.MessageQueueTransactionType\"&gt;&lt;/xref&gt;</ph> members.","source":"The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members."}],"pos":[40942,41078],"yaml":true},{"content":"Resets the current enumerator so it points to the head of the queue.","nodes":[{"pos":[0,68],"content":"Resets the current enumerator so it points to the head of the queue.","nodes":[{"content":"Resets the current enumerator so it points to the head of the queue.","pos":[0,68]}]}],"pos":[41977,42046],"yaml":true},{"content":"An enumerator can only move in a forward direction. Use this method to start over at the beginning of the queue.  \n  \n After calling <xref:System.Messaging.MessageEnumerator.Reset%2A>, the cursor points to the first message. You do not need to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.Reset%2A> to move the cursor forward to the first message in the queue.","nodes":[{"pos":[0,112],"content":"An enumerator can only move in a forward direction. Use this method to start over at the beginning of the queue.","nodes":[{"content":"An enumerator can only move in a forward direction. Use this method to start over at the beginning of the queue.","pos":[0,112],"nodes":[{"content":"An enumerator can only move in a forward direction.","pos":[0,51]},{"content":"Use this method to start over at the beginning of the queue.","pos":[52,112]}]}]},{"pos":[119,429],"content":"After calling <xref:System.Messaging.MessageEnumerator.Reset%2A>, the cursor points to the first message. You do not need to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.Reset%2A> to move the cursor forward to the first message in the queue.","nodes":[{"content":"After calling <xref:System.Messaging.MessageEnumerator.Reset%2A>, the cursor points to the first message. You do not need to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.Reset%2A> to move the cursor forward to the first message in the queue.","pos":[0,310],"nodes":[{"content":"After calling <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph>, the cursor points to the first message.","pos":[0,105],"source":"After calling <xref:System.Messaging.MessageEnumerator.Reset%2A>, the cursor points to the first message."},{"content":"You do not need to call <ph id=\"ph1\">&lt;xref:System.Messaging.MessageEnumerator.MoveNext%2A&gt;</ph> after calling <ph id=\"ph2\">&lt;xref:System.Messaging.MessageEnumerator.Reset%2A&gt;</ph> to move the cursor forward to the first message in the queue.","pos":[106,310],"source":" You do not need to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.Reset%2A> to move the cursor forward to the first message in the queue."}]}]}],"pos":[42057,42491],"yaml":true,"extradata":"MT"},{"content":"Returns a <xref href=\"System.Messaging.Message\"></xref> that references the message at the current cursor position.","nodes":[{"pos":[0,115],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references the message at the current cursor position.","source":"Returns a <xref href=\"System.Messaging.Message\"></xref> that references the message at the current cursor position."}],"pos":[43676,43792],"yaml":true},{"content":"A <xref href=\"System.Messaging.Message\"></xref> that references the message at the current cursor position.","nodes":[{"pos":[0,107],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Messaging.Message\"&gt;&lt;/xref&gt;</ph> that references the message at the current cursor position.","source":"A <xref href=\"System.Messaging.Message\"></xref> that references the message at the current cursor position."}],"pos":[43927,44035],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Messaging.MessageEnumerator\n  commentId: T:System.Messaging.MessageEnumerator\n  id: MessageEnumerator\n  children:\n  - System.Messaging.MessageEnumerator.Close\n  - System.Messaging.MessageEnumerator.Current\n  - System.Messaging.MessageEnumerator.CursorHandle\n  - System.Messaging.MessageEnumerator.Dispose\n  - System.Messaging.MessageEnumerator.Dispose(System.Boolean)\n  - System.Messaging.MessageEnumerator.Finalize\n  - System.Messaging.MessageEnumerator.MoveNext\n  - System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)\n  - System.Messaging.MessageEnumerator.RemoveCurrent\n  - System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)\n  - System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)\n  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)\n  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  - System.Messaging.MessageEnumerator.Reset\n  - System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current\n  langs:\n  - csharp\n  name: MessageEnumerator\n  nameWithType: MessageEnumerator\n  fullName: System.Messaging.MessageEnumerator\n  type: Class\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Provides a forward-only cursor to enumerate through messages in a message queue.\n  remarks: \"Use <xref:System.Messaging.MessageEnumerator> for dynamic interaction with messages in a queue. Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageEnumerator> pointing to a dynamic list of messages in the queue, or an array that contains a copy at a given instant - a snapshot - of the queue at the time the specified method was called.  \\n  \\n Unlike a static snapshot, an enumerator allows you to modify the collection. Using a <xref:System.Messaging.MessageEnumerator>, you can remove messages from the queue, and the change is immediately reflected in the queue.  \\n  \\n An enumerator does not remove the messages from the queue when it queries the queue. It returns information about the message at the current cursor position, but it leaves the message in the queue.  \\n  \\n A <xref:System.Messaging.MessageEnumerator> is a cursor, initialized to the head of a dynamic list. The list order is the same as the order of the messages in the queue, according to message priority. You can move the cursor to the first message in the queue by calling <xref:System.Messaging.MessageEnumerator.MoveNext%2A>. After the enumerator has been initialized, you can use <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to step forward through the remaining messages. You can specify whether to wait for a message to become available by passing a timeout into the <xref:System.Messaging.MessageEnumerator.MoveNext%2A> method.  \\n  \\n Because the enumerator is dynamic, a message that is appended beyond the cursor's current position (for example, due to low priority), can be accessed by the enumerator. A message that is inserted before the cursor's current position cannot be accessed. It is not possible to step backward with a <xref:System.Messaging.MessageEnumerator>. A cursor allows forward-only movement. The <xref:System.Messaging.MessageEnumerator.Reset%2A> method enables you to place the cursor back at the beginning of the queue.  \\n  \\n Instances of <xref:System.Messaging.MessageEnumerator> for a given queue work independently. You can create two <xref:System.Messaging.MessageEnumerator> instances that apply to the same queue. The changes that one <xref:System.Messaging.MessageEnumerator> makes to the messages in the queue will be reflected immediately in a second enumerator if the second enumerator is positioned before the first. However, if two enumerators have the same position and one of them removes the message at that position, an exception is thrown if the other enumerator attempts to get the value of the <xref:System.Messaging.MessageEnumerator.Current%2A> property on the now-deleted message.  \\n  \\n> [!NOTE]\\n>  If you create an instance of <xref:System.Messaging.MessageQueue> with <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName> set to `true`, no other application can modify the messages in your enumerator while you have the connection to the queue.\"\n  example:\n  - \"The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority?displayProperty=fullName>.  \\n  \\n [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]\\n [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]\\n [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]\"\n  syntax:\n    content: 'public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator'\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  implements:\n  - System.Collections.IEnumerator\n  - System.IDisposable\n  inheritedMembers:\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageEnumerator.Close\n  commentId: M:System.Messaging.MessageEnumerator.Close\n  id: Close\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: MessageEnumerator.Close()\n  fullName: MessageEnumerator.Close()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Frees the resources associated with the enumerator.\n  remarks: The operating system retains an open handle to the queue during the lifetime of the cursor. When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release the resources associated with the handle.\n  syntax:\n    content: public void Close ();\n    parameters: []\n  overload: System.Messaging.MessageEnumerator.Close*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageEnumerator.Current\n  commentId: P:System.Messaging.MessageEnumerator.Current\n  id: Current\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: Current\n  nameWithType: MessageEnumerator.Current\n  fullName: MessageEnumerator.Current\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the current <xref href=\"System.Messaging.Message\"></xref> that this enumerator points to.\n  remarks: When the enumerator is created, it points to the head of the queue, at a location before the first message. In this case, <xref:System.Messaging.MessageEnumerator.Current%2A> is not valid and will throw an exception if it is accessed. You must call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> to position the cursor at the first message in the queue.\n  syntax:\n    content: public System.Messaging.Message Current { get; }\n    return:\n      type: System.Messaging.Message\n      description: The current message.\n  overload: System.Messaging.MessageEnumerator.Current*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"You called <xref href=\\\"System.Messaging.MessageEnumerator.Current\\\"></xref> before the first call to <xref href=\\\"System.Messaging.MessageEnumerator.MoveNext\\\"></xref>. The cursor is located before the first element of the message enumeration.  \\n  \\n -or-  \\n  \\n You called <xref href=\\\"System.Messaging.MessageEnumerator.Current\\\"></xref> after a call to <xref href=\\\"System.Messaging.MessageEnumerator.MoveNext\\\"></xref> had returned `false` (indicating the cursor is located after the last element of the message enumeration.)\"\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: The message the enumerator is currently pointing to no longer exists. It might have been deleted.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageEnumerator.CursorHandle\n  commentId: P:System.Messaging.MessageEnumerator.CursorHandle\n  id: CursorHandle\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: CursorHandle\n  nameWithType: MessageEnumerator.CursorHandle\n  fullName: MessageEnumerator.CursorHandle\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Gets the native Message Queuing cursor handle used to browse messages in the queue.\n  remarks: This property contains the native handle to the enumeration. When you have finished working with the enumerator, call <xref:System.Messaging.MessageEnumerator.Close%2A> to release this resource.\n  syntax:\n    content: public IntPtr CursorHandle { get; }\n    return:\n      type: System.IntPtr\n      description: The native cursor handle.\n  overload: System.Messaging.MessageEnumerator.CursorHandle*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: The handle does not exist.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageEnumerator.Dispose\n  commentId: M:System.Messaging.MessageEnumerator.Dispose\n  id: Dispose\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: Dispose()\n  nameWithType: MessageEnumerator.Dispose()\n  fullName: MessageEnumerator.Dispose()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Releases all resources used by the <xref href=\"System.Messaging.MessageEnumerator\"></xref>.\n  remarks: Calling <xref:System.Messaging.MessageEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageEnumerator> to be reallocated for other purposes. For more information about <xref:System.Messaging.MessageEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).\n  syntax:\n    content: public void Dispose ();\n    parameters: []\n  overload: System.Messaging.MessageEnumerator.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageEnumerator.Dispose(System.Boolean)\n  commentId: M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: MessageEnumerator.Dispose(Boolean)\n  fullName: MessageEnumerator.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Releases the unmanaged resources used by the <xref href=\"System.Messaging.MessageEnumerator\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public <xref:System.Messaging.MessageEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. `Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageEnumerator> references. This method invokes the `Dispose()` method of each referenced object.\"\n  syntax:\n    content: protected virtual void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.Messaging.MessageEnumerator.Dispose*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageEnumerator.Finalize\n  commentId: M:System.Messaging.MessageEnumerator.Finalize\n  id: Finalize\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: Finalize()\n  nameWithType: MessageEnumerator.Finalize()\n  fullName: MessageEnumerator.Finalize()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  syntax:\n    content: ~MessageEnumerator ();\n    parameters: []\n  overload: System.Messaging.MessageEnumerator.Finalize*\n  exceptions: []\n  version:\n  - xamarinmac-3.0\n  monikers:\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n- uid: System.Messaging.MessageEnumerator.MoveNext\n  commentId: M:System.Messaging.MessageEnumerator.MoveNext\n  id: MoveNext\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: MoveNext()\n  nameWithType: MessageEnumerator.MoveNext()\n  fullName: MessageEnumerator.MoveNext()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Advances the enumerator to the next message in the queue, if one is currently available.\n  remarks: \"This overload returns immediately if there is no message in the queue. There is another overload that waits a specified <xref:System.TimeSpan> for a message to arrive.  \\n  \\n If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> returns `false` to the calling method.  \\n  \\n Upon creation, an enumerator is conceptually positioned before the first message of the queue, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the queue into view.\"\n  syntax:\n    content: public bool MoveNext ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the enumerator was succesfully advanced to the next message; `false` if the enumerator has reached the end of the queue.'\n  overload: System.Messaging.MessageEnumerator.MoveNext*\n  exceptions:\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: An exception specific to Message Queuing was thrown.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)\n  commentId: M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)\n  id: MoveNext(System.TimeSpan)\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: MoveNext(TimeSpan)\n  nameWithType: MessageEnumerator.MoveNext(TimeSpan)\n  fullName: MessageEnumerator.MoveNext(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Advances the enumerator to the next message in the queue. If the enumerator is positioned at the end of the queue, <xref href=\"System.Messaging.MessageEnumerator.MoveNext\"></xref> waits until a message is available or the given timeout expires.\n  remarks: \"This overload waits if there is no message in the queue or if the cursor has reached the end of the queue. If a message is not currently available because the queue is empty or because you have moved beyond the last element in the collection, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> waits the specified timeout.  \\n  \\n If the cursor is already at the end of the queue, <xref:System.Messaging.MessageEnumerator.MoveNext%2A> only returns `true` if the new message arrives within the specified time interval, has lower priority than all messages currently in the queue and is placed at the end of the queue. An overload with no parameter returns immediately if no further messages are in the queue.  \\n  \\n Upon creation, an enumerator is conceptually positioned before the first message of the enumeration, and the first call to <xref:System.Messaging.MessageEnumerator.MoveNext%2A> brings the first message of the enumeration into view.\"\n  syntax:\n    content: public bool MoveNext (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The <xref href=\"System.TimeSpan\"></xref> to wait for a message to be available if the enumerator is positioned at the end of the queue.\n    return:\n      type: System.Boolean\n      description: '`true` if the enumerator successfully advanced to the next message; `false` if the enumerator has reached the end of the queue and a message does not become available within the time specified by the <code>timeout</code> parameter.'\n  overload: System.Messaging.MessageEnumerator.MoveNext*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the timeout parameter is invalid. It might represent a negative number.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: \"An exception specific to Message Queuing was thrown.  \\n  \\n -or-  \\n  \\n The timeout has expired.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageEnumerator.RemoveCurrent\n  commentId: M:System.Messaging.MessageEnumerator.RemoveCurrent\n  id: RemoveCurrent\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: RemoveCurrent()\n  nameWithType: MessageEnumerator.RemoveCurrent()\n  fullName: MessageEnumerator.RemoveCurrent()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Removes the current message from a transactional or non-transactional queue and returns the message to the calling application. There is no timeout specified for a message to arrive in the queue.\n  remarks: \"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location.  \\n  \\n If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.  \\n  \\n When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.  \\n  \\n If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.\"\n  syntax:\n    content: public System.Messaging.Message RemoveCurrent ();\n    parameters: []\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.\n  overload: System.Messaging.MessageEnumerator.RemoveCurrent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)\n  commentId: M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)\n  id: RemoveCurrent(System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: RemoveCurrent(MessageQueueTransaction)\n  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)\n  fullName: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Removes the current message from a transactional queue and returns the message to the calling application. There is no timeout specified for a message to arrive in the queue.\n  remarks: \"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using the internal transaction context defined by the `transaction` parameter.  \\n  \\n If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.  \\n  \\n When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.  \\n  \\n When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.\"\n  syntax:\n    content: public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);\n    parameters:\n    - id: transaction\n      type: System.Messaging.MessageQueueTransaction\n      description: The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object that specifies the transaction in which the message will be removed.\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.\n  overload: System.Messaging.MessageEnumerator.RemoveCurrent*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>transaction</code> parameter is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)\n  commentId: M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)\n  id: RemoveCurrent(System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: RemoveCurrent(MessageQueueTransactionType)\n  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)\n  fullName: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Removes the current message from a queue and returns the message to the calling application. There is no timeout specified for a message to arrive in the queue.\n  remarks: \"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter.  \\n  \\n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \\n  \\n If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.  \\n  \\n When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.  \\n  \\n When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.\"\n  syntax:\n    content: public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);\n    parameters:\n    - id: transactionType\n      type: System.Messaging.MessageQueueTransactionType\n      description: One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.\n  overload: System.Messaging.MessageEnumerator.RemoveCurrent*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)\n  commentId: M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)\n  id: RemoveCurrent(System.TimeSpan)\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: RemoveCurrent(TimeSpan)\n  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan)\n  fullName: MessageEnumerator.RemoveCurrent(TimeSpan)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Removes the current message from the queue and returns the message to the calling application. If there is a message to remove, the method returns it immediately. Otherwise, the method waits the specified timeout for a new message to arrive.\n  remarks: \"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location. If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.  \\n  \\n If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.  \\n  \\n When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.  \\n  \\n If you call this overload on a transactional queue, Message Queuing creates a single internal transaction.\"\n  syntax:\n    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval of time to wait for a message to arrive in the queue.\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.\n  overload: System.Messaging.MessageEnumerator.RemoveCurrent*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is invalid.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: The timeout has expired.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  commentId: M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  id: RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: RemoveCurrent(TimeSpan, MessageQueueTransaction)\n  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan, MessageQueueTransaction)\n  fullName: MessageEnumerator.RemoveCurrent(TimeSpan, MessageQueueTransaction)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Removes the current message from a transactional queue and returns the message to the calling application. If there is a message to remove, the method returns it immediately. Otherwise, the method waits the specified timeout for a new message to arrive.\n  remarks: \"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location. If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.  \\n  \\n When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.  \\n  \\n If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.  \\n  \\n When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.\"\n  syntax:\n    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval of time to wait for the message to be removed.\n    - id: transaction\n      type: System.Messaging.MessageQueueTransaction\n      description: The <xref href=\"System.Messaging.MessageQueueTransaction\"></xref> object that specifies the transaction context for the message.\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.\n  overload: System.Messaging.MessageEnumerator.RemoveCurrent*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is invalid.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>transaction</code> parameter is `null`.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: The timeout has expired.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  commentId: M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  id: RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: RemoveCurrent(TimeSpan, MessageQueueTransactionType)\n  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan, MessageQueueTransactionType)\n  fullName: MessageEnumerator.RemoveCurrent(TimeSpan, MessageQueueTransactionType)\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Removes the current message from a queue and returns the message to the calling application. If there is a message to remove, the method returns it immediately. Otherwise, the method waits the specified timeout for a new message to arrive.\n  remarks: \"<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> removes and returns the message at the cursor's current location, using a transaction context defined by the `transactionType` parameter. If the cursor is at the end of the queue, this overload of the method waits until a message is available or the interval specified by the `timeout` parameter has expired.  \\n  \\n Specify `Automatic` for the `transactionType` parameter if there is already an external transaction context attached to the thread that you want to use to receive the message. Specify `Single` if you want to receive the message as a single internal transaction. You can specify `None` if you want to receive a message from a transactional queue outside of a transaction context.  \\n  \\n If you are using queue journaling, removing the message causes a copy to be kept in the journal queue, just as the <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Receive%2A> method does.  \\n  \\n When working with transactional queues, a rollback of a transaction causes any messages removed by a call to <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> to be returned to the queue. The removal is not irreversible until the transaction is committed.  \\n  \\n When you remove the current message, the cursor is moved to the next message. You do not have to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.\"\n  syntax:\n    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: The interval of time to wait for the message to be removed.\n    - id: transactionType\n      type: System.Messaging.MessageQueueTransactionType\n      description: One of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> values, describing the type of transaction context to associate with the message.\n    return:\n      type: System.Messaging.Message\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references the first message available in the queue.\n  overload: System.Messaging.MessageEnumerator.RemoveCurrent*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The value specified for the <code>timeout</code> parameter is invalid.\n  - type: System.Messaging.MessageQueueException\n    commentId: T:System.Messaging.MessageQueueException\n    description: The timeout has expired.\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: The <code>transactionType</code> parameter is not one of the <xref href=\"System.Messaging.MessageQueueTransactionType\"></xref> members.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageEnumerator.Reset\n  commentId: M:System.Messaging.MessageEnumerator.Reset\n  id: Reset\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: MessageEnumerator.Reset()\n  fullName: MessageEnumerator.Reset()\n  type: Method\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Resets the current enumerator so it points to the head of the queue.\n  remarks: \"An enumerator can only move in a forward direction. Use this method to start over at the beginning of the queue.  \\n  \\n After calling <xref:System.Messaging.MessageEnumerator.Reset%2A>, the cursor points to the first message. You do not need to call <xref:System.Messaging.MessageEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageEnumerator.Reset%2A> to move the cursor forward to the first message in the queue.\"\n  syntax:\n    content: public void Reset ();\n    parameters: []\n  overload: System.Messaging.MessageEnumerator.Reset*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  ms.technology:\n  - dotnet-standard\n  manager: tyoung\n- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current\n  commentId: P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current\n  id: System#Collections#IEnumerator#Current\n  isEii: true\n  parent: System.Messaging.MessageEnumerator\n  langs:\n  - csharp\n  name: IEnumerator.Current\n  nameWithType: MessageEnumerator.IEnumerator.Current\n  fullName: MessageEnumerator.IEnumerator.Current\n  type: Property\n  assemblies:\n  - System.Messaging\n  namespace: System.Messaging\n  summary: Returns a <xref href=\"System.Messaging.Message\"></xref> that references the message at the current cursor position.\n  syntax:\n    content: object System.Collections.IEnumerator.Current { get; }\n    return:\n      type: System.Object\n      description: A <xref href=\"System.Messaging.Message\"></xref> that references the message at the current cursor position.\n  overload: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n  manager: tyoung\nreferences:\n- uid: System.MarshalByRefObject\n  parent: System\n  isExternal: false\n  name: MarshalByRefObject\n  nameWithType: MarshalByRefObject\n  fullName: System.MarshalByRefObject\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Messaging.MessageQueueException\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueException\n  nameWithType: MessageQueueException\n  fullName: System.Messaging.MessageQueueException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ComponentModel.InvalidEnumArgumentException\n  parent: System.ComponentModel\n  isExternal: false\n  name: InvalidEnumArgumentException\n  nameWithType: InvalidEnumArgumentException\n  fullName: System.ComponentModel.InvalidEnumArgumentException\n- uid: System.Messaging.MessageEnumerator.Close\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: Close()\n  nameWithType: MessageEnumerator.Close()\n  fullName: MessageEnumerator.Close()\n- uid: System.Messaging.MessageEnumerator.Current\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: Current\n  nameWithType: MessageEnumerator.Current\n  fullName: MessageEnumerator.Current\n- uid: System.Messaging.Message\n  parent: System.Messaging\n  isExternal: false\n  name: Message\n  nameWithType: Message\n  fullName: System.Messaging.Message\n- uid: System.Messaging.MessageEnumerator.CursorHandle\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: CursorHandle\n  nameWithType: MessageEnumerator.CursorHandle\n  fullName: MessageEnumerator.CursorHandle\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Messaging.MessageEnumerator.Dispose\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: Dispose()\n  nameWithType: MessageEnumerator.Dispose()\n  fullName: MessageEnumerator.Dispose()\n- uid: System.Messaging.MessageEnumerator.Dispose(System.Boolean)\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: MessageEnumerator.Dispose(Boolean)\n  fullName: MessageEnumerator.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Messaging.MessageEnumerator.Finalize\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: Finalize()\n  nameWithType: MessageEnumerator.Finalize()\n  fullName: MessageEnumerator.Finalize()\n- uid: System.Messaging.MessageEnumerator.MoveNext\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: MoveNext()\n  nameWithType: MessageEnumerator.MoveNext()\n  fullName: MessageEnumerator.MoveNext()\n- uid: System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: MoveNext(TimeSpan)\n  nameWithType: MessageEnumerator.MoveNext(TimeSpan)\n  fullName: MessageEnumerator.MoveNext(TimeSpan)\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.Messaging.MessageEnumerator.RemoveCurrent\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: RemoveCurrent()\n  nameWithType: MessageEnumerator.RemoveCurrent()\n  fullName: MessageEnumerator.RemoveCurrent()\n- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: RemoveCurrent(MessageQueueTransaction)\n  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)\n  fullName: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)\n- uid: System.Messaging.MessageQueueTransaction\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueTransaction\n  nameWithType: MessageQueueTransaction\n  fullName: System.Messaging.MessageQueueTransaction\n- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: RemoveCurrent(MessageQueueTransactionType)\n  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)\n  fullName: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)\n- uid: System.Messaging.MessageQueueTransactionType\n  parent: System.Messaging\n  isExternal: false\n  name: MessageQueueTransactionType\n  nameWithType: MessageQueueTransactionType\n  fullName: System.Messaging.MessageQueueTransactionType\n- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: RemoveCurrent(TimeSpan)\n  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan)\n  fullName: MessageEnumerator.RemoveCurrent(TimeSpan)\n- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: RemoveCurrent(TimeSpan, MessageQueueTransaction)\n  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan, MessageQueueTransaction)\n  fullName: MessageEnumerator.RemoveCurrent(TimeSpan, MessageQueueTransaction)\n- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: RemoveCurrent(TimeSpan, MessageQueueTransactionType)\n  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan, MessageQueueTransactionType)\n  fullName: MessageEnumerator.RemoveCurrent(TimeSpan, MessageQueueTransactionType)\n- uid: System.Messaging.MessageEnumerator.Reset\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: Reset()\n  nameWithType: MessageEnumerator.Reset()\n  fullName: MessageEnumerator.Reset()\n- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: IEnumerator.Current\n  nameWithType: MessageEnumerator.IEnumerator.Current\n  fullName: MessageEnumerator.IEnumerator.Current\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Messaging.MessageEnumerator.RemoveCurrent*\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: RemoveCurrent\n  nameWithType: MessageEnumerator.RemoveCurrent\n  fullName: MessageEnumerator.RemoveCurrent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n- uid: System.Messaging.MessageEnumerator.Close*\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: Close\n  nameWithType: MessageEnumerator.Close\n  fullName: MessageEnumerator.Close\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n- uid: System.Messaging.MessageEnumerator.Current*\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: Current\n  nameWithType: MessageEnumerator.Current\n  fullName: MessageEnumerator.Current\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n- uid: System.Messaging.MessageEnumerator.CursorHandle*\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: CursorHandle\n  nameWithType: MessageEnumerator.CursorHandle\n  fullName: MessageEnumerator.CursorHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n- uid: System.Messaging.MessageEnumerator.Dispose*\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: Dispose\n  nameWithType: MessageEnumerator.Dispose\n  fullName: MessageEnumerator.Dispose\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n- uid: System.Messaging.MessageEnumerator.Finalize*\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: Finalize\n  nameWithType: MessageEnumerator.Finalize\n  fullName: MessageEnumerator.Finalize\n  monikers:\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n- uid: System.Messaging.MessageEnumerator.MoveNext*\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: MoveNext\n  nameWithType: MessageEnumerator.MoveNext\n  fullName: MessageEnumerator.MoveNext\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n- uid: System.Messaging.MessageEnumerator.Reset*\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: Reset\n  nameWithType: MessageEnumerator.Reset\n  fullName: MessageEnumerator.Reset\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current*\n  parent: System.Messaging.MessageEnumerator\n  isExternal: false\n  name: System.Collections.IEnumerator.Current\n  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current\n  fullName: MessageEnumerator.System.Collections.IEnumerator.Current\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Messaging/MessageEnumerator.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: CreateObjRef(Type)\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  fullName: MarshalByRefObject.CreateObjRef(Type)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: GetLifetimeService()\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  fullName: MarshalByRefObject.GetLifetimeService()\n- uid: System.MarshalByRefObject.InitializeLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: InitializeLifetimeService()\n  nameWithType: MarshalByRefObject.InitializeLifetimeService()\n  fullName: MarshalByRefObject.InitializeLifetimeService()\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: false\n  name: MemberwiseClone(Boolean)\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  fullName: MarshalByRefObject.MemberwiseClone(Boolean)\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n"}