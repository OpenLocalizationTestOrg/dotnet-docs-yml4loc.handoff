{"nodes":[{"content":"Provides a <xref href=\"System.Windows.WeakEventManager\"></xref> implementation so that you can use the \"weak event listener\" pattern to attach listeners for the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event.","nodes":[{"pos":[0,249],"content":"Provides a <ph id=\"ph1\">&lt;xref href=\"System.Windows.WeakEventManager\"&gt;&lt;/xref&gt;</ph> implementation so that you can use the \"weak event listener\" pattern to attach listeners for the <ph id=\"ph2\">&lt;xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"&gt;&lt;/xref&gt;</ph> event.","source":"Provides a <xref href=\"System.Windows.WeakEventManager\"></xref> implementation so that you can use the \"weak event listener\" pattern to attach listeners for the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event."}],"pos":[1509,1759],"yaml":true},{"content":"In order to be listeners in this pattern, your listener objects must implement <xref:System.Windows.IWeakEventListener>. You do not need to implement <xref:System.Windows.IWeakEventListener> on the class that is the source of the events.","nodes":[{"pos":[0,237],"content":"In order to be listeners in this pattern, your listener objects must implement <xref:System.Windows.IWeakEventListener>. You do not need to implement <xref:System.Windows.IWeakEventListener> on the class that is the source of the events.","nodes":[{"content":"In order to be listeners in this pattern, your listener objects must implement <xref:System.Windows.IWeakEventListener>. You do not need to implement <xref:System.Windows.IWeakEventListener> on the class that is the source of the events.","pos":[0,237],"nodes":[{"content":"In order to be listeners in this pattern, your listener objects must implement <ph id=\"ph1\">&lt;xref:System.Windows.IWeakEventListener&gt;</ph>.","pos":[0,120],"source":"In order to be listeners in this pattern, your listener objects must implement <xref:System.Windows.IWeakEventListener>."},{"content":"You do not need to implement <ph id=\"ph1\">&lt;xref:System.Windows.IWeakEventListener&gt;</ph> on the class that is the source of the events.","pos":[121,237],"source":" You do not need to implement <xref:System.Windows.IWeakEventListener> on the class that is the source of the events."}]}]}],"pos":[1770,2008],"yaml":true,"extradata":"MT"},{"content":"Adds the specified event handler, which is called when specified source raises the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event for the specified property.","nodes":[{"pos":[0,198],"content":"Adds the specified event handler, which is called when specified source raises the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"&gt;&lt;/xref&gt;</ph> event for the specified property.","source":"Adds the specified event handler, which is called when specified source raises the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event for the specified property."}],"pos":[5342,5541],"yaml":true},{"content":"Use this method to specify the event handler you want to use to subscribe to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event..  When you use this method, your listener object does not need to implement the <xref:System.Windows.IWeakEventListener> interface.","nodes":[{"pos":[0,287],"content":"Use this method to specify the event handler you want to use to subscribe to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event..  When you use this method, your listener object does not need to implement the <xref:System.Windows.IWeakEventListener> interface.","nodes":[{"content":"Use this method to specify the event handler you want to use to subscribe to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event..  When you use this method, your listener object does not need to implement the <xref:System.Windows.IWeakEventListener> interface.","pos":[0,287],"nodes":[{"content":"Use this method to specify the event handler you want to use to subscribe to the <ph id=\"ph1\">&lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt;</ph> event..","pos":[0,156],"source":"Use this method to specify the event handler you want to use to subscribe to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event.."},{"content":"When you use this method, your listener object does not need to implement the <ph id=\"ph1\">&lt;xref:System.Windows.IWeakEventListener&gt;</ph> interface.","pos":[158,287],"source":"  When you use this method, your listener object does not need to implement the <xref:System.Windows.IWeakEventListener> interface."}]}]}],"pos":[5552,5840],"yaml":true,"extradata":"MT"},{"content":"The source object that the raises the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event.","nodes":[{"pos":[0,126],"content":"The source object that the raises the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"&gt;&lt;/xref&gt;</ph> event.","source":"The source object that the raises the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event."}],"pos":[6148,6275],"yaml":true},{"content":"The delegate that handles the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event.","nodes":[{"pos":[0,118],"content":"The delegate that handles the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"&gt;&lt;/xref&gt;</ph> event.","source":"The delegate that handles the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event."}],"pos":[6392,6511],"yaml":true},{"content":"The name of the property that exists on <code>source</code> upon which to listen for changes. Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\".","nodes":[{"pos":[0,169],"content":"The name of the property that exists on <code>source</code> upon which to listen for changes. Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\".","nodes":[{"content":"The name of the property that exists on <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> upon which to listen for changes.","pos":[0,93],"source":"The name of the property that exists on <code>source</code> upon which to listen for changes."},{"content":"Set to <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> to indicate \"any property\".","pos":[94,169],"source":" Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\"."}]}],"pos":[6579,6749],"yaml":true},{"content":"<code>handler</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;handler&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>handler</code> is `null`."}],"pos":[6939,6971],"yaml":true},{"content":"More than one method is associated with <code>handler</code>.","nodes":[{"pos":[0,61],"content":"More than one method is associated with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">handler</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"More than one method is associated with <code>handler</code>."}],"pos":[7073,7135],"yaml":true},{"content":"Adds the specified listener to the list of listeners on the specified source.","nodes":[{"pos":[0,77],"content":"Adds the specified listener to the list of listeners on the specified source.","nodes":[{"content":"Adds the specified listener to the list of listeners on the specified source.","pos":[0,77]}]}],"pos":[8585,8663],"yaml":true},{"content":"The object with the event.","nodes":[{"pos":[0,26],"content":"The object with the event.","nodes":[{"content":"The object with the event.","pos":[0,26]}]}],"pos":[8946,8973],"yaml":true},{"content":"The object to add as a listener.","nodes":[{"pos":[0,32],"content":"The object to add as a listener.","nodes":[{"content":"The object to add as a listener.","pos":[0,32]}]}],"pos":[9057,9090],"yaml":true},{"content":"The name of the property that exists on <code>source</code> upon which to listen for changes. Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\".","nodes":[{"pos":[0,169],"content":"The name of the property that exists on <code>source</code> upon which to listen for changes. Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\".","nodes":[{"content":"The name of the property that exists on <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> upon which to listen for changes.","pos":[0,93],"source":"The name of the property that exists on <code>source</code> upon which to listen for changes."},{"content":"Set to <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> to indicate \"any property\".","pos":[94,169],"source":" Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\"."}]}],"pos":[9158,9328],"yaml":true},{"content":"Returns a new object to contain listeners to the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event.","nodes":[{"pos":[0,137],"content":"Returns a new object to contain listeners to the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"&gt;&lt;/xref&gt;</ph> event.","source":"Returns a new object to contain listeners to the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event."}],"pos":[10462,10600],"yaml":true},{"content":"A new object to contain listeners to the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event.","nodes":[{"pos":[0,129],"content":"A new object to contain listeners to the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"&gt;&lt;/xref&gt;</ph> event.","source":"A new object to contain listeners to the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event."}],"pos":[10814,10944],"yaml":true},{"content":"Removes listeners that are no longer active from the data for the provided source.","nodes":[{"pos":[0,82],"content":"Removes listeners that are no longer active from the data for the provided source.","nodes":[{"content":"Removes listeners that are no longer active from the data for the provided source.","pos":[0,82]}]}],"pos":[12223,12306],"yaml":true},{"content":"Source object to remove all listeners from.","nodes":[{"pos":[0,43],"content":"Source object to remove all listeners from.","nodes":[{"content":"Source object to remove all listeners from.","pos":[0,43]}]}],"pos":[12482,12526],"yaml":true},{"content":"The data to purge. This is expected to be a <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.","nodes":[{"pos":[0,113],"content":"The data to purge. This is expected to be a <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.","nodes":[{"content":"The data to purge.","pos":[0,18]},{"content":"This is expected to be a <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.HybridDictionary\"&gt;&lt;/xref&gt;</ph>.","pos":[19,113],"source":" This is expected to be a <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>."}]}],"pos":[12586,12700],"yaml":true},{"content":"Set to `true` to stop listening and to completely remove all data.","nodes":[{"pos":[0,66],"content":"Set to <ph id=\"ph1\">`true`</ph> to stop listening and to completely remove all data.","source":"Set to `true` to stop listening and to completely remove all data."}],"pos":[12765,12832],"yaml":true},{"content":"`true` if some entries were removed; otherwise, `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if some entries were removed; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if some entries were removed; otherwise, `false`."}],"pos":[12890,12949],"yaml":true},{"content":"Removes the specified event handler from the specified source.","nodes":[{"pos":[0,62],"content":"Removes the specified event handler from the specified source.","nodes":[{"content":"Removes the specified event handler from the specified source.","pos":[0,62]}]}],"pos":[14659,14722],"yaml":true},{"content":"The source object that the raises the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event.","nodes":[{"pos":[0,126],"content":"The source object that the raises the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"&gt;&lt;/xref&gt;</ph> event.","source":"The source object that the raises the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event."}],"pos":[15033,15160],"yaml":true},{"content":"The delegate that handles the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event.","nodes":[{"pos":[0,118],"content":"The delegate that handles the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"&gt;&lt;/xref&gt;</ph> event.","source":"The delegate that handles the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event."}],"pos":[15277,15396],"yaml":true},{"content":"The name of the property that exists on <code>source</code> upon which to stop listening for changes. Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\".","nodes":[{"pos":[0,177],"content":"The name of the property that exists on <code>source</code> upon which to stop listening for changes. Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\".","nodes":[{"content":"The name of the property that exists on <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> upon which to stop listening for changes.","pos":[0,101],"source":"The name of the property that exists on <code>source</code> upon which to stop listening for changes."},{"content":"Set to <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> to indicate \"any property\".","pos":[102,177],"source":" Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\"."}]}],"pos":[15464,15642],"yaml":true},{"content":"<code>handler</code> is `null`.","nodes":[{"pos":[0,31],"content":"<ph id=\"ph1\">&lt;code&gt;handler&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>handler</code> is `null`."}],"pos":[15835,15867],"yaml":true},{"content":"More than one method is associated with <code>handler</code>.","nodes":[{"pos":[0,61],"content":"More than one method is associated with <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">handler</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"More than one method is associated with <code>handler</code>."}],"pos":[15969,16031],"yaml":true},{"content":"Removes the specified listener from the list of listeners on the provided source.","nodes":[{"pos":[0,81],"content":"Removes the specified listener from the list of listeners on the provided source.","nodes":[{"content":"Removes the specified listener from the list of listeners on the provided source.","pos":[0,81]}]}],"pos":[17499,17581],"yaml":true},{"content":"The object to remove the listener from.","nodes":[{"pos":[0,39],"content":"The object to remove the listener from.","nodes":[{"content":"The object to remove the listener from.","pos":[0,39]}]}],"pos":[17867,17907],"yaml":true},{"content":"The listener to remove.","nodes":[{"pos":[0,23],"content":"The listener to remove.","nodes":[{"content":"The listener to remove.","pos":[0,23]}]}],"pos":[17991,18015],"yaml":true},{"content":"The name of the property that exists on <code>source</code> upon which to stop listening for changes. Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\".","nodes":[{"pos":[0,177],"content":"The name of the property that exists on <code>source</code> upon which to stop listening for changes. Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\".","nodes":[{"content":"The name of the property that exists on <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">source</ph><ept id=\"p1\">&lt;/code&gt;</ept> upon which to stop listening for changes.","pos":[0,101],"source":"The name of the property that exists on <code>source</code> upon which to stop listening for changes."},{"content":"Set to <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> to indicate \"any property\".","pos":[102,177],"source":" Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\"."}]}],"pos":[18083,18261],"yaml":true},{"content":"Begins listening for the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event on the provided source.","nodes":[{"pos":[0,136],"content":"Begins listening for the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"&gt;&lt;/xref&gt;</ph> event on the provided source.","source":"Begins listening for the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event on the provided source."}],"pos":[19455,19592],"yaml":true},{"content":"This does not specify a property; once the event manager is started, all properties on the source will have <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> notification enabled.","nodes":[{"pos":[0,197],"content":"This does not specify a property; once the event manager is started, all properties on the source will have <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> notification enabled.","nodes":[{"content":"This does not specify a property; once the event manager is started, all properties on the source will have <ph id=\"ph1\">&lt;xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&gt;</ph> notification enabled.","pos":[0,197],"source":"This does not specify a property; once the event manager is started, all properties on the source will have <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> notification enabled."}]}],"pos":[19603,19801],"yaml":true,"extradata":"MT"},{"content":"The object on which to start listening for <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref>.","nodes":[{"pos":[0,125],"content":"The object on which to start listening for <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"&gt;&lt;/xref&gt;</ph>.","source":"The object on which to start listening for <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref>."}],"pos":[19958,20084],"yaml":true},{"content":"Stops listening for the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event on the provided source.","nodes":[{"pos":[0,135],"content":"Stops listening for the <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"&gt;&lt;/xref&gt;</ph> event on the provided source.","source":"Stops listening for the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event on the provided source."}],"pos":[21272,21408],"yaml":true},{"content":"The source object on which to stop listening for <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref>.","nodes":[{"pos":[0,131],"content":"The source object on which to stop listening for <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"&gt;&lt;/xref&gt;</ph>.","source":"The source object on which to stop listening for <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref>."}],"pos":[21564,21696],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ComponentModel.PropertyChangedEventManager\n  commentId: T:System.ComponentModel.PropertyChangedEventManager\n  id: PropertyChangedEventManager\n  children:\n  - System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  - System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  - System.ComponentModel.PropertyChangedEventManager.NewListenerList\n  - System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)\n  - System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  - System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  - System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)\n  - System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)\n  langs:\n  - csharp\n  name: PropertyChangedEventManager\n  nameWithType: PropertyChangedEventManager\n  fullName: System.ComponentModel.PropertyChangedEventManager\n  type: Class\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Provides a <xref href=\"System.Windows.WeakEventManager\"></xref> implementation so that you can use the \"weak event listener\" pattern to attach listeners for the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event.\n  remarks: In order to be listeners in this pattern, your listener objects must implement <xref:System.Windows.IWeakEventListener>. You do not need to implement <xref:System.Windows.IWeakEventListener> on the class that is the source of the events.\n  syntax:\n    content: 'public class PropertyChangedEventManager : System.Windows.WeakEventManager'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.WeakEventManager\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  - System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)\n  - System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)\n  - System.Windows.WeakEventManager.GetCurrentManager(System.Type)\n  - System.Windows.WeakEventManager.Item(System.Object)\n  - System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)\n  - System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)\n  - System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)\n  - System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)\n  - System.Windows.WeakEventManager.ReadLock\n  - System.Windows.WeakEventManager.Remove(System.Object)\n  - System.Windows.WeakEventManager.ScheduleCleanup\n  - System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)\n  - System.Windows.WeakEventManager.WriteLock\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  commentId: M:System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  id: AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: AddHandler(INotifyPropertyChanged, EventHandler<PropertyChangedEventArgs>, String)\n  nameWithType: PropertyChangedEventManager.AddHandler(INotifyPropertyChanged, EventHandler<PropertyChangedEventArgs>, String)\n  fullName: PropertyChangedEventManager.AddHandler(INotifyPropertyChanged, EventHandler<PropertyChangedEventArgs>, String)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Adds the specified event handler, which is called when specified source raises the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event for the specified property.\n  remarks: Use this method to specify the event handler you want to use to subscribe to the <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> event..  When you use this method, your listener object does not need to implement the <xref:System.Windows.IWeakEventListener> interface.\n  syntax:\n    content: public static void AddHandler (System.ComponentModel.INotifyPropertyChanged source, EventHandler<System.ComponentModel.PropertyChangedEventArgs> handler, string propertyName);\n    parameters:\n    - id: source\n      type: System.ComponentModel.INotifyPropertyChanged\n      description: The source object that the raises the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event.\n    - id: handler\n      type: System.EventHandler{System.ComponentModel.PropertyChangedEventArgs}\n      description: The delegate that handles the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event.\n    - id: propertyName\n      type: System.String\n      description: The name of the property that exists on <code>source</code> upon which to listen for changes. Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\".\n  overload: System.ComponentModel.PropertyChangedEventManager.AddHandler*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>handler</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: More than one method is associated with <code>handler</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  commentId: M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  id: AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: AddListener(INotifyPropertyChanged, IWeakEventListener, String)\n  nameWithType: PropertyChangedEventManager.AddListener(INotifyPropertyChanged, IWeakEventListener, String)\n  fullName: PropertyChangedEventManager.AddListener(INotifyPropertyChanged, IWeakEventListener, String)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Adds the specified listener to the list of listeners on the specified source.\n  syntax:\n    content: public static void AddListener (System.ComponentModel.INotifyPropertyChanged source, System.Windows.IWeakEventListener listener, string propertyName);\n    parameters:\n    - id: source\n      type: System.ComponentModel.INotifyPropertyChanged\n      description: The object with the event.\n    - id: listener\n      type: System.Windows.IWeakEventListener\n      description: The object to add as a listener.\n    - id: propertyName\n      type: System.String\n      description: The name of the property that exists on <code>source</code> upon which to listen for changes. Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\".\n  overload: System.ComponentModel.PropertyChangedEventManager.AddListener*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.PropertyChangedEventManager.NewListenerList\n  commentId: M:System.ComponentModel.PropertyChangedEventManager.NewListenerList\n  id: NewListenerList\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: NewListenerList()\n  nameWithType: PropertyChangedEventManager.NewListenerList()\n  fullName: PropertyChangedEventManager.NewListenerList()\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Returns a new object to contain listeners to the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event.\n  syntax:\n    content: protected override System.Windows.WeakEventManager.ListenerList NewListenerList ();\n    parameters: []\n    return:\n      type: System.Windows.WeakEventManager+ListenerList\n      description: A new object to contain listeners to the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event.\n  overload: System.ComponentModel.PropertyChangedEventManager.NewListenerList*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)\n  commentId: M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)\n  id: Purge(System.Object,System.Object,System.Boolean)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: Purge(Object, Object, Boolean)\n  nameWithType: PropertyChangedEventManager.Purge(Object, Object, Boolean)\n  fullName: PropertyChangedEventManager.Purge(Object, Object, Boolean)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Removes listeners that are no longer active from the data for the provided source.\n  syntax:\n    content: protected override bool Purge (object source, object data, bool purgeAll);\n    parameters:\n    - id: source\n      type: System.Object\n      description: Source object to remove all listeners from.\n    - id: data\n      type: System.Object\n      description: The data to purge. This is expected to be a <xref href=\"System.Collections.Specialized.HybridDictionary\"></xref>.\n    - id: purgeAll\n      type: System.Boolean\n      description: Set to `true` to stop listening and to completely remove all data.\n    return:\n      type: System.Boolean\n      description: '`true` if some entries were removed; otherwise, `false`.'\n  overload: System.ComponentModel.PropertyChangedEventManager.Purge*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  commentId: M:System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  id: RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: RemoveHandler(INotifyPropertyChanged, EventHandler<PropertyChangedEventArgs>, String)\n  nameWithType: PropertyChangedEventManager.RemoveHandler(INotifyPropertyChanged, EventHandler<PropertyChangedEventArgs>, String)\n  fullName: PropertyChangedEventManager.RemoveHandler(INotifyPropertyChanged, EventHandler<PropertyChangedEventArgs>, String)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Removes the specified event handler from the specified source.\n  syntax:\n    content: public static void RemoveHandler (System.ComponentModel.INotifyPropertyChanged source, EventHandler<System.ComponentModel.PropertyChangedEventArgs> handler, string propertyName);\n    parameters:\n    - id: source\n      type: System.ComponentModel.INotifyPropertyChanged\n      description: The source object that the raises the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event.\n    - id: handler\n      type: System.EventHandler{System.ComponentModel.PropertyChangedEventArgs}\n      description: The delegate that handles the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event.\n    - id: propertyName\n      type: System.String\n      description: The name of the property that exists on <code>source</code> upon which to stop listening for changes. Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\".\n  overload: System.ComponentModel.PropertyChangedEventManager.RemoveHandler*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>handler</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: More than one method is associated with <code>handler</code>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  commentId: M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  id: RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: RemoveListener(INotifyPropertyChanged, IWeakEventListener, String)\n  nameWithType: PropertyChangedEventManager.RemoveListener(INotifyPropertyChanged, IWeakEventListener, String)\n  fullName: PropertyChangedEventManager.RemoveListener(INotifyPropertyChanged, IWeakEventListener, String)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Removes the specified listener from the list of listeners on the provided source.\n  syntax:\n    content: public static void RemoveListener (System.ComponentModel.INotifyPropertyChanged source, System.Windows.IWeakEventListener listener, string propertyName);\n    parameters:\n    - id: source\n      type: System.ComponentModel.INotifyPropertyChanged\n      description: The object to remove the listener from.\n    - id: listener\n      type: System.Windows.IWeakEventListener\n      description: The listener to remove.\n    - id: propertyName\n      type: System.String\n      description: The name of the property that exists on <code>source</code> upon which to stop listening for changes. Set to <xref href=\"System.String.Empty\"></xref> to indicate \"any property\".\n  overload: System.ComponentModel.PropertyChangedEventManager.RemoveListener*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)\n  commentId: M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)\n  id: StartListening(System.Object)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: StartListening(Object)\n  nameWithType: PropertyChangedEventManager.StartListening(Object)\n  fullName: PropertyChangedEventManager.StartListening(Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Begins listening for the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event on the provided source.\n  remarks: This does not specify a property; once the event manager is started, all properties on the source will have <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> notification enabled.\n  syntax:\n    content: protected override void StartListening (object source);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The object on which to start listening for <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref>.\n  overload: System.ComponentModel.PropertyChangedEventManager.StartListening*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)\n  commentId: M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)\n  id: StopListening(System.Object)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  langs:\n  - csharp\n  name: StopListening(Object)\n  nameWithType: PropertyChangedEventManager.StopListening(Object)\n  fullName: PropertyChangedEventManager.StopListening(Object)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.ComponentModel\n  summary: Stops listening for the <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref> event on the provided source.\n  syntax:\n    content: protected override void StopListening (object source);\n    parameters:\n    - id: source\n      type: System.Object\n      description: The source object on which to stop listening for <xref href=\"System.ComponentModel.INotifyPropertyChanged.PropertyChanged\"></xref>.\n  overload: System.ComponentModel.PropertyChangedEventManager.StopListening*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n  ms.technology:\n  - dotnet-standard\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.WeakEventManager\n  parent: System.Windows\n  isExternal: false\n  name: WeakEventManager\n  nameWithType: WeakEventManager\n  fullName: System.Windows.WeakEventManager\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: AddHandler(INotifyPropertyChanged, EventHandler<PropertyChangedEventArgs>, String)\n  nameWithType: PropertyChangedEventManager.AddHandler(INotifyPropertyChanged, EventHandler<PropertyChangedEventArgs>, String)\n  fullName: PropertyChangedEventManager.AddHandler(INotifyPropertyChanged, EventHandler<PropertyChangedEventArgs>, String)\n- uid: System.ComponentModel.INotifyPropertyChanged\n  parent: System.ComponentModel\n  isExternal: false\n  name: INotifyPropertyChanged\n  nameWithType: INotifyPropertyChanged\n  fullName: System.ComponentModel.INotifyPropertyChanged\n- uid: System.EventHandler`1\n  name: EventHandler<TEventArgs>\n  nameWithType: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n- uid: System.ComponentModel.PropertyChangedEventArgs\n  name: PropertyChangedEventArgs\n  nameWithType: PropertyChangedEventArgs\n  fullName: System.ComponentModel.PropertyChangedEventArgs\n- uid: System.EventHandler{System.ComponentModel.PropertyChangedEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<PropertyChangedEventArgs>\n  nameWithType: EventHandler<PropertyChangedEventArgs>\n  fullName: System.EventHandler<System.ComponentModel.PropertyChangedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.ComponentModel.PropertyChangedEventArgs\n    name: PropertyChangedEventArgs\n    nameWithType: PropertyChangedEventArgs\n    fullName: System.ComponentModel.PropertyChangedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: AddListener(INotifyPropertyChanged, IWeakEventListener, String)\n  nameWithType: PropertyChangedEventManager.AddListener(INotifyPropertyChanged, IWeakEventListener, String)\n  fullName: PropertyChangedEventManager.AddListener(INotifyPropertyChanged, IWeakEventListener, String)\n- uid: System.Windows.IWeakEventListener\n  parent: System.Windows\n  isExternal: false\n  name: IWeakEventListener\n  nameWithType: IWeakEventListener\n  fullName: System.Windows.IWeakEventListener\n- uid: System.ComponentModel.PropertyChangedEventManager.NewListenerList\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: NewListenerList()\n  nameWithType: PropertyChangedEventManager.NewListenerList()\n  fullName: PropertyChangedEventManager.NewListenerList()\n- uid: System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: Purge(Object, Object, Boolean)\n  nameWithType: PropertyChangedEventManager.Purge(Object, Object, Boolean)\n  fullName: PropertyChangedEventManager.Purge(Object, Object, Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: RemoveHandler(INotifyPropertyChanged, EventHandler<PropertyChangedEventArgs>, String)\n  nameWithType: PropertyChangedEventManager.RemoveHandler(INotifyPropertyChanged, EventHandler<PropertyChangedEventArgs>, String)\n  fullName: PropertyChangedEventManager.RemoveHandler(INotifyPropertyChanged, EventHandler<PropertyChangedEventArgs>, String)\n- uid: System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: RemoveListener(INotifyPropertyChanged, IWeakEventListener, String)\n  nameWithType: PropertyChangedEventManager.RemoveListener(INotifyPropertyChanged, IWeakEventListener, String)\n  fullName: PropertyChangedEventManager.RemoveListener(INotifyPropertyChanged, IWeakEventListener, String)\n- uid: System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: StartListening(Object)\n  nameWithType: PropertyChangedEventManager.StartListening(Object)\n  fullName: PropertyChangedEventManager.StartListening(Object)\n- uid: System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: StopListening(Object)\n  nameWithType: PropertyChangedEventManager.StopListening(Object)\n  fullName: PropertyChangedEventManager.StopListening(Object)\n- uid: System.ComponentModel.PropertyChangedEventManager.AddHandler*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: AddHandler\n  nameWithType: PropertyChangedEventManager.AddHandler\n  fullName: PropertyChangedEventManager.AddHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n- uid: System.ComponentModel.PropertyChangedEventManager.AddListener*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: AddListener\n  nameWithType: PropertyChangedEventManager.AddListener\n  fullName: PropertyChangedEventManager.AddListener\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n- uid: System.ComponentModel.PropertyChangedEventManager.NewListenerList*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: NewListenerList\n  nameWithType: PropertyChangedEventManager.NewListenerList\n  fullName: PropertyChangedEventManager.NewListenerList\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n- uid: System.ComponentModel.PropertyChangedEventManager.Purge*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: Purge\n  nameWithType: PropertyChangedEventManager.Purge\n  fullName: PropertyChangedEventManager.Purge\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n- uid: System.ComponentModel.PropertyChangedEventManager.RemoveHandler*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: RemoveHandler\n  nameWithType: PropertyChangedEventManager.RemoveHandler\n  fullName: PropertyChangedEventManager.RemoveHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n- uid: System.ComponentModel.PropertyChangedEventManager.RemoveListener*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: RemoveListener\n  nameWithType: PropertyChangedEventManager.RemoveListener\n  fullName: PropertyChangedEventManager.RemoveListener\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n- uid: System.ComponentModel.PropertyChangedEventManager.StartListening*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: StartListening\n  nameWithType: PropertyChangedEventManager.StartListening\n  fullName: PropertyChangedEventManager.StartListening\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n- uid: System.ComponentModel.PropertyChangedEventManager.StopListening*\n  parent: System.ComponentModel.PropertyChangedEventManager\n  isExternal: false\n  name: StopListening\n  nameWithType: PropertyChangedEventManager.StopListening\n  fullName: PropertyChangedEventManager.StopListening\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ComponentModel/PropertyChangedEventManager.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Windows.Threading.DispatcherObject.CheckAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: CheckAccess()\n  nameWithType: DispatcherObject.CheckAccess()\n  fullName: DispatcherObject.CheckAccess()\n- uid: System.Windows.Threading.DispatcherObject.Dispatcher\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherObject.Dispatcher\n  fullName: DispatcherObject.Dispatcher\n- uid: System.Windows.Threading.DispatcherObject.VerifyAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: VerifyAccess()\n  nameWithType: DispatcherObject.VerifyAccess()\n  fullName: DispatcherObject.VerifyAccess()\n- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: DeliverEvent(Object, EventArgs)\n  nameWithType: WeakEventManager.DeliverEvent(Object, EventArgs)\n  fullName: WeakEventManager.DeliverEvent(Object, EventArgs)\n- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: DeliverEventToList(Object, EventArgs, WeakEventManager+ListenerList)\n  nameWithType: WeakEventManager.DeliverEventToList(Object, EventArgs, WeakEventManager+ListenerList)\n  fullName: WeakEventManager.DeliverEventToList(Object, EventArgs, WeakEventManager+ListenerList)\n- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: GetCurrentManager(Type)\n  nameWithType: WeakEventManager.GetCurrentManager(Type)\n  fullName: WeakEventManager.GetCurrentManager(Type)\n- uid: System.Windows.WeakEventManager.Item(System.Object)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: Item(Object)\n  nameWithType: WeakEventManager.Item(Object)\n  fullName: WeakEventManager.Item(Object)\n- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedAddHandler(Object, Delegate)\n  nameWithType: WeakEventManager.ProtectedAddHandler(Object, Delegate)\n  fullName: WeakEventManager.ProtectedAddHandler(Object, Delegate)\n- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedAddListener(Object, IWeakEventListener)\n  nameWithType: WeakEventManager.ProtectedAddListener(Object, IWeakEventListener)\n  fullName: WeakEventManager.ProtectedAddListener(Object, IWeakEventListener)\n- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedRemoveHandler(Object, Delegate)\n  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object, Delegate)\n  fullName: WeakEventManager.ProtectedRemoveHandler(Object, Delegate)\n- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ProtectedRemoveListener(Object, IWeakEventListener)\n  nameWithType: WeakEventManager.ProtectedRemoveListener(Object, IWeakEventListener)\n  fullName: WeakEventManager.ProtectedRemoveListener(Object, IWeakEventListener)\n- uid: System.Windows.WeakEventManager.ReadLock\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ReadLock\n  nameWithType: WeakEventManager.ReadLock\n  fullName: WeakEventManager.ReadLock\n- uid: System.Windows.WeakEventManager.Remove(System.Object)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: Remove(Object)\n  nameWithType: WeakEventManager.Remove(Object)\n  fullName: WeakEventManager.Remove(Object)\n- uid: System.Windows.WeakEventManager.ScheduleCleanup\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: ScheduleCleanup()\n  nameWithType: WeakEventManager.ScheduleCleanup()\n  fullName: WeakEventManager.ScheduleCleanup()\n- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: SetCurrentManager(Type, WeakEventManager)\n  nameWithType: WeakEventManager.SetCurrentManager(Type, WeakEventManager)\n  fullName: WeakEventManager.SetCurrentManager(Type, WeakEventManager)\n- uid: System.Windows.WeakEventManager.WriteLock\n  parent: System.Windows.WeakEventManager\n  isExternal: false\n  name: WriteLock\n  nameWithType: WeakEventManager.WriteLock\n  fullName: WeakEventManager.WriteLock\n"}