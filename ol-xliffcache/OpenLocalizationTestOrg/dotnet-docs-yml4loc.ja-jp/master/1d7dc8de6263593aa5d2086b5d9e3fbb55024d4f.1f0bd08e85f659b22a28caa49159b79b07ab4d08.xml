{"nodes":[{"content":"Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.","nodes":[{"pos":[0,101],"content":"Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.","nodes":[{"content":"Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.","pos":[0,101]}]}],"pos":[3401,3503],"yaml":true},{"content":"The point of interaction between a user and a standalone application is a window. A [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window consists of two distinct areas:  \n  \n-   A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.  \n  \n-   A client area, which hosts application-specific content.  \n  \n A standard window is shown in the following figure:  \n  \n ![Window elements](~/add/media/windowoverviewfigure1.PNG \"Window elements\")  \n  \n <xref:System.Windows.Window> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:  \n  \n **Lifetime Management**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated>, <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed>, <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated>, <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A>, <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>.  \n  \n **Window Management**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A>, <xref:System.Windows.Window.Owner%2A>.  \n  \n **Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A>  \n  \n **Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.  \n  \n Additionally, <xref:System.Windows.Application> exposes special support for managing all of the windows in an application:  \n  \n-   Application maintains a list of all the windows that are currently instantiated in the application. This list is exposed by the <xref:System.Windows.Application.Windows%2A> property.  \n  \n-   By default, <xref:System.Windows.Application.MainWindow%2A> is automatically set with a reference to the first <xref:System.Windows.Window> that is instantiated in an application. This thereby making the window the main application window.  \n  \n A <xref:System.Windows.Window> can be implemented using markup, markup and code-behind, or code.  \n  \n <xref:System.Windows.Window> is primarily used to display windows and dialog boxes for standalone applications. However, for applications that require navigation at the window level, such as wizards, you can use <xref:System.Windows.Navigation.NavigationWindow> instead; <xref:System.Windows.Navigation.NavigationWindow> derives from <xref:System.Windows.Window> and extends it with browser-style navigation support.  \n  \n> [!NOTE]\n>  Islands of navigable content can be incorporated into other content and content containers using <xref:System.Windows.Controls.Frame>.  \n  \n <xref:System.Windows.Window> needs `UnmanagedCode` security permission to be instantiated. This has the following consequences:  \n  \n-   [!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.  \n  \n-   [!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)] that request anything less than full permissions will not be able to instantiate windows or dialog boxes.  \n  \n For information about standalone application deployment and security considerations, see [WPF Security Strategy - Platform Security](~/docs/framework/wpf/wpf-security-strategy-platform-security.md).  \n  \n A <xref:System.Windows.Window> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel). For more information, see the <xref:System.Windows.Controls.ContentControl> class. Also, <xref:System.Windows.Window> is a root element and, therefore, cannot be part of another element's content.  \n  \n> [!NOTE]\n>  The <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties set on a <xref:System.Windows.Window> through a style will not be applied at run time.  \n  \n## Customizing the Window Control  \n To apply the same property settings to multiple <xref:System.Windows.Window> controls, use the <xref:System.Windows.FrameworkElement.Style%2A> property. You can modify the default <xref:System.Windows.Controls.ControlTemplate> to give the control a unique appearance. For more information about creating a <xref:System.Windows.Controls.ControlTemplate>, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  To see the parts and states that are specific to the <xref:System.Windows.Window>, see [Window Styles and Templates](~/docs/framework/wpf/controls/window-styles-and-templates.md).  \n  \n Dependency properties for this control might be set by the controlâ€™s default style.  If a property is set by a default style, the property might change from its default value when the control appears in the application. The default style is determined by which desktop theme is used when the application is running.  For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252).  \n  \n> [!NOTE]\n>  Setting a visual property will only have an effect if that property is both present in <xref:System.Windows.Window> control's default template and is set by using a . You can find a list of visual properties in the \"Changing the Visual Structure of a Control\" section in [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).","nodes":[{"pos":[0,192],"content":"The point of interaction between a user and a standalone application is a window. A [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window consists of two distinct areas:","nodes":[{"content":"The point of interaction between a user and a standalone application is a window.","pos":[0,81]},{"content":"A <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> window consists of two distinct areas:","pos":[82,192],"source":" A [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window consists of two distinct areas:"}]},{"pos":[202,373],"content":"A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.","nodes":[{"content":"A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.","pos":[0,171]}]},{"pos":[383,439],"content":"A client area, which hosts application-specific content.","nodes":[{"content":"A client area, which hosts application-specific content.","pos":[0,56]}]},{"pos":[446,497],"content":"A standard window is shown in the following figure:","nodes":[{"content":"A standard window is shown in the following figure:","pos":[0,51]}]},{"pos":[504,579],"content":"<bpt id=\"p1\">![</bpt>Window elements<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/windowoverviewfigure1.PNG \"</bpt>Window elements<ept id=\"p2\">\")</ept>","source":"![Window elements](~/add/media/windowoverviewfigure1.PNG \"Window elements\")"},{"pos":[586,766],"content":"<xref:System.Windows.Window> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:","pos":[0,180],"source":"<xref:System.Windows.Window> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:"}]},{"pos":[773,1201],"content":"<bpt id=\"p1\">**</bpt>Lifetime Management<ept id=\"p1\">**</ept>: <ph id=\"ph1\">&lt;xref:System.Windows.Window.Activate%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Window.Activated&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Window.Close%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Window.Closed&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Windows.Window.Closing&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Windows.Window.Deactivated&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph>, <ph id=\"ph9\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, <ph id=\"ph10\">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph>.","source":"**Lifetime Management**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated>, <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed>, <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated>, <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A>, <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>."},{"pos":[1208,1358],"content":"<bpt id=\"p1\">**</bpt>Window Management<ept id=\"p1\">**</ept>: <ph id=\"ph1\">&lt;xref:System.Windows.Window.GetWindow%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>.","source":"**Window Management**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A>, <xref:System.Windows.Window.Owner%2A>."},{"pos":[1365,2191],"content":"<bpt id=\"p1\">**</bpt>Appearance and Behavior<ept id=\"p1\">**</ept>: <ph id=\"ph1\">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Windows.Window.ResizeMode%2A&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>, <ph id=\"ph9\">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph>, <ph id=\"ph10\">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph>, <ph id=\"ph11\">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph>, <ph id=\"ph12\">&lt;xref:System.Windows.Window.StateChanged&gt;</ph>, <ph id=\"ph13\">&lt;xref:System.Windows.Window.Title%2A&gt;</ph>, <ph id=\"ph14\">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, <ph id=\"ph15\">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph>, <ph id=\"ph16\">&lt;xref:System.Windows.Window.WindowStartupLocation%2A&gt;</ph>, <ph id=\"ph17\">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph>, <ph id=\"ph18\">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph>","source":"**Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A>"},{"pos":[2198,2305],"content":"<bpt id=\"p1\">**</bpt>Dialog Boxes<ept id=\"p1\">**</ept>: <ph id=\"ph1\">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.","source":"**Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>."},{"pos":[2312,2434],"content":"Additionally, <xref:System.Windows.Application> exposes special support for managing all of the windows in an application:","nodes":[{"content":"Additionally, <ph id=\"ph1\">&lt;xref:System.Windows.Application&gt;</ph> exposes special support for managing all of the windows in an application:","pos":[0,122],"source":"Additionally, <xref:System.Windows.Application> exposes special support for managing all of the windows in an application:"}]},{"pos":[2444,2626],"content":"Application maintains a list of all the windows that are currently instantiated in the application. This list is exposed by the <xref:System.Windows.Application.Windows%2A> property.","nodes":[{"content":"Application maintains a list of all the windows that are currently instantiated in the application. This list is exposed by the <xref:System.Windows.Application.Windows%2A> property.","pos":[0,182],"nodes":[{"content":"Application maintains a list of all the windows that are currently instantiated in the application.","pos":[0,99]},{"content":"This list is exposed by the <ph id=\"ph1\">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property.","pos":[100,182],"source":" This list is exposed by the <xref:System.Windows.Application.Windows%2A> property."}]}]},{"pos":[2636,2875],"content":"By default, <xref:System.Windows.Application.MainWindow%2A> is automatically set with a reference to the first <xref:System.Windows.Window> that is instantiated in an application. This thereby making the window the main application window.","nodes":[{"content":"By default, <xref:System.Windows.Application.MainWindow%2A> is automatically set with a reference to the first <xref:System.Windows.Window> that is instantiated in an application. This thereby making the window the main application window.","pos":[0,239],"nodes":[{"content":"By default, <ph id=\"ph1\">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> is automatically set with a reference to the first <ph id=\"ph2\">&lt;xref:System.Windows.Window&gt;</ph> that is instantiated in an application.","pos":[0,179],"source":"By default, <xref:System.Windows.Application.MainWindow%2A> is automatically set with a reference to the first <xref:System.Windows.Window> that is instantiated in an application."},{"content":"This thereby making the window the main application window.","pos":[180,239]}]}]},{"pos":[2882,2978],"content":"A <xref:System.Windows.Window> can be implemented using markup, markup and code-behind, or code.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> can be implemented using markup, markup and code-behind, or code.","pos":[0,96],"source":"A <xref:System.Windows.Window> can be implemented using markup, markup and code-behind, or code."}]},{"pos":[2985,3401],"content":"<xref:System.Windows.Window> is primarily used to display windows and dialog boxes for standalone applications. However, for applications that require navigation at the window level, such as wizards, you can use <xref:System.Windows.Navigation.NavigationWindow> instead; <xref:System.Windows.Navigation.NavigationWindow> derives from <xref:System.Windows.Window> and extends it with browser-style navigation support.","nodes":[{"content":"<xref:System.Windows.Window> is primarily used to display windows and dialog boxes for standalone applications. However, for applications that require navigation at the window level, such as wizards, you can use <xref:System.Windows.Navigation.NavigationWindow> instead; <xref:System.Windows.Navigation.NavigationWindow> derives from <xref:System.Windows.Window> and extends it with browser-style navigation support.","pos":[0,416],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> is primarily used to display windows and dialog boxes for standalone applications.","pos":[0,111],"source":"<xref:System.Windows.Window> is primarily used to display windows and dialog boxes for standalone applications."},{"content":"However, for applications that require navigation at the window level, such as wizards, you can use <ph id=\"ph1\">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> instead; <ph id=\"ph2\">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph> derives from <ph id=\"ph3\">&lt;xref:System.Windows.Window&gt;</ph> and extends it with browser-style navigation support.","pos":[112,416],"source":" However, for applications that require navigation at the window level, such as wizards, you can use <xref:System.Windows.Navigation.NavigationWindow> instead; <xref:System.Windows.Navigation.NavigationWindow> derives from <xref:System.Windows.Window> and extends it with browser-style navigation support."}]}]},{"pos":[3409,3554],"content":"[!NOTE]\n Islands of navigable content can be incorporated into other content and content containers using <xref:System.Windows.Controls.Frame>.","leadings":["","> "],"nodes":[{"content":"Islands of navigable content can be incorporated into other content and content containers using <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Frame&gt;</ph>.","pos":[9,143],"source":" Islands of navigable content can be incorporated into other content and content containers using <xref:System.Windows.Controls.Frame>."}]},{"pos":[3561,3688],"content":"<xref:System.Windows.Window> needs `UnmanagedCode` security permission to be instantiated. This has the following consequences:","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> needs <ph id=\"ph2\">`UnmanagedCode`</ph> security permission to be instantiated.","pos":[0,90],"source":"<xref:System.Windows.Window> needs `UnmanagedCode` security permission to be instantiated."},{"content":"This has the following consequences:","pos":[91,127]}]},{"pos":[3698,3898],"content":"<ph id=\"ph1\">[!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]</ph>-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.","source":"[!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones."},{"pos":[3908,4093],"content":"<ph id=\"ph1\">[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)]</ph> that request anything less than full permissions will not be able to instantiate windows or dialog boxes.","source":"[!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)] that request anything less than full permissions will not be able to instantiate windows or dialog boxes."},{"pos":[4100,4298],"content":"For information about standalone application deployment and security considerations, see <bpt id=\"p1\">[</bpt>WPF Security Strategy - Platform Security<ept id=\"p1\">](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)</ept>.","source":"For information about standalone application deployment and security considerations, see [WPF Security Strategy - Platform Security](~/docs/framework/wpf/wpf-security-strategy-platform-security.md)."},{"pos":[4305,4686],"content":"A <xref:System.Windows.Window> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel). For more information, see the <xref:System.Windows.Controls.ContentControl> class. Also, <xref:System.Windows.Window> is a root element and, therefore, cannot be part of another element's content.","nodes":[{"content":"A <xref:System.Windows.Window> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel). For more information, see the <xref:System.Windows.Controls.ContentControl> class. Also, <xref:System.Windows.Window> is a root element and, therefore, cannot be part of another element's content.","pos":[0,381],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> is a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph>, which means that it can contain a single object of any type (such as a string, an image, or a panel).","pos":[0,184],"source":"A <xref:System.Windows.Window> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel)."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ContentControl&gt;</ph> class.","pos":[185,267],"source":" For more information, see the <xref:System.Windows.Controls.ContentControl> class."},{"content":"Also, <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> is a root element and, therefore, cannot be part of another element's content.","pos":[268,381],"source":" Also, <xref:System.Windows.Window> is a root element and, therefore, cannot be part of another element's content."}]}]},{"pos":[4694,4983],"content":"[!NOTE]\n The <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties set on a <xref:System.Windows.Window> through a style will not be applied at run time.","leadings":["","> "],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> properties set on a <ph id=\"ph5\">&lt;xref:System.Windows.Window&gt;</ph> through a style will not be applied at run time.","pos":[9,287],"source":" The <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties set on a <xref:System.Windows.Window> through a style will not be applied at run time."}]},{"pos":[4992,5022],"content":"Customizing the Window Control","linkify":"Customizing the Window Control","nodes":[{"content":"Customizing the Window Control","pos":[0,30]}]},{"pos":[5026,5731],"content":"To apply the same property settings to multiple <xref:System.Windows.Window> controls, use the <xref:System.Windows.FrameworkElement.Style%2A> property. You can modify the default <xref:System.Windows.Controls.ControlTemplate> to give the control a unique appearance. For more information about creating a <xref:System.Windows.Controls.ControlTemplate>, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  To see the parts and states that are specific to the <xref:System.Windows.Window>, see [Window Styles and Templates](~/docs/framework/wpf/controls/window-styles-and-templates.md).","nodes":[{"content":"To apply the same property settings to multiple <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> controls, use the <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.Style%2A&gt;</ph> property.","pos":[0,152],"source":"To apply the same property settings to multiple <xref:System.Windows.Window> controls, use the <xref:System.Windows.FrameworkElement.Style%2A> property."},{"content":"You can modify the default <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph> to give the control a unique appearance.","pos":[153,267],"source":" You can modify the default <xref:System.Windows.Controls.ControlTemplate> to give the control a unique appearance."},{"content":"For more information about creating a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.ControlTemplate&gt;</ph>, see <bpt id=\"p1\">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id=\"p1\">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>.","pos":[268,524],"source":" For more information about creating a <xref:System.Windows.Controls.ControlTemplate>, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)."},{"content":"To see the parts and states that are specific to the <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph>, see <bpt id=\"p1\">[</bpt>Window Styles and Templates<ept id=\"p1\">](~/docs/framework/wpf/controls/window-styles-and-templates.md)</ept>.","pos":[526,705],"source":"  To see the parts and states that are specific to the <xref:System.Windows.Window>, see [Window Styles and Templates](~/docs/framework/wpf/controls/window-styles-and-templates.md)."}]},{"pos":[5738,6149],"content":"Dependency properties for this control might be set by the controlâ€™s default style.  If a property is set by a default style, the property might change from its default value when the control appears in the application. The default style is determined by which desktop theme is used when the application is running.  For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252).","nodes":[{"content":"Dependency properties for this control might be set by the controlâ€™s default style.","pos":[0,83]},{"content":"If a property is set by a default style, the property might change from its default value when the control appears in the application.","pos":[85,219]},{"content":"The default style is determined by which desktop theme is used when the application is running.","pos":[220,315]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Default WPF Themes<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=158252)</ept>.","pos":[317,411],"source":"  For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252)."}]},{"pos":[6157,6605],"content":"[!NOTE]\n Setting a visual property will only have an effect if that property is both present in <xref:System.Windows.Window> control's default template and is set by using a . You can find a list of visual properties in the \"Changing the Visual Structure of a Control\" section in [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).","leadings":["","> "],"nodes":[{"content":" Setting a visual property will only have an effect if that property is both present in <xref:System.Windows.Window> control's default template and is set by using a . You can find a list of visual properties in the \"Changing the Visual Structure of a Control\" section in [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).","pos":[8,446],"nodes":[{"content":"Setting a visual property will only have an effect if that property is both present in <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> control's default template and is set by using a .","pos":[1,167],"source":" Setting a visual property will only have an effect if that property is both present in <xref:System.Windows.Window> control's default template and is set by using a ."},{"content":"You can find a list of visual properties in the \"Changing the Visual Structure of a Control\" section in <bpt id=\"p1\">[</bpt>Customizing the Appearance of an Existing Control by Creating a ControlTemplate<ept id=\"p1\">](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)</ept>.","pos":[168,438],"source":" You can find a list of visual properties in the \"Changing the Visual Structure of a Control\" section in [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md)."}]}]}],"pos":[3514,10178],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Window\"></xref> class.","nodes":[{"pos":[0,83],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Windows.Window\"></xref> class."}],"pos":[51109,51193],"yaml":true},{"content":"The constructor initializes the <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties to their default <xref:System.Windows.Window> values.  \n  \n If a window is created within an <xref:System.AppDomain> that has an <xref:System.Windows.Application> object, the constructor adds the <xref:System.Windows.Window> object to the set of <xref:System.Windows.Application>-managed windows via the <xref:System.Windows.Application.Windows%2A> property of the <xref:System.Windows.Application> object.","nodes":[{"pos":[0,273],"content":"The constructor initializes the <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties to their default <xref:System.Windows.Window> values.","nodes":[{"content":"The constructor initializes the <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> properties to their default <ph id=\"ph5\">&lt;xref:System.Windows.Window&gt;</ph> values.","pos":[0,273],"source":"The constructor initializes the <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties to their default <xref:System.Windows.Window> values."}]},{"pos":[280,626],"content":"If a window is created within an <xref:System.AppDomain> that has an <xref:System.Windows.Application> object, the constructor adds the <xref:System.Windows.Window> object to the set of <xref:System.Windows.Application>-managed windows via the <xref:System.Windows.Application.Windows%2A> property of the <xref:System.Windows.Application> object.","nodes":[{"content":"If a window is created within an <ph id=\"ph1\">&lt;xref:System.AppDomain&gt;</ph> that has an <ph id=\"ph2\">&lt;xref:System.Windows.Application&gt;</ph> object, the constructor adds the <ph id=\"ph3\">&lt;xref:System.Windows.Window&gt;</ph> object to the set of <ph id=\"ph4\">&lt;xref:System.Windows.Application&gt;</ph>-managed windows via the <ph id=\"ph5\">&lt;xref:System.Windows.Application.Windows%2A&gt;</ph> property of the <ph id=\"ph6\">&lt;xref:System.Windows.Application&gt;</ph> object.","pos":[0,346],"source":"If a window is created within an <xref:System.AppDomain> that has an <xref:System.Windows.Application> object, the constructor adds the <xref:System.Windows.Window> object to the set of <xref:System.Windows.Application>-managed windows via the <xref:System.Windows.Application.Windows%2A> property of the <xref:System.Windows.Application> object."}]}],"pos":[51204,51835],"yaml":true,"extradata":"MT"},{"content":"Attempts to bring the window to the foreground and activates it.","nodes":[{"pos":[0,64],"content":"Attempts to bring the window to the foreground and activates it.","nodes":[{"content":"Attempts to bring the window to the foreground and activates it.","pos":[0,64]}]}],"pos":[52892,52957],"yaml":true},{"content":"The rules that determine whether the window is activated are the same as those used by the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` function (User32.dll).  \n  \n If the window is activated in a [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] application that is not the user's foreground application, <xref:System.Windows.Application.Activated> event is raised.  \n  \n> [!NOTE]\n>  This method cannot be called when a window is hosted in a browser.","nodes":[{"pos":[0,199],"content":"The rules that determine whether the window is activated are the same as those used by the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]</ph> <ph id=\"ph2\">`SetForegroundWindow`</ph> function (User32.dll).","source":"The rules that determine whether the window is activated are the same as those used by the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` function (User32.dll)."},{"pos":[206,415],"content":"If the window is activated in a <ph id=\"ph1\">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> application that is not the user's foreground application, <ph id=\"ph2\">&lt;xref:System.Windows.Application.Activated&gt;</ph> event is raised.","source":"If the window is activated in a [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] application that is not the user's foreground application, <xref:System.Windows.Application.Activated> event is raised."},{"pos":[423,500],"content":"[!NOTE]\n This method cannot be called when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"This method cannot be called when a window is hosted in a browser.","pos":[9,75]}]}],"pos":[52968,53476],"yaml":true,"extradata":"MT"},{"content":"`true` if the <xref href=\"System.Windows.Window\"></xref> was successfully activated; otherwise, `false`.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Window\"&gt;&lt;/xref&gt;</ph> was successfully activated; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Windows.Window\"></xref> was successfully activated; otherwise, `false`."}],"pos":[53652,53759],"yaml":true},{"content":"Occurs when a window becomes the foreground window.","nodes":[{"pos":[0,51],"content":"Occurs when a window becomes the foreground window.","nodes":[{"content":"Occurs when a window becomes the foreground window.","pos":[0,51]}]}],"pos":[54729,54781],"yaml":true},{"content":"A window is activated (becomes the foreground window) when:  \n  \n-   The window is first opened.  \n  \n-   A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.  \n  \n-   A user clicks the window's taskbar button.  \n  \n Windows that need to detect when they become activate can handle the <xref:System.Windows.Window.Activated> event.  \n  \n After a window is first activated, it may be deactivated and reactivated many times during its lifetime. If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.  \n  \n An application can also be <xref:System.Windows.Application.Activated>.","nodes":[{"pos":[0,59],"content":"A window is activated (becomes the foreground window) when:","nodes":[{"content":"A window is activated (becomes the foreground window) when:","pos":[0,59]}]},{"pos":[69,96],"content":"The window is first opened.","nodes":[{"content":"The window is first opened.","pos":[0,27]}]},{"pos":[106,205],"content":"A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.","nodes":[{"content":"A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.","pos":[0,99]}]},{"pos":[215,257],"content":"A user clicks the window's taskbar button.","nodes":[{"content":"A user clicks the window's taskbar button.","pos":[0,42]}]},{"pos":[264,378],"content":"Windows that need to detect when they become activate can handle the <xref:System.Windows.Window.Activated> event.","nodes":[{"content":"Windows that need to detect when they become activate can handle the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Activated&gt;</ph> event.","pos":[0,114],"source":"Windows that need to detect when they become activate can handle the <xref:System.Windows.Window.Activated> event."}]},{"pos":[385,661],"content":"After a window is first activated, it may be deactivated and reactivated many times during its lifetime. If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.","nodes":[{"content":"After a window is first activated, it may be deactivated and reactivated many times during its lifetime. If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.","pos":[0,276],"nodes":[{"content":"After a window is first activated, it may be deactivated and reactivated many times during its lifetime.","pos":[0,104]},{"content":"If an application's behavior or state depends on its activation state, it can inspect <ph id=\"ph1\">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph> to determine which activation state it's in.","pos":[105,276],"source":" If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in."}]}]},{"pos":[668,739],"content":"An application can also be <xref:System.Windows.Application.Activated>.","nodes":[{"content":"An application can also be <ph id=\"ph1\">&lt;xref:System.Windows.Application.Activated&gt;</ph>.","pos":[0,71],"source":"An application can also be <xref:System.Windows.Application.Activated>."}]}],"pos":[54792,55546],"yaml":true,"extradata":"MT"},{"content":"Gets or sets a value that indicates whether a window's client area supports transparency.","nodes":[{"pos":[0,89],"content":"Gets or sets a value that indicates whether a window's client area supports transparency.","nodes":[{"content":"Gets or sets a value that indicates whether a window's client area supports transparency.","pos":[0,89]}]}],"pos":[56589,56679],"yaml":true},{"content":"When the <xref:System.Windows.Controls.Control.Background%2A> property of a window is set to a transparent color, using <xref:System.Windows.Media.Brushes.Transparent%2A> for example, the window remains opaque. This means that the desktop and any running applications \"beneath\" the window cannot be seen. To enable this type of transparency, <xref:System.Windows.Window.AllowsTransparency%2A> must be set to `true`.  \n  \n <xref:System.Windows.Window.AllowsTransparency%2A> exists to facilitate the creation of non-rectangular windows, and, consequently, when <xref:System.Windows.Window.AllowsTransparency%2A> is set to `true`, a window's <xref:System.Windows.Window.WindowStyle%2A> property must be set to <xref:System.Windows.WindowStyle.None>.  \n  \n<a name=\"dependencyPropertyInfo_WindowAllowsTransparency\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Window.AllowsTransparencyProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,415],"content":"When the <xref:System.Windows.Controls.Control.Background%2A> property of a window is set to a transparent color, using <xref:System.Windows.Media.Brushes.Transparent%2A> for example, the window remains opaque. This means that the desktop and any running applications \"beneath\" the window cannot be seen. To enable this type of transparency, <xref:System.Windows.Window.AllowsTransparency%2A> must be set to `true`.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Control.Background%2A&gt;</ph> property of a window is set to a transparent color, using <ph id=\"ph2\">&lt;xref:System.Windows.Media.Brushes.Transparent%2A&gt;</ph> for example, the window remains opaque.","pos":[0,210],"source":"When the <xref:System.Windows.Controls.Control.Background%2A> property of a window is set to a transparent color, using <xref:System.Windows.Media.Brushes.Transparent%2A> for example, the window remains opaque."},{"content":"This means that the desktop and any running applications \"beneath\" the window cannot be seen.","pos":[211,304]},{"content":"To enable this type of transparency, <ph id=\"ph1\">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> must be set to <ph id=\"ph2\">`true`</ph>.","pos":[305,415],"source":" To enable this type of transparency, <xref:System.Windows.Window.AllowsTransparency%2A> must be set to `true`."}]},{"pos":[422,746],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> exists to facilitate the creation of non-rectangular windows, and, consequently, when <ph id=\"ph2\">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph> is set to <ph id=\"ph3\">`true`</ph>, a window's <ph id=\"ph4\">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> property must be set to <ph id=\"ph5\">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>.","source":"<xref:System.Windows.Window.AllowsTransparency%2A> exists to facilitate the creation of non-rectangular windows, and, consequently, when <xref:System.Windows.Window.AllowsTransparency%2A> is set to `true`, a window's <xref:System.Windows.Window.WindowStyle%2A> property must be set to <xref:System.Windows.WindowStyle.None>."},{"pos":[821,852],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[873,889],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[890,945],"content":"<xref:System.Windows.Window.AllowsTransparencyProperty>","nodes":[]},{"pos":[950,983],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[984,988],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[56690,57696],"yaml":true,"extradata":"MT"},{"content":"`true` if the window supports transparency; otherwise, `false`.","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">`true`</ph> if the window supports transparency; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the window supports transparency; otherwise, `false`."}],"pos":[57822,57888],"yaml":true},{"content":"A window that has a <xref href=\"System.Windows.Window.WindowStyle\"></xref> value of anything other than <xref href=\"System.Windows.WindowStyle.None\"></xref>.","nodes":[{"pos":[0,157],"content":"A window that has a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.WindowStyle\"&gt;&lt;/xref&gt;</ph> value of anything other than <ph id=\"ph2\">&lt;xref href=\"System.Windows.WindowStyle.None\"&gt;&lt;/xref&gt;</ph>.","source":"A window that has a <xref href=\"System.Windows.Window.WindowStyle\"></xref> value of anything other than <xref href=\"System.Windows.WindowStyle.None\"></xref>."}],"pos":[58066,58224],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Window.AllowsTransparency\"></xref> dependency property.","nodes":[{"pos":[0,97],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.AllowsTransparency\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Window.AllowsTransparency\"></xref> dependency property."}],"pos":[59169,59267],"yaml":true},{"content":"Override this method to arrange and size a window and its child elements.","nodes":[{"pos":[0,73],"content":"Override this method to arrange and size a window and its child elements.","nodes":[{"content":"Override this method to arrange and size a window and its child elements.","pos":[0,73]}]}],"pos":[60433,60507],"yaml":true},{"content":"<xref:System.Windows.Window.ArrangeOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>. If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> is called.  \n  \n> [!NOTE]\n>  When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.","nodes":[{"pos":[0,413],"content":"<xref:System.Windows.Window.ArrangeOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>. If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> is called.","nodes":[{"content":"<xref:System.Windows.Window.ArrangeOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>. If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> is called.","pos":[0,413],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> is not called when the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property has a value of <ph id=\"ph3\">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>.","pos":[0,184],"source":"<xref:System.Windows.Window.ArrangeOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>."},{"content":"If the value of the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is either <ph id=\"ph2\">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Window.ArrangeOverride%2A&gt;</ph> is called.","pos":[185,413],"source":" If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> is called."}]}]},{"pos":[421,683],"content":"[!NOTE]\n When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.","leadings":["","> "],"nodes":[{"content":"When either <ph id=\"ph1\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are called, the <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of a <ph id=\"ph4\">&lt;xref:System.Windows.Window&gt;</ph> is set to <ph id=\"ph5\">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.","pos":[9,260],"source":" When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>."}]}],"pos":[60518,61207],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Size\"></xref> that reflects the final size that the window should use to arrange itself and its children.","nodes":[{"pos":[0,134],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Size\"&gt;&lt;/xref&gt;</ph> that reflects the final size that the window should use to arrange itself and its children.","source":"A <xref href=\"System.Windows.Size\"></xref> that reflects the final size that the window should use to arrange itself and its children."}],"pos":[61413,61548],"yaml":true},{"content":"A <xref href=\"System.Windows.Size\"></xref> that reflects the actual size that was used.","nodes":[{"pos":[0,87],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Size\"&gt;&lt;/xref&gt;</ph> that reflects the actual size that was used.","source":"A <xref href=\"System.Windows.Size\"></xref> that reflects the actual size that was used."}],"pos":[61611,61699],"yaml":true},{"content":"Manually closes a <xref href=\"System.Windows.Window\"></xref>.","nodes":[{"pos":[0,61],"content":"Manually closes a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window\"&gt;&lt;/xref&gt;</ph>.","source":"Manually closes a <xref href=\"System.Windows.Window\"></xref>."}],"pos":[62593,62655],"yaml":true},{"content":"A <xref:System.Windows.Window> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:  \n  \n-   ALT+F4.  \n  \n-   System menu &#124; **Close**.  \n  \n-   **Close** button.  \n  \n A <xref:System.Windows.Window> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:  \n  \n-   **File** &#124; **Exit** on a main window.  \n  \n-   **File** &#124; **Close** or a **Close** button on a child window.  \n  \n> [!NOTE]\n>  **OK** and **Cancel** buttons on a dialog box are also developer-provided, although will likely set <xref:System.Windows.Window.DialogResult%2A>, which automatically closes a window that was opened by calling <xref:System.Windows.Window.ShowDialog%2A>.  \n  \n These mechanisms require you to explicitly call <xref:System.Windows.Window.Close%2A> to close a window.  \n  \n> [!NOTE]\n>  If a window, opened by calling <xref:System.Windows.Window.ShowDialog%2A>, and with a <xref:System.Windows.Controls.Button> with its <xref:System.Windows.Controls.Button.IsCancel%2A> property set to true, will automatically close when the button is either clicked, or ESC is pressed. If the window was opened using <xref:System.Windows.Window.Show%2A>, however, <xref:System.Windows.Window.Close%2A> must be explicitly called, such as from <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the <xref:System.Windows.Controls.Button>.  \n  \n Closing a window causes the <xref:System.Windows.Window.Closing> event to be raised. If the <xref:System.Windows.Window.Closing> event isn't canceled, the following occurs:  \n  \n-   The <xref:System.Windows.Window> is removed from <xref:System.Windows.Application.Windows%2A?displayProperty=fullName> (if an <xref:System.Windows.Application> object exists).  \n  \n-   The <xref:System.Windows.Window> is removed from the owner <xref:System.Windows.Window> if the owner/owned relationship was established before the owned <xref:System.Windows.Window> was shown and after the owner <xref:System.Windows.Window> was opened.  \n  \n-   The <xref:System.Windows.Window.Closed> event is raised.  \n  \n-   Unmanaged resources created by the <xref:System.Windows.Window> are disposed.  \n  \n-   If <xref:System.Windows.Window.ShowDialog%2A> was called to show the <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> returns.  \n  \n Closing a <xref:System.Windows.Window> causes any windows that it owns to be closed. Furthermore, closing a <xref:System.Windows.Window> may cause an application to stop running depending on how the <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName> property is set.  \n  \n> [!NOTE]\n>  This method cannot be called when a window is hosted in a browser.","nodes":[{"pos":[0,142],"content":"A <xref:System.Windows.Window> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:","pos":[0,142],"source":"A <xref:System.Windows.Window> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:"}]},{"pos":[152,159],"content":"ALT+F4.","nodes":[{"content":"ALT+F4.","pos":[0,7]}]},{"pos":[169,198],"content":"System menu &amp;#124; <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept>.","source":"System menu &#124; **Close**."},{"pos":[208,225],"content":"<bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button.","source":"**Close** button."},{"pos":[232,391],"content":"A <xref:System.Windows.Window> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:","pos":[0,159],"source":"A <xref:System.Windows.Window> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:"}]},{"pos":[401,443],"content":"<bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> &amp;#124; <bpt id=\"p2\">**</bpt>Exit<ept id=\"p2\">**</ept> on a main window.","source":"**File** &#124; **Exit** on a main window."},{"pos":[453,519],"content":"<bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept> &amp;#124; <bpt id=\"p2\">**</bpt>Close<ept id=\"p2\">**</ept> or a <bpt id=\"p3\">**</bpt>Close<ept id=\"p3\">**</ept> button on a child window.","source":"**File** &#124; **Close** or a **Close** button on a child window."},{"pos":[527,790],"content":"[!NOTE]\n **OK** and **Cancel** buttons on a dialog box are also developer-provided, although will likely set <xref:System.Windows.Window.DialogResult%2A>, which automatically closes a window that was opened by calling <xref:System.Windows.Window.ShowDialog%2A>.","leadings":["","> "],"nodes":[{"content":"<bpt id=\"p1\"> **</bpt>OK<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>Cancel<ept id=\"p2\">**</ept> buttons on a dialog box are also developer-provided, although will likely set <ph id=\"ph1\">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>, which automatically closes a window that was opened by calling <ph id=\"ph2\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.","pos":[8,261],"source":" **OK** and **Cancel** buttons on a dialog box are also developer-provided, although will likely set <xref:System.Windows.Window.DialogResult%2A>, which automatically closes a window that was opened by calling <xref:System.Windows.Window.ShowDialog%2A>."}]},{"pos":[797,901],"content":"These mechanisms require you to explicitly call <xref:System.Windows.Window.Close%2A> to close a window.","nodes":[{"content":"These mechanisms require you to explicitly call <ph id=\"ph1\">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> to close a window.","pos":[0,104],"source":"These mechanisms require you to explicitly call <xref:System.Windows.Window.Close%2A> to close a window."}]},{"pos":[909,1479],"content":"[!NOTE]\n If a window, opened by calling <xref:System.Windows.Window.ShowDialog%2A>, and with a <xref:System.Windows.Controls.Button> with its <xref:System.Windows.Controls.Button.IsCancel%2A> property set to true, will automatically close when the button is either clicked, or ESC is pressed. If the window was opened using <xref:System.Windows.Window.Show%2A>, however, <xref:System.Windows.Window.Close%2A> must be explicitly called, such as from <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the <xref:System.Windows.Controls.Button>.","leadings":["","> "],"nodes":[{"content":" If a window, opened by calling <xref:System.Windows.Window.ShowDialog%2A>, and with a <xref:System.Windows.Controls.Button> with its <xref:System.Windows.Controls.Button.IsCancel%2A> property set to true, will automatically close when the button is either clicked, or ESC is pressed. If the window was opened using <xref:System.Windows.Window.Show%2A>, however, <xref:System.Windows.Window.Close%2A> must be explicitly called, such as from <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the <xref:System.Windows.Controls.Button>.","pos":[8,568],"nodes":[{"content":"If a window, opened by calling <ph id=\"ph1\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, and with a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.Button&gt;</ph> with its <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> property set to true, will automatically close when the button is either clicked, or ESC is pressed.","pos":[1,284],"source":" If a window, opened by calling <xref:System.Windows.Window.ShowDialog%2A>, and with a <xref:System.Windows.Controls.Button> with its <xref:System.Windows.Controls.Button.IsCancel%2A> property set to true, will automatically close when the button is either clicked, or ESC is pressed."},{"content":"If the window was opened using <ph id=\"ph1\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, however, <ph id=\"ph2\">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> must be explicitly called, such as from <ph id=\"ph3\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler for the <ph id=\"ph4\">&lt;xref:System.Windows.Controls.Button&gt;</ph>.","pos":[285,560],"source":" If the window was opened using <xref:System.Windows.Window.Show%2A>, however, <xref:System.Windows.Window.Close%2A> must be explicitly called, such as from <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the <xref:System.Windows.Controls.Button>."}]}]},{"pos":[1486,1658],"content":"Closing a window causes the <xref:System.Windows.Window.Closing> event to be raised. If the <xref:System.Windows.Window.Closing> event isn't canceled, the following occurs:","nodes":[{"content":"Closing a window causes the <xref:System.Windows.Window.Closing> event to be raised. If the <xref:System.Windows.Window.Closing> event isn't canceled, the following occurs:","pos":[0,172],"nodes":[{"content":"Closing a window causes the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Closing&gt;</ph> event to be raised.","pos":[0,84],"source":"Closing a window causes the <xref:System.Windows.Window.Closing> event to be raised."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Closing&gt;</ph> event isn't canceled, the following occurs:","pos":[85,172],"source":" If the <xref:System.Windows.Window.Closing> event isn't canceled, the following occurs:"}]}]},{"pos":[1668,1843],"content":"The <xref:System.Windows.Window> is removed from <xref:System.Windows.Application.Windows%2A?displayProperty=fullName> (if an <xref:System.Windows.Application> object exists).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> is removed from <ph id=\"ph2\">&lt;xref:System.Windows.Application.Windows%2A?displayProperty=fullName&gt;</ph> (if an <ph id=\"ph3\">&lt;xref:System.Windows.Application&gt;</ph> object exists).","pos":[0,175],"source":"The <xref:System.Windows.Window> is removed from <xref:System.Windows.Application.Windows%2A?displayProperty=fullName> (if an <xref:System.Windows.Application> object exists)."}]},{"pos":[1853,2105],"content":"The <xref:System.Windows.Window> is removed from the owner <xref:System.Windows.Window> if the owner/owned relationship was established before the owned <xref:System.Windows.Window> was shown and after the owner <xref:System.Windows.Window> was opened.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> is removed from the owner <ph id=\"ph2\">&lt;xref:System.Windows.Window&gt;</ph> if the owner/owned relationship was established before the owned <ph id=\"ph3\">&lt;xref:System.Windows.Window&gt;</ph> was shown and after the owner <ph id=\"ph4\">&lt;xref:System.Windows.Window&gt;</ph> was opened.","pos":[0,252],"source":"The <xref:System.Windows.Window> is removed from the owner <xref:System.Windows.Window> if the owner/owned relationship was established before the owned <xref:System.Windows.Window> was shown and after the owner <xref:System.Windows.Window> was opened."}]},{"pos":[2115,2171],"content":"The <xref:System.Windows.Window.Closed> event is raised.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Window.Closed&gt;</ph> event is raised.","pos":[0,56],"source":"The <xref:System.Windows.Window.Closed> event is raised."}]},{"pos":[2181,2258],"content":"Unmanaged resources created by the <xref:System.Windows.Window> are disposed.","nodes":[{"content":"Unmanaged resources created by the <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> are disposed.","pos":[0,77],"source":"Unmanaged resources created by the <xref:System.Windows.Window> are disposed."}]},{"pos":[2268,2418],"content":"If <xref:System.Windows.Window.ShowDialog%2A> was called to show the <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> returns.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> was called to show the <ph id=\"ph2\">&lt;xref:System.Windows.Window&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> returns.","pos":[0,150],"source":"If <xref:System.Windows.Window.ShowDialog%2A> was called to show the <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> returns."}]},{"pos":[2425,2715],"content":"Closing a <xref:System.Windows.Window> causes any windows that it owns to be closed. Furthermore, closing a <xref:System.Windows.Window> may cause an application to stop running depending on how the <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName> property is set.","nodes":[{"content":"Closing a <xref:System.Windows.Window> causes any windows that it owns to be closed. Furthermore, closing a <xref:System.Windows.Window> may cause an application to stop running depending on how the <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName> property is set.","pos":[0,290],"nodes":[{"content":"Closing a <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> causes any windows that it owns to be closed.","pos":[0,84],"source":"Closing a <xref:System.Windows.Window> causes any windows that it owns to be closed."},{"content":"Furthermore, closing a <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> may cause an application to stop running depending on how the <ph id=\"ph2\">&lt;xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName&gt;</ph> property is set.","pos":[85,290],"source":" Furthermore, closing a <xref:System.Windows.Window> may cause an application to stop running depending on how the <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName> property is set."}]}]},{"pos":[2723,2800],"content":"[!NOTE]\n This method cannot be called when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"This method cannot be called when a window is hosted in a browser.","pos":[9,75]}]}],"pos":[62666,65506],"yaml":true,"extradata":"MT"},{"content":"Occurs when the window is about to close.","nodes":[{"pos":[0,41],"content":"Occurs when the window is about to close.","nodes":[{"content":"Occurs when the window is about to close.","pos":[0,41]}]}],"pos":[67232,67274],"yaml":true},{"content":"Once this event is raised, a window cannot be prevented from closing.","nodes":[{"pos":[0,69],"content":"Once this event is raised, a window cannot be prevented from closing.","nodes":[{"content":"Once this event is raised, a window cannot be prevented from closing.","pos":[0,69]}]}],"pos":[67285,67355],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"System.Windows.UIElement.Visibility\"></xref> is set, or <xref href=\"System.Windows.Window.Show\"></xref>, <xref href=\"System.Windows.Window.ShowDialog\"></xref>, or <xref href=\"System.Windows.Window.Hide\"></xref> is called while a window is closing.","nodes":[{"pos":[0,259],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.Visibility\"&gt;&lt;/xref&gt;</ph> is set, or <ph id=\"ph2\">&lt;xref href=\"System.Windows.Window.Show\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Windows.Window.ShowDialog\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Windows.Window.Hide\"&gt;&lt;/xref&gt;</ph> is called while a window is closing.","source":"<xref href=\"System.Windows.UIElement.Visibility\"></xref> is set, or <xref href=\"System.Windows.Window.Show\"></xref>, <xref href=\"System.Windows.Window.ShowDialog\"></xref>, or <xref href=\"System.Windows.Window.Hide\"></xref> is called while a window is closing."}],"pos":[67602,67862],"yaml":true},{"content":"Occurs directly after <xref href=\"System.Windows.Window.Close\"></xref> is called, and can be handled to cancel window closure.","nodes":[{"pos":[0,126],"content":"Occurs directly after <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.Close\"&gt;&lt;/xref&gt;</ph> is called, and can be handled to cancel window closure.","source":"Occurs directly after <xref href=\"System.Windows.Window.Close\"></xref> is called, and can be handled to cancel window closure."}],"pos":[68693,68820],"yaml":true},{"content":"<xref:System.Windows.Window.Closing> can be handled to detect when a window is being closed (for example, when <xref:System.Windows.Window.Close%2A> is called). Furthermore, <xref:System.Windows.Window.Closing> can be used to prevent a window from closing. To prevent a window from closing, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> argument to `true`.  \n  \n The <xref:System.Windows.Window.Closing> event is raised when <xref:System.Windows.Window.Close%2A> is called, if a window's Close button is clicked, or if the user presses ALT+F4.  \n  \n If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised. If the owner of a window is closed (see <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> is not raised on the owned window.  \n  \n If <xref:System.Windows.Application.Shutdown%2A> is called, the <xref:System.Windows.Window.Closing> event for each window is raised. However, if <xref:System.Windows.Window.Closing> is canceled, cancellation is ignored.  \n  \n If a session ends because a user logs off or shuts down, <xref:System.Windows.Window.Closing> is not raised; handle <xref:System.Windows.Application.SessionEnding> to implement code that cancels application closure.  \n  \n If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method. Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to reopen it.","nodes":[{"pos":[0,442],"content":"<xref:System.Windows.Window.Closing> can be handled to detect when a window is being closed (for example, when <xref:System.Windows.Window.Close%2A> is called). Furthermore, <xref:System.Windows.Window.Closing> can be used to prevent a window from closing. To prevent a window from closing, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> argument to `true`.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.Closing&gt;</ph> can be handled to detect when a window is being closed (for example, when <ph id=\"ph2\">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> is called).","pos":[0,160],"source":"<xref:System.Windows.Window.Closing> can be handled to detect when a window is being closed (for example, when <xref:System.Windows.Window.Close%2A> is called)."},{"content":"Furthermore, <ph id=\"ph1\">&lt;xref:System.Windows.Window.Closing&gt;</ph> can be used to prevent a window from closing.","pos":[161,256],"source":" Furthermore, <xref:System.Windows.Window.Closing> can be used to prevent a window from closing."},{"content":"To prevent a window from closing, you can set the <ph id=\"ph1\">&lt;xref:System.ComponentModel.CancelEventArgs.Cancel%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.ComponentModel.CancelEventArgs&gt;</ph> argument to <ph id=\"ph3\">`true`</ph>.","pos":[257,442],"source":" To prevent a window from closing, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> argument to `true`."}]},{"pos":[449,629],"content":"The <xref:System.Windows.Window.Closing> event is raised when <xref:System.Windows.Window.Close%2A> is called, if a window's Close button is clicked, or if the user presses ALT+F4.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is raised when <ph id=\"ph2\">&lt;xref:System.Windows.Window.Close%2A&gt;</ph> is called, if a window's Close button is clicked, or if the user presses ALT+F4.","pos":[0,180],"source":"The <xref:System.Windows.Window.Closing> event is raised when <xref:System.Windows.Window.Close%2A> is called, if a window's Close button is clicked, or if the user presses ALT+F4."}]},{"pos":[636,990],"content":"If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised. If the owner of a window is closed (see <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> is not raised on the owned window.","nodes":[{"content":"If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised. If the owner of a window is closed (see <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> is not raised on the owned window.","pos":[0,354],"nodes":[{"content":"If an owned window was opened by its owner window using <ph id=\"ph1\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, and the owner window is closed, the owned window's <ph id=\"ph2\">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is not raised.","pos":[0,202],"source":"If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised."},{"content":"If the owner of a window is closed (see <ph id=\"ph1\">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), <ph id=\"ph2\">&lt;xref:System.Windows.Window.Closing&gt;</ph> is not raised on the owned window.","pos":[203,354],"source":" If the owner of a window is closed (see <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> is not raised on the owned window."}]}]},{"pos":[997,1217],"content":"If <xref:System.Windows.Application.Shutdown%2A> is called, the <xref:System.Windows.Window.Closing> event for each window is raised. However, if <xref:System.Windows.Window.Closing> is canceled, cancellation is ignored.","nodes":[{"content":"If <xref:System.Windows.Application.Shutdown%2A> is called, the <xref:System.Windows.Window.Closing> event for each window is raised. However, if <xref:System.Windows.Window.Closing> is canceled, cancellation is ignored.","pos":[0,220],"nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Application.Shutdown%2A&gt;</ph> is called, the <ph id=\"ph2\">&lt;xref:System.Windows.Window.Closing&gt;</ph> event for each window is raised.","pos":[0,133],"source":"If <xref:System.Windows.Application.Shutdown%2A> is called, the <xref:System.Windows.Window.Closing> event for each window is raised."},{"content":"However, if <ph id=\"ph1\">&lt;xref:System.Windows.Window.Closing&gt;</ph> is canceled, cancellation is ignored.","pos":[134,220],"source":" However, if <xref:System.Windows.Window.Closing> is canceled, cancellation is ignored."}]}]},{"pos":[1224,1439],"content":"If a session ends because a user logs off or shuts down, <xref:System.Windows.Window.Closing> is not raised; handle <xref:System.Windows.Application.SessionEnding> to implement code that cancels application closure.","nodes":[{"content":"If a session ends because a user logs off or shuts down, <ph id=\"ph1\">&lt;xref:System.Windows.Window.Closing&gt;</ph> is not raised; handle <ph id=\"ph2\">&lt;xref:System.Windows.Application.SessionEnding&gt;</ph> to implement code that cancels application closure.","pos":[0,215],"source":"If a session ends because a user logs off or shuts down, <xref:System.Windows.Window.Closing> is not raised; handle <xref:System.Windows.Application.SessionEnding> to implement code that cancels application closure."}]},{"pos":[1446,1830],"content":"If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method. Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to reopen it.","nodes":[{"content":"If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method. Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to reopen it.","pos":[0,384],"nodes":[{"content":"If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Closing&gt;</ph> event, cancel it, and call the <ph id=\"ph2\">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph> method.","pos":[0,293],"source":"If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method."},{"content":"Then, you can call <ph id=\"ph1\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> on the same instance to reopen it.","pos":[294,384],"source":" Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to reopen it."}]}]}],"pos":[68831,70674],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"System.Windows.UIElement.Visibility\"></xref> is set, or <xref href=\"System.Windows.Window.Show\"></xref>, <xref href=\"System.Windows.Window.ShowDialog\"></xref>, or <xref href=\"System.Windows.Window.Close\"></xref> is called while a window is closing.","nodes":[{"pos":[0,260],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.Visibility\"&gt;&lt;/xref&gt;</ph> is set, or <ph id=\"ph2\">&lt;xref href=\"System.Windows.Window.Show\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Windows.Window.ShowDialog\"&gt;&lt;/xref&gt;</ph>, or <ph id=\"ph4\">&lt;xref href=\"System.Windows.Window.Close\"&gt;&lt;/xref&gt;</ph> is called while a window is closing.","source":"<xref href=\"System.Windows.UIElement.Visibility\"></xref> is set, or <xref href=\"System.Windows.Window.Show\"></xref>, <xref href=\"System.Windows.Window.ShowDialog\"></xref>, or <xref href=\"System.Windows.Window.Close\"></xref> is called while a window is closing."}],"pos":[72190,72451],"yaml":true},{"content":"Occurs after a window's content has been rendered.","nodes":[{"pos":[0,50],"content":"Occurs after a window's content has been rendered.","nodes":[{"content":"Occurs after a window's content has been rendered.","pos":[0,50]}]}],"pos":[73330,73381],"yaml":true},{"content":"If the window has no content, this event is not raised.","nodes":[{"pos":[0,55],"content":"If the window has no content, this event is not raised.","nodes":[{"content":"If the window has no content, this event is not raised.","pos":[0,55]}]}],"pos":[73392,73448],"yaml":true,"extradata":"MT"},{"content":"Occurs when a window becomes a background window.","nodes":[{"pos":[0,49],"content":"Occurs when a window becomes a background window.","nodes":[{"content":"Occurs when a window becomes a background window.","pos":[0,49]}]}],"pos":[74452,74502],"yaml":true},{"content":"A window is deactivated (becomes a background window) when:  \n  \n-   A user switches to another window in the current application.  \n  \n-   A user switches to the window in another application by using ALT+TAB or by using Task Manager.  \n  \n-   A user clicks the taskbar button for a window in another application.  \n  \n Windows that need to detect when they become deactivated by handling the <xref:System.Windows.Window.Deactivated> event.  \n  \n After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime. If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.  \n  \n An application can also be <xref:System.Windows.Application.Deactivated>.","nodes":[{"pos":[0,59],"content":"A window is deactivated (becomes a background window) when:","nodes":[{"content":"A window is deactivated (becomes a background window) when:","pos":[0,59]}]},{"pos":[69,130],"content":"A user switches to another window in the current application.","nodes":[{"content":"A user switches to another window in the current application.","pos":[0,61]}]},{"pos":[140,235],"content":"A user switches to the window in another application by using ALT+TAB or by using Task Manager.","nodes":[{"content":"A user switches to the window in another application by using ALT+TAB or by using Task Manager.","pos":[0,95]}]},{"pos":[245,314],"content":"A user clicks the taskbar button for a window in another application.","nodes":[{"content":"A user clicks the taskbar button for a window in another application.","pos":[0,69]}]},{"pos":[321,441],"content":"Windows that need to detect when they become deactivated by handling the <xref:System.Windows.Window.Deactivated> event.","nodes":[{"content":"Windows that need to detect when they become deactivated by handling the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> event.","pos":[0,120],"source":"Windows that need to detect when they become deactivated by handling the <xref:System.Windows.Window.Deactivated> event."}]},{"pos":[448,726],"content":"After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime. If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.","nodes":[{"content":"After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime. If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.","pos":[0,278],"nodes":[{"content":"After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime.","pos":[0,106]},{"content":"If an application's behavior or state depends on its activation state, it can inspect <ph id=\"ph1\">&lt;xref:System.Windows.Window.IsActive%2A&gt;</ph> to determine which activation state it's in.","pos":[107,278],"source":" If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in."}]}]},{"pos":[733,806],"content":"An application can also be <xref:System.Windows.Application.Deactivated>.","nodes":[{"content":"An application can also be <ph id=\"ph1\">&lt;xref:System.Windows.Application.Deactivated&gt;</ph>.","pos":[0,73],"source":"An application can also be <xref:System.Windows.Application.Deactivated>."}]}],"pos":[74513,75334],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the dialog result value, which is the value that is returned from the <xref href=\"System.Windows.Window.ShowDialog\"></xref> method.","nodes":[{"pos":[0,144],"content":"Gets or sets the dialog result value, which is the value that is returned from the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.ShowDialog\"&gt;&lt;/xref&gt;</ph> method.","source":"Gets or sets the dialog result value, which is the value that is returned from the <xref href=\"System.Windows.Window.ShowDialog\"></xref> method."}],"pos":[76343,76488],"yaml":true},{"content":"<xref:System.Windows.Window.DialogResult%2A> can be used from the code that showed a dialog box to determine whether a user accepted (`true`) or canceled (`false`) the dialog box. If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it. If a dialog box was canceled, however, this signifies that calling code should stop any further processing.  \n  \n By default, a dialog box is canceled when a user does one of the following:  \n  \n-   PressesALT+F4.  \n  \n-   Clicks the **Close** button.  \n  \n-   Selects **Close** from the System menu.  \n  \n In all of these cases, <xref:System.Windows.Window.DialogResult%2A> is `false` by default.  \n  \n A dialog box typically provides a special button to cancel a dialog, which is the button whose <xref:System.Windows.Controls.Button.IsCancel%2A> property is set to `true`. A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed. In either of these cases, <xref:System.Windows.Window.DialogResult%2A> remains `false`.  \n  \n A dialog box also typically provides an accept button, which is the button whose <xref:System.Windows.Controls.Button.IsDefault%2A> property is set to `true`. A button configured this way will raise its <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event when either it or the ENTER key is pressed. However, it won't automatically close the dialog box, nor will it set <xref:System.Windows.Window.DialogResult%2A> to `true`. You need to manually write this code, usually from the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the default button.  \n  \n <xref:System.Windows.Window.DialogResult%2A> is `null` when the dialog box is shown but neither accepted nor canceled.  \n  \n After a dialog box closes, you can get the dialog result from the value returned by <xref:System.Windows.Window.ShowDialog%2A> method, or by inspecting the <xref:System.Windows.Window.DialogResult%2A> property.  \n  \n <xref:System.Windows.Window.DialogResult%2A> can only be set when a <xref:System.Windows.Window> is opened by calling its <xref:System.Windows.Window.ShowDialog%2A> method.  \n  \n> [!NOTE]\n>  You cannot set or get this property when a window is hosted in a browser.","nodes":[{"pos":[0,439],"content":"<xref:System.Windows.Window.DialogResult%2A> can be used from the code that showed a dialog box to determine whether a user accepted (`true`) or canceled (`false`) the dialog box. If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it. If a dialog box was canceled, however, this signifies that calling code should stop any further processing.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> can be used from the code that showed a dialog box to determine whether a user accepted (<ph id=\"ph2\">`true`</ph>) or canceled (<ph id=\"ph3\">`false`</ph>) the dialog box.","pos":[0,179],"source":"<xref:System.Windows.Window.DialogResult%2A> can be used from the code that showed a dialog box to determine whether a user accepted (`true`) or canceled (`false`) the dialog box."},{"content":"If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it.","pos":[180,331]},{"content":"If a dialog box was canceled, however, this signifies that calling code should stop any further processing.","pos":[332,439]}]},{"pos":[446,521],"content":"By default, a dialog box is canceled when a user does one of the following:","nodes":[{"content":"By default, a dialog box is canceled when a user does one of the following:","pos":[0,75]}]},{"pos":[531,545],"content":"PressesALT+F4.","nodes":[{"content":"PressesALT+F4.","pos":[0,14]}]},{"pos":[555,583],"content":"Clicks the <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> button.","source":"Clicks the **Close** button."},{"pos":[593,632],"content":"Selects <bpt id=\"p1\">**</bpt>Close<ept id=\"p1\">**</ept> from the System menu.","source":"Selects **Close** from the System menu."},{"pos":[639,729],"content":"In all of these cases, <ph id=\"ph1\">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> is <ph id=\"ph2\">`false`</ph> by default.","source":"In all of these cases, <xref:System.Windows.Window.DialogResult%2A> is `false` by default."},{"pos":[736,1117],"content":"A dialog box typically provides a special button to cancel a dialog, which is the button whose <xref:System.Windows.Controls.Button.IsCancel%2A> property is set to `true`. A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed. In either of these cases, <xref:System.Windows.Window.DialogResult%2A> remains `false`.","nodes":[{"content":"A dialog box typically provides a special button to cancel a dialog, which is the button whose <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button.IsCancel%2A&gt;</ph> property is set to <ph id=\"ph2\">`true`</ph>.","pos":[0,171],"source":"A dialog box typically provides a special button to cancel a dialog, which is the button whose <xref:System.Windows.Controls.Button.IsCancel%2A> property is set to `true`."},{"content":"A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed.","pos":[172,293]},{"content":"In either of these cases, <ph id=\"ph1\">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> remains <ph id=\"ph2\">`false`</ph>.","pos":[294,381],"source":" In either of these cases, <xref:System.Windows.Window.DialogResult%2A> remains `false`."}]},{"pos":[1124,1713],"content":"A dialog box also typically provides an accept button, which is the button whose <xref:System.Windows.Controls.Button.IsDefault%2A> property is set to `true`. A button configured this way will raise its <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event when either it or the ENTER key is pressed. However, it won't automatically close the dialog box, nor will it set <xref:System.Windows.Window.DialogResult%2A> to `true`. You need to manually write this code, usually from the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the default button.","nodes":[{"content":"A dialog box also typically provides an accept button, which is the button whose <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Button.IsDefault%2A&gt;</ph> property is set to <ph id=\"ph2\">`true`</ph>.","pos":[0,158],"source":"A dialog box also typically provides an accept button, which is the button whose <xref:System.Windows.Controls.Button.IsDefault%2A> property is set to `true`."},{"content":"A button configured this way will raise its <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event when either it or the ENTER key is pressed.","pos":[159,311],"source":" A button configured this way will raise its <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event when either it or the ENTER key is pressed."},{"content":"However, it won't automatically close the dialog box, nor will it set <ph id=\"ph1\">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> to <ph id=\"ph2\">`true`</ph>.","pos":[312,437],"source":" However, it won't automatically close the dialog box, nor will it set <xref:System.Windows.Window.DialogResult%2A> to `true`."},{"content":"You need to manually write this code, usually from the <ph id=\"ph1\">&lt;xref:System.Windows.Controls.Primitives.ButtonBase.Click&gt;</ph> event handler for the default button.","pos":[438,589],"source":" You need to manually write this code, usually from the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the default button."}]},{"pos":[1720,1838],"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> is <ph id=\"ph2\">`null`</ph> when the dialog box is shown but neither accepted nor canceled.","source":"<xref:System.Windows.Window.DialogResult%2A> is `null` when the dialog box is shown but neither accepted nor canceled."},{"pos":[1845,2055],"content":"After a dialog box closes, you can get the dialog result from the value returned by <xref:System.Windows.Window.ShowDialog%2A> method, or by inspecting the <xref:System.Windows.Window.DialogResult%2A> property.","nodes":[{"content":"After a dialog box closes, you can get the dialog result from the value returned by <ph id=\"ph1\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method, or by inspecting the <ph id=\"ph2\">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property.","pos":[0,210],"source":"After a dialog box closes, you can get the dialog result from the value returned by <xref:System.Windows.Window.ShowDialog%2A> method, or by inspecting the <xref:System.Windows.Window.DialogResult%2A> property."}]},{"pos":[2062,2234],"content":"<xref:System.Windows.Window.DialogResult%2A> can only be set when a <xref:System.Windows.Window> is opened by calling its <xref:System.Windows.Window.ShowDialog%2A> method.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> can only be set when a <ph id=\"ph2\">&lt;xref:System.Windows.Window&gt;</ph> is opened by calling its <ph id=\"ph3\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method.","pos":[0,172],"source":"<xref:System.Windows.Window.DialogResult%2A> can only be set when a <xref:System.Windows.Window> is opened by calling its <xref:System.Windows.Window.ShowDialog%2A> method."}]},{"pos":[2242,2326],"content":"[!NOTE]\n You cannot set or get this property when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"You cannot set or get this property when a window is hosted in a browser.","pos":[9,82]}]}],"pos":[76499,78851],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Nullable`1\"></xref> value of type <xref href=\"System.Boolean\"></xref>. The default is `false`.","nodes":[{"pos":[0,115],"content":"A <xref href=\"System.Nullable`1\"></xref> value of type <xref href=\"System.Boolean\"></xref>. The default is `false`.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Nullable`1\"&gt;&lt;/xref&gt;</ph> value of type <ph id=\"ph2\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph>.","pos":[0,91],"source":"A <xref href=\"System.Nullable`1\"></xref> value of type <xref href=\"System.Boolean\"></xref>."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[92,115],"source":" The default is `false`."}]}],"pos":[79859,79975],"yaml":true},{"content":"<xref href=\"System.Windows.Window.DialogResult\"></xref> is set before a window is opened by calling <xref href=\"System.Windows.Window.ShowDialog\"></xref>.  \n  \n -or-  \n  \n <xref href=\"System.Windows.Window.DialogResult\"></xref> is set on a window that is opened by calling <xref href=\"System.Windows.Window.Show\"></xref>.","nodes":[{"pos":[0,154],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.DialogResult\"&gt;&lt;/xref&gt;</ph> is set before a window is opened by calling <ph id=\"ph2\">&lt;xref href=\"System.Windows.Window.ShowDialog\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Windows.Window.DialogResult\"></xref> is set before a window is opened by calling <xref href=\"System.Windows.Window.ShowDialog\"></xref>."},{"pos":[161,165],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[172,321],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.DialogResult\"&gt;&lt;/xref&gt;</ph> is set on a window that is opened by calling <ph id=\"ph2\">&lt;xref href=\"System.Windows.Window.Show\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Windows.Window.DialogResult\"></xref> is set on a window that is opened by calling <xref href=\"System.Windows.Window.Show\"></xref>."}],"pos":[80147,80483],"yaml":true},{"content":"Occurs after the DPI of the screen on which the Window is displayed changes.","nodes":[{"pos":[0,76],"content":"Occurs after the DPI of the screen on which the Window is displayed changes.","nodes":[{"content":"Occurs after the DPI of the screen on which the Window is displayed changes.","pos":[0,76]}]}],"pos":[81379,81456],"yaml":true},{"content":"A <xref href=\"System.Windows.RoutedEvent\"></xref> for when the DPI of the screen the Window is on changes.","nodes":[{"pos":[0,106],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.RoutedEvent\"&gt;&lt;/xref&gt;</ph> for when the DPI of the screen the Window is on changes.","source":"A <xref href=\"System.Windows.RoutedEvent\"></xref> for when the DPI of the screen the Window is on changes."}],"pos":[82300,82407],"yaml":true},{"content":"Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.","nodes":[{"pos":[0,116],"content":"Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.","nodes":[{"content":"Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.","pos":[0,116]}]}],"pos":[83209,83326],"yaml":true},{"content":"The left mouse button must be down when <xref:System.Windows.Window.DragMove%2A> is called. One way to detect when the left mouse button is pressed is to handle the <xref:System.Windows.UIElement.MouseLeftButtonDown> event.  \n  \n When <xref:System.Windows.Window.DragMove%2A> is called, the left mouse button must be depressed over an exposed area of the window's client area.  \n  \n> [!NOTE]\n>  This method cannot be called when a window is hosted in a browser.","nodes":[{"pos":[0,223],"content":"The left mouse button must be down when <xref:System.Windows.Window.DragMove%2A> is called. One way to detect when the left mouse button is pressed is to handle the <xref:System.Windows.UIElement.MouseLeftButtonDown> event.","nodes":[{"content":"The left mouse button must be down when <xref:System.Windows.Window.DragMove%2A> is called. One way to detect when the left mouse button is pressed is to handle the <xref:System.Windows.UIElement.MouseLeftButtonDown> event.","pos":[0,223],"nodes":[{"content":"The left mouse button must be down when <ph id=\"ph1\">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called.","pos":[0,91],"source":"The left mouse button must be down when <xref:System.Windows.Window.DragMove%2A> is called."},{"content":"One way to detect when the left mouse button is pressed is to handle the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.MouseLeftButtonDown&gt;</ph> event.","pos":[92,223],"source":" One way to detect when the left mouse button is pressed is to handle the <xref:System.Windows.UIElement.MouseLeftButtonDown> event."}]}]},{"pos":[230,376],"content":"When <xref:System.Windows.Window.DragMove%2A> is called, the left mouse button must be depressed over an exposed area of the window's client area.","nodes":[{"content":"When <ph id=\"ph1\">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called, the left mouse button must be depressed over an exposed area of the window's client area.","pos":[0,146],"source":"When <xref:System.Windows.Window.DragMove%2A> is called, the left mouse button must be depressed over an exposed area of the window's client area."}]},{"pos":[384,461],"content":"[!NOTE]\n This method cannot be called when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"This method cannot be called when a window is hosted in a browser.","pos":[9,75]}]}],"pos":[83337,83806],"yaml":true,"extradata":"MT"},{"content":"The left mouse button is not down.","nodes":[{"pos":[0,34],"content":"The left mouse button is not down.","nodes":[{"content":"The left mouse button is not down.","pos":[0,34]}]}],"pos":[84654,84689],"yaml":true},{"content":"Returns a reference to the <xref href=\"System.Windows.Window\"></xref> object that hosts the content tree within which the dependency object is located.","nodes":[{"pos":[0,151],"content":"Returns a reference to the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window\"&gt;&lt;/xref&gt;</ph> object that hosts the content tree within which the dependency object is located.","source":"Returns a reference to the <xref href=\"System.Windows.Window\"></xref> object that hosts the content tree within which the dependency object is located."}],"pos":[85752,85904],"yaml":true},{"content":"The dependency object.","nodes":[{"pos":[0,22],"content":"The dependency object.","nodes":[{"content":"The dependency object.","pos":[0,22]}]}],"pos":[86131,86154],"yaml":true},{"content":"A <xref href=\"System.Windows.Window\"></xref> reference to the host window.","nodes":[{"pos":[0,74],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window\"&gt;&lt;/xref&gt;</ph> reference to the host window.","source":"A <xref href=\"System.Windows.Window\"></xref> reference to the host window."}],"pos":[86219,86294],"yaml":true},{"content":"<code>dependencyObject</code> is null.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;dependencyObject&lt;/code&gt;</ph> is null.","source":"<code>dependencyObject</code> is null."}],"pos":[86455,86494],"yaml":true},{"content":"Makes a window invisible.","nodes":[{"pos":[0,25],"content":"Makes a window invisible.","nodes":[{"content":"Makes a window invisible.","pos":[0,25]}]}],"pos":[87314,87340],"yaml":true},{"content":"A window is not closed when it is hidden, and neither the <xref:System.Windows.Window.Closing> nor <xref:System.Windows.Window.Closed> event is raised. Instead, the window's <xref:System.Windows.UIElement.Visibility%2A> property is set to <xref:System.Windows.Visibility?displayProperty=fullName>.  \n  \n If a window is the application's <xref:System.Windows.Application.MainWindow%2A> and the application's <xref:System.Windows.Application.ShutdownMode%2A> is <xref:System.Windows.ShutdownMode.OnMainWindowClose>, the application does not shut down. Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <xref:System.Windows.ShutdownMode.OnLastWindowClose>.  \n  \n If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method. Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to re-open it.","nodes":[{"pos":[0,297],"content":"A window is not closed when it is hidden, and neither the <xref:System.Windows.Window.Closing> nor <xref:System.Windows.Window.Closed> event is raised. Instead, the window's <xref:System.Windows.UIElement.Visibility%2A> property is set to <xref:System.Windows.Visibility?displayProperty=fullName>.","nodes":[{"content":"A window is not closed when it is hidden, and neither the <xref:System.Windows.Window.Closing> nor <xref:System.Windows.Window.Closed> event is raised. Instead, the window's <xref:System.Windows.UIElement.Visibility%2A> property is set to <xref:System.Windows.Visibility?displayProperty=fullName>.","pos":[0,297],"nodes":[{"content":"A window is not closed when it is hidden, and neither the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Closing&gt;</ph> nor <ph id=\"ph2\">&lt;xref:System.Windows.Window.Closed&gt;</ph> event is raised.","pos":[0,151],"source":"A window is not closed when it is hidden, and neither the <xref:System.Windows.Window.Closing> nor <xref:System.Windows.Window.Closed> event is raised."},{"content":"Instead, the window's <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is set to <ph id=\"ph2\">&lt;xref:System.Windows.Visibility?displayProperty=fullName&gt;</ph>.","pos":[152,297],"source":" Instead, the window's <xref:System.Windows.UIElement.Visibility%2A> property is set to <xref:System.Windows.Visibility?displayProperty=fullName>."}]}]},{"pos":[304,718],"content":"If a window is the application's <xref:System.Windows.Application.MainWindow%2A> and the application's <xref:System.Windows.Application.ShutdownMode%2A> is <xref:System.Windows.ShutdownMode.OnMainWindowClose>, the application does not shut down. Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <xref:System.Windows.ShutdownMode.OnLastWindowClose>.","nodes":[{"content":"If a window is the application's <xref:System.Windows.Application.MainWindow%2A> and the application's <xref:System.Windows.Application.ShutdownMode%2A> is <xref:System.Windows.ShutdownMode.OnMainWindowClose>, the application does not shut down. Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <xref:System.Windows.ShutdownMode.OnLastWindowClose>.","pos":[0,414],"nodes":[{"content":"If a window is the application's <ph id=\"ph1\">&lt;xref:System.Windows.Application.MainWindow%2A&gt;</ph> and the application's <ph id=\"ph2\">&lt;xref:System.Windows.Application.ShutdownMode%2A&gt;</ph> is <ph id=\"ph3\">&lt;xref:System.Windows.ShutdownMode.OnMainWindowClose&gt;</ph>, the application does not shut down.","pos":[0,245],"source":"If a window is the application's <xref:System.Windows.Application.MainWindow%2A> and the application's <xref:System.Windows.Application.ShutdownMode%2A> is <xref:System.Windows.ShutdownMode.OnMainWindowClose>, the application does not shut down."},{"content":"Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <ph id=\"ph1\">&lt;xref:System.Windows.ShutdownMode.OnLastWindowClose&gt;</ph>.","pos":[246,414],"source":" Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <xref:System.Windows.ShutdownMode.OnLastWindowClose>."}]}]},{"pos":[725,1111],"content":"If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method. Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to re-open it.","nodes":[{"content":"If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method. Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to re-open it.","pos":[0,386],"nodes":[{"content":"If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Closing&gt;</ph> event, cancel it, and call the <ph id=\"ph2\">&lt;xref:System.Windows.Window.Hide%2A&gt;</ph> method.","pos":[0,294],"source":"If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method."},{"content":"Then, you can call <ph id=\"ph1\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> on the same instance to re-open it.","pos":[295,386],"source":" Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to re-open it."}]}]}],"pos":[87351,88469],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"System.Windows.Window.Hide\"></xref> is called on a window that is closing (<xref href=\"System.Windows.Window.Closing\"></xref>) or has been closed (<xref href=\"System.Windows.Window.Closed\"></xref>).","nodes":[{"pos":[0,210],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.Hide\"&gt;&lt;/xref&gt;</ph> is called on a window that is closing (<ph id=\"ph2\">&lt;xref href=\"System.Windows.Window.Closing\"&gt;&lt;/xref&gt;</ph>) or has been closed (<ph id=\"ph3\">&lt;xref href=\"System.Windows.Window.Closed\"&gt;&lt;/xref&gt;</ph>).","source":"<xref href=\"System.Windows.Window.Hide\"></xref> is called on a window that is closing (<xref href=\"System.Windows.Window.Closing\"></xref>) or has been closed (<xref href=\"System.Windows.Window.Closed\"></xref>)."}],"pos":[88696,88907],"yaml":true},{"content":"Gets or sets a window's icon.","nodes":[{"pos":[0,29],"content":"Gets or sets a window's icon.","nodes":[{"content":"Gets or sets a window's icon.","pos":[0,29]}]}],"pos":[89701,89731],"yaml":true},{"content":"[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] standalone applications have two types of icons:  \n  \n-   One assembly icon, which is specified by using the `<ApplicationIcon>` property in the application's project build file. This icon is used as the desktop icon for an assembly.  \n  \n    > [!NOTE]\n    >  When debugging in Visual Studio, your icon may not appear due to the hosting process. If you run the executable, the icon will appear. For more information, see [Hosting Process (vshost.exe)](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b).  \n  \n-   One icon per window that is specified by setting <xref:System.Windows.Window.Icon%2A>. For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.  \n  \n A [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window always displays an icon. When one is not provided by setting <xref:System.Windows.Window.Icon%2A>, [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] chooses an icon to display based on the following rules:  \n  \n1.  Use the assembly icon, if specified.  \n  \n2.  If the assembly icon is not specified, use the default [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] icon.  \n  \n If you use <xref:System.Windows.Window.Icon%2A> to specify a custom window icon, you can restore the default application icon by setting <xref:System.Windows.Window.Icon%2A> to `null`.  \n  \n A single icon can be used in a variety of ways in [!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)], including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list. Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list. Some applications, like [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], provide a **View** menu that allows you to choose the size of the icon you'd like to view.  \n  \n To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth. For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.  \n  \n If icons for all possible sizes and color depths exist within an icon file, <xref:System.Windows.Window> will use the appropriate icon. If an icon file contains only a subset of all the possible icons, <xref:System.Windows.Window> uses the next most appropriate icon in order of decreasing sizes and color depth.  \n  \n The result is that an icon will always be used by <xref:System.Windows.Window>, although the icon used may not target the required size and color depth. For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors. This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.  \n  \n> [!NOTE]\n>  You cannot set or get this property when a window is hosted in a browser.  \n  \n<a name=\"dependencyPropertyInfo_WindowIcon\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Window.IconProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,106],"content":"<ph id=\"ph1\">[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)]</ph> standalone applications have two types of icons:","source":"[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] standalone applications have two types of icons:"},{"pos":[116,291],"content":"One assembly icon, which is specified by using the `<ApplicationIcon>` property in the application's project build file. This icon is used as the desktop icon for an assembly.","nodes":[{"content":"One assembly icon, which is specified by using the <ph id=\"ph1\">`&lt;ApplicationIcon&gt;`</ph> property in the application's project build file.","pos":[0,120],"source":"One assembly icon, which is specified by using the `<ApplicationIcon>` property in the application's project build file."},{"content":"This icon is used as the desktop icon for an assembly.","pos":[121,175]}]},{"pos":[303,582],"content":"[!NOTE]\nWhen debugging in Visual Studio, your icon may not appear due to the hosting process. If you run the executable, the icon will appear. For more information, see [Hosting Process (vshost.exe)](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b).","leadings":["","    >  "],"nodes":[{"content":"When debugging in Visual Studio, your icon may not appear due to the hosting process. If you run the executable, the icon will appear. For more information, see [Hosting Process (vshost.exe)](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b).","pos":[8,272],"nodes":[{"content":"When debugging in Visual Studio, your icon may not appear due to the hosting process.","pos":[0,85]},{"content":"If you run the executable, the icon will appear.","pos":[86,134]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Hosting Process (vshost.exe)<ept id=\"p1\">](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)</ept>.","pos":[135,264],"source":" For more information, see [Hosting Process (vshost.exe)](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b)."}]}]},{"pos":[592,805],"content":"One icon per window that is specified by setting <xref:System.Windows.Window.Icon%2A>. For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.","nodes":[{"content":"One icon per window that is specified by setting <xref:System.Windows.Window.Icon%2A>. For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.","pos":[0,213],"nodes":[{"content":"One icon per window that is specified by setting <ph id=\"ph1\">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>.","pos":[0,86],"source":"One icon per window that is specified by setting <xref:System.Windows.Window.Icon%2A>."},{"content":"For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.","pos":[87,213]}]}]},{"pos":[812,1096],"content":"A [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window always displays an icon. When one is not provided by setting <xref:System.Windows.Window.Icon%2A>, [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] chooses an icon to display based on the following rules:","nodes":[{"content":"A <ph id=\"ph1\">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window always displays an icon.","pos":[0,93],"source":"A [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window always displays an icon."},{"content":"When one is not provided by setting <ph id=\"ph1\">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph>, <ph id=\"ph2\">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> chooses an icon to display based on the following rules:","pos":[94,284],"source":" When one is not provided by setting <xref:System.Windows.Window.Icon%2A>, [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] chooses an icon to display based on the following rules:"}]},{"pos":[1106,1142],"content":"Use the assembly icon, if specified.","nodes":[{"content":"Use the assembly icon, if specified.","pos":[0,36]}]},{"pos":[1152,1270],"content":"If the assembly icon is not specified, use the default <ph id=\"ph1\">[!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)]</ph> icon.","source":"If the assembly icon is not specified, use the default [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] icon."},{"pos":[1277,1461],"content":"If you use <ph id=\"ph1\">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> to specify a custom window icon, you can restore the default application icon by setting <ph id=\"ph2\">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> to <ph id=\"ph3\">`null`</ph>.","source":"If you use <xref:System.Windows.Window.Icon%2A> to specify a custom window icon, you can restore the default application icon by setting <xref:System.Windows.Window.Icon%2A> to `null`."},{"pos":[1468,2083],"content":"A single icon can be used in a variety of ways in [!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)], including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list. Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list. Some applications, like [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], provide a **View** menu that allows you to choose the size of the icon you'd like to view.","nodes":[{"content":"A single icon can be used in a variety of ways in <ph id=\"ph1\">[!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)]</ph>, including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list.","pos":[0,224],"source":"A single icon can be used in a variety of ways in [!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)], including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list."},{"content":"Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list.","pos":[225,433]},{"content":"Some applications, like <ph id=\"ph1\">[!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)]</ph>, provide a <bpt id=\"p1\">**</bpt>View<ept id=\"p1\">**</ept> menu that allows you to choose the size of the icon you'd like to view.","pos":[434,615],"source":" Some applications, like [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], provide a **View** menu that allows you to choose the size of the icon you'd like to view."}]},{"pos":[2090,2449],"content":"To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth. For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.","nodes":[{"content":"To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth. For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.","pos":[0,359],"nodes":[{"content":"To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth.","pos":[0,185]},{"content":"For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.","pos":[186,359]}]}]},{"pos":[2456,2768],"content":"If icons for all possible sizes and color depths exist within an icon file, <xref:System.Windows.Window> will use the appropriate icon. If an icon file contains only a subset of all the possible icons, <xref:System.Windows.Window> uses the next most appropriate icon in order of decreasing sizes and color depth.","nodes":[{"content":"If icons for all possible sizes and color depths exist within an icon file, <xref:System.Windows.Window> will use the appropriate icon. If an icon file contains only a subset of all the possible icons, <xref:System.Windows.Window> uses the next most appropriate icon in order of decreasing sizes and color depth.","pos":[0,312],"nodes":[{"content":"If icons for all possible sizes and color depths exist within an icon file, <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> will use the appropriate icon.","pos":[0,135],"source":"If icons for all possible sizes and color depths exist within an icon file, <xref:System.Windows.Window> will use the appropriate icon."},{"content":"If an icon file contains only a subset of all the possible icons, <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> uses the next most appropriate icon in order of decreasing sizes and color depth.","pos":[136,312],"source":" If an icon file contains only a subset of all the possible icons, <xref:System.Windows.Window> uses the next most appropriate icon in order of decreasing sizes and color depth."}]}]},{"pos":[2775,3178],"content":"The result is that an icon will always be used by <xref:System.Windows.Window>, although the icon used may not target the required size and color depth. For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors. This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.","nodes":[{"content":"The result is that an icon will always be used by <xref:System.Windows.Window>, although the icon used may not target the required size and color depth. For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors. This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.","pos":[0,403],"nodes":[{"content":"The result is that an icon will always be used by <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph>, although the icon used may not target the required size and color depth.","pos":[0,152],"source":"The result is that an icon will always be used by <xref:System.Windows.Window>, although the icon used may not target the required size and color depth."},{"content":"For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors.","pos":[153,262]},{"content":"This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.","pos":[263,403]}]}]},{"pos":[3186,3270],"content":"[!NOTE]\n You cannot set or get this property when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"You cannot set or get this property when a window is hosted in a browser.","pos":[9,82]}]},{"pos":[3331,3362],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[3383,3399],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[3400,3441],"content":"<xref:System.Windows.Window.IconProperty>","nodes":[]},{"pos":[3446,3479],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[3480,3484],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[89742,93266],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Windows.Media.ImageSource\"></xref> object that represents the icon.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.ImageSource\"&gt;&lt;/xref&gt;</ph> object that represents the icon.","source":"An <xref href=\"System.Windows.Media.ImageSource\"></xref> object that represents the icon."}],"pos":[94050,94140],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Window.Icon\"></xref> dependency property.","nodes":[{"pos":[0,83],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.Icon\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Window.Icon\"></xref> dependency property."}],"pos":[95122,95206],"yaml":true},{"content":"Gets a value that indicates whether the window is active.","nodes":[{"pos":[0,57],"content":"Gets a value that indicates whether the window is active.","nodes":[{"content":"Gets a value that indicates whether the window is active.","pos":[0,57]}]}],"pos":[96237,96295],"yaml":true},{"content":"An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar. An active window will also be the top-most of all top-level windows that don't explicitly set the <xref:System.Windows.Window.Topmost%2A> property.  \n  \n<a name=\"dependencyPropertyInfo_WindowIsActive\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Window.IsActiveProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,285],"content":"An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar. An active window will also be the top-most of all top-level windows that don't explicitly set the <xref:System.Windows.Window.Topmost%2A> property.","nodes":[{"content":"An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar. An active window will also be the top-most of all top-level windows that don't explicitly set the <xref:System.Windows.Window.Topmost%2A> property.","pos":[0,285],"nodes":[{"content":"An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar.","pos":[0,137]},{"content":"An active window will also be the top-most of all top-level windows that don't explicitly set the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property.","pos":[138,285],"source":" An active window will also be the top-most of all top-level windows that don't explicitly set the <xref:System.Windows.Window.Topmost%2A> property."}]}]},{"pos":[350,381],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[402,418],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[419,464],"content":"<xref:System.Windows.Window.IsActiveProperty>","nodes":[]},{"pos":[469,502],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[503,507],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[96306,96827],"yaml":true,"extradata":"MT"},{"content":"`true` if the window is active; otherwise, `false`. The default is `false`.","nodes":[{"pos":[0,75],"content":"`true` if the window is active; otherwise, `false`. The default is `false`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the window is active; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,51],"source":"`true` if the window is active; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`false`</ph>.","pos":[52,75],"source":" The default is `false`."}]}],"pos":[96938,97016],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Window.IsActive\"></xref> dependency property.","nodes":[{"pos":[0,87],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.IsActive\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Window.IsActive\"></xref> dependency property."}],"pos":[97962,98050],"yaml":true},{"content":"Gets or sets the position of the window's left edge, in relation to the desktop.","nodes":[{"pos":[0,80],"content":"Gets or sets the position of the window's left edge, in relation to the desktop.","nodes":[{"content":"Gets or sets the position of the window's left edge, in relation to the desktop.","pos":[0,80]}]}],"pos":[99061,99142],"yaml":true},{"content":"When the <xref:System.Windows.Window> is maximized or minimized, this value represents the left edge of the restore point for the <xref:System.Windows.Window>.  \n  \n This property cannot be set through a style.  \n  \n If you do not specify a value, <xref:System.Windows.Window.Left%2A> is set to the system default value. You can also specify the system default value by setting <xref:System.Windows.Window.Left%2A> to <xref:System.Double.NaN>. Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Left%2A>.  \n  \n> [!NOTE]\n>  You cannot set or get this property when a window is hosted in a browser.  \n  \n<a name=\"dependencyPropertyInfo_WindowLeft\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Window.LeftProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,159],"content":"When the <xref:System.Windows.Window> is maximized or minimized, this value represents the left edge of the restore point for the <xref:System.Windows.Window>.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> is maximized or minimized, this value represents the left edge of the restore point for the <ph id=\"ph2\">&lt;xref:System.Windows.Window&gt;</ph>.","pos":[0,159],"source":"When the <xref:System.Windows.Window> is maximized or minimized, this value represents the left edge of the restore point for the <xref:System.Windows.Window>."}]},{"pos":[166,210],"content":"This property cannot be set through a style.","nodes":[{"content":"This property cannot be set through a style.","pos":[0,44]}]},{"pos":[217,590],"content":"If you do not specify a value, <xref:System.Windows.Window.Left%2A> is set to the system default value. You can also specify the system default value by setting <xref:System.Windows.Window.Left%2A> to <xref:System.Double.NaN>. Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Left%2A>.","nodes":[{"content":"If you do not specify a value, <xref:System.Windows.Window.Left%2A> is set to the system default value. You can also specify the system default value by setting <xref:System.Windows.Window.Left%2A> to <xref:System.Double.NaN>. Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Left%2A>.","pos":[0,373],"nodes":[{"content":"If you do not specify a value, <ph id=\"ph1\">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> is set to the system default value.","pos":[0,103],"source":"If you do not specify a value, <xref:System.Windows.Window.Left%2A> is set to the system default value."},{"content":"You can also specify the system default value by setting <ph id=\"ph1\">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> to <ph id=\"ph2\">&lt;xref:System.Double.NaN&gt;</ph>.","pos":[104,226],"source":" You can also specify the system default value by setting <xref:System.Windows.Window.Left%2A> to <xref:System.Double.NaN>."},{"content":"Neither <ph id=\"ph1\">&lt;xref:System.Double.NegativeInfinity&gt;</ph> nor <ph id=\"ph2\">&lt;xref:System.Double.PositiveInfinity&gt;</ph> is a valid value for <ph id=\"ph3\">&lt;xref:System.Windows.Window.Left%2A&gt;</ph>.","pos":[227,373],"source":" Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Left%2A>."}]}]},{"pos":[598,682],"content":"[!NOTE]\n You cannot set or get this property when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"You cannot set or get this property when a window is hosted in a browser.","pos":[9,82]}]},{"pos":[743,774],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[795,811],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[812,853],"content":"<xref:System.Windows.Window.LeftProperty>","nodes":[]},{"pos":[858,891],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[892,896],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[99153,100070],"yaml":true,"extradata":"MT"},{"content":"The position of the window's left edge, in logical units (1/96th of an inch).","nodes":[{"pos":[0,77],"content":"The position of the window's left edge, in logical units (1/96th of an inch).","nodes":[{"content":"The position of the window's left edge, in logical units (1/96th of an inch).","pos":[0,77]}]}],"pos":[100374,100452],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Window.Left\"></xref> dependency property.","nodes":[{"pos":[0,83],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.Left\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Window.Left\"></xref> dependency property."}],"pos":[101439,101523],"yaml":true},{"content":"Occurs when the window's location changes.","nodes":[{"pos":[0,42],"content":"Occurs when the window's location changes.","nodes":[{"content":"Occurs when the window's location changes.","pos":[0,42]}]}],"pos":[102593,102636],"yaml":true},{"content":"A window's location changes when:  \n  \n-   A user moves a window by dragging it with the window's title bar.  \n  \n-   A window is moved after <xref:System.Windows.Window.DragMove%2A> is called.  \n  \n-   Either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> property is set programmatically.  \n  \n-   The **Move** menu item of a window's System menu is chosen.  \n  \n-   The <xref:System.Windows.Window.WindowState%2A> property is changed.","nodes":[{"pos":[0,33],"content":"A window's location changes when:","nodes":[{"content":"A window's location changes when:","pos":[0,33]}]},{"pos":[43,108],"content":"A user moves a window by dragging it with the window's title bar.","nodes":[{"content":"A user moves a window by dragging it with the window's title bar.","pos":[0,65]}]},{"pos":[118,193],"content":"A window is moved after <xref:System.Windows.Window.DragMove%2A> is called.","nodes":[{"content":"A window is moved after <ph id=\"ph1\">&lt;xref:System.Windows.Window.DragMove%2A&gt;</ph> is called.","pos":[0,75],"source":"A window is moved after <xref:System.Windows.Window.DragMove%2A> is called."}]},{"pos":[203,323],"content":"Either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> property is set programmatically.","nodes":[{"content":"Either the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> property is set programmatically.","pos":[0,120],"source":"Either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> property is set programmatically."}]},{"pos":[333,392],"content":"The <bpt id=\"p1\">**</bpt>Move<ept id=\"p1\">**</ept> menu item of a window's System menu is chosen.","source":"The **Move** menu item of a window's System menu is chosen."},{"pos":[402,470],"content":"The <xref:System.Windows.Window.WindowState%2A> property is changed.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property is changed.","pos":[0,68],"source":"The <xref:System.Windows.Window.WindowState%2A> property is changed."}]}],"pos":[102647,103130],"yaml":true,"extradata":"MT"},{"content":"Gets an enumerator for a window's logical child elements.","nodes":[{"pos":[0,57],"content":"Gets an enumerator for a window's logical child elements.","nodes":[{"content":"Gets an enumerator for a window's logical child elements.","pos":[0,57]}]}],"pos":[104161,104219],"yaml":true},{"content":"An <xref href=\"System.Collections.IEnumerator\"></xref> a window's logical child elements.","nodes":[{"pos":[0,89],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> a window's logical child elements.","source":"An <xref href=\"System.Collections.IEnumerator\"></xref> a window's logical child elements."}],"pos":[104391,104481],"yaml":true},{"content":"Override this method to measure the size of a window.","nodes":[{"pos":[0,53],"content":"Override this method to measure the size of a window.","nodes":[{"content":"Override this method to measure the size of a window.","pos":[0,53]}]}],"pos":[105510,105564],"yaml":true},{"content":"<xref:System.Windows.Window.MeasureOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>. If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> is called.  \n  \n> [!NOTE]\n>  When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.","nodes":[{"pos":[0,413],"content":"<xref:System.Windows.Window.MeasureOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>. If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> is called.","nodes":[{"content":"<xref:System.Windows.Window.MeasureOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>. If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> is called.","pos":[0,413],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> is not called when the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property has a value of <ph id=\"ph3\">&lt;xref:System.Windows.Visibility.Collapsed&gt;</ph>.","pos":[0,184],"source":"<xref:System.Windows.Window.MeasureOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>."},{"content":"If the value of the <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property is either <ph id=\"ph2\">&lt;xref:System.Windows.Visibility.Hidden&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Window.MeasureOverride%2A&gt;</ph> is called.","pos":[185,413],"source":" If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> is called."}]}]},{"pos":[421,683],"content":"[!NOTE]\n When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.","leadings":["","> "],"nodes":[{"content":"When either <ph id=\"ph1\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are called, the <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of a <ph id=\"ph4\">&lt;xref:System.Windows.Window&gt;</ph> is set to <ph id=\"ph5\">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.","pos":[9,260],"source":" When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>."}]}],"pos":[105575,106264],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Size\"></xref> that reflects the available size that this window can give to the child. Infinity can be given as a value to indicate that the window will size to whatever content is available.","nodes":[{"pos":[0,220],"content":"A <xref href=\"System.Windows.Size\"></xref> that reflects the available size that this window can give to the child. Infinity can be given as a value to indicate that the window will size to whatever content is available.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Size\"&gt;&lt;/xref&gt;</ph> that reflects the available size that this window can give to the child.","pos":[0,115],"source":"A <xref href=\"System.Windows.Size\"></xref> that reflects the available size that this window can give to the child."},{"content":"Infinity can be given as a value to indicate that the window will size to whatever content is available.","pos":[116,220]}]}],"pos":[106470,106691],"yaml":true},{"content":"A <xref href=\"System.Windows.Size\"></xref> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.","nodes":[{"pos":[0,164],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Size\"&gt;&lt;/xref&gt;</ph> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.","source":"A <xref href=\"System.Windows.Size\"></xref> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes."}],"pos":[106754,106919],"yaml":true},{"content":"Raises the <xref href=\"System.Windows.Window.Activated\"></xref> event.","nodes":[{"pos":[0,70],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.Activated\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Windows.Window.Activated\"></xref> event."}],"pos":[107930,108001],"yaml":true},{"content":"<xref:System.Windows.Window.OnActivated%2A> raises the <xref:System.Windows.Window.Activated> event.  \n  \n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnActivated%2A>. The overridden method must call <xref:System.Windows.Window.OnActivated%2A> on the base class if <xref:System.Windows.Window.Activated> needs to be raised.","nodes":[{"pos":[0,100],"content":"<xref:System.Windows.Window.OnActivated%2A> raises the <xref:System.Windows.Window.Activated> event.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> raises the <ph id=\"ph2\">&lt;xref:System.Windows.Window.Activated&gt;</ph> event.","pos":[0,100],"source":"<xref:System.Windows.Window.OnActivated%2A> raises the <xref:System.Windows.Window.Activated> event."}]},{"pos":[107,374],"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnActivated%2A>. The overridden method must call <xref:System.Windows.Window.OnActivated%2A> on the base class if <xref:System.Windows.Window.Activated> needs to be raised.","nodes":[{"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnActivated%2A>. The overridden method must call <xref:System.Windows.Window.OnActivated%2A> on the base class if <xref:System.Windows.Window.Activated> needs to be raised.","pos":[0,267],"nodes":[{"content":"A type that derives from <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id=\"ph2\">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph>.","pos":[0,111],"source":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnActivated%2A>."},{"content":"The overridden method must call <ph id=\"ph1\">&lt;xref:System.Windows.Window.OnActivated%2A&gt;</ph> on the base class if <ph id=\"ph2\">&lt;xref:System.Windows.Window.Activated&gt;</ph> needs to be raised.","pos":[112,267],"source":" The overridden method must call <xref:System.Windows.Window.OnActivated%2A> on the base class if <xref:System.Windows.Window.Activated> needs to be raised."}]}]}],"pos":[108012,108391],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.EventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,70],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.EventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"An <xref href=\"System.EventArgs\"></xref> that contains the event data."}],"pos":[108540,108611],"yaml":true},{"content":"Raises the <xref href=\"System.Windows.Window.Closed\"></xref> event.","nodes":[{"pos":[0,67],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.Closed\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Windows.Window.Closed\"></xref> event."}],"pos":[109600,109668],"yaml":true},{"content":"<xref:System.Windows.Window.OnClosed%2A> raises the <xref:System.Windows.Window.Closed> event.  \n  \n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosed%2A>. The overridden method must call <xref:System.Windows.Window.OnClosed%2A> on the base class if <xref:System.Windows.Window.Closed> needs to be raised.","nodes":[{"pos":[0,94],"content":"<xref:System.Windows.Window.OnClosed%2A> raises the <xref:System.Windows.Window.Closed> event.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> raises the <ph id=\"ph2\">&lt;xref:System.Windows.Window.Closed&gt;</ph> event.","pos":[0,94],"source":"<xref:System.Windows.Window.OnClosed%2A> raises the <xref:System.Windows.Window.Closed> event."}]},{"pos":[101,359],"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosed%2A>. The overridden method must call <xref:System.Windows.Window.OnClosed%2A> on the base class if <xref:System.Windows.Window.Closed> needs to be raised.","nodes":[{"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosed%2A>. The overridden method must call <xref:System.Windows.Window.OnClosed%2A> on the base class if <xref:System.Windows.Window.Closed> needs to be raised.","pos":[0,258],"nodes":[{"content":"A type that derives from <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id=\"ph2\">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph>.","pos":[0,108],"source":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosed%2A>."},{"content":"The overridden method must call <ph id=\"ph1\">&lt;xref:System.Windows.Window.OnClosed%2A&gt;</ph> on the base class if <ph id=\"ph2\">&lt;xref:System.Windows.Window.Closed&gt;</ph> needs to be raised.","pos":[109,258],"source":" The overridden method must call <xref:System.Windows.Window.OnClosed%2A> on the base class if <xref:System.Windows.Window.Closed> needs to be raised."}]}]}],"pos":[109679,110043],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.EventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,70],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.EventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"An <xref href=\"System.EventArgs\"></xref> that contains the event data."}],"pos":[110189,110260],"yaml":true},{"content":"Raises the <xref href=\"System.Windows.Window.Closing\"></xref> event.","nodes":[{"pos":[0,68],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.Closing\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Windows.Window.Closing\"></xref> event."}],"pos":[111333,111402],"yaml":true},{"content":"<xref:System.Windows.Window.OnClosing%2A> raises the <xref:System.Windows.Window.Closing> event.  \n  \n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosing%2A>. The overridden method must call <xref:System.Windows.Window.OnClosing%2A> on the base class if <xref:System.Windows.Window.Closing> needs to be raised.","nodes":[{"pos":[0,96],"content":"<xref:System.Windows.Window.OnClosing%2A> raises the <xref:System.Windows.Window.Closing> event.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> raises the <ph id=\"ph2\">&lt;xref:System.Windows.Window.Closing&gt;</ph> event.","pos":[0,96],"source":"<xref:System.Windows.Window.OnClosing%2A> raises the <xref:System.Windows.Window.Closing> event."}]},{"pos":[103,364],"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosing%2A>. The overridden method must call <xref:System.Windows.Window.OnClosing%2A> on the base class if <xref:System.Windows.Window.Closing> needs to be raised.","nodes":[{"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosing%2A>. The overridden method must call <xref:System.Windows.Window.OnClosing%2A> on the base class if <xref:System.Windows.Window.Closing> needs to be raised.","pos":[0,261],"nodes":[{"content":"A type that derives from <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id=\"ph2\">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph>.","pos":[0,109],"source":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosing%2A>."},{"content":"The overridden method must call <ph id=\"ph1\">&lt;xref:System.Windows.Window.OnClosing%2A&gt;</ph> on the base class if <ph id=\"ph2\">&lt;xref:System.Windows.Window.Closing&gt;</ph> needs to be raised.","pos":[110,261],"source":" The overridden method must call <xref:System.Windows.Window.OnClosing%2A> on the base class if <xref:System.Windows.Window.Closing> needs to be raised."}]}]}],"pos":[111413,111782],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.ComponentModel.CancelEventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,90],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.ComponentModel.CancelEventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"A <xref href=\"System.ComponentModel.CancelEventArgs\"></xref> that contains the event data."}],"pos":[111978,112069],"yaml":true},{"content":"Called when the <xref href=\"System.Windows.Controls.ContentControl.Content\"></xref> property changes.","nodes":[{"pos":[0,101],"content":"Called when the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Controls.ContentControl.Content\"&gt;&lt;/xref&gt;</ph> property changes.","source":"Called when the <xref href=\"System.Windows.Controls.ContentControl.Content\"></xref> property changes."}],"pos":[113152,113254],"yaml":true},{"content":"A reference to the root of the old content tree.","nodes":[{"pos":[0,48],"content":"A reference to the root of the old content tree.","nodes":[{"content":"A reference to the root of the old content tree.","pos":[0,48]}]}],"pos":[113440,113489],"yaml":true},{"content":"A reference to the root of the new content tree.","nodes":[{"pos":[0,48],"content":"A reference to the root of the new content tree.","nodes":[{"content":"A reference to the root of the new content tree.","pos":[0,48]}]}],"pos":[113555,113604],"yaml":true},{"content":"Raises the <xref href=\"System.Windows.Window.ContentRendered\"></xref> event.","nodes":[{"pos":[0,76],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.ContentRendered\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Windows.Window.ContentRendered\"></xref> event."}],"pos":[114630,114707],"yaml":true},{"content":"<xref:System.Windows.Window.OnContentRendered%2A> raises the <xref:System.Windows.Window.ContentRendered> event.  \n  \n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnContentRendered%2A>. The overridden method must call <xref:System.Windows.Window.OnContentRendered%2A> on the base class if <xref:System.Windows.Window.ContentRendered> needs to be raised.","nodes":[{"pos":[0,112],"content":"<xref:System.Windows.Window.OnContentRendered%2A> raises the <xref:System.Windows.Window.ContentRendered> event.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> raises the <ph id=\"ph2\">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> event.","pos":[0,112],"source":"<xref:System.Windows.Window.OnContentRendered%2A> raises the <xref:System.Windows.Window.ContentRendered> event."}]},{"pos":[119,404],"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnContentRendered%2A>. The overridden method must call <xref:System.Windows.Window.OnContentRendered%2A> on the base class if <xref:System.Windows.Window.ContentRendered> needs to be raised.","nodes":[{"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnContentRendered%2A>. The overridden method must call <xref:System.Windows.Window.OnContentRendered%2A> on the base class if <xref:System.Windows.Window.ContentRendered> needs to be raised.","pos":[0,285],"nodes":[{"content":"A type that derives from <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id=\"ph2\">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph>.","pos":[0,117],"source":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnContentRendered%2A>."},{"content":"The overridden method must call <ph id=\"ph1\">&lt;xref:System.Windows.Window.OnContentRendered%2A&gt;</ph> on the base class if <ph id=\"ph2\">&lt;xref:System.Windows.Window.ContentRendered&gt;</ph> needs to be raised.","pos":[118,285],"source":" The overridden method must call <xref:System.Windows.Window.OnContentRendered%2A> on the base class if <xref:System.Windows.Window.ContentRendered> needs to be raised."}]}]}],"pos":[114718,115127],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.EventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,70],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.EventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"An <xref href=\"System.EventArgs\"></xref> that contains the event data."}],"pos":[115282,115353],"yaml":true},{"content":"Creates and returns a <xref href=\"System.Windows.Automation.Peers.WindowAutomationPeer\"></xref> object for this <xref href=\"System.Windows.Window\"></xref>.","nodes":[{"pos":[0,155],"content":"Creates and returns a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Automation.Peers.WindowAutomationPeer\"&gt;&lt;/xref&gt;</ph> object for this <ph id=\"ph2\">&lt;xref href=\"System.Windows.Window\"&gt;&lt;/xref&gt;</ph>.","source":"Creates and returns a <xref href=\"System.Windows.Automation.Peers.WindowAutomationPeer\"></xref> object for this <xref href=\"System.Windows.Window\"></xref>."}],"pos":[116351,116507],"yaml":true},{"content":"This method overrides <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.","nodes":[{"pos":[0,85],"content":"This method overrides <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.","nodes":[{"content":"This method overrides <ph id=\"ph1\">&lt;xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A&gt;</ph>.","pos":[0,85],"source":"This method overrides <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>."}]}],"pos":[116518,116604],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Automation.Peers.WindowAutomationPeer\"></xref> object for this <xref href=\"System.Windows.Window\"></xref>.","nodes":[{"pos":[0,135],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Automation.Peers.WindowAutomationPeer\"&gt;&lt;/xref&gt;</ph> object for this <ph id=\"ph2\">&lt;xref href=\"System.Windows.Window\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Windows.Automation.Peers.WindowAutomationPeer\"></xref> object for this <xref href=\"System.Windows.Window\"></xref>."}],"pos":[116829,116965],"yaml":true},{"content":"Raises the <xref href=\"System.Windows.Window.Deactivated\"></xref> event.","nodes":[{"pos":[0,72],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.Deactivated\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Windows.Window.Deactivated\"></xref> event."}],"pos":[117995,118068],"yaml":true},{"content":"<xref:System.Windows.Window.OnDeactivated%2A> raises the <xref:System.Windows.Window.Deactivated> event.  \n  \n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnDeactivated%2A>. The overridden method must call <xref:System.Windows.Window.OnDeactivated%2A> on the base class if <xref:System.Windows.Window.Deactivated> needs to be raised.","nodes":[{"pos":[0,104],"content":"<xref:System.Windows.Window.OnDeactivated%2A> raises the <xref:System.Windows.Window.Deactivated> event.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> raises the <ph id=\"ph2\">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> event.","pos":[0,104],"source":"<xref:System.Windows.Window.OnDeactivated%2A> raises the <xref:System.Windows.Window.Deactivated> event."}]},{"pos":[111,384],"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnDeactivated%2A>. The overridden method must call <xref:System.Windows.Window.OnDeactivated%2A> on the base class if <xref:System.Windows.Window.Deactivated> needs to be raised.","nodes":[{"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnDeactivated%2A>. The overridden method must call <xref:System.Windows.Window.OnDeactivated%2A> on the base class if <xref:System.Windows.Window.Deactivated> needs to be raised.","pos":[0,273],"nodes":[{"content":"A type that derives from <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id=\"ph2\">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph>.","pos":[0,113],"source":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnDeactivated%2A>."},{"content":"The overridden method must call <ph id=\"ph1\">&lt;xref:System.Windows.Window.OnDeactivated%2A&gt;</ph> on the base class if <ph id=\"ph2\">&lt;xref:System.Windows.Window.Deactivated&gt;</ph> needs to be raised.","pos":[114,273],"source":" The overridden method must call <xref:System.Windows.Window.OnDeactivated%2A> on the base class if <xref:System.Windows.Window.Deactivated> needs to be raised."}]}]}],"pos":[118079,118468],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.EventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,70],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.EventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"An <xref href=\"System.EventArgs\"></xref> that contains the event data."}],"pos":[118619,118690],"yaml":true},{"content":"Called when the DPI at which this window is rendered changes.","nodes":[{"pos":[0,61],"content":"Called when the DPI at which this window is rendered changes.","nodes":[{"content":"Called when the DPI at which this window is rendered changes.","pos":[0,61]}]}],"pos":[119825,119887],"yaml":true},{"content":"The previous DPI scale setting.","nodes":[{"pos":[0,31],"content":"The previous DPI scale setting.","nodes":[{"content":"The previous DPI scale setting.","pos":[0,31]}]}],"pos":[120101,120133],"yaml":true},{"content":"The new DPI scale setting.","nodes":[{"pos":[0,26],"content":"The new DPI scale setting.","nodes":[{"content":"The new DPI scale setting.","pos":[0,26]}]}],"pos":[120205,120232],"yaml":true},{"content":"Raises the <xref href=\"System.Windows.Window.LocationChanged\"></xref> event.","nodes":[{"pos":[0,76],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.LocationChanged\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Windows.Window.LocationChanged\"></xref> event."}],"pos":[121054,121131],"yaml":true},{"content":"<xref:System.Windows.Window.OnLocationChanged%2A> raises the <xref:System.Windows.Window.LocationChanged> event.  \n  \n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnLocationChanged%2A>. The overridden method must call <xref:System.Windows.Window.OnLocationChanged%2A> on the base class if <xref:System.Windows.Window.LocationChanged> needs to be raised.","nodes":[{"pos":[0,112],"content":"<xref:System.Windows.Window.OnLocationChanged%2A> raises the <xref:System.Windows.Window.LocationChanged> event.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> raises the <ph id=\"ph2\">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> event.","pos":[0,112],"source":"<xref:System.Windows.Window.OnLocationChanged%2A> raises the <xref:System.Windows.Window.LocationChanged> event."}]},{"pos":[119,404],"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnLocationChanged%2A>. The overridden method must call <xref:System.Windows.Window.OnLocationChanged%2A> on the base class if <xref:System.Windows.Window.LocationChanged> needs to be raised.","nodes":[{"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnLocationChanged%2A>. The overridden method must call <xref:System.Windows.Window.OnLocationChanged%2A> on the base class if <xref:System.Windows.Window.LocationChanged> needs to be raised.","pos":[0,285],"nodes":[{"content":"A type that derives from <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id=\"ph2\">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph>.","pos":[0,117],"source":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnLocationChanged%2A>."},{"content":"The overridden method must call <ph id=\"ph1\">&lt;xref:System.Windows.Window.OnLocationChanged%2A&gt;</ph> on the base class if <ph id=\"ph2\">&lt;xref:System.Windows.Window.LocationChanged&gt;</ph> needs to be raised.","pos":[118,285],"source":" The overridden method must call <xref:System.Windows.Window.OnLocationChanged%2A> on the base class if <xref:System.Windows.Window.LocationChanged> needs to be raised."}]}]}],"pos":[121142,121551],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.EventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,70],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.EventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"An <xref href=\"System.EventArgs\"></xref> that contains the event data."}],"pos":[121706,121777],"yaml":true},{"content":"Called when the <xref href=\"System.Windows.UIElement.ManipulationBoundaryFeedback\"></xref> event occurs.","nodes":[{"pos":[0,104],"content":"Called when the <ph id=\"ph1\">&lt;xref href=\"System.Windows.UIElement.ManipulationBoundaryFeedback\"&gt;&lt;/xref&gt;</ph> event occurs.","source":"Called when the <xref href=\"System.Windows.UIElement.ManipulationBoundaryFeedback\"></xref> event occurs."}],"pos":[123114,123219],"yaml":true},{"content":"This implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event data.","nodes":[{"pos":[0,197],"content":"This implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event data.","nodes":[{"content":"This implementation does not change the handled state (the <ph id=\"ph1\">&lt;xref:System.Windows.RoutedEventArgs.Handled%2A&gt;</ph> property) of the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.ManipulationBoundaryFeedback&gt;</ph> event data.","pos":[0,197],"source":"This implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event data."}]}],"pos":[123230,123428],"yaml":true,"extradata":"MT"},{"content":"The data for the event.","nodes":[{"pos":[0,23],"content":"The data for the event.","nodes":[{"content":"The data for the event.","pos":[0,23]}]}],"pos":[123688,123712],"yaml":true},{"content":"Raises the <xref href=\"System.Windows.Window.SourceInitialized\"></xref> event.","nodes":[{"pos":[0,78],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.SourceInitialized\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Windows.Window.SourceInitialized\"></xref> event."}],"pos":[124786,124865],"yaml":true},{"content":"<xref:System.Windows.Window.OnSourceInitialized%2A> raises the <xref:System.Windows.Window.SourceInitialized> event.  \n  \n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnSourceInitialized%2A>. The overridden method must call <xref:System.Windows.Window.OnSourceInitialized%2A> on the base class if <xref:System.Windows.Window.SourceInitialized> needs to be raised.","nodes":[{"pos":[0,116],"content":"<xref:System.Windows.Window.OnSourceInitialized%2A> raises the <xref:System.Windows.Window.SourceInitialized> event.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> raises the <ph id=\"ph2\">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> event.","pos":[0,116],"source":"<xref:System.Windows.Window.OnSourceInitialized%2A> raises the <xref:System.Windows.Window.SourceInitialized> event."}]},{"pos":[123,414],"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnSourceInitialized%2A>. The overridden method must call <xref:System.Windows.Window.OnSourceInitialized%2A> on the base class if <xref:System.Windows.Window.SourceInitialized> needs to be raised.","nodes":[{"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnSourceInitialized%2A>. The overridden method must call <xref:System.Windows.Window.OnSourceInitialized%2A> on the base class if <xref:System.Windows.Window.SourceInitialized> needs to be raised.","pos":[0,291],"nodes":[{"content":"A type that derives from <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id=\"ph2\">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph>.","pos":[0,119],"source":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnSourceInitialized%2A>."},{"content":"The overridden method must call <ph id=\"ph1\">&lt;xref:System.Windows.Window.OnSourceInitialized%2A&gt;</ph> on the base class if <ph id=\"ph2\">&lt;xref:System.Windows.Window.SourceInitialized&gt;</ph> needs to be raised.","pos":[120,291],"source":" The overridden method must call <xref:System.Windows.Window.OnSourceInitialized%2A> on the base class if <xref:System.Windows.Window.SourceInitialized> needs to be raised."}]}]}],"pos":[124876,125295],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.EventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,70],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.EventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"An <xref href=\"System.EventArgs\"></xref> that contains the event data."}],"pos":[125452,125523],"yaml":true},{"content":"Raises the <xref href=\"System.Windows.Window.StateChanged\"></xref> event.","nodes":[{"pos":[0,73],"content":"Raises the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.StateChanged\"&gt;&lt;/xref&gt;</ph> event.","source":"Raises the <xref href=\"System.Windows.Window.StateChanged\"></xref> event."}],"pos":[126534,126608],"yaml":true},{"content":"<xref:System.Windows.Window.OnStateChanged%2A> raises the <xref:System.Windows.Window.StateChanged> event.  \n  \n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnStateChanged%2A>. The overridden method must call <xref:System.Windows.Window.OnStateChanged%2A> on the base class if <xref:System.Windows.Window.StateChanged> needs to be raised.","nodes":[{"pos":[0,106],"content":"<xref:System.Windows.Window.OnStateChanged%2A> raises the <xref:System.Windows.Window.StateChanged> event.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> raises the <ph id=\"ph2\">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> event.","pos":[0,106],"source":"<xref:System.Windows.Window.OnStateChanged%2A> raises the <xref:System.Windows.Window.StateChanged> event."}]},{"pos":[113,389],"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnStateChanged%2A>. The overridden method must call <xref:System.Windows.Window.OnStateChanged%2A> on the base class if <xref:System.Windows.Window.StateChanged> needs to be raised.","nodes":[{"content":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnStateChanged%2A>. The overridden method must call <xref:System.Windows.Window.OnStateChanged%2A> on the base class if <xref:System.Windows.Window.StateChanged> needs to be raised.","pos":[0,276],"nodes":[{"content":"A type that derives from <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> may override <ph id=\"ph2\">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph>.","pos":[0,114],"source":"A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnStateChanged%2A>."},{"content":"The overridden method must call <ph id=\"ph1\">&lt;xref:System.Windows.Window.OnStateChanged%2A&gt;</ph> on the base class if <ph id=\"ph2\">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> needs to be raised.","pos":[115,276],"source":" The overridden method must call <xref:System.Windows.Window.OnStateChanged%2A> on the base class if <xref:System.Windows.Window.StateChanged> needs to be raised."}]}]}],"pos":[126619,127013],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.EventArgs\"></xref> that contains the event data.","nodes":[{"pos":[0,70],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.EventArgs\"&gt;&lt;/xref&gt;</ph> that contains the event data.","source":"An <xref href=\"System.EventArgs\"></xref> that contains the event data."}],"pos":[127165,127236],"yaml":true},{"content":"Called when the parent of the window is changed.","nodes":[{"pos":[0,48],"content":"Called when the parent of the window is changed.","nodes":[{"content":"Called when the parent of the window is changed.","pos":[0,48]}]}],"pos":[128372,128421],"yaml":true},{"content":"The previous parent. Set to null if the <xref href=\"System.Windows.DependencyObject\"></xref> did not have a previous parent.","nodes":[{"pos":[0,124],"content":"The previous parent. Set to null if the <xref href=\"System.Windows.DependencyObject\"></xref> did not have a previous parent.","nodes":[{"content":"The previous parent.","pos":[0,20]},{"content":"Set to null if the <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyObject\"&gt;&lt;/xref&gt;</ph> did not have a previous parent.","pos":[21,124],"source":" Set to null if the <xref href=\"System.Windows.DependencyObject\"></xref> did not have a previous parent."}]}],"pos":[128641,128766],"yaml":true},{"content":"Gets a collection of windows for which this window is the owner.","nodes":[{"pos":[0,64],"content":"Gets a collection of windows for which this window is the owner.","nodes":[{"content":"Gets a collection of windows for which this window is the owner.","pos":[0,64]}]}],"pos":[129704,129769],"yaml":true},{"content":"An owned window is one whose <xref:System.Windows.Window.Owner%2A> property is set with a reference to another window, which is known as the owner window. To find all the windows that an owner window owns, you can enumerate <xref:System.Windows.WindowCollection> that is returned by the <xref:System.Windows.Window.OwnedWindows%2A> property.","nodes":[{"pos":[0,341],"content":"An owned window is one whose <xref:System.Windows.Window.Owner%2A> property is set with a reference to another window, which is known as the owner window. To find all the windows that an owner window owns, you can enumerate <xref:System.Windows.WindowCollection> that is returned by the <xref:System.Windows.Window.OwnedWindows%2A> property.","nodes":[{"content":"An owned window is one whose <xref:System.Windows.Window.Owner%2A> property is set with a reference to another window, which is known as the owner window. To find all the windows that an owner window owns, you can enumerate <xref:System.Windows.WindowCollection> that is returned by the <xref:System.Windows.Window.OwnedWindows%2A> property.","pos":[0,341],"nodes":[{"content":"An owned window is one whose <ph id=\"ph1\">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property is set with a reference to another window, which is known as the owner window.","pos":[0,154],"source":"An owned window is one whose <xref:System.Windows.Window.Owner%2A> property is set with a reference to another window, which is known as the owner window."},{"content":"To find all the windows that an owner window owns, you can enumerate <ph id=\"ph1\">&lt;xref:System.Windows.WindowCollection&gt;</ph> that is returned by the <ph id=\"ph2\">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.","pos":[155,341],"source":" To find all the windows that an owner window owns, you can enumerate <xref:System.Windows.WindowCollection> that is returned by the <xref:System.Windows.Window.OwnedWindows%2A> property."}]}]}],"pos":[129780,130122],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.WindowCollection\"></xref> that contains references to the windows for which this window is the owner.","nodes":[{"pos":[0,130],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.WindowCollection\"&gt;&lt;/xref&gt;</ph> that contains references to the windows for which this window is the owner.","source":"A <xref href=\"System.Windows.WindowCollection\"></xref> that contains references to the windows for which this window is the owner."}],"pos":[130807,130938],"yaml":true},{"content":"Gets or sets the <xref href=\"System.Windows.Window\"></xref> that owns this <xref href=\"System.Windows.Window\"></xref>.","nodes":[{"pos":[0,118],"content":"Gets or sets the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window\"&gt;&lt;/xref&gt;</ph> that owns this <ph id=\"ph2\">&lt;xref href=\"System.Windows.Window\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the <xref href=\"System.Windows.Window\"></xref> that owns this <xref href=\"System.Windows.Window\"></xref>."}],"pos":[131825,131944],"yaml":true},{"content":"When a child window is opened by a parent window by calling <xref:System.Windows.Window.ShowDialog%2A>, an implicit relationship is established between both parent and child window. This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.  \n  \n When a child window is created by a parent window by calling <xref:System.Windows.Window.Show%2A>, however, the child window does not have a relationship with the parent window. This means that:  \n  \n-   The child window does not have a reference to the parent window.  \n  \n-   The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.  \n  \n To allow you to create a relationship between a child window and a parent window, <xref:System.Windows.Window> supports the notion of ownership. Ownership is established when the <xref:System.Windows.Window.Owner%2A> property of a window (the owned window) is set with a reference to another window (the owner window).  \n  \n Once this relationship is established, the following behaviors are exhibited:  \n  \n-   If an owner window is minimized, all its owned windows are minimized as well.  \n  \n-   If an owned window is minimized, its owner is not minimized.  \n  \n-   If an owner window is maximized, both the owner window and its owned windows are restored.  \n  \n-   An owner window can never cover an owned window.  \n  \n-   Owned windows that were not opened using <xref:System.Windows.Window.ShowDialog%2A> are not modal. The user can still interact with the owner window.  \n  \n-   If you close an owner window, its owned windows are also closed.  \n  \n-   If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.  \n  \n When you open a child window by calling <xref:System.Windows.Window.ShowDialog%2A>, you should also set the <xref:System.Windows.Window.Owner%2A> property of the child window. If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button. Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.  \n  \n> [!IMPORTANT]\n>  You should also set the <xref:System.Windows.Window.Owner%2A> property on a window that that is opened by calling <xref:System.Windows.Window.ShowDialog%2A> to ensure correct behavior with .  \n  \n> [!NOTE]\n>  You cannot set or get this property when a window is hosted in a browser.","nodes":[{"pos":[0,292],"content":"When a child window is opened by a parent window by calling <xref:System.Windows.Window.ShowDialog%2A>, an implicit relationship is established between both parent and child window. This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.","nodes":[{"content":"When a child window is opened by a parent window by calling <xref:System.Windows.Window.ShowDialog%2A>, an implicit relationship is established between both parent and child window. This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.","pos":[0,292],"nodes":[{"content":"When a child window is opened by a parent window by calling <ph id=\"ph1\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, an implicit relationship is established between both parent and child window.","pos":[0,181],"source":"When a child window is opened by a parent window by calling <xref:System.Windows.Window.ShowDialog%2A>, an implicit relationship is established between both parent and child window."},{"content":"This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.","pos":[182,292]}]}]},{"pos":[299,493],"content":"When a child window is created by a parent window by calling <xref:System.Windows.Window.Show%2A>, however, the child window does not have a relationship with the parent window. This means that:","nodes":[{"content":"When a child window is created by a parent window by calling <xref:System.Windows.Window.Show%2A>, however, the child window does not have a relationship with the parent window. This means that:","pos":[0,194],"nodes":[{"content":"When a child window is created by a parent window by calling <ph id=\"ph1\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, however, the child window does not have a relationship with the parent window.","pos":[0,177],"source":"When a child window is created by a parent window by calling <xref:System.Windows.Window.Show%2A>, however, the child window does not have a relationship with the parent window."},{"content":"This means that:","pos":[178,194]}]}]},{"pos":[503,567],"content":"The child window does not have a reference to the parent window.","nodes":[{"content":"The child window does not have a reference to the parent window.","pos":[0,64]}]},{"pos":[577,768],"content":"The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.","nodes":[{"content":"The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.","pos":[0,191]}]},{"pos":[775,1093],"content":"To allow you to create a relationship between a child window and a parent window, <xref:System.Windows.Window> supports the notion of ownership. Ownership is established when the <xref:System.Windows.Window.Owner%2A> property of a window (the owned window) is set with a reference to another window (the owner window).","nodes":[{"content":"To allow you to create a relationship between a child window and a parent window, <xref:System.Windows.Window> supports the notion of ownership. Ownership is established when the <xref:System.Windows.Window.Owner%2A> property of a window (the owned window) is set with a reference to another window (the owner window).","pos":[0,318],"nodes":[{"content":"To allow you to create a relationship between a child window and a parent window, <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> supports the notion of ownership.","pos":[0,144],"source":"To allow you to create a relationship between a child window and a parent window, <xref:System.Windows.Window> supports the notion of ownership."},{"content":"Ownership is established when the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property of a window (the owned window) is set with a reference to another window (the owner window).","pos":[145,318],"source":" Ownership is established when the <xref:System.Windows.Window.Owner%2A> property of a window (the owned window) is set with a reference to another window (the owner window)."}]}]},{"pos":[1100,1177],"content":"Once this relationship is established, the following behaviors are exhibited:","nodes":[{"content":"Once this relationship is established, the following behaviors are exhibited:","pos":[0,77]}]},{"pos":[1187,1264],"content":"If an owner window is minimized, all its owned windows are minimized as well.","nodes":[{"content":"If an owner window is minimized, all its owned windows are minimized as well.","pos":[0,77]}]},{"pos":[1274,1334],"content":"If an owned window is minimized, its owner is not minimized.","nodes":[{"content":"If an owned window is minimized, its owner is not minimized.","pos":[0,60]}]},{"pos":[1344,1434],"content":"If an owner window is maximized, both the owner window and its owned windows are restored.","nodes":[{"content":"If an owner window is maximized, both the owner window and its owned windows are restored.","pos":[0,90]}]},{"pos":[1444,1492],"content":"An owner window can never cover an owned window.","nodes":[{"content":"An owner window can never cover an owned window.","pos":[0,48]}]},{"pos":[1502,1651],"content":"Owned windows that were not opened using <xref:System.Windows.Window.ShowDialog%2A> are not modal. The user can still interact with the owner window.","nodes":[{"content":"Owned windows that were not opened using <xref:System.Windows.Window.ShowDialog%2A> are not modal. The user can still interact with the owner window.","pos":[0,149],"nodes":[{"content":"Owned windows that were not opened using <ph id=\"ph1\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> are not modal.","pos":[0,98],"source":"Owned windows that were not opened using <xref:System.Windows.Window.ShowDialog%2A> are not modal."},{"content":"The user can still interact with the owner window.","pos":[99,149]}]}]},{"pos":[1661,1725],"content":"If you close an owner window, its owned windows are also closed.","nodes":[{"content":"If you close an owner window, its owned windows are also closed.","pos":[0,64]}]},{"pos":[1735,1937],"content":"If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.","nodes":[{"content":"If an owned window was opened by its owner window using <ph id=\"ph1\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>, and the owner window is closed, the owned window's <ph id=\"ph2\">&lt;xref:System.Windows.Window.Closing&gt;</ph> event is not raised.","pos":[0,202],"source":"If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised."}]},{"pos":[1944,2409],"content":"When you open a child window by calling <xref:System.Windows.Window.ShowDialog%2A>, you should also set the <xref:System.Windows.Window.Owner%2A> property of the child window. If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button. Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.","nodes":[{"content":"When you open a child window by calling <xref:System.Windows.Window.ShowDialog%2A>, you should also set the <xref:System.Windows.Window.Owner%2A> property of the child window. If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button. Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.","pos":[0,465],"nodes":[{"content":"When you open a child window by calling <ph id=\"ph1\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, you should also set the <ph id=\"ph2\">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property of the child window.","pos":[0,175],"source":"When you open a child window by calling <xref:System.Windows.Window.ShowDialog%2A>, you should also set the <xref:System.Windows.Window.Owner%2A> property of the child window."},{"content":"If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button.","pos":[176,299]},{"content":"Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.","pos":[300,465]}]}]},{"pos":[2417,2623],"content":"[!IMPORTANT]\n You should also set the <xref:System.Windows.Window.Owner%2A> property on a window that that is opened by calling <xref:System.Windows.Window.ShowDialog%2A> to ensure correct behavior with .","leadings":["","> "],"nodes":[{"content":"You should also set the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property on a window that that is opened by calling <ph id=\"ph2\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> to ensure correct behavior with .","pos":[14,204],"source":" You should also set the <xref:System.Windows.Window.Owner%2A> property on a window that that is opened by calling <xref:System.Windows.Window.ShowDialog%2A> to ensure correct behavior with ."}]},{"pos":[2631,2715],"content":"[!NOTE]\n You cannot set or get this property when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"You cannot set or get this property when a window is hosted in a browser.","pos":[9,82]}]}],"pos":[131955,134705],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Window\"></xref> object that represents the owner of this <xref href=\"System.Windows.Window\"></xref>.","nodes":[{"pos":[0,129],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window\"&gt;&lt;/xref&gt;</ph> object that represents the owner of this <ph id=\"ph2\">&lt;xref href=\"System.Windows.Window\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Windows.Window\"></xref> object that represents the owner of this <xref href=\"System.Windows.Window\"></xref>."}],"pos":[135427,135557],"yaml":true},{"content":"A window tries to own itself  \n  \n -or-  \n  \n Two windows try to own each other.","nodes":[{"pos":[0,28],"content":"A window tries to own itself","nodes":[{"content":"A window tries to own itself","pos":[0,28]}]},{"pos":[35,39],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[46,80],"content":"Two windows try to own each other.","nodes":[{"content":"Two windows try to own each other.","pos":[0,34]}]}],"pos":[135706,135793],"yaml":true},{"content":"The <xref href=\"System.Windows.Window.Owner\"></xref> property is set on a visible window shown using <xref href=\"System.Windows.Window.ShowDialog\"></xref>  \n  \n -or-  \n  \n The <xref href=\"System.Windows.Window.Owner\"></xref> property is set with a window that has not been previously shown.","nodes":[{"pos":[0,154],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.Owner\"&gt;&lt;/xref&gt;</ph> property is set on a visible window shown using <ph id=\"ph2\">&lt;xref href=\"System.Windows.Window.ShowDialog\"&gt;&lt;/xref&gt;</ph>","source":"The <xref href=\"System.Windows.Window.Owner\"></xref> property is set on a visible window shown using <xref href=\"System.Windows.Window.ShowDialog\"></xref>"},{"pos":[161,165],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[172,290],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.Owner\"&gt;&lt;/xref&gt;</ph> property is set with a window that has not been previously shown.","source":"The <xref href=\"System.Windows.Window.Owner\"></xref> property is set with a window that has not been previously shown."}],"pos":[135903,136206],"yaml":true},{"content":"Gets or sets the resize mode.","nodes":[{"pos":[0,29],"content":"Gets or sets the resize mode.","nodes":[{"content":"Gets or sets the resize mode.","pos":[0,29]}]}],"pos":[137172,137202],"yaml":true},{"content":"There are four options:  \n  \n-   **NoResize**. The user cannot resize the window. The Maximize and Minimize boxes are not shown.  \n  \n-   **CanMinimize**. The user can only minimize the window and restore it from the taskbar. The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.  \n  \n-   **CanResize**. The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window. The Minimize and Maximize boxes are shown and enabled. (Default).  \n  \n-   **CanResizeWithGrip**. This option has the same functionality as <xref:System.Windows.ResizeMode.CanResize>, but adds a \"resize grip\" to the lower right corner of the window.  \n  \n> [!NOTE]\n>  You cannot set or get this property when a window is hosted in a browser.  \n  \n<a name=\"dependencyPropertyInfo_WindowResizeMode\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Window.ResizeModeProperty>|  \n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|","nodes":[{"pos":[0,23],"content":"There are four options:","nodes":[{"content":"There are four options:","pos":[0,23]}]},{"pos":[33,128],"content":"**NoResize**. The user cannot resize the window. The Maximize and Minimize boxes are not shown.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>NoResize<ept id=\"p1\">**</ept>.","pos":[0,13],"source":"**NoResize**."},{"content":"The user cannot resize the window.","pos":[14,48]},{"content":"The Maximize and Minimize boxes are not shown.","pos":[49,95]}]},{"pos":[138,311],"content":"**CanMinimize**. The user can only minimize the window and restore it from the taskbar. The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>CanMinimize<ept id=\"p1\">**</ept>.","pos":[0,16],"source":"**CanMinimize**."},{"content":"The user can only minimize the window and restore it from the taskbar.","pos":[17,87]},{"content":"The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.","pos":[88,173]}]},{"pos":[321,535],"content":"**CanResize**. The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window. The Minimize and Maximize boxes are shown and enabled. (Default).","nodes":[{"content":"<bpt id=\"p1\">**</bpt>CanResize<ept id=\"p1\">**</ept>.","pos":[0,14],"source":"**CanResize**."},{"content":"The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window.","pos":[15,148]},{"content":"The Minimize and Maximize boxes are shown and enabled.","pos":[149,203]},{"content":"(Default).","pos":[204,214]}]},{"pos":[545,719],"content":"**CanResizeWithGrip**. This option has the same functionality as <xref:System.Windows.ResizeMode.CanResize>, but adds a \"resize grip\" to the lower right corner of the window.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>CanResizeWithGrip<ept id=\"p1\">**</ept>.","pos":[0,22],"source":"**CanResizeWithGrip**."},{"content":"This option has the same functionality as <ph id=\"ph1\">&lt;xref:System.Windows.ResizeMode.CanResize&gt;</ph>, but adds a \"resize grip\" to the lower right corner of the window.","pos":[23,174],"source":" This option has the same functionality as <xref:System.Windows.ResizeMode.CanResize>, but adds a \"resize grip\" to the lower right corner of the window."}]},{"pos":[727,811],"content":"[!NOTE]\n You cannot set or get this property when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"You cannot set or get this property when a window is hosted in a browser.","pos":[9,82]}]},{"pos":[878,909],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[930,946],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[947,994],"content":"<xref:System.Windows.Window.ResizeModeProperty>","nodes":[]},{"pos":[999,1032],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1033,1098],"content":"<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>","nodes":[]}],"pos":[137213,138338],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.ResizeMode\"></xref> value specifying the resize mode.","nodes":[{"pos":[0,82],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.ResizeMode\"&gt;&lt;/xref&gt;</ph> value specifying the resize mode.","source":"A <xref href=\"System.Windows.ResizeMode\"></xref> value specifying the resize mode."}],"pos":[138488,138571],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Window.ResizeMode\"></xref> dependency property.","nodes":[{"pos":[0,89],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.ResizeMode\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Window.ResizeMode\"></xref> dependency property."}],"pos":[139531,139621],"yaml":true},{"content":"Gets the size and location of a window before being either minimized or maximized.","nodes":[{"pos":[0,82],"content":"Gets the size and location of a window before being either minimized or maximized.","nodes":[{"content":"Gets the size and location of a window before being either minimized or maximized.","pos":[0,82]}]}],"pos":[140688,140771],"yaml":true},{"content":"The restore rectangle is the region occupied by the window before it was minimized or maximized. You can use <xref:System.Windows.Window.RestoreBounds%2A> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.  \n  \n If you query <xref:System.Windows.Window.RestoreBounds%2A> before the window has been shown or after it has been closed, <xref:System.Windows.Rect.Empty%2A> is returned.  \n  \n> [!NOTE]\n>  You cannot get this property when a window is hosted in a browser.","nodes":[{"pos":[0,343],"content":"The restore rectangle is the region occupied by the window before it was minimized or maximized. You can use <xref:System.Windows.Window.RestoreBounds%2A> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.","nodes":[{"content":"The restore rectangle is the region occupied by the window before it was minimized or maximized. You can use <xref:System.Windows.Window.RestoreBounds%2A> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.","pos":[0,343],"nodes":[{"content":"The restore rectangle is the region occupied by the window before it was minimized or maximized.","pos":[0,96]},{"content":"You can use <ph id=\"ph1\">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.","pos":[97,343],"source":" You can use <xref:System.Windows.Window.RestoreBounds%2A> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it."}]}]},{"pos":[350,519],"content":"If you query <xref:System.Windows.Window.RestoreBounds%2A> before the window has been shown or after it has been closed, <xref:System.Windows.Rect.Empty%2A> is returned.","nodes":[{"content":"If you query <ph id=\"ph1\">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph> before the window has been shown or after it has been closed, <ph id=\"ph2\">&lt;xref:System.Windows.Rect.Empty%2A&gt;</ph> is returned.","pos":[0,169],"source":"If you query <xref:System.Windows.Window.RestoreBounds%2A> before the window has been shown or after it has been closed, <xref:System.Windows.Rect.Empty%2A> is returned."}]},{"pos":[527,604],"content":"[!NOTE]\n You cannot get this property when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"You cannot get this property when a window is hosted in a browser.","pos":[9,75]}]}],"pos":[140782,141394],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Rect\"></xref> that specifies the size and location of a window before being either minimized or maximized.","nodes":[{"pos":[0,135],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Rect\"&gt;&lt;/xref&gt;</ph> that specifies the size and location of a window before being either minimized or maximized.","source":"A <xref href=\"System.Windows.Rect\"></xref> that specifies the size and location of a window before being either minimized or maximized."}],"pos":[143026,143162],"yaml":true},{"content":"Opens a window and returns without waiting for the newly opened window to close.","nodes":[{"pos":[0,80],"content":"Opens a window and returns without waiting for the newly opened window to close.","nodes":[{"content":"Opens a window and returns without waiting for the newly opened window to close.","pos":[0,80]}]}],"pos":[144112,144193],"yaml":true},{"content":"When the <xref:System.Windows.Window> class is instantiated, it is not visible by default. <xref:System.Windows.Window.Show%2A> shows a window and returns immediately, without waiting for the window to be closed. Consequently, the opened window does not prevent users from interacting with other windows in the application. This type of window is called a *modeless* window. Common examples of modeless windows are properties windows, toolboxes, and palettes. To restrict a user to interacting with a specific window, the window must be opened by calling <xref:System.Windows.Window.ShowDialog%2A>.  \n  \n A window that is opened by calling <xref:System.Windows.Window.Show%2A> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it. This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.  \n  \n Calling <xref:System.Windows.Window.Show%2A> achieves the same end result as setting <xref:System.Windows.UIElement.Visibility%2A> property of the <xref:System.Windows.Window> object to <xref:System.Windows.Visibility.Visible>. However, there is a difference between the two from a timing perspective.  \n  \n Calling <xref:System.Windows.Window.Show%2A> is a synchronous operation that returns only after the <xref:System.Windows.FrameworkElement.Loaded> event on the child window has been raised:  \n  \n [!code-csharp[WindowShowTimingSnippets#ShowSync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showsync)]\n [!code-vb[WindowShowTimingSnippets#ShowSync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showsync)]  \n  \n Setting <xref:System.Windows.UIElement.Visibility%2A>, however, is an asynchronous operation that returns immediately:  \n  \n [!code-csharp[WindowShowTimingSnippets#ShowASync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showasync)]\n [!code-vb[WindowShowTimingSnippets#ShowASync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showasync)]  \n  \n When setting <xref:System.Windows.UIElement.Visibility%2A>, any window events you register before you set <xref:System.Windows.UIElement.Visibility%2A> may not be raised until after the method in which you set <xref:System.Windows.UIElement.Visibility%2A> has completed execution.","nodes":[{"pos":[0,598],"content":"When the <xref:System.Windows.Window> class is instantiated, it is not visible by default. <xref:System.Windows.Window.Show%2A> shows a window and returns immediately, without waiting for the window to be closed. Consequently, the opened window does not prevent users from interacting with other windows in the application. This type of window is called a *modeless* window. Common examples of modeless windows are properties windows, toolboxes, and palettes. To restrict a user to interacting with a specific window, the window must be opened by calling <xref:System.Windows.Window.ShowDialog%2A>.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> class is instantiated, it is not visible by default.","pos":[0,90],"source":"When the <xref:System.Windows.Window> class is instantiated, it is not visible by default."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> shows a window and returns immediately, without waiting for the window to be closed.","pos":[91,212],"source":" <xref:System.Windows.Window.Show%2A> shows a window and returns immediately, without waiting for the window to be closed."},{"content":"Consequently, the opened window does not prevent users from interacting with other windows in the application.","pos":[213,323]},{"content":"This type of window is called a <bpt id=\"p1\">*</bpt>modeless<ept id=\"p1\">*</ept> window.","pos":[324,374],"source":" This type of window is called a *modeless* window."},{"content":"Common examples of modeless windows are properties windows, toolboxes, and palettes.","pos":[375,459]},{"content":"To restrict a user to interacting with a specific window, the window must be opened by calling <ph id=\"ph1\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.","pos":[460,598],"source":" To restrict a user to interacting with a specific window, the window must be opened by calling <xref:System.Windows.Window.ShowDialog%2A>."}]},{"pos":[605,992],"content":"A window that is opened by calling <xref:System.Windows.Window.Show%2A> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it. This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.","nodes":[{"content":"A window that is opened by calling <xref:System.Windows.Window.Show%2A> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it. This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.","pos":[0,387],"nodes":[{"content":"A window that is opened by calling <ph id=\"ph1\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.","pos":[0,216],"source":"A window that is opened by calling <xref:System.Windows.Window.Show%2A> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it."},{"content":"This relationship can be established using the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property and managed using the <ph id=\"ph2\">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.","pos":[217,387],"source":" This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property."}]}]},{"pos":[999,1300],"content":"Calling <xref:System.Windows.Window.Show%2A> achieves the same end result as setting <xref:System.Windows.UIElement.Visibility%2A> property of the <xref:System.Windows.Window> object to <xref:System.Windows.Visibility.Visible>. However, there is a difference between the two from a timing perspective.","nodes":[{"content":"Calling <xref:System.Windows.Window.Show%2A> achieves the same end result as setting <xref:System.Windows.UIElement.Visibility%2A> property of the <xref:System.Windows.Window> object to <xref:System.Windows.Visibility.Visible>. However, there is a difference between the two from a timing perspective.","pos":[0,301],"nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> achieves the same end result as setting <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> property of the <ph id=\"ph3\">&lt;xref:System.Windows.Window&gt;</ph> object to <ph id=\"ph4\">&lt;xref:System.Windows.Visibility.Visible&gt;</ph>.","pos":[0,227],"source":"Calling <xref:System.Windows.Window.Show%2A> achieves the same end result as setting <xref:System.Windows.UIElement.Visibility%2A> property of the <xref:System.Windows.Window> object to <xref:System.Windows.Visibility.Visible>."},{"content":"However, there is a difference between the two from a timing perspective.","pos":[228,301]}]}]},{"pos":[1307,1495],"content":"Calling <xref:System.Windows.Window.Show%2A> is a synchronous operation that returns only after the <xref:System.Windows.FrameworkElement.Loaded> event on the child window has been raised:","nodes":[{"content":"Calling <ph id=\"ph1\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph> is a synchronous operation that returns only after the <ph id=\"ph2\">&lt;xref:System.Windows.FrameworkElement.Loaded&gt;</ph> event on the child window has been raised:","pos":[0,188],"source":"Calling <xref:System.Windows.Window.Show%2A> is a synchronous operation that returns only after the <xref:System.Windows.FrameworkElement.Loaded> event on the child window has been raised:"}]},{"pos":[1502,1808],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>WindowShowTimingSnippets#ShowSync<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showsync)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>WindowShowTimingSnippets#ShowSync<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showsync)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[WindowShowTimingSnippets#ShowSync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showsync)]\n [!code-vb[WindowShowTimingSnippets#ShowSync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showsync)]"},{"pos":[1815,1933],"content":"Setting <xref:System.Windows.UIElement.Visibility%2A>, however, is an asynchronous operation that returns immediately:","nodes":[{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, however, is an asynchronous operation that returns immediately:","pos":[0,118],"source":"Setting <xref:System.Windows.UIElement.Visibility%2A>, however, is an asynchronous operation that returns immediately:"}]},{"pos":[1940,2250],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>WindowShowTimingSnippets#ShowASync<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showasync)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>WindowShowTimingSnippets#ShowASync<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showasync)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[WindowShowTimingSnippets#ShowASync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showasync)]\n [!code-vb[WindowShowTimingSnippets#ShowASync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showasync)]"},{"pos":[2257,2537],"content":"When setting <xref:System.Windows.UIElement.Visibility%2A>, any window events you register before you set <xref:System.Windows.UIElement.Visibility%2A> may not be raised until after the method in which you set <xref:System.Windows.UIElement.Visibility%2A> has completed execution.","nodes":[{"content":"When setting <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph>, any window events you register before you set <ph id=\"ph2\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> may not be raised until after the method in which you set <ph id=\"ph3\">&lt;xref:System.Windows.UIElement.Visibility%2A&gt;</ph> has completed execution.","pos":[0,280],"source":"When setting <xref:System.Windows.UIElement.Visibility%2A>, any window events you register before you set <xref:System.Windows.UIElement.Visibility%2A> may not be raised until after the method in which you set <xref:System.Windows.UIElement.Visibility%2A> has completed execution."}]}],"pos":[144204,146760],"yaml":true,"extradata":"MT"},{"content":"<xref href=\"System.Windows.Window.Show\"></xref> is called on a window that is closing (<xref href=\"System.Windows.Window.Closing\"></xref>) or has been closed (<xref href=\"System.Windows.Window.Closed\"></xref>).","nodes":[{"pos":[0,210],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.Show\"&gt;&lt;/xref&gt;</ph> is called on a window that is closing (<ph id=\"ph2\">&lt;xref href=\"System.Windows.Window.Closing\"&gt;&lt;/xref&gt;</ph>) or has been closed (<ph id=\"ph3\">&lt;xref href=\"System.Windows.Window.Closed\"&gt;&lt;/xref&gt;</ph>).","source":"<xref href=\"System.Windows.Window.Show\"></xref> is called on a window that is closing (<xref href=\"System.Windows.Window.Closing\"></xref>) or has been closed (<xref href=\"System.Windows.Window.Closed\"></xref>)."}],"pos":[147391,147602],"yaml":true},{"content":"Gets or sets a value that indicates whether a window is activated when first shown.","nodes":[{"pos":[0,83],"content":"Gets or sets a value that indicates whether a window is activated when first shown.","nodes":[{"content":"Gets or sets a value that indicates whether a window is activated when first shown.","pos":[0,83]}]}],"pos":[148450,148534],"yaml":true},{"content":"When a window with its <xref:System.Windows.Window.ShowActivated%2A> property set to `false` is opened, the window is not activated and its <xref:System.Windows.Window.Activated> event is not raised until a user manually activates the window by selecting it. After the window is selected, it activates and deactivates normally.  \n  \n To prevent a window from being activated when it opens, the <xref:System.Windows.Window.ShowActivated%2A> property must be set to `false` before the window is shown (by calling <xref:System.Windows.Window.Show%2A>); setting <xref:System.Windows.Window.ShowActivated%2A> to `false` after a window is shown has no effect.  \n  \n Setting <xref:System.Windows.Window.ShowActivated%2A> to `false` on a window that is opened modally, by calling <xref:System.Windows.Window.ShowDialog%2A>, has no real impact. Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.  \n  \n<a name=\"dependencyPropertyInfo_WindowShowActivated\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Window.ShowActivatedProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,327],"content":"When a window with its <xref:System.Windows.Window.ShowActivated%2A> property set to `false` is opened, the window is not activated and its <xref:System.Windows.Window.Activated> event is not raised until a user manually activates the window by selecting it. After the window is selected, it activates and deactivates normally.","nodes":[{"content":"When a window with its <ph id=\"ph1\">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> property set to <ph id=\"ph2\">`false`</ph> is opened, the window is not activated and its <ph id=\"ph3\">&lt;xref:System.Windows.Window.Activated&gt;</ph> event is not raised until a user manually activates the window by selecting it.","pos":[0,258],"source":"When a window with its <xref:System.Windows.Window.ShowActivated%2A> property set to `false` is opened, the window is not activated and its <xref:System.Windows.Window.Activated> event is not raised until a user manually activates the window by selecting it."},{"content":"After the window is selected, it activates and deactivates normally.","pos":[259,327]}]},{"pos":[334,653],"content":"To prevent a window from being activated when it opens, the <ph id=\"ph1\">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> property must be set to <ph id=\"ph2\">`false`</ph> before the window is shown (by calling <ph id=\"ph3\">&lt;xref:System.Windows.Window.Show%2A&gt;</ph>); setting <ph id=\"ph4\">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> to <ph id=\"ph5\">`false`</ph> after a window is shown has no effect.","source":"To prevent a window from being activated when it opens, the <xref:System.Windows.Window.ShowActivated%2A> property must be set to `false` before the window is shown (by calling <xref:System.Windows.Window.Show%2A>); setting <xref:System.Windows.Window.ShowActivated%2A> to `false` after a window is shown has no effect."},{"pos":[660,975],"content":"Setting <xref:System.Windows.Window.ShowActivated%2A> to `false` on a window that is opened modally, by calling <xref:System.Windows.Window.ShowDialog%2A>, has no real impact. Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.","nodes":[{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Windows.Window.ShowActivated%2A&gt;</ph> to <ph id=\"ph2\">`false`</ph> on a window that is opened modally, by calling <ph id=\"ph3\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>, has no real impact.","pos":[0,175],"source":"Setting <xref:System.Windows.Window.ShowActivated%2A> to `false` on a window that is opened modally, by calling <xref:System.Windows.Window.ShowDialog%2A>, has no real impact."},{"content":"Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.","pos":[176,315]}]},{"pos":[1045,1076],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[1097,1113],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1114,1164],"content":"<xref:System.Windows.Window.ShowActivatedProperty>","nodes":[]},{"pos":[1169,1202],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1203,1207],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[148545,149770],"yaml":true,"extradata":"MT"},{"content":"`true` if a window is activated when first shown; otherwise, `false`. The default is `true`.","nodes":[{"pos":[0,92],"content":"`true` if a window is activated when first shown; otherwise, `false`. The default is `true`.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if a window is activated when first shown; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,69],"source":"`true` if a window is activated when first shown; otherwise, `false`."},{"content":"The default is <ph id=\"ph1\">`true`</ph>.","pos":[70,92],"source":" The default is `true`."}]}],"pos":[151111,151206],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Window.ShowActivated\"></xref> dependency property.","nodes":[{"pos":[0,92],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.ShowActivated\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Window.ShowActivated\"></xref> dependency property."}],"pos":[152165,152258],"yaml":true},{"content":"Opens a window and returns only when the newly opened window is closed.","nodes":[{"pos":[0,71],"content":"Opens a window and returns only when the newly opened window is closed.","nodes":[{"content":"Opens a window and returns only when the newly opened window is closed.","pos":[0,71]}]}],"pos":[153314,153386],"yaml":true},{"content":"When a <xref:System.Windows.Window> class is instantiated, it is not visible by default. <xref:System.Windows.Window.ShowDialog%2A> shows the window, disables all other windows in the application, and returns only when the window is closed. This type of window is known as a *modal* window.  \n  \n Modal windows are primarily used as dialog boxes. A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents. Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed. <xref:System.Windows.Window.ShowDialog%2A> returns a <xref:System.Nullable%601><xref:System.Boolean> value that specifies whether the activity was accepted or canceled. The return value is the value of the <xref:System.Windows.Window.DialogResult%2A> property before a window closes. For more information, see <xref:System.Windows.Window.DialogResult%2A>.  \n  \n A window that is opened by calling the <xref:System.Windows.Window.ShowDialog%2A> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it. This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property. To support [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] automation (see [UI Automation Overview](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> must be set for a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>.  \n  \n When a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window (a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>) is closed, the previously activated window is reactivated. If a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window has an owner window (see <xref:System.Windows.Window.Owner%2A>), the owner window is not reactivated when the modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window is closed unless it was the previously activated window.  \n  \n> [!NOTE]\n>  This method cannot be called when a window is hosted in a browser.","nodes":[{"pos":[0,290],"content":"When a <xref:System.Windows.Window> class is instantiated, it is not visible by default. <xref:System.Windows.Window.ShowDialog%2A> shows the window, disables all other windows in the application, and returns only when the window is closed. This type of window is known as a *modal* window.","nodes":[{"content":"When a <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> class is instantiated, it is not visible by default.","pos":[0,88],"source":"When a <xref:System.Windows.Window> class is instantiated, it is not visible by default."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> shows the window, disables all other windows in the application, and returns only when the window is closed.","pos":[89,240],"source":" <xref:System.Windows.Window.ShowDialog%2A> shows the window, disables all other windows in the application, and returns only when the window is closed."},{"content":"This type of window is known as a <bpt id=\"p1\">*</bpt>modal<ept id=\"p1\">*</ept> window.","pos":[241,290],"source":" This type of window is known as a *modal* window."}]},{"pos":[297,974],"content":"Modal windows are primarily used as dialog boxes. A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents. Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed. <xref:System.Windows.Window.ShowDialog%2A> returns a <xref:System.Nullable%601><xref:System.Boolean> value that specifies whether the activity was accepted or canceled. The return value is the value of the <xref:System.Windows.Window.DialogResult%2A> property before a window closes. For more information, see <xref:System.Windows.Window.DialogResult%2A>.","nodes":[{"content":"Modal windows are primarily used as dialog boxes. A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents. Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed. <xref:System.Windows.Window.ShowDialog%2A> returns a <xref:System.Nullable%601><xref:System.Boolean> value that specifies whether the activity was accepted or canceled. The return value is the value of the <xref:System.Windows.Window.DialogResult%2A> property before a window closes. For more information, see <xref:System.Windows.Window.DialogResult%2A>.","pos":[0,677],"nodes":[{"content":"Modal windows are primarily used as dialog boxes.","pos":[0,49]},{"content":"A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents.","pos":[50,199]},{"content":"Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed.","pos":[200,321]},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> returns a <ph id=\"ph2\">&lt;xref:System.Nullable%601&gt;</ph><ph id=\"ph3\">&lt;xref:System.Boolean&gt;</ph> value that specifies whether the activity was accepted or canceled.","pos":[322,490],"source":" <xref:System.Windows.Window.ShowDialog%2A> returns a <xref:System.Nullable%601><xref:System.Boolean> value that specifies whether the activity was accepted or canceled."},{"content":"The return value is the value of the <ph id=\"ph1\">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph> property before a window closes.","pos":[491,605],"source":" The return value is the value of the <xref:System.Windows.Window.DialogResult%2A> property before a window closes."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Windows.Window.DialogResult%2A&gt;</ph>.","pos":[606,677],"source":" For more information, see <xref:System.Windows.Window.DialogResult%2A>."}]}]},{"pos":[981,1680],"content":"A window that is opened by calling the <xref:System.Windows.Window.ShowDialog%2A> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it. This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property. To support [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] automation (see [UI Automation Overview](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> must be set for a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>.","nodes":[{"content":"A window that is opened by calling the <ph id=\"ph1\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it.","pos":[0,233],"source":"A window that is opened by calling the <xref:System.Windows.Window.ShowDialog%2A> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it."},{"content":"This relationship can be established using the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> property and managed using the <ph id=\"ph2\">&lt;xref:System.Windows.Window.OwnedWindows%2A&gt;</ph> property.","pos":[234,404],"source":" This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property."},{"content":"To support <ph id=\"ph1\">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> automation (see <bpt id=\"p1\">[</bpt>UI Automation Overview<ept id=\"p1\">](~/docs/framework/ui-automation/ui-automation-overview.md)</ept>), <ph id=\"ph2\">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph> must be set for a window opened by calling <ph id=\"ph3\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>.","pos":[405,699],"source":" To support [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] automation (see [UI Automation Overview](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> must be set for a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>."}]},{"pos":[1687,2215],"content":"When a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window (a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>) is closed, the previously activated window is reactivated. If a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window has an owner window (see <xref:System.Windows.Window.Owner%2A>), the owner window is not reactivated when the modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window is closed unless it was the previously activated window.","nodes":[{"content":"When a modal <ph id=\"ph1\">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window (a window opened by calling <ph id=\"ph2\">&lt;xref:System.Windows.Window.ShowDialog%2A&gt;</ph>) is closed, the previously activated window is reactivated.","pos":[0,210],"source":"When a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window (a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>) is closed, the previously activated window is reactivated."},{"content":"If a modal <ph id=\"ph1\">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window has an owner window (see <ph id=\"ph2\">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), the owner window is not reactivated when the modal <ph id=\"ph3\">[!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> window is closed unless it was the previously activated window.","pos":[211,528],"source":" If a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window has an owner window (see <xref:System.Windows.Window.Owner%2A>), the owner window is not reactivated when the modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window is closed unless it was the previously activated window."}]},{"pos":[2223,2300],"content":"[!NOTE]\n This method cannot be called when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"This method cannot be called when a window is hosted in a browser.","pos":[9,75]}]}],"pos":[153397,155709],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Nullable`1\"></xref> value of type <xref href=\"System.Boolean\"></xref> that specifies whether the activity was accepted (`true`) or canceled (`false`). The return value is the value of the <xref href=\"System.Windows.Window.DialogResult\"></xref> property before a window closes.","nodes":[{"pos":[0,297],"content":"A <xref href=\"System.Nullable`1\"></xref> value of type <xref href=\"System.Boolean\"></xref> that specifies whether the activity was accepted (`true`) or canceled (`false`). The return value is the value of the <xref href=\"System.Windows.Window.DialogResult\"></xref> property before a window closes.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Nullable`1\"&gt;&lt;/xref&gt;</ph> value of type <ph id=\"ph2\">&lt;xref href=\"System.Boolean\"&gt;&lt;/xref&gt;</ph> that specifies whether the activity was accepted (<ph id=\"ph3\">`true`</ph>) or canceled (<ph id=\"ph4\">`false`</ph>).","pos":[0,171],"source":"A <xref href=\"System.Nullable`1\"></xref> value of type <xref href=\"System.Boolean\"></xref> that specifies whether the activity was accepted (`true`) or canceled (`false`)."},{"content":"The return value is the value of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.DialogResult\"&gt;&lt;/xref&gt;</ph> property before a window closes.","pos":[172,297],"source":" The return value is the value of the <xref href=\"System.Windows.Window.DialogResult\"></xref> property before a window closes."}]}],"pos":[156363,156661],"yaml":true},{"content":"<xref href=\"System.Windows.Window.ShowDialog\"></xref> is called on a window that is closing (<xref href=\"System.Windows.Window.Closing\"></xref>) or has been closed (<xref href=\"System.Windows.Window.Closed\"></xref>).","nodes":[{"pos":[0,216],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.ShowDialog\"&gt;&lt;/xref&gt;</ph> is called on a window that is closing (<ph id=\"ph2\">&lt;xref href=\"System.Windows.Window.Closing\"&gt;&lt;/xref&gt;</ph>) or has been closed (<ph id=\"ph3\">&lt;xref href=\"System.Windows.Window.Closed\"&gt;&lt;/xref&gt;</ph>).","source":"<xref href=\"System.Windows.Window.ShowDialog\"></xref> is called on a window that is closing (<xref href=\"System.Windows.Window.Closing\"></xref>) or has been closed (<xref href=\"System.Windows.Window.Closed\"></xref>)."}],"pos":[156831,157048],"yaml":true},{"content":"Gets or sets a value that indicates whether the window has a task bar button.","nodes":[{"pos":[0,77],"content":"Gets or sets a value that indicates whether the window has a task bar button.","nodes":[{"content":"Gets or sets a value that indicates whether the window has a task bar button.","pos":[0,77]}]}],"pos":[157984,158062],"yaml":true},{"content":"If <xref:System.Windows.Window.ShowInTaskbar%2A> is set to `true`, the window will also appear in the ALT+TAB application selection list.  \n  \n The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <xref:System.Windows.Window.Icon%2A> property.  \n  \n> [!NOTE]\n>  You cannot set or get this property when a window is hosted in a browser.  \n  \n<a name=\"dependencyPropertyInfo_WindowShowInTaskbar\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Window.ShowInTaskbarProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,137],"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Window.ShowInTaskbar%2A&gt;</ph> is set to <ph id=\"ph2\">`true`</ph>, the window will also appear in the ALT+TAB application selection list.","source":"If <xref:System.Windows.Window.ShowInTaskbar%2A> is set to `true`, the window will also appear in the ALT+TAB application selection list."},{"pos":[144,304],"content":"The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <xref:System.Windows.Window.Icon%2A> property.","nodes":[{"content":"The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Icon%2A&gt;</ph> property.","pos":[0,160],"source":"The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <xref:System.Windows.Window.Icon%2A> property."}]},{"pos":[312,396],"content":"[!NOTE]\n You cannot set or get this property when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"You cannot set or get this property when a window is hosted in a browser.","pos":[9,82]}]},{"pos":[466,497],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[518,534],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[535,585],"content":"<xref:System.Windows.Window.ShowInTaskbarProperty>","nodes":[]},{"pos":[590,623],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[624,628],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[158073,158720],"yaml":true,"extradata":"MT"},{"content":"`true` if the window has a task bar button; otherwise, `false`. Does not apply when the window is hosted in a browser.","nodes":[{"pos":[0,118],"content":"`true` if the window has a task bar button; otherwise, `false`. Does not apply when the window is hosted in a browser.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the window has a task bar button; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,63],"source":"`true` if the window has a task bar button; otherwise, `false`."},{"content":"Does not apply when the window is hosted in a browser.","pos":[64,118]}]}],"pos":[158841,158962],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Window.ShowInTaskbar\"></xref> dependency property.","nodes":[{"pos":[0,92],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.ShowInTaskbar\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Window.ShowInTaskbar\"></xref> dependency property."}],"pos":[159943,160036],"yaml":true},{"content":"Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.","nodes":[{"pos":[0,115],"content":"Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.","nodes":[{"content":"Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.","pos":[0,115]}]}],"pos":[161106,161222],"yaml":true},{"content":"When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.WidthAndHeight>, setting either <xref:System.Windows.FrameworkElement.Height%2A> or <xref:System.Windows.FrameworkElement.Width%2A> has no effect; both properties can be set, but the values they are set with are not applied to the window.  \n  \n When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Height>, setting <xref:System.Windows.FrameworkElement.Height%2A> does not change the height of the window.  \n  \n When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Width>, setting <xref:System.Windows.FrameworkElement.Width%2A> does not change the width of the window.  \n  \n If <xref:System.Windows.Window.SizeToContent%2A> has a value other than <xref:System.Windows.SizeToContent.Manual>:  \n  \n-   <xref:System.Windows.Window.SizeToContent%2A> is automatically set to <xref:System.Windows.SizeToContent.Manual> if a user resizes the window by using the resize grip or dragging the border.  \n  \n-   If the size of the content changes in a way that causes the window to resize itself, <xref:System.Windows.FrameworkElement.SizeChanged> is raised.  \n  \n If a window is transparent (see <xref:System.Windows.Window.AllowsTransparency%2A>), you should consider setting <xref:System.Windows.Window.SizeToContent%2A> to <xref:System.Windows.SizeToContent.WidthAndHeight> to ensure the window is no larger than its visible content.  \n  \n> [!NOTE]\n>  You cannot set or get this property when a window is hosted in a browser.  \n  \n<a name=\"dependencyPropertyInfo_WindowSizeToContent\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Window.SizeToContentProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,334],"content":"When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.WidthAndHeight>, setting either <xref:System.Windows.FrameworkElement.Height%2A> or <xref:System.Windows.FrameworkElement.Width%2A> has no effect; both properties can be set, but the values they are set with are not applied to the window.","nodes":[{"content":"When <ph id=\"ph1\">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id=\"ph2\">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph>, setting either <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> has no effect; both properties can be set, but the values they are set with are not applied to the window.","pos":[0,334],"source":"When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.WidthAndHeight>, setting either <xref:System.Windows.FrameworkElement.Height%2A> or <xref:System.Windows.FrameworkElement.Width%2A> has no effect; both properties can be set, but the values they are set with are not applied to the window."}]},{"pos":[341,544],"content":"When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Height>, setting <xref:System.Windows.FrameworkElement.Height%2A> does not change the height of the window.","nodes":[{"content":"When <ph id=\"ph1\">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id=\"ph2\">&lt;xref:System.Windows.SizeToContent.Height&gt;</ph>, setting <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.Height%2A&gt;</ph> does not change the height of the window.","pos":[0,203],"source":"When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Height>, setting <xref:System.Windows.FrameworkElement.Height%2A> does not change the height of the window."}]},{"pos":[551,751],"content":"When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Width>, setting <xref:System.Windows.FrameworkElement.Width%2A> does not change the width of the window.","nodes":[{"content":"When <ph id=\"ph1\">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is set to <ph id=\"ph2\">&lt;xref:System.Windows.SizeToContent.Width&gt;</ph>, setting <ph id=\"ph3\">&lt;xref:System.Windows.FrameworkElement.Width%2A&gt;</ph> does not change the width of the window.","pos":[0,200],"source":"When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Width>, setting <xref:System.Windows.FrameworkElement.Width%2A> does not change the width of the window."}]},{"pos":[758,873],"content":"If <xref:System.Windows.Window.SizeToContent%2A> has a value other than <xref:System.Windows.SizeToContent.Manual>:","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> has a value other than <ph id=\"ph2\">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph>:","pos":[0,115],"source":"If <xref:System.Windows.Window.SizeToContent%2A> has a value other than <xref:System.Windows.SizeToContent.Manual>:"}]},{"pos":[883,1073],"content":"<xref:System.Windows.Window.SizeToContent%2A> is automatically set to <xref:System.Windows.SizeToContent.Manual> if a user resizes the window by using the resize grip or dragging the border.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> is automatically set to <ph id=\"ph2\">&lt;xref:System.Windows.SizeToContent.Manual&gt;</ph> if a user resizes the window by using the resize grip or dragging the border.","pos":[0,190],"source":"<xref:System.Windows.Window.SizeToContent%2A> is automatically set to <xref:System.Windows.SizeToContent.Manual> if a user resizes the window by using the resize grip or dragging the border."}]},{"pos":[1083,1229],"content":"If the size of the content changes in a way that causes the window to resize itself, <xref:System.Windows.FrameworkElement.SizeChanged> is raised.","nodes":[{"content":"If the size of the content changes in a way that causes the window to resize itself, <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkElement.SizeChanged&gt;</ph> is raised.","pos":[0,146],"source":"If the size of the content changes in a way that causes the window to resize itself, <xref:System.Windows.FrameworkElement.SizeChanged> is raised."}]},{"pos":[1236,1508],"content":"If a window is transparent (see <xref:System.Windows.Window.AllowsTransparency%2A>), you should consider setting <xref:System.Windows.Window.SizeToContent%2A> to <xref:System.Windows.SizeToContent.WidthAndHeight> to ensure the window is no larger than its visible content.","nodes":[{"content":"If a window is transparent (see <ph id=\"ph1\">&lt;xref:System.Windows.Window.AllowsTransparency%2A&gt;</ph>), you should consider setting <ph id=\"ph2\">&lt;xref:System.Windows.Window.SizeToContent%2A&gt;</ph> to <ph id=\"ph3\">&lt;xref:System.Windows.SizeToContent.WidthAndHeight&gt;</ph> to ensure the window is no larger than its visible content.","pos":[0,272],"source":"If a window is transparent (see <xref:System.Windows.Window.AllowsTransparency%2A>), you should consider setting <xref:System.Windows.Window.SizeToContent%2A> to <xref:System.Windows.SizeToContent.WidthAndHeight> to ensure the window is no larger than its visible content."}]},{"pos":[1516,1600],"content":"[!NOTE]\n You cannot set or get this property when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"You cannot set or get this property when a window is hosted in a browser.","pos":[9,82]}]},{"pos":[1670,1701],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[1722,1738],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[1739,1789],"content":"<xref:System.Windows.Window.SizeToContentProperty>","nodes":[]},{"pos":[1794,1827],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[1828,1832],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[161233,163094],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.SizeToContent\"></xref> value. The default is <xref href=\"System.Windows.SizeToContent.Manual\"></xref>.","nodes":[{"pos":[0,131],"content":"A <xref href=\"System.Windows.SizeToContent\"></xref> value. The default is <xref href=\"System.Windows.SizeToContent.Manual\"></xref>.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.SizeToContent\"&gt;&lt;/xref&gt;</ph> value.","pos":[0,58],"source":"A <xref href=\"System.Windows.SizeToContent\"></xref> value."},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.Windows.SizeToContent.Manual\"&gt;&lt;/xref&gt;</ph>.","pos":[59,131],"source":" The default is <xref href=\"System.Windows.SizeToContent.Manual\"></xref>."}]}],"pos":[163874,164006],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Window.SizeToContent\"></xref> dependency property.","nodes":[{"pos":[0,92],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.SizeToContent\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Window.SizeToContent\"></xref> dependency property."}],"pos":[164987,165080],"yaml":true},{"content":"This event is raised to support interoperation with [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]. See <xref href=\"System.Windows.Interop.HwndSource\"></xref>.","nodes":[{"pos":[0,174],"content":"This event is raised to support interoperation with [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]. See <xref href=\"System.Windows.Interop.HwndSource\"></xref>.","nodes":[{"content":"This event is raised to support interoperation with <ph id=\"ph1\">[!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]</ph>.","pos":[0,114],"source":"This event is raised to support interoperation with [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]."},{"content":"See <ph id=\"ph1\">&lt;xref href=\"System.Windows.Interop.HwndSource\"&gt;&lt;/xref&gt;</ph>.","pos":[115,174],"source":" See <xref href=\"System.Windows.Interop.HwndSource\"></xref>."}]}],"pos":[166171,166346],"yaml":true},{"content":"Occurs when the window's <xref href=\"System.Windows.Window.WindowState\"></xref> property changes.","nodes":[{"pos":[0,97],"content":"Occurs when the window's <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.WindowState\"&gt;&lt;/xref&gt;</ph> property changes.","source":"Occurs when the window's <xref href=\"System.Windows.Window.WindowState\"></xref> property changes."}],"pos":[167358,167456],"yaml":true},{"content":"Gets or sets the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <xref href=\"System.Windows.Window\"></xref>.","nodes":[{"pos":[0,126],"content":"Gets or sets the <ph id=\"ph1\">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail for the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Window\"&gt;&lt;/xref&gt;</ph>.","source":"Gets or sets the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <xref href=\"System.Windows.Window\"></xref>."}],"pos":[168484,168611],"yaml":true},{"content":"For more information about how to use the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail, see the <xref:System.Windows.Shell.TaskbarItemInfo> class.","nodes":[{"pos":[0,159],"content":"For more information about how to use the <ph id=\"ph1\">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail, see the <ph id=\"ph2\">&lt;xref:System.Windows.Shell.TaskbarItemInfo&gt;</ph> class.","source":"For more information about how to use the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail, see the <xref:System.Windows.Shell.TaskbarItemInfo> class."}],"pos":[168622,168782],"yaml":true,"extradata":"MT"},{"content":"The [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <xref href=\"System.Windows.Window\"></xref>.","nodes":[{"pos":[0,113],"content":"The <ph id=\"ph1\">[!INCLUDE[win7](~/includes/win7-md.md)]</ph> taskbar thumbnail for the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Window\"&gt;&lt;/xref&gt;</ph>.","source":"The [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <xref href=\"System.Windows.Window\"></xref>."}],"pos":[168959,169073],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Window.TaskbarItemInfo\"></xref> dependency property.","nodes":[{"pos":[0,94],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.TaskbarItemInfo\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Window.TaskbarItemInfo\"></xref> dependency property."}],"pos":[170068,170163],"yaml":true},{"content":"Gets or sets a window's title.","nodes":[{"pos":[0,30],"content":"Gets or sets a window's title.","nodes":[{"content":"Gets or sets a window's title.","pos":[0,30]}]}],"pos":[171187,171218],"yaml":true},{"content":"The title of a <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, or [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)], can also be set by using <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName>.  \n  \n<a name=\"dependencyPropertyInfo_WindowTitle\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Window.TitleProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,271],"content":"The title of a <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Navigation.NavigationWindow&gt;</ph>, or <ph id=\"ph3\">[!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)]</ph>, can also be set by using <ph id=\"ph4\">&lt;xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName&gt;</ph>.","source":"The title of a <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, or [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)], can also be set by using <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName>."},{"pos":[333,364],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[385,401],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[402,444],"content":"<xref:System.Windows.Window.TitleProperty>","nodes":[]},{"pos":[449,482],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[483,487],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[171229,171730],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.String\"></xref> that contains the window's title.","nodes":[{"pos":[0,70],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> that contains the window's title.","source":"A <xref href=\"System.String\"></xref> that contains the window's title."}],"pos":[171935,172006],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Window.Title\"></xref> dependency property.","nodes":[{"pos":[0,84],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.Title\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Window.Title\"></xref> dependency property."}],"pos":[172994,173079],"yaml":true},{"content":"Gets or sets the position of the window's top edge, in relation to the desktop.","nodes":[{"pos":[0,79],"content":"Gets or sets the position of the window's top edge, in relation to the desktop.","nodes":[{"content":"Gets or sets the position of the window's top edge, in relation to the desktop.","pos":[0,79]}]}],"pos":[174081,174161],"yaml":true},{"content":"When the <xref:System.Windows.Window> is maximized or minimized, this value represents the top edge of the restore point for the <xref:System.Windows.Window>.  \n  \n This property cannot be set through a style.  \n  \n If you do not specify a value, <xref:System.Windows.Window.Top%2A> is set to the system default value. You can also specify the system default value by setting <xref:System.Windows.Window.Top%2A> to <xref:System.Double.NaN>. Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Top%2A>.  \n  \n> [!NOTE]\n>  You cannot set or get this property when a window is hosted in a browser.  \n  \n<a name=\"dependencyPropertyInfo_WindowTop\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Window.TopProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,158],"content":"When the <xref:System.Windows.Window> is maximized or minimized, this value represents the top edge of the restore point for the <xref:System.Windows.Window>.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Windows.Window&gt;</ph> is maximized or minimized, this value represents the top edge of the restore point for the <ph id=\"ph2\">&lt;xref:System.Windows.Window&gt;</ph>.","pos":[0,158],"source":"When the <xref:System.Windows.Window> is maximized or minimized, this value represents the top edge of the restore point for the <xref:System.Windows.Window>."}]},{"pos":[165,209],"content":"This property cannot be set through a style.","nodes":[{"content":"This property cannot be set through a style.","pos":[0,44]}]},{"pos":[216,586],"content":"If you do not specify a value, <xref:System.Windows.Window.Top%2A> is set to the system default value. You can also specify the system default value by setting <xref:System.Windows.Window.Top%2A> to <xref:System.Double.NaN>. Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Top%2A>.","nodes":[{"content":"If you do not specify a value, <xref:System.Windows.Window.Top%2A> is set to the system default value. You can also specify the system default value by setting <xref:System.Windows.Window.Top%2A> to <xref:System.Double.NaN>. Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Top%2A>.","pos":[0,370],"nodes":[{"content":"If you do not specify a value, <ph id=\"ph1\">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> is set to the system default value.","pos":[0,102],"source":"If you do not specify a value, <xref:System.Windows.Window.Top%2A> is set to the system default value."},{"content":"You can also specify the system default value by setting <ph id=\"ph1\">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> to <ph id=\"ph2\">&lt;xref:System.Double.NaN&gt;</ph>.","pos":[103,224],"source":" You can also specify the system default value by setting <xref:System.Windows.Window.Top%2A> to <xref:System.Double.NaN>."},{"content":"Neither <ph id=\"ph1\">&lt;xref:System.Double.NegativeInfinity&gt;</ph> nor <ph id=\"ph2\">&lt;xref:System.Double.PositiveInfinity&gt;</ph> is a valid value for <ph id=\"ph3\">&lt;xref:System.Windows.Window.Top%2A&gt;</ph>.","pos":[225,370],"source":" Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Top%2A>."}]}]},{"pos":[594,678],"content":"[!NOTE]\n You cannot set or get this property when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"You cannot set or get this property when a window is hosted in a browser.","pos":[9,82]}]},{"pos":[738,769],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[790,806],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[807,847],"content":"<xref:System.Windows.Window.TopProperty>","nodes":[]},{"pos":[852,885],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[886,890],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[174172,175083],"yaml":true,"extradata":"MT"},{"content":"The position of the window's top, in logical units (1/96\").","nodes":[{"pos":[0,59],"content":"The position of the window's top, in logical units (1/96\").","nodes":[{"content":"The position of the window's top, in logical units (1/96\").","pos":[0,59]}]}],"pos":[175386,175446],"yaml":true},{"content":"Gets or sets a value that indicates whether a window appears in the topmost z-order.","nodes":[{"pos":[0,84],"content":"Gets or sets a value that indicates whether a window appears in the topmost z-order.","nodes":[{"content":"Gets or sets a value that indicates whether a window appears in the topmost z-order.","pos":[0,84]}]}],"pos":[176383,176468],"yaml":true},{"content":"A window whose <xref:System.Windows.Window.Topmost%2A> property is set to `true` appears above all windows whose <xref:System.Windows.Window.Topmost%2A> properties are set to `false`.  \n  \n In the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `true`, the window that is currently activated is the topmost window. Likewise for the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `false`.  \n  \n> [!NOTE]\n>  You cannot set or get this property when a window is hosted in a browser.  \n  \n<a name=\"dependencyPropertyInfo_WindowTopmost\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Window.TopmostProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,183],"content":"A window whose <ph id=\"ph1\">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id=\"ph2\">`true`</ph> appears above all windows whose <ph id=\"ph3\">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> properties are set to <ph id=\"ph4\">`false`</ph>.","source":"A window whose <xref:System.Windows.Window.Topmost%2A> property is set to `true` appears above all windows whose <xref:System.Windows.Window.Topmost%2A> properties are set to `false`."},{"pos":[190,464],"content":"In the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `true`, the window that is currently activated is the topmost window. Likewise for the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `false`.","nodes":[{"content":"In the group of windows that have <ph id=\"ph1\">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id=\"ph2\">`true`</ph>, the window that is currently activated is the topmost window.","pos":[0,162],"source":"In the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `true`, the window that is currently activated is the topmost window."},{"content":"Likewise for the group of windows that have <ph id=\"ph1\">&lt;xref:System.Windows.Window.Topmost%2A&gt;</ph> property is set to <ph id=\"ph2\">`false`</ph>.","pos":[163,274],"source":" Likewise for the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `false`."}]},{"pos":[472,556],"content":"[!NOTE]\n You cannot set or get this property when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"You cannot set or get this property when a window is hosted in a browser.","pos":[9,82]}]},{"pos":[620,651],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[672,688],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[689,733],"content":"<xref:System.Windows.Window.TopmostProperty>","nodes":[]},{"pos":[738,771],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[772,776],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[176479,177274],"yaml":true,"extradata":"MT"},{"content":"`true` if the window is topmost; otherwise, `false`.","nodes":[{"pos":[0,52],"content":"<ph id=\"ph1\">`true`</ph> if the window is topmost; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the window is topmost; otherwise, `false`."}],"pos":[177389,177444],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Window.Topmost\"></xref> dependency property.","nodes":[{"pos":[0,86],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.Topmost\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Window.Topmost\"></xref> dependency property."}],"pos":[178383,178470],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Window.Top\"></xref> dependency property.","nodes":[{"pos":[0,82],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.Top\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Window.Top\"></xref> dependency property."}],"pos":[179519,179602],"yaml":true},{"content":"Gets or sets the position of the window when first shown.","nodes":[{"pos":[0,57],"content":"Gets or sets the position of the window when first shown.","nodes":[{"content":"Gets or sets the position of the window when first shown.","pos":[0,57]}]}],"pos":[180710,180768],"yaml":true},{"content":"Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.Manual> causes a window to be positioned according to its <xref:System.Windows.Window.Left%2A> and <xref:System.Windows.Window.Top%2A> property values. If either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> properties aren't specified, their values are determined by [!INCLUDE[TLA2#tla_mswin](~/includes/tla2sharptla-mswin-md.md)].  \n  \n Setting <xref:System.Windows.WindowStartupLocation.CenterScreen> causes a window to be positioned in the center of the screen that contains the mouse cursor.  \n  \n Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.CenterOwner> causes a window to be positioned in the center of its owner window (see <xref:System.Windows.Window.Owner%2A>), if specified. The owner window can be either another WPF window or a non-WPF window.  \n  \n> [!NOTE]\n>  For more information about WPF windows with non-WPF windows, see [WPF and Win32 Interoperation](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) and <xref:System.Windows.Interop.WindowInteropHelper>.  \n  \n If an owner window is not specified, the position of the window is determined in the same way as if <xref:System.Windows.WindowStartupLocation> is set to <xref:System.Windows.WindowStartupLocation.Manual>.  \n  \n> [!NOTE]\n>  You cannot set or get the value of this property when a window is hosted in a browser.","nodes":[{"pos":[0,464],"content":"Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.Manual> causes a window to be positioned according to its <xref:System.Windows.Window.Left%2A> and <xref:System.Windows.Window.Top%2A> property values. If either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> properties aren't specified, their values are determined by [!INCLUDE[TLA2#tla_mswin](~/includes/tla2sharptla-mswin-md.md)].","nodes":[{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> to <ph id=\"ph2\">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph> causes a window to be positioned according to its <ph id=\"ph3\">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> and <ph id=\"ph4\">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> property values.","pos":[0,249],"source":"Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.Manual> causes a window to be positioned according to its <xref:System.Windows.Window.Left%2A> and <xref:System.Windows.Window.Top%2A> property values."},{"content":"If either the <ph id=\"ph1\">&lt;xref:System.Windows.Window.Left%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.Window.Top%2A&gt;</ph> properties aren't specified, their values are determined by <ph id=\"ph3\">[!INCLUDE[TLA2#tla_mswin](~/includes/tla2sharptla-mswin-md.md)]</ph>.","pos":[250,464],"source":" If either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> properties aren't specified, their values are determined by [!INCLUDE[TLA2#tla_mswin](~/includes/tla2sharptla-mswin-md.md)]."}]},{"pos":[471,628],"content":"Setting <xref:System.Windows.WindowStartupLocation.CenterScreen> causes a window to be positioned in the center of the screen that contains the mouse cursor.","nodes":[{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Windows.WindowStartupLocation.CenterScreen&gt;</ph> causes a window to be positioned in the center of the screen that contains the mouse cursor.","pos":[0,157],"source":"Setting <xref:System.Windows.WindowStartupLocation.CenterScreen> causes a window to be positioned in the center of the screen that contains the mouse cursor."}]},{"pos":[635,942],"content":"Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.CenterOwner> causes a window to be positioned in the center of its owner window (see <xref:System.Windows.Window.Owner%2A>), if specified. The owner window can be either another WPF window or a non-WPF window.","nodes":[{"content":"Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.CenterOwner> causes a window to be positioned in the center of its owner window (see <xref:System.Windows.Window.Owner%2A>), if specified. The owner window can be either another WPF window or a non-WPF window.","pos":[0,307],"nodes":[{"content":"Setting <ph id=\"ph1\">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> to <ph id=\"ph2\">&lt;xref:System.Windows.WindowStartupLocation.CenterOwner&gt;</ph> causes a window to be positioned in the center of its owner window (see <ph id=\"ph3\">&lt;xref:System.Windows.Window.Owner%2A&gt;</ph>), if specified.","pos":[0,236],"source":"Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.CenterOwner> causes a window to be positioned in the center of its owner window (see <xref:System.Windows.Window.Owner%2A>), if specified."},{"content":"The owner window can be either another WPF window or a non-WPF window.","pos":[237,307]}]}]},{"pos":[950,1174],"content":"[!NOTE]\n For more information about WPF windows with non-WPF windows, see [WPF and Win32 Interoperation](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) and <xref:System.Windows.Interop.WindowInteropHelper>.","leadings":["","> "],"nodes":[{"content":"For more information about WPF windows with non-WPF windows, see <bpt id=\"p1\">[</bpt>WPF and Win32 Interoperation<ept id=\"p1\">](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md)</ept> and <ph id=\"ph1\">&lt;xref:System.Windows.Interop.WindowInteropHelper&gt;</ph>.","pos":[9,222],"source":" For more information about WPF windows with non-WPF windows, see [WPF and Win32 Interoperation](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) and <xref:System.Windows.Interop.WindowInteropHelper>."}]},{"pos":[1181,1386],"content":"If an owner window is not specified, the position of the window is determined in the same way as if <xref:System.Windows.WindowStartupLocation> is set to <xref:System.Windows.WindowStartupLocation.Manual>.","nodes":[{"content":"If an owner window is not specified, the position of the window is determined in the same way as if <ph id=\"ph1\">&lt;xref:System.Windows.WindowStartupLocation&gt;</ph> is set to <ph id=\"ph2\">&lt;xref:System.Windows.WindowStartupLocation.Manual&gt;</ph>.","pos":[0,205],"source":"If an owner window is not specified, the position of the window is determined in the same way as if <xref:System.Windows.WindowStartupLocation> is set to <xref:System.Windows.WindowStartupLocation.Manual>."}]},{"pos":[1394,1491],"content":"[!NOTE]\n You cannot set or get the value of this property when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"You cannot set or get the value of this property when a window is hosted in a browser.","pos":[9,95]}]}],"pos":[180779,182285],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.WindowStartupLocation\"></xref> value that specifies the top/left position of a window when first shown. The default is <xref href=\"System.Windows.WindowStartupLocation.Manual\"></xref>.","nodes":[{"pos":[0,213],"content":"A <xref href=\"System.Windows.WindowStartupLocation\"></xref> value that specifies the top/left position of a window when first shown. The default is <xref href=\"System.Windows.WindowStartupLocation.Manual\"></xref>.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.WindowStartupLocation\"&gt;&lt;/xref&gt;</ph> value that specifies the top/left position of a window when first shown.","pos":[0,132],"source":"A <xref href=\"System.Windows.WindowStartupLocation\"></xref> value that specifies the top/left position of a window when first shown."},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.Windows.WindowStartupLocation.Manual\"&gt;&lt;/xref&gt;</ph>.","pos":[133,213],"source":" The default is <xref href=\"System.Windows.WindowStartupLocation.Manual\"></xref>."}]}],"pos":[182468,182682],"yaml":true},{"content":"Gets or sets a value that indicates whether a window is restored, minimized, or maximized.","nodes":[{"pos":[0,90],"content":"Gets or sets a value that indicates whether a window is restored, minimized, or maximized.","nodes":[{"content":"Gets or sets a value that indicates whether a window is restored, minimized, or maximized.","pos":[0,90]}]}],"pos":[183609,183700],"yaml":true},{"content":"Before a window is minimized or maximized, its size and location are stored in <xref:System.Windows.Window.RestoreBounds%2A>. When a window is subsequently restored, its size and location values are restored with the values from <xref:System.Windows.Window.RestoreBounds%2A>.  \n  \n When the <xref:System.Windows.Window.WindowState%2A> property is changed, <xref:System.Windows.Window.StateChanged> is raised.  \n  \n> [!NOTE]\n>  You cannot set or get this property when a window is hosted in a browser.  \n  \n<a name=\"dependencyPropertyInfo_WindowWindowState\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Window.WindowStateProperty>|  \n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|","nodes":[{"pos":[0,275],"content":"Before a window is minimized or maximized, its size and location are stored in <xref:System.Windows.Window.RestoreBounds%2A>. When a window is subsequently restored, its size and location values are restored with the values from <xref:System.Windows.Window.RestoreBounds%2A>.","nodes":[{"content":"Before a window is minimized or maximized, its size and location are stored in <xref:System.Windows.Window.RestoreBounds%2A>. When a window is subsequently restored, its size and location values are restored with the values from <xref:System.Windows.Window.RestoreBounds%2A>.","pos":[0,275],"nodes":[{"content":"Before a window is minimized or maximized, its size and location are stored in <ph id=\"ph1\">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>.","pos":[0,125],"source":"Before a window is minimized or maximized, its size and location are stored in <xref:System.Windows.Window.RestoreBounds%2A>."},{"content":"When a window is subsequently restored, its size and location values are restored with the values from <ph id=\"ph1\">&lt;xref:System.Windows.Window.RestoreBounds%2A&gt;</ph>.","pos":[126,275],"source":" When a window is subsequently restored, its size and location values are restored with the values from <xref:System.Windows.Window.RestoreBounds%2A>."}]}]},{"pos":[282,408],"content":"When the <xref:System.Windows.Window.WindowState%2A> property is changed, <xref:System.Windows.Window.StateChanged> is raised.","nodes":[{"content":"When the <ph id=\"ph1\">&lt;xref:System.Windows.Window.WindowState%2A&gt;</ph> property is changed, <ph id=\"ph2\">&lt;xref:System.Windows.Window.StateChanged&gt;</ph> is raised.","pos":[0,126],"source":"When the <xref:System.Windows.Window.WindowState%2A> property is changed, <xref:System.Windows.Window.StateChanged> is raised."}]},{"pos":[416,500],"content":"[!NOTE]\n You cannot set or get this property when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"You cannot set or get this property when a window is hosted in a browser.","pos":[9,82]}]},{"pos":[568,599],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[620,636],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[637,685],"content":"<xref:System.Windows.Window.WindowStateProperty>","nodes":[]},{"pos":[690,723],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[724,795],"content":"<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>","nodes":[]}],"pos":[183711,184525],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.WindowState\"></xref> that determines whether a window is restored, minimized, or maximized. The default is <xref href=\"System.Windows.WindowState.Normal\"></xref> (restored).","nodes":[{"pos":[0,202],"content":"A <xref href=\"System.Windows.WindowState\"></xref> that determines whether a window is restored, minimized, or maximized. The default is <xref href=\"System.Windows.WindowState.Normal\"></xref> (restored).","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.WindowState\"&gt;&lt;/xref&gt;</ph> that determines whether a window is restored, minimized, or maximized.","pos":[0,120],"source":"A <xref href=\"System.Windows.WindowState\"></xref> that determines whether a window is restored, minimized, or maximized."},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.Windows.WindowState.Normal\"&gt;&lt;/xref&gt;</ph> (restored).","pos":[121,202],"source":" The default is <xref href=\"System.Windows.WindowState.Normal\"></xref> (restored)."}]}],"pos":[184678,184881],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Window.WindowState\"></xref> dependency property.","nodes":[{"pos":[0,90],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.WindowState\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Window.WindowState\"></xref> dependency property."}],"pos":[185826,185917],"yaml":true},{"content":"Gets or sets a window's border style.","nodes":[{"pos":[0,37],"content":"Gets or sets a window's border style.","nodes":[{"content":"Gets or sets a window's border style.","pos":[0,37]}]}],"pos":[186973,187011],"yaml":true},{"content":"<xref:System.Windows.Window.WindowStyle%2A> can be one of the <xref:System.Windows.WindowStyle> enumeration values, including <xref:System.Windows.WindowStyle.None>, <xref:System.Windows.WindowStyle.ToolWindow>, <xref:System.Windows.WindowStyle.SingleBorderWindow> (default), and <xref:System.Windows.WindowStyle.ThreeDBorderWindow>.  \n  \n The following figure shows the window styles on [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] (Windows Vista Aero theme, with transparent glass enabled):  \n  \n ![Window styles](~/add/media/windowoverviewfigure6.PNG \"Window styles\")  \n  \n> [!NOTE]\n>  You cannot set or get this property when a window is hosted in a browser.  \n  \n<a name=\"dependencyPropertyInfo_WindowWindowStyle\"></a>   \n## Dependency Property Information  \n  \n|||  \n|-|-|  \n|Identifier field|<xref:System.Windows.Window.WindowStyleProperty>|  \n|Metadata properties set to `true`|None|","nodes":[{"pos":[0,333],"content":"<xref:System.Windows.Window.WindowStyle%2A> can be one of the <xref:System.Windows.WindowStyle> enumeration values, including <xref:System.Windows.WindowStyle.None>, <xref:System.Windows.WindowStyle.ToolWindow>, <xref:System.Windows.WindowStyle.SingleBorderWindow> (default), and <xref:System.Windows.WindowStyle.ThreeDBorderWindow>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Window.WindowStyle%2A&gt;</ph> can be one of the <ph id=\"ph2\">&lt;xref:System.Windows.WindowStyle&gt;</ph> enumeration values, including <ph id=\"ph3\">&lt;xref:System.Windows.WindowStyle.None&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.WindowStyle.ToolWindow&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Windows.WindowStyle.SingleBorderWindow&gt;</ph> (default), and <ph id=\"ph6\">&lt;xref:System.Windows.WindowStyle.ThreeDBorderWindow&gt;</ph>.","pos":[0,333],"source":"<xref:System.Windows.Window.WindowStyle%2A> can be one of the <xref:System.Windows.WindowStyle> enumeration values, including <xref:System.Windows.WindowStyle.None>, <xref:System.Windows.WindowStyle.ToolWindow>, <xref:System.Windows.WindowStyle.SingleBorderWindow> (default), and <xref:System.Windows.WindowStyle.ThreeDBorderWindow>."}]},{"pos":[340,515],"content":"The following figure shows the window styles on <ph id=\"ph1\">[!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)]</ph> (Windows Vista Aero theme, with transparent glass enabled):","source":"The following figure shows the window styles on [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] (Windows Vista Aero theme, with transparent glass enabled):"},{"pos":[522,593],"content":"<bpt id=\"p1\">![</bpt>Window styles<ept id=\"p1\">]</ept><bpt id=\"p2\">(~/add/media/windowoverviewfigure6.PNG \"</bpt>Window styles<ept id=\"p2\">\")</ept>","source":"![Window styles](~/add/media/windowoverviewfigure6.PNG \"Window styles\")"},{"pos":[601,685],"content":"[!NOTE]\n You cannot set or get this property when a window is hosted in a browser.","leadings":["","> "],"nodes":[{"content":"You cannot set or get this property when a window is hosted in a browser.","pos":[9,82]}]},{"pos":[753,784],"content":"Dependency Property Information","linkify":"Dependency Property Information","nodes":[{"content":"Dependency Property Information","pos":[0,31]}]},{"pos":[805,821],"content":"Identifier field","nodes":[{"content":"Identifier field","pos":[0,16]}]},{"pos":[822,870],"content":"<xref:System.Windows.Window.WindowStyleProperty>","nodes":[]},{"pos":[875,908],"content":"Metadata properties set to <ph id=\"ph1\">`true`</ph>","source":"Metadata properties set to `true`"},{"pos":[909,913],"content":"None","nodes":[{"content":"None","pos":[0,4]}]}],"pos":[187022,187958],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.WindowStyle\"></xref> that specifies a window's border style. The default is <xref href=\"System.Windows.WindowStyle.SingleBorderWindow\"></xref>.","nodes":[{"pos":[0,172],"content":"A <xref href=\"System.Windows.WindowStyle\"></xref> that specifies a window's border style. The default is <xref href=\"System.Windows.WindowStyle.SingleBorderWindow\"></xref>.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.WindowStyle\"&gt;&lt;/xref&gt;</ph> that specifies a window's border style.","pos":[0,89],"source":"A <xref href=\"System.Windows.WindowStyle\"></xref> that specifies a window's border style."},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.Windows.WindowStyle.SingleBorderWindow\"&gt;&lt;/xref&gt;</ph>.","pos":[90,172],"source":" The default is <xref href=\"System.Windows.WindowStyle.SingleBorderWindow\"></xref>."}]}],"pos":[188111,188284],"yaml":true},{"content":"Identifies the <xref href=\"System.Windows.Window.WindowStyle\"></xref> dependency property.","nodes":[{"pos":[0,90],"content":"Identifies the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Window.WindowStyle\"&gt;&lt;/xref&gt;</ph> dependency property.","source":"Identifies the <xref href=\"System.Windows.Window.WindowStyle\"></xref> dependency property."}],"pos":[189251,189342],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Window\n  commentId: T:System.Windows.Window\n  id: Window\n  children:\n  - System.Windows.Window.#ctor\n  - System.Windows.Window.Activate\n  - System.Windows.Window.Activated\n  - System.Windows.Window.AllowsTransparency\n  - System.Windows.Window.AllowsTransparencyProperty\n  - System.Windows.Window.ArrangeOverride(System.Windows.Size)\n  - System.Windows.Window.Close\n  - System.Windows.Window.Closed\n  - System.Windows.Window.Closing\n  - System.Windows.Window.ContentRendered\n  - System.Windows.Window.Deactivated\n  - System.Windows.Window.DialogResult\n  - System.Windows.Window.DpiChanged\n  - System.Windows.Window.DpiChangedEvent\n  - System.Windows.Window.DragMove\n  - System.Windows.Window.GetWindow(System.Windows.DependencyObject)\n  - System.Windows.Window.Hide\n  - System.Windows.Window.Icon\n  - System.Windows.Window.IconProperty\n  - System.Windows.Window.IsActive\n  - System.Windows.Window.IsActiveProperty\n  - System.Windows.Window.Left\n  - System.Windows.Window.LeftProperty\n  - System.Windows.Window.LocationChanged\n  - System.Windows.Window.LogicalChildren\n  - System.Windows.Window.MeasureOverride(System.Windows.Size)\n  - System.Windows.Window.OnActivated(System.EventArgs)\n  - System.Windows.Window.OnClosed(System.EventArgs)\n  - System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)\n  - System.Windows.Window.OnContentChanged(System.Object,System.Object)\n  - System.Windows.Window.OnContentRendered(System.EventArgs)\n  - System.Windows.Window.OnCreateAutomationPeer\n  - System.Windows.Window.OnDeactivated(System.EventArgs)\n  - System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)\n  - System.Windows.Window.OnLocationChanged(System.EventArgs)\n  - System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)\n  - System.Windows.Window.OnSourceInitialized(System.EventArgs)\n  - System.Windows.Window.OnStateChanged(System.EventArgs)\n  - System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)\n  - System.Windows.Window.OwnedWindows\n  - System.Windows.Window.Owner\n  - System.Windows.Window.ResizeMode\n  - System.Windows.Window.ResizeModeProperty\n  - System.Windows.Window.RestoreBounds\n  - System.Windows.Window.Show\n  - System.Windows.Window.ShowActivated\n  - System.Windows.Window.ShowActivatedProperty\n  - System.Windows.Window.ShowDialog\n  - System.Windows.Window.ShowInTaskbar\n  - System.Windows.Window.ShowInTaskbarProperty\n  - System.Windows.Window.SizeToContent\n  - System.Windows.Window.SizeToContentProperty\n  - System.Windows.Window.SourceInitialized\n  - System.Windows.Window.StateChanged\n  - System.Windows.Window.TaskbarItemInfo\n  - System.Windows.Window.TaskbarItemInfoProperty\n  - System.Windows.Window.Title\n  - System.Windows.Window.TitleProperty\n  - System.Windows.Window.Top\n  - System.Windows.Window.Topmost\n  - System.Windows.Window.TopmostProperty\n  - System.Windows.Window.TopProperty\n  - System.Windows.Window.WindowStartupLocation\n  - System.Windows.Window.WindowState\n  - System.Windows.Window.WindowStateProperty\n  - System.Windows.Window.WindowStyle\n  - System.Windows.Window.WindowStyleProperty\n  langs:\n  - csharp\n  name: Window\n  nameWithType: Window\n  fullName: System.Windows.Window\n  type: Class\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Provides the ability to create, configure, show, and manage the lifetime of windows and dialog boxes.\n  remarks: \"The point of interaction between a user and a standalone application is a window. A [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] window consists of two distinct areas:  \\n  \\n-   A non-client area, which hosts the windows adornments, including an icon, title, System menu, minimize button, maximize button, restore button, close button, and a border.  \\n  \\n-   A client area, which hosts application-specific content.  \\n  \\n A standard window is shown in the following figure:  \\n  \\n ![Window elements](~/add/media/windowoverviewfigure1.PNG \\\"Window elements\\\")  \\n  \\n <xref:System.Windows.Window> encapsulates the ability to create, configure, show, and manage the lifetime of both windows and dialog boxes, and provides the following key services:  \\n  \\n **Lifetime Management**: <xref:System.Windows.Window.Activate%2A>, <xref:System.Windows.Window.Activated>, <xref:System.Windows.Window.Close%2A>, <xref:System.Windows.Window.Closed>, <xref:System.Windows.Window.Closing>, <xref:System.Windows.Window.Deactivated>, <xref:System.Windows.Window.Hide%2A>, <xref:System.Windows.Window.IsActive%2A>, <xref:System.Windows.Window.Show%2A>, <xref:System.Windows.Window.SourceInitialized>.  \\n  \\n **Window Management**: <xref:System.Windows.Window.GetWindow%2A>, <xref:System.Windows.Window.OwnedWindows%2A>, <xref:System.Windows.Window.Owner%2A>.  \\n  \\n **Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A>  \\n  \\n **Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.  \\n  \\n Additionally, <xref:System.Windows.Application> exposes special support for managing all of the windows in an application:  \\n  \\n-   Application maintains a list of all the windows that are currently instantiated in the application. This list is exposed by the <xref:System.Windows.Application.Windows%2A> property.  \\n  \\n-   By default, <xref:System.Windows.Application.MainWindow%2A> is automatically set with a reference to the first <xref:System.Windows.Window> that is instantiated in an application. This thereby making the window the main application window.  \\n  \\n A <xref:System.Windows.Window> can be implemented using markup, markup and code-behind, or code.  \\n  \\n <xref:System.Windows.Window> is primarily used to display windows and dialog boxes for standalone applications. However, for applications that require navigation at the window level, such as wizards, you can use <xref:System.Windows.Navigation.NavigationWindow> instead; <xref:System.Windows.Navigation.NavigationWindow> derives from <xref:System.Windows.Window> and extends it with browser-style navigation support.  \\n  \\n> [!NOTE]\\n>  Islands of navigable content can be incorporated into other content and content containers using <xref:System.Windows.Controls.Frame>.  \\n  \\n <xref:System.Windows.Window> needs `UnmanagedCode` security permission to be instantiated. This has the following consequences:  \\n  \\n-   [!INCLUDE[TLA#tla_clickonce](~/includes/tlasharptla-clickonce-md.md)]-deployed standalone applications will request permission elevation when launched from either the Internet or Local Intranet zones.  \\n  \\n-   [!INCLUDE[TLA2#tla_xbap#plural](~/includes/tla2sharptla-xbapsharpplural-md.md)] that request anything less than full permissions will not be able to instantiate windows or dialog boxes.  \\n  \\n For information about standalone application deployment and security considerations, see [WPF Security Strategy - Platform Security](~/docs/framework/wpf/wpf-security-strategy-platform-security.md).  \\n  \\n A <xref:System.Windows.Window> is a <xref:System.Windows.Controls.ContentControl>, which means that it can contain a single object of any type (such as a string, an image, or a panel). For more information, see the <xref:System.Windows.Controls.ContentControl> class. Also, <xref:System.Windows.Window> is a root element and, therefore, cannot be part of another element's content.  \\n  \\n> [!NOTE]\\n>  The <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties set on a <xref:System.Windows.Window> through a style will not be applied at run time.  \\n  \\n## Customizing the Window Control  \\n To apply the same property settings to multiple <xref:System.Windows.Window> controls, use the <xref:System.Windows.FrameworkElement.Style%2A> property. You can modify the default <xref:System.Windows.Controls.ControlTemplate> to give the control a unique appearance. For more information about creating a <xref:System.Windows.Controls.ControlTemplate>, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).  To see the parts and states that are specific to the <xref:System.Windows.Window>, see [Window Styles and Templates](~/docs/framework/wpf/controls/window-styles-and-templates.md).  \\n  \\n Dependency properties for this control might be set by the controlâ€™s default style.  If a property is set by a default style, the property might change from its default value when the control appears in the application. The default style is determined by which desktop theme is used when the application is running.  For more information, see [Default WPF Themes](http://go.microsoft.com/fwlink/?LinkID=158252).  \\n  \\n> [!NOTE]\\n>  Setting a visual property will only have an effect if that property is both present in <xref:System.Windows.Window> control's default template and is set by using a . You can find a list of visual properties in the \\\"Changing the Visual Structure of a Control\\\" section in [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](~/docs/framework/wpf/controls/customizing-the-appearance-of-an-existing-control.md).\"\n  example:\n  - \"The following example shows how a standard window is defined using only markup:  \\n  \\n [!code-xml[WindowSnippets#WindowMARKUPONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MarkupOnlyWindow.xaml#windowmarkuponly)]  \\n  \\n The following example shows how a standard window is defined using only code:  \\n  \\n [!code-csharp[WindowSnippets#WindowCODEONLY](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/CodeOnlyWindow.cs#windowcodeonly)]\\n [!code-vb[WindowSnippets#WindowCODEONLY](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/codeonlywindow.vb#windowcodeonly)]  \\n  \\n The following example shows how a standard window is defined using a combination of markup and code-behind.  \\n  \\n [!code-xml[WindowSnippets#WindowXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml#windowxaml)]  \\n  \\n [!code-csharp[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowSnippets/CSharp/MainWindow.xaml.cs#windowcodebehind)]\\n [!code-vb[WindowSnippets#WindowCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowSnippets/visualbasic/mainwindow.xaml.vb#windowcodebehind)]\"\n  syntax:\n    content: >-\n      [System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)]\n\n      public class Window : System.Windows.Controls.ContentControl\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.DependencyObject\n  - System.Windows.Media.Visual\n  - System.Windows.UIElement\n  - System.Windows.FrameworkElement\n  - System.Windows.Controls.Control\n  - System.Windows.Controls.ContentControl\n  derivedClasses:\n  - System.Windows.Controls.Ribbon.RibbonWindow\n  - System.Windows.Navigation.NavigationWindow\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Windows.Controls.ContentControl.AddChild(System.Object)\n  - System.Windows.Controls.ContentControl.AddText(System.String)\n  - System.Windows.Controls.ContentControl.Content\n  - System.Windows.Controls.ContentControl.ContentProperty\n  - System.Windows.Controls.ContentControl.ContentStringFormat\n  - System.Windows.Controls.ContentControl.ContentStringFormatProperty\n  - System.Windows.Controls.ContentControl.ContentTemplate\n  - System.Windows.Controls.ContentControl.ContentTemplateProperty\n  - System.Windows.Controls.ContentControl.ContentTemplateSelector\n  - System.Windows.Controls.ContentControl.ContentTemplateSelectorProperty\n  - System.Windows.Controls.ContentControl.HasContent\n  - System.Windows.Controls.ContentControl.HasContentProperty\n  - System.Windows.Controls.ContentControl.OnContentStringFormatChanged(System.String,System.String)\n  - System.Windows.Controls.ContentControl.OnContentTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)\n  - System.Windows.Controls.ContentControl.OnContentTemplateSelectorChanged(System.Windows.Controls.DataTemplateSelector,System.Windows.Controls.DataTemplateSelector)\n  - System.Windows.Controls.ContentControl.ShouldSerializeContent\n  - System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddChild(System.Object)\n  - System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddText(System.String)\n  - System.Windows.Controls.Control.Background\n  - System.Windows.Controls.Control.BackgroundProperty\n  - System.Windows.Controls.Control.BorderBrush\n  - System.Windows.Controls.Control.BorderBrushProperty\n  - System.Windows.Controls.Control.BorderThickness\n  - System.Windows.Controls.Control.BorderThicknessProperty\n  - System.Windows.Controls.Control.FontFamily\n  - System.Windows.Controls.Control.FontFamilyProperty\n  - System.Windows.Controls.Control.FontSize\n  - System.Windows.Controls.Control.FontSizeProperty\n  - System.Windows.Controls.Control.FontStretch\n  - System.Windows.Controls.Control.FontStretchProperty\n  - System.Windows.Controls.Control.FontStyle\n  - System.Windows.Controls.Control.FontStyleProperty\n  - System.Windows.Controls.Control.FontWeight\n  - System.Windows.Controls.Control.FontWeightProperty\n  - System.Windows.Controls.Control.Foreground\n  - System.Windows.Controls.Control.ForegroundProperty\n  - System.Windows.Controls.Control.HandlesScrolling\n  - System.Windows.Controls.Control.HorizontalContentAlignment\n  - System.Windows.Controls.Control.HorizontalContentAlignmentProperty\n  - System.Windows.Controls.Control.IsTabStop\n  - System.Windows.Controls.Control.IsTabStopProperty\n  - System.Windows.Controls.Control.MouseDoubleClick\n  - System.Windows.Controls.Control.MouseDoubleClickEvent\n  - System.Windows.Controls.Control.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.Controls.Control.OnPreviewMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)\n  - System.Windows.Controls.Control.Padding\n  - System.Windows.Controls.Control.PaddingProperty\n  - System.Windows.Controls.Control.PreviewMouseDoubleClick\n  - System.Windows.Controls.Control.PreviewMouseDoubleClickEvent\n  - System.Windows.Controls.Control.TabIndex\n  - System.Windows.Controls.Control.TabIndexProperty\n  - System.Windows.Controls.Control.Template\n  - System.Windows.Controls.Control.TemplateProperty\n  - System.Windows.Controls.Control.ToString\n  - System.Windows.Controls.Control.VerticalContentAlignment\n  - System.Windows.Controls.Control.VerticalContentAlignmentProperty\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.DependencyObjectType\n  - System.Windows.DependencyObject.Equals(System.Object)\n  - System.Windows.DependencyObject.GetHashCode\n  - System.Windows.DependencyObject.GetLocalValueEnumerator\n  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.IsSealed\n  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  - System.Windows.FrameworkElement.ActualHeight\n  - System.Windows.FrameworkElement.ActualHeightProperty\n  - System.Windows.FrameworkElement.ActualWidth\n  - System.Windows.FrameworkElement.ActualWidthProperty\n  - System.Windows.FrameworkElement.AddLogicalChild(System.Object)\n  - System.Windows.FrameworkElement.ApplyTemplate\n  - System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)\n  - System.Windows.FrameworkElement.BeginInit\n  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)\n  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)\n  - System.Windows.FrameworkElement.BindingGroup\n  - System.Windows.FrameworkElement.BindingGroupProperty\n  - System.Windows.FrameworkElement.BringIntoView\n  - System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)\n  - System.Windows.FrameworkElement.ContextMenu\n  - System.Windows.FrameworkElement.ContextMenuClosing\n  - System.Windows.FrameworkElement.ContextMenuClosingEvent\n  - System.Windows.FrameworkElement.ContextMenuOpening\n  - System.Windows.FrameworkElement.ContextMenuOpeningEvent\n  - System.Windows.FrameworkElement.ContextMenuProperty\n  - System.Windows.FrameworkElement.Cursor\n  - System.Windows.FrameworkElement.CursorProperty\n  - System.Windows.FrameworkElement.DataContext\n  - System.Windows.FrameworkElement.DataContextChanged\n  - System.Windows.FrameworkElement.DataContextProperty\n  - System.Windows.FrameworkElement.DefaultStyleKey\n  - System.Windows.FrameworkElement.DefaultStyleKeyProperty\n  - System.Windows.FrameworkElement.EndInit\n  - System.Windows.FrameworkElement.FindName(System.String)\n  - System.Windows.FrameworkElement.FindResource(System.Object)\n  - System.Windows.FrameworkElement.FlowDirection\n  - System.Windows.FrameworkElement.FlowDirectionProperty\n  - System.Windows.FrameworkElement.FocusVisualStyle\n  - System.Windows.FrameworkElement.FocusVisualStyleProperty\n  - System.Windows.FrameworkElement.ForceCursor\n  - System.Windows.FrameworkElement.ForceCursorProperty\n  - System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)\n  - System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)\n  - System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)\n  - System.Windows.FrameworkElement.GetTemplateChild(System.String)\n  - System.Windows.FrameworkElement.GetUIParentCore\n  - System.Windows.FrameworkElement.GetVisualChild(System.Int32)\n  - System.Windows.FrameworkElement.Height\n  - System.Windows.FrameworkElement.HeightProperty\n  - System.Windows.FrameworkElement.HorizontalAlignment\n  - System.Windows.FrameworkElement.HorizontalAlignmentProperty\n  - System.Windows.FrameworkElement.InheritanceBehavior\n  - System.Windows.FrameworkElement.Initialized\n  - System.Windows.FrameworkElement.InputScope\n  - System.Windows.FrameworkElement.InputScopeProperty\n  - System.Windows.FrameworkElement.IsInitialized\n  - System.Windows.FrameworkElement.IsLoaded\n  - System.Windows.FrameworkElement.Language\n  - System.Windows.FrameworkElement.LanguageProperty\n  - System.Windows.FrameworkElement.LayoutTransform\n  - System.Windows.FrameworkElement.LayoutTransformProperty\n  - System.Windows.FrameworkElement.Loaded\n  - System.Windows.FrameworkElement.LoadedEvent\n  - System.Windows.FrameworkElement.Margin\n  - System.Windows.FrameworkElement.MarginProperty\n  - System.Windows.FrameworkElement.MaxHeight\n  - System.Windows.FrameworkElement.MaxHeightProperty\n  - System.Windows.FrameworkElement.MaxWidth\n  - System.Windows.FrameworkElement.MaxWidthProperty\n  - System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)\n  - System.Windows.FrameworkElement.MinHeight\n  - System.Windows.FrameworkElement.MinHeightProperty\n  - System.Windows.FrameworkElement.MinWidth\n  - System.Windows.FrameworkElement.MinWidthProperty\n  - System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)\n  - System.Windows.FrameworkElement.Name\n  - System.Windows.FrameworkElement.NameProperty\n  - System.Windows.FrameworkElement.OnApplyTemplate\n  - System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)\n  - System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)\n  - System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)\n  - System.Windows.FrameworkElement.OnInitialized(System.EventArgs)\n  - System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)\n  - System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)\n  - System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)\n  - System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)\n  - System.Windows.FrameworkElement.OverridesDefaultStyle\n  - System.Windows.FrameworkElement.OverridesDefaultStyleProperty\n  - System.Windows.FrameworkElement.Parent\n  - System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)\n  - System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  - System.Windows.FrameworkElement.RegisterName(System.String,System.Object)\n  - System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)\n  - System.Windows.FrameworkElement.RequestBringIntoView\n  - System.Windows.FrameworkElement.RequestBringIntoViewEvent\n  - System.Windows.FrameworkElement.Resources\n  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)\n  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)\n  - System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)\n  - System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.FrameworkElement.ShouldSerializeResources\n  - System.Windows.FrameworkElement.ShouldSerializeStyle\n  - System.Windows.FrameworkElement.ShouldSerializeTriggers\n  - System.Windows.FrameworkElement.SizeChanged\n  - System.Windows.FrameworkElement.SizeChangedEvent\n  - System.Windows.FrameworkElement.SourceUpdated\n  - System.Windows.FrameworkElement.Style\n  - System.Windows.FrameworkElement.StyleProperty\n  - System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)\n  - System.Windows.FrameworkElement.Tag\n  - System.Windows.FrameworkElement.TagProperty\n  - System.Windows.FrameworkElement.TargetUpdated\n  - System.Windows.FrameworkElement.TemplatedParent\n  - System.Windows.FrameworkElement.ToolTip\n  - System.Windows.FrameworkElement.ToolTipClosing\n  - System.Windows.FrameworkElement.ToolTipClosingEvent\n  - System.Windows.FrameworkElement.ToolTipOpening\n  - System.Windows.FrameworkElement.ToolTipOpeningEvent\n  - System.Windows.FrameworkElement.ToolTipProperty\n  - System.Windows.FrameworkElement.Triggers\n  - System.Windows.FrameworkElement.TryFindResource(System.Object)\n  - System.Windows.FrameworkElement.Unloaded\n  - System.Windows.FrameworkElement.UnloadedEvent\n  - System.Windows.FrameworkElement.UnregisterName(System.String)\n  - System.Windows.FrameworkElement.UpdateDefaultStyle\n  - System.Windows.FrameworkElement.UseLayoutRounding\n  - System.Windows.FrameworkElement.UseLayoutRoundingProperty\n  - System.Windows.FrameworkElement.VerticalAlignment\n  - System.Windows.FrameworkElement.VerticalAlignmentProperty\n  - System.Windows.FrameworkElement.VisualChildrenCount\n  - System.Windows.FrameworkElement.Width\n  - System.Windows.FrameworkElement.WidthProperty\n  - System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)\n  - System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)\n  - System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)\n  - System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)\n  - System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  - System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)\n  - System.Windows.Media.Visual.PointToScreen(System.Windows.Point)\n  - System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)\n  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)\n  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)\n  - System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)\n  - System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)\n  - System.Windows.Media.Visual.VisualBitmapEffect\n  - System.Windows.Media.Visual.VisualBitmapEffectInput\n  - System.Windows.Media.Visual.VisualBitmapScalingMode\n  - System.Windows.Media.Visual.VisualCacheMode\n  - System.Windows.Media.Visual.VisualClearTypeHint\n  - System.Windows.Media.Visual.VisualClip\n  - System.Windows.Media.Visual.VisualEdgeMode\n  - System.Windows.Media.Visual.VisualEffect\n  - System.Windows.Media.Visual.VisualOffset\n  - System.Windows.Media.Visual.VisualOpacity\n  - System.Windows.Media.Visual.VisualOpacityMask\n  - System.Windows.Media.Visual.VisualParent\n  - System.Windows.Media.Visual.VisualScrollableAreaClip\n  - System.Windows.Media.Visual.VisualTextHintingMode\n  - System.Windows.Media.Visual.VisualTextRenderingMode\n  - System.Windows.Media.Visual.VisualTransform\n  - System.Windows.Media.Visual.VisualXSnappingGuidelines\n  - System.Windows.Media.Visual.VisualYSnappingGuidelines\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)\n  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  - System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)\n  - System.Windows.UIElement.AllowDrop\n  - System.Windows.UIElement.AllowDropProperty\n  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.UIElement.AreAnyTouchesCaptured\n  - System.Windows.UIElement.AreAnyTouchesCapturedProperty\n  - System.Windows.UIElement.AreAnyTouchesCapturedWithin\n  - System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty\n  - System.Windows.UIElement.AreAnyTouchesDirectlyOver\n  - System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty\n  - System.Windows.UIElement.AreAnyTouchesOver\n  - System.Windows.UIElement.AreAnyTouchesOverProperty\n  - System.Windows.UIElement.Arrange(System.Windows.Rect)\n  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.UIElement.BitmapEffect\n  - System.Windows.UIElement.BitmapEffectInput\n  - System.Windows.UIElement.BitmapEffectInputProperty\n  - System.Windows.UIElement.BitmapEffectProperty\n  - System.Windows.UIElement.CacheMode\n  - System.Windows.UIElement.CacheModeProperty\n  - System.Windows.UIElement.CaptureMouse\n  - System.Windows.UIElement.CaptureStylus\n  - System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)\n  - System.Windows.UIElement.Clip\n  - System.Windows.UIElement.ClipProperty\n  - System.Windows.UIElement.ClipToBounds\n  - System.Windows.UIElement.ClipToBoundsProperty\n  - System.Windows.UIElement.CommandBindings\n  - System.Windows.UIElement.DesiredSize\n  - System.Windows.UIElement.DragEnter\n  - System.Windows.UIElement.DragEnterEvent\n  - System.Windows.UIElement.DragLeave\n  - System.Windows.UIElement.DragLeaveEvent\n  - System.Windows.UIElement.DragOver\n  - System.Windows.UIElement.DragOverEvent\n  - System.Windows.UIElement.Drop\n  - System.Windows.UIElement.DropEvent\n  - System.Windows.UIElement.Effect\n  - System.Windows.UIElement.EffectProperty\n  - System.Windows.UIElement.Focus\n  - System.Windows.UIElement.Focusable\n  - System.Windows.UIElement.FocusableChanged\n  - System.Windows.UIElement.FocusableProperty\n  - System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  - System.Windows.UIElement.GiveFeedback\n  - System.Windows.UIElement.GiveFeedbackEvent\n  - System.Windows.UIElement.GotFocus\n  - System.Windows.UIElement.GotFocusEvent\n  - System.Windows.UIElement.GotKeyboardFocus\n  - System.Windows.UIElement.GotKeyboardFocusEvent\n  - System.Windows.UIElement.GotMouseCapture\n  - System.Windows.UIElement.GotMouseCaptureEvent\n  - System.Windows.UIElement.GotStylusCapture\n  - System.Windows.UIElement.GotStylusCaptureEvent\n  - System.Windows.UIElement.GotTouchCapture\n  - System.Windows.UIElement.GotTouchCaptureEvent\n  - System.Windows.UIElement.HasAnimatedProperties\n  - System.Windows.UIElement.HasEffectiveKeyboardFocus\n  - System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)\n  - System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)\n  - System.Windows.UIElement.InputBindings\n  - System.Windows.UIElement.InputHitTest(System.Windows.Point)\n  - System.Windows.UIElement.InvalidateArrange\n  - System.Windows.UIElement.InvalidateMeasure\n  - System.Windows.UIElement.InvalidateVisual\n  - System.Windows.UIElement.IsArrangeValid\n  - System.Windows.UIElement.IsEnabled\n  - System.Windows.UIElement.IsEnabledChanged\n  - System.Windows.UIElement.IsEnabledCore\n  - System.Windows.UIElement.IsEnabledProperty\n  - System.Windows.UIElement.IsFocused\n  - System.Windows.UIElement.IsFocusedProperty\n  - System.Windows.UIElement.IsHitTestVisible\n  - System.Windows.UIElement.IsHitTestVisibleChanged\n  - System.Windows.UIElement.IsHitTestVisibleProperty\n  - System.Windows.UIElement.IsInputMethodEnabled\n  - System.Windows.UIElement.IsKeyboardFocused\n  - System.Windows.UIElement.IsKeyboardFocusedChanged\n  - System.Windows.UIElement.IsKeyboardFocusedProperty\n  - System.Windows.UIElement.IsKeyboardFocusWithin\n  - System.Windows.UIElement.IsKeyboardFocusWithinChanged\n  - System.Windows.UIElement.IsKeyboardFocusWithinProperty\n  - System.Windows.UIElement.IsManipulationEnabled\n  - System.Windows.UIElement.IsManipulationEnabledProperty\n  - System.Windows.UIElement.IsMeasureValid\n  - System.Windows.UIElement.IsMouseCaptured\n  - System.Windows.UIElement.IsMouseCapturedChanged\n  - System.Windows.UIElement.IsMouseCapturedProperty\n  - System.Windows.UIElement.IsMouseCaptureWithin\n  - System.Windows.UIElement.IsMouseCaptureWithinChanged\n  - System.Windows.UIElement.IsMouseCaptureWithinProperty\n  - System.Windows.UIElement.IsMouseDirectlyOver\n  - System.Windows.UIElement.IsMouseDirectlyOverChanged\n  - System.Windows.UIElement.IsMouseDirectlyOverProperty\n  - System.Windows.UIElement.IsMouseOver\n  - System.Windows.UIElement.IsMouseOverProperty\n  - System.Windows.UIElement.IsStylusCaptured\n  - System.Windows.UIElement.IsStylusCapturedChanged\n  - System.Windows.UIElement.IsStylusCapturedProperty\n  - System.Windows.UIElement.IsStylusCaptureWithin\n  - System.Windows.UIElement.IsStylusCaptureWithinChanged\n  - System.Windows.UIElement.IsStylusCaptureWithinProperty\n  - System.Windows.UIElement.IsStylusDirectlyOver\n  - System.Windows.UIElement.IsStylusDirectlyOverChanged\n  - System.Windows.UIElement.IsStylusDirectlyOverProperty\n  - System.Windows.UIElement.IsStylusOver\n  - System.Windows.UIElement.IsStylusOverProperty\n  - System.Windows.UIElement.IsVisible\n  - System.Windows.UIElement.IsVisibleChanged\n  - System.Windows.UIElement.IsVisibleProperty\n  - System.Windows.UIElement.KeyDown\n  - System.Windows.UIElement.KeyDownEvent\n  - System.Windows.UIElement.KeyUp\n  - System.Windows.UIElement.KeyUpEvent\n  - System.Windows.UIElement.LayoutUpdated\n  - System.Windows.UIElement.LostFocus\n  - System.Windows.UIElement.LostFocusEvent\n  - System.Windows.UIElement.LostKeyboardFocus\n  - System.Windows.UIElement.LostKeyboardFocusEvent\n  - System.Windows.UIElement.LostMouseCapture\n  - System.Windows.UIElement.LostMouseCaptureEvent\n  - System.Windows.UIElement.LostStylusCapture\n  - System.Windows.UIElement.LostStylusCaptureEvent\n  - System.Windows.UIElement.LostTouchCapture\n  - System.Windows.UIElement.LostTouchCaptureEvent\n  - System.Windows.UIElement.ManipulationBoundaryFeedback\n  - System.Windows.UIElement.ManipulationBoundaryFeedbackEvent\n  - System.Windows.UIElement.ManipulationCompleted\n  - System.Windows.UIElement.ManipulationCompletedEvent\n  - System.Windows.UIElement.ManipulationDelta\n  - System.Windows.UIElement.ManipulationDeltaEvent\n  - System.Windows.UIElement.ManipulationInertiaStarting\n  - System.Windows.UIElement.ManipulationInertiaStartingEvent\n  - System.Windows.UIElement.ManipulationStarted\n  - System.Windows.UIElement.ManipulationStartedEvent\n  - System.Windows.UIElement.ManipulationStarting\n  - System.Windows.UIElement.ManipulationStartingEvent\n  - System.Windows.UIElement.Measure(System.Windows.Size)\n  - System.Windows.UIElement.MouseDown\n  - System.Windows.UIElement.MouseDownEvent\n  - System.Windows.UIElement.MouseEnter\n  - System.Windows.UIElement.MouseEnterEvent\n  - System.Windows.UIElement.MouseLeave\n  - System.Windows.UIElement.MouseLeaveEvent\n  - System.Windows.UIElement.MouseLeftButtonDown\n  - System.Windows.UIElement.MouseLeftButtonDownEvent\n  - System.Windows.UIElement.MouseLeftButtonUp\n  - System.Windows.UIElement.MouseLeftButtonUpEvent\n  - System.Windows.UIElement.MouseMove\n  - System.Windows.UIElement.MouseMoveEvent\n  - System.Windows.UIElement.MouseRightButtonDown\n  - System.Windows.UIElement.MouseRightButtonDownEvent\n  - System.Windows.UIElement.MouseRightButtonUp\n  - System.Windows.UIElement.MouseRightButtonUpEvent\n  - System.Windows.UIElement.MouseUp\n  - System.Windows.UIElement.MouseUpEvent\n  - System.Windows.UIElement.MouseWheel\n  - System.Windows.UIElement.MouseWheelEvent\n  - System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)\n  - System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)\n  - System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  - System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)\n  - System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)\n  - System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)\n  - System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)\n  - System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)\n  - System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)\n  - System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)\n  - System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)\n  - System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  - System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)\n  - System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  - System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)\n  - System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)\n  - System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  - System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  - System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)\n  - System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  - System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)\n  - System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)\n  - System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  - System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)\n  - System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  - System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)\n  - System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)\n  - System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)\n  - System.Windows.UIElement.Opacity\n  - System.Windows.UIElement.OpacityMask\n  - System.Windows.UIElement.OpacityMaskProperty\n  - System.Windows.UIElement.OpacityProperty\n  - System.Windows.UIElement.PersistId\n  - System.Windows.UIElement.PreviewDragEnter\n  - System.Windows.UIElement.PreviewDragEnterEvent\n  - System.Windows.UIElement.PreviewDragLeave\n  - System.Windows.UIElement.PreviewDragLeaveEvent\n  - System.Windows.UIElement.PreviewDragOver\n  - System.Windows.UIElement.PreviewDragOverEvent\n  - System.Windows.UIElement.PreviewDrop\n  - System.Windows.UIElement.PreviewDropEvent\n  - System.Windows.UIElement.PreviewGiveFeedback\n  - System.Windows.UIElement.PreviewGiveFeedbackEvent\n  - System.Windows.UIElement.PreviewGotKeyboardFocus\n  - System.Windows.UIElement.PreviewGotKeyboardFocusEvent\n  - System.Windows.UIElement.PreviewKeyDown\n  - System.Windows.UIElement.PreviewKeyDownEvent\n  - System.Windows.UIElement.PreviewKeyUp\n  - System.Windows.UIElement.PreviewKeyUpEvent\n  - System.Windows.UIElement.PreviewLostKeyboardFocus\n  - System.Windows.UIElement.PreviewLostKeyboardFocusEvent\n  - System.Windows.UIElement.PreviewMouseDown\n  - System.Windows.UIElement.PreviewMouseDownEvent\n  - System.Windows.UIElement.PreviewMouseLeftButtonDown\n  - System.Windows.UIElement.PreviewMouseLeftButtonDownEvent\n  - System.Windows.UIElement.PreviewMouseLeftButtonUp\n  - System.Windows.UIElement.PreviewMouseLeftButtonUpEvent\n  - System.Windows.UIElement.PreviewMouseMove\n  - System.Windows.UIElement.PreviewMouseMoveEvent\n  - System.Windows.UIElement.PreviewMouseRightButtonDown\n  - System.Windows.UIElement.PreviewMouseRightButtonDownEvent\n  - System.Windows.UIElement.PreviewMouseRightButtonUp\n  - System.Windows.UIElement.PreviewMouseRightButtonUpEvent\n  - System.Windows.UIElement.PreviewMouseUp\n  - System.Windows.UIElement.PreviewMouseUpEvent\n  - System.Windows.UIElement.PreviewMouseWheel\n  - System.Windows.UIElement.PreviewMouseWheelEvent\n  - System.Windows.UIElement.PreviewQueryContinueDrag\n  - System.Windows.UIElement.PreviewQueryContinueDragEvent\n  - System.Windows.UIElement.PreviewStylusButtonDown\n  - System.Windows.UIElement.PreviewStylusButtonDownEvent\n  - System.Windows.UIElement.PreviewStylusButtonUp\n  - System.Windows.UIElement.PreviewStylusButtonUpEvent\n  - System.Windows.UIElement.PreviewStylusDown\n  - System.Windows.UIElement.PreviewStylusDownEvent\n  - System.Windows.UIElement.PreviewStylusInAirMove\n  - System.Windows.UIElement.PreviewStylusInAirMoveEvent\n  - System.Windows.UIElement.PreviewStylusInRange\n  - System.Windows.UIElement.PreviewStylusInRangeEvent\n  - System.Windows.UIElement.PreviewStylusMove\n  - System.Windows.UIElement.PreviewStylusMoveEvent\n  - System.Windows.UIElement.PreviewStylusOutOfRange\n  - System.Windows.UIElement.PreviewStylusOutOfRangeEvent\n  - System.Windows.UIElement.PreviewStylusSystemGesture\n  - System.Windows.UIElement.PreviewStylusSystemGestureEvent\n  - System.Windows.UIElement.PreviewStylusUp\n  - System.Windows.UIElement.PreviewStylusUpEvent\n  - System.Windows.UIElement.PreviewTextInput\n  - System.Windows.UIElement.PreviewTextInputEvent\n  - System.Windows.UIElement.PreviewTouchDown\n  - System.Windows.UIElement.PreviewTouchDownEvent\n  - System.Windows.UIElement.PreviewTouchMove\n  - System.Windows.UIElement.PreviewTouchMoveEvent\n  - System.Windows.UIElement.PreviewTouchUp\n  - System.Windows.UIElement.PreviewTouchUpEvent\n  - System.Windows.UIElement.QueryContinueDrag\n  - System.Windows.UIElement.QueryContinueDragEvent\n  - System.Windows.UIElement.QueryCursor\n  - System.Windows.UIElement.QueryCursorEvent\n  - System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)\n  - System.Windows.UIElement.ReleaseAllTouchCaptures\n  - System.Windows.UIElement.ReleaseMouseCapture\n  - System.Windows.UIElement.ReleaseStylusCapture\n  - System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)\n  - System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)\n  - System.Windows.UIElement.RenderSize\n  - System.Windows.UIElement.RenderTransform\n  - System.Windows.UIElement.RenderTransformOrigin\n  - System.Windows.UIElement.RenderTransformOriginProperty\n  - System.Windows.UIElement.RenderTransformProperty\n  - System.Windows.UIElement.ShouldSerializeCommandBindings\n  - System.Windows.UIElement.ShouldSerializeInputBindings\n  - System.Windows.UIElement.SnapsToDevicePixels\n  - System.Windows.UIElement.SnapsToDevicePixelsProperty\n  - System.Windows.UIElement.StylusButtonDown\n  - System.Windows.UIElement.StylusButtonDownEvent\n  - System.Windows.UIElement.StylusButtonUp\n  - System.Windows.UIElement.StylusButtonUpEvent\n  - System.Windows.UIElement.StylusDown\n  - System.Windows.UIElement.StylusDownEvent\n  - System.Windows.UIElement.StylusEnter\n  - System.Windows.UIElement.StylusEnterEvent\n  - System.Windows.UIElement.StylusInAirMove\n  - System.Windows.UIElement.StylusInAirMoveEvent\n  - System.Windows.UIElement.StylusInRange\n  - System.Windows.UIElement.StylusInRangeEvent\n  - System.Windows.UIElement.StylusLeave\n  - System.Windows.UIElement.StylusLeaveEvent\n  - System.Windows.UIElement.StylusMove\n  - System.Windows.UIElement.StylusMoveEvent\n  - System.Windows.UIElement.StylusOutOfRange\n  - System.Windows.UIElement.StylusOutOfRangeEvent\n  - System.Windows.UIElement.StylusPlugIns\n  - System.Windows.UIElement.StylusSystemGesture\n  - System.Windows.UIElement.StylusSystemGestureEvent\n  - System.Windows.UIElement.StylusUp\n  - System.Windows.UIElement.StylusUpEvent\n  - System.Windows.UIElement.TextInput\n  - System.Windows.UIElement.TextInputEvent\n  - System.Windows.UIElement.TouchDown\n  - System.Windows.UIElement.TouchDownEvent\n  - System.Windows.UIElement.TouchEnter\n  - System.Windows.UIElement.TouchEnterEvent\n  - System.Windows.UIElement.TouchesCaptured\n  - System.Windows.UIElement.TouchesCapturedWithin\n  - System.Windows.UIElement.TouchesDirectlyOver\n  - System.Windows.UIElement.TouchesOver\n  - System.Windows.UIElement.TouchLeave\n  - System.Windows.UIElement.TouchLeaveEvent\n  - System.Windows.UIElement.TouchMove\n  - System.Windows.UIElement.TouchMoveEvent\n  - System.Windows.UIElement.TouchUp\n  - System.Windows.UIElement.TouchUpEvent\n  - System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)\n  - System.Windows.UIElement.Uid\n  - System.Windows.UIElement.UidProperty\n  - System.Windows.UIElement.UpdateLayout\n  - System.Windows.UIElement.Visibility\n  - System.Windows.UIElement.VisibilityProperty\n  attributes:\n  - type: System.Windows.LocalizabilityAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.#ctor\n  commentId: M:System.Windows.Window.#ctor\n  id: '#ctor'\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: Window()\n  nameWithType: Window.Window()\n  fullName: Window.Window()\n  type: Constructor\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Window\"></xref> class.\n  remarks: \"The constructor initializes the <xref:System.Windows.FrameworkElement.Width%2A>, <xref:System.Windows.FrameworkElement.Height%2A>, <xref:System.Windows.Window.Top%2A>, and <xref:System.Windows.Window.Left%2A> properties to their default <xref:System.Windows.Window> values.  \\n  \\n If a window is created within an <xref:System.AppDomain> that has an <xref:System.Windows.Application> object, the constructor adds the <xref:System.Windows.Window> object to the set of <xref:System.Windows.Application>-managed windows via the <xref:System.Windows.Application.Windows%2A> property of the <xref:System.Windows.Application> object.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public Window ();\n    parameters: []\n  overload: System.Windows.Window.#ctor*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Window.Activate\n  commentId: M:System.Windows.Window.Activate\n  id: Activate\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: Activate()\n  nameWithType: Window.Activate()\n  fullName: Window.Activate()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Attempts to bring the window to the foreground and activates it.\n  remarks: \"The rules that determine whether the window is activated are the same as those used by the [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] `SetForegroundWindow` function (User32.dll).  \\n  \\n If the window is activated in a [!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] application that is not the user's foreground application, <xref:System.Windows.Application.Activated> event is raised.  \\n  \\n> [!NOTE]\\n>  This method cannot be called when a window is hosted in a browser.\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public bool Activate ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Windows.Window\"></xref> was successfully activated; otherwise, `false`.'\n  overload: System.Windows.Window.Activate*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.Activated\n  commentId: E:System.Windows.Window.Activated\n  id: Activated\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: Activated\n  nameWithType: Window.Activated\n  fullName: Window.Activated\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs when a window becomes the foreground window.\n  remarks: \"A window is activated (becomes the foreground window) when:  \\n  \\n-   The window is first opened.  \\n  \\n-   A user switches to a window by selecting it with the mouse, pressing ALT+TAB, or from Task Manager.  \\n  \\n-   A user clicks the window's taskbar button.  \\n  \\n Windows that need to detect when they become activate can handle the <xref:System.Windows.Window.Activated> event.  \\n  \\n After a window is first activated, it may be deactivated and reactivated many times during its lifetime. If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.  \\n  \\n An application can also be <xref:System.Windows.Application.Activated>.\"\n  syntax:\n    content: public event EventHandler Activated;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.AllowsTransparency\n  commentId: P:System.Windows.Window.AllowsTransparency\n  id: AllowsTransparency\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: AllowsTransparency\n  nameWithType: Window.AllowsTransparency\n  fullName: Window.AllowsTransparency\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether a window's client area supports transparency.\n  remarks: \"When the <xref:System.Windows.Controls.Control.Background%2A> property of a window is set to a transparent color, using <xref:System.Windows.Media.Brushes.Transparent%2A> for example, the window remains opaque. This means that the desktop and any running applications \\\"beneath\\\" the window cannot be seen. To enable this type of transparency, <xref:System.Windows.Window.AllowsTransparency%2A> must be set to `true`.  \\n  \\n <xref:System.Windows.Window.AllowsTransparency%2A> exists to facilitate the creation of non-rectangular windows, and, consequently, when <xref:System.Windows.Window.AllowsTransparency%2A> is set to `true`, a window's <xref:System.Windows.Window.WindowStyle%2A> property must be set to <xref:System.Windows.WindowStyle.None>.  \\n  \\n<a name=\\\"dependencyPropertyInfo_WindowAllowsTransparency\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Window.AllowsTransparencyProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool AllowsTransparency { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the window supports transparency; otherwise, `false`.'\n  overload: System.Windows.Window.AllowsTransparency*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: A window that has a <xref href=\"System.Windows.Window.WindowStyle\"></xref> value of anything other than <xref href=\"System.Windows.WindowStyle.None\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.AllowsTransparencyProperty\n  commentId: F:System.Windows.Window.AllowsTransparencyProperty\n  id: AllowsTransparencyProperty\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: AllowsTransparencyProperty\n  nameWithType: Window.AllowsTransparencyProperty\n  fullName: Window.AllowsTransparencyProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.Window.AllowsTransparency\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty AllowsTransparencyProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.ArrangeOverride(System.Windows.Size)\n  commentId: M:System.Windows.Window.ArrangeOverride(System.Windows.Size)\n  id: ArrangeOverride(System.Windows.Size)\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: ArrangeOverride(Size)\n  nameWithType: Window.ArrangeOverride(Size)\n  fullName: Window.ArrangeOverride(Size)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Override this method to arrange and size a window and its child elements.\n  remarks: \"<xref:System.Windows.Window.ArrangeOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>. If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.ArrangeOverride%2A> is called.  \\n  \\n> [!NOTE]\\n>  When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.\"\n  syntax:\n    content: protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeBounds);\n    parameters:\n    - id: arrangeBounds\n      type: System.Windows.Size\n      description: A <xref href=\"System.Windows.Size\"></xref> that reflects the final size that the window should use to arrange itself and its children.\n    return:\n      type: System.Windows.Size\n      description: A <xref href=\"System.Windows.Size\"></xref> that reflects the actual size that was used.\n  overload: System.Windows.Window.ArrangeOverride*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.Close\n  commentId: M:System.Windows.Window.Close\n  id: Close\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: Close()\n  nameWithType: Window.Close()\n  fullName: Window.Close()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Manually closes a <xref href=\"System.Windows.Window\"></xref>.\n  remarks: \"A <xref:System.Windows.Window> can be closed using one of several, well-known, system-provided mechanisms located in its title bar, including:  \\n  \\n-   ALT+F4.  \\n  \\n-   System menu &#124; **Close**.  \\n  \\n-   **Close** button.  \\n  \\n A <xref:System.Windows.Window> can also be closed using one of several well-known mechanisms within the client area that are provided by developers, including:  \\n  \\n-   **File** &#124; **Exit** on a main window.  \\n  \\n-   **File** &#124; **Close** or a **Close** button on a child window.  \\n  \\n> [!NOTE]\\n>  **OK** and **Cancel** buttons on a dialog box are also developer-provided, although will likely set <xref:System.Windows.Window.DialogResult%2A>, which automatically closes a window that was opened by calling <xref:System.Windows.Window.ShowDialog%2A>.  \\n  \\n These mechanisms require you to explicitly call <xref:System.Windows.Window.Close%2A> to close a window.  \\n  \\n> [!NOTE]\\n>  If a window, opened by calling <xref:System.Windows.Window.ShowDialog%2A>, and with a <xref:System.Windows.Controls.Button> with its <xref:System.Windows.Controls.Button.IsCancel%2A> property set to true, will automatically close when the button is either clicked, or ESC is pressed. If the window was opened using <xref:System.Windows.Window.Show%2A>, however, <xref:System.Windows.Window.Close%2A> must be explicitly called, such as from <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the <xref:System.Windows.Controls.Button>.  \\n  \\n Closing a window causes the <xref:System.Windows.Window.Closing> event to be raised. If the <xref:System.Windows.Window.Closing> event isn't canceled, the following occurs:  \\n  \\n-   The <xref:System.Windows.Window> is removed from <xref:System.Windows.Application.Windows%2A?displayProperty=fullName> (if an <xref:System.Windows.Application> object exists).  \\n  \\n-   The <xref:System.Windows.Window> is removed from the owner <xref:System.Windows.Window> if the owner/owned relationship was established before the owned <xref:System.Windows.Window> was shown and after the owner <xref:System.Windows.Window> was opened.  \\n  \\n-   The <xref:System.Windows.Window.Closed> event is raised.  \\n  \\n-   Unmanaged resources created by the <xref:System.Windows.Window> are disposed.  \\n  \\n-   If <xref:System.Windows.Window.ShowDialog%2A> was called to show the <xref:System.Windows.Window>, <xref:System.Windows.Window.ShowDialog%2A> returns.  \\n  \\n Closing a <xref:System.Windows.Window> causes any windows that it owns to be closed. Furthermore, closing a <xref:System.Windows.Window> may cause an application to stop running depending on how the <xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName> property is set.  \\n  \\n> [!NOTE]\\n>  This method cannot be called when a window is hosted in a browser.\"\n  example:\n  - \"The following example shows a **File** &#124; **Exit** menu being handled to explicitly call <xref:System.Windows.Window.Close%2A>.  \\n  \\n [!code-xml[WindowCloseSnippets#WindowCloseXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml#windowclosexaml)]  \\n  \\n [!code-csharp[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowCloseSnippets/CSharp/MainWindow.xaml.cs#windowclosecodebehind)]\\n [!code-vb[WindowCloseSnippets#WindowCloseCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowCloseSnippets/visualbasic/mainwindow.xaml.vb#windowclosecodebehind)]\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void Close ();\n    parameters: []\n  overload: System.Windows.Window.Close*\n  exceptions: []\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.Closed\n  commentId: E:System.Windows.Window.Closed\n  id: Closed\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: Closed\n  nameWithType: Window.Closed\n  fullName: Window.Closed\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs when the window is about to close.\n  remarks: Once this event is raised, a window cannot be prevented from closing.\n  syntax:\n    content: public event EventHandler Closed;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Windows.UIElement.Visibility\"></xref> is set, or <xref href=\"System.Windows.Window.Show\"></xref>, <xref href=\"System.Windows.Window.ShowDialog\"></xref>, or <xref href=\"System.Windows.Window.Hide\"></xref> is called while a window is closing.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.Closing\n  commentId: E:System.Windows.Window.Closing\n  id: Closing\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: Closing\n  nameWithType: Window.Closing\n  fullName: Window.Closing\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs directly after <xref href=\"System.Windows.Window.Close\"></xref> is called, and can be handled to cancel window closure.\n  remarks: \"<xref:System.Windows.Window.Closing> can be handled to detect when a window is being closed (for example, when <xref:System.Windows.Window.Close%2A> is called). Furthermore, <xref:System.Windows.Window.Closing> can be used to prevent a window from closing. To prevent a window from closing, you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> argument to `true`.  \\n  \\n The <xref:System.Windows.Window.Closing> event is raised when <xref:System.Windows.Window.Close%2A> is called, if a window's Close button is clicked, or if the user presses ALT+F4.  \\n  \\n If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised. If the owner of a window is closed (see <xref:System.Windows.Window.Owner%2A>), <xref:System.Windows.Window.Closing> is not raised on the owned window.  \\n  \\n If <xref:System.Windows.Application.Shutdown%2A> is called, the <xref:System.Windows.Window.Closing> event for each window is raised. However, if <xref:System.Windows.Window.Closing> is canceled, cancellation is ignored.  \\n  \\n If a session ends because a user logs off or shuts down, <xref:System.Windows.Window.Closing> is not raised; handle <xref:System.Windows.Application.SessionEnding> to implement code that cancels application closure.  \\n  \\n If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to reinstantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method. Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to reopen it.\"\n  example:\n  - \"The following example demonstrates a <xref:System.Windows.Window> that determines whether it needs user intervention to close.  \\n  \\n [!code-xml[WindowClosingSnippets#WindowClosingXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml#windowclosingxaml1)]  \\n[!code-xml[WindowClosingSnippets#WindowClosingXAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml#windowclosingxaml2)]  \\n  \\n [!code-csharp[WindowClosingSnippets#WindowClosingCODEBEHIND1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml.cs#windowclosingcodebehind1)]\\n [!code-vb[WindowClosingSnippets#WindowClosingCODEBEHIND1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowClosingSnippets/visualbasic/datawindow.xaml.vb#windowclosingcodebehind1)]  \\n[!code-csharp[WindowClosingSnippets#WindowClosingCODEBEHIND2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowClosingSnippets/CSharp/DataWindow.xaml.cs#windowclosingcodebehind2)]\\n[!code-vb[WindowClosingSnippets#WindowClosingCODEBEHIND2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowClosingSnippets/visualbasic/datawindow.xaml.vb#windowclosingcodebehind2)]\"\n  syntax:\n    content: public event System.ComponentModel.CancelEventHandler Closing;\n    return:\n      type: System.ComponentModel.CancelEventHandler\n      description: ''\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Windows.UIElement.Visibility\"></xref> is set, or <xref href=\"System.Windows.Window.Show\"></xref>, <xref href=\"System.Windows.Window.ShowDialog\"></xref>, or <xref href=\"System.Windows.Window.Close\"></xref> is called while a window is closing.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.ContentRendered\n  commentId: E:System.Windows.Window.ContentRendered\n  id: ContentRendered\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: ContentRendered\n  nameWithType: Window.ContentRendered\n  fullName: Window.ContentRendered\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs after a window's content has been rendered.\n  remarks: If the window has no content, this event is not raised.\n  syntax:\n    content: public event EventHandler ContentRendered;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.Deactivated\n  commentId: E:System.Windows.Window.Deactivated\n  id: Deactivated\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: Deactivated\n  nameWithType: Window.Deactivated\n  fullName: Window.Deactivated\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs when a window becomes a background window.\n  remarks: \"A window is deactivated (becomes a background window) when:  \\n  \\n-   A user switches to another window in the current application.  \\n  \\n-   A user switches to the window in another application by using ALT+TAB or by using Task Manager.  \\n  \\n-   A user clicks the taskbar button for a window in another application.  \\n  \\n Windows that need to detect when they become deactivated by handling the <xref:System.Windows.Window.Deactivated> event.  \\n  \\n After a window is first deactivated, it may be reactivated and deactivated many times during its lifetime. If an application's behavior or state depends on its activation state, it can inspect <xref:System.Windows.Window.IsActive%2A> to determine which activation state it's in.  \\n  \\n An application can also be <xref:System.Windows.Application.Deactivated>.\"\n  syntax:\n    content: public event EventHandler Deactivated;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.DialogResult\n  commentId: P:System.Windows.Window.DialogResult\n  id: DialogResult\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: DialogResult\n  nameWithType: Window.DialogResult\n  fullName: Window.DialogResult\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the dialog result value, which is the value that is returned from the <xref href=\"System.Windows.Window.ShowDialog\"></xref> method.\n  remarks: \"<xref:System.Windows.Window.DialogResult%2A> can be used from the code that showed a dialog box to determine whether a user accepted (`true`) or canceled (`false`) the dialog box. If a dialog box was accepted, this signifies to the code that opened the dialog box to retrieve the data that was collected by the user and process it. If a dialog box was canceled, however, this signifies that calling code should stop any further processing.  \\n  \\n By default, a dialog box is canceled when a user does one of the following:  \\n  \\n-   PressesALT+F4.  \\n  \\n-   Clicks the **Close** button.  \\n  \\n-   Selects **Close** from the System menu.  \\n  \\n In all of these cases, <xref:System.Windows.Window.DialogResult%2A> is `false` by default.  \\n  \\n A dialog box typically provides a special button to cancel a dialog, which is the button whose <xref:System.Windows.Controls.Button.IsCancel%2A> property is set to `true`. A button configured this way will automatically close a window when either it is pressed, or when the ESC key is pressed. In either of these cases, <xref:System.Windows.Window.DialogResult%2A> remains `false`.  \\n  \\n A dialog box also typically provides an accept button, which is the button whose <xref:System.Windows.Controls.Button.IsDefault%2A> property is set to `true`. A button configured this way will raise its <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event when either it or the ENTER key is pressed. However, it won't automatically close the dialog box, nor will it set <xref:System.Windows.Window.DialogResult%2A> to `true`. You need to manually write this code, usually from the <xref:System.Windows.Controls.Primitives.ButtonBase.Click> event handler for the default button.  \\n  \\n <xref:System.Windows.Window.DialogResult%2A> is `null` when the dialog box is shown but neither accepted nor canceled.  \\n  \\n After a dialog box closes, you can get the dialog result from the value returned by <xref:System.Windows.Window.ShowDialog%2A> method, or by inspecting the <xref:System.Windows.Window.DialogResult%2A> property.  \\n  \\n <xref:System.Windows.Window.DialogResult%2A> can only be set when a <xref:System.Windows.Window> is opened by calling its <xref:System.Windows.Window.ShowDialog%2A> method.  \\n  \\n> [!NOTE]\\n>  You cannot set or get this property when a window is hosted in a browser.\"\n  example:\n  - \"The following example shows how to configure an OK button and a Cancel button to return the appropriate <xref:System.Windows.Window.DialogResult%2A>.  \\n  \\n [!code-xml[WindowDialogResultSnippets#WindowDialogResultXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml#windowdialogresultxaml)]  \\n  \\n [!code-csharp[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDialogResultSnippets/CSharp/DialogBox.xaml.cs#windowdialogresultcodebehind)]\\n [!code-vb[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDialogResultSnippets/visualbasic/dialogbox.xaml.vb#windowdialogresultcodebehind)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Windows.DialogResultConverter))]\n\n      public Nullable<bool> DialogResult { get; set; }\n    return:\n      type: System.Nullable{System.Boolean}\n      description: A <xref href=\"System.Nullable`1\"></xref> value of type <xref href=\"System.Boolean\"></xref>. The default is `false`.\n  overload: System.Windows.Window.DialogResult*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"<xref href=\\\"System.Windows.Window.DialogResult\\\"></xref> is set before a window is opened by calling <xref href=\\\"System.Windows.Window.ShowDialog\\\"></xref>.  \\n  \\n -or-  \\n  \\n <xref href=\\\"System.Windows.Window.DialogResult\\\"></xref> is set on a window that is opened by calling <xref href=\\\"System.Windows.Window.Show\\\"></xref>.\"\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Window.DpiChanged\n  commentId: E:System.Windows.Window.DpiChanged\n  id: DpiChanged\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: DpiChanged\n  nameWithType: Window.DpiChanged\n  fullName: Window.DpiChanged\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs after the DPI of the screen on which the Window is displayed changes.\n  syntax:\n    content: public event System.Windows.DpiChangedEventHandler DpiChanged;\n    return:\n      type: System.Windows.DpiChangedEventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.DpiChangedEvent\n  commentId: F:System.Windows.Window.DpiChangedEvent\n  id: DpiChangedEvent\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: DpiChangedEvent\n  nameWithType: Window.DpiChangedEvent\n  fullName: Window.DpiChangedEvent\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: A <xref href=\"System.Windows.RoutedEvent\"></xref> for when the DPI of the screen the Window is on changes.\n  syntax:\n    content: public static readonly System.Windows.RoutedEvent DpiChangedEvent;\n    return:\n      type: System.Windows.RoutedEvent\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.DragMove\n  commentId: M:System.Windows.Window.DragMove\n  id: DragMove\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: DragMove()\n  nameWithType: Window.DragMove()\n  fullName: Window.DragMove()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Allows a window to be dragged by a mouse with its left button down over an exposed area of the window's client area.\n  remarks: \"The left mouse button must be down when <xref:System.Windows.Window.DragMove%2A> is called. One way to detect when the left mouse button is pressed is to handle the <xref:System.Windows.UIElement.MouseLeftButtonDown> event.  \\n  \\n When <xref:System.Windows.Window.DragMove%2A> is called, the left mouse button must be depressed over an exposed area of the window's client area.  \\n  \\n> [!NOTE]\\n>  This method cannot be called when a window is hosted in a browser.\"\n  example:\n  - \"The following example shows how to override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to call <xref:System.Windows.Window.DragMove%2A>.  \\n  \\n [!code-csharp[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowDragMoveSnippets/CSharp/MainWindow.xaml.cs#callwindowdragmovecodebehind)]\\n [!code-vb[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowDragMoveSnippets/visualbasic/mainwindow.xaml.vb#callwindowdragmovecodebehind)]\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public void DragMove ();\n    parameters: []\n  overload: System.Windows.Window.DragMove*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The left mouse button is not down.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.GetWindow(System.Windows.DependencyObject)\n  commentId: M:System.Windows.Window.GetWindow(System.Windows.DependencyObject)\n  id: GetWindow(System.Windows.DependencyObject)\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: GetWindow(DependencyObject)\n  nameWithType: Window.GetWindow(DependencyObject)\n  fullName: Window.GetWindow(DependencyObject)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Returns a reference to the <xref href=\"System.Windows.Window\"></xref> object that hosts the content tree within which the dependency object is located.\n  syntax:\n    content: public static System.Windows.Window GetWindow (System.Windows.DependencyObject dependencyObject);\n    parameters:\n    - id: dependencyObject\n      type: System.Windows.DependencyObject\n      description: The dependency object.\n    return:\n      type: System.Windows.Window\n      description: A <xref href=\"System.Windows.Window\"></xref> reference to the host window.\n  overload: System.Windows.Window.GetWindow*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>dependencyObject</code> is null.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.Hide\n  commentId: M:System.Windows.Window.Hide\n  id: Hide\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: Hide()\n  nameWithType: Window.Hide()\n  fullName: Window.Hide()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Makes a window invisible.\n  remarks: \"A window is not closed when it is hidden, and neither the <xref:System.Windows.Window.Closing> nor <xref:System.Windows.Window.Closed> event is raised. Instead, the window's <xref:System.Windows.UIElement.Visibility%2A> property is set to <xref:System.Windows.Visibility?displayProperty=fullName>.  \\n  \\n If a window is the application's <xref:System.Windows.Application.MainWindow%2A> and the application's <xref:System.Windows.Application.ShutdownMode%2A> is <xref:System.Windows.ShutdownMode.OnMainWindowClose>, the application does not shut down. Likewise, the application does not shut down if a window is the only window and the application's shutdown mode is <xref:System.Windows.ShutdownMode.OnLastWindowClose>.  \\n  \\n If you want to show and hide a window multiple times during the lifetime of an application, and you don't want to re-instantiate the window each time you show it, you can handle the <xref:System.Windows.Window.Closing> event, cancel it, and call the <xref:System.Windows.Window.Hide%2A> method. Then, you can call <xref:System.Windows.Window.Show%2A> on the same instance to re-open it.\"\n  syntax:\n    content: public void Hide ();\n    parameters: []\n  overload: System.Windows.Window.Hide*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Windows.Window.Hide\"></xref> is called on a window that is closing (<xref href=\"System.Windows.Window.Closing\"></xref>) or has been closed (<xref href=\"System.Windows.Window.Closed\"></xref>).\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Window.Icon\n  commentId: P:System.Windows.Window.Icon\n  id: Icon\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: Icon\n  nameWithType: Window.Icon\n  fullName: Window.Icon\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a window's icon.\n  remarks: \"[!INCLUDE[TLA#tla_wpf](~/includes/tlasharptla-wpf-md.md)] standalone applications have two types of icons:  \\n  \\n-   One assembly icon, which is specified by using the `<ApplicationIcon>` property in the application's project build file. This icon is used as the desktop icon for an assembly.  \\n  \\n    > [!NOTE]\\n    >  When debugging in Visual Studio, your icon may not appear due to the hosting process. If you run the executable, the icon will appear. For more information, see [Hosting Process (vshost.exe)](http://msdn.microsoft.com/library/c6b9e2be-f18d-4d75-ac52-56d55784734b).  \\n  \\n-   One icon per window that is specified by setting <xref:System.Windows.Window.Icon%2A>. For each window, this icon is used in its title bar, its task bar button, and in its ALT-TAB application selection list entry.  \\n  \\n A [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window always displays an icon. When one is not provided by setting <xref:System.Windows.Window.Icon%2A>, [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] chooses an icon to display based on the following rules:  \\n  \\n1.  Use the assembly icon, if specified.  \\n  \\n2.  If the assembly icon is not specified, use the default [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] icon.  \\n  \\n If you use <xref:System.Windows.Window.Icon%2A> to specify a custom window icon, you can restore the default application icon by setting <xref:System.Windows.Window.Icon%2A> to `null`.  \\n  \\n A single icon can be used in a variety of ways in [!INCLUDE[TLA#tla_mswin](~/includes/tlasharptla-mswin-md.md)], including being shown in the title bar of a window, the task bar for a window, the ALT+TAB file selection list. Each of these shows the icon using a different size; a 16x16 pixel icon is displayed in the title bar of a window and in the task bar, while a 32x32 pixel icon is displayed in the ALT+TAB file selection list. Some applications, like [!INCLUDE[TLA#tla_winexpl](~/includes/tlasharptla-winexpl-md.md)], provide a **View** menu that allows you to choose the size of the icon you'd like to view.  \\n  \\n To cater to the various display sizes, an icon file is composed of one or more actual icons where each one represents a version of the icon that targets a specific size and color depth. For example, one icon may only have a single 16x16 pixel icon with 16 colors, while another may contain 16x16 pixel and 32x32 pixel icons with both 16 colors and 256 colors.  \\n  \\n If icons for all possible sizes and color depths exist within an icon file, <xref:System.Windows.Window> will use the appropriate icon. If an icon file contains only a subset of all the possible icons, <xref:System.Windows.Window> uses the next most appropriate icon in order of decreasing sizes and color depth.  \\n  \\n The result is that an icon will always be used by <xref:System.Windows.Window>, although the icon used may not target the required size and color depth. For example, a 16x16 pixel icon with 16 colors may be used for display as a 32x32 pixel icon with 256 colors. This can cause undesirable visual effects, such as pixilation, but may be avoided by creating icons for all targeted sizes and color depths.  \\n  \\n> [!NOTE]\\n>  You cannot set or get this property when a window is hosted in a browser.  \\n  \\n<a name=\\\"dependencyPropertyInfo_WindowIcon\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Window.IconProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example shows how to set a window icon.  \\n  \\n [!code-xml[WindowIconSnippets#WindowIconSetXAML](~/samples/snippets/xaml/VS_Snippets_Wpf/WindowIconSnippets/XAML/MainWindow.xaml#windowiconsetxaml)]  \\n  \\n [!code-csharp[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowIconSnippets/CSharp/MainWindow.xaml.cs#setwindowiconincode)]\\n [!code-vb[WindowIconSnippets#SetWindowIconInCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowIconSnippets/visualbasic/mainwindow.xaml.vb#setwindowiconincode)]\"\n  syntax:\n    content: >-\n      [set: System.Security.SecurityCritical]\n\n      public System.Windows.Media.ImageSource Icon { get; set; }\n    return:\n      type: System.Windows.Media.ImageSource\n      description: An <xref href=\"System.Windows.Media.ImageSource\"></xref> object that represents the icon.\n  overload: System.Windows.Window.Icon*\n  exceptions: []\n  attributes:\n  - type: 'set: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.IconProperty\n  commentId: F:System.Windows.Window.IconProperty\n  id: IconProperty\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: IconProperty\n  nameWithType: Window.IconProperty\n  fullName: Window.IconProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.Window.Icon\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IconProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.IsActive\n  commentId: P:System.Windows.Window.IsActive\n  id: IsActive\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: IsActive\n  nameWithType: Window.IsActive\n  fullName: Window.IsActive\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets a value that indicates whether the window is active.\n  remarks: \"An active window is the user's current foreground window and has the focus, which is signified by the active appearance of the title bar. An active window will also be the top-most of all top-level windows that don't explicitly set the <xref:System.Windows.Window.Topmost%2A> property.  \\n  \\n<a name=\\\"dependencyPropertyInfo_WindowIsActive\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Window.IsActiveProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool IsActive { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the window is active; otherwise, `false`. The default is `false`.'\n  overload: System.Windows.Window.IsActive*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.IsActiveProperty\n  commentId: F:System.Windows.Window.IsActiveProperty\n  id: IsActiveProperty\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: IsActiveProperty\n  nameWithType: Window.IsActiveProperty\n  fullName: Window.IsActiveProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.Window.IsActive\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty IsActiveProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.Left\n  commentId: P:System.Windows.Window.Left\n  id: Left\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: Left\n  nameWithType: Window.Left\n  fullName: Window.Left\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the position of the window's left edge, in relation to the desktop.\n  remarks: \"When the <xref:System.Windows.Window> is maximized or minimized, this value represents the left edge of the restore point for the <xref:System.Windows.Window>.  \\n  \\n This property cannot be set through a style.  \\n  \\n If you do not specify a value, <xref:System.Windows.Window.Left%2A> is set to the system default value. You can also specify the system default value by setting <xref:System.Windows.Window.Left%2A> to <xref:System.Double.NaN>. Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Left%2A>.  \\n  \\n> [!NOTE]\\n>  You cannot set or get this property when a window is hosted in a browser.  \\n  \\n<a name=\\\"dependencyPropertyInfo_WindowLeft\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Window.LeftProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(\"System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null\")]\n\n      public double Left { get; set; }\n    return:\n      type: System.Double\n      description: The position of the window's left edge, in logical units (1/96th of an inch).\n  overload: System.Windows.Window.Left*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.LeftProperty\n  commentId: F:System.Windows.Window.LeftProperty\n  id: LeftProperty\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: LeftProperty\n  nameWithType: Window.LeftProperty\n  fullName: Window.LeftProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.Window.Left\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty LeftProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.LocationChanged\n  commentId: E:System.Windows.Window.LocationChanged\n  id: LocationChanged\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: LocationChanged\n  nameWithType: Window.LocationChanged\n  fullName: Window.LocationChanged\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs when the window's location changes.\n  remarks: \"A window's location changes when:  \\n  \\n-   A user moves a window by dragging it with the window's title bar.  \\n  \\n-   A window is moved after <xref:System.Windows.Window.DragMove%2A> is called.  \\n  \\n-   Either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> property is set programmatically.  \\n  \\n-   The **Move** menu item of a window's System menu is chosen.  \\n  \\n-   The <xref:System.Windows.Window.WindowState%2A> property is changed.\"\n  syntax:\n    content: public event EventHandler LocationChanged;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.LogicalChildren\n  commentId: P:System.Windows.Window.LogicalChildren\n  id: LogicalChildren\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: LogicalChildren\n  nameWithType: Window.LogicalChildren\n  fullName: Window.LogicalChildren\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets an enumerator for a window's logical child elements.\n  syntax:\n    content: protected override System.Collections.IEnumerator LogicalChildren { get; }\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref href=\"System.Collections.IEnumerator\"></xref> a window's logical child elements.\n  overload: System.Windows.Window.LogicalChildren*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.MeasureOverride(System.Windows.Size)\n  commentId: M:System.Windows.Window.MeasureOverride(System.Windows.Size)\n  id: MeasureOverride(System.Windows.Size)\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: MeasureOverride(Size)\n  nameWithType: Window.MeasureOverride(Size)\n  fullName: Window.MeasureOverride(Size)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Override this method to measure the size of a window.\n  remarks: \"<xref:System.Windows.Window.MeasureOverride%2A> is not called when the <xref:System.Windows.UIElement.Visibility%2A> property has a value of <xref:System.Windows.Visibility.Collapsed>. If the value of the <xref:System.Windows.UIElement.Visibility%2A> property is either <xref:System.Windows.Visibility.Hidden> or <xref:System.Windows.Visibility.Visible>, <xref:System.Windows.Window.MeasureOverride%2A> is called.  \\n  \\n> [!NOTE]\\n>  When either <xref:System.Windows.Window.Show%2A> or <xref:System.Windows.Window.ShowDialog%2A> are called, the <xref:System.Windows.UIElement.Visibility%2A> property of a <xref:System.Windows.Window> is set to <xref:System.Windows.Visibility.Visible>.\"\n  syntax:\n    content: protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);\n    parameters:\n    - id: availableSize\n      type: System.Windows.Size\n      description: A <xref href=\"System.Windows.Size\"></xref> that reflects the available size that this window can give to the child. Infinity can be given as a value to indicate that the window will size to whatever content is available.\n    return:\n      type: System.Windows.Size\n      description: A <xref href=\"System.Windows.Size\"></xref> that reflects the size that this window determines it needs during layout, based on its calculations of children's sizes.\n  overload: System.Windows.Window.MeasureOverride*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.OnActivated(System.EventArgs)\n  commentId: M:System.Windows.Window.OnActivated(System.EventArgs)\n  id: OnActivated(System.EventArgs)\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: OnActivated(EventArgs)\n  nameWithType: Window.OnActivated(EventArgs)\n  fullName: Window.OnActivated(EventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Raises the <xref href=\"System.Windows.Window.Activated\"></xref> event.\n  remarks: \"<xref:System.Windows.Window.OnActivated%2A> raises the <xref:System.Windows.Window.Activated> event.  \\n  \\n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnActivated%2A>. The overridden method must call <xref:System.Windows.Window.OnActivated%2A> on the base class if <xref:System.Windows.Window.Activated> needs to be raised.\"\n  syntax:\n    content: protected virtual void OnActivated (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: An <xref href=\"System.EventArgs\"></xref> that contains the event data.\n  overload: System.Windows.Window.OnActivated*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.OnClosed(System.EventArgs)\n  commentId: M:System.Windows.Window.OnClosed(System.EventArgs)\n  id: OnClosed(System.EventArgs)\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: OnClosed(EventArgs)\n  nameWithType: Window.OnClosed(EventArgs)\n  fullName: Window.OnClosed(EventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Raises the <xref href=\"System.Windows.Window.Closed\"></xref> event.\n  remarks: \"<xref:System.Windows.Window.OnClosed%2A> raises the <xref:System.Windows.Window.Closed> event.  \\n  \\n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosed%2A>. The overridden method must call <xref:System.Windows.Window.OnClosed%2A> on the base class if <xref:System.Windows.Window.Closed> needs to be raised.\"\n  syntax:\n    content: protected virtual void OnClosed (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: An <xref href=\"System.EventArgs\"></xref> that contains the event data.\n  overload: System.Windows.Window.OnClosed*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)\n  commentId: M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)\n  id: OnClosing(System.ComponentModel.CancelEventArgs)\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: OnClosing(CancelEventArgs)\n  nameWithType: Window.OnClosing(CancelEventArgs)\n  fullName: Window.OnClosing(CancelEventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Raises the <xref href=\"System.Windows.Window.Closing\"></xref> event.\n  remarks: \"<xref:System.Windows.Window.OnClosing%2A> raises the <xref:System.Windows.Window.Closing> event.  \\n  \\n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnClosing%2A>. The overridden method must call <xref:System.Windows.Window.OnClosing%2A> on the base class if <xref:System.Windows.Window.Closing> needs to be raised.\"\n  syntax:\n    content: protected virtual void OnClosing (System.ComponentModel.CancelEventArgs e);\n    parameters:\n    - id: e\n      type: System.ComponentModel.CancelEventArgs\n      description: A <xref href=\"System.ComponentModel.CancelEventArgs\"></xref> that contains the event data.\n  overload: System.Windows.Window.OnClosing*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.OnContentChanged(System.Object,System.Object)\n  commentId: M:System.Windows.Window.OnContentChanged(System.Object,System.Object)\n  id: OnContentChanged(System.Object,System.Object)\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: OnContentChanged(Object, Object)\n  nameWithType: Window.OnContentChanged(Object, Object)\n  fullName: Window.OnContentChanged(Object, Object)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Called when the <xref href=\"System.Windows.Controls.ContentControl.Content\"></xref> property changes.\n  syntax:\n    content: protected override void OnContentChanged (object oldContent, object newContent);\n    parameters:\n    - id: oldContent\n      type: System.Object\n      description: A reference to the root of the old content tree.\n    - id: newContent\n      type: System.Object\n      description: A reference to the root of the new content tree.\n  overload: System.Windows.Window.OnContentChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Window.OnContentRendered(System.EventArgs)\n  commentId: M:System.Windows.Window.OnContentRendered(System.EventArgs)\n  id: OnContentRendered(System.EventArgs)\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: OnContentRendered(EventArgs)\n  nameWithType: Window.OnContentRendered(EventArgs)\n  fullName: Window.OnContentRendered(EventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Raises the <xref href=\"System.Windows.Window.ContentRendered\"></xref> event.\n  remarks: \"<xref:System.Windows.Window.OnContentRendered%2A> raises the <xref:System.Windows.Window.ContentRendered> event.  \\n  \\n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnContentRendered%2A>. The overridden method must call <xref:System.Windows.Window.OnContentRendered%2A> on the base class if <xref:System.Windows.Window.ContentRendered> needs to be raised.\"\n  syntax:\n    content: protected virtual void OnContentRendered (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: An <xref href=\"System.EventArgs\"></xref> that contains the event data.\n  overload: System.Windows.Window.OnContentRendered*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.OnCreateAutomationPeer\n  commentId: M:System.Windows.Window.OnCreateAutomationPeer\n  id: OnCreateAutomationPeer\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: OnCreateAutomationPeer()\n  nameWithType: Window.OnCreateAutomationPeer()\n  fullName: Window.OnCreateAutomationPeer()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Creates and returns a <xref href=\"System.Windows.Automation.Peers.WindowAutomationPeer\"></xref> object for this <xref href=\"System.Windows.Window\"></xref>.\n  remarks: This method overrides <xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.\n  syntax:\n    content: protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();\n    parameters: []\n    return:\n      type: System.Windows.Automation.Peers.AutomationPeer\n      description: A <xref href=\"System.Windows.Automation.Peers.WindowAutomationPeer\"></xref> object for this <xref href=\"System.Windows.Window\"></xref>.\n  overload: System.Windows.Window.OnCreateAutomationPeer*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.OnDeactivated(System.EventArgs)\n  commentId: M:System.Windows.Window.OnDeactivated(System.EventArgs)\n  id: OnDeactivated(System.EventArgs)\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: OnDeactivated(EventArgs)\n  nameWithType: Window.OnDeactivated(EventArgs)\n  fullName: Window.OnDeactivated(EventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Raises the <xref href=\"System.Windows.Window.Deactivated\"></xref> event.\n  remarks: \"<xref:System.Windows.Window.OnDeactivated%2A> raises the <xref:System.Windows.Window.Deactivated> event.  \\n  \\n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnDeactivated%2A>. The overridden method must call <xref:System.Windows.Window.OnDeactivated%2A> on the base class if <xref:System.Windows.Window.Deactivated> needs to be raised.\"\n  syntax:\n    content: protected virtual void OnDeactivated (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: An <xref href=\"System.EventArgs\"></xref> that contains the event data.\n  overload: System.Windows.Window.OnDeactivated*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)\n  commentId: M:System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)\n  id: OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: OnDpiChanged(DpiScale, DpiScale)\n  nameWithType: Window.OnDpiChanged(DpiScale, DpiScale)\n  fullName: Window.OnDpiChanged(DpiScale, DpiScale)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Called when the DPI at which this window is rendered changes.\n  syntax:\n    content: protected override void OnDpiChanged (System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi);\n    parameters:\n    - id: oldDpi\n      type: System.Windows.DpiScale\n      description: The previous DPI scale setting.\n    - id: newDpi\n      type: System.Windows.DpiScale\n      description: The new DPI scale setting.\n  overload: System.Windows.Window.OnDpiChanged*\n  exceptions: []\n  version:\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.OnLocationChanged(System.EventArgs)\n  commentId: M:System.Windows.Window.OnLocationChanged(System.EventArgs)\n  id: OnLocationChanged(System.EventArgs)\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: OnLocationChanged(EventArgs)\n  nameWithType: Window.OnLocationChanged(EventArgs)\n  fullName: Window.OnLocationChanged(EventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Raises the <xref href=\"System.Windows.Window.LocationChanged\"></xref> event.\n  remarks: \"<xref:System.Windows.Window.OnLocationChanged%2A> raises the <xref:System.Windows.Window.LocationChanged> event.  \\n  \\n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnLocationChanged%2A>. The overridden method must call <xref:System.Windows.Window.OnLocationChanged%2A> on the base class if <xref:System.Windows.Window.LocationChanged> needs to be raised.\"\n  syntax:\n    content: protected virtual void OnLocationChanged (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: An <xref href=\"System.EventArgs\"></xref> that contains the event data.\n  overload: System.Windows.Window.OnLocationChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)\n  commentId: M:System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)\n  id: OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)\n  nameWithType: Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)\n  fullName: Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Called when the <xref href=\"System.Windows.UIElement.ManipulationBoundaryFeedback\"></xref> event occurs.\n  remarks: This implementation does not change the handled state (the <xref:System.Windows.RoutedEventArgs.Handled%2A> property) of the <xref:System.Windows.UIElement.ManipulationBoundaryFeedback> event data.\n  syntax:\n    content: protected override void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);\n    parameters:\n    - id: e\n      type: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs\n      description: The data for the event.\n  overload: System.Windows.Window.OnManipulationBoundaryFeedback*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.OnSourceInitialized(System.EventArgs)\n  commentId: M:System.Windows.Window.OnSourceInitialized(System.EventArgs)\n  id: OnSourceInitialized(System.EventArgs)\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: OnSourceInitialized(EventArgs)\n  nameWithType: Window.OnSourceInitialized(EventArgs)\n  fullName: Window.OnSourceInitialized(EventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Raises the <xref href=\"System.Windows.Window.SourceInitialized\"></xref> event.\n  remarks: \"<xref:System.Windows.Window.OnSourceInitialized%2A> raises the <xref:System.Windows.Window.SourceInitialized> event.  \\n  \\n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnSourceInitialized%2A>. The overridden method must call <xref:System.Windows.Window.OnSourceInitialized%2A> on the base class if <xref:System.Windows.Window.SourceInitialized> needs to be raised.\"\n  syntax:\n    content: protected virtual void OnSourceInitialized (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: An <xref href=\"System.EventArgs\"></xref> that contains the event data.\n  overload: System.Windows.Window.OnSourceInitialized*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Window.OnStateChanged(System.EventArgs)\n  commentId: M:System.Windows.Window.OnStateChanged(System.EventArgs)\n  id: OnStateChanged(System.EventArgs)\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: OnStateChanged(EventArgs)\n  nameWithType: Window.OnStateChanged(EventArgs)\n  fullName: Window.OnStateChanged(EventArgs)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Raises the <xref href=\"System.Windows.Window.StateChanged\"></xref> event.\n  remarks: \"<xref:System.Windows.Window.OnStateChanged%2A> raises the <xref:System.Windows.Window.StateChanged> event.  \\n  \\n A type that derives from <xref:System.Windows.Window> may override <xref:System.Windows.Window.OnStateChanged%2A>. The overridden method must call <xref:System.Windows.Window.OnStateChanged%2A> on the base class if <xref:System.Windows.Window.StateChanged> needs to be raised.\"\n  syntax:\n    content: protected virtual void OnStateChanged (EventArgs e);\n    parameters:\n    - id: e\n      type: System.EventArgs\n      description: An <xref href=\"System.EventArgs\"></xref> that contains the event data.\n  overload: System.Windows.Window.OnStateChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)\n  commentId: M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)\n  id: OnVisualParentChanged(System.Windows.DependencyObject)\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: OnVisualParentChanged(DependencyObject)\n  nameWithType: Window.OnVisualParentChanged(DependencyObject)\n  fullName: Window.OnVisualParentChanged(DependencyObject)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Called when the parent of the window is changed.\n  syntax:\n    content: protected override sealed void OnVisualParentChanged (System.Windows.DependencyObject oldParent);\n    parameters:\n    - id: oldParent\n      type: System.Windows.DependencyObject\n      description: The previous parent. Set to null if the <xref href=\"System.Windows.DependencyObject\"></xref> did not have a previous parent.\n  overload: System.Windows.Window.OnVisualParentChanged*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.OwnedWindows\n  commentId: P:System.Windows.Window.OwnedWindows\n  id: OwnedWindows\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: OwnedWindows\n  nameWithType: Window.OwnedWindows\n  fullName: Window.OwnedWindows\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets a collection of windows for which this window is the owner.\n  remarks: An owned window is one whose <xref:System.Windows.Window.Owner%2A> property is set with a reference to another window, which is known as the owner window. To find all the windows that an owner window owns, you can enumerate <xref:System.Windows.WindowCollection> that is returned by the <xref:System.Windows.Window.OwnedWindows%2A> property.\n  example:\n  - \"The following example shows how to enumerate <xref:System.Windows.Window.OwnedWindows%2A>.  \\n  \\n [!code-csharp[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#getwindowownedwindowscode)]\\n [!code-vb[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#getwindowownedwindowscode)]\"\n  syntax:\n    content: public System.Windows.WindowCollection OwnedWindows { get; }\n    return:\n      type: System.Windows.WindowCollection\n      description: A <xref href=\"System.Windows.WindowCollection\"></xref> that contains references to the windows for which this window is the owner.\n  overload: System.Windows.Window.OwnedWindows*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.Owner\n  commentId: P:System.Windows.Window.Owner\n  id: Owner\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: Owner\n  nameWithType: Window.Owner\n  fullName: Window.Owner\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the <xref href=\"System.Windows.Window\"></xref> that owns this <xref href=\"System.Windows.Window\"></xref>.\n  remarks: \"When a child window is opened by a parent window by calling <xref:System.Windows.Window.ShowDialog%2A>, an implicit relationship is established between both parent and child window. This relationship enforces certain behaviors, including with respect to minimizing, maximizing, and restoring.  \\n  \\n When a child window is created by a parent window by calling <xref:System.Windows.Window.Show%2A>, however, the child window does not have a relationship with the parent window. This means that:  \\n  \\n-   The child window does not have a reference to the parent window.  \\n  \\n-   The behavior of the child window is not dependent on the behavior of the parent window; either window can cover the other, or be minimized, maximized, and restored independently of the other.  \\n  \\n To allow you to create a relationship between a child window and a parent window, <xref:System.Windows.Window> supports the notion of ownership. Ownership is established when the <xref:System.Windows.Window.Owner%2A> property of a window (the owned window) is set with a reference to another window (the owner window).  \\n  \\n Once this relationship is established, the following behaviors are exhibited:  \\n  \\n-   If an owner window is minimized, all its owned windows are minimized as well.  \\n  \\n-   If an owned window is minimized, its owner is not minimized.  \\n  \\n-   If an owner window is maximized, both the owner window and its owned windows are restored.  \\n  \\n-   An owner window can never cover an owned window.  \\n  \\n-   Owned windows that were not opened using <xref:System.Windows.Window.ShowDialog%2A> are not modal. The user can still interact with the owner window.  \\n  \\n-   If you close an owner window, its owned windows are also closed.  \\n  \\n-   If an owned window was opened by its owner window using <xref:System.Windows.Window.Show%2A>, and the owner window is closed, the owned window's <xref:System.Windows.Window.Closing> event is not raised.  \\n  \\n When you open a child window by calling <xref:System.Windows.Window.ShowDialog%2A>, you should also set the <xref:System.Windows.Window.Owner%2A> property of the child window. If you don't, then your users won't be able to restore both child window and parent window by pressing the task bar button. Instead, pressing the task bar button will yield a list of windows, including both child and parent window, for them to select; only the selected window is restored.  \\n  \\n> [!IMPORTANT]\\n>  You should also set the <xref:System.Windows.Window.Owner%2A> property on a window that that is opened by calling <xref:System.Windows.Window.ShowDialog%2A> to ensure correct behavior with .  \\n  \\n> [!NOTE]\\n>  You cannot set or get this property when a window is hosted in a browser.\"\n  example:\n  - \"The following example shows how to establish the owner/owned relationship.  \\n  \\n [!code-csharp[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/CSharp/MainWindow.xaml.cs#setwindowownercode)]\\n [!code-vb[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowOwnerOwnedWindowsSnippets/visualbasic/mainwindow.xaml.vb#setwindowownercode)]\"\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      [set: System.Security.SecurityCritical]\n\n      public System.Windows.Window Owner { get; set; }\n    return:\n      type: System.Windows.Window\n      description: A <xref href=\"System.Windows.Window\"></xref> object that represents the owner of this <xref href=\"System.Windows.Window\"></xref>.\n  overload: System.Windows.Window.Owner*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"A window tries to own itself  \\n  \\n -or-  \\n  \\n Two windows try to own each other.\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The <xref href=\\\"System.Windows.Window.Owner\\\"></xref> property is set on a visible window shown using <xref href=\\\"System.Windows.Window.ShowDialog\\\"></xref>  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Windows.Window.Owner\\\"></xref> property is set with a window that has not been previously shown.\"\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  - type: 'set: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.ResizeMode\n  commentId: P:System.Windows.Window.ResizeMode\n  id: ResizeMode\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: ResizeMode\n  nameWithType: Window.ResizeMode\n  fullName: Window.ResizeMode\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the resize mode.\n  remarks: \"There are four options:  \\n  \\n-   **NoResize**. The user cannot resize the window. The Maximize and Minimize boxes are not shown.  \\n  \\n-   **CanMinimize**. The user can only minimize the window and restore it from the taskbar. The Minimize and Maximize boxes are both shown, but only the Minimize box is enabled.  \\n  \\n-   **CanResize**. The user has the full ability to resize the window, using the Minimize and Maximize boxes, and a draggable outline around the window. The Minimize and Maximize boxes are shown and enabled. (Default).  \\n  \\n-   **CanResizeWithGrip**. This option has the same functionality as <xref:System.Windows.ResizeMode.CanResize>, but adds a \\\"resize grip\\\" to the lower right corner of the window.  \\n  \\n> [!NOTE]\\n>  You cannot set or get this property when a window is hosted in a browser.  \\n  \\n<a name=\\\"dependencyPropertyInfo_WindowResizeMode\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Window.ResizeModeProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|\"\n  syntax:\n    content: public System.Windows.ResizeMode ResizeMode { get; set; }\n    return:\n      type: System.Windows.ResizeMode\n      description: A <xref href=\"System.Windows.ResizeMode\"></xref> value specifying the resize mode.\n  overload: System.Windows.Window.ResizeMode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.ResizeModeProperty\n  commentId: F:System.Windows.Window.ResizeModeProperty\n  id: ResizeModeProperty\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: ResizeModeProperty\n  nameWithType: Window.ResizeModeProperty\n  fullName: Window.ResizeModeProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.Window.ResizeMode\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty ResizeModeProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.RestoreBounds\n  commentId: P:System.Windows.Window.RestoreBounds\n  id: RestoreBounds\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: RestoreBounds\n  nameWithType: Window.RestoreBounds\n  fullName: Window.RestoreBounds\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets the size and location of a window before being either minimized or maximized.\n  remarks: \"The restore rectangle is the region occupied by the window before it was minimized or maximized. You can use <xref:System.Windows.Window.RestoreBounds%2A> to save the last size and location of a window before an application is closed, and retrieve those values the next time an application starts to restore a window to the way a user left it.  \\n  \\n If you query <xref:System.Windows.Window.RestoreBounds%2A> before the window has been shown or after it has been closed, <xref:System.Windows.Rect.Empty%2A> is returned.  \\n  \\n> [!NOTE]\\n>  You cannot get this property when a window is hosted in a browser.\"\n  example:\n  - \"The following example uses <xref:System.Windows.Window.RestoreBounds%2A> and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.  \\n  \\n [!code-xml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml1)]  \\n[!code-xml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml#windowrestoreboundsxaml2)]  \\n  \\n [!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind1)]\\n [!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind1)]  \\n[!code-csharp[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/CSharp/MainWindow.xaml.cs#windowrestoreboundscodebehind2)]\\n[!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowRestoreBoundsSnippets/visualbasic/mainwindow.xaml.vb#windowrestoreboundscodebehind2)]\"\n  syntax:\n    content: >-\n      [get: System.Security.SecurityCritical]\n\n      public System.Windows.Rect RestoreBounds { get; }\n    return:\n      type: System.Windows.Rect\n      description: A <xref href=\"System.Windows.Rect\"></xref> that specifies the size and location of a window before being either minimized or maximized.\n  overload: System.Windows.Window.RestoreBounds*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Security.SecurityCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.Show\n  commentId: M:System.Windows.Window.Show\n  id: Show\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: Show()\n  nameWithType: Window.Show()\n  fullName: Window.Show()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Opens a window and returns without waiting for the newly opened window to close.\n  remarks: \"When the <xref:System.Windows.Window> class is instantiated, it is not visible by default. <xref:System.Windows.Window.Show%2A> shows a window and returns immediately, without waiting for the window to be closed. Consequently, the opened window does not prevent users from interacting with other windows in the application. This type of window is called a *modeless* window. Common examples of modeless windows are properties windows, toolboxes, and palettes. To restrict a user to interacting with a specific window, the window must be opened by calling <xref:System.Windows.Window.ShowDialog%2A>.  \\n  \\n A window that is opened by calling <xref:System.Windows.Window.Show%2A> does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it. This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property.  \\n  \\n Calling <xref:System.Windows.Window.Show%2A> achieves the same end result as setting <xref:System.Windows.UIElement.Visibility%2A> property of the <xref:System.Windows.Window> object to <xref:System.Windows.Visibility.Visible>. However, there is a difference between the two from a timing perspective.  \\n  \\n Calling <xref:System.Windows.Window.Show%2A> is a synchronous operation that returns only after the <xref:System.Windows.FrameworkElement.Loaded> event on the child window has been raised:  \\n  \\n [!code-csharp[WindowShowTimingSnippets#ShowSync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showsync)]\\n [!code-vb[WindowShowTimingSnippets#ShowSync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showsync)]  \\n  \\n Setting <xref:System.Windows.UIElement.Visibility%2A>, however, is an asynchronous operation that returns immediately:  \\n  \\n [!code-csharp[WindowShowTimingSnippets#ShowASync](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowTimingSnippets/CSharp/Window1.xaml.cs#showasync)]\\n [!code-vb[WindowShowTimingSnippets#ShowASync](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowTimingSnippets/visualbasic/window1.xaml.vb#showasync)]  \\n  \\n When setting <xref:System.Windows.UIElement.Visibility%2A>, any window events you register before you set <xref:System.Windows.UIElement.Visibility%2A> may not be raised until after the method in which you set <xref:System.Windows.UIElement.Visibility%2A> has completed execution.\"\n  example:\n  - \"The following sample demonstrates how to open a modeless window.  \\n  \\n [!code-csharp[WindowShowSnippets#WindowShowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowSnippets/CSharp/MainWindow.xaml.cs#windowshowcode)]\\n [!code-vb[WindowShowSnippets#WindowShowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowSnippets/visualbasic/mainwindow.xaml.vb#windowshowcode)]\"\n  syntax:\n    content: public void Show ();\n    parameters: []\n  overload: System.Windows.Window.Show*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Windows.Window.Show\"></xref> is called on a window that is closing (<xref href=\"System.Windows.Window.Closing\"></xref>) or has been closed (<xref href=\"System.Windows.Window.Closed\"></xref>).\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Window.ShowActivated\n  commentId: P:System.Windows.Window.ShowActivated\n  id: ShowActivated\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: ShowActivated\n  nameWithType: Window.ShowActivated\n  fullName: Window.ShowActivated\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether a window is activated when first shown.\n  remarks: \"When a window with its <xref:System.Windows.Window.ShowActivated%2A> property set to `false` is opened, the window is not activated and its <xref:System.Windows.Window.Activated> event is not raised until a user manually activates the window by selecting it. After the window is selected, it activates and deactivates normally.  \\n  \\n To prevent a window from being activated when it opens, the <xref:System.Windows.Window.ShowActivated%2A> property must be set to `false` before the window is shown (by calling <xref:System.Windows.Window.Show%2A>); setting <xref:System.Windows.Window.ShowActivated%2A> to `false` after a window is shown has no effect.  \\n  \\n Setting <xref:System.Windows.Window.ShowActivated%2A> to `false` on a window that is opened modally, by calling <xref:System.Windows.Window.ShowDialog%2A>, has no real impact. Although the modal window will not be activated, the modal window will prevent the user from activating any other open application windows.  \\n  \\n<a name=\\\"dependencyPropertyInfo_WindowShowActivated\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Window.ShowActivatedProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example shows how to use markup to configure a window to be opened without being activated.  \\n  \\n [!code-xml[WindowShowActivatedSnippets#ShowUnactivatedMARKUP1](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml#showunactivatedmarkup1)]  \\n  \\n  \\n [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/AWindow.xaml.cs#showunactivatedcodebehind)]\\n [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/awindow.xaml.vb#showunactivatedcodebehind)]  \\n  \\n The following example shows how to use code to configure a window to be opened without it being activated.  \\n  \\n [!code-csharp[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowActivatedSnippets/CSharp/Window1.xaml.cs#showunactivatedwindowcode)]\\n [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowActivatedSnippets/visualbasic/window1.xaml.vb#showunactivatedwindowcode)]\"\n  syntax:\n    content: public bool ShowActivated { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if a window is activated when first shown; otherwise, `false`. The default is `true`.'\n  overload: System.Windows.Window.ShowActivated*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Window.ShowActivatedProperty\n  commentId: F:System.Windows.Window.ShowActivatedProperty\n  id: ShowActivatedProperty\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: ShowActivatedProperty\n  nameWithType: Window.ShowActivatedProperty\n  fullName: Window.ShowActivatedProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.Window.ShowActivated\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty ShowActivatedProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.ShowDialog\n  commentId: M:System.Windows.Window.ShowDialog\n  id: ShowDialog\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: ShowDialog()\n  nameWithType: Window.ShowDialog()\n  fullName: Window.ShowDialog()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Opens a window and returns only when the newly opened window is closed.\n  remarks: \"When a <xref:System.Windows.Window> class is instantiated, it is not visible by default. <xref:System.Windows.Window.ShowDialog%2A> shows the window, disables all other windows in the application, and returns only when the window is closed. This type of window is known as a *modal* window.  \\n  \\n Modal windows are primarily used as dialog boxes. A dialog box is a special type of window that applications use to interact with users to complete tasks, such as opening files or printing documents. Dialog boxes commonly allow users to accept or cancel the task for which they were shown before the dialog box is closed. <xref:System.Windows.Window.ShowDialog%2A> returns a <xref:System.Nullable%601><xref:System.Boolean> value that specifies whether the activity was accepted or canceled. The return value is the value of the <xref:System.Windows.Window.DialogResult%2A> property before a window closes. For more information, see <xref:System.Windows.Window.DialogResult%2A>.  \\n  \\n A window that is opened by calling the <xref:System.Windows.Window.ShowDialog%2A> method does not automatically have a relationship with the window that opened it; specifically, the opened window does not know which window opened it. This relationship can be established using the <xref:System.Windows.Window.Owner%2A> property and managed using the <xref:System.Windows.Window.OwnedWindows%2A> property. To support [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] automation (see [UI Automation Overview](~/docs/framework/ui-automation/ui-automation-overview.md)), <xref:System.Windows.Window.Owner%2A> must be set for a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>.  \\n  \\n When a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window (a window opened by calling <xref:System.Windows.Window.ShowDialog%2A>) is closed, the previously activated window is reactivated. If a modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window has an owner window (see <xref:System.Windows.Window.Owner%2A>), the owner window is not reactivated when the modal [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] window is closed unless it was the previously activated window.  \\n  \\n> [!NOTE]\\n>  This method cannot be called when a window is hosted in a browser.\"\n  example:\n  - \"The following sample demonstrates how to open a modal window.  \\n  \\n [!code-csharp[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/WindowShowDialogSnippets/CSharp/MainWindow.xaml.cs#windowshowdialogcode)]\\n [!code-vb[WindowShowDialogSnippets#WindowShowDialogCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WindowShowDialogSnippets/visualbasic/mainwindow.xaml.vb#windowshowdialogcode)]\"\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public Nullable<bool> ShowDialog ();\n    parameters: []\n    return:\n      type: System.Nullable{System.Boolean}\n      description: A <xref href=\"System.Nullable`1\"></xref> value of type <xref href=\"System.Boolean\"></xref> that specifies whether the activity was accepted (`true`) or canceled (`false`). The return value is the value of the <xref href=\"System.Windows.Window.DialogResult\"></xref> property before a window closes.\n  overload: System.Windows.Window.ShowDialog*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: <xref href=\"System.Windows.Window.ShowDialog\"></xref> is called on a window that is closing (<xref href=\"System.Windows.Window.Closing\"></xref>) or has been closed (<xref href=\"System.Windows.Window.Closed\"></xref>).\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.ShowInTaskbar\n  commentId: P:System.Windows.Window.ShowInTaskbar\n  id: ShowInTaskbar\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: ShowInTaskbar\n  nameWithType: Window.ShowInTaskbar\n  fullName: Window.ShowInTaskbar\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether the window has a task bar button.\n  remarks: \"If <xref:System.Windows.Window.ShowInTaskbar%2A> is set to `true`, the window will also appear in the ALT+TAB application selection list.  \\n  \\n The icon that is used for both the task bar button and the ALT+TAB application selection list is the value of the <xref:System.Windows.Window.Icon%2A> property.  \\n  \\n> [!NOTE]\\n>  You cannot set or get this property when a window is hosted in a browser.  \\n  \\n<a name=\\\"dependencyPropertyInfo_WindowShowInTaskbar\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Window.ShowInTaskbarProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool ShowInTaskbar { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the window has a task bar button; otherwise, `false`. Does not apply when the window is hosted in a browser.'\n  overload: System.Windows.Window.ShowInTaskbar*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.ShowInTaskbarProperty\n  commentId: F:System.Windows.Window.ShowInTaskbarProperty\n  id: ShowInTaskbarProperty\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: ShowInTaskbarProperty\n  nameWithType: Window.ShowInTaskbarProperty\n  fullName: Window.ShowInTaskbarProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.Window.ShowInTaskbar\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty ShowInTaskbarProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.SizeToContent\n  commentId: P:System.Windows.Window.SizeToContent\n  id: SizeToContent\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: SizeToContent\n  nameWithType: Window.SizeToContent\n  fullName: Window.SizeToContent\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether a window will automatically size itself to fit the size of its content.\n  remarks: \"When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.WidthAndHeight>, setting either <xref:System.Windows.FrameworkElement.Height%2A> or <xref:System.Windows.FrameworkElement.Width%2A> has no effect; both properties can be set, but the values they are set with are not applied to the window.  \\n  \\n When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Height>, setting <xref:System.Windows.FrameworkElement.Height%2A> does not change the height of the window.  \\n  \\n When <xref:System.Windows.Window.SizeToContent%2A> is set to <xref:System.Windows.SizeToContent.Width>, setting <xref:System.Windows.FrameworkElement.Width%2A> does not change the width of the window.  \\n  \\n If <xref:System.Windows.Window.SizeToContent%2A> has a value other than <xref:System.Windows.SizeToContent.Manual>:  \\n  \\n-   <xref:System.Windows.Window.SizeToContent%2A> is automatically set to <xref:System.Windows.SizeToContent.Manual> if a user resizes the window by using the resize grip or dragging the border.  \\n  \\n-   If the size of the content changes in a way that causes the window to resize itself, <xref:System.Windows.FrameworkElement.SizeChanged> is raised.  \\n  \\n If a window is transparent (see <xref:System.Windows.Window.AllowsTransparency%2A>), you should consider setting <xref:System.Windows.Window.SizeToContent%2A> to <xref:System.Windows.SizeToContent.WidthAndHeight> to ensure the window is no larger than its visible content.  \\n  \\n> [!NOTE]\\n>  You cannot set or get this property when a window is hosted in a browser.  \\n  \\n<a name=\\\"dependencyPropertyInfo_WindowSizeToContent\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Window.SizeToContentProperty>|  \\n|Metadata properties set to `true`|None|\"\n  example:\n  - \"The following example shows how to set the <xref:System.Windows.Window.SizeToContent%2A> property in code to specify how a window resizes to fit its content.  \\n  \\n [!code-csharp[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/csharp/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/CSharp/MainWindow.xaml.cs#setwindowsizetocontentpropertycode)]\\n [!code-vb[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HOWTOWindowManagementSnippets/visualbasic/mainwindow.xaml.vb#setwindowsizetocontentpropertycode)]\"\n  syntax:\n    content: public System.Windows.SizeToContent SizeToContent { get; set; }\n    return:\n      type: System.Windows.SizeToContent\n      description: A <xref href=\"System.Windows.SizeToContent\"></xref> value. The default is <xref href=\"System.Windows.SizeToContent.Manual\"></xref>.\n  overload: System.Windows.Window.SizeToContent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.SizeToContentProperty\n  commentId: F:System.Windows.Window.SizeToContentProperty\n  id: SizeToContentProperty\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: SizeToContentProperty\n  nameWithType: Window.SizeToContentProperty\n  fullName: Window.SizeToContentProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.Window.SizeToContent\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty SizeToContentProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.SourceInitialized\n  commentId: E:System.Windows.Window.SourceInitialized\n  id: SourceInitialized\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: SourceInitialized\n  nameWithType: Window.SourceInitialized\n  fullName: Window.SourceInitialized\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: This event is raised to support interoperation with [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)]. See <xref href=\"System.Windows.Interop.HwndSource\"></xref>.\n  syntax:\n    content: public event EventHandler SourceInitialized;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.StateChanged\n  commentId: E:System.Windows.Window.StateChanged\n  id: StateChanged\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: StateChanged\n  nameWithType: Window.StateChanged\n  fullName: Window.StateChanged\n  type: Event\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Occurs when the window's <xref href=\"System.Windows.Window.WindowState\"></xref> property changes.\n  syntax:\n    content: public event EventHandler StateChanged;\n    return:\n      type: System.EventHandler\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.TaskbarItemInfo\n  commentId: P:System.Windows.Window.TaskbarItemInfo\n  id: TaskbarItemInfo\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: TaskbarItemInfo\n  nameWithType: Window.TaskbarItemInfo\n  fullName: Window.TaskbarItemInfo\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <xref href=\"System.Windows.Window\"></xref>.\n  remarks: For more information about how to use the [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail, see the <xref:System.Windows.Shell.TaskbarItemInfo> class.\n  syntax:\n    content: public System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo { get; set; }\n    return:\n      type: System.Windows.Shell.TaskbarItemInfo\n      description: The [!INCLUDE[win7](~/includes/win7-md.md)] taskbar thumbnail for the <xref href=\"System.Windows.Window\"></xref>.\n  overload: System.Windows.Window.TaskbarItemInfo*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.TaskbarItemInfoProperty\n  commentId: F:System.Windows.Window.TaskbarItemInfoProperty\n  id: TaskbarItemInfoProperty\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: TaskbarItemInfoProperty\n  nameWithType: Window.TaskbarItemInfoProperty\n  fullName: Window.TaskbarItemInfoProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.Window.TaskbarItemInfo\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty TaskbarItemInfoProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.Title\n  commentId: P:System.Windows.Window.Title\n  id: Title\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: Title\n  nameWithType: Window.Title\n  fullName: Window.Title\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a window's title.\n  remarks: \"The title of a <xref:System.Windows.Window>, <xref:System.Windows.Navigation.NavigationWindow>, or [!INCLUDE[TLA#tla_iegeneric](~/includes/tlasharptla-iegeneric-md.md)], can also be set by using <xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName>.  \\n  \\n<a name=\\\"dependencyPropertyInfo_WindowTitle\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Window.TitleProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: >-\n      [System.Windows.Localizability(System.Windows.LocalizationCategory.Title)]\n\n      public string Title { get; set; }\n    return:\n      type: System.String\n      description: A <xref href=\"System.String\"></xref> that contains the window's title.\n  overload: System.Windows.Window.Title*\n  exceptions: []\n  attributes:\n  - type: System.Windows.LocalizabilityAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.TitleProperty\n  commentId: F:System.Windows.Window.TitleProperty\n  id: TitleProperty\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: TitleProperty\n  nameWithType: Window.TitleProperty\n  fullName: Window.TitleProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.Window.Title\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty TitleProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.Top\n  commentId: P:System.Windows.Window.Top\n  id: Top\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: Top\n  nameWithType: Window.Top\n  fullName: Window.Top\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the position of the window's top edge, in relation to the desktop.\n  remarks: \"When the <xref:System.Windows.Window> is maximized or minimized, this value represents the top edge of the restore point for the <xref:System.Windows.Window>.  \\n  \\n This property cannot be set through a style.  \\n  \\n If you do not specify a value, <xref:System.Windows.Window.Top%2A> is set to the system default value. You can also specify the system default value by setting <xref:System.Windows.Window.Top%2A> to <xref:System.Double.NaN>. Neither <xref:System.Double.NegativeInfinity> nor <xref:System.Double.PositiveInfinity> is a valid value for <xref:System.Windows.Window.Top%2A>.  \\n  \\n> [!NOTE]\\n>  You cannot set or get this property when a window is hosted in a browser.  \\n  \\n<a name=\\\"dependencyPropertyInfo_WindowTop\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Window.TopProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(\"System.Windows.LengthConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null\")]\n\n      public double Top { get; set; }\n    return:\n      type: System.Double\n      description: The position of the window's top, in logical units (1/96\").\n  overload: System.Windows.Window.Top*\n  exceptions: []\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Window.Topmost\n  commentId: P:System.Windows.Window.Topmost\n  id: Topmost\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: Topmost\n  nameWithType: Window.Topmost\n  fullName: Window.Topmost\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether a window appears in the topmost z-order.\n  remarks: \"A window whose <xref:System.Windows.Window.Topmost%2A> property is set to `true` appears above all windows whose <xref:System.Windows.Window.Topmost%2A> properties are set to `false`.  \\n  \\n In the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `true`, the window that is currently activated is the topmost window. Likewise for the group of windows that have <xref:System.Windows.Window.Topmost%2A> property is set to `false`.  \\n  \\n> [!NOTE]\\n>  You cannot set or get this property when a window is hosted in a browser.  \\n  \\n<a name=\\\"dependencyPropertyInfo_WindowTopmost\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Window.TopmostProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public bool Topmost { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the window is topmost; otherwise, `false`.'\n  overload: System.Windows.Window.Topmost*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.TopmostProperty\n  commentId: F:System.Windows.Window.TopmostProperty\n  id: TopmostProperty\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: TopmostProperty\n  nameWithType: Window.TopmostProperty\n  fullName: Window.TopmostProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.Window.Topmost\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty TopmostProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.TopProperty\n  commentId: F:System.Windows.Window.TopProperty\n  id: TopProperty\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: TopProperty\n  nameWithType: Window.TopProperty\n  fullName: Window.TopProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.Window.Top\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty TopProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.WindowStartupLocation\n  commentId: P:System.Windows.Window.WindowStartupLocation\n  id: WindowStartupLocation\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: WindowStartupLocation\n  nameWithType: Window.WindowStartupLocation\n  fullName: Window.WindowStartupLocation\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets the position of the window when first shown.\n  remarks: \"Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.Manual> causes a window to be positioned according to its <xref:System.Windows.Window.Left%2A> and <xref:System.Windows.Window.Top%2A> property values. If either the <xref:System.Windows.Window.Left%2A> or <xref:System.Windows.Window.Top%2A> properties aren't specified, their values are determined by [!INCLUDE[TLA2#tla_mswin](~/includes/tla2sharptla-mswin-md.md)].  \\n  \\n Setting <xref:System.Windows.WindowStartupLocation.CenterScreen> causes a window to be positioned in the center of the screen that contains the mouse cursor.  \\n  \\n Setting <xref:System.Windows.WindowStartupLocation> to <xref:System.Windows.WindowStartupLocation.CenterOwner> causes a window to be positioned in the center of its owner window (see <xref:System.Windows.Window.Owner%2A>), if specified. The owner window can be either another WPF window or a non-WPF window.  \\n  \\n> [!NOTE]\\n>  For more information about WPF windows with non-WPF windows, see [WPF and Win32 Interoperation](~/docs/framework/wpf/advanced/wpf-and-win32-interoperation.md) and <xref:System.Windows.Interop.WindowInteropHelper>.  \\n  \\n If an owner window is not specified, the position of the window is determined in the same way as if <xref:System.Windows.WindowStartupLocation> is set to <xref:System.Windows.WindowStartupLocation.Manual>.  \\n  \\n> [!NOTE]\\n>  You cannot set or get the value of this property when a window is hosted in a browser.\"\n  syntax:\n    content: public System.Windows.WindowStartupLocation WindowStartupLocation { get; set; }\n    return:\n      type: System.Windows.WindowStartupLocation\n      description: A <xref href=\"System.Windows.WindowStartupLocation\"></xref> value that specifies the top/left position of a window when first shown. The default is <xref href=\"System.Windows.WindowStartupLocation.Manual\"></xref>.\n  overload: System.Windows.Window.WindowStartupLocation*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Window.WindowState\n  commentId: P:System.Windows.Window.WindowState\n  id: WindowState\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: WindowState\n  nameWithType: Window.WindowState\n  fullName: Window.WindowState\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a value that indicates whether a window is restored, minimized, or maximized.\n  remarks: \"Before a window is minimized or maximized, its size and location are stored in <xref:System.Windows.Window.RestoreBounds%2A>. When a window is subsequently restored, its size and location values are restored with the values from <xref:System.Windows.Window.RestoreBounds%2A>.  \\n  \\n When the <xref:System.Windows.Window.WindowState%2A> property is changed, <xref:System.Windows.Window.StateChanged> is raised.  \\n  \\n> [!NOTE]\\n>  You cannot set or get this property when a window is hosted in a browser.  \\n  \\n<a name=\\\"dependencyPropertyInfo_WindowWindowState\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Window.WindowStateProperty>|  \\n|Metadata properties set to `true`|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|\"\n  syntax:\n    content: public System.Windows.WindowState WindowState { get; set; }\n    return:\n      type: System.Windows.WindowState\n      description: A <xref href=\"System.Windows.WindowState\"></xref> that determines whether a window is restored, minimized, or maximized. The default is <xref href=\"System.Windows.WindowState.Normal\"></xref> (restored).\n  overload: System.Windows.Window.WindowState*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Window.WindowStateProperty\n  commentId: F:System.Windows.Window.WindowStateProperty\n  id: WindowStateProperty\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: WindowStateProperty\n  nameWithType: Window.WindowStateProperty\n  fullName: Window.WindowStateProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.Window.WindowState\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty WindowStateProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.WindowStyle\n  commentId: P:System.Windows.Window.WindowStyle\n  id: WindowStyle\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: WindowStyle\n  nameWithType: Window.WindowStyle\n  fullName: Window.WindowStyle\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Gets or sets a window's border style.\n  remarks: \"<xref:System.Windows.Window.WindowStyle%2A> can be one of the <xref:System.Windows.WindowStyle> enumeration values, including <xref:System.Windows.WindowStyle.None>, <xref:System.Windows.WindowStyle.ToolWindow>, <xref:System.Windows.WindowStyle.SingleBorderWindow> (default), and <xref:System.Windows.WindowStyle.ThreeDBorderWindow>.  \\n  \\n The following figure shows the window styles on [!INCLUDE[TLA#tla_longhorn](~/includes/tlasharptla-longhorn-md.md)] (Windows Vista Aero theme, with transparent glass enabled):  \\n  \\n ![Window styles](~/add/media/windowoverviewfigure6.PNG \\\"Window styles\\\")  \\n  \\n> [!NOTE]\\n>  You cannot set or get this property when a window is hosted in a browser.  \\n  \\n<a name=\\\"dependencyPropertyInfo_WindowWindowStyle\\\"></a>   \\n## Dependency Property Information  \\n  \\n|||  \\n|-|-|  \\n|Identifier field|<xref:System.Windows.Window.WindowStyleProperty>|  \\n|Metadata properties set to `true`|None|\"\n  syntax:\n    content: public System.Windows.WindowStyle WindowStyle { get; set; }\n    return:\n      type: System.Windows.WindowStyle\n      description: A <xref href=\"System.Windows.WindowStyle\"></xref> that specifies a window's border style. The default is <xref href=\"System.Windows.WindowStyle.SingleBorderWindow\"></xref>.\n  overload: System.Windows.Window.WindowStyle*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Window.WindowStyleProperty\n  commentId: F:System.Windows.Window.WindowStyleProperty\n  id: WindowStyleProperty\n  parent: System.Windows.Window\n  langs:\n  - csharp\n  name: WindowStyleProperty\n  nameWithType: Window.WindowStyleProperty\n  fullName: Window.WindowStyleProperty\n  type: Field\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows\n  summary: Identifies the <xref href=\"System.Windows.Window.WindowStyle\"></xref> dependency property.\n  syntax:\n    content: public static readonly System.Windows.DependencyProperty WindowStyleProperty;\n    return:\n      type: System.Windows.DependencyProperty\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\nreferences:\n- uid: System.Windows.Controls.ContentControl\n  parent: System.Windows.Controls\n  isExternal: false\n  name: ContentControl\n  nameWithType: ContentControl\n  fullName: System.Windows.Controls.ContentControl\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Windows.Window.#ctor\n  parent: System.Windows.Window\n  isExternal: false\n  name: Window()\n  nameWithType: Window.Window()\n  fullName: Window.Window()\n- uid: System.Windows.Window.Activate\n  parent: System.Windows.Window\n  isExternal: false\n  name: Activate()\n  nameWithType: Window.Activate()\n  fullName: Window.Activate()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Window.Activated\n  parent: System.Windows.Window\n  isExternal: false\n  name: Activated\n  nameWithType: Window.Activated\n  fullName: Window.Activated\n- uid: System.EventHandler\n  parent: System\n  isExternal: false\n  name: EventHandler\n  nameWithType: EventHandler\n  fullName: System.EventHandler\n- uid: System.Windows.Window.AllowsTransparency\n  parent: System.Windows.Window\n  isExternal: false\n  name: AllowsTransparency\n  nameWithType: Window.AllowsTransparency\n  fullName: Window.AllowsTransparency\n- uid: System.Windows.Window.AllowsTransparencyProperty\n  parent: System.Windows.Window\n  isExternal: false\n  name: AllowsTransparencyProperty\n  nameWithType: Window.AllowsTransparencyProperty\n  fullName: Window.AllowsTransparencyProperty\n- uid: System.Windows.DependencyProperty\n  parent: System.Windows\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Windows.DependencyProperty\n- uid: System.Windows.Window.ArrangeOverride(System.Windows.Size)\n  parent: System.Windows.Window\n  isExternal: false\n  name: ArrangeOverride(Size)\n  nameWithType: Window.ArrangeOverride(Size)\n  fullName: Window.ArrangeOverride(Size)\n- uid: System.Windows.Size\n  parent: System.Windows\n  isExternal: false\n  name: Size\n  nameWithType: Size\n  fullName: System.Windows.Size\n- uid: System.Windows.Window.Close\n  parent: System.Windows.Window\n  isExternal: false\n  name: Close()\n  nameWithType: Window.Close()\n  fullName: Window.Close()\n- uid: System.Windows.Window.Closed\n  parent: System.Windows.Window\n  isExternal: false\n  name: Closed\n  nameWithType: Window.Closed\n  fullName: Window.Closed\n- uid: System.Windows.Window.Closing\n  parent: System.Windows.Window\n  isExternal: false\n  name: Closing\n  nameWithType: Window.Closing\n  fullName: Window.Closing\n- uid: System.ComponentModel.CancelEventHandler\n  parent: System.ComponentModel\n  isExternal: false\n  name: CancelEventHandler\n  nameWithType: CancelEventHandler\n  fullName: System.ComponentModel.CancelEventHandler\n- uid: System.Windows.Window.ContentRendered\n  parent: System.Windows.Window\n  isExternal: false\n  name: ContentRendered\n  nameWithType: Window.ContentRendered\n  fullName: Window.ContentRendered\n- uid: System.Windows.Window.Deactivated\n  parent: System.Windows.Window\n  isExternal: false\n  name: Deactivated\n  nameWithType: Window.Deactivated\n  fullName: Window.Deactivated\n- uid: System.Windows.Window.DialogResult\n  parent: System.Windows.Window\n  isExternal: false\n  name: DialogResult\n  nameWithType: Window.DialogResult\n  fullName: Window.DialogResult\n- uid: System.Nullable`1\n  name: Nullable<T>\n  nameWithType: Nullable<T>\n  fullName: System.Nullable<T>\n- uid: System.Nullable{System.Boolean}\n  parent: System\n  isExternal: false\n  name: Nullable<Boolean>\n  nameWithType: Nullable<Boolean>\n  fullName: System.Nullable<System.Boolean>\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    nameWithType: Nullable\n    fullName: System.Nullable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Boolean\n    name: Boolean\n    nameWithType: Boolean\n    fullName: System.Boolean\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Windows.Window.DpiChanged\n  parent: System.Windows.Window\n  isExternal: false\n  name: DpiChanged\n  nameWithType: Window.DpiChanged\n  fullName: Window.DpiChanged\n- uid: System.Windows.DpiChangedEventHandler\n  parent: System.Windows\n  isExternal: false\n  name: DpiChangedEventHandler\n  nameWithType: DpiChangedEventHandler\n  fullName: System.Windows.DpiChangedEventHandler\n- uid: System.Windows.Window.DpiChangedEvent\n  parent: System.Windows.Window\n  isExternal: false\n  name: DpiChangedEvent\n  nameWithType: Window.DpiChangedEvent\n  fullName: Window.DpiChangedEvent\n- uid: System.Windows.RoutedEvent\n  parent: System.Windows\n  isExternal: false\n  name: RoutedEvent\n  nameWithType: RoutedEvent\n  fullName: System.Windows.RoutedEvent\n- uid: System.Windows.Window.DragMove\n  parent: System.Windows.Window\n  isExternal: false\n  name: DragMove()\n  nameWithType: Window.DragMove()\n  fullName: Window.DragMove()\n- uid: System.Windows.Window.GetWindow(System.Windows.DependencyObject)\n  parent: System.Windows.Window\n  isExternal: false\n  name: GetWindow(DependencyObject)\n  nameWithType: Window.GetWindow(DependencyObject)\n  fullName: Window.GetWindow(DependencyObject)\n- uid: System.Windows.Window\n  parent: System.Windows\n  isExternal: false\n  name: Window\n  nameWithType: Window\n  fullName: System.Windows.Window\n- uid: System.Windows.DependencyObject\n  parent: System.Windows\n  isExternal: false\n  name: DependencyObject\n  nameWithType: DependencyObject\n  fullName: System.Windows.DependencyObject\n- uid: System.Windows.Window.Hide\n  parent: System.Windows.Window\n  isExternal: false\n  name: Hide()\n  nameWithType: Window.Hide()\n  fullName: Window.Hide()\n- uid: System.Windows.Window.Icon\n  parent: System.Windows.Window\n  isExternal: false\n  name: Icon\n  nameWithType: Window.Icon\n  fullName: Window.Icon\n- uid: System.Windows.Media.ImageSource\n  parent: System.Windows.Media\n  isExternal: false\n  name: ImageSource\n  nameWithType: ImageSource\n  fullName: System.Windows.Media.ImageSource\n- uid: System.Windows.Window.IconProperty\n  parent: System.Windows.Window\n  isExternal: false\n  name: IconProperty\n  nameWithType: Window.IconProperty\n  fullName: Window.IconProperty\n- uid: System.Windows.Window.IsActive\n  parent: System.Windows.Window\n  isExternal: false\n  name: IsActive\n  nameWithType: Window.IsActive\n  fullName: Window.IsActive\n- uid: System.Windows.Window.IsActiveProperty\n  parent: System.Windows.Window\n  isExternal: false\n  name: IsActiveProperty\n  nameWithType: Window.IsActiveProperty\n  fullName: Window.IsActiveProperty\n- uid: System.Windows.Window.Left\n  parent: System.Windows.Window\n  isExternal: false\n  name: Left\n  nameWithType: Window.Left\n  fullName: Window.Left\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Windows.Window.LeftProperty\n  parent: System.Windows.Window\n  isExternal: false\n  name: LeftProperty\n  nameWithType: Window.LeftProperty\n  fullName: Window.LeftProperty\n- uid: System.Windows.Window.LocationChanged\n  parent: System.Windows.Window\n  isExternal: false\n  name: LocationChanged\n  nameWithType: Window.LocationChanged\n  fullName: Window.LocationChanged\n- uid: System.Windows.Window.LogicalChildren\n  parent: System.Windows.Window\n  isExternal: false\n  name: LogicalChildren\n  nameWithType: Window.LogicalChildren\n  fullName: Window.LogicalChildren\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Windows.Window.MeasureOverride(System.Windows.Size)\n  parent: System.Windows.Window\n  isExternal: false\n  name: MeasureOverride(Size)\n  nameWithType: Window.MeasureOverride(Size)\n  fullName: Window.MeasureOverride(Size)\n- uid: System.Windows.Window.OnActivated(System.EventArgs)\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnActivated(EventArgs)\n  nameWithType: Window.OnActivated(EventArgs)\n  fullName: Window.OnActivated(EventArgs)\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  nameWithType: EventArgs\n  fullName: System.EventArgs\n- uid: System.Windows.Window.OnClosed(System.EventArgs)\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnClosed(EventArgs)\n  nameWithType: Window.OnClosed(EventArgs)\n  fullName: Window.OnClosed(EventArgs)\n- uid: System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnClosing(CancelEventArgs)\n  nameWithType: Window.OnClosing(CancelEventArgs)\n  fullName: Window.OnClosing(CancelEventArgs)\n- uid: System.ComponentModel.CancelEventArgs\n  parent: System.ComponentModel\n  isExternal: false\n  name: CancelEventArgs\n  nameWithType: CancelEventArgs\n  fullName: System.ComponentModel.CancelEventArgs\n- uid: System.Windows.Window.OnContentChanged(System.Object,System.Object)\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnContentChanged(Object, Object)\n  nameWithType: Window.OnContentChanged(Object, Object)\n  fullName: Window.OnContentChanged(Object, Object)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Window.OnContentRendered(System.EventArgs)\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnContentRendered(EventArgs)\n  nameWithType: Window.OnContentRendered(EventArgs)\n  fullName: Window.OnContentRendered(EventArgs)\n- uid: System.Windows.Window.OnCreateAutomationPeer\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnCreateAutomationPeer()\n  nameWithType: Window.OnCreateAutomationPeer()\n  fullName: Window.OnCreateAutomationPeer()\n- uid: System.Windows.Automation.Peers.AutomationPeer\n  parent: System.Windows.Automation.Peers\n  isExternal: false\n  name: AutomationPeer\n  nameWithType: AutomationPeer\n  fullName: System.Windows.Automation.Peers.AutomationPeer\n- uid: System.Windows.Window.OnDeactivated(System.EventArgs)\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnDeactivated(EventArgs)\n  nameWithType: Window.OnDeactivated(EventArgs)\n  fullName: Window.OnDeactivated(EventArgs)\n- uid: System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnDpiChanged(DpiScale, DpiScale)\n  nameWithType: Window.OnDpiChanged(DpiScale, DpiScale)\n  fullName: Window.OnDpiChanged(DpiScale, DpiScale)\n- uid: System.Windows.DpiScale\n  parent: System.Windows\n  isExternal: false\n  name: DpiScale\n  nameWithType: DpiScale\n  fullName: System.Windows.DpiScale\n- uid: System.Windows.Window.OnLocationChanged(System.EventArgs)\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnLocationChanged(EventArgs)\n  nameWithType: Window.OnLocationChanged(EventArgs)\n  fullName: Window.OnLocationChanged(EventArgs)\n- uid: System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)\n  nameWithType: Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)\n  fullName: Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)\n- uid: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: ManipulationBoundaryFeedbackEventArgs\n  nameWithType: ManipulationBoundaryFeedbackEventArgs\n  fullName: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs\n- uid: System.Windows.Window.OnSourceInitialized(System.EventArgs)\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnSourceInitialized(EventArgs)\n  nameWithType: Window.OnSourceInitialized(EventArgs)\n  fullName: Window.OnSourceInitialized(EventArgs)\n- uid: System.Windows.Window.OnStateChanged(System.EventArgs)\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnStateChanged(EventArgs)\n  nameWithType: Window.OnStateChanged(EventArgs)\n  fullName: Window.OnStateChanged(EventArgs)\n- uid: System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnVisualParentChanged(DependencyObject)\n  nameWithType: Window.OnVisualParentChanged(DependencyObject)\n  fullName: Window.OnVisualParentChanged(DependencyObject)\n- uid: System.Windows.Window.OwnedWindows\n  parent: System.Windows.Window\n  isExternal: false\n  name: OwnedWindows\n  nameWithType: Window.OwnedWindows\n  fullName: Window.OwnedWindows\n- uid: System.Windows.WindowCollection\n  parent: System.Windows\n  isExternal: false\n  name: WindowCollection\n  nameWithType: WindowCollection\n  fullName: System.Windows.WindowCollection\n- uid: System.Windows.Window.Owner\n  parent: System.Windows.Window\n  isExternal: false\n  name: Owner\n  nameWithType: Window.Owner\n  fullName: Window.Owner\n- uid: System.Windows.Window.ResizeMode\n  parent: System.Windows.Window\n  isExternal: false\n  name: ResizeMode\n  nameWithType: Window.ResizeMode\n  fullName: Window.ResizeMode\n- uid: System.Windows.ResizeMode\n  parent: System.Windows\n  isExternal: false\n  name: ResizeMode\n  nameWithType: ResizeMode\n  fullName: System.Windows.ResizeMode\n- uid: System.Windows.Window.ResizeModeProperty\n  parent: System.Windows.Window\n  isExternal: false\n  name: ResizeModeProperty\n  nameWithType: Window.ResizeModeProperty\n  fullName: Window.ResizeModeProperty\n- uid: System.Windows.Window.RestoreBounds\n  parent: System.Windows.Window\n  isExternal: false\n  name: RestoreBounds\n  nameWithType: Window.RestoreBounds\n  fullName: Window.RestoreBounds\n- uid: System.Windows.Rect\n  parent: System.Windows\n  isExternal: false\n  name: Rect\n  nameWithType: Rect\n  fullName: System.Windows.Rect\n- uid: System.Windows.Window.Show\n  parent: System.Windows.Window\n  isExternal: false\n  name: Show()\n  nameWithType: Window.Show()\n  fullName: Window.Show()\n- uid: System.Windows.Window.ShowActivated\n  parent: System.Windows.Window\n  isExternal: false\n  name: ShowActivated\n  nameWithType: Window.ShowActivated\n  fullName: Window.ShowActivated\n- uid: System.Windows.Window.ShowActivatedProperty\n  parent: System.Windows.Window\n  isExternal: false\n  name: ShowActivatedProperty\n  nameWithType: Window.ShowActivatedProperty\n  fullName: Window.ShowActivatedProperty\n- uid: System.Windows.Window.ShowDialog\n  parent: System.Windows.Window\n  isExternal: false\n  name: ShowDialog()\n  nameWithType: Window.ShowDialog()\n  fullName: Window.ShowDialog()\n- uid: System.Windows.Window.ShowInTaskbar\n  parent: System.Windows.Window\n  isExternal: false\n  name: ShowInTaskbar\n  nameWithType: Window.ShowInTaskbar\n  fullName: Window.ShowInTaskbar\n- uid: System.Windows.Window.ShowInTaskbarProperty\n  parent: System.Windows.Window\n  isExternal: false\n  name: ShowInTaskbarProperty\n  nameWithType: Window.ShowInTaskbarProperty\n  fullName: Window.ShowInTaskbarProperty\n- uid: System.Windows.Window.SizeToContent\n  parent: System.Windows.Window\n  isExternal: false\n  name: SizeToContent\n  nameWithType: Window.SizeToContent\n  fullName: Window.SizeToContent\n- uid: System.Windows.SizeToContent\n  parent: System.Windows\n  isExternal: false\n  name: SizeToContent\n  nameWithType: SizeToContent\n  fullName: System.Windows.SizeToContent\n- uid: System.Windows.Window.SizeToContentProperty\n  parent: System.Windows.Window\n  isExternal: false\n  name: SizeToContentProperty\n  nameWithType: Window.SizeToContentProperty\n  fullName: Window.SizeToContentProperty\n- uid: System.Windows.Window.SourceInitialized\n  parent: System.Windows.Window\n  isExternal: false\n  name: SourceInitialized\n  nameWithType: Window.SourceInitialized\n  fullName: Window.SourceInitialized\n- uid: System.Windows.Window.StateChanged\n  parent: System.Windows.Window\n  isExternal: false\n  name: StateChanged\n  nameWithType: Window.StateChanged\n  fullName: Window.StateChanged\n- uid: System.Windows.Window.TaskbarItemInfo\n  parent: System.Windows.Window\n  isExternal: false\n  name: TaskbarItemInfo\n  nameWithType: Window.TaskbarItemInfo\n  fullName: Window.TaskbarItemInfo\n- uid: System.Windows.Shell.TaskbarItemInfo\n  parent: System.Windows.Shell\n  isExternal: false\n  name: TaskbarItemInfo\n  nameWithType: TaskbarItemInfo\n  fullName: System.Windows.Shell.TaskbarItemInfo\n- uid: System.Windows.Window.TaskbarItemInfoProperty\n  parent: System.Windows.Window\n  isExternal: false\n  name: TaskbarItemInfoProperty\n  nameWithType: Window.TaskbarItemInfoProperty\n  fullName: Window.TaskbarItemInfoProperty\n- uid: System.Windows.Window.Title\n  parent: System.Windows.Window\n  isExternal: false\n  name: Title\n  nameWithType: Window.Title\n  fullName: Window.Title\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Window.TitleProperty\n  parent: System.Windows.Window\n  isExternal: false\n  name: TitleProperty\n  nameWithType: Window.TitleProperty\n  fullName: Window.TitleProperty\n- uid: System.Windows.Window.Top\n  parent: System.Windows.Window\n  isExternal: false\n  name: Top\n  nameWithType: Window.Top\n  fullName: Window.Top\n- uid: System.Windows.Window.Topmost\n  parent: System.Windows.Window\n  isExternal: false\n  name: Topmost\n  nameWithType: Window.Topmost\n  fullName: Window.Topmost\n- uid: System.Windows.Window.TopmostProperty\n  parent: System.Windows.Window\n  isExternal: false\n  name: TopmostProperty\n  nameWithType: Window.TopmostProperty\n  fullName: Window.TopmostProperty\n- uid: System.Windows.Window.TopProperty\n  parent: System.Windows.Window\n  isExternal: false\n  name: TopProperty\n  nameWithType: Window.TopProperty\n  fullName: Window.TopProperty\n- uid: System.Windows.Window.WindowStartupLocation\n  parent: System.Windows.Window\n  isExternal: false\n  name: WindowStartupLocation\n  nameWithType: Window.WindowStartupLocation\n  fullName: Window.WindowStartupLocation\n- uid: System.Windows.WindowStartupLocation\n  parent: System.Windows\n  isExternal: false\n  name: WindowStartupLocation\n  nameWithType: WindowStartupLocation\n  fullName: System.Windows.WindowStartupLocation\n- uid: System.Windows.Window.WindowState\n  parent: System.Windows.Window\n  isExternal: false\n  name: WindowState\n  nameWithType: Window.WindowState\n  fullName: Window.WindowState\n- uid: System.Windows.WindowState\n  parent: System.Windows\n  isExternal: false\n  name: WindowState\n  nameWithType: WindowState\n  fullName: System.Windows.WindowState\n- uid: System.Windows.Window.WindowStateProperty\n  parent: System.Windows.Window\n  isExternal: false\n  name: WindowStateProperty\n  nameWithType: Window.WindowStateProperty\n  fullName: Window.WindowStateProperty\n- uid: System.Windows.Window.WindowStyle\n  parent: System.Windows.Window\n  isExternal: false\n  name: WindowStyle\n  nameWithType: Window.WindowStyle\n  fullName: Window.WindowStyle\n- uid: System.Windows.WindowStyle\n  parent: System.Windows\n  isExternal: false\n  name: WindowStyle\n  nameWithType: WindowStyle\n  fullName: System.Windows.WindowStyle\n- uid: System.Windows.Window.WindowStyleProperty\n  parent: System.Windows.Window\n  isExternal: false\n  name: WindowStyleProperty\n  nameWithType: Window.WindowStyleProperty\n  fullName: Window.WindowStyleProperty\n- uid: System.Windows.Window.#ctor*\n  parent: System.Windows.Window\n  isExternal: false\n  name: Window\n  nameWithType: Window.Window\n  fullName: Window.Window\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.Activate*\n  parent: System.Windows.Window\n  isExternal: false\n  name: Activate\n  nameWithType: Window.Activate\n  fullName: Window.Activate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.AllowsTransparency*\n  parent: System.Windows.Window\n  isExternal: false\n  name: AllowsTransparency\n  nameWithType: Window.AllowsTransparency\n  fullName: Window.AllowsTransparency\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.ArrangeOverride*\n  parent: System.Windows.Window\n  isExternal: false\n  name: ArrangeOverride\n  nameWithType: Window.ArrangeOverride\n  fullName: Window.ArrangeOverride\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.Close*\n  parent: System.Windows.Window\n  isExternal: false\n  name: Close\n  nameWithType: Window.Close\n  fullName: Window.Close\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.DialogResult*\n  parent: System.Windows.Window\n  isExternal: false\n  name: DialogResult\n  nameWithType: Window.DialogResult\n  fullName: Window.DialogResult\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.DragMove*\n  parent: System.Windows.Window\n  isExternal: false\n  name: DragMove\n  nameWithType: Window.DragMove\n  fullName: Window.DragMove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.GetWindow*\n  parent: System.Windows.Window\n  isExternal: false\n  name: GetWindow\n  nameWithType: Window.GetWindow\n  fullName: Window.GetWindow\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.Hide*\n  parent: System.Windows.Window\n  isExternal: false\n  name: Hide\n  nameWithType: Window.Hide\n  fullName: Window.Hide\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.Icon*\n  parent: System.Windows.Window\n  isExternal: false\n  name: Icon\n  nameWithType: Window.Icon\n  fullName: Window.Icon\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.IsActive*\n  parent: System.Windows.Window\n  isExternal: false\n  name: IsActive\n  nameWithType: Window.IsActive\n  fullName: Window.IsActive\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.Left*\n  parent: System.Windows.Window\n  isExternal: false\n  name: Left\n  nameWithType: Window.Left\n  fullName: Window.Left\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.LogicalChildren*\n  parent: System.Windows.Window\n  isExternal: false\n  name: LogicalChildren\n  nameWithType: Window.LogicalChildren\n  fullName: Window.LogicalChildren\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.MeasureOverride*\n  parent: System.Windows.Window\n  isExternal: false\n  name: MeasureOverride\n  nameWithType: Window.MeasureOverride\n  fullName: Window.MeasureOverride\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.OnActivated*\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnActivated\n  nameWithType: Window.OnActivated\n  fullName: Window.OnActivated\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.OnClosed*\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnClosed\n  nameWithType: Window.OnClosed\n  fullName: Window.OnClosed\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.OnClosing*\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnClosing\n  nameWithType: Window.OnClosing\n  fullName: Window.OnClosing\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.OnContentChanged*\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnContentChanged\n  nameWithType: Window.OnContentChanged\n  fullName: Window.OnContentChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.OnContentRendered*\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnContentRendered\n  nameWithType: Window.OnContentRendered\n  fullName: Window.OnContentRendered\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.OnCreateAutomationPeer*\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnCreateAutomationPeer\n  nameWithType: Window.OnCreateAutomationPeer\n  fullName: Window.OnCreateAutomationPeer\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.OnDeactivated*\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnDeactivated\n  nameWithType: Window.OnDeactivated\n  fullName: Window.OnDeactivated\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.OnDpiChanged*\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnDpiChanged\n  nameWithType: Window.OnDpiChanged\n  fullName: Window.OnDpiChanged\n  monikers:\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.OnLocationChanged*\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnLocationChanged\n  nameWithType: Window.OnLocationChanged\n  fullName: Window.OnLocationChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.OnManipulationBoundaryFeedback*\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnManipulationBoundaryFeedback\n  nameWithType: Window.OnManipulationBoundaryFeedback\n  fullName: Window.OnManipulationBoundaryFeedback\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.OnSourceInitialized*\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnSourceInitialized\n  nameWithType: Window.OnSourceInitialized\n  fullName: Window.OnSourceInitialized\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.OnStateChanged*\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnStateChanged\n  nameWithType: Window.OnStateChanged\n  fullName: Window.OnStateChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.OnVisualParentChanged*\n  parent: System.Windows.Window\n  isExternal: false\n  name: OnVisualParentChanged\n  nameWithType: Window.OnVisualParentChanged\n  fullName: Window.OnVisualParentChanged\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.OwnedWindows*\n  parent: System.Windows.Window\n  isExternal: false\n  name: OwnedWindows\n  nameWithType: Window.OwnedWindows\n  fullName: Window.OwnedWindows\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.Owner*\n  parent: System.Windows.Window\n  isExternal: false\n  name: Owner\n  nameWithType: Window.Owner\n  fullName: Window.Owner\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.ResizeMode*\n  parent: System.Windows.Window\n  isExternal: false\n  name: ResizeMode\n  nameWithType: Window.ResizeMode\n  fullName: Window.ResizeMode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.RestoreBounds*\n  parent: System.Windows.Window\n  isExternal: false\n  name: RestoreBounds\n  nameWithType: Window.RestoreBounds\n  fullName: Window.RestoreBounds\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.Show*\n  parent: System.Windows.Window\n  isExternal: false\n  name: Show\n  nameWithType: Window.Show\n  fullName: Window.Show\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.ShowActivated*\n  parent: System.Windows.Window\n  isExternal: false\n  name: ShowActivated\n  nameWithType: Window.ShowActivated\n  fullName: Window.ShowActivated\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.ShowDialog*\n  parent: System.Windows.Window\n  isExternal: false\n  name: ShowDialog\n  nameWithType: Window.ShowDialog\n  fullName: Window.ShowDialog\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.ShowInTaskbar*\n  parent: System.Windows.Window\n  isExternal: false\n  name: ShowInTaskbar\n  nameWithType: Window.ShowInTaskbar\n  fullName: Window.ShowInTaskbar\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.SizeToContent*\n  parent: System.Windows.Window\n  isExternal: false\n  name: SizeToContent\n  nameWithType: Window.SizeToContent\n  fullName: Window.SizeToContent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.TaskbarItemInfo*\n  parent: System.Windows.Window\n  isExternal: false\n  name: TaskbarItemInfo\n  nameWithType: Window.TaskbarItemInfo\n  fullName: Window.TaskbarItemInfo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.Title*\n  parent: System.Windows.Window\n  isExternal: false\n  name: Title\n  nameWithType: Window.Title\n  fullName: Window.Title\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.Top*\n  parent: System.Windows.Window\n  isExternal: false\n  name: Top\n  nameWithType: Window.Top\n  fullName: Window.Top\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.Topmost*\n  parent: System.Windows.Window\n  isExternal: false\n  name: Topmost\n  nameWithType: Window.Topmost\n  fullName: Window.Topmost\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.WindowStartupLocation*\n  parent: System.Windows.Window\n  isExternal: false\n  name: WindowStartupLocation\n  nameWithType: Window.WindowStartupLocation\n  fullName: Window.WindowStartupLocation\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.WindowState*\n  parent: System.Windows.Window\n  isExternal: false\n  name: WindowState\n  nameWithType: Window.WindowState\n  fullName: Window.WindowState\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.Window.WindowStyle*\n  parent: System.Windows.Window\n  isExternal: false\n  name: WindowStyle\n  nameWithType: Window.WindowStyle\n  fullName: Window.WindowStyle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/Window.xml\n- uid: System.Windows.DependencyObject.Equals(System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: DependencyObject.Equals(Object)\n  fullName: DependencyObject.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Windows.DependencyObject.GetHashCode\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: DependencyObject.GetHashCode()\n  fullName: DependencyObject.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Windows.Controls.Control.ToString\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: ToString()\n  nameWithType: Control.ToString()\n  fullName: Control.ToString()\n- uid: System.Windows.Threading.DispatcherObject.CheckAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: CheckAccess()\n  nameWithType: DispatcherObject.CheckAccess()\n  fullName: DispatcherObject.CheckAccess()\n- uid: System.Windows.Threading.DispatcherObject.Dispatcher\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherObject.Dispatcher\n  fullName: DispatcherObject.Dispatcher\n- uid: System.Windows.Threading.DispatcherObject.VerifyAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: VerifyAccess()\n  nameWithType: DispatcherObject.VerifyAccess()\n  fullName: DispatcherObject.VerifyAccess()\n- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ClearValue(DependencyProperty)\n  nameWithType: DependencyObject.ClearValue(DependencyProperty)\n  fullName: DependencyObject.ClearValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ClearValue(DependencyPropertyKey)\n  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)\n  fullName: DependencyObject.ClearValue(DependencyPropertyKey)\n- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: CoerceValue(DependencyProperty)\n  nameWithType: DependencyObject.CoerceValue(DependencyProperty)\n  fullName: DependencyObject.CoerceValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.DependencyObjectType\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: DependencyObjectType\n  nameWithType: DependencyObject.DependencyObjectType\n  fullName: DependencyObject.DependencyObjectType\n- uid: System.Windows.DependencyObject.GetLocalValueEnumerator\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetLocalValueEnumerator()\n  nameWithType: DependencyObject.GetLocalValueEnumerator()\n  fullName: DependencyObject.GetLocalValueEnumerator()\n- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetValue(DependencyProperty)\n  nameWithType: DependencyObject.GetValue(DependencyProperty)\n  fullName: DependencyObject.GetValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: InvalidateProperty(DependencyProperty)\n  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)\n  fullName: DependencyObject.InvalidateProperty(DependencyProperty)\n- uid: System.Windows.DependencyObject.IsSealed\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: IsSealed\n  nameWithType: DependencyObject.IsSealed\n  fullName: DependencyObject.IsSealed\n- uid: System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  fullName: FrameworkElement.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ReadLocalValue(DependencyProperty)\n  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)\n  fullName: DependencyObject.ReadLocalValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetCurrentValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetCurrentValue(DependencyProperty, Object)\n- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetValue(DependencyProperty, Object)\n- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetValue(DependencyPropertyKey, Object)\n  nameWithType: DependencyObject.SetValue(DependencyPropertyKey, Object)\n  fullName: DependencyObject.SetValue(DependencyPropertyKey, Object)\n- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ShouldSerializeProperty(DependencyProperty)\n  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)\n  fullName: DependencyObject.ShouldSerializeProperty(DependencyProperty)\n- uid: System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: AddVisualChild(Visual)\n  nameWithType: Visual.AddVisualChild(Visual)\n  fullName: Visual.AddVisualChild(Visual)\n- uid: System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: FindCommonVisualAncestor(DependencyObject)\n  nameWithType: Visual.FindCommonVisualAncestor(DependencyObject)\n  fullName: Visual.FindCommonVisualAncestor(DependencyObject)\n- uid: System.Windows.FrameworkElement.GetVisualChild(System.Int32)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetVisualChild(Int32)\n  nameWithType: FrameworkElement.GetVisualChild(Int32)\n  fullName: FrameworkElement.GetVisualChild(Int32)\n- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: HitTestCore(GeometryHitTestParameters)\n  nameWithType: UIElement.HitTestCore(GeometryHitTestParameters)\n  fullName: UIElement.HitTestCore(GeometryHitTestParameters)\n- uid: System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: HitTestCore(PointHitTestParameters)\n  nameWithType: UIElement.HitTestCore(PointHitTestParameters)\n  fullName: UIElement.HitTestCore(PointHitTestParameters)\n- uid: System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: IsAncestorOf(DependencyObject)\n  nameWithType: Visual.IsAncestorOf(DependencyObject)\n  fullName: Visual.IsAncestorOf(DependencyObject)\n- uid: System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: IsDescendantOf(DependencyObject)\n  nameWithType: Visual.IsDescendantOf(DependencyObject)\n  fullName: Visual.IsDescendantOf(DependencyObject)\n- uid: System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: OnVisualChildrenChanged(DependencyObject, DependencyObject)\n  nameWithType: Visual.OnVisualChildrenChanged(DependencyObject, DependencyObject)\n  fullName: Visual.OnVisualChildrenChanged(DependencyObject, DependencyObject)\n- uid: System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: PointFromScreen(Point)\n  nameWithType: Visual.PointFromScreen(Point)\n  fullName: Visual.PointFromScreen(Point)\n- uid: System.Windows.Media.Visual.PointToScreen(System.Windows.Point)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: PointToScreen(Point)\n  nameWithType: Visual.PointToScreen(Point)\n  fullName: Visual.PointToScreen(Point)\n- uid: System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: RemoveVisualChild(Visual)\n  nameWithType: Visual.RemoveVisualChild(Visual)\n  fullName: Visual.RemoveVisualChild(Visual)\n- uid: System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: TransformToAncestor(Visual3D)\n  nameWithType: Visual.TransformToAncestor(Visual3D)\n  fullName: Visual.TransformToAncestor(Visual3D)\n- uid: System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: TransformToAncestor(Visual)\n  nameWithType: Visual.TransformToAncestor(Visual)\n  fullName: Visual.TransformToAncestor(Visual)\n- uid: System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: TransformToDescendant(Visual)\n  nameWithType: Visual.TransformToDescendant(Visual)\n  fullName: Visual.TransformToDescendant(Visual)\n- uid: System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: TransformToVisual(Visual)\n  nameWithType: Visual.TransformToVisual(Visual)\n  fullName: Visual.TransformToVisual(Visual)\n- uid: System.Windows.Media.Visual.VisualBitmapEffect\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualBitmapEffect\n  nameWithType: Visual.VisualBitmapEffect\n  fullName: Visual.VisualBitmapEffect\n- uid: System.Windows.Media.Visual.VisualBitmapEffectInput\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualBitmapEffectInput\n  nameWithType: Visual.VisualBitmapEffectInput\n  fullName: Visual.VisualBitmapEffectInput\n- uid: System.Windows.Media.Visual.VisualBitmapScalingMode\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualBitmapScalingMode\n  nameWithType: Visual.VisualBitmapScalingMode\n  fullName: Visual.VisualBitmapScalingMode\n- uid: System.Windows.Media.Visual.VisualCacheMode\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualCacheMode\n  nameWithType: Visual.VisualCacheMode\n  fullName: Visual.VisualCacheMode\n- uid: System.Windows.FrameworkElement.VisualChildrenCount\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: VisualChildrenCount\n  nameWithType: FrameworkElement.VisualChildrenCount\n  fullName: FrameworkElement.VisualChildrenCount\n- uid: System.Windows.Media.Visual.VisualClearTypeHint\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualClearTypeHint\n  nameWithType: Visual.VisualClearTypeHint\n  fullName: Visual.VisualClearTypeHint\n- uid: System.Windows.Media.Visual.VisualClip\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualClip\n  nameWithType: Visual.VisualClip\n  fullName: Visual.VisualClip\n- uid: System.Windows.Media.Visual.VisualEdgeMode\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualEdgeMode\n  nameWithType: Visual.VisualEdgeMode\n  fullName: Visual.VisualEdgeMode\n- uid: System.Windows.Media.Visual.VisualEffect\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualEffect\n  nameWithType: Visual.VisualEffect\n  fullName: Visual.VisualEffect\n- uid: System.Windows.Media.Visual.VisualOffset\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualOffset\n  nameWithType: Visual.VisualOffset\n  fullName: Visual.VisualOffset\n- uid: System.Windows.Media.Visual.VisualOpacity\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualOpacity\n  nameWithType: Visual.VisualOpacity\n  fullName: Visual.VisualOpacity\n- uid: System.Windows.Media.Visual.VisualOpacityMask\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualOpacityMask\n  nameWithType: Visual.VisualOpacityMask\n  fullName: Visual.VisualOpacityMask\n- uid: System.Windows.Media.Visual.VisualParent\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualParent\n  nameWithType: Visual.VisualParent\n  fullName: Visual.VisualParent\n- uid: System.Windows.Media.Visual.VisualScrollableAreaClip\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualScrollableAreaClip\n  nameWithType: Visual.VisualScrollableAreaClip\n  fullName: Visual.VisualScrollableAreaClip\n- uid: System.Windows.Media.Visual.VisualTextHintingMode\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualTextHintingMode\n  nameWithType: Visual.VisualTextHintingMode\n  fullName: Visual.VisualTextHintingMode\n- uid: System.Windows.Media.Visual.VisualTextRenderingMode\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualTextRenderingMode\n  nameWithType: Visual.VisualTextRenderingMode\n  fullName: Visual.VisualTextRenderingMode\n- uid: System.Windows.Media.Visual.VisualTransform\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualTransform\n  nameWithType: Visual.VisualTransform\n  fullName: Visual.VisualTransform\n- uid: System.Windows.Media.Visual.VisualXSnappingGuidelines\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualXSnappingGuidelines\n  nameWithType: Visual.VisualXSnappingGuidelines\n  fullName: Visual.VisualXSnappingGuidelines\n- uid: System.Windows.Media.Visual.VisualYSnappingGuidelines\n  parent: System.Windows.Media.Visual\n  isExternal: false\n  name: VisualYSnappingGuidelines\n  nameWithType: Visual.VisualYSnappingGuidelines\n  fullName: Visual.VisualYSnappingGuidelines\n- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AddHandler(RoutedEvent, Delegate)\n  nameWithType: UIElement.AddHandler(RoutedEvent, Delegate)\n  fullName: UIElement.AddHandler(RoutedEvent, Delegate)\n- uid: System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AddHandler(RoutedEvent, Delegate, Boolean)\n  nameWithType: UIElement.AddHandler(RoutedEvent, Delegate, Boolean)\n  fullName: UIElement.AddHandler(RoutedEvent, Delegate, Boolean)\n- uid: System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AddToEventRoute(EventRoute, RoutedEventArgs)\n  nameWithType: UIElement.AddToEventRoute(EventRoute, RoutedEventArgs)\n  fullName: UIElement.AddToEventRoute(EventRoute, RoutedEventArgs)\n- uid: System.Windows.UIElement.AllowDrop\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AllowDrop\n  nameWithType: UIElement.AllowDrop\n  fullName: UIElement.AllowDrop\n- uid: System.Windows.UIElement.AllowDropProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AllowDropProperty\n  nameWithType: UIElement.AllowDropProperty\n  fullName: UIElement.AllowDropProperty\n- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ApplyAnimationClock(DependencyProperty, AnimationClock)\n  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock)\n  fullName: UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock)\n- uid: System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n  nameWithType: UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n  fullName: UIElement.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n- uid: System.Windows.UIElement.AreAnyTouchesCaptured\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesCaptured\n  nameWithType: UIElement.AreAnyTouchesCaptured\n  fullName: UIElement.AreAnyTouchesCaptured\n- uid: System.Windows.UIElement.AreAnyTouchesCapturedProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesCapturedProperty\n  nameWithType: UIElement.AreAnyTouchesCapturedProperty\n  fullName: UIElement.AreAnyTouchesCapturedProperty\n- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithin\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesCapturedWithin\n  nameWithType: UIElement.AreAnyTouchesCapturedWithin\n  fullName: UIElement.AreAnyTouchesCapturedWithin\n- uid: System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesCapturedWithinProperty\n  nameWithType: UIElement.AreAnyTouchesCapturedWithinProperty\n  fullName: UIElement.AreAnyTouchesCapturedWithinProperty\n- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesDirectlyOver\n  nameWithType: UIElement.AreAnyTouchesDirectlyOver\n  fullName: UIElement.AreAnyTouchesDirectlyOver\n- uid: System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesDirectlyOverProperty\n  nameWithType: UIElement.AreAnyTouchesDirectlyOverProperty\n  fullName: UIElement.AreAnyTouchesDirectlyOverProperty\n- uid: System.Windows.UIElement.AreAnyTouchesOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesOver\n  nameWithType: UIElement.AreAnyTouchesOver\n  fullName: UIElement.AreAnyTouchesOver\n- uid: System.Windows.UIElement.AreAnyTouchesOverProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: AreAnyTouchesOverProperty\n  nameWithType: UIElement.AreAnyTouchesOverProperty\n  fullName: UIElement.AreAnyTouchesOverProperty\n- uid: System.Windows.UIElement.Arrange(System.Windows.Rect)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Arrange(Rect)\n  nameWithType: UIElement.Arrange(Rect)\n  fullName: UIElement.Arrange(Rect)\n- uid: System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ArrangeCore(Rect)\n  nameWithType: FrameworkElement.ArrangeCore(Rect)\n  fullName: FrameworkElement.ArrangeCore(Rect)\n- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: BeginAnimation(DependencyProperty, AnimationTimeline)\n  nameWithType: UIElement.BeginAnimation(DependencyProperty, AnimationTimeline)\n  fullName: UIElement.BeginAnimation(DependencyProperty, AnimationTimeline)\n- uid: System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n  nameWithType: UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n  fullName: UIElement.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n- uid: System.Windows.UIElement.BitmapEffect\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: BitmapEffect\n  nameWithType: UIElement.BitmapEffect\n  fullName: UIElement.BitmapEffect\n- uid: System.Windows.UIElement.BitmapEffectInput\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: BitmapEffectInput\n  nameWithType: UIElement.BitmapEffectInput\n  fullName: UIElement.BitmapEffectInput\n- uid: System.Windows.UIElement.BitmapEffectInputProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: BitmapEffectInputProperty\n  nameWithType: UIElement.BitmapEffectInputProperty\n  fullName: UIElement.BitmapEffectInputProperty\n- uid: System.Windows.UIElement.BitmapEffectProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: BitmapEffectProperty\n  nameWithType: UIElement.BitmapEffectProperty\n  fullName: UIElement.BitmapEffectProperty\n- uid: System.Windows.UIElement.CacheMode\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CacheMode\n  nameWithType: UIElement.CacheMode\n  fullName: UIElement.CacheMode\n- uid: System.Windows.UIElement.CacheModeProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CacheModeProperty\n  nameWithType: UIElement.CacheModeProperty\n  fullName: UIElement.CacheModeProperty\n- uid: System.Windows.UIElement.CaptureMouse\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CaptureMouse()\n  nameWithType: UIElement.CaptureMouse()\n  fullName: UIElement.CaptureMouse()\n- uid: System.Windows.UIElement.CaptureStylus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CaptureStylus()\n  nameWithType: UIElement.CaptureStylus()\n  fullName: UIElement.CaptureStylus()\n- uid: System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CaptureTouch(TouchDevice)\n  nameWithType: UIElement.CaptureTouch(TouchDevice)\n  fullName: UIElement.CaptureTouch(TouchDevice)\n- uid: System.Windows.UIElement.Clip\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Clip\n  nameWithType: UIElement.Clip\n  fullName: UIElement.Clip\n- uid: System.Windows.UIElement.ClipProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ClipProperty\n  nameWithType: UIElement.ClipProperty\n  fullName: UIElement.ClipProperty\n- uid: System.Windows.UIElement.ClipToBounds\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ClipToBounds\n  nameWithType: UIElement.ClipToBounds\n  fullName: UIElement.ClipToBounds\n- uid: System.Windows.UIElement.ClipToBoundsProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ClipToBoundsProperty\n  nameWithType: UIElement.ClipToBoundsProperty\n  fullName: UIElement.ClipToBoundsProperty\n- uid: System.Windows.UIElement.CommandBindings\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: CommandBindings\n  nameWithType: UIElement.CommandBindings\n  fullName: UIElement.CommandBindings\n- uid: System.Windows.UIElement.DesiredSize\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DesiredSize\n  nameWithType: UIElement.DesiredSize\n  fullName: UIElement.DesiredSize\n- uid: System.Windows.UIElement.DragEnter\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DragEnter\n  nameWithType: UIElement.DragEnter\n  fullName: UIElement.DragEnter\n- uid: System.Windows.UIElement.DragEnterEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DragEnterEvent\n  nameWithType: UIElement.DragEnterEvent\n  fullName: UIElement.DragEnterEvent\n- uid: System.Windows.UIElement.DragLeave\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DragLeave\n  nameWithType: UIElement.DragLeave\n  fullName: UIElement.DragLeave\n- uid: System.Windows.UIElement.DragLeaveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DragLeaveEvent\n  nameWithType: UIElement.DragLeaveEvent\n  fullName: UIElement.DragLeaveEvent\n- uid: System.Windows.UIElement.DragOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DragOver\n  nameWithType: UIElement.DragOver\n  fullName: UIElement.DragOver\n- uid: System.Windows.UIElement.DragOverEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DragOverEvent\n  nameWithType: UIElement.DragOverEvent\n  fullName: UIElement.DragOverEvent\n- uid: System.Windows.UIElement.Drop\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Drop\n  nameWithType: UIElement.Drop\n  fullName: UIElement.Drop\n- uid: System.Windows.UIElement.DropEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: DropEvent\n  nameWithType: UIElement.DropEvent\n  fullName: UIElement.DropEvent\n- uid: System.Windows.UIElement.Effect\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Effect\n  nameWithType: UIElement.Effect\n  fullName: UIElement.Effect\n- uid: System.Windows.UIElement.EffectProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: EffectProperty\n  nameWithType: UIElement.EffectProperty\n  fullName: UIElement.EffectProperty\n- uid: System.Windows.UIElement.Focus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Focus()\n  nameWithType: UIElement.Focus()\n  fullName: UIElement.Focus()\n- uid: System.Windows.UIElement.Focusable\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Focusable\n  nameWithType: UIElement.Focusable\n  fullName: UIElement.Focusable\n- uid: System.Windows.UIElement.FocusableChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: FocusableChanged\n  nameWithType: UIElement.FocusableChanged\n  fullName: UIElement.FocusableChanged\n- uid: System.Windows.UIElement.FocusableProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: FocusableProperty\n  nameWithType: UIElement.FocusableProperty\n  fullName: UIElement.FocusableProperty\n- uid: System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GetAnimationBaseValue(DependencyProperty)\n  nameWithType: UIElement.GetAnimationBaseValue(DependencyProperty)\n  fullName: UIElement.GetAnimationBaseValue(DependencyProperty)\n- uid: System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetLayoutClip(Size)\n  nameWithType: FrameworkElement.GetLayoutClip(Size)\n  fullName: FrameworkElement.GetLayoutClip(Size)\n- uid: System.Windows.FrameworkElement.GetUIParentCore\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetUIParentCore()\n  nameWithType: FrameworkElement.GetUIParentCore()\n  fullName: FrameworkElement.GetUIParentCore()\n- uid: System.Windows.UIElement.GiveFeedback\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GiveFeedback\n  nameWithType: UIElement.GiveFeedback\n  fullName: UIElement.GiveFeedback\n- uid: System.Windows.UIElement.GiveFeedbackEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GiveFeedbackEvent\n  nameWithType: UIElement.GiveFeedbackEvent\n  fullName: UIElement.GiveFeedbackEvent\n- uid: System.Windows.UIElement.GotFocus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotFocus\n  nameWithType: UIElement.GotFocus\n  fullName: UIElement.GotFocus\n- uid: System.Windows.UIElement.GotFocusEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotFocusEvent\n  nameWithType: UIElement.GotFocusEvent\n  fullName: UIElement.GotFocusEvent\n- uid: System.Windows.UIElement.GotKeyboardFocus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotKeyboardFocus\n  nameWithType: UIElement.GotKeyboardFocus\n  fullName: UIElement.GotKeyboardFocus\n- uid: System.Windows.UIElement.GotKeyboardFocusEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotKeyboardFocusEvent\n  nameWithType: UIElement.GotKeyboardFocusEvent\n  fullName: UIElement.GotKeyboardFocusEvent\n- uid: System.Windows.UIElement.GotMouseCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotMouseCapture\n  nameWithType: UIElement.GotMouseCapture\n  fullName: UIElement.GotMouseCapture\n- uid: System.Windows.UIElement.GotMouseCaptureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotMouseCaptureEvent\n  nameWithType: UIElement.GotMouseCaptureEvent\n  fullName: UIElement.GotMouseCaptureEvent\n- uid: System.Windows.UIElement.GotStylusCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotStylusCapture\n  nameWithType: UIElement.GotStylusCapture\n  fullName: UIElement.GotStylusCapture\n- uid: System.Windows.UIElement.GotStylusCaptureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotStylusCaptureEvent\n  nameWithType: UIElement.GotStylusCaptureEvent\n  fullName: UIElement.GotStylusCaptureEvent\n- uid: System.Windows.UIElement.GotTouchCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotTouchCapture\n  nameWithType: UIElement.GotTouchCapture\n  fullName: UIElement.GotTouchCapture\n- uid: System.Windows.UIElement.GotTouchCaptureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: GotTouchCaptureEvent\n  nameWithType: UIElement.GotTouchCaptureEvent\n  fullName: UIElement.GotTouchCaptureEvent\n- uid: System.Windows.UIElement.HasAnimatedProperties\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: HasAnimatedProperties\n  nameWithType: UIElement.HasAnimatedProperties\n  fullName: UIElement.HasAnimatedProperties\n- uid: System.Windows.UIElement.HasEffectiveKeyboardFocus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: HasEffectiveKeyboardFocus\n  nameWithType: UIElement.HasEffectiveKeyboardFocus\n  fullName: UIElement.HasEffectiveKeyboardFocus\n- uid: System.Windows.UIElement.InputBindings\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: InputBindings\n  nameWithType: UIElement.InputBindings\n  fullName: UIElement.InputBindings\n- uid: System.Windows.UIElement.InputHitTest(System.Windows.Point)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: InputHitTest(Point)\n  nameWithType: UIElement.InputHitTest(Point)\n  fullName: UIElement.InputHitTest(Point)\n- uid: System.Windows.UIElement.InvalidateArrange\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: InvalidateArrange()\n  nameWithType: UIElement.InvalidateArrange()\n  fullName: UIElement.InvalidateArrange()\n- uid: System.Windows.UIElement.InvalidateMeasure\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: InvalidateMeasure()\n  nameWithType: UIElement.InvalidateMeasure()\n  fullName: UIElement.InvalidateMeasure()\n- uid: System.Windows.UIElement.InvalidateVisual\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: InvalidateVisual()\n  nameWithType: UIElement.InvalidateVisual()\n  fullName: UIElement.InvalidateVisual()\n- uid: System.Windows.UIElement.IsArrangeValid\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsArrangeValid\n  nameWithType: UIElement.IsArrangeValid\n  fullName: UIElement.IsArrangeValid\n- uid: System.Windows.UIElement.IsEnabled\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsEnabled\n  nameWithType: UIElement.IsEnabled\n  fullName: UIElement.IsEnabled\n- uid: System.Windows.UIElement.IsEnabledChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsEnabledChanged\n  nameWithType: UIElement.IsEnabledChanged\n  fullName: UIElement.IsEnabledChanged\n- uid: System.Windows.UIElement.IsEnabledCore\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsEnabledCore\n  nameWithType: UIElement.IsEnabledCore\n  fullName: UIElement.IsEnabledCore\n- uid: System.Windows.UIElement.IsEnabledProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsEnabledProperty\n  nameWithType: UIElement.IsEnabledProperty\n  fullName: UIElement.IsEnabledProperty\n- uid: System.Windows.UIElement.IsFocused\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsFocused\n  nameWithType: UIElement.IsFocused\n  fullName: UIElement.IsFocused\n- uid: System.Windows.UIElement.IsFocusedProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsFocusedProperty\n  nameWithType: UIElement.IsFocusedProperty\n  fullName: UIElement.IsFocusedProperty\n- uid: System.Windows.UIElement.IsHitTestVisible\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsHitTestVisible\n  nameWithType: UIElement.IsHitTestVisible\n  fullName: UIElement.IsHitTestVisible\n- uid: System.Windows.UIElement.IsHitTestVisibleChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsHitTestVisibleChanged\n  nameWithType: UIElement.IsHitTestVisibleChanged\n  fullName: UIElement.IsHitTestVisibleChanged\n- uid: System.Windows.UIElement.IsHitTestVisibleProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsHitTestVisibleProperty\n  nameWithType: UIElement.IsHitTestVisibleProperty\n  fullName: UIElement.IsHitTestVisibleProperty\n- uid: System.Windows.UIElement.IsInputMethodEnabled\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsInputMethodEnabled\n  nameWithType: UIElement.IsInputMethodEnabled\n  fullName: UIElement.IsInputMethodEnabled\n- uid: System.Windows.UIElement.IsKeyboardFocused\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsKeyboardFocused\n  nameWithType: UIElement.IsKeyboardFocused\n  fullName: UIElement.IsKeyboardFocused\n- uid: System.Windows.UIElement.IsKeyboardFocusedChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsKeyboardFocusedChanged\n  nameWithType: UIElement.IsKeyboardFocusedChanged\n  fullName: UIElement.IsKeyboardFocusedChanged\n- uid: System.Windows.UIElement.IsKeyboardFocusedProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsKeyboardFocusedProperty\n  nameWithType: UIElement.IsKeyboardFocusedProperty\n  fullName: UIElement.IsKeyboardFocusedProperty\n- uid: System.Windows.UIElement.IsKeyboardFocusWithin\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsKeyboardFocusWithin\n  nameWithType: UIElement.IsKeyboardFocusWithin\n  fullName: UIElement.IsKeyboardFocusWithin\n- uid: System.Windows.UIElement.IsKeyboardFocusWithinChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsKeyboardFocusWithinChanged\n  nameWithType: UIElement.IsKeyboardFocusWithinChanged\n  fullName: UIElement.IsKeyboardFocusWithinChanged\n- uid: System.Windows.UIElement.IsKeyboardFocusWithinProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsKeyboardFocusWithinProperty\n  nameWithType: UIElement.IsKeyboardFocusWithinProperty\n  fullName: UIElement.IsKeyboardFocusWithinProperty\n- uid: System.Windows.UIElement.IsManipulationEnabled\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsManipulationEnabled\n  nameWithType: UIElement.IsManipulationEnabled\n  fullName: UIElement.IsManipulationEnabled\n- uid: System.Windows.UIElement.IsManipulationEnabledProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsManipulationEnabledProperty\n  nameWithType: UIElement.IsManipulationEnabledProperty\n  fullName: UIElement.IsManipulationEnabledProperty\n- uid: System.Windows.UIElement.IsMeasureValid\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMeasureValid\n  nameWithType: UIElement.IsMeasureValid\n  fullName: UIElement.IsMeasureValid\n- uid: System.Windows.UIElement.IsMouseCaptured\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseCaptured\n  nameWithType: UIElement.IsMouseCaptured\n  fullName: UIElement.IsMouseCaptured\n- uid: System.Windows.UIElement.IsMouseCapturedChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseCapturedChanged\n  nameWithType: UIElement.IsMouseCapturedChanged\n  fullName: UIElement.IsMouseCapturedChanged\n- uid: System.Windows.UIElement.IsMouseCapturedProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseCapturedProperty\n  nameWithType: UIElement.IsMouseCapturedProperty\n  fullName: UIElement.IsMouseCapturedProperty\n- uid: System.Windows.UIElement.IsMouseCaptureWithin\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseCaptureWithin\n  nameWithType: UIElement.IsMouseCaptureWithin\n  fullName: UIElement.IsMouseCaptureWithin\n- uid: System.Windows.UIElement.IsMouseCaptureWithinChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseCaptureWithinChanged\n  nameWithType: UIElement.IsMouseCaptureWithinChanged\n  fullName: UIElement.IsMouseCaptureWithinChanged\n- uid: System.Windows.UIElement.IsMouseCaptureWithinProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseCaptureWithinProperty\n  nameWithType: UIElement.IsMouseCaptureWithinProperty\n  fullName: UIElement.IsMouseCaptureWithinProperty\n- uid: System.Windows.UIElement.IsMouseDirectlyOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseDirectlyOver\n  nameWithType: UIElement.IsMouseDirectlyOver\n  fullName: UIElement.IsMouseDirectlyOver\n- uid: System.Windows.UIElement.IsMouseDirectlyOverChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseDirectlyOverChanged\n  nameWithType: UIElement.IsMouseDirectlyOverChanged\n  fullName: UIElement.IsMouseDirectlyOverChanged\n- uid: System.Windows.UIElement.IsMouseDirectlyOverProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseDirectlyOverProperty\n  nameWithType: UIElement.IsMouseDirectlyOverProperty\n  fullName: UIElement.IsMouseDirectlyOverProperty\n- uid: System.Windows.UIElement.IsMouseOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseOver\n  nameWithType: UIElement.IsMouseOver\n  fullName: UIElement.IsMouseOver\n- uid: System.Windows.UIElement.IsMouseOverProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsMouseOverProperty\n  nameWithType: UIElement.IsMouseOverProperty\n  fullName: UIElement.IsMouseOverProperty\n- uid: System.Windows.UIElement.IsStylusCaptured\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusCaptured\n  nameWithType: UIElement.IsStylusCaptured\n  fullName: UIElement.IsStylusCaptured\n- uid: System.Windows.UIElement.IsStylusCapturedChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusCapturedChanged\n  nameWithType: UIElement.IsStylusCapturedChanged\n  fullName: UIElement.IsStylusCapturedChanged\n- uid: System.Windows.UIElement.IsStylusCapturedProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusCapturedProperty\n  nameWithType: UIElement.IsStylusCapturedProperty\n  fullName: UIElement.IsStylusCapturedProperty\n- uid: System.Windows.UIElement.IsStylusCaptureWithin\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusCaptureWithin\n  nameWithType: UIElement.IsStylusCaptureWithin\n  fullName: UIElement.IsStylusCaptureWithin\n- uid: System.Windows.UIElement.IsStylusCaptureWithinChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusCaptureWithinChanged\n  nameWithType: UIElement.IsStylusCaptureWithinChanged\n  fullName: UIElement.IsStylusCaptureWithinChanged\n- uid: System.Windows.UIElement.IsStylusCaptureWithinProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusCaptureWithinProperty\n  nameWithType: UIElement.IsStylusCaptureWithinProperty\n  fullName: UIElement.IsStylusCaptureWithinProperty\n- uid: System.Windows.UIElement.IsStylusDirectlyOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusDirectlyOver\n  nameWithType: UIElement.IsStylusDirectlyOver\n  fullName: UIElement.IsStylusDirectlyOver\n- uid: System.Windows.UIElement.IsStylusDirectlyOverChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusDirectlyOverChanged\n  nameWithType: UIElement.IsStylusDirectlyOverChanged\n  fullName: UIElement.IsStylusDirectlyOverChanged\n- uid: System.Windows.UIElement.IsStylusDirectlyOverProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusDirectlyOverProperty\n  nameWithType: UIElement.IsStylusDirectlyOverProperty\n  fullName: UIElement.IsStylusDirectlyOverProperty\n- uid: System.Windows.UIElement.IsStylusOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusOver\n  nameWithType: UIElement.IsStylusOver\n  fullName: UIElement.IsStylusOver\n- uid: System.Windows.UIElement.IsStylusOverProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsStylusOverProperty\n  nameWithType: UIElement.IsStylusOverProperty\n  fullName: UIElement.IsStylusOverProperty\n- uid: System.Windows.UIElement.IsVisible\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsVisible\n  nameWithType: UIElement.IsVisible\n  fullName: UIElement.IsVisible\n- uid: System.Windows.UIElement.IsVisibleChanged\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsVisibleChanged\n  nameWithType: UIElement.IsVisibleChanged\n  fullName: UIElement.IsVisibleChanged\n- uid: System.Windows.UIElement.IsVisibleProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: IsVisibleProperty\n  nameWithType: UIElement.IsVisibleProperty\n  fullName: UIElement.IsVisibleProperty\n- uid: System.Windows.UIElement.KeyDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: KeyDown\n  nameWithType: UIElement.KeyDown\n  fullName: UIElement.KeyDown\n- uid: System.Windows.UIElement.KeyDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: KeyDownEvent\n  nameWithType: UIElement.KeyDownEvent\n  fullName: UIElement.KeyDownEvent\n- uid: System.Windows.UIElement.KeyUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: KeyUp\n  nameWithType: UIElement.KeyUp\n  fullName: UIElement.KeyUp\n- uid: System.Windows.UIElement.KeyUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: KeyUpEvent\n  nameWithType: UIElement.KeyUpEvent\n  fullName: UIElement.KeyUpEvent\n- uid: System.Windows.UIElement.LayoutUpdated\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LayoutUpdated\n  nameWithType: UIElement.LayoutUpdated\n  fullName: UIElement.LayoutUpdated\n- uid: System.Windows.UIElement.LostFocus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostFocus\n  nameWithType: UIElement.LostFocus\n  fullName: UIElement.LostFocus\n- uid: System.Windows.UIElement.LostFocusEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostFocusEvent\n  nameWithType: UIElement.LostFocusEvent\n  fullName: UIElement.LostFocusEvent\n- uid: System.Windows.UIElement.LostKeyboardFocus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostKeyboardFocus\n  nameWithType: UIElement.LostKeyboardFocus\n  fullName: UIElement.LostKeyboardFocus\n- uid: System.Windows.UIElement.LostKeyboardFocusEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostKeyboardFocusEvent\n  nameWithType: UIElement.LostKeyboardFocusEvent\n  fullName: UIElement.LostKeyboardFocusEvent\n- uid: System.Windows.UIElement.LostMouseCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostMouseCapture\n  nameWithType: UIElement.LostMouseCapture\n  fullName: UIElement.LostMouseCapture\n- uid: System.Windows.UIElement.LostMouseCaptureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostMouseCaptureEvent\n  nameWithType: UIElement.LostMouseCaptureEvent\n  fullName: UIElement.LostMouseCaptureEvent\n- uid: System.Windows.UIElement.LostStylusCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostStylusCapture\n  nameWithType: UIElement.LostStylusCapture\n  fullName: UIElement.LostStylusCapture\n- uid: System.Windows.UIElement.LostStylusCaptureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostStylusCaptureEvent\n  nameWithType: UIElement.LostStylusCaptureEvent\n  fullName: UIElement.LostStylusCaptureEvent\n- uid: System.Windows.UIElement.LostTouchCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostTouchCapture\n  nameWithType: UIElement.LostTouchCapture\n  fullName: UIElement.LostTouchCapture\n- uid: System.Windows.UIElement.LostTouchCaptureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: LostTouchCaptureEvent\n  nameWithType: UIElement.LostTouchCaptureEvent\n  fullName: UIElement.LostTouchCaptureEvent\n- uid: System.Windows.UIElement.ManipulationBoundaryFeedback\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationBoundaryFeedback\n  nameWithType: UIElement.ManipulationBoundaryFeedback\n  fullName: UIElement.ManipulationBoundaryFeedback\n- uid: System.Windows.UIElement.ManipulationBoundaryFeedbackEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationBoundaryFeedbackEvent\n  nameWithType: UIElement.ManipulationBoundaryFeedbackEvent\n  fullName: UIElement.ManipulationBoundaryFeedbackEvent\n- uid: System.Windows.UIElement.ManipulationCompleted\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationCompleted\n  nameWithType: UIElement.ManipulationCompleted\n  fullName: UIElement.ManipulationCompleted\n- uid: System.Windows.UIElement.ManipulationCompletedEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationCompletedEvent\n  nameWithType: UIElement.ManipulationCompletedEvent\n  fullName: UIElement.ManipulationCompletedEvent\n- uid: System.Windows.UIElement.ManipulationDelta\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationDelta\n  nameWithType: UIElement.ManipulationDelta\n  fullName: UIElement.ManipulationDelta\n- uid: System.Windows.UIElement.ManipulationDeltaEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationDeltaEvent\n  nameWithType: UIElement.ManipulationDeltaEvent\n  fullName: UIElement.ManipulationDeltaEvent\n- uid: System.Windows.UIElement.ManipulationInertiaStarting\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationInertiaStarting\n  nameWithType: UIElement.ManipulationInertiaStarting\n  fullName: UIElement.ManipulationInertiaStarting\n- uid: System.Windows.UIElement.ManipulationInertiaStartingEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationInertiaStartingEvent\n  nameWithType: UIElement.ManipulationInertiaStartingEvent\n  fullName: UIElement.ManipulationInertiaStartingEvent\n- uid: System.Windows.UIElement.ManipulationStarted\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationStarted\n  nameWithType: UIElement.ManipulationStarted\n  fullName: UIElement.ManipulationStarted\n- uid: System.Windows.UIElement.ManipulationStartedEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationStartedEvent\n  nameWithType: UIElement.ManipulationStartedEvent\n  fullName: UIElement.ManipulationStartedEvent\n- uid: System.Windows.UIElement.ManipulationStarting\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationStarting\n  nameWithType: UIElement.ManipulationStarting\n  fullName: UIElement.ManipulationStarting\n- uid: System.Windows.UIElement.ManipulationStartingEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ManipulationStartingEvent\n  nameWithType: UIElement.ManipulationStartingEvent\n  fullName: UIElement.ManipulationStartingEvent\n- uid: System.Windows.UIElement.Measure(System.Windows.Size)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Measure(Size)\n  nameWithType: UIElement.Measure(Size)\n  fullName: UIElement.Measure(Size)\n- uid: System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MeasureCore(Size)\n  nameWithType: FrameworkElement.MeasureCore(Size)\n  fullName: FrameworkElement.MeasureCore(Size)\n- uid: System.Windows.UIElement.MouseDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseDown\n  nameWithType: UIElement.MouseDown\n  fullName: UIElement.MouseDown\n- uid: System.Windows.UIElement.MouseDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseDownEvent\n  nameWithType: UIElement.MouseDownEvent\n  fullName: UIElement.MouseDownEvent\n- uid: System.Windows.UIElement.MouseEnter\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseEnter\n  nameWithType: UIElement.MouseEnter\n  fullName: UIElement.MouseEnter\n- uid: System.Windows.UIElement.MouseEnterEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseEnterEvent\n  nameWithType: UIElement.MouseEnterEvent\n  fullName: UIElement.MouseEnterEvent\n- uid: System.Windows.UIElement.MouseLeave\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseLeave\n  nameWithType: UIElement.MouseLeave\n  fullName: UIElement.MouseLeave\n- uid: System.Windows.UIElement.MouseLeaveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseLeaveEvent\n  nameWithType: UIElement.MouseLeaveEvent\n  fullName: UIElement.MouseLeaveEvent\n- uid: System.Windows.UIElement.MouseLeftButtonDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseLeftButtonDown\n  nameWithType: UIElement.MouseLeftButtonDown\n  fullName: UIElement.MouseLeftButtonDown\n- uid: System.Windows.UIElement.MouseLeftButtonDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseLeftButtonDownEvent\n  nameWithType: UIElement.MouseLeftButtonDownEvent\n  fullName: UIElement.MouseLeftButtonDownEvent\n- uid: System.Windows.UIElement.MouseLeftButtonUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseLeftButtonUp\n  nameWithType: UIElement.MouseLeftButtonUp\n  fullName: UIElement.MouseLeftButtonUp\n- uid: System.Windows.UIElement.MouseLeftButtonUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseLeftButtonUpEvent\n  nameWithType: UIElement.MouseLeftButtonUpEvent\n  fullName: UIElement.MouseLeftButtonUpEvent\n- uid: System.Windows.UIElement.MouseMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseMove\n  nameWithType: UIElement.MouseMove\n  fullName: UIElement.MouseMove\n- uid: System.Windows.UIElement.MouseMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseMoveEvent\n  nameWithType: UIElement.MouseMoveEvent\n  fullName: UIElement.MouseMoveEvent\n- uid: System.Windows.UIElement.MouseRightButtonDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseRightButtonDown\n  nameWithType: UIElement.MouseRightButtonDown\n  fullName: UIElement.MouseRightButtonDown\n- uid: System.Windows.UIElement.MouseRightButtonDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseRightButtonDownEvent\n  nameWithType: UIElement.MouseRightButtonDownEvent\n  fullName: UIElement.MouseRightButtonDownEvent\n- uid: System.Windows.UIElement.MouseRightButtonUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseRightButtonUp\n  nameWithType: UIElement.MouseRightButtonUp\n  fullName: UIElement.MouseRightButtonUp\n- uid: System.Windows.UIElement.MouseRightButtonUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseRightButtonUpEvent\n  nameWithType: UIElement.MouseRightButtonUpEvent\n  fullName: UIElement.MouseRightButtonUpEvent\n- uid: System.Windows.UIElement.MouseUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseUp\n  nameWithType: UIElement.MouseUp\n  fullName: UIElement.MouseUp\n- uid: System.Windows.UIElement.MouseUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseUpEvent\n  nameWithType: UIElement.MouseUpEvent\n  fullName: UIElement.MouseUpEvent\n- uid: System.Windows.UIElement.MouseWheel\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseWheel\n  nameWithType: UIElement.MouseWheel\n  fullName: UIElement.MouseWheel\n- uid: System.Windows.UIElement.MouseWheelEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: MouseWheelEvent\n  nameWithType: UIElement.MouseWheelEvent\n  fullName: UIElement.MouseWheelEvent\n- uid: System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MoveFocus(TraversalRequest)\n  nameWithType: FrameworkElement.MoveFocus(TraversalRequest)\n  fullName: FrameworkElement.MoveFocus(TraversalRequest)\n- uid: System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnAccessKey(AccessKeyEventArgs)\n  nameWithType: UIElement.OnAccessKey(AccessKeyEventArgs)\n  fullName: UIElement.OnAccessKey(AccessKeyEventArgs)\n- uid: System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnChildDesiredSizeChanged(UIElement)\n  nameWithType: UIElement.OnChildDesiredSizeChanged(UIElement)\n  fullName: UIElement.OnChildDesiredSizeChanged(UIElement)\n- uid: System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnDragEnter(DragEventArgs)\n  nameWithType: UIElement.OnDragEnter(DragEventArgs)\n  fullName: UIElement.OnDragEnter(DragEventArgs)\n- uid: System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnDragLeave(DragEventArgs)\n  nameWithType: UIElement.OnDragLeave(DragEventArgs)\n  fullName: UIElement.OnDragLeave(DragEventArgs)\n- uid: System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnDragOver(DragEventArgs)\n  nameWithType: UIElement.OnDragOver(DragEventArgs)\n  fullName: UIElement.OnDragOver(DragEventArgs)\n- uid: System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnDrop(DragEventArgs)\n  nameWithType: UIElement.OnDrop(DragEventArgs)\n  fullName: UIElement.OnDrop(DragEventArgs)\n- uid: System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGiveFeedback(GiveFeedbackEventArgs)\n  nameWithType: UIElement.OnGiveFeedback(GiveFeedbackEventArgs)\n  fullName: UIElement.OnGiveFeedback(GiveFeedbackEventArgs)\n- uid: System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnGotFocus(RoutedEventArgs)\n  nameWithType: FrameworkElement.OnGotFocus(RoutedEventArgs)\n  fullName: FrameworkElement.OnGotFocus(RoutedEventArgs)\n- uid: System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: UIElement.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n- uid: System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGotMouseCapture(MouseEventArgs)\n  nameWithType: UIElement.OnGotMouseCapture(MouseEventArgs)\n  fullName: UIElement.OnGotMouseCapture(MouseEventArgs)\n- uid: System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGotStylusCapture(StylusEventArgs)\n  nameWithType: UIElement.OnGotStylusCapture(StylusEventArgs)\n  fullName: UIElement.OnGotStylusCapture(StylusEventArgs)\n- uid: System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnGotTouchCapture(TouchEventArgs)\n  nameWithType: UIElement.OnGotTouchCapture(TouchEventArgs)\n  fullName: UIElement.OnGotTouchCapture(TouchEventArgs)\n- uid: System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n  fullName: UIElement.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnKeyDown(KeyEventArgs)\n  nameWithType: UIElement.OnKeyDown(KeyEventArgs)\n  fullName: UIElement.OnKeyDown(KeyEventArgs)\n- uid: System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnKeyUp(KeyEventArgs)\n  nameWithType: UIElement.OnKeyUp(KeyEventArgs)\n  fullName: UIElement.OnKeyUp(KeyEventArgs)\n- uid: System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnLostFocus(RoutedEventArgs)\n  nameWithType: UIElement.OnLostFocus(RoutedEventArgs)\n  fullName: UIElement.OnLostFocus(RoutedEventArgs)\n- uid: System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: UIElement.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n- uid: System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnLostMouseCapture(MouseEventArgs)\n  nameWithType: UIElement.OnLostMouseCapture(MouseEventArgs)\n  fullName: UIElement.OnLostMouseCapture(MouseEventArgs)\n- uid: System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnLostStylusCapture(StylusEventArgs)\n  nameWithType: UIElement.OnLostStylusCapture(StylusEventArgs)\n  fullName: UIElement.OnLostStylusCapture(StylusEventArgs)\n- uid: System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnLostTouchCapture(TouchEventArgs)\n  nameWithType: UIElement.OnLostTouchCapture(TouchEventArgs)\n  fullName: UIElement.OnLostTouchCapture(TouchEventArgs)\n- uid: System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationCompleted(ManipulationCompletedEventArgs)\n  nameWithType: UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)\n  fullName: UIElement.OnManipulationCompleted(ManipulationCompletedEventArgs)\n- uid: System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationDelta(ManipulationDeltaEventArgs)\n  nameWithType: UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)\n  fullName: UIElement.OnManipulationDelta(ManipulationDeltaEventArgs)\n- uid: System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)\n  nameWithType: UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)\n  fullName: UIElement.OnManipulationInertiaStarting(ManipulationInertiaStartingEventArgs)\n- uid: System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationStarted(ManipulationStartedEventArgs)\n  nameWithType: UIElement.OnManipulationStarted(ManipulationStartedEventArgs)\n  fullName: UIElement.OnManipulationStarted(ManipulationStartedEventArgs)\n- uid: System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnManipulationStarting(ManipulationStartingEventArgs)\n  nameWithType: UIElement.OnManipulationStarting(ManipulationStartingEventArgs)\n  fullName: UIElement.OnManipulationStarting(ManipulationStartingEventArgs)\n- uid: System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseDown(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseDown(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseEnter(MouseEventArgs)\n  nameWithType: UIElement.OnMouseEnter(MouseEventArgs)\n  fullName: UIElement.OnMouseEnter(MouseEventArgs)\n- uid: System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseLeave(MouseEventArgs)\n  nameWithType: UIElement.OnMouseLeave(MouseEventArgs)\n  fullName: UIElement.OnMouseLeave(MouseEventArgs)\n- uid: System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseLeftButtonDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseLeftButtonDown(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseLeftButtonUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseLeftButtonUp(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseMove(MouseEventArgs)\n  nameWithType: UIElement.OnMouseMove(MouseEventArgs)\n  fullName: UIElement.OnMouseMove(MouseEventArgs)\n- uid: System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseRightButtonDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseRightButtonDown(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseRightButtonUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseRightButtonUp(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnMouseUp(MouseButtonEventArgs)\n  fullName: UIElement.OnMouseUp(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnMouseWheel(MouseWheelEventArgs)\n  nameWithType: UIElement.OnMouseWheel(MouseWheelEventArgs)\n  fullName: UIElement.OnMouseWheel(MouseWheelEventArgs)\n- uid: System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewDragEnter(DragEventArgs)\n  nameWithType: UIElement.OnPreviewDragEnter(DragEventArgs)\n  fullName: UIElement.OnPreviewDragEnter(DragEventArgs)\n- uid: System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewDragLeave(DragEventArgs)\n  nameWithType: UIElement.OnPreviewDragLeave(DragEventArgs)\n  fullName: UIElement.OnPreviewDragLeave(DragEventArgs)\n- uid: System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewDragOver(DragEventArgs)\n  nameWithType: UIElement.OnPreviewDragOver(DragEventArgs)\n  fullName: UIElement.OnPreviewDragOver(DragEventArgs)\n- uid: System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewDrop(DragEventArgs)\n  nameWithType: UIElement.OnPreviewDrop(DragEventArgs)\n  fullName: UIElement.OnPreviewDrop(DragEventArgs)\n- uid: System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)\n  nameWithType: UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)\n  fullName: UIElement.OnPreviewGiveFeedback(GiveFeedbackEventArgs)\n- uid: System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: UIElement.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)\n- uid: System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewKeyDown(KeyEventArgs)\n  nameWithType: UIElement.OnPreviewKeyDown(KeyEventArgs)\n  fullName: UIElement.OnPreviewKeyDown(KeyEventArgs)\n- uid: System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewKeyUp(KeyEventArgs)\n  nameWithType: UIElement.OnPreviewKeyUp(KeyEventArgs)\n  fullName: UIElement.OnPreviewKeyUp(KeyEventArgs)\n- uid: System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  nameWithType: UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n  fullName: UIElement.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseDown(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseDown(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseMove(MouseEventArgs)\n  nameWithType: UIElement.OnPreviewMouseMove(MouseEventArgs)\n  fullName: UIElement.OnPreviewMouseMove(MouseEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseUp(MouseButtonEventArgs)\n  nameWithType: UIElement.OnPreviewMouseUp(MouseButtonEventArgs)\n  fullName: UIElement.OnPreviewMouseUp(MouseButtonEventArgs)\n- uid: System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewMouseWheel(MouseWheelEventArgs)\n  nameWithType: UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)\n  fullName: UIElement.OnPreviewMouseWheel(MouseWheelEventArgs)\n- uid: System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)\n  nameWithType: UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)\n  fullName: UIElement.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)\n- uid: System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)\n  nameWithType: UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)\n  fullName: UIElement.OnPreviewStylusButtonDown(StylusButtonEventArgs)\n- uid: System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)\n  nameWithType: UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)\n  fullName: UIElement.OnPreviewStylusButtonUp(StylusButtonEventArgs)\n- uid: System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusDown(StylusDownEventArgs)\n  nameWithType: UIElement.OnPreviewStylusDown(StylusDownEventArgs)\n  fullName: UIElement.OnPreviewStylusDown(StylusDownEventArgs)\n- uid: System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusInAirMove(StylusEventArgs)\n  nameWithType: UIElement.OnPreviewStylusInAirMove(StylusEventArgs)\n  fullName: UIElement.OnPreviewStylusInAirMove(StylusEventArgs)\n- uid: System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusInRange(StylusEventArgs)\n  nameWithType: UIElement.OnPreviewStylusInRange(StylusEventArgs)\n  fullName: UIElement.OnPreviewStylusInRange(StylusEventArgs)\n- uid: System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusMove(StylusEventArgs)\n  nameWithType: UIElement.OnPreviewStylusMove(StylusEventArgs)\n  fullName: UIElement.OnPreviewStylusMove(StylusEventArgs)\n- uid: System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusOutOfRange(StylusEventArgs)\n  nameWithType: UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)\n  fullName: UIElement.OnPreviewStylusOutOfRange(StylusEventArgs)\n- uid: System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)\n  nameWithType: UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)\n  fullName: UIElement.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)\n- uid: System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewStylusUp(StylusEventArgs)\n  nameWithType: UIElement.OnPreviewStylusUp(StylusEventArgs)\n  fullName: UIElement.OnPreviewStylusUp(StylusEventArgs)\n- uid: System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewTextInput(TextCompositionEventArgs)\n  nameWithType: UIElement.OnPreviewTextInput(TextCompositionEventArgs)\n  fullName: UIElement.OnPreviewTextInput(TextCompositionEventArgs)\n- uid: System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewTouchDown(TouchEventArgs)\n  nameWithType: UIElement.OnPreviewTouchDown(TouchEventArgs)\n  fullName: UIElement.OnPreviewTouchDown(TouchEventArgs)\n- uid: System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewTouchMove(TouchEventArgs)\n  nameWithType: UIElement.OnPreviewTouchMove(TouchEventArgs)\n  fullName: UIElement.OnPreviewTouchMove(TouchEventArgs)\n- uid: System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnPreviewTouchUp(TouchEventArgs)\n  nameWithType: UIElement.OnPreviewTouchUp(TouchEventArgs)\n  fullName: UIElement.OnPreviewTouchUp(TouchEventArgs)\n- uid: System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnQueryContinueDrag(QueryContinueDragEventArgs)\n  nameWithType: UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)\n  fullName: UIElement.OnQueryContinueDrag(QueryContinueDragEventArgs)\n- uid: System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnQueryCursor(QueryCursorEventArgs)\n  nameWithType: UIElement.OnQueryCursor(QueryCursorEventArgs)\n  fullName: UIElement.OnQueryCursor(QueryCursorEventArgs)\n- uid: System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnRender(DrawingContext)\n  nameWithType: UIElement.OnRender(DrawingContext)\n  fullName: UIElement.OnRender(DrawingContext)\n- uid: System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnRenderSizeChanged(SizeChangedInfo)\n  nameWithType: FrameworkElement.OnRenderSizeChanged(SizeChangedInfo)\n  fullName: FrameworkElement.OnRenderSizeChanged(SizeChangedInfo)\n- uid: System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusButtonDown(StylusButtonEventArgs)\n  nameWithType: UIElement.OnStylusButtonDown(StylusButtonEventArgs)\n  fullName: UIElement.OnStylusButtonDown(StylusButtonEventArgs)\n- uid: System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusButtonUp(StylusButtonEventArgs)\n  nameWithType: UIElement.OnStylusButtonUp(StylusButtonEventArgs)\n  fullName: UIElement.OnStylusButtonUp(StylusButtonEventArgs)\n- uid: System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusDown(StylusDownEventArgs)\n  nameWithType: UIElement.OnStylusDown(StylusDownEventArgs)\n  fullName: UIElement.OnStylusDown(StylusDownEventArgs)\n- uid: System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusEnter(StylusEventArgs)\n  nameWithType: UIElement.OnStylusEnter(StylusEventArgs)\n  fullName: UIElement.OnStylusEnter(StylusEventArgs)\n- uid: System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusInAirMove(StylusEventArgs)\n  nameWithType: UIElement.OnStylusInAirMove(StylusEventArgs)\n  fullName: UIElement.OnStylusInAirMove(StylusEventArgs)\n- uid: System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusInRange(StylusEventArgs)\n  nameWithType: UIElement.OnStylusInRange(StylusEventArgs)\n  fullName: UIElement.OnStylusInRange(StylusEventArgs)\n- uid: System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusLeave(StylusEventArgs)\n  nameWithType: UIElement.OnStylusLeave(StylusEventArgs)\n  fullName: UIElement.OnStylusLeave(StylusEventArgs)\n- uid: System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusMove(StylusEventArgs)\n  nameWithType: UIElement.OnStylusMove(StylusEventArgs)\n  fullName: UIElement.OnStylusMove(StylusEventArgs)\n- uid: System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusOutOfRange(StylusEventArgs)\n  nameWithType: UIElement.OnStylusOutOfRange(StylusEventArgs)\n  fullName: UIElement.OnStylusOutOfRange(StylusEventArgs)\n- uid: System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)\n  nameWithType: UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)\n  fullName: UIElement.OnStylusSystemGesture(StylusSystemGestureEventArgs)\n- uid: System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnStylusUp(StylusEventArgs)\n  nameWithType: UIElement.OnStylusUp(StylusEventArgs)\n  fullName: UIElement.OnStylusUp(StylusEventArgs)\n- uid: System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTextInput(TextCompositionEventArgs)\n  nameWithType: UIElement.OnTextInput(TextCompositionEventArgs)\n  fullName: UIElement.OnTextInput(TextCompositionEventArgs)\n- uid: System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTouchDown(TouchEventArgs)\n  nameWithType: UIElement.OnTouchDown(TouchEventArgs)\n  fullName: UIElement.OnTouchDown(TouchEventArgs)\n- uid: System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTouchEnter(TouchEventArgs)\n  nameWithType: UIElement.OnTouchEnter(TouchEventArgs)\n  fullName: UIElement.OnTouchEnter(TouchEventArgs)\n- uid: System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTouchLeave(TouchEventArgs)\n  nameWithType: UIElement.OnTouchLeave(TouchEventArgs)\n  fullName: UIElement.OnTouchLeave(TouchEventArgs)\n- uid: System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTouchMove(TouchEventArgs)\n  nameWithType: UIElement.OnTouchMove(TouchEventArgs)\n  fullName: UIElement.OnTouchMove(TouchEventArgs)\n- uid: System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OnTouchUp(TouchEventArgs)\n  nameWithType: UIElement.OnTouchUp(TouchEventArgs)\n  fullName: UIElement.OnTouchUp(TouchEventArgs)\n- uid: System.Windows.UIElement.Opacity\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Opacity\n  nameWithType: UIElement.Opacity\n  fullName: UIElement.Opacity\n- uid: System.Windows.UIElement.OpacityMask\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OpacityMask\n  nameWithType: UIElement.OpacityMask\n  fullName: UIElement.OpacityMask\n- uid: System.Windows.UIElement.OpacityMaskProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OpacityMaskProperty\n  nameWithType: UIElement.OpacityMaskProperty\n  fullName: UIElement.OpacityMaskProperty\n- uid: System.Windows.UIElement.OpacityProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: OpacityProperty\n  nameWithType: UIElement.OpacityProperty\n  fullName: UIElement.OpacityProperty\n- uid: System.Windows.UIElement.PersistId\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PersistId\n  nameWithType: UIElement.PersistId\n  fullName: UIElement.PersistId\n- uid: System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: PredictFocus(FocusNavigationDirection)\n  nameWithType: FrameworkElement.PredictFocus(FocusNavigationDirection)\n  fullName: FrameworkElement.PredictFocus(FocusNavigationDirection)\n- uid: System.Windows.UIElement.PreviewDragEnter\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDragEnter\n  nameWithType: UIElement.PreviewDragEnter\n  fullName: UIElement.PreviewDragEnter\n- uid: System.Windows.UIElement.PreviewDragEnterEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDragEnterEvent\n  nameWithType: UIElement.PreviewDragEnterEvent\n  fullName: UIElement.PreviewDragEnterEvent\n- uid: System.Windows.UIElement.PreviewDragLeave\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDragLeave\n  nameWithType: UIElement.PreviewDragLeave\n  fullName: UIElement.PreviewDragLeave\n- uid: System.Windows.UIElement.PreviewDragLeaveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDragLeaveEvent\n  nameWithType: UIElement.PreviewDragLeaveEvent\n  fullName: UIElement.PreviewDragLeaveEvent\n- uid: System.Windows.UIElement.PreviewDragOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDragOver\n  nameWithType: UIElement.PreviewDragOver\n  fullName: UIElement.PreviewDragOver\n- uid: System.Windows.UIElement.PreviewDragOverEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDragOverEvent\n  nameWithType: UIElement.PreviewDragOverEvent\n  fullName: UIElement.PreviewDragOverEvent\n- uid: System.Windows.UIElement.PreviewDrop\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDrop\n  nameWithType: UIElement.PreviewDrop\n  fullName: UIElement.PreviewDrop\n- uid: System.Windows.UIElement.PreviewDropEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewDropEvent\n  nameWithType: UIElement.PreviewDropEvent\n  fullName: UIElement.PreviewDropEvent\n- uid: System.Windows.UIElement.PreviewGiveFeedback\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewGiveFeedback\n  nameWithType: UIElement.PreviewGiveFeedback\n  fullName: UIElement.PreviewGiveFeedback\n- uid: System.Windows.UIElement.PreviewGiveFeedbackEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewGiveFeedbackEvent\n  nameWithType: UIElement.PreviewGiveFeedbackEvent\n  fullName: UIElement.PreviewGiveFeedbackEvent\n- uid: System.Windows.UIElement.PreviewGotKeyboardFocus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewGotKeyboardFocus\n  nameWithType: UIElement.PreviewGotKeyboardFocus\n  fullName: UIElement.PreviewGotKeyboardFocus\n- uid: System.Windows.UIElement.PreviewGotKeyboardFocusEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewGotKeyboardFocusEvent\n  nameWithType: UIElement.PreviewGotKeyboardFocusEvent\n  fullName: UIElement.PreviewGotKeyboardFocusEvent\n- uid: System.Windows.UIElement.PreviewKeyDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewKeyDown\n  nameWithType: UIElement.PreviewKeyDown\n  fullName: UIElement.PreviewKeyDown\n- uid: System.Windows.UIElement.PreviewKeyDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewKeyDownEvent\n  nameWithType: UIElement.PreviewKeyDownEvent\n  fullName: UIElement.PreviewKeyDownEvent\n- uid: System.Windows.UIElement.PreviewKeyUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewKeyUp\n  nameWithType: UIElement.PreviewKeyUp\n  fullName: UIElement.PreviewKeyUp\n- uid: System.Windows.UIElement.PreviewKeyUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewKeyUpEvent\n  nameWithType: UIElement.PreviewKeyUpEvent\n  fullName: UIElement.PreviewKeyUpEvent\n- uid: System.Windows.UIElement.PreviewLostKeyboardFocus\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewLostKeyboardFocus\n  nameWithType: UIElement.PreviewLostKeyboardFocus\n  fullName: UIElement.PreviewLostKeyboardFocus\n- uid: System.Windows.UIElement.PreviewLostKeyboardFocusEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewLostKeyboardFocusEvent\n  nameWithType: UIElement.PreviewLostKeyboardFocusEvent\n  fullName: UIElement.PreviewLostKeyboardFocusEvent\n- uid: System.Windows.UIElement.PreviewMouseDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseDown\n  nameWithType: UIElement.PreviewMouseDown\n  fullName: UIElement.PreviewMouseDown\n- uid: System.Windows.UIElement.PreviewMouseDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseDownEvent\n  nameWithType: UIElement.PreviewMouseDownEvent\n  fullName: UIElement.PreviewMouseDownEvent\n- uid: System.Windows.UIElement.PreviewMouseLeftButtonDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseLeftButtonDown\n  nameWithType: UIElement.PreviewMouseLeftButtonDown\n  fullName: UIElement.PreviewMouseLeftButtonDown\n- uid: System.Windows.UIElement.PreviewMouseLeftButtonDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseLeftButtonDownEvent\n  nameWithType: UIElement.PreviewMouseLeftButtonDownEvent\n  fullName: UIElement.PreviewMouseLeftButtonDownEvent\n- uid: System.Windows.UIElement.PreviewMouseLeftButtonUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseLeftButtonUp\n  nameWithType: UIElement.PreviewMouseLeftButtonUp\n  fullName: UIElement.PreviewMouseLeftButtonUp\n- uid: System.Windows.UIElement.PreviewMouseLeftButtonUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseLeftButtonUpEvent\n  nameWithType: UIElement.PreviewMouseLeftButtonUpEvent\n  fullName: UIElement.PreviewMouseLeftButtonUpEvent\n- uid: System.Windows.UIElement.PreviewMouseMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseMove\n  nameWithType: UIElement.PreviewMouseMove\n  fullName: UIElement.PreviewMouseMove\n- uid: System.Windows.UIElement.PreviewMouseMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseMoveEvent\n  nameWithType: UIElement.PreviewMouseMoveEvent\n  fullName: UIElement.PreviewMouseMoveEvent\n- uid: System.Windows.UIElement.PreviewMouseRightButtonDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseRightButtonDown\n  nameWithType: UIElement.PreviewMouseRightButtonDown\n  fullName: UIElement.PreviewMouseRightButtonDown\n- uid: System.Windows.UIElement.PreviewMouseRightButtonDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseRightButtonDownEvent\n  nameWithType: UIElement.PreviewMouseRightButtonDownEvent\n  fullName: UIElement.PreviewMouseRightButtonDownEvent\n- uid: System.Windows.UIElement.PreviewMouseRightButtonUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseRightButtonUp\n  nameWithType: UIElement.PreviewMouseRightButtonUp\n  fullName: UIElement.PreviewMouseRightButtonUp\n- uid: System.Windows.UIElement.PreviewMouseRightButtonUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseRightButtonUpEvent\n  nameWithType: UIElement.PreviewMouseRightButtonUpEvent\n  fullName: UIElement.PreviewMouseRightButtonUpEvent\n- uid: System.Windows.UIElement.PreviewMouseUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseUp\n  nameWithType: UIElement.PreviewMouseUp\n  fullName: UIElement.PreviewMouseUp\n- uid: System.Windows.UIElement.PreviewMouseUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseUpEvent\n  nameWithType: UIElement.PreviewMouseUpEvent\n  fullName: UIElement.PreviewMouseUpEvent\n- uid: System.Windows.UIElement.PreviewMouseWheel\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseWheel\n  nameWithType: UIElement.PreviewMouseWheel\n  fullName: UIElement.PreviewMouseWheel\n- uid: System.Windows.UIElement.PreviewMouseWheelEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewMouseWheelEvent\n  nameWithType: UIElement.PreviewMouseWheelEvent\n  fullName: UIElement.PreviewMouseWheelEvent\n- uid: System.Windows.UIElement.PreviewQueryContinueDrag\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewQueryContinueDrag\n  nameWithType: UIElement.PreviewQueryContinueDrag\n  fullName: UIElement.PreviewQueryContinueDrag\n- uid: System.Windows.UIElement.PreviewQueryContinueDragEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewQueryContinueDragEvent\n  nameWithType: UIElement.PreviewQueryContinueDragEvent\n  fullName: UIElement.PreviewQueryContinueDragEvent\n- uid: System.Windows.UIElement.PreviewStylusButtonDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusButtonDown\n  nameWithType: UIElement.PreviewStylusButtonDown\n  fullName: UIElement.PreviewStylusButtonDown\n- uid: System.Windows.UIElement.PreviewStylusButtonDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusButtonDownEvent\n  nameWithType: UIElement.PreviewStylusButtonDownEvent\n  fullName: UIElement.PreviewStylusButtonDownEvent\n- uid: System.Windows.UIElement.PreviewStylusButtonUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusButtonUp\n  nameWithType: UIElement.PreviewStylusButtonUp\n  fullName: UIElement.PreviewStylusButtonUp\n- uid: System.Windows.UIElement.PreviewStylusButtonUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusButtonUpEvent\n  nameWithType: UIElement.PreviewStylusButtonUpEvent\n  fullName: UIElement.PreviewStylusButtonUpEvent\n- uid: System.Windows.UIElement.PreviewStylusDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusDown\n  nameWithType: UIElement.PreviewStylusDown\n  fullName: UIElement.PreviewStylusDown\n- uid: System.Windows.UIElement.PreviewStylusDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusDownEvent\n  nameWithType: UIElement.PreviewStylusDownEvent\n  fullName: UIElement.PreviewStylusDownEvent\n- uid: System.Windows.UIElement.PreviewStylusInAirMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusInAirMove\n  nameWithType: UIElement.PreviewStylusInAirMove\n  fullName: UIElement.PreviewStylusInAirMove\n- uid: System.Windows.UIElement.PreviewStylusInAirMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusInAirMoveEvent\n  nameWithType: UIElement.PreviewStylusInAirMoveEvent\n  fullName: UIElement.PreviewStylusInAirMoveEvent\n- uid: System.Windows.UIElement.PreviewStylusInRange\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusInRange\n  nameWithType: UIElement.PreviewStylusInRange\n  fullName: UIElement.PreviewStylusInRange\n- uid: System.Windows.UIElement.PreviewStylusInRangeEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusInRangeEvent\n  nameWithType: UIElement.PreviewStylusInRangeEvent\n  fullName: UIElement.PreviewStylusInRangeEvent\n- uid: System.Windows.UIElement.PreviewStylusMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusMove\n  nameWithType: UIElement.PreviewStylusMove\n  fullName: UIElement.PreviewStylusMove\n- uid: System.Windows.UIElement.PreviewStylusMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusMoveEvent\n  nameWithType: UIElement.PreviewStylusMoveEvent\n  fullName: UIElement.PreviewStylusMoveEvent\n- uid: System.Windows.UIElement.PreviewStylusOutOfRange\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusOutOfRange\n  nameWithType: UIElement.PreviewStylusOutOfRange\n  fullName: UIElement.PreviewStylusOutOfRange\n- uid: System.Windows.UIElement.PreviewStylusOutOfRangeEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusOutOfRangeEvent\n  nameWithType: UIElement.PreviewStylusOutOfRangeEvent\n  fullName: UIElement.PreviewStylusOutOfRangeEvent\n- uid: System.Windows.UIElement.PreviewStylusSystemGesture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusSystemGesture\n  nameWithType: UIElement.PreviewStylusSystemGesture\n  fullName: UIElement.PreviewStylusSystemGesture\n- uid: System.Windows.UIElement.PreviewStylusSystemGestureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusSystemGestureEvent\n  nameWithType: UIElement.PreviewStylusSystemGestureEvent\n  fullName: UIElement.PreviewStylusSystemGestureEvent\n- uid: System.Windows.UIElement.PreviewStylusUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusUp\n  nameWithType: UIElement.PreviewStylusUp\n  fullName: UIElement.PreviewStylusUp\n- uid: System.Windows.UIElement.PreviewStylusUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewStylusUpEvent\n  nameWithType: UIElement.PreviewStylusUpEvent\n  fullName: UIElement.PreviewStylusUpEvent\n- uid: System.Windows.UIElement.PreviewTextInput\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTextInput\n  nameWithType: UIElement.PreviewTextInput\n  fullName: UIElement.PreviewTextInput\n- uid: System.Windows.UIElement.PreviewTextInputEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTextInputEvent\n  nameWithType: UIElement.PreviewTextInputEvent\n  fullName: UIElement.PreviewTextInputEvent\n- uid: System.Windows.UIElement.PreviewTouchDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTouchDown\n  nameWithType: UIElement.PreviewTouchDown\n  fullName: UIElement.PreviewTouchDown\n- uid: System.Windows.UIElement.PreviewTouchDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTouchDownEvent\n  nameWithType: UIElement.PreviewTouchDownEvent\n  fullName: UIElement.PreviewTouchDownEvent\n- uid: System.Windows.UIElement.PreviewTouchMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTouchMove\n  nameWithType: UIElement.PreviewTouchMove\n  fullName: UIElement.PreviewTouchMove\n- uid: System.Windows.UIElement.PreviewTouchMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTouchMoveEvent\n  nameWithType: UIElement.PreviewTouchMoveEvent\n  fullName: UIElement.PreviewTouchMoveEvent\n- uid: System.Windows.UIElement.PreviewTouchUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTouchUp\n  nameWithType: UIElement.PreviewTouchUp\n  fullName: UIElement.PreviewTouchUp\n- uid: System.Windows.UIElement.PreviewTouchUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: PreviewTouchUpEvent\n  nameWithType: UIElement.PreviewTouchUpEvent\n  fullName: UIElement.PreviewTouchUpEvent\n- uid: System.Windows.UIElement.QueryContinueDrag\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: QueryContinueDrag\n  nameWithType: UIElement.QueryContinueDrag\n  fullName: UIElement.QueryContinueDrag\n- uid: System.Windows.UIElement.QueryContinueDragEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: QueryContinueDragEvent\n  nameWithType: UIElement.QueryContinueDragEvent\n  fullName: UIElement.QueryContinueDragEvent\n- uid: System.Windows.UIElement.QueryCursor\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: QueryCursor\n  nameWithType: UIElement.QueryCursor\n  fullName: UIElement.QueryCursor\n- uid: System.Windows.UIElement.QueryCursorEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: QueryCursorEvent\n  nameWithType: UIElement.QueryCursorEvent\n  fullName: UIElement.QueryCursorEvent\n- uid: System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RaiseEvent(RoutedEventArgs)\n  nameWithType: UIElement.RaiseEvent(RoutedEventArgs)\n  fullName: UIElement.RaiseEvent(RoutedEventArgs)\n- uid: System.Windows.UIElement.ReleaseAllTouchCaptures\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ReleaseAllTouchCaptures()\n  nameWithType: UIElement.ReleaseAllTouchCaptures()\n  fullName: UIElement.ReleaseAllTouchCaptures()\n- uid: System.Windows.UIElement.ReleaseMouseCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ReleaseMouseCapture()\n  nameWithType: UIElement.ReleaseMouseCapture()\n  fullName: UIElement.ReleaseMouseCapture()\n- uid: System.Windows.UIElement.ReleaseStylusCapture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ReleaseStylusCapture()\n  nameWithType: UIElement.ReleaseStylusCapture()\n  fullName: UIElement.ReleaseStylusCapture()\n- uid: System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ReleaseTouchCapture(TouchDevice)\n  nameWithType: UIElement.ReleaseTouchCapture(TouchDevice)\n  fullName: UIElement.ReleaseTouchCapture(TouchDevice)\n- uid: System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RemoveHandler(RoutedEvent, Delegate)\n  nameWithType: UIElement.RemoveHandler(RoutedEvent, Delegate)\n  fullName: UIElement.RemoveHandler(RoutedEvent, Delegate)\n- uid: System.Windows.UIElement.RenderSize\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RenderSize\n  nameWithType: UIElement.RenderSize\n  fullName: UIElement.RenderSize\n- uid: System.Windows.UIElement.RenderTransform\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RenderTransform\n  nameWithType: UIElement.RenderTransform\n  fullName: UIElement.RenderTransform\n- uid: System.Windows.UIElement.RenderTransformOrigin\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RenderTransformOrigin\n  nameWithType: UIElement.RenderTransformOrigin\n  fullName: UIElement.RenderTransformOrigin\n- uid: System.Windows.UIElement.RenderTransformOriginProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RenderTransformOriginProperty\n  nameWithType: UIElement.RenderTransformOriginProperty\n  fullName: UIElement.RenderTransformOriginProperty\n- uid: System.Windows.UIElement.RenderTransformProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: RenderTransformProperty\n  nameWithType: UIElement.RenderTransformProperty\n  fullName: UIElement.RenderTransformProperty\n- uid: System.Windows.UIElement.ShouldSerializeCommandBindings\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ShouldSerializeCommandBindings()\n  nameWithType: UIElement.ShouldSerializeCommandBindings()\n  fullName: UIElement.ShouldSerializeCommandBindings()\n- uid: System.Windows.UIElement.ShouldSerializeInputBindings\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: ShouldSerializeInputBindings()\n  nameWithType: UIElement.ShouldSerializeInputBindings()\n  fullName: UIElement.ShouldSerializeInputBindings()\n- uid: System.Windows.UIElement.SnapsToDevicePixels\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: SnapsToDevicePixels\n  nameWithType: UIElement.SnapsToDevicePixels\n  fullName: UIElement.SnapsToDevicePixels\n- uid: System.Windows.UIElement.SnapsToDevicePixelsProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: SnapsToDevicePixelsProperty\n  nameWithType: UIElement.SnapsToDevicePixelsProperty\n  fullName: UIElement.SnapsToDevicePixelsProperty\n- uid: System.Windows.UIElement.StylusButtonDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusButtonDown\n  nameWithType: UIElement.StylusButtonDown\n  fullName: UIElement.StylusButtonDown\n- uid: System.Windows.UIElement.StylusButtonDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusButtonDownEvent\n  nameWithType: UIElement.StylusButtonDownEvent\n  fullName: UIElement.StylusButtonDownEvent\n- uid: System.Windows.UIElement.StylusButtonUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusButtonUp\n  nameWithType: UIElement.StylusButtonUp\n  fullName: UIElement.StylusButtonUp\n- uid: System.Windows.UIElement.StylusButtonUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusButtonUpEvent\n  nameWithType: UIElement.StylusButtonUpEvent\n  fullName: UIElement.StylusButtonUpEvent\n- uid: System.Windows.UIElement.StylusDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusDown\n  nameWithType: UIElement.StylusDown\n  fullName: UIElement.StylusDown\n- uid: System.Windows.UIElement.StylusDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusDownEvent\n  nameWithType: UIElement.StylusDownEvent\n  fullName: UIElement.StylusDownEvent\n- uid: System.Windows.UIElement.StylusEnter\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusEnter\n  nameWithType: UIElement.StylusEnter\n  fullName: UIElement.StylusEnter\n- uid: System.Windows.UIElement.StylusEnterEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusEnterEvent\n  nameWithType: UIElement.StylusEnterEvent\n  fullName: UIElement.StylusEnterEvent\n- uid: System.Windows.UIElement.StylusInAirMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusInAirMove\n  nameWithType: UIElement.StylusInAirMove\n  fullName: UIElement.StylusInAirMove\n- uid: System.Windows.UIElement.StylusInAirMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusInAirMoveEvent\n  nameWithType: UIElement.StylusInAirMoveEvent\n  fullName: UIElement.StylusInAirMoveEvent\n- uid: System.Windows.UIElement.StylusInRange\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusInRange\n  nameWithType: UIElement.StylusInRange\n  fullName: UIElement.StylusInRange\n- uid: System.Windows.UIElement.StylusInRangeEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusInRangeEvent\n  nameWithType: UIElement.StylusInRangeEvent\n  fullName: UIElement.StylusInRangeEvent\n- uid: System.Windows.UIElement.StylusLeave\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusLeave\n  nameWithType: UIElement.StylusLeave\n  fullName: UIElement.StylusLeave\n- uid: System.Windows.UIElement.StylusLeaveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusLeaveEvent\n  nameWithType: UIElement.StylusLeaveEvent\n  fullName: UIElement.StylusLeaveEvent\n- uid: System.Windows.UIElement.StylusMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusMove\n  nameWithType: UIElement.StylusMove\n  fullName: UIElement.StylusMove\n- uid: System.Windows.UIElement.StylusMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusMoveEvent\n  nameWithType: UIElement.StylusMoveEvent\n  fullName: UIElement.StylusMoveEvent\n- uid: System.Windows.UIElement.StylusOutOfRange\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusOutOfRange\n  nameWithType: UIElement.StylusOutOfRange\n  fullName: UIElement.StylusOutOfRange\n- uid: System.Windows.UIElement.StylusOutOfRangeEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusOutOfRangeEvent\n  nameWithType: UIElement.StylusOutOfRangeEvent\n  fullName: UIElement.StylusOutOfRangeEvent\n- uid: System.Windows.UIElement.StylusPlugIns\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusPlugIns\n  nameWithType: UIElement.StylusPlugIns\n  fullName: UIElement.StylusPlugIns\n- uid: System.Windows.UIElement.StylusSystemGesture\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusSystemGesture\n  nameWithType: UIElement.StylusSystemGesture\n  fullName: UIElement.StylusSystemGesture\n- uid: System.Windows.UIElement.StylusSystemGestureEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusSystemGestureEvent\n  nameWithType: UIElement.StylusSystemGestureEvent\n  fullName: UIElement.StylusSystemGestureEvent\n- uid: System.Windows.UIElement.StylusUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusUp\n  nameWithType: UIElement.StylusUp\n  fullName: UIElement.StylusUp\n- uid: System.Windows.UIElement.StylusUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: StylusUpEvent\n  nameWithType: UIElement.StylusUpEvent\n  fullName: UIElement.StylusUpEvent\n- uid: System.Windows.UIElement.TextInput\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TextInput\n  nameWithType: UIElement.TextInput\n  fullName: UIElement.TextInput\n- uid: System.Windows.UIElement.TextInputEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TextInputEvent\n  nameWithType: UIElement.TextInputEvent\n  fullName: UIElement.TextInputEvent\n- uid: System.Windows.UIElement.TouchDown\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchDown\n  nameWithType: UIElement.TouchDown\n  fullName: UIElement.TouchDown\n- uid: System.Windows.UIElement.TouchDownEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchDownEvent\n  nameWithType: UIElement.TouchDownEvent\n  fullName: UIElement.TouchDownEvent\n- uid: System.Windows.UIElement.TouchEnter\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchEnter\n  nameWithType: UIElement.TouchEnter\n  fullName: UIElement.TouchEnter\n- uid: System.Windows.UIElement.TouchEnterEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchEnterEvent\n  nameWithType: UIElement.TouchEnterEvent\n  fullName: UIElement.TouchEnterEvent\n- uid: System.Windows.UIElement.TouchesCaptured\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchesCaptured\n  nameWithType: UIElement.TouchesCaptured\n  fullName: UIElement.TouchesCaptured\n- uid: System.Windows.UIElement.TouchesCapturedWithin\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchesCapturedWithin\n  nameWithType: UIElement.TouchesCapturedWithin\n  fullName: UIElement.TouchesCapturedWithin\n- uid: System.Windows.UIElement.TouchesDirectlyOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchesDirectlyOver\n  nameWithType: UIElement.TouchesDirectlyOver\n  fullName: UIElement.TouchesDirectlyOver\n- uid: System.Windows.UIElement.TouchesOver\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchesOver\n  nameWithType: UIElement.TouchesOver\n  fullName: UIElement.TouchesOver\n- uid: System.Windows.UIElement.TouchLeave\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchLeave\n  nameWithType: UIElement.TouchLeave\n  fullName: UIElement.TouchLeave\n- uid: System.Windows.UIElement.TouchLeaveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchLeaveEvent\n  nameWithType: UIElement.TouchLeaveEvent\n  fullName: UIElement.TouchLeaveEvent\n- uid: System.Windows.UIElement.TouchMove\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchMove\n  nameWithType: UIElement.TouchMove\n  fullName: UIElement.TouchMove\n- uid: System.Windows.UIElement.TouchMoveEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchMoveEvent\n  nameWithType: UIElement.TouchMoveEvent\n  fullName: UIElement.TouchMoveEvent\n- uid: System.Windows.UIElement.TouchUp\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchUp\n  nameWithType: UIElement.TouchUp\n  fullName: UIElement.TouchUp\n- uid: System.Windows.UIElement.TouchUpEvent\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TouchUpEvent\n  nameWithType: UIElement.TouchUpEvent\n  fullName: UIElement.TouchUpEvent\n- uid: System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: TranslatePoint(Point, UIElement)\n  nameWithType: UIElement.TranslatePoint(Point, UIElement)\n  fullName: UIElement.TranslatePoint(Point, UIElement)\n- uid: System.Windows.UIElement.Uid\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Uid\n  nameWithType: UIElement.Uid\n  fullName: UIElement.Uid\n- uid: System.Windows.UIElement.UidProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: UidProperty\n  nameWithType: UIElement.UidProperty\n  fullName: UIElement.UidProperty\n- uid: System.Windows.UIElement.UpdateLayout\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: UpdateLayout()\n  nameWithType: UIElement.UpdateLayout()\n  fullName: UIElement.UpdateLayout()\n- uid: System.Windows.UIElement.Visibility\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: Visibility\n  nameWithType: UIElement.Visibility\n  fullName: UIElement.Visibility\n- uid: System.Windows.UIElement.VisibilityProperty\n  parent: System.Windows.UIElement\n  isExternal: false\n  name: VisibilityProperty\n  nameWithType: UIElement.VisibilityProperty\n  fullName: UIElement.VisibilityProperty\n- uid: System.Windows.FrameworkElement.ActualHeight\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ActualHeight\n  nameWithType: FrameworkElement.ActualHeight\n  fullName: FrameworkElement.ActualHeight\n- uid: System.Windows.FrameworkElement.ActualHeightProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ActualHeightProperty\n  nameWithType: FrameworkElement.ActualHeightProperty\n  fullName: FrameworkElement.ActualHeightProperty\n- uid: System.Windows.FrameworkElement.ActualWidth\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ActualWidth\n  nameWithType: FrameworkElement.ActualWidth\n  fullName: FrameworkElement.ActualWidth\n- uid: System.Windows.FrameworkElement.ActualWidthProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ActualWidthProperty\n  nameWithType: FrameworkElement.ActualWidthProperty\n  fullName: FrameworkElement.ActualWidthProperty\n- uid: System.Windows.FrameworkElement.AddLogicalChild(System.Object)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: AddLogicalChild(Object)\n  nameWithType: FrameworkElement.AddLogicalChild(Object)\n  fullName: FrameworkElement.AddLogicalChild(Object)\n- uid: System.Windows.FrameworkElement.ApplyTemplate\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ApplyTemplate()\n  nameWithType: FrameworkElement.ApplyTemplate()\n  fullName: FrameworkElement.ApplyTemplate()\n- uid: System.Windows.FrameworkElement.BeginInit\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BeginInit()\n  nameWithType: FrameworkElement.BeginInit()\n  fullName: FrameworkElement.BeginInit()\n- uid: System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BeginStoryboard(Storyboard)\n  nameWithType: FrameworkElement.BeginStoryboard(Storyboard)\n  fullName: FrameworkElement.BeginStoryboard(Storyboard)\n- uid: System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BeginStoryboard(Storyboard, HandoffBehavior)\n  nameWithType: FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior)\n  fullName: FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior)\n- uid: System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BeginStoryboard(Storyboard, HandoffBehavior, Boolean)\n  nameWithType: FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior, Boolean)\n  fullName: FrameworkElement.BeginStoryboard(Storyboard, HandoffBehavior, Boolean)\n- uid: System.Windows.FrameworkElement.BindingGroup\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BindingGroup\n  nameWithType: FrameworkElement.BindingGroup\n  fullName: FrameworkElement.BindingGroup\n- uid: System.Windows.FrameworkElement.BindingGroupProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BindingGroupProperty\n  nameWithType: FrameworkElement.BindingGroupProperty\n  fullName: FrameworkElement.BindingGroupProperty\n- uid: System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BringIntoView(Rect)\n  nameWithType: FrameworkElement.BringIntoView(Rect)\n  fullName: FrameworkElement.BringIntoView(Rect)\n- uid: System.Windows.FrameworkElement.BringIntoView\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: BringIntoView()\n  nameWithType: FrameworkElement.BringIntoView()\n  fullName: FrameworkElement.BringIntoView()\n- uid: System.Windows.FrameworkElement.ContextMenu\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ContextMenu\n  nameWithType: FrameworkElement.ContextMenu\n  fullName: FrameworkElement.ContextMenu\n- uid: System.Windows.FrameworkElement.ContextMenuClosing\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ContextMenuClosing\n  nameWithType: FrameworkElement.ContextMenuClosing\n  fullName: FrameworkElement.ContextMenuClosing\n- uid: System.Windows.FrameworkElement.ContextMenuClosingEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ContextMenuClosingEvent\n  nameWithType: FrameworkElement.ContextMenuClosingEvent\n  fullName: FrameworkElement.ContextMenuClosingEvent\n- uid: System.Windows.FrameworkElement.ContextMenuOpening\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ContextMenuOpening\n  nameWithType: FrameworkElement.ContextMenuOpening\n  fullName: FrameworkElement.ContextMenuOpening\n- uid: System.Windows.FrameworkElement.ContextMenuOpeningEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ContextMenuOpeningEvent\n  nameWithType: FrameworkElement.ContextMenuOpeningEvent\n  fullName: FrameworkElement.ContextMenuOpeningEvent\n- uid: System.Windows.FrameworkElement.ContextMenuProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ContextMenuProperty\n  nameWithType: FrameworkElement.ContextMenuProperty\n  fullName: FrameworkElement.ContextMenuProperty\n- uid: System.Windows.FrameworkElement.Cursor\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Cursor\n  nameWithType: FrameworkElement.Cursor\n  fullName: FrameworkElement.Cursor\n- uid: System.Windows.FrameworkElement.CursorProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: CursorProperty\n  nameWithType: FrameworkElement.CursorProperty\n  fullName: FrameworkElement.CursorProperty\n- uid: System.Windows.FrameworkElement.DataContext\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: DataContext\n  nameWithType: FrameworkElement.DataContext\n  fullName: FrameworkElement.DataContext\n- uid: System.Windows.FrameworkElement.DataContextChanged\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: DataContextChanged\n  nameWithType: FrameworkElement.DataContextChanged\n  fullName: FrameworkElement.DataContextChanged\n- uid: System.Windows.FrameworkElement.DataContextProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: DataContextProperty\n  nameWithType: FrameworkElement.DataContextProperty\n  fullName: FrameworkElement.DataContextProperty\n- uid: System.Windows.FrameworkElement.DefaultStyleKey\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: DefaultStyleKey\n  nameWithType: FrameworkElement.DefaultStyleKey\n  fullName: FrameworkElement.DefaultStyleKey\n- uid: System.Windows.FrameworkElement.DefaultStyleKeyProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: DefaultStyleKeyProperty\n  nameWithType: FrameworkElement.DefaultStyleKeyProperty\n  fullName: FrameworkElement.DefaultStyleKeyProperty\n- uid: System.Windows.FrameworkElement.EndInit\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: EndInit()\n  nameWithType: FrameworkElement.EndInit()\n  fullName: FrameworkElement.EndInit()\n- uid: System.Windows.FrameworkElement.FindName(System.String)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FindName(String)\n  nameWithType: FrameworkElement.FindName(String)\n  fullName: FrameworkElement.FindName(String)\n- uid: System.Windows.FrameworkElement.FindResource(System.Object)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FindResource(Object)\n  nameWithType: FrameworkElement.FindResource(Object)\n  fullName: FrameworkElement.FindResource(Object)\n- uid: System.Windows.FrameworkElement.FlowDirection\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FlowDirection\n  nameWithType: FrameworkElement.FlowDirection\n  fullName: FrameworkElement.FlowDirection\n- uid: System.Windows.FrameworkElement.FlowDirectionProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FlowDirectionProperty\n  nameWithType: FrameworkElement.FlowDirectionProperty\n  fullName: FrameworkElement.FlowDirectionProperty\n- uid: System.Windows.FrameworkElement.FocusVisualStyle\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FocusVisualStyle\n  nameWithType: FrameworkElement.FocusVisualStyle\n  fullName: FrameworkElement.FocusVisualStyle\n- uid: System.Windows.FrameworkElement.FocusVisualStyleProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: FocusVisualStyleProperty\n  nameWithType: FrameworkElement.FocusVisualStyleProperty\n  fullName: FrameworkElement.FocusVisualStyleProperty\n- uid: System.Windows.FrameworkElement.ForceCursor\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ForceCursor\n  nameWithType: FrameworkElement.ForceCursor\n  fullName: FrameworkElement.ForceCursor\n- uid: System.Windows.FrameworkElement.ForceCursorProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ForceCursorProperty\n  nameWithType: FrameworkElement.ForceCursorProperty\n  fullName: FrameworkElement.ForceCursorProperty\n- uid: System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetBindingExpression(DependencyProperty)\n  nameWithType: FrameworkElement.GetBindingExpression(DependencyProperty)\n  fullName: FrameworkElement.GetBindingExpression(DependencyProperty)\n- uid: System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetFlowDirection(DependencyObject)\n  nameWithType: FrameworkElement.GetFlowDirection(DependencyObject)\n  fullName: FrameworkElement.GetFlowDirection(DependencyObject)\n- uid: System.Windows.FrameworkElement.GetTemplateChild(System.String)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: GetTemplateChild(String)\n  nameWithType: FrameworkElement.GetTemplateChild(String)\n  fullName: FrameworkElement.GetTemplateChild(String)\n- uid: System.Windows.FrameworkElement.Height\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Height\n  nameWithType: FrameworkElement.Height\n  fullName: FrameworkElement.Height\n- uid: System.Windows.FrameworkElement.HeightProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: HeightProperty\n  nameWithType: FrameworkElement.HeightProperty\n  fullName: FrameworkElement.HeightProperty\n- uid: System.Windows.FrameworkElement.HorizontalAlignment\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: HorizontalAlignment\n  nameWithType: FrameworkElement.HorizontalAlignment\n  fullName: FrameworkElement.HorizontalAlignment\n- uid: System.Windows.FrameworkElement.HorizontalAlignmentProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: HorizontalAlignmentProperty\n  nameWithType: FrameworkElement.HorizontalAlignmentProperty\n  fullName: FrameworkElement.HorizontalAlignmentProperty\n- uid: System.Windows.FrameworkElement.InheritanceBehavior\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: InheritanceBehavior\n  nameWithType: FrameworkElement.InheritanceBehavior\n  fullName: FrameworkElement.InheritanceBehavior\n- uid: System.Windows.FrameworkElement.Initialized\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Initialized\n  nameWithType: FrameworkElement.Initialized\n  fullName: FrameworkElement.Initialized\n- uid: System.Windows.FrameworkElement.InputScope\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: InputScope\n  nameWithType: FrameworkElement.InputScope\n  fullName: FrameworkElement.InputScope\n- uid: System.Windows.FrameworkElement.InputScopeProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: InputScopeProperty\n  nameWithType: FrameworkElement.InputScopeProperty\n  fullName: FrameworkElement.InputScopeProperty\n- uid: System.Windows.FrameworkElement.IsInitialized\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: IsInitialized\n  nameWithType: FrameworkElement.IsInitialized\n  fullName: FrameworkElement.IsInitialized\n- uid: System.Windows.FrameworkElement.IsLoaded\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: IsLoaded\n  nameWithType: FrameworkElement.IsLoaded\n  fullName: FrameworkElement.IsLoaded\n- uid: System.Windows.FrameworkElement.Language\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Language\n  nameWithType: FrameworkElement.Language\n  fullName: FrameworkElement.Language\n- uid: System.Windows.FrameworkElement.LanguageProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: LanguageProperty\n  nameWithType: FrameworkElement.LanguageProperty\n  fullName: FrameworkElement.LanguageProperty\n- uid: System.Windows.FrameworkElement.LayoutTransform\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: LayoutTransform\n  nameWithType: FrameworkElement.LayoutTransform\n  fullName: FrameworkElement.LayoutTransform\n- uid: System.Windows.FrameworkElement.LayoutTransformProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: LayoutTransformProperty\n  nameWithType: FrameworkElement.LayoutTransformProperty\n  fullName: FrameworkElement.LayoutTransformProperty\n- uid: System.Windows.FrameworkElement.Loaded\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Loaded\n  nameWithType: FrameworkElement.Loaded\n  fullName: FrameworkElement.Loaded\n- uid: System.Windows.FrameworkElement.LoadedEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: LoadedEvent\n  nameWithType: FrameworkElement.LoadedEvent\n  fullName: FrameworkElement.LoadedEvent\n- uid: System.Windows.FrameworkElement.Margin\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Margin\n  nameWithType: FrameworkElement.Margin\n  fullName: FrameworkElement.Margin\n- uid: System.Windows.FrameworkElement.MarginProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MarginProperty\n  nameWithType: FrameworkElement.MarginProperty\n  fullName: FrameworkElement.MarginProperty\n- uid: System.Windows.FrameworkElement.MaxHeight\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MaxHeight\n  nameWithType: FrameworkElement.MaxHeight\n  fullName: FrameworkElement.MaxHeight\n- uid: System.Windows.FrameworkElement.MaxHeightProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MaxHeightProperty\n  nameWithType: FrameworkElement.MaxHeightProperty\n  fullName: FrameworkElement.MaxHeightProperty\n- uid: System.Windows.FrameworkElement.MaxWidth\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MaxWidth\n  nameWithType: FrameworkElement.MaxWidth\n  fullName: FrameworkElement.MaxWidth\n- uid: System.Windows.FrameworkElement.MaxWidthProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MaxWidthProperty\n  nameWithType: FrameworkElement.MaxWidthProperty\n  fullName: FrameworkElement.MaxWidthProperty\n- uid: System.Windows.FrameworkElement.MinHeight\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MinHeight\n  nameWithType: FrameworkElement.MinHeight\n  fullName: FrameworkElement.MinHeight\n- uid: System.Windows.FrameworkElement.MinHeightProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MinHeightProperty\n  nameWithType: FrameworkElement.MinHeightProperty\n  fullName: FrameworkElement.MinHeightProperty\n- uid: System.Windows.FrameworkElement.MinWidth\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MinWidth\n  nameWithType: FrameworkElement.MinWidth\n  fullName: FrameworkElement.MinWidth\n- uid: System.Windows.FrameworkElement.MinWidthProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: MinWidthProperty\n  nameWithType: FrameworkElement.MinWidthProperty\n  fullName: FrameworkElement.MinWidthProperty\n- uid: System.Windows.FrameworkElement.Name\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Name\n  nameWithType: FrameworkElement.Name\n  fullName: FrameworkElement.Name\n- uid: System.Windows.FrameworkElement.NameProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: NameProperty\n  nameWithType: FrameworkElement.NameProperty\n  fullName: FrameworkElement.NameProperty\n- uid: System.Windows.FrameworkElement.OnApplyTemplate\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnApplyTemplate()\n  nameWithType: FrameworkElement.OnApplyTemplate()\n  fullName: FrameworkElement.OnApplyTemplate()\n- uid: System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnContextMenuClosing(ContextMenuEventArgs)\n  nameWithType: FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs)\n  fullName: FrameworkElement.OnContextMenuClosing(ContextMenuEventArgs)\n- uid: System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnContextMenuOpening(ContextMenuEventArgs)\n  nameWithType: FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs)\n  fullName: FrameworkElement.OnContextMenuOpening(ContextMenuEventArgs)\n- uid: System.Windows.FrameworkElement.OnInitialized(System.EventArgs)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnInitialized(EventArgs)\n  nameWithType: FrameworkElement.OnInitialized(EventArgs)\n  fullName: FrameworkElement.OnInitialized(EventArgs)\n- uid: System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnStyleChanged(Style, Style)\n  nameWithType: FrameworkElement.OnStyleChanged(Style, Style)\n  fullName: FrameworkElement.OnStyleChanged(Style, Style)\n- uid: System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnToolTipClosing(ToolTipEventArgs)\n  nameWithType: FrameworkElement.OnToolTipClosing(ToolTipEventArgs)\n  fullName: FrameworkElement.OnToolTipClosing(ToolTipEventArgs)\n- uid: System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OnToolTipOpening(ToolTipEventArgs)\n  nameWithType: FrameworkElement.OnToolTipOpening(ToolTipEventArgs)\n  fullName: FrameworkElement.OnToolTipOpening(ToolTipEventArgs)\n- uid: System.Windows.FrameworkElement.OverridesDefaultStyle\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OverridesDefaultStyle\n  nameWithType: FrameworkElement.OverridesDefaultStyle\n  fullName: FrameworkElement.OverridesDefaultStyle\n- uid: System.Windows.FrameworkElement.OverridesDefaultStyleProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: OverridesDefaultStyleProperty\n  nameWithType: FrameworkElement.OverridesDefaultStyleProperty\n  fullName: FrameworkElement.OverridesDefaultStyleProperty\n- uid: System.Windows.FrameworkElement.Parent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Parent\n  nameWithType: FrameworkElement.Parent\n  fullName: FrameworkElement.Parent\n- uid: System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ParentLayoutInvalidated(UIElement)\n  nameWithType: FrameworkElement.ParentLayoutInvalidated(UIElement)\n  fullName: FrameworkElement.ParentLayoutInvalidated(UIElement)\n- uid: System.Windows.FrameworkElement.RegisterName(System.String,System.Object)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: RegisterName(String, Object)\n  nameWithType: FrameworkElement.RegisterName(String, Object)\n  fullName: FrameworkElement.RegisterName(String, Object)\n- uid: System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: RemoveLogicalChild(Object)\n  nameWithType: FrameworkElement.RemoveLogicalChild(Object)\n  fullName: FrameworkElement.RemoveLogicalChild(Object)\n- uid: System.Windows.FrameworkElement.RequestBringIntoView\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: RequestBringIntoView\n  nameWithType: FrameworkElement.RequestBringIntoView\n  fullName: FrameworkElement.RequestBringIntoView\n- uid: System.Windows.FrameworkElement.RequestBringIntoViewEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: RequestBringIntoViewEvent\n  nameWithType: FrameworkElement.RequestBringIntoViewEvent\n  fullName: FrameworkElement.RequestBringIntoViewEvent\n- uid: System.Windows.FrameworkElement.Resources\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Resources\n  nameWithType: FrameworkElement.Resources\n  fullName: FrameworkElement.Resources\n- uid: System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SetBinding(DependencyProperty, String)\n  nameWithType: FrameworkElement.SetBinding(DependencyProperty, String)\n  fullName: FrameworkElement.SetBinding(DependencyProperty, String)\n- uid: System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SetBinding(DependencyProperty, BindingBase)\n  nameWithType: FrameworkElement.SetBinding(DependencyProperty, BindingBase)\n  fullName: FrameworkElement.SetBinding(DependencyProperty, BindingBase)\n- uid: System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SetFlowDirection(DependencyObject, FlowDirection)\n  nameWithType: FrameworkElement.SetFlowDirection(DependencyObject, FlowDirection)\n  fullName: FrameworkElement.SetFlowDirection(DependencyObject, FlowDirection)\n- uid: System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SetResourceReference(DependencyProperty, Object)\n  nameWithType: FrameworkElement.SetResourceReference(DependencyProperty, Object)\n  fullName: FrameworkElement.SetResourceReference(DependencyProperty, Object)\n- uid: System.Windows.FrameworkElement.ShouldSerializeResources\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ShouldSerializeResources()\n  nameWithType: FrameworkElement.ShouldSerializeResources()\n  fullName: FrameworkElement.ShouldSerializeResources()\n- uid: System.Windows.FrameworkElement.ShouldSerializeStyle\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ShouldSerializeStyle()\n  nameWithType: FrameworkElement.ShouldSerializeStyle()\n  fullName: FrameworkElement.ShouldSerializeStyle()\n- uid: System.Windows.FrameworkElement.ShouldSerializeTriggers\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ShouldSerializeTriggers()\n  nameWithType: FrameworkElement.ShouldSerializeTriggers()\n  fullName: FrameworkElement.ShouldSerializeTriggers()\n- uid: System.Windows.FrameworkElement.SizeChanged\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SizeChanged\n  nameWithType: FrameworkElement.SizeChanged\n  fullName: FrameworkElement.SizeChanged\n- uid: System.Windows.FrameworkElement.SizeChangedEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SizeChangedEvent\n  nameWithType: FrameworkElement.SizeChangedEvent\n  fullName: FrameworkElement.SizeChangedEvent\n- uid: System.Windows.FrameworkElement.SourceUpdated\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: SourceUpdated\n  nameWithType: FrameworkElement.SourceUpdated\n  fullName: FrameworkElement.SourceUpdated\n- uid: System.Windows.FrameworkElement.Style\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Style\n  nameWithType: FrameworkElement.Style\n  fullName: FrameworkElement.Style\n- uid: System.Windows.FrameworkElement.StyleProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: StyleProperty\n  nameWithType: FrameworkElement.StyleProperty\n  fullName: FrameworkElement.StyleProperty\n- uid: System.Windows.FrameworkElement.Tag\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Tag\n  nameWithType: FrameworkElement.Tag\n  fullName: FrameworkElement.Tag\n- uid: System.Windows.FrameworkElement.TagProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: TagProperty\n  nameWithType: FrameworkElement.TagProperty\n  fullName: FrameworkElement.TagProperty\n- uid: System.Windows.FrameworkElement.TargetUpdated\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: TargetUpdated\n  nameWithType: FrameworkElement.TargetUpdated\n  fullName: FrameworkElement.TargetUpdated\n- uid: System.Windows.FrameworkElement.TemplatedParent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: TemplatedParent\n  nameWithType: FrameworkElement.TemplatedParent\n  fullName: FrameworkElement.TemplatedParent\n- uid: System.Windows.FrameworkElement.ToolTip\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ToolTip\n  nameWithType: FrameworkElement.ToolTip\n  fullName: FrameworkElement.ToolTip\n- uid: System.Windows.FrameworkElement.ToolTipClosing\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ToolTipClosing\n  nameWithType: FrameworkElement.ToolTipClosing\n  fullName: FrameworkElement.ToolTipClosing\n- uid: System.Windows.FrameworkElement.ToolTipClosingEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ToolTipClosingEvent\n  nameWithType: FrameworkElement.ToolTipClosingEvent\n  fullName: FrameworkElement.ToolTipClosingEvent\n- uid: System.Windows.FrameworkElement.ToolTipOpening\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ToolTipOpening\n  nameWithType: FrameworkElement.ToolTipOpening\n  fullName: FrameworkElement.ToolTipOpening\n- uid: System.Windows.FrameworkElement.ToolTipOpeningEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ToolTipOpeningEvent\n  nameWithType: FrameworkElement.ToolTipOpeningEvent\n  fullName: FrameworkElement.ToolTipOpeningEvent\n- uid: System.Windows.FrameworkElement.ToolTipProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: ToolTipProperty\n  nameWithType: FrameworkElement.ToolTipProperty\n  fullName: FrameworkElement.ToolTipProperty\n- uid: System.Windows.FrameworkElement.Triggers\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Triggers\n  nameWithType: FrameworkElement.Triggers\n  fullName: FrameworkElement.Triggers\n- uid: System.Windows.FrameworkElement.TryFindResource(System.Object)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: TryFindResource(Object)\n  nameWithType: FrameworkElement.TryFindResource(Object)\n  fullName: FrameworkElement.TryFindResource(Object)\n- uid: System.Windows.FrameworkElement.Unloaded\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Unloaded\n  nameWithType: FrameworkElement.Unloaded\n  fullName: FrameworkElement.Unloaded\n- uid: System.Windows.FrameworkElement.UnloadedEvent\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: UnloadedEvent\n  nameWithType: FrameworkElement.UnloadedEvent\n  fullName: FrameworkElement.UnloadedEvent\n- uid: System.Windows.FrameworkElement.UnregisterName(System.String)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: UnregisterName(String)\n  nameWithType: FrameworkElement.UnregisterName(String)\n  fullName: FrameworkElement.UnregisterName(String)\n- uid: System.Windows.FrameworkElement.UpdateDefaultStyle\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: UpdateDefaultStyle()\n  nameWithType: FrameworkElement.UpdateDefaultStyle()\n  fullName: FrameworkElement.UpdateDefaultStyle()\n- uid: System.Windows.FrameworkElement.UseLayoutRounding\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: UseLayoutRounding\n  nameWithType: FrameworkElement.UseLayoutRounding\n  fullName: FrameworkElement.UseLayoutRounding\n- uid: System.Windows.FrameworkElement.UseLayoutRoundingProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: UseLayoutRoundingProperty\n  nameWithType: FrameworkElement.UseLayoutRoundingProperty\n  fullName: FrameworkElement.UseLayoutRoundingProperty\n- uid: System.Windows.FrameworkElement.VerticalAlignment\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: VerticalAlignment\n  nameWithType: FrameworkElement.VerticalAlignment\n  fullName: FrameworkElement.VerticalAlignment\n- uid: System.Windows.FrameworkElement.VerticalAlignmentProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: VerticalAlignmentProperty\n  nameWithType: FrameworkElement.VerticalAlignmentProperty\n  fullName: FrameworkElement.VerticalAlignmentProperty\n- uid: System.Windows.FrameworkElement.Width\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: Width\n  nameWithType: FrameworkElement.Width\n  fullName: FrameworkElement.Width\n- uid: System.Windows.FrameworkElement.WidthProperty\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: WidthProperty\n  nameWithType: FrameworkElement.WidthProperty\n  fullName: FrameworkElement.WidthProperty\n- uid: System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)\n  parent: System.Windows.FrameworkElement\n  isExternal: false\n  name: IQueryAmbient.IsAmbientPropertyAvailable(String)\n  nameWithType: FrameworkElement.IQueryAmbient.IsAmbientPropertyAvailable(String)\n  fullName: FrameworkElement.IQueryAmbient.IsAmbientPropertyAvailable(String)\n- uid: System.Windows.Controls.Control.Background\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: Background\n  nameWithType: Control.Background\n  fullName: Control.Background\n- uid: System.Windows.Controls.Control.BackgroundProperty\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: BackgroundProperty\n  nameWithType: Control.BackgroundProperty\n  fullName: Control.BackgroundProperty\n- uid: System.Windows.Controls.Control.BorderBrush\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: BorderBrush\n  nameWithType: Control.BorderBrush\n  fullName: Control.BorderBrush\n- uid: System.Windows.Controls.Control.BorderBrushProperty\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: BorderBrushProperty\n  nameWithType: Control.BorderBrushProperty\n  fullName: Control.BorderBrushProperty\n- uid: System.Windows.Controls.Control.BorderThickness\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: BorderThickness\n  nameWithType: Control.BorderThickness\n  fullName: Control.BorderThickness\n- uid: System.Windows.Controls.Control.BorderThicknessProperty\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: BorderThicknessProperty\n  nameWithType: Control.BorderThicknessProperty\n  fullName: Control.BorderThicknessProperty\n- uid: System.Windows.Controls.Control.FontFamily\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: FontFamily\n  nameWithType: Control.FontFamily\n  fullName: Control.FontFamily\n- uid: System.Windows.Controls.Control.FontFamilyProperty\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: FontFamilyProperty\n  nameWithType: Control.FontFamilyProperty\n  fullName: Control.FontFamilyProperty\n- uid: System.Windows.Controls.Control.FontSize\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: FontSize\n  nameWithType: Control.FontSize\n  fullName: Control.FontSize\n- uid: System.Windows.Controls.Control.FontSizeProperty\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: FontSizeProperty\n  nameWithType: Control.FontSizeProperty\n  fullName: Control.FontSizeProperty\n- uid: System.Windows.Controls.Control.FontStretch\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: FontStretch\n  nameWithType: Control.FontStretch\n  fullName: Control.FontStretch\n- uid: System.Windows.Controls.Control.FontStretchProperty\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: FontStretchProperty\n  nameWithType: Control.FontStretchProperty\n  fullName: Control.FontStretchProperty\n- uid: System.Windows.Controls.Control.FontStyle\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: FontStyle\n  nameWithType: Control.FontStyle\n  fullName: Control.FontStyle\n- uid: System.Windows.Controls.Control.FontStyleProperty\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: FontStyleProperty\n  nameWithType: Control.FontStyleProperty\n  fullName: Control.FontStyleProperty\n- uid: System.Windows.Controls.Control.FontWeight\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: FontWeight\n  nameWithType: Control.FontWeight\n  fullName: Control.FontWeight\n- uid: System.Windows.Controls.Control.FontWeightProperty\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: FontWeightProperty\n  nameWithType: Control.FontWeightProperty\n  fullName: Control.FontWeightProperty\n- uid: System.Windows.Controls.Control.Foreground\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: Foreground\n  nameWithType: Control.Foreground\n  fullName: Control.Foreground\n- uid: System.Windows.Controls.Control.ForegroundProperty\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: ForegroundProperty\n  nameWithType: Control.ForegroundProperty\n  fullName: Control.ForegroundProperty\n- uid: System.Windows.Controls.Control.HandlesScrolling\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: HandlesScrolling\n  nameWithType: Control.HandlesScrolling\n  fullName: Control.HandlesScrolling\n- uid: System.Windows.Controls.Control.HorizontalContentAlignment\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: HorizontalContentAlignment\n  nameWithType: Control.HorizontalContentAlignment\n  fullName: Control.HorizontalContentAlignment\n- uid: System.Windows.Controls.Control.HorizontalContentAlignmentProperty\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: HorizontalContentAlignmentProperty\n  nameWithType: Control.HorizontalContentAlignmentProperty\n  fullName: Control.HorizontalContentAlignmentProperty\n- uid: System.Windows.Controls.Control.IsTabStop\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: IsTabStop\n  nameWithType: Control.IsTabStop\n  fullName: Control.IsTabStop\n- uid: System.Windows.Controls.Control.IsTabStopProperty\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: IsTabStopProperty\n  nameWithType: Control.IsTabStopProperty\n  fullName: Control.IsTabStopProperty\n- uid: System.Windows.Controls.Control.MouseDoubleClick\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: MouseDoubleClick\n  nameWithType: Control.MouseDoubleClick\n  fullName: Control.MouseDoubleClick\n- uid: System.Windows.Controls.Control.MouseDoubleClickEvent\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: MouseDoubleClickEvent\n  nameWithType: Control.MouseDoubleClickEvent\n  fullName: Control.MouseDoubleClickEvent\n- uid: System.Windows.Controls.Control.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: OnMouseDoubleClick(MouseButtonEventArgs)\n  nameWithType: Control.OnMouseDoubleClick(MouseButtonEventArgs)\n  fullName: Control.OnMouseDoubleClick(MouseButtonEventArgs)\n- uid: System.Windows.Controls.Control.OnPreviewMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: OnPreviewMouseDoubleClick(MouseButtonEventArgs)\n  nameWithType: Control.OnPreviewMouseDoubleClick(MouseButtonEventArgs)\n  fullName: Control.OnPreviewMouseDoubleClick(MouseButtonEventArgs)\n- uid: System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: OnTemplateChanged(ControlTemplate, ControlTemplate)\n  nameWithType: Control.OnTemplateChanged(ControlTemplate, ControlTemplate)\n  fullName: Control.OnTemplateChanged(ControlTemplate, ControlTemplate)\n- uid: System.Windows.Controls.Control.Padding\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: Padding\n  nameWithType: Control.Padding\n  fullName: Control.Padding\n- uid: System.Windows.Controls.Control.PaddingProperty\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: PaddingProperty\n  nameWithType: Control.PaddingProperty\n  fullName: Control.PaddingProperty\n- uid: System.Windows.Controls.Control.PreviewMouseDoubleClick\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: PreviewMouseDoubleClick\n  nameWithType: Control.PreviewMouseDoubleClick\n  fullName: Control.PreviewMouseDoubleClick\n- uid: System.Windows.Controls.Control.PreviewMouseDoubleClickEvent\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: PreviewMouseDoubleClickEvent\n  nameWithType: Control.PreviewMouseDoubleClickEvent\n  fullName: Control.PreviewMouseDoubleClickEvent\n- uid: System.Windows.Controls.Control.TabIndex\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: TabIndex\n  nameWithType: Control.TabIndex\n  fullName: Control.TabIndex\n- uid: System.Windows.Controls.Control.TabIndexProperty\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: TabIndexProperty\n  nameWithType: Control.TabIndexProperty\n  fullName: Control.TabIndexProperty\n- uid: System.Windows.Controls.Control.Template\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: Template\n  nameWithType: Control.Template\n  fullName: Control.Template\n- uid: System.Windows.Controls.Control.TemplateProperty\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: TemplateProperty\n  nameWithType: Control.TemplateProperty\n  fullName: Control.TemplateProperty\n- uid: System.Windows.Controls.Control.VerticalContentAlignment\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: VerticalContentAlignment\n  nameWithType: Control.VerticalContentAlignment\n  fullName: Control.VerticalContentAlignment\n- uid: System.Windows.Controls.Control.VerticalContentAlignmentProperty\n  parent: System.Windows.Controls.Control\n  isExternal: false\n  name: VerticalContentAlignmentProperty\n  nameWithType: Control.VerticalContentAlignmentProperty\n  fullName: Control.VerticalContentAlignmentProperty\n- uid: System.Windows.Controls.ContentControl.AddChild(System.Object)\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: AddChild(Object)\n  nameWithType: ContentControl.AddChild(Object)\n  fullName: ContentControl.AddChild(Object)\n- uid: System.Windows.Controls.ContentControl.AddText(System.String)\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: AddText(String)\n  nameWithType: ContentControl.AddText(String)\n  fullName: ContentControl.AddText(String)\n- uid: System.Windows.Controls.ContentControl.Content\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: Content\n  nameWithType: ContentControl.Content\n  fullName: ContentControl.Content\n- uid: System.Windows.Controls.ContentControl.ContentProperty\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: ContentProperty\n  nameWithType: ContentControl.ContentProperty\n  fullName: ContentControl.ContentProperty\n- uid: System.Windows.Controls.ContentControl.ContentStringFormat\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: ContentStringFormat\n  nameWithType: ContentControl.ContentStringFormat\n  fullName: ContentControl.ContentStringFormat\n- uid: System.Windows.Controls.ContentControl.ContentStringFormatProperty\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: ContentStringFormatProperty\n  nameWithType: ContentControl.ContentStringFormatProperty\n  fullName: ContentControl.ContentStringFormatProperty\n- uid: System.Windows.Controls.ContentControl.ContentTemplate\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: ContentTemplate\n  nameWithType: ContentControl.ContentTemplate\n  fullName: ContentControl.ContentTemplate\n- uid: System.Windows.Controls.ContentControl.ContentTemplateProperty\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: ContentTemplateProperty\n  nameWithType: ContentControl.ContentTemplateProperty\n  fullName: ContentControl.ContentTemplateProperty\n- uid: System.Windows.Controls.ContentControl.ContentTemplateSelector\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: ContentTemplateSelector\n  nameWithType: ContentControl.ContentTemplateSelector\n  fullName: ContentControl.ContentTemplateSelector\n- uid: System.Windows.Controls.ContentControl.ContentTemplateSelectorProperty\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: ContentTemplateSelectorProperty\n  nameWithType: ContentControl.ContentTemplateSelectorProperty\n  fullName: ContentControl.ContentTemplateSelectorProperty\n- uid: System.Windows.Controls.ContentControl.HasContent\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: HasContent\n  nameWithType: ContentControl.HasContent\n  fullName: ContentControl.HasContent\n- uid: System.Windows.Controls.ContentControl.HasContentProperty\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: HasContentProperty\n  nameWithType: ContentControl.HasContentProperty\n  fullName: ContentControl.HasContentProperty\n- uid: System.Windows.Controls.ContentControl.OnContentStringFormatChanged(System.String,System.String)\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: OnContentStringFormatChanged(String, String)\n  nameWithType: ContentControl.OnContentStringFormatChanged(String, String)\n  fullName: ContentControl.OnContentStringFormatChanged(String, String)\n- uid: System.Windows.Controls.ContentControl.OnContentTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: OnContentTemplateChanged(DataTemplate, DataTemplate)\n  nameWithType: ContentControl.OnContentTemplateChanged(DataTemplate, DataTemplate)\n  fullName: ContentControl.OnContentTemplateChanged(DataTemplate, DataTemplate)\n- uid: System.Windows.Controls.ContentControl.OnContentTemplateSelectorChanged(System.Windows.Controls.DataTemplateSelector,System.Windows.Controls.DataTemplateSelector)\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: OnContentTemplateSelectorChanged(DataTemplateSelector, DataTemplateSelector)\n  nameWithType: ContentControl.OnContentTemplateSelectorChanged(DataTemplateSelector, DataTemplateSelector)\n  fullName: ContentControl.OnContentTemplateSelectorChanged(DataTemplateSelector, DataTemplateSelector)\n- uid: System.Windows.Controls.ContentControl.ShouldSerializeContent\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: ShouldSerializeContent()\n  nameWithType: ContentControl.ShouldSerializeContent()\n  fullName: ContentControl.ShouldSerializeContent()\n- uid: System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddChild(System.Object)\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: IAddChild.AddChild(Object)\n  nameWithType: ContentControl.IAddChild.AddChild(Object)\n  fullName: ContentControl.IAddChild.AddChild(Object)\n- uid: System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddText(System.String)\n  parent: System.Windows.Controls.ContentControl\n  isExternal: false\n  name: IAddChild.AddText(String)\n  nameWithType: ContentControl.IAddChild.AddText(String)\n  fullName: ContentControl.IAddChild.AddText(String)\n"}