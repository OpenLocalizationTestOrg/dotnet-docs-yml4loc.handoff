{"nodes":[{"content":"Represents a clause in a structured exception-handling block.","nodes":[{"pos":[0,61],"content":"Represents a clause in a structured exception-handling block.","nodes":[{"content":"Represents a clause in a structured exception-handling block.","pos":[0,61]}]}],"pos":[954,1016],"yaml":true},{"content":"The <xref:System.Reflection.ExceptionHandlingClause> class provides information about the clauses in a `try`…`catch`…`finally` block (`Try`…`Catch`…`Finally` in Visual Basic). To get a list of exception-handling clauses in a method, obtain a <xref:System.Reflection.MethodInfo> that represents the method. Use the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method to obtain a <xref:System.Reflection.MethodBody> object, and then use the <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property to get the list of clauses.  \n  \n> [!NOTE]\n>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,547],"content":"The <xref:System.Reflection.ExceptionHandlingClause> class provides information about the clauses in a `try`…`catch`…`finally` block (`Try`…`Catch`…`Finally` in Visual Basic). To get a list of exception-handling clauses in a method, obtain a <xref:System.Reflection.MethodInfo> that represents the method. Use the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method to obtain a <xref:System.Reflection.MethodBody> object, and then use the <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property to get the list of clauses.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> class provides information about the clauses in a <ph id=\"ph2\">`try`</ph>…<ph id=\"ph3\">`catch`</ph>…<ph id=\"ph4\">`finally`</ph>","pos":[0,126],"source":"The <xref:System.Reflection.ExceptionHandlingClause> class provides information about the clauses in a `try`…`catch`…`finally`"},{"content":"block (<ph id=\"ph1\">`Try`</ph>…<ph id=\"ph2\">`Catch`</ph>…<ph id=\"ph3\">`Finally`</ph>","pos":[127,157],"source":" block (`Try`…`Catch`…`Finally`"},{"content":"in Visual Basic).","pos":[158,175]},{"content":"To get a list of exception-handling clauses in a method, obtain a <ph id=\"ph1\">&lt;xref:System.Reflection.MethodInfo&gt;</ph> that represents the method.","pos":[176,305],"source":" To get a list of exception-handling clauses in a method, obtain a <xref:System.Reflection.MethodInfo> that represents the method."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Reflection.MethodBase.GetMethodBody%2A&gt;</ph> method to obtain a <ph id=\"ph2\">&lt;xref:System.Reflection.MethodBody&gt;</ph> object, and then use the <ph id=\"ph3\">&lt;xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A&gt;</ph> property to get the list of clauses.","pos":[306,547],"source":" Use the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method to obtain a <xref:System.Reflection.MethodBody> object, and then use the <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property to get the list of clauses."}]},{"pos":[555,1199],"content":"[!NOTE]\n Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,642],"nodes":[{"content":"Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.","pos":[1,150]},{"content":"Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[151,337]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[338,634],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[1027,2236],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Reflection.ExceptionHandlingClause\"></xref> class.","nodes":[{"pos":[0,103],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ExceptionHandlingClause\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Reflection.ExceptionHandlingClause\"></xref> class."}],"pos":[6245,6349],"yaml":true},{"content":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.ExceptionHandlingClause> objects.","nodes":[{"pos":[0,131],"content":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.ExceptionHandlingClause> objects.","nodes":[{"content":"This constructor is invoked by derived classes during the construction of <ph id=\"ph1\">&lt;xref:System.Reflection.ExceptionHandlingClause&gt;</ph> objects.","pos":[0,131],"source":"This constructor is invoked by derived classes during the construction of <xref:System.Reflection.ExceptionHandlingClause> objects."}]}],"pos":[6360,6492],"yaml":true,"extradata":"MT"},{"content":"Gets the type of exception handled by this clause.","nodes":[{"pos":[0,50],"content":"Gets the type of exception handled by this clause.","nodes":[{"content":"Gets the type of exception handled by this clause.","pos":[0,50]}]}],"pos":[7837,7888],"yaml":true},{"content":"> [!NOTE]\n>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[2,646],"content":"[!NOTE]\n Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,642],"nodes":[{"content":"Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.","pos":[1,150]},{"content":"Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[151,337]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[338,634],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[7899,8558],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Type\"></xref> object that represents that type of exception handled by this clause, or `null` if the <xref href=\"System.Reflection.ExceptionHandlingClause.Flags\"></xref> property is <xref href=\"System.Reflection.ExceptionHandlingClauseOptions.Filter\"></xref> or <xref href=\"System.Reflection.ExceptionHandlingClauseOptions.Finally\"></xref>.","nodes":[{"pos":[0,361],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object that represents that type of exception handled by this clause, or <ph id=\"ph2\">`null`</ph> if the <ph id=\"ph3\">&lt;xref href=\"System.Reflection.ExceptionHandlingClause.Flags\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph4\">&lt;xref href=\"System.Reflection.ExceptionHandlingClauseOptions.Filter\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph5\">&lt;xref href=\"System.Reflection.ExceptionHandlingClauseOptions.Finally\"&gt;&lt;/xref&gt;</ph>.","source":"A <xref href=\"System.Type\"></xref> object that represents that type of exception handled by this clause, or `null` if the <xref href=\"System.Reflection.ExceptionHandlingClause.Flags\"></xref> property is <xref href=\"System.Reflection.ExceptionHandlingClauseOptions.Filter\"></xref> or <xref href=\"System.Reflection.ExceptionHandlingClauseOptions.Finally\"></xref>."}],"pos":[10805,11167],"yaml":true},{"content":"Invalid use of property for the object's current state.","nodes":[{"pos":[0,55],"content":"Invalid use of property for the object's current state.","nodes":[{"content":"Invalid use of property for the object's current state.","pos":[0,55]}]}],"pos":[11356,11412],"yaml":true},{"content":"Gets the offset within the method body, in bytes, of the user-supplied filter code.","nodes":[{"pos":[0,83],"content":"Gets the offset within the method body, in bytes, of the user-supplied filter code.","nodes":[{"content":"Gets the offset within the method body, in bytes, of the user-supplied filter code.","pos":[0,83]}]}],"pos":[12617,12701],"yaml":true},{"content":"A filter clause contains user-suppliedMicrosoft intermediate language (MSIL) that determines whether an exception is handled by this clause. For example, any clause containing the Visual Basic `When` keyword is a <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clause.  \n  \n> [!NOTE]\n>  Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,301],"content":"A filter clause contains user-suppliedMicrosoft intermediate language (MSIL) that determines whether an exception is handled by this clause. For example, any clause containing the Visual Basic `When` keyword is a <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clause.","nodes":[{"content":"A filter clause contains user-suppliedMicrosoft intermediate language (MSIL) that determines whether an exception is handled by this clause.","pos":[0,140]},{"content":"For example, any clause containing the Visual Basic <ph id=\"ph1\">`When`</ph> keyword is a <ph id=\"ph2\">&lt;xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName&gt;</ph> clause.","pos":[141,301],"source":" For example, any clause containing the Visual Basic `When` keyword is a <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clause."}]},{"pos":[309,919],"content":"[!NOTE]\n Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,608],"nodes":[{"content":"Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats.","pos":[1,116]},{"content":"Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[117,303]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[304,600],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[12712,13641],"yaml":true,"extradata":"MT"},{"content":"The offset within the method body, in bytes, of the user-supplied filter code. The value of this property has no meaning if the <xref href=\"System.Reflection.ExceptionHandlingClause.Flags\"></xref> property has any value other than <xref href=\"System.Reflection.ExceptionHandlingClauseOptions.Filter\"></xref>.","nodes":[{"pos":[0,308],"content":"The offset within the method body, in bytes, of the user-supplied filter code. The value of this property has no meaning if the <xref href=\"System.Reflection.ExceptionHandlingClause.Flags\"></xref> property has any value other than <xref href=\"System.Reflection.ExceptionHandlingClauseOptions.Filter\"></xref>.","nodes":[{"content":"The offset within the method body, in bytes, of the user-supplied filter code.","pos":[0,78]},{"content":"The value of this property has no meaning if the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ExceptionHandlingClause.Flags\"&gt;&lt;/xref&gt;</ph> property has any value other than <ph id=\"ph2\">&lt;xref href=\"System.Reflection.ExceptionHandlingClauseOptions.Filter\"&gt;&lt;/xref&gt;</ph>.","pos":[79,308],"source":" The value of this property has no meaning if the <xref href=\"System.Reflection.ExceptionHandlingClause.Flags\"></xref> property has any value other than <xref href=\"System.Reflection.ExceptionHandlingClauseOptions.Filter\"></xref>."}]}],"pos":[13761,14070],"yaml":true},{"content":"Cannot get the offset because the exception handling clause is not a filter.","nodes":[{"pos":[0,76],"content":"Cannot get the offset because the exception handling clause is not a filter.","nodes":[{"content":"Cannot get the offset because the exception handling clause is not a filter.","pos":[0,76]}]}],"pos":[14262,14339],"yaml":true},{"content":"Gets a value indicating whether this exception-handling clause is a finally clause, a type-filtered clause, or a user-filtered clause.","nodes":[{"pos":[0,134],"content":"Gets a value indicating whether this exception-handling clause is a finally clause, a type-filtered clause, or a user-filtered clause.","nodes":[{"content":"Gets a value indicating whether this exception-handling clause is a finally clause, a type-filtered clause, or a user-filtered clause.","pos":[0,134]}]}],"pos":[15502,15637],"yaml":true},{"content":"> [!NOTE]\n>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[2,646],"content":"[!NOTE]\n Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,642],"nodes":[{"content":"Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.","pos":[1,150]},{"content":"Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[151,337]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[338,634],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[15648,16307],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Reflection.ExceptionHandlingClauseOptions\"></xref> value that indicates what kind of action this clause performs.","nodes":[{"pos":[0,135],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ExceptionHandlingClauseOptions\"&gt;&lt;/xref&gt;</ph> value that indicates what kind of action this clause performs.","source":"An <xref href=\"System.Reflection.ExceptionHandlingClauseOptions\"></xref> value that indicates what kind of action this clause performs."}],"pos":[18631,18767],"yaml":true},{"content":"Gets the length, in bytes, of the body of this exception-handling clause.","nodes":[{"pos":[0,73],"content":"Gets the length, in bytes, of the body of this exception-handling clause.","nodes":[{"content":"Gets the length, in bytes, of the body of this exception-handling clause.","pos":[0,73]}]}],"pos":[20056,20130],"yaml":true},{"content":"> [!NOTE]\n>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[2,646],"content":"[!NOTE]\n Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,642],"nodes":[{"content":"Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.","pos":[1,150]},{"content":"Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[151,337]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[338,634],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[20141,20800],"yaml":true,"extradata":"MT"},{"content":"An integer that represents the length, in bytes, of the MSIL that forms the body of this exception-handling clause.","nodes":[{"pos":[0,115],"content":"An integer that represents the length, in bytes, of the MSIL that forms the body of this exception-handling clause.","nodes":[{"content":"An integer that represents the length, in bytes, of the MSIL that forms the body of this exception-handling clause.","pos":[0,115]}]}],"pos":[23051,23167],"yaml":true},{"content":"Gets the offset within the method body, in bytes, of this exception-handling clause.","nodes":[{"pos":[0,84],"content":"Gets the offset within the method body, in bytes, of this exception-handling clause.","nodes":[{"content":"Gets the offset within the method body, in bytes, of this exception-handling clause.","pos":[0,84]}]}],"pos":[24464,24549],"yaml":true},{"content":"> [!NOTE]\n>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[2,646],"content":"[!NOTE]\n Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,642],"nodes":[{"content":"Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.","pos":[1,150]},{"content":"Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[151,337]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[338,634],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[24560,25219],"yaml":true,"extradata":"MT"},{"content":"An integer that represents the offset within the method body, in bytes, of this exception-handling clause.","nodes":[{"pos":[0,106],"content":"An integer that represents the offset within the method body, in bytes, of this exception-handling clause.","nodes":[{"content":"An integer that represents the offset within the method body, in bytes, of this exception-handling clause.","pos":[0,106]}]}],"pos":[27470,27577],"yaml":true},{"content":"A string representation of the exception-handling clause.","nodes":[{"pos":[0,57],"content":"A string representation of the exception-handling clause.","nodes":[{"content":"A string representation of the exception-handling clause.","pos":[0,57]}]}],"pos":[28848,28906],"yaml":true},{"content":"A string that lists appropriate property values for the filter clause type.","nodes":[{"pos":[0,75],"content":"A string that lists appropriate property values for the filter clause type.","nodes":[{"content":"A string that lists appropriate property values for the filter clause type.","pos":[0,75]}]}],"pos":[29041,29117],"yaml":true},{"content":"The total length, in bytes, of the try block that includes this exception-handling clause.","nodes":[{"pos":[0,90],"content":"The total length, in bytes, of the try block that includes this exception-handling clause.","nodes":[{"content":"The total length, in bytes, of the try block that includes this exception-handling clause.","pos":[0,90]}]}],"pos":[30385,30476],"yaml":true},{"content":"An integer that represents the total length, in bytes, of the try block that includes this exception-handling clause.  \n  \n> [!NOTE]\n>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[0,117],"content":"An integer that represents the total length, in bytes, of the try block that includes this exception-handling clause.","nodes":[{"content":"An integer that represents the total length, in bytes, of the try block that includes this exception-handling clause.","pos":[0,117]}]},{"pos":[125,769],"content":"[!NOTE]\n Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,642],"nodes":[{"content":"Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.","pos":[1,150]},{"content":"Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[151,337]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[338,634],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[30487,31266],"yaml":true,"extradata":"MT"},{"content":"The total length, in bytes, of the try block that includes this exception-handling clause.","nodes":[{"pos":[0,90],"content":"The total length, in bytes, of the try block that includes this exception-handling clause.","nodes":[{"content":"The total length, in bytes, of the try block that includes this exception-handling clause.","pos":[0,90]}]}],"pos":[33513,33604],"yaml":true},{"content":"The offset within the method, in bytes, of the try block that includes this exception-handling clause.","nodes":[{"pos":[0,102],"content":"The offset within the method, in bytes, of the try block that includes this exception-handling clause.","nodes":[{"content":"The offset within the method, in bytes, of the try block that includes this exception-handling clause.","pos":[0,102]}]}],"pos":[34873,34976],"yaml":true},{"content":"> [!NOTE]\n>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","nodes":[{"pos":[2,646],"content":"[!NOTE]\n Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","leadings":["","> "],"nodes":[{"content":" Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.","pos":[8,642],"nodes":[{"content":"Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats.","pos":[1,150]},{"content":"Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\".","pos":[151,337]},{"content":"The documentation is available online; see <bpt id=\"p1\">[</bpt>ECMA C# and Common Language Infrastructure Standards<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkID=99212)</ept> on MSDN and <bpt id=\"p2\">[</bpt>Standard ECMA-335 - Common Language Infrastructure (CLI)<ept id=\"p2\">](http://go.microsoft.com/fwlink/?LinkID=65552)</ept> on the Ecma International Web site.","pos":[338,634],"source":" The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site."}]}]}],"pos":[34987,35646],"yaml":true,"extradata":"MT"},{"content":"An integer that represents the offset within the method, in bytes, of the try block that includes this exception-handling clause.","nodes":[{"pos":[0,129],"content":"An integer that represents the offset within the method, in bytes, of the try block that includes this exception-handling clause.","nodes":[{"content":"An integer that represents the offset within the method, in bytes, of the try block that includes this exception-handling clause.","pos":[0,129]}]}],"pos":[37893,38023],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.ExceptionHandlingClause\n  commentId: T:System.Reflection.ExceptionHandlingClause\n  id: ExceptionHandlingClause\n  children:\n  - System.Reflection.ExceptionHandlingClause.#ctor\n  - System.Reflection.ExceptionHandlingClause.CatchType\n  - System.Reflection.ExceptionHandlingClause.FilterOffset\n  - System.Reflection.ExceptionHandlingClause.Flags\n  - System.Reflection.ExceptionHandlingClause.HandlerLength\n  - System.Reflection.ExceptionHandlingClause.HandlerOffset\n  - System.Reflection.ExceptionHandlingClause.ToString\n  - System.Reflection.ExceptionHandlingClause.TryLength\n  - System.Reflection.ExceptionHandlingClause.TryOffset\n  langs:\n  - csharp\n  name: ExceptionHandlingClause\n  nameWithType: ExceptionHandlingClause\n  fullName: System.Reflection.ExceptionHandlingClause\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Represents a clause in a structured exception-handling block.\n  remarks: \"The <xref:System.Reflection.ExceptionHandlingClause> class provides information about the clauses in a `try`…`catch`…`finally` block (`Try`…`Catch`…`Finally` in Visual Basic). To get a list of exception-handling clauses in a method, obtain a <xref:System.Reflection.MethodInfo> that represents the method. Use the <xref:System.Reflection.MethodBase.GetMethodBody%2A> method to obtain a <xref:System.Reflection.MethodBody> object, and then use the <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property to get the list of clauses.  \\n  \\n> [!NOTE]\\n>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \\n  \\n You can use Ildasm.exe to examine the MSIL for the compiled code example, to see how the offsets and lengths are calculated.  \\n  \\n> [!NOTE]\\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \\n  \\n This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  \\n  \\n [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]\\n [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]\\n [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  \\n[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]\\n[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]\\n[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  \\n[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]\\n[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]\\n[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  \\n[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]\\n[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]\\n[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class ExceptionHandlingClause\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.ExceptionHandlingClause.#ctor\n  commentId: M:System.Reflection.ExceptionHandlingClause.#ctor\n  id: '#ctor'\n  parent: System.Reflection.ExceptionHandlingClause\n  langs:\n  - csharp\n  name: ExceptionHandlingClause()\n  nameWithType: ExceptionHandlingClause.ExceptionHandlingClause()\n  fullName: ExceptionHandlingClause.ExceptionHandlingClause()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.ExceptionHandlingClause\"></xref> class.\n  remarks: This constructor is invoked by derived classes during the construction of <xref:System.Reflection.ExceptionHandlingClause> objects.\n  syntax:\n    content: protected ExceptionHandlingClause ();\n    parameters: []\n  overload: System.Reflection.ExceptionHandlingClause.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.ExceptionHandlingClause.CatchType\n  commentId: P:System.Reflection.ExceptionHandlingClause.CatchType\n  id: CatchType\n  parent: System.Reflection.ExceptionHandlingClause\n  langs:\n  - csharp\n  name: CatchType\n  nameWithType: ExceptionHandlingClause.CatchType\n  fullName: ExceptionHandlingClause.CatchType\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the type of exception handled by this clause.\n  remarks: >-\n    > [!NOTE]\n\n    >  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \\n  \\n> [!NOTE]\\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \\n  \\n This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  \\n  \\n [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]\\n [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]\\n [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  \\n[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]\\n[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]\\n[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  \\n[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]\\n[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]\\n[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  \\n[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]\\n[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]\\n[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]\"\n  syntax:\n    content: public virtual Type CatchType { get; }\n    return:\n      type: System.Type\n      description: A <xref href=\"System.Type\"></xref> object that represents that type of exception handled by this clause, or `null` if the <xref href=\"System.Reflection.ExceptionHandlingClause.Flags\"></xref> property is <xref href=\"System.Reflection.ExceptionHandlingClauseOptions.Filter\"></xref> or <xref href=\"System.Reflection.ExceptionHandlingClauseOptions.Finally\"></xref>.\n  overload: System.Reflection.ExceptionHandlingClause.CatchType*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Invalid use of property for the object's current state.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.ExceptionHandlingClause.FilterOffset\n  commentId: P:System.Reflection.ExceptionHandlingClause.FilterOffset\n  id: FilterOffset\n  parent: System.Reflection.ExceptionHandlingClause\n  langs:\n  - csharp\n  name: FilterOffset\n  nameWithType: ExceptionHandlingClause.FilterOffset\n  fullName: ExceptionHandlingClause.FilterOffset\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the offset within the method body, in bytes, of the user-supplied filter code.\n  remarks: \"A filter clause contains user-suppliedMicrosoft intermediate language (MSIL) that determines whether an exception is handled by this clause. For example, any clause containing the Visual Basic `When` keyword is a <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clause.  \\n  \\n> [!NOTE]\\n>  Working with exception-handling clauses requires a thorough understanding of metadata and MSIL instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  syntax:\n    content: public virtual int FilterOffset { get; }\n    return:\n      type: System.Int32\n      description: The offset within the method body, in bytes, of the user-supplied filter code. The value of this property has no meaning if the <xref href=\"System.Reflection.ExceptionHandlingClause.Flags\"></xref> property has any value other than <xref href=\"System.Reflection.ExceptionHandlingClauseOptions.Filter\"></xref>.\n  overload: System.Reflection.ExceptionHandlingClause.FilterOffset*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Cannot get the offset because the exception handling clause is not a filter.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.ExceptionHandlingClause.Flags\n  commentId: P:System.Reflection.ExceptionHandlingClause.Flags\n  id: Flags\n  parent: System.Reflection.ExceptionHandlingClause\n  langs:\n  - csharp\n  name: Flags\n  nameWithType: ExceptionHandlingClause.Flags\n  fullName: ExceptionHandlingClause.Flags\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether this exception-handling clause is a finally clause, a type-filtered clause, or a user-filtered clause.\n  remarks: >-\n    > [!NOTE]\n\n    >  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \\n  \\n> [!NOTE]\\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \\n  \\n This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  \\n  \\n [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]\\n [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]\\n [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  \\n[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]\\n[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]\\n[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  \\n[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]\\n[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]\\n[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  \\n[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]\\n[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]\\n[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]\"\n  syntax:\n    content: public virtual System.Reflection.ExceptionHandlingClauseOptions Flags { get; }\n    return:\n      type: System.Reflection.ExceptionHandlingClauseOptions\n      description: An <xref href=\"System.Reflection.ExceptionHandlingClauseOptions\"></xref> value that indicates what kind of action this clause performs.\n  overload: System.Reflection.ExceptionHandlingClause.Flags*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.ExceptionHandlingClause.HandlerLength\n  commentId: P:System.Reflection.ExceptionHandlingClause.HandlerLength\n  id: HandlerLength\n  parent: System.Reflection.ExceptionHandlingClause\n  langs:\n  - csharp\n  name: HandlerLength\n  nameWithType: ExceptionHandlingClause.HandlerLength\n  fullName: ExceptionHandlingClause.HandlerLength\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the length, in bytes, of the body of this exception-handling clause.\n  remarks: >-\n    > [!NOTE]\n\n    >  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \\n  \\n> [!NOTE]\\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \\n  \\n This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  \\n  \\n [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]\\n [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]\\n [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  \\n[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]\\n[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]\\n[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  \\n[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]\\n[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]\\n[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  \\n[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]\\n[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]\\n[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]\"\n  syntax:\n    content: public virtual int HandlerLength { get; }\n    return:\n      type: System.Int32\n      description: An integer that represents the length, in bytes, of the MSIL that forms the body of this exception-handling clause.\n  overload: System.Reflection.ExceptionHandlingClause.HandlerLength*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.ExceptionHandlingClause.HandlerOffset\n  commentId: P:System.Reflection.ExceptionHandlingClause.HandlerOffset\n  id: HandlerOffset\n  parent: System.Reflection.ExceptionHandlingClause\n  langs:\n  - csharp\n  name: HandlerOffset\n  nameWithType: ExceptionHandlingClause.HandlerOffset\n  fullName: ExceptionHandlingClause.HandlerOffset\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the offset within the method body, in bytes, of this exception-handling clause.\n  remarks: >-\n    > [!NOTE]\n\n    >  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \\n  \\n> [!NOTE]\\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \\n  \\n This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  \\n  \\n [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]\\n [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]\\n [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  \\n[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]\\n[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]\\n[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  \\n[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]\\n[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]\\n[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  \\n[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]\\n[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]\\n[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]\"\n  syntax:\n    content: public virtual int HandlerOffset { get; }\n    return:\n      type: System.Int32\n      description: An integer that represents the offset within the method body, in bytes, of this exception-handling clause.\n  overload: System.Reflection.ExceptionHandlingClause.HandlerOffset*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.ExceptionHandlingClause.ToString\n  commentId: M:System.Reflection.ExceptionHandlingClause.ToString\n  id: ToString\n  parent: System.Reflection.ExceptionHandlingClause\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: ExceptionHandlingClause.ToString()\n  fullName: ExceptionHandlingClause.ToString()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: A string representation of the exception-handling clause.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that lists appropriate property values for the filter clause type.\n  overload: System.Reflection.ExceptionHandlingClause.ToString*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.ExceptionHandlingClause.TryLength\n  commentId: P:System.Reflection.ExceptionHandlingClause.TryLength\n  id: TryLength\n  parent: System.Reflection.ExceptionHandlingClause\n  langs:\n  - csharp\n  name: TryLength\n  nameWithType: ExceptionHandlingClause.TryLength\n  fullName: ExceptionHandlingClause.TryLength\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: The total length, in bytes, of the try block that includes this exception-handling clause.\n  remarks: \"An integer that represents the total length, in bytes, of the try block that includes this exception-handling clause.  \\n  \\n> [!NOTE]\\n>  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \\\"Partition II: Metadata Definition and Semantics\\\" and \\\"Partition III: CIL Instruction Set\\\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\"\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \\n  \\n> [!NOTE]\\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \\n  \\n This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  \\n  \\n [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]\\n [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]\\n [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  \\n[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]\\n[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]\\n[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  \\n[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]\\n[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]\\n[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  \\n[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]\\n[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]\\n[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]\"\n  syntax:\n    content: public virtual int TryLength { get; }\n    return:\n      type: System.Int32\n      description: The total length, in bytes, of the try block that includes this exception-handling clause.\n  overload: System.Reflection.ExceptionHandlingClause.TryLength*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.ExceptionHandlingClause.TryOffset\n  commentId: P:System.Reflection.ExceptionHandlingClause.TryOffset\n  id: TryOffset\n  parent: System.Reflection.ExceptionHandlingClause\n  langs:\n  - csharp\n  name: TryOffset\n  nameWithType: ExceptionHandlingClause.TryOffset\n  fullName: ExceptionHandlingClause.TryOffset\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: The offset within the method, in bytes, of the try block that includes this exception-handling clause.\n  remarks: >-\n    > [!NOTE]\n\n    >  Working with exception-handling clauses requires a thorough understanding of metadata and Microsoft intermediate language (MSIL) instruction formats. Information can be found in the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\" and \"Partition III: CIL Instruction Set\". The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](http://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.\n  example:\n  - \"The following code example defines a test method named `MethodBodyExample`, and displays its local variable information and exception-handling clauses. The <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=fullName> method is used to obtain a <xref:System.Reflection.MethodBody> object for the test method. The <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> property is used to obtain a list of <xref:System.Reflection.ExceptionHandlingClause> objects and display their properties.  \\n  \\n> [!NOTE]\\n>  Not all computer languages can generate <xref:System.Reflection.ExceptionHandlingClauseOptions?displayProperty=fullName> clauses. The Visual Basic example shows a filter clause, using a Visual Basic `When` expression, which is omitted from the examples for other languages.  \\n  \\n This code is part of a larger example located in the <xref:System.Reflection.MethodBody> class topic.  \\n  \\n [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]\\n [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]\\n [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  \\n[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]\\n[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]\\n[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  \\n[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]\\n[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]\\n[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  \\n[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]\\n[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]\\n[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]\"\n  syntax:\n    content: public virtual int TryOffset { get; }\n    return:\n      type: System.Int32\n      description: An integer that represents the offset within the method, in bytes, of the try block that includes this exception-handling clause.\n  overload: System.Reflection.ExceptionHandlingClause.TryOffset*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Reflection.ExceptionHandlingClause.#ctor\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: ExceptionHandlingClause()\n  nameWithType: ExceptionHandlingClause.ExceptionHandlingClause()\n  fullName: ExceptionHandlingClause.ExceptionHandlingClause()\n- uid: System.Reflection.ExceptionHandlingClause.CatchType\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: CatchType\n  nameWithType: ExceptionHandlingClause.CatchType\n  fullName: ExceptionHandlingClause.CatchType\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.ExceptionHandlingClause.FilterOffset\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: FilterOffset\n  nameWithType: ExceptionHandlingClause.FilterOffset\n  fullName: ExceptionHandlingClause.FilterOffset\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.ExceptionHandlingClause.Flags\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: Flags\n  nameWithType: ExceptionHandlingClause.Flags\n  fullName: ExceptionHandlingClause.Flags\n- uid: System.Reflection.ExceptionHandlingClauseOptions\n  parent: System.Reflection\n  isExternal: false\n  name: ExceptionHandlingClauseOptions\n  nameWithType: ExceptionHandlingClauseOptions\n  fullName: System.Reflection.ExceptionHandlingClauseOptions\n- uid: System.Reflection.ExceptionHandlingClause.HandlerLength\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: HandlerLength\n  nameWithType: ExceptionHandlingClause.HandlerLength\n  fullName: ExceptionHandlingClause.HandlerLength\n- uid: System.Reflection.ExceptionHandlingClause.HandlerOffset\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: HandlerOffset\n  nameWithType: ExceptionHandlingClause.HandlerOffset\n  fullName: ExceptionHandlingClause.HandlerOffset\n- uid: System.Reflection.ExceptionHandlingClause.ToString\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: ToString()\n  nameWithType: ExceptionHandlingClause.ToString()\n  fullName: ExceptionHandlingClause.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.ExceptionHandlingClause.TryLength\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: TryLength\n  nameWithType: ExceptionHandlingClause.TryLength\n  fullName: ExceptionHandlingClause.TryLength\n- uid: System.Reflection.ExceptionHandlingClause.TryOffset\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: TryOffset\n  nameWithType: ExceptionHandlingClause.TryOffset\n  fullName: ExceptionHandlingClause.TryOffset\n- uid: System.Reflection.ExceptionHandlingClause.#ctor*\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: ExceptionHandlingClause\n  nameWithType: ExceptionHandlingClause.ExceptionHandlingClause\n  fullName: ExceptionHandlingClause.ExceptionHandlingClause\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n- uid: System.Reflection.ExceptionHandlingClause.CatchType*\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: CatchType\n  nameWithType: ExceptionHandlingClause.CatchType\n  fullName: ExceptionHandlingClause.CatchType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n- uid: System.Reflection.ExceptionHandlingClause.FilterOffset*\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: FilterOffset\n  nameWithType: ExceptionHandlingClause.FilterOffset\n  fullName: ExceptionHandlingClause.FilterOffset\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n- uid: System.Reflection.ExceptionHandlingClause.Flags*\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: Flags\n  nameWithType: ExceptionHandlingClause.Flags\n  fullName: ExceptionHandlingClause.Flags\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n- uid: System.Reflection.ExceptionHandlingClause.HandlerLength*\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: HandlerLength\n  nameWithType: ExceptionHandlingClause.HandlerLength\n  fullName: ExceptionHandlingClause.HandlerLength\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n- uid: System.Reflection.ExceptionHandlingClause.HandlerOffset*\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: HandlerOffset\n  nameWithType: ExceptionHandlingClause.HandlerOffset\n  fullName: ExceptionHandlingClause.HandlerOffset\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n- uid: System.Reflection.ExceptionHandlingClause.ToString*\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: ToString\n  nameWithType: ExceptionHandlingClause.ToString\n  fullName: ExceptionHandlingClause.ToString\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n- uid: System.Reflection.ExceptionHandlingClause.TryLength*\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: TryLength\n  nameWithType: ExceptionHandlingClause.TryLength\n  fullName: ExceptionHandlingClause.TryLength\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n- uid: System.Reflection.ExceptionHandlingClause.TryOffset*\n  parent: System.Reflection.ExceptionHandlingClause\n  isExternal: false\n  name: TryOffset\n  nameWithType: ExceptionHandlingClause.TryOffset\n  fullName: ExceptionHandlingClause.TryOffset\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/ExceptionHandlingClause.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n"}