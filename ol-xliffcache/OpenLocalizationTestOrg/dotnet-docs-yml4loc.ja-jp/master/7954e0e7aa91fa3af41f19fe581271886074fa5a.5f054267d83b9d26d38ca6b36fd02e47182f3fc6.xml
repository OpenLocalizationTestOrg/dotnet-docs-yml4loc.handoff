{"nodes":[{"content":"Provides convenient access to whether a reliable session is enabled when using one of the predefined bindings where it is optional.","nodes":[{"pos":[0,131],"content":"Provides convenient access to whether a reliable session is enabled when using one of the predefined bindings where it is optional.","nodes":[{"content":"Provides convenient access to whether a reliable session is enabled when using one of the predefined bindings where it is optional.","pos":[0,131]}]}],"pos":[656,788],"yaml":true},{"content":"The ability to enable a reliable session is provided with three of the system-provided bindings. A reliable session is:  \n  \n-   Optional (and off by default) with <xref:System.ServiceModel.NetTcpBinding> and <xref:System.ServiceModel.WSHttpBinding> and  \n  \n-   Required (and hence always on) with <xref:System.ServiceModel.WSDualHttpBinding>.","nodes":[{"pos":[0,119],"content":"The ability to enable a reliable session is provided with three of the system-provided bindings. A reliable session is:","nodes":[{"content":"The ability to enable a reliable session is provided with three of the system-provided bindings. A reliable session is:","pos":[0,119],"nodes":[{"content":"The ability to enable a reliable session is provided with three of the system-provided bindings.","pos":[0,96]},{"content":"A reliable session is:","pos":[97,119]}]}]},{"pos":[129,253],"content":"Optional (and off by default) with <xref:System.ServiceModel.NetTcpBinding> and <xref:System.ServiceModel.WSHttpBinding> and","nodes":[{"content":"Optional (and off by default) with <ph id=\"ph1\">&lt;xref:System.ServiceModel.NetTcpBinding&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph> and","pos":[0,124],"source":"Optional (and off by default) with <xref:System.ServiceModel.NetTcpBinding> and <xref:System.ServiceModel.WSHttpBinding> and"}]},{"pos":[263,344],"content":"Required (and hence always on) with <xref:System.ServiceModel.WSDualHttpBinding>.","nodes":[{"content":"Required (and hence always on) with <ph id=\"ph1\">&lt;xref:System.ServiceModel.WSDualHttpBinding&gt;</ph>.","pos":[0,81],"source":"Required (and hence always on) with <xref:System.ServiceModel.WSDualHttpBinding>."}]}],"pos":[799,1150],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.ServiceModel.OptionalReliableSession\"></xref> class.","nodes":[{"pos":[0,105],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.OptionalReliableSession\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.ServiceModel.OptionalReliableSession\"></xref> class."}],"pos":[3290,3396],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.ServiceModel.OptionalReliableSession\"></xref> class from a reliable session binding element.","nodes":[{"pos":[0,145],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.OptionalReliableSession\"&gt;&lt;/xref&gt;</ph> class from a reliable session binding element.","source":"Initializes a new instance of the <xref href=\"System.ServiceModel.OptionalReliableSession\"></xref> class from a reliable session binding element."}],"pos":[4957,5103],"yaml":true},{"content":"The <code>binding</code> is `null`.","nodes":[{"pos":[0,35],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binding</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>.","source":"The <code>binding</code> is `null`."}],"pos":[5555,5591],"yaml":true},{"content":"Gets or sets a value that indicates whether the reliable session is enabled.","nodes":[{"pos":[0,76],"content":"Gets or sets a value that indicates whether the reliable session is enabled.","nodes":[{"content":"Gets or sets a value that indicates whether the reliable session is enabled.","pos":[0,76]}]}],"pos":[6675,6752],"yaml":true},{"content":"The ability to enable a reliable session is provided with three of the system-provided bindings. A reliable session is:  \n  \n-   Optional (and off by default) with <xref:System.ServiceModel.NetTcpBinding> and <xref:System.ServiceModel.WSHttpBinding>.  \n  \n-   Required (and hence always on) with <xref:System.ServiceModel.WSDualHttpBinding>.","nodes":[{"pos":[0,119],"content":"The ability to enable a reliable session is provided with three of the system-provided bindings. A reliable session is:","nodes":[{"content":"The ability to enable a reliable session is provided with three of the system-provided bindings. A reliable session is:","pos":[0,119],"nodes":[{"content":"The ability to enable a reliable session is provided with three of the system-provided bindings.","pos":[0,96]},{"content":"A reliable session is:","pos":[97,119]}]}]},{"pos":[129,250],"content":"Optional (and off by default) with <xref:System.ServiceModel.NetTcpBinding> and <xref:System.ServiceModel.WSHttpBinding>.","nodes":[{"content":"Optional (and off by default) with <ph id=\"ph1\">&lt;xref:System.ServiceModel.NetTcpBinding&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.ServiceModel.WSHttpBinding&gt;</ph>.","pos":[0,121],"source":"Optional (and off by default) with <xref:System.ServiceModel.NetTcpBinding> and <xref:System.ServiceModel.WSHttpBinding>."}]},{"pos":[260,341],"content":"Required (and hence always on) with <xref:System.ServiceModel.WSDualHttpBinding>.","nodes":[{"content":"Required (and hence always on) with <ph id=\"ph1\">&lt;xref:System.ServiceModel.WSDualHttpBinding&gt;</ph>.","pos":[0,81],"source":"Required (and hence always on) with <xref:System.ServiceModel.WSDualHttpBinding>."}]}],"pos":[6763,7111],"yaml":true,"extradata":"MT"},{"content":"`true` if the reliable session is enabled; otherwise, `false`. The default value depends on the binding being used.","nodes":[{"pos":[0,115],"content":"`true` if the reliable session is enabled; otherwise, `false`. The default value depends on the binding being used.","nodes":[{"content":"<ph id=\"ph1\">`true`</ph> if the reliable session is enabled; otherwise, <ph id=\"ph2\">`false`</ph>.","pos":[0,62],"source":"`true` if the reliable session is enabled; otherwise, `false`."},{"content":"The default value depends on the binding being used.","pos":[63,115]}]}],"pos":[7639,7757],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.OptionalReliableSession\n  commentId: T:System.ServiceModel.OptionalReliableSession\n  id: OptionalReliableSession\n  children:\n  - System.ServiceModel.OptionalReliableSession.#ctor\n  - System.ServiceModel.OptionalReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)\n  - System.ServiceModel.OptionalReliableSession.Enabled\n  langs:\n  - csharp\n  name: OptionalReliableSession\n  nameWithType: OptionalReliableSession\n  fullName: System.ServiceModel.OptionalReliableSession\n  type: Class\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Provides convenient access to whether a reliable session is enabled when using one of the predefined bindings where it is optional.\n  remarks: \"The ability to enable a reliable session is provided with three of the system-provided bindings. A reliable session is:  \\n  \\n-   Optional (and off by default) with <xref:System.ServiceModel.NetTcpBinding> and <xref:System.ServiceModel.WSHttpBinding> and  \\n  \\n-   Required (and hence always on) with <xref:System.ServiceModel.WSDualHttpBinding>.\"\n  example:\n  - \"The following example shows how to create a new reliable session, access and change the default values of that session.  \\n  \\n [!code-csharp[S_UEOptionalReliableSession#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueoptionalreliablesession/cs/program.cs#0)]\\n [!code-vb[S_UEOptionalReliableSession#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueoptionalreliablesession/vb/source.vb#0)]\"\n  syntax:\n    content: 'public class OptionalReliableSession : System.ServiceModel.ReliableSession'\n  inheritance:\n  - System.Object\n  - System.ServiceModel.ReliableSession\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.ServiceModel.ReliableSession.InactivityTimeout\n  - System.ServiceModel.ReliableSession.Ordered\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/OptionalReliableSession.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.OptionalReliableSession.#ctor\n  commentId: M:System.ServiceModel.OptionalReliableSession.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.OptionalReliableSession\n  langs:\n  - csharp\n  name: OptionalReliableSession()\n  nameWithType: OptionalReliableSession.OptionalReliableSession()\n  fullName: OptionalReliableSession.OptionalReliableSession()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.OptionalReliableSession\"></xref> class.\n  syntax:\n    content: public OptionalReliableSession ();\n    parameters: []\n  overload: System.ServiceModel.OptionalReliableSession.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/OptionalReliableSession.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.OptionalReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)\n  commentId: M:System.ServiceModel.OptionalReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)\n  id: '#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)'\n  parent: System.ServiceModel.OptionalReliableSession\n  langs:\n  - csharp\n  name: OptionalReliableSession(ReliableSessionBindingElement)\n  nameWithType: OptionalReliableSession.OptionalReliableSession(ReliableSessionBindingElement)\n  fullName: OptionalReliableSession.OptionalReliableSession(ReliableSessionBindingElement)\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.OptionalReliableSession\"></xref> class from a reliable session binding element.\n  syntax:\n    content: public OptionalReliableSession (System.ServiceModel.Channels.ReliableSessionBindingElement binding);\n    parameters:\n    - id: reliableSessionBindingElement\n      type: System.ServiceModel.Channels.ReliableSessionBindingElement\n      description: ''\n  overload: System.ServiceModel.OptionalReliableSession.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>binding</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/OptionalReliableSession.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.OptionalReliableSession.Enabled\n  commentId: P:System.ServiceModel.OptionalReliableSession.Enabled\n  id: Enabled\n  parent: System.ServiceModel.OptionalReliableSession\n  langs:\n  - csharp\n  name: Enabled\n  nameWithType: OptionalReliableSession.Enabled\n  fullName: OptionalReliableSession.Enabled\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel\n  summary: Gets or sets a value that indicates whether the reliable session is enabled.\n  remarks: \"The ability to enable a reliable session is provided with three of the system-provided bindings. A reliable session is:  \\n  \\n-   Optional (and off by default) with <xref:System.ServiceModel.NetTcpBinding> and <xref:System.ServiceModel.WSHttpBinding>.  \\n  \\n-   Required (and hence always on) with <xref:System.ServiceModel.WSDualHttpBinding>.\"\n  example:\n  - \"The following example shows how to create a new reliable session, access and change the default values of that session.  \\n  \\n [!code-csharp[S_UEOptionalReliableSession#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueoptionalreliablesession/cs/program.cs#0)]\\n [!code-vb[S_UEOptionalReliableSession#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueoptionalreliablesession/vb/source.vb#0)]\"\n  syntax:\n    content: public bool Enabled { get; set; }\n    return:\n      type: System.Boolean\n      description: '`true` if the reliable session is enabled; otherwise, `false`. The default value depends on the binding being used.'\n  overload: System.ServiceModel.OptionalReliableSession.Enabled*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/OptionalReliableSession.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.ServiceModel.ReliableSession\n  parent: System.ServiceModel\n  isExternal: false\n  name: ReliableSession\n  nameWithType: ReliableSession\n  fullName: System.ServiceModel.ReliableSession\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ServiceModel.OptionalReliableSession.#ctor\n  parent: System.ServiceModel.OptionalReliableSession\n  isExternal: false\n  name: OptionalReliableSession()\n  nameWithType: OptionalReliableSession.OptionalReliableSession()\n  fullName: OptionalReliableSession.OptionalReliableSession()\n- uid: System.ServiceModel.OptionalReliableSession.#ctor(System.ServiceModel.Channels.ReliableSessionBindingElement)\n  parent: System.ServiceModel.OptionalReliableSession\n  isExternal: false\n  name: OptionalReliableSession(ReliableSessionBindingElement)\n  nameWithType: OptionalReliableSession.OptionalReliableSession(ReliableSessionBindingElement)\n  fullName: OptionalReliableSession.OptionalReliableSession(ReliableSessionBindingElement)\n- uid: System.ServiceModel.Channels.ReliableSessionBindingElement\n  parent: System.ServiceModel.Channels\n  isExternal: false\n  name: ReliableSessionBindingElement\n  nameWithType: ReliableSessionBindingElement\n  fullName: System.ServiceModel.Channels.ReliableSessionBindingElement\n- uid: System.ServiceModel.OptionalReliableSession.Enabled\n  parent: System.ServiceModel.OptionalReliableSession\n  isExternal: false\n  name: Enabled\n  nameWithType: OptionalReliableSession.Enabled\n  fullName: OptionalReliableSession.Enabled\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.ServiceModel.OptionalReliableSession.#ctor*\n  parent: System.ServiceModel.OptionalReliableSession\n  isExternal: false\n  name: OptionalReliableSession\n  nameWithType: OptionalReliableSession.OptionalReliableSession\n  fullName: OptionalReliableSession.OptionalReliableSession\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/OptionalReliableSession.xml\n- uid: System.ServiceModel.OptionalReliableSession.Enabled*\n  parent: System.ServiceModel.OptionalReliableSession\n  isExternal: false\n  name: Enabled\n  nameWithType: OptionalReliableSession.Enabled\n  fullName: OptionalReliableSession.Enabled\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel/OptionalReliableSession.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.ServiceModel.ReliableSession.InactivityTimeout\n  parent: System.ServiceModel.ReliableSession\n  isExternal: false\n  name: InactivityTimeout\n  nameWithType: ReliableSession.InactivityTimeout\n  fullName: ReliableSession.InactivityTimeout\n- uid: System.ServiceModel.ReliableSession.Ordered\n  parent: System.ServiceModel.ReliableSession\n  isExternal: false\n  name: Ordered\n  nameWithType: ReliableSession.Ordered\n  fullName: ReliableSession.Ordered\n"}