<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f706676710d3efb07b85f3f3e20013feea018d5e</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.ServiceModel.Channels.Binding.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">544dde3f6acb834cd1a8f7cd8950e9dee2cee8e0</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3c5933fa3dbbb684c8ca8332e8fff195ab2c419c</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Contains the binding elements that specify the protocols, transports, and message encoders used for communication between clients and services.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Represents a collection of binding elements, each of which describes an aspect of how an endpoint communicates with other endpoints and that are built, consistently, into a channel factory on the client and into a channel listener on the service.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>A binding contains a collection of binding elements that correspond to protocol channels, transport channels, and message encoders.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>There can be any number of binding elements for protocol channels but one and only one binding element for each the transport and message encoder.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>There are commonly six layers of binding elements in a binding.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Only the transport and encoding binding elements at the bottom of the stack are required.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>Because an encoding is required for each binding, if an encoding is not specified, <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> adds a default encoding for you.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default is Text/XML for the HTTP and HTTPS transports, and Binary for other transports.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source>The following table summarizes the options for each layer.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>Layer</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>Options</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>Required</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Transaction Flow</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>No</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>Reliability</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>No</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>Security</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Symmetric, Asymmetric, Transport-Level</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>No</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>Shape Change</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>No</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source>Transport Upgrades</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>SSL stream, Windows stream, Peer Resolver</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>No</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>Encoding</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Text, Binary, MTOM, Custom</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Transport</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>TCP, Named Pipes, HTTP, HTTPS, MSMQ, Custom</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Yes</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each binding element provides the specification for building a channel factory on the client and a channel listener on the service.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the channel factory stack is constructed, for example, there is one channel factory in the stack for each binding element in the binding.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>The same sort of mapping applies to the channel listeners in the stack on the service.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>Consistency on the client and service is critical for establishing the channel-based connection between these endpoints.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each factory and listener, in turn, processes the sending and accepting of the corresponding channels in the channel stack that connects them, and these channels can then send and receive the messages used to communicate.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each instance of a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding&gt;</ph> has a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Binding.Name%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Channels.Binding.Namespace%2A&gt;</ph> that together uniquely identify it in the metadata of the service.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>If no name or namespace is specified, <ph id="ph1">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> adds a default values for you.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default name is <ph id="ph1">`null`</ph> and the default namespace is http://tempuri.org/.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>This user name for the binding is distinct from the specification of the protocol name, which is specified by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding.Scheme%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to add more HTTP bindings, for example, you can name them whatever you want and set all of their schemes to "http".</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no inherent application or machine dispatch based on the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding.Scheme%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>So you avoid the common problem of being unable to register additional handlers for well-known protocols.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also easily work with multiple versions of a binding side-by-side by giving each version a different name.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.ServiceModel.IDefaultCommunicationTimeouts&gt;</ph> interface to mitigate Denial of Service (DOS) attacks that rely on tying up resources for extended intervals of time.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>The implementation specifies the communication timeouts values for opening and closing connections and for the reading and writing operations associated with receiving and sending messages.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The properties used to get and set these timeouts and their default values operations are summarized in the following table.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>Timeout Property</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>Default Value</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>1 minute</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source>1 minute</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>1 minute</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source>10 minutes</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>When you create a binding by inheriting from <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding&gt;</ph>, you must override <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Binding.CreateBindingElements%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>In addition, you can define your own binding elements and insert them between any of the defined layers in the preceding table.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.CustomBinding&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Binding"&gt;&lt;/xref&gt;</ph> class with a default name and namespace.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default name is <ph id="ph1">`null`</ph> and the default namespace is http://tempuri.org/.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Binding"&gt;&lt;/xref&gt;</ph> class from a specified binding of the service.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding.Name%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Binding.Namespace%2A&gt;</ph> together uniquely identify an instance of a <ph id="ph3">&lt;xref:System.ServiceModel.Channels.Binding&gt;</ph> in the metadata of the service.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Binding.Name"&gt;&lt;/xref&gt;</ph> of the binding.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.Binding.Namespace"&gt;&lt;/xref&gt;</ph> of the binding.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;name&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph> or an empty string.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;code&gt;ns&lt;/code&gt;</ph> is <ph id="ph2">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>Builds the channel factory stack on the client that creates a specified type of channel and that satisfies the features specified by an object array.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>The object array that specifies requirements for the channel factory that is built.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>The type of channel the channel factory produces.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.IChannelFactory`1"&gt;&lt;/xref&gt;</ph> of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TChannel</ph><ept id="p1">&lt;/code&gt;</ept> that satisfies the features specified by the collection.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Transport element is missing or out of order or scheme is invalid or the message version is not specified.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>Builds the channel factory stack on the client that creates a specified type of channel and that satisfies the features specified by a collection of binding parameters.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingParameterCollection"&gt;&lt;/xref&gt;</ph> that specifies requirements for the channel factory built.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>The type of channel the channel factory produces.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.IChannelFactory`1"&gt;&lt;/xref&gt;</ph> of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TChannel</ph><ept id="p1">&lt;/code&gt;</ept> that satisfies the features specified by the collection.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Transport element is missing or out of order or scheme is invalid or the message version is not specified.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Builds the channel listener on the service that accepts a specified type of channel and that satisfies the features specified.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The object array that specifies requirements for the channel factory built.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>The type of channel the channel listener accepts.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.IChannelListener`1"&gt;&lt;/xref&gt;</ph> of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TChannel</ph><ept id="p1">&lt;/code&gt;</ept> that satisfies the features specified.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Transport element is missing or out of order or scheme is invalid or the message version is not specified.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Builds the channel listener on the service that accepts a specified type of channel and that satisfies the features specified by a collection of binding parameters.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingParameterCollection"&gt;&lt;/xref&gt;</ph> that specifies requirements for the channel listener that is built.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The type of channel the channel listener accepts.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.IChannelListener`1"&gt;&lt;/xref&gt;</ph> of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TChannel</ph><ept id="p1">&lt;/code&gt;</ept> that satisfies the features specified.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Transport element is missing or out of order or scheme is invalid or the message version is not specified.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>Builds the channel listener on the service that accepts a specified type of channel and that satisfies the features specified.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>The object array that specifies requirements for the channel factory that is built.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>The type of channel the channel listener accepts.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.IChannelListener`1"&gt;&lt;/xref&gt;</ph> of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TChannel</ph><ept id="p1">&lt;/code&gt;</ept> that satisfies the features specified.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Transport element is missing or out of order or scheme is invalid or the message version is not specified.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>Builds the channel listener on the service that accepts a specified type of channel and that satisfies the features specified.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingParameterCollection"&gt;&lt;/xref&gt;</ph> that specifies requirements for the channel listener that is built.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>The type of channel the channel listener accepts.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.IChannelListener`1"&gt;&lt;/xref&gt;</ph> of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TChannel</ph><ept id="p1">&lt;/code&gt;</ept> that satisfies the features specified.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>Transport element is missing or out of order or scheme is invalid or the message version is not specified.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Builds the channel listener on the service that accepts a specified type of channel and that satisfies the features specified.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that provides the base address on which the service listens.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>The address, relative to the base address, on which the service listens.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>The object array that specifies requirements for the channel factory that is built.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>The type of channel the channel listener accepts.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.IChannelListener`1"&gt;&lt;/xref&gt;</ph> of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TChannel</ph><ept id="p1">&lt;/code&gt;</ept> that satisfies the features specified.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>Transport element is missing or out of order or scheme is invalid or the message version is not specified.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>Builds the channel listener on the service that accepts a specified type of channel and that satisfies the features specified.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that provides the base address on which the service listens.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>The address, relative to the base address, on which the service listens.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingParameterCollection"&gt;&lt;/xref&gt;</ph> that specifies requirements for the channel listener that is built.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>The type of channel the channel listener accepts.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.IChannelListener`1"&gt;&lt;/xref&gt;</ph> of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TChannel</ph><ept id="p1">&lt;/code&gt;</ept> that satisfies the features specified.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Transport element is missing or out of order or scheme is invalid or the message version is not specified.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Builds the channel listener on the service that accepts a specified type of channel and that satisfies the features specified.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that provides the base address on which the service listens.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The address, relative to the base address, on which the service listens.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>A value of the <ph id="ph1">&lt;xref href="System.ServiceModel.Description.ListenUriMode"&gt;&lt;/xref&gt;</ph> that indicates whether the transport must ensure that the URI provided for the service to listen on is unique or can be used exactly as provided.</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>The object array that specifies requirements for the channel factory that is built.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>The type of channel the channel listener accepts.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.IChannelListener`1"&gt;&lt;/xref&gt;</ph> of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TChannel</ph><ept id="p1">&lt;/code&gt;</ept> that satisfies the features specified.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Transport element is missing or out of order or scheme is invalid or the message version is not specified.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Builds the channel listener on the service that accepts a specified type of channel and that satisfies the features specified.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Uri"&gt;&lt;/xref&gt;</ph> that provides the base address on which the service listens.</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>The address, relative to the base address, on which the service listens.</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>A value of the <ph id="ph1">&lt;xref href="System.ServiceModel.Description.ListenUriMode"&gt;&lt;/xref&gt;</ph> that indicates whether the transport must ensure that the URI provided for the service to listen on is unique or can be used exactly as provided.</source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingParameterCollection"&gt;&lt;/xref&gt;</ph> that specifies requirements for the channel listener that is built.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The type of channel the channel listener accepts.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.IChannelListener`1"&gt;&lt;/xref&gt;</ph> of type <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">TChannel</ph><ept id="p1">&lt;/code&gt;</ept> that satisfies the features specified.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Transport element is missing or out of order or scheme is invalid or the message version is not specified.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the current binding can build a channel factory stack on the client that satisfies the collection of binding parameters specified.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method if you want to check that the channel factory for channels of type <ph id="ph1">`TChannel`</ph> can be build for the binding <ph id="ph2">`parameters`</ph> specified before attempting to actually build the factory.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, try to build the channel factory by calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding.BuildChannelFactory%60%601%28System.ServiceModel.Channels.BindingParameterCollection%29&gt;</ph> and catch the exception generated if it cannot be built.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingParameterCollection"&gt;&lt;/xref&gt;</ph> that specifies requirements for the channel factory that is built.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>The type of channel for which the factory is being tested.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified channel factory stack can be build on the client; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the current binding can build a channel factory stack on the client that satisfies the requirements specified by an object array.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method if you want to check that the channel factory for channels of type <ph id="ph1">`TChannel`</ph> can be build for the binding <ph id="ph2">`parameters`</ph> specified before attempting to actually build the factory.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, try to build the channel factory by calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding.BuildChannelFactory%60%601%28System.Object%5B%5D%29&gt;</ph> and catch the exception generated if it cannot be built.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>The object array that specifies requirements for the channel factory that is built.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>The type of channel for which the factory is being tested.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified channel factory stack can be build on the client; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the current binding can build a channel listener stack on the service that satisfies the criteria specified in an array of objects.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method if you want to check that the channel listener for channels of type <ph id="ph1">`TChannel`</ph> can be build for the binding <ph id="ph2">`parameters`</ph> specified before attempting to actually build the listener.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, try to build the channel listener by calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding.BuildChannelListener%60%601%28System.Object%5B%5D%29&gt;</ph> and catch the exception generated if it cannot be built.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>The object array that specifies requirements for the channel factory that is built.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>The type of channel for which the listener is being tested.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified channel listener stack can be build on the service; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether the current binding can build a channel listener stack on the service that satisfies the collection of binding parameters specified.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method if you want to check that the channel listener for channels of type <ph id="ph1">`TChannel`</ph> can be build for the binding <ph id="ph2">`parameters`</ph> specified before attempting to actually build the listener.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT">
          <source>Alternatively, try to build the channel listener by calling <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding.BuildChannelListener%60%601%28System.ServiceModel.Channels.BindingParameterCollection%29&gt;</ph> and catch the exception generated if it cannot be built.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingParameterCollection"&gt;&lt;/xref&gt;</ph> that specifies requirements for the channel listener that is built.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>The type of channel for which the listener is being tested.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the specified channel listener stack can be build on the service; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>Gets or sets the interval of time provided for a connection to close before the transport raises an exception.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this property is used by the channels and listeners produced by the factories of the binding.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies how long the close operation has to complete before timing out.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The default value is 1 minute.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>The value is less than zero or too large.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>When overridden in a derived class, creates a collection that contains the binding elements that are part of the current binding.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT">
          <source>The elements should not reference any internal elements that the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding&gt;</ph> object uses.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Collections.Generic.ICollection`1"&gt;&lt;/xref&gt;</ph> object of type <ph id="ph2">&lt;xref href="System.ServiceModel.Channels.BindingElement"&gt;&lt;/xref&gt;</ph> that contains the binding elements from the current binding object in the correct order.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Returns a typed object requested, if present, from the appropriate layer in the binding stack.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a layer supports returning the requested object, it returns it.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT">
          <source>If not, it delegates the call down to the next layer in the stack.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT">
          <source>If it gets to the bottom of the stack and no layer supported the requested object, then the method returns <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.BindingParameterCollection"&gt;&lt;/xref&gt;</ph> that specifies requirements for the channel listener that is built.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>The typed object for which the method is querying.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>The typed object <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">T</ph><ept id="p1">&lt;/code&gt;</ept> requested if it is present or <ph id="ph2">`null`</ph> if it is not.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>Gets the message version used by clients and services configured with the binding.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.ServiceModel.Channels.MessageVersion"&gt;&lt;/xref&gt;</ph> used by clients and services configured with the binding.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>Gets or sets the name of the binding.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each instance of a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding&gt;</ph> has a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Binding.Name%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Channels.Binding.Namespace%2A&gt;</ph> that together uniquely identify the user name for the binding in the metadata of the service.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT">
          <source>This user name for the binding is distinct from the specification of the protocol name, which is specified by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding.Scheme%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to add more HTTP bindings, for example, you can name them whatever you want and set all of their schemes to "http".</source>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no inherent application or machine dispatch based on the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding.Scheme%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT">
          <source>So you avoid the common problem of being unable to register additional handlers for well-known protocols.</source>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also easily work with multiple versions of a binding side-by-side by giving each version a different name.</source>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>The name of the binding.</source>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>The default name is <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>The value set cannot be <ph id="ph1">`null`</ph> or an empty string.</source>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>Gets or sets the XML namespace of the binding.</source>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each instance of a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding&gt;</ph> has a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Binding.Name%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Channels.Binding.Namespace%2A&gt;</ph> that together uniquely identify the user name for the binding in the metadata of the service.</source>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT">
          <source>This user name for the binding is distinct from the specification of the protocol name, which is specified by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding.Scheme%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to add more HTTP bindings, for example, you can name them whatever you want and set all of their schemes to "http".</source>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no inherent application or machine dispatch based on the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding.Scheme%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT">
          <source>So you avoid the common problem of being unable to register additional handlers for well-known protocols.</source>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also easily work with multiple versions of a binding side-by-side by giving each version a different name.</source>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>The XML namespace of the binding.</source>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>The default value is "http://tempuri.org/".</source>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>The value set cannot be <ph id="ph1">`null`</ph>.</source>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>Gets or sets the interval of time provided for a connection to open before the transport raises an exception.</source>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT">
          <source>The value of this property is used by the channels and listeners produced by the factories of the binding.</source>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies how long the open operation has to complete before timing out.</source>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>The default value is 1 minute.</source>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>The value is less than zero or too large.</source>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Gets or sets the interval of time that a connection can remain inactive, during which no application messages are received, before it is dropped.</source>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT">
          <source>When using a reliable session, there are two different inactivity timers that must be satisfied to keep the connection alive.</source>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT">
          <source>If either of these inactivity timers goes off, then the connection is dropped.</source>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT">
          <source>The first inactivity timer is on the reliable session and is called the <ph id="ph1">&lt;xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT">
          <source>This inactivity timer fires if no messages, either application or infrastructure, are received within the timeout period.</source>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT">
          <source>An infrastructure message is a message that is generated for the purpose of one of the protocols in the channel stack, such as a keep alive or an acknowledgment, rather than containing application data.</source>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT">
          <source>The second inactivity timer is on the service and uses the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A&gt;</ph> setting of the binding.</source>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT">
          <source>This inactivity timer fires if no application messages are received within the timeout period.</source>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT">
          <source>This specifies, for example, the maximum time a client may take to send at least one message to the server before the server will close the channel used by a session.</source>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT">
          <source>This behavior ensures that clients cannot hold on to server resources for arbitrary long periods.</source>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT">
          <source>Since the connection is dropped if either inactivity timer fires, increasing <ph id="ph1">&lt;xref:System.ServiceModel.ReliableSession.InactivityTimeout%2A&gt;</ph> once it is greater than <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A&gt;</ph> has no effect.</source>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT">
          <source>The default for both of these timeouts is 10 minutes, so you always have to increase both of them to make a difference when using a reliable session.</source>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT">
          <source>If transaction flow is enabled on the binding or the channel, the operation may take longer to execute than the specified timeout.</source>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT">
          <source>In these circumstances the operation fails due to the expired timeout and the transaction aborts appropriately.</source>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT">
          <source>When security is used with sessions, the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding.ReceiveTimeout%2A&gt;</ph> value set on the binding is also used as the session timeout.</source>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies how long the application has to receive a message before timing out.</source>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>The default value is 10 minute.</source>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>The value is less than zero or too large.</source>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>When implemented in a derived class, sets the URI scheme that specifies the transport used by the channel and listener factories that are built by the bindings.</source>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT">
          <source>This user name for the binding is distinct from the specification of the protocol name, which is specified by the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding.Scheme%2A&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT">
          <source>Each instance of a <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding&gt;</ph> has a <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Binding.Name%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.Channels.Binding.Namespace%2A&gt;</ph> that together uniquely identify the user name for the binding in the metadata of the service.</source>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you want to add more HTTP bindings, for example, you can name them whatever you want and set all of their schemes to "http".</source>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT">
          <source>There is no inherent application or machine dispatch based on the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Binding.Scheme%2A&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT">
          <source>So you avoid the common problem of being unable to register additional handlers for well-known protocols.</source>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can also easily work with multiple versions of a binding side-by-side by giving each version a different name.</source>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>The URI scheme that is used by the channels or listeners that are created by the factories built by the current binding.</source>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>Gets or sets the interval of time provided for a write operation to complete before the transport raises an exception.</source>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT">
          <source>If transaction flow is enabled on the binding or the channel, the operation may take longer to execute than the specified timeout.</source>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT">
          <source>In these circumstances the operation fails due to the expired timeout and the transaction aborts appropriately.</source>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.TimeSpan"&gt;&lt;/xref&gt;</ph> that specifies how long the write operation has to complete before timing out.</source>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>The default value is 1 minute.</source>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>The value is less than zero or too large.</source>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>Returns whether the name of the binding should be serialized.</source>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the binding name should be serialized; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>Returns whether the namespace of the binding should be serialized.</source>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the binding namespace should be serialized; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>