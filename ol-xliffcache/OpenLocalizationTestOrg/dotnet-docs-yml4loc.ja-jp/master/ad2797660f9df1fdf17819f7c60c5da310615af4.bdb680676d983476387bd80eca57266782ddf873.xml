{"nodes":[{"content":"Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.","nodes":[{"pos":[0,120],"content":"Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.","nodes":[{"content":"Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.","pos":[0,120]}]}],"pos":[2212,2333],"yaml":true},{"content":"Code contract classes let you specify preconditions, postconditions, and object invariants in your code. Preconditions are requirements that must be met when entering a method or property. Postconditions describe expectations at the time the method or property code exits. Object invariants describe the expected state for a class that has no condition problems. For more information about preconditions, postconditions, and object invariants, see [Code Contracts](~/docs/framework/debug-trace-profile/code-contracts.md).  \n  \n For tools and detailed instructions for using code contracts, see [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site.  \n  \n> [!IMPORTANT]\n>  You must use a binary rewriter to insert run-time enforcement of contracts. Otherwise, contracts such as the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=fullName> method can only be tested statically and will not throw exceptions during run time if a contract is violated. You can download the binary rewriter CCRewrite from [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site. CCRewrite comes with a Visual Studio add-in that enables you to activate run-time contract enforcement from the project **Properties** page. The binary rewriter and the Visual Studio add-in do not ship with [!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)] or the Windows SDK.","nodes":[{"pos":[0,521],"content":"Code contract classes let you specify preconditions, postconditions, and object invariants in your code. Preconditions are requirements that must be met when entering a method or property. Postconditions describe expectations at the time the method or property code exits. Object invariants describe the expected state for a class that has no condition problems. For more information about preconditions, postconditions, and object invariants, see [Code Contracts](~/docs/framework/debug-trace-profile/code-contracts.md).","nodes":[{"content":"Code contract classes let you specify preconditions, postconditions, and object invariants in your code.","pos":[0,104]},{"content":"Preconditions are requirements that must be met when entering a method or property.","pos":[105,188]},{"content":"Postconditions describe expectations at the time the method or property code exits.","pos":[189,272]},{"content":"Object invariants describe the expected state for a class that has no condition problems.","pos":[273,362]},{"content":"For more information about preconditions, postconditions, and object invariants, see <bpt id=\"p1\">[</bpt>Code Contracts<ept id=\"p1\">](~/docs/framework/debug-trace-profile/code-contracts.md)</ept>.","pos":[363,521],"source":" For more information about preconditions, postconditions, and object invariants, see [Code Contracts](~/docs/framework/debug-trace-profile/code-contracts.md)."}]},{"pos":[528,687],"content":"For tools and detailed instructions for using code contracts, see <bpt id=\"p1\">[</bpt>Code Contracts<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site.","source":"For tools and detailed instructions for using code contracts, see [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site."},{"pos":[695,1441],"content":"[!IMPORTANT]\n You must use a binary rewriter to insert run-time enforcement of contracts. Otherwise, contracts such as the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=fullName> method can only be tested statically and will not throw exceptions during run time if a contract is violated. You can download the binary rewriter CCRewrite from [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site. CCRewrite comes with a Visual Studio add-in that enables you to activate run-time contract enforcement from the project **Properties** page. The binary rewriter and the Visual Studio add-in do not ship with [!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)] or the Windows SDK.","leadings":["","> "],"nodes":[{"content":" You must use a binary rewriter to insert run-time enforcement of contracts. Otherwise, contracts such as the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=fullName> method can only be tested statically and will not throw exceptions during run time if a contract is violated. You can download the binary rewriter CCRewrite from [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site. CCRewrite comes with a Visual Studio add-in that enables you to activate run-time contract enforcement from the project **Properties** page. The binary rewriter and the Visual Studio add-in do not ship with [!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)] or the Windows SDK.","pos":[13,744],"nodes":[{"content":"You must use a binary rewriter to insert run-time enforcement of contracts.","pos":[1,76]},{"content":"Otherwise, contracts such as the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=fullName&gt;</ph> method can only be tested statically and will not throw exceptions during run time if a contract is violated.","pos":[77,300],"source":" Otherwise, contracts such as the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=fullName> method can only be tested statically and will not throw exceptions during run time if a contract is violated."},{"content":"You can download the binary rewriter CCRewrite from <bpt id=\"p1\">[</bpt>Code Contracts<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site.","pos":[301,446],"source":" You can download the binary rewriter CCRewrite from [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site."},{"content":"CCRewrite comes with a Visual Studio add-in that enables you to activate run-time contract enforcement from the project <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept> page.","pos":[447,587],"source":" CCRewrite comes with a Visual Studio add-in that enables you to activate run-time contract enforcement from the project **Properties** page."},{"content":"The binary rewriter and the Visual Studio add-in do not ship with <ph id=\"ph1\">[!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)]</ph> or the Windows SDK.","pos":[588,731],"source":" The binary rewriter and the Visual Studio add-in do not ship with [!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)] or the Windows SDK."}]}]}],"pos":[2344,3793],"yaml":true,"extradata":"MT"},{"content":"Checks for a condition; if the condition is `false`, follows the escalation policy set for the analyzer.","nodes":[{"pos":[0,104],"content":"Checks for a condition; if the condition is <ph id=\"ph1\">`false`</ph>, follows the escalation policy set for the analyzer.","source":"Checks for a condition; if the condition is `false`, follows the escalation policy set for the analyzer."}],"pos":[5474,5579],"yaml":true},{"content":"The default escalation policy is to notify the attached debugger about a contract failure or to display an **Assert** dialog box if a debugger is not attached. Optionally, the analyzer can be instructed to throw an exception.","nodes":[{"pos":[0,225],"content":"The default escalation policy is to notify the attached debugger about a contract failure or to display an **Assert** dialog box if a debugger is not attached. Optionally, the analyzer can be instructed to throw an exception.","nodes":[{"content":"The default escalation policy is to notify the attached debugger about a contract failure or to display an <bpt id=\"p1\">**</bpt>Assert<ept id=\"p1\">**</ept> dialog box if a debugger is not attached.","pos":[0,159],"source":"The default escalation policy is to notify the attached debugger about a contract failure or to display an **Assert** dialog box if a debugger is not attached."},{"content":"Optionally, the analyzer can be instructed to throw an exception.","pos":[160,225]}]}],"pos":[5590,5816],"yaml":true,"extradata":"MT"},{"content":"The conditional expression to test.","nodes":[{"pos":[0,35],"content":"The conditional expression to test.","nodes":[{"content":"The conditional expression to test.","pos":[0,35]}]}],"pos":[6081,6117],"yaml":true},{"content":"Checks for a condition; if the condition is `false`, follows the escalation policy set by the analyzer and displays the specified message.","nodes":[{"pos":[0,138],"content":"Checks for a condition; if the condition is <ph id=\"ph1\">`false`</ph>, follows the escalation policy set by the analyzer and displays the specified message.","source":"Checks for a condition; if the condition is `false`, follows the escalation policy set by the analyzer and displays the specified message."}],"pos":[7657,7796],"yaml":true},{"content":"The default escalation policy is to notify the attached debugger about a contract failure or to display an **Assert** dialog box if a debugger is not attached. Optionally, the analyzer can be instructed to throw an exception. The `userMessage` parameter is passed to the debugger output. If `userMessage` is not a constant string literal, tools may not be able to read it.","nodes":[{"pos":[0,372],"content":"The default escalation policy is to notify the attached debugger about a contract failure or to display an **Assert** dialog box if a debugger is not attached. Optionally, the analyzer can be instructed to throw an exception. The `userMessage` parameter is passed to the debugger output. If `userMessage` is not a constant string literal, tools may not be able to read it.","nodes":[{"content":"The default escalation policy is to notify the attached debugger about a contract failure or to display an <bpt id=\"p1\">**</bpt>Assert<ept id=\"p1\">**</ept> dialog box if a debugger is not attached.","pos":[0,159],"source":"The default escalation policy is to notify the attached debugger about a contract failure or to display an **Assert** dialog box if a debugger is not attached."},{"content":"Optionally, the analyzer can be instructed to throw an exception.","pos":[160,225]},{"content":"The <ph id=\"ph1\">`userMessage`</ph> parameter is passed to the debugger output.","pos":[226,287],"source":" The `userMessage` parameter is passed to the debugger output."},{"content":"If <ph id=\"ph1\">`userMessage`</ph> is not a constant string literal, tools may not be able to read it.","pos":[288,372],"source":" If `userMessage` is not a constant string literal, tools may not be able to read it."}]}],"pos":[7807,8180],"yaml":true,"extradata":"MT"},{"content":"The conditional expression to test.","nodes":[{"pos":[0,35],"content":"The conditional expression to test.","nodes":[{"content":"The conditional expression to test.","pos":[0,35]}]}],"pos":[8465,8501],"yaml":true},{"content":"A message to display if the condition is not met.","nodes":[{"pos":[0,49],"content":"A message to display if the condition is not met.","nodes":[{"content":"A message to display if the condition is not met.","pos":[0,49]}]}],"pos":[8568,8618],"yaml":true},{"content":"Instructs code analysis tools to assume that the specified condition is `true`, even if it cannot be statically proven to always be `true`.","nodes":[{"pos":[0,139],"content":"Instructs code analysis tools to assume that the specified condition is <ph id=\"ph1\">`true`</ph>, even if it cannot be statically proven to always be <ph id=\"ph2\">`true`</ph>.","source":"Instructs code analysis tools to assume that the specified condition is `true`, even if it cannot be statically proven to always be `true`."}],"pos":[10092,10232],"yaml":true},{"content":"At run time, using this method is equivalent to using the <xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%29> method.","nodes":[{"pos":[0,137],"content":"At run time, using this method is equivalent to using the <xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%29> method.","nodes":[{"content":"At run time, using this method is equivalent to using the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%29&gt;</ph> method.","pos":[0,137],"source":"At run time, using this method is equivalent to using the <xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%29> method."}]}],"pos":[10243,10381],"yaml":true,"extradata":"MT"},{"content":"The conditional expression to assume `true`.","nodes":[{"pos":[0,44],"content":"The conditional expression to assume <ph id=\"ph1\">`true`</ph>.","source":"The conditional expression to assume `true`."}],"pos":[10646,10691],"yaml":true},{"content":"Instructs code analysis tools to assume that a condition is `true`, even if it cannot be statically proven to always be `true`, and displays a message if the assumption fails.","nodes":[{"pos":[0,175],"content":"Instructs code analysis tools to assume that a condition is <ph id=\"ph1\">`true`</ph>, even if it cannot be statically proven to always be <ph id=\"ph2\">`true`</ph>, and displays a message if the assumption fails.","source":"Instructs code analysis tools to assume that a condition is `true`, even if it cannot be statically proven to always be `true`, and displays a message if the assumption fails."}],"pos":[12231,12407],"yaml":true},{"content":"If `userMessage` is not a constant string literal, the contract may not be understood by tools.  \n  \n At run time, using this method is equivalent to using the <xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%2CSystem.String%29> method.","nodes":[{"pos":[0,95],"content":"If <ph id=\"ph1\">`userMessage`</ph> is not a constant string literal, the contract may not be understood by tools.","source":"If `userMessage` is not a constant string literal, the contract may not be understood by tools."},{"pos":[102,255],"content":"At run time, using this method is equivalent to using the <xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%2CSystem.String%29> method.","nodes":[{"content":"At run time, using this method is equivalent to using the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%2CSystem.String%29&gt;</ph> method.","pos":[0,153],"source":"At run time, using this method is equivalent to using the <xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%2CSystem.String%29> method."}]}],"pos":[12418,12678],"yaml":true,"extradata":"MT"},{"content":"The conditional expression to assume `true`.","nodes":[{"pos":[0,44],"content":"The conditional expression to assume <ph id=\"ph1\">`true`</ph>.","source":"The conditional expression to assume `true`."}],"pos":[12963,13008],"yaml":true},{"content":"The message to post if the assumption fails.","nodes":[{"pos":[0,44],"content":"The message to post if the assumption fails.","nodes":[{"content":"The message to post if the assumption fails.","pos":[0,44]}]}],"pos":[13075,13120],"yaml":true},{"content":"Occurs when a contract fails.","nodes":[{"pos":[0,29],"content":"Occurs when a contract fails.","nodes":[{"content":"Occurs when a contract fails.","pos":[0,29]}]}],"pos":[14566,14596],"yaml":true},{"content":"The event information for this event is supplied by the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs?displayProperty=fullName> object that is passed to the event handler. This event notifies a managed application environment such as an interactive interpreter or a Web browser host that a contract has failed. Before doing so, it will raise an event that an application can handle as it sees fit. For example, if code is being run in a testing framework, you can log a test failure and then end the test.  \n  \n The default implementation of the <xref:System.Diagnostics.Contracts.Internal.ContractHelper.RaiseContractFailedEvent%2A> method in the .NET Framework class library is to call each handler that is registered with the <xref:System.Diagnostics.Contracts.Contract.ContractFailed> event. Exceptions thrown by handlers are ignored, but each handler can indicate whether the failure is handled by calling the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled%2A> method for the event arguments. If any handler sets the failure as handled, the method returns `null` and no further action is taken. Alternatively, handlers can call the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind%2A> method to instruct the code to unwind. In that case, an exception is thrown after all handlers have executed.","nodes":[{"pos":[0,518],"content":"The event information for this event is supplied by the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs?displayProperty=fullName> object that is passed to the event handler. This event notifies a managed application environment such as an interactive interpreter or a Web browser host that a contract has failed. Before doing so, it will raise an event that an application can handle as it sees fit. For example, if code is being run in a testing framework, you can log a test failure and then end the test.","nodes":[{"content":"The event information for this event is supplied by the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs?displayProperty=fullName> object that is passed to the event handler. This event notifies a managed application environment such as an interactive interpreter or a Web browser host that a contract has failed. Before doing so, it will raise an event that an application can handle as it sees fit. For example, if code is being run in a testing framework, you can log a test failure and then end the test.","pos":[0,518],"nodes":[{"content":"The event information for this event is supplied by the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs?displayProperty=fullName&gt;</ph> object that is passed to the event handler.","pos":[0,184],"source":"The event information for this event is supplied by the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs?displayProperty=fullName> object that is passed to the event handler."},{"content":"This event notifies a managed application environment such as an interactive interpreter or a Web browser host that a contract has failed.","pos":[185,323]},{"content":"Before doing so, it will raise an event that an application can handle as it sees fit.","pos":[324,410]},{"content":"For example, if code is being run in a testing framework, you can log a test failure and then end the test.","pos":[411,518]}]}]},{"pos":[525,1355],"content":"The default implementation of the <xref:System.Diagnostics.Contracts.Internal.ContractHelper.RaiseContractFailedEvent%2A> method in the .NET Framework class library is to call each handler that is registered with the <xref:System.Diagnostics.Contracts.Contract.ContractFailed> event. Exceptions thrown by handlers are ignored, but each handler can indicate whether the failure is handled by calling the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled%2A> method for the event arguments. If any handler sets the failure as handled, the method returns `null` and no further action is taken. Alternatively, handlers can call the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind%2A> method to instruct the code to unwind. In that case, an exception is thrown after all handlers have executed.","nodes":[{"content":"The default implementation of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Internal.ContractHelper.RaiseContractFailedEvent%2A&gt;</ph> method in the .NET Framework class library is to call each handler that is registered with the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Contracts.Contract.ContractFailed&gt;</ph> event.","pos":[0,283],"source":"The default implementation of the <xref:System.Diagnostics.Contracts.Internal.ContractHelper.RaiseContractFailedEvent%2A> method in the .NET Framework class library is to call each handler that is registered with the <xref:System.Diagnostics.Contracts.Contract.ContractFailed> event."},{"content":"Exceptions thrown by handlers are ignored, but each handler can indicate whether the failure is handled by calling the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled%2A&gt;</ph> method for the event arguments.","pos":[284,508],"source":" Exceptions thrown by handlers are ignored, but each handler can indicate whether the failure is handled by calling the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled%2A> method for the event arguments."},{"content":"If any handler sets the failure as handled, the method returns <ph id=\"ph1\">`null`</ph> and no further action is taken.","pos":[509,610],"source":" If any handler sets the failure as handled, the method returns `null` and no further action is taken."},{"content":"Alternatively, handlers can call the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind%2A&gt;</ph> method to instruct the code to unwind.","pos":[611,759],"source":" Alternatively, handlers can call the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind%2A> method to instruct the code to unwind."},{"content":"In that case, an exception is thrown after all handlers have executed.","pos":[760,830]}]}],"pos":[14607,15967],"yaml":true,"extradata":"MT"},{"content":"Marks the end of the contract section when a method's contracts contain only preconditions in the `if`-`then`-`throw` form.","nodes":[{"pos":[0,123],"content":"Marks the end of the contract section when a method's contracts contain only preconditions in the <ph id=\"ph1\">`if`</ph><ph id=\"ph2\">-</ph><ph id=\"ph3\">`then`</ph><ph id=\"ph4\">-</ph><ph id=\"ph5\">`throw`</ph> form.","source":"Marks the end of the contract section when a method's contracts contain only preconditions in the `if`-`then`-`throw` form."}],"pos":[17729,17853],"yaml":true},{"content":"Most code already contains some parameter validation in the form of `if`-`then`-`throw` code. The contract tools recognize `if`-`then`-`throw` statements as preconditions when the statements appear first inside a method, and the entire set of such statements is followed by an explicit <xref:System.Diagnostics.Contracts.Contract> method call, such as a <xref:System.Diagnostics.Contracts.Contract.Requires%2A>, <xref:System.Diagnostics.Contracts.Contract.Ensures%2A>, <xref:System.Diagnostics.Contracts.Contract.EnsuresOnThrow%2A>, or <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A>.  \n  \n When `if`-`then`-`throw` statements appear in this form, the contract tools recognize them as legacy-require statements. The <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A> form is used only if no other contracts follow the `if`-`then`-`throw` sequences, but they should still be tagged as legacy-requires.","nodes":[{"pos":[0,601],"content":"Most code already contains some parameter validation in the form of `if`-`then`-`throw` code. The contract tools recognize `if`-`then`-`throw` statements as preconditions when the statements appear first inside a method, and the entire set of such statements is followed by an explicit <xref:System.Diagnostics.Contracts.Contract> method call, such as a <xref:System.Diagnostics.Contracts.Contract.Requires%2A>, <xref:System.Diagnostics.Contracts.Contract.Ensures%2A>, <xref:System.Diagnostics.Contracts.Contract.EnsuresOnThrow%2A>, or <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A>.","nodes":[{"content":"Most code already contains some parameter validation in the form of <ph id=\"ph1\">`if`</ph><ph id=\"ph2\">-</ph><ph id=\"ph3\">`then`</ph><ph id=\"ph4\">-</ph><ph id=\"ph5\">`throw`</ph> code.","pos":[0,93],"source":"Most code already contains some parameter validation in the form of `if`-`then`-`throw` code."},{"content":"The contract tools recognize <ph id=\"ph1\">`if`</ph><ph id=\"ph2\">-</ph><ph id=\"ph3\">`then`</ph><ph id=\"ph4\">-</ph><ph id=\"ph5\">`throw`</ph> statements as preconditions when the statements appear first inside a method, and the entire set of such statements is followed by an explicit <ph id=\"ph6\">&lt;xref:System.Diagnostics.Contracts.Contract&gt;</ph> method call, such as a <ph id=\"ph7\">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph>, <ph id=\"ph9\">&lt;xref:System.Diagnostics.Contracts.Contract.EnsuresOnThrow%2A&gt;</ph>, or <ph id=\"ph10\">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A&gt;</ph>.","pos":[94,601],"source":" The contract tools recognize `if`-`then`-`throw` statements as preconditions when the statements appear first inside a method, and the entire set of such statements is followed by an explicit <xref:System.Diagnostics.Contracts.Contract> method call, such as a <xref:System.Diagnostics.Contracts.Contract.Requires%2A>, <xref:System.Diagnostics.Contracts.Contract.Ensures%2A>, <xref:System.Diagnostics.Contracts.Contract.EnsuresOnThrow%2A>, or <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A>."}]},{"pos":[608,931],"content":"When `if`-`then`-`throw` statements appear in this form, the contract tools recognize them as legacy-require statements. The <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A> form is used only if no other contracts follow the `if`-`then`-`throw` sequences, but they should still be tagged as legacy-requires.","nodes":[{"content":"When <ph id=\"ph1\">`if`</ph><ph id=\"ph2\">-</ph><ph id=\"ph3\">`then`</ph><ph id=\"ph4\">-</ph><ph id=\"ph5\">`throw`</ph> statements appear in this form, the contract tools recognize them as legacy-require statements.","pos":[0,120],"source":"When `if`-`then`-`throw` statements appear in this form, the contract tools recognize them as legacy-require statements."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A&gt;</ph> form is used only if no other contracts follow the <ph id=\"ph2\">`if`</ph><ph id=\"ph3\">-</ph><ph id=\"ph4\">`then`</ph><ph id=\"ph5\">-</ph><ph id=\"ph6\">`throw`</ph> sequences, but they should still be tagged as legacy-requires.","pos":[121,323],"source":" The <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A> form is used only if no other contracts follow the `if`-`then`-`throw` sequences, but they should still be tagged as legacy-requires."}]}],"pos":[17864,18800],"yaml":true,"extradata":"MT"},{"content":"Specifies a postcondition contract for the enclosing method or property.","nodes":[{"pos":[0,72],"content":"Specifies a postcondition contract for the enclosing method or property.","nodes":[{"content":"Specifies a postcondition contract for the enclosing method or property.","pos":[0,72]}]}],"pos":[20389,20462],"yaml":true},{"content":"The `condition` parameter specifies a postcondition that is expected to be `true` when the enclosing method or property returns normally.  \n  \n-   This method call must be at the beginning of a method or property, before any other code.  \n  \n-   You must use the binary rewriter (available at [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site) for run-time enforcement of this postcondition.","nodes":[{"pos":[0,137],"content":"The <ph id=\"ph1\">`condition`</ph> parameter specifies a postcondition that is expected to be <ph id=\"ph2\">`true`</ph> when the enclosing method or property returns normally.","source":"The `condition` parameter specifies a postcondition that is expected to be `true` when the enclosing method or property returns normally."},{"pos":[147,236],"content":"This method call must be at the beginning of a method or property, before any other code.","nodes":[{"content":"This method call must be at the beginning of a method or property, before any other code.","pos":[0,89]}]},{"pos":[246,434],"content":"You must use the binary rewriter (available at <bpt id=\"p1\">[</bpt>Code Contracts<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site) for run-time enforcement of this postcondition.","source":"You must use the binary rewriter (available at [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site) for run-time enforcement of this postcondition."}],"pos":[20473,20914],"yaml":true,"extradata":"MT"},{"content":"The conditional expression to test. The expression may include <xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\"></xref>, <xref href=\"System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\"></xref>, and <xref href=\"System.Diagnostics.Contracts.Contract.Result``1\"></xref> values.","nodes":[{"pos":[0,303],"content":"The conditional expression to test. The expression may include <xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\"></xref>, <xref href=\"System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\"></xref>, and <xref href=\"System.Diagnostics.Contracts.Contract.Result``1\"></xref> values.","nodes":[{"content":"The conditional expression to test.","pos":[0,35]},{"content":"The expression may include <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph2\">&lt;xref href=\"System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\"&gt;&lt;/xref&gt;</ph>, and <ph id=\"ph3\">&lt;xref href=\"System.Diagnostics.Contracts.Contract.Result``1\"&gt;&lt;/xref&gt;</ph> values.","pos":[36,303],"source":" The expression may include <xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\"></xref>, <xref href=\"System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\"></xref>, and <xref href=\"System.Diagnostics.Contracts.Contract.Result``1\"></xref> values."}]}],"pos":[21658,21962],"yaml":true},{"content":"Specifies a postcondition contract for a provided exit condition and a message to display if the condition is `false`.","nodes":[{"pos":[0,118],"content":"Specifies a postcondition contract for a provided exit condition and a message to display if the condition is <ph id=\"ph1\">`false`</ph>.","source":"Specifies a postcondition contract for a provided exit condition and a message to display if the condition is `false`."}],"pos":[23459,23578],"yaml":true},{"content":"The `condition` parameter specifies a postcondition that is expected to be `true` when the enclosing method or property returns normally.  \n  \n-   This method call must be at the beginning of a method or property, before any other code.  \n  \n-   This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  \n  \n-   You must use the binary rewriter (available at [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site) for run-time enforcement of this postcondition.  \n  \n-   If `userMessage` is not a constant string literal, the contract may not be understood by tools.","nodes":[{"pos":[0,137],"content":"The <ph id=\"ph1\">`condition`</ph> parameter specifies a postcondition that is expected to be <ph id=\"ph2\">`true`</ph> when the enclosing method or property returns normally.","source":"The `condition` parameter specifies a postcondition that is expected to be `true` when the enclosing method or property returns normally."},{"pos":[147,236],"content":"This method call must be at the beginning of a method or property, before any other code.","nodes":[{"content":"This method call must be at the beginning of a method or property, before any other code.","pos":[0,89]}]},{"pos":[246,378],"content":"This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.","nodes":[{"content":"This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.","pos":[0,132]}]},{"pos":[388,576],"content":"You must use the binary rewriter (available at <bpt id=\"p1\">[</bpt>Code Contracts<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site) for run-time enforcement of this postcondition.","source":"You must use the binary rewriter (available at [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site) for run-time enforcement of this postcondition."},{"pos":[586,681],"content":"If <ph id=\"ph1\">`userMessage`</ph> is not a constant string literal, the contract may not be understood by tools.","source":"If `userMessage` is not a constant string literal, the contract may not be understood by tools."}],"pos":[23589,24281],"yaml":true,"extradata":"MT"},{"content":"The conditional expression to test. The expression may include <xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\"></xref> and <xref href=\"System.Diagnostics.Contracts.Contract.Result``1\"></xref> values.","nodes":[{"pos":[0,219],"content":"The conditional expression to test. The expression may include <xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\"></xref> and <xref href=\"System.Diagnostics.Contracts.Contract.Result``1\"></xref> values.","nodes":[{"content":"The conditional expression to test.","pos":[0,35]},{"content":"The expression may include <ph id=\"ph1\">&lt;xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Diagnostics.Contracts.Contract.Result``1\"&gt;&lt;/xref&gt;</ph> values.","pos":[36,219],"source":" The expression may include <xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\"></xref> and <xref href=\"System.Diagnostics.Contracts.Contract.Result``1\"></xref> values."}]}],"pos":[24518,24738],"yaml":true},{"content":"The message to display if the expression is not `true`.","nodes":[{"pos":[0,55],"content":"The message to display if the expression is not <ph id=\"ph1\">`true`</ph>.","source":"The message to display if the expression is not `true`."}],"pos":[24805,24861],"yaml":true},{"content":"Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.","nodes":[{"pos":[0,119],"content":"Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.","nodes":[{"content":"Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.","pos":[0,119]}]}],"pos":[26379,26499],"yaml":true},{"content":"The `condition` parameter specifies a postcondition that is expected to be `true` when the enclosing method or property terminates abnormally and an exception of type `TException` is thrown.  \n  \n-   This method call must be at the beginning of a method or property, before any other code.  \n  \n-   This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  \n  \n-   You must use the binary rewriter for run-time enforcement of this postcondition.","nodes":[{"pos":[0,190],"content":"The <ph id=\"ph1\">`condition`</ph> parameter specifies a postcondition that is expected to be <ph id=\"ph2\">`true`</ph> when the enclosing method or property terminates abnormally and an exception of type <ph id=\"ph3\">`TException`</ph> is thrown.","source":"The `condition` parameter specifies a postcondition that is expected to be `true` when the enclosing method or property terminates abnormally and an exception of type `TException` is thrown."},{"pos":[200,289],"content":"This method call must be at the beginning of a method or property, before any other code.","nodes":[{"content":"This method call must be at the beginning of a method or property, before any other code.","pos":[0,89]}]},{"pos":[299,431],"content":"This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.","nodes":[{"content":"This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.","pos":[0,132]}]},{"pos":[441,521],"content":"You must use the binary rewriter for run-time enforcement of this postcondition.","nodes":[{"content":"You must use the binary rewriter for run-time enforcement of this postcondition.","pos":[0,80]}]}],"pos":[26510,27040],"yaml":true,"extradata":"MT"},{"content":"The conditional expression to test.","nodes":[{"pos":[0,35],"content":"The conditional expression to test.","nodes":[{"content":"The conditional expression to test.","pos":[0,35]}]}],"pos":[27305,27341],"yaml":true},{"content":"The type of exception that invokes the postcondition check.","nodes":[{"pos":[0,59],"content":"The type of exception that invokes the postcondition check.","nodes":[{"content":"The type of exception that invokes the postcondition check.","pos":[0,59]}]}],"pos":[27401,27461],"yaml":true},{"content":"Specifies a postcondition contract and a message to display if the condition is `false` for the enclosing method or property, based on the provided exception and condition.","nodes":[{"pos":[0,172],"content":"Specifies a postcondition contract and a message to display if the condition is <ph id=\"ph1\">`false`</ph> for the enclosing method or property, based on the provided exception and condition.","source":"Specifies a postcondition contract and a message to display if the condition is `false` for the enclosing method or property, based on the provided exception and condition."}],"pos":[29055,29228],"yaml":true},{"content":"The `condition` parameter specifies a postcondition that is expected to be `true` when the enclosing method or property terminates abnormally and an exception of type `TException` is thrown. The `message` parameter specifies a message to display if the condition is `false`.  \n  \n-   This method call must be at the beginning of a method or property, before any other code.  \n  \n-   This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  \n  \n-   You must use the binary rewriter for run-time enforcement of this postcondition.  \n  \n-   If `userMessage` is not a constant string literal, the contract may not be understood by tools.","nodes":[{"pos":[0,274],"content":"The `condition` parameter specifies a postcondition that is expected to be `true` when the enclosing method or property terminates abnormally and an exception of type `TException` is thrown. The `message` parameter specifies a message to display if the condition is `false`.","nodes":[{"content":"The <ph id=\"ph1\">`condition`</ph> parameter specifies a postcondition that is expected to be <ph id=\"ph2\">`true`</ph> when the enclosing method or property terminates abnormally and an exception of type <ph id=\"ph3\">`TException`</ph> is thrown.","pos":[0,190],"source":"The `condition` parameter specifies a postcondition that is expected to be `true` when the enclosing method or property terminates abnormally and an exception of type `TException` is thrown."},{"content":"The <ph id=\"ph1\">`message`</ph> parameter specifies a message to display if the condition is <ph id=\"ph2\">`false`</ph>.","pos":[191,274],"source":" The `message` parameter specifies a message to display if the condition is `false`."}]},{"pos":[284,373],"content":"This method call must be at the beginning of a method or property, before any other code.","nodes":[{"content":"This method call must be at the beginning of a method or property, before any other code.","pos":[0,89]}]},{"pos":[383,515],"content":"This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.","nodes":[{"content":"This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.","pos":[0,132]}]},{"pos":[525,605],"content":"You must use the binary rewriter for run-time enforcement of this postcondition.","nodes":[{"content":"You must use the binary rewriter for run-time enforcement of this postcondition.","pos":[0,80]}]},{"pos":[615,710],"content":"If <ph id=\"ph1\">`userMessage`</ph> is not a constant string literal, the contract may not be understood by tools.","source":"If `userMessage` is not a constant string literal, the contract may not be understood by tools."}],"pos":[29239,29960],"yaml":true,"extradata":"MT"},{"content":"The conditional expression to test.","nodes":[{"pos":[0,35],"content":"The conditional expression to test.","nodes":[{"content":"The conditional expression to test.","pos":[0,35]}]}],"pos":[30245,30281],"yaml":true},{"content":"The message to display if the expression is `false`.","nodes":[{"pos":[0,52],"content":"The message to display if the expression is <ph id=\"ph1\">`false`</ph>.","source":"The message to display if the expression is `false`."}],"pos":[30348,30401],"yaml":true},{"content":"The type of exception that invokes the postcondition check.","nodes":[{"pos":[0,59],"content":"The type of exception that invokes the postcondition check.","nodes":[{"content":"The type of exception that invokes the postcondition check.","pos":[0,59]}]}],"pos":[30461,30521],"yaml":true},{"content":"Determines whether a specified test is true for any integer within a range of integers.","nodes":[{"pos":[0,87],"content":"Determines whether a specified test is true for any integer within a range of integers.","nodes":[{"content":"Determines whether a specified test is true for any integer within a range of integers.","pos":[0,87]}]}],"pos":[32151,32239],"yaml":true},{"content":"The `toExclusive` parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0. For example, it would be set to 5 for integers 0 through 4.","nodes":[{"pos":[0,190],"content":"The `toExclusive` parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0. For example, it would be set to 5 for integers 0 through 4.","nodes":[{"content":"The <ph id=\"ph1\">`toExclusive`</ph> parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0.","pos":[0,130],"source":"The `toExclusive` parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0."},{"content":"For example, it would be set to 5 for integers 0 through 4.","pos":[131,190]}]}],"pos":[32250,32441],"yaml":true,"extradata":"MT"},{"content":"The first integer to pass to <code>predicate</code>.","nodes":[{"pos":[0,52],"content":"The first integer to pass to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The first integer to pass to <code>predicate</code>."}],"pos":[32638,32691],"yaml":true},{"content":"One more than the last integer to pass to <code>predicate</code>.","nodes":[{"pos":[0,65],"content":"One more than the last integer to pass to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"One more than the last integer to pass to <code>predicate</code>."}],"pos":[32757,32823],"yaml":true},{"content":"The function to evaluate for any value of the integer in the specified range.","nodes":[{"pos":[0,77],"content":"The function to evaluate for any value of the integer in the specified range.","nodes":[{"content":"The function to evaluate for any value of the integer in the specified range.","pos":[0,77]}]}],"pos":[32905,32983],"yaml":true},{"content":"`true` if <code>predicate</code> returns `true` for any integer starting from <code>fromInclusive</code> to <code>toExclusive</code> - 1.","nodes":[{"pos":[0,137],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept> returns <ph id=\"ph3\">`true`</ph> for any integer starting from <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">fromInclusive</ph><ept id=\"p2\">&lt;/code&gt;</ept> to <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph5\">toExclusive</ph><ept id=\"p3\">&lt;/code&gt;</ept> - 1.","source":"`true` if <code>predicate</code> returns `true` for any integer starting from <code>fromInclusive</code> to <code>toExclusive</code> - 1."}],"pos":[33041,33181],"yaml":true},{"content":"<code>predicate</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>predicate</code> is `null`."}],"pos":[33355,33389],"yaml":true},{"content":"<code>toExclusive</code> is less than <code>fromInclusive</code>.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;toExclusive&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;code&gt;fromInclusive&lt;/code&gt;</ph>.","source":"<code>toExclusive</code> is less than <code>fromInclusive</code>."}],"pos":[33483,33549],"yaml":true},{"content":"Determines whether an element within a collection of elements exists within a function.","nodes":[{"pos":[0,87],"content":"Determines whether an element within a collection of elements exists within a function.","nodes":[{"content":"Determines whether an element within a collection of elements exists within a function.","pos":[0,87]}]}],"pos":[35085,35173],"yaml":true},{"content":"The collection from which elements of type <code>T</code> will be drawn to pass to <code>predicate</code>.","nodes":[{"pos":[0,106],"content":"The collection from which elements of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> will be drawn to pass to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">predicate</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The collection from which elements of type <code>T</code> will be drawn to pass to <code>predicate</code>."}],"pos":[35414,35521],"yaml":true},{"content":"The function to evaluate for an element in <code>collection</code>.","nodes":[{"pos":[0,67],"content":"The function to evaluate for an element in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collection</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The function to evaluate for an element in <code>collection</code>."}],"pos":[35591,35659],"yaml":true},{"content":"The type that is contained in <code>collection</code>.","nodes":[{"pos":[0,54],"content":"The type that is contained in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collection</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type that is contained in <code>collection</code>."}],"pos":[35710,35765],"yaml":true},{"content":"`true` if and only if <code>predicate</code> returns `true` for any element of type <code>T</code> in <code>collection</code>.","nodes":[{"pos":[0,126],"content":"<ph id=\"ph1\">`true`</ph> if and only if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept> returns <ph id=\"ph3\">`true`</ph> for any element of type <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">T</ph><ept id=\"p2\">&lt;/code&gt;</ept> in <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph5\">collection</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"`true` if and only if <code>predicate</code> returns `true` for any element of type <code>T</code> in <code>collection</code>."}],"pos":[35823,35952],"yaml":true},{"content":"<code>collection</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;collection&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>collection</code> or <code>predicate</code> is `null`."}],"pos":[36129,36190],"yaml":true},{"content":"Determines whether a particular condition is valid for all integers in a specified range.","nodes":[{"pos":[0,89],"content":"Determines whether a particular condition is valid for all integers in a specified range.","nodes":[{"content":"Determines whether a particular condition is valid for all integers in a specified range.","pos":[0,89]}]}],"pos":[37687,37777],"yaml":true},{"content":"The `toExclusive` parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0. For example, it would be set to 5 for integers 0 through 4.","nodes":[{"pos":[0,190],"content":"The `toExclusive` parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0. For example, it would be set to 5 for integers 0 through 4.","nodes":[{"content":"The <ph id=\"ph1\">`toExclusive`</ph> parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0.","pos":[0,130],"source":"The `toExclusive` parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0."},{"content":"For example, it would be set to 5 for integers 0 through 4.","pos":[131,190]}]}],"pos":[37788,37979],"yaml":true,"extradata":"MT"},{"content":"The first integer to pass to <code>predicate</code>.","nodes":[{"pos":[0,52],"content":"The first integer to pass to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The first integer to pass to <code>predicate</code>."}],"pos":[38612,38665],"yaml":true},{"content":"One more than the last integer to pass to <code>predicate</code>.","nodes":[{"pos":[0,65],"content":"One more than the last integer to pass to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"One more than the last integer to pass to <code>predicate</code>."}],"pos":[38731,38797],"yaml":true},{"content":"The function to evaluate for the existence of the integers in the specified range.","nodes":[{"pos":[0,82],"content":"The function to evaluate for the existence of the integers in the specified range.","nodes":[{"content":"The function to evaluate for the existence of the integers in the specified range.","pos":[0,82]}]}],"pos":[38879,38962],"yaml":true},{"content":"`true` if <code>predicate</code> returns `true` for all integers starting from <code>fromInclusive</code> to <code>toExclusive</code> - 1.","nodes":[{"pos":[0,138],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept> returns <ph id=\"ph3\">`true`</ph> for all integers starting from <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">fromInclusive</ph><ept id=\"p2\">&lt;/code&gt;</ept> to <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph5\">toExclusive</ph><ept id=\"p3\">&lt;/code&gt;</ept> - 1.","source":"`true` if <code>predicate</code> returns `true` for all integers starting from <code>fromInclusive</code> to <code>toExclusive</code> - 1."}],"pos":[39020,39161],"yaml":true},{"content":"<code>predicate</code> is `null`.","nodes":[{"pos":[0,33],"content":"<ph id=\"ph1\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>predicate</code> is `null`."}],"pos":[39335,39369],"yaml":true},{"content":"<code>toExclusive</code> is less than <code>fromInclusive</code>.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">&lt;code&gt;toExclusive&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;code&gt;fromInclusive&lt;/code&gt;</ph>.","source":"<code>toExclusive</code> is less than <code>fromInclusive</code>."}],"pos":[39463,39529],"yaml":true},{"content":"Determines whether all the elements in a collection exist within a function.","nodes":[{"pos":[0,76],"content":"Determines whether all the elements in a collection exist within a function.","nodes":[{"content":"Determines whether all the elements in a collection exist within a function.","pos":[0,76]}]}],"pos":[41065,41142],"yaml":true},{"content":"The collection from which elements of type <code>T</code> will be drawn to pass to <code>predicate</code>.","nodes":[{"pos":[0,106],"content":"The collection from which elements of type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> will be drawn to pass to <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">predicate</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"The collection from which elements of type <code>T</code> will be drawn to pass to <code>predicate</code>."}],"pos":[41837,41944],"yaml":true},{"content":"The function to evaluate for the existence of all the elements in <code>collection</code>.","nodes":[{"pos":[0,90],"content":"The function to evaluate for the existence of all the elements in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collection</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The function to evaluate for the existence of all the elements in <code>collection</code>."}],"pos":[42014,42105],"yaml":true},{"content":"The type that is contained in <code>collection</code>.","nodes":[{"pos":[0,54],"content":"The type that is contained in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">collection</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The type that is contained in <code>collection</code>."}],"pos":[42156,42211],"yaml":true},{"content":"`true` if and only if <code>predicate</code> returns `true` for all elements of type <code>T</code> in <code>collection</code>.","nodes":[{"pos":[0,127],"content":"<ph id=\"ph1\">`true`</ph> if and only if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">predicate</ph><ept id=\"p1\">&lt;/code&gt;</ept> returns <ph id=\"ph3\">`true`</ph> for all elements of type <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">T</ph><ept id=\"p2\">&lt;/code&gt;</ept> in <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph5\">collection</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"`true` if and only if <code>predicate</code> returns `true` for all elements of type <code>T</code> in <code>collection</code>."}],"pos":[42269,42399],"yaml":true},{"content":"<code>collection</code> or <code>predicate</code> is `null`.","nodes":[{"pos":[0,60],"content":"<ph id=\"ph1\">&lt;code&gt;collection&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;predicate&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph>.","source":"<code>collection</code> or <code>predicate</code> is `null`."}],"pos":[42576,42637],"yaml":true},{"content":"Specifies an invariant contract for the enclosing method or property.","nodes":[{"pos":[0,69],"content":"Specifies an invariant contract for the enclosing method or property.","nodes":[{"content":"Specifies an invariant contract for the enclosing method or property.","pos":[0,69]}]}],"pos":[43957,44027],"yaml":true},{"content":"<xref:System.Diagnostics.Contracts.Contract.Invariant%2A> contracts are contained within a method that is identified by the <xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute> attribute; typically, the method is named `ObjectInvariant`.  \n  \n-   This contract can be specified only in a dedicated invariant method that is declared on a class. If the method is not sealed, it should refer only to protected members, not private members, so that subclasses can be sure to maintain the invariants.  \n  \n-   This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.  \n  \n-   You must use the binary rewriter for run-time enforcement of this invariant.  \n  \n-   Invariants are conditionally defined based on the presence of the `CONTRACTS FULL` symbol. During run-time checking, invariants are checked at the end of each public method. If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class. This also happens if the class is re-entered because of a call to a method on another class.","nodes":[{"pos":[0,253],"content":"<ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.Invariant%2A&gt;</ph> contracts are contained within a method that is identified by the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&gt;</ph> attribute; typically, the method is named <ph id=\"ph3\">`ObjectInvariant`</ph>.","source":"<xref:System.Diagnostics.Contracts.Contract.Invariant%2A> contracts are contained within a method that is identified by the <xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute> attribute; typically, the method is named `ObjectInvariant`."},{"pos":[263,511],"content":"This contract can be specified only in a dedicated invariant method that is declared on a class. If the method is not sealed, it should refer only to protected members, not private members, so that subclasses can be sure to maintain the invariants.","nodes":[{"content":"This contract can be specified only in a dedicated invariant method that is declared on a class. If the method is not sealed, it should refer only to protected members, not private members, so that subclasses can be sure to maintain the invariants.","pos":[0,248],"nodes":[{"content":"This contract can be specified only in a dedicated invariant method that is declared on a class.","pos":[0,96]},{"content":"If the method is not sealed, it should refer only to protected members, not private members, so that subclasses can be sure to maintain the invariants.","pos":[97,248]}]}]},{"pos":[521,646],"content":"This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.","nodes":[{"content":"This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.","pos":[0,125]}]},{"pos":[656,732],"content":"You must use the binary rewriter for run-time enforcement of this invariant.","nodes":[{"content":"You must use the binary rewriter for run-time enforcement of this invariant.","pos":[0,76]}]},{"pos":[742,1232],"content":"Invariants are conditionally defined based on the presence of the `CONTRACTS FULL` symbol. During run-time checking, invariants are checked at the end of each public method. If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class. This also happens if the class is re-entered because of a call to a method on another class.","nodes":[{"content":"Invariants are conditionally defined based on the presence of the <ph id=\"ph1\">`CONTRACTS FULL`</ph> symbol.","pos":[0,90],"source":"Invariants are conditionally defined based on the presence of the `CONTRACTS FULL` symbol."},{"content":"During run-time checking, invariants are checked at the end of each public method.","pos":[91,173]},{"content":"If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class.","pos":[174,397]},{"content":"This also happens if the class is re-entered because of a call to a method on another class.","pos":[398,490]}]}],"pos":[44038,45281],"yaml":true,"extradata":"MT"},{"content":"The conditional expression to test.","nodes":[{"pos":[0,35],"content":"The conditional expression to test.","nodes":[{"content":"The conditional expression to test.","pos":[0,35]}]}],"pos":[45500,45536],"yaml":true},{"content":"Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.","nodes":[{"pos":[0,133],"content":"Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.","nodes":[{"content":"Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.","pos":[0,133]}]}],"pos":[47047,47181],"yaml":true},{"content":"<xref:System.Diagnostics.Contracts.Contract.Invariant%2A> contracts are contained within a method that is identified by the <xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute> attribute; typically, the method is named `ObjectInvariant`.  \n  \n-   This contract can be specified only in a dedicated invariant method that is declared on a class.  \n  \n-   This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.  \n  \n-   You must use the binary rewriter for run-time enforcement of this invariant.  \n  \n-   Invariants are conditionally defined on the `CONTRACTS FULL` symbol. During run-time checking, invariants are checked at the end of each public method. If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class. This also happens if the class is re-entered because of a call to a method on another class.","nodes":[{"pos":[0,253],"content":"<ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.Invariant%2A&gt;</ph> contracts are contained within a method that is identified by the <ph id=\"ph2\">&lt;xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&gt;</ph> attribute; typically, the method is named <ph id=\"ph3\">`ObjectInvariant`</ph>.","source":"<xref:System.Diagnostics.Contracts.Contract.Invariant%2A> contracts are contained within a method that is identified by the <xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute> attribute; typically, the method is named `ObjectInvariant`."},{"pos":[263,359],"content":"This contract can be specified only in a dedicated invariant method that is declared on a class.","nodes":[{"content":"This contract can be specified only in a dedicated invariant method that is declared on a class.","pos":[0,96]}]},{"pos":[369,494],"content":"This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.","nodes":[{"content":"This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.","pos":[0,125]}]},{"pos":[504,580],"content":"You must use the binary rewriter for run-time enforcement of this invariant.","nodes":[{"content":"You must use the binary rewriter for run-time enforcement of this invariant.","pos":[0,76]}]},{"pos":[590,1058],"content":"Invariants are conditionally defined on the `CONTRACTS FULL` symbol. During run-time checking, invariants are checked at the end of each public method. If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class. This also happens if the class is re-entered because of a call to a method on another class.","nodes":[{"content":"Invariants are conditionally defined on the <ph id=\"ph1\">`CONTRACTS FULL`</ph> symbol.","pos":[0,68],"source":"Invariants are conditionally defined on the `CONTRACTS FULL` symbol."},{"content":"During run-time checking, invariants are checked at the end of each public method.","pos":[69,151]},{"content":"If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class.","pos":[152,375]},{"content":"This also happens if the class is re-entered because of a call to a method on another class.","pos":[376,468]}]}],"pos":[47192,48261],"yaml":true,"extradata":"MT"},{"content":"The conditional expression to test.","nodes":[{"pos":[0,35],"content":"The conditional expression to test.","nodes":[{"content":"The conditional expression to test.","pos":[0,35]}]}],"pos":[48500,48536],"yaml":true},{"content":"The message to display if the condition is `false`.","nodes":[{"pos":[0,51],"content":"The message to display if the condition is <ph id=\"ph1\">`false`</ph>.","source":"The message to display if the condition is `false`."}],"pos":[48603,48655],"yaml":true},{"content":"Represents values as they were at the start of a method or property.","nodes":[{"pos":[0,68],"content":"Represents values as they were at the start of a method or property.","nodes":[{"content":"Represents values as they were at the start of a method or property.","pos":[0,68]}]}],"pos":[50061,50130],"yaml":true},{"content":"This method can be used only in the conditional expression for the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A> contract.","nodes":[{"pos":[0,132],"content":"This method can be used only in the conditional expression for the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A> contract.","nodes":[{"content":"This method can be used only in the conditional expression for the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph> contract.","pos":[0,132],"source":"This method can be used only in the conditional expression for the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A> contract."}]}],"pos":[50141,50274],"yaml":true,"extradata":"MT"},{"content":"The value to represent (field or parameter).","nodes":[{"pos":[0,44],"content":"The value to represent (field or parameter).","nodes":[{"content":"The value to represent (field or parameter).","pos":[0,44]}]}],"pos":[50924,50969],"yaml":true},{"content":"The type of value.","nodes":[{"pos":[0,18],"content":"The type of value.","nodes":[{"content":"The type of value.","pos":[0,18]}]}],"pos":[51020,51039],"yaml":true},{"content":"The value of the parameter or field at the start of a method or property.","nodes":[{"pos":[0,73],"content":"The value of the parameter or field at the start of a method or property.","nodes":[{"content":"The value of the parameter or field at the start of a method or property.","pos":[0,73]}]}],"pos":[51084,51158],"yaml":true},{"content":"Specifies a precondition contract for the enclosing method or property.","nodes":[{"pos":[0,71],"content":"Specifies a precondition contract for the enclosing method or property.","nodes":[{"content":"Specifies a precondition contract for the enclosing method or property.","pos":[0,71]}]}],"pos":[52552,52624],"yaml":true},{"content":"-   This method call must be at the beginning of a method or property, before any other code.  \n  \n-   This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  \n  \n-   Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%29?displayProperty=fullName> method when backward compatibility does not force you to throw a particular exception.","nodes":[{"pos":[4,93],"content":"This method call must be at the beginning of a method or property, before any other code.","nodes":[{"content":"This method call must be at the beginning of a method or property, before any other code.","pos":[0,89]}]},{"pos":[103,235],"content":"This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.","nodes":[{"content":"This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.","pos":[0,132]}]},{"pos":[245,468],"content":"Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%29?displayProperty=fullName> method when backward compatibility does not force you to throw a particular exception.","nodes":[{"content":"Use this method instead of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%29?displayProperty=fullName&gt;</ph> method when backward compatibility does not force you to throw a particular exception.","pos":[0,223],"source":"Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%29?displayProperty=fullName> method when backward compatibility does not force you to throw a particular exception."}]}],"pos":[52635,53110],"yaml":true,"extradata":"MT"},{"content":"The conditional expression to test.","nodes":[{"pos":[0,35],"content":"The conditional expression to test.","nodes":[{"content":"The conditional expression to test.","pos":[0,35]}]}],"pos":[53328,53364],"yaml":true},{"content":"Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.","nodes":[{"pos":[0,135],"content":"Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.","nodes":[{"content":"Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.","pos":[0,135]}]}],"pos":[54868,55004],"yaml":true},{"content":"-   This method call must be at the beginning of a method or property, before any other code.  \n  \n-   This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  \n  \n-   Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%2CSystem.String%29?displayProperty=fullName> method when backward compatibility does not force you to throw a particular exception.","nodes":[{"pos":[4,93],"content":"This method call must be at the beginning of a method or property, before any other code.","nodes":[{"content":"This method call must be at the beginning of a method or property, before any other code.","pos":[0,89]}]},{"pos":[103,235],"content":"This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.","nodes":[{"content":"This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.","pos":[0,132]}]},{"pos":[245,484],"content":"Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%2CSystem.String%29?displayProperty=fullName> method when backward compatibility does not force you to throw a particular exception.","nodes":[{"content":"Use this method instead of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%2CSystem.String%29?displayProperty=fullName&gt;</ph> method when backward compatibility does not force you to throw a particular exception.","pos":[0,239],"source":"Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%2CSystem.String%29?displayProperty=fullName> method when backward compatibility does not force you to throw a particular exception."}]}],"pos":[55015,55506],"yaml":true,"extradata":"MT"},{"content":"The conditional expression to test.","nodes":[{"pos":[0,35],"content":"The conditional expression to test.","nodes":[{"content":"The conditional expression to test.","pos":[0,35]}]}],"pos":[55744,55780],"yaml":true},{"content":"The message to display if the condition is `false`.","nodes":[{"pos":[0,51],"content":"The message to display if the condition is <ph id=\"ph1\">`false`</ph>.","source":"The message to display if the condition is `false`."}],"pos":[55847,55899],"yaml":true},{"content":"Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.","nodes":[{"pos":[0,136],"content":"Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.","nodes":[{"content":"Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.","pos":[0,136]}]}],"pos":[57382,57519],"yaml":true},{"content":"> [!IMPORTANT]\n>  You must turn on run-time checking to use the <xref:System.Diagnostics.Contracts.Contract.Requires%2A> method. If run-time checking is turned off, the process will be terminated. To obtain the tools for runtime checking, see [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site.  \n  \n-   This method call must be at the beginning of a method or property, before any other code.  \n  \n-   This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  \n  \n-   Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%29?displayProperty=fullName> method when you want to throw an exception if the precondition fails.","nodes":[{"pos":[2,336],"content":"[!IMPORTANT]\n You must turn on run-time checking to use the <xref:System.Diagnostics.Contracts.Contract.Requires%2A> method. If run-time checking is turned off, the process will be terminated. To obtain the tools for runtime checking, see [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site.","leadings":["","> "],"nodes":[{"content":" You must turn on run-time checking to use the <xref:System.Diagnostics.Contracts.Contract.Requires%2A> method. If run-time checking is turned off, the process will be terminated. To obtain the tools for runtime checking, see [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site.","pos":[13,332],"nodes":[{"content":"You must turn on run-time checking to use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A&gt;</ph> method.","pos":[1,111],"source":" You must turn on run-time checking to use the <xref:System.Diagnostics.Contracts.Contract.Requires%2A> method."},{"content":"If run-time checking is turned off, the process will be terminated.","pos":[112,179]},{"content":"To obtain the tools for runtime checking, see <bpt id=\"p1\">[</bpt>Code Contracts<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site.","pos":[180,319],"source":" To obtain the tools for runtime checking, see [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site."}]}]},{"pos":[346,435],"content":"This method call must be at the beginning of a method or property, before any other code.","nodes":[{"content":"This method call must be at the beginning of a method or property, before any other code.","pos":[0,89]}]},{"pos":[445,577],"content":"This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.","nodes":[{"content":"This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.","pos":[0,132]}]},{"pos":[587,786],"content":"Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%29?displayProperty=fullName> method when you want to throw an exception if the precondition fails.","nodes":[{"content":"Use this method instead of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%29?displayProperty=fullName&gt;</ph> method when you want to throw an exception if the precondition fails.","pos":[0,199],"source":"Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%29?displayProperty=fullName> method when you want to throw an exception if the precondition fails."}]}],"pos":[57530,58326],"yaml":true,"extradata":"MT"},{"content":"The conditional expression to test.","nodes":[{"pos":[0,35],"content":"The conditional expression to test.","nodes":[{"content":"The conditional expression to test.","pos":[0,35]}]}],"pos":[58520,58556],"yaml":true},{"content":"The exception to throw if the condition is `false`.","nodes":[{"pos":[0,51],"content":"The exception to throw if the condition is <ph id=\"ph1\">`false`</ph>.","source":"The exception to throw if the condition is `false`."}],"pos":[58616,58668],"yaml":true},{"content":"Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.","nodes":[{"pos":[0,162],"content":"Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.","nodes":[{"content":"Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.","pos":[0,162]}]}],"pos":[60173,60336],"yaml":true},{"content":"-   > [!IMPORTANT]\n    >  You must turn on run-time checking to use the <xref:System.Diagnostics.Contracts.Contract.Requires%2A> method. If run-time checking is turned off, the process will be terminated. To obtain the tools for runtime checking, see [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site.  \n  \n     This method call must be at the beginning of a method or property, before any other code.  \n  \n-   This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  \n  \n-   Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%2CSystem.String%29?displayProperty=fullName> method when you want to throw an exception if the precondition fails.","nodes":[{"pos":[6,344],"content":"[!IMPORTANT]\nYou must turn on run-time checking to use the <xref:System.Diagnostics.Contracts.Contract.Requires%2A> method. If run-time checking is turned off, the process will be terminated. To obtain the tools for runtime checking, see [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site.","leadings":["","    >  "],"nodes":[{"content":"You must turn on run-time checking to use the <xref:System.Diagnostics.Contracts.Contract.Requires%2A> method. If run-time checking is turned off, the process will be terminated. To obtain the tools for runtime checking, see [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site.","pos":[13,331],"nodes":[{"content":"You must turn on run-time checking to use the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%2A&gt;</ph> method.","pos":[0,110],"source":"You must turn on run-time checking to use the <xref:System.Diagnostics.Contracts.Contract.Requires%2A> method."},{"content":"If run-time checking is turned off, the process will be terminated.","pos":[111,178]},{"content":"To obtain the tools for runtime checking, see <bpt id=\"p1\">[</bpt>Code Contracts<ept id=\"p1\">](http://go.microsoft.com/fwlink/?LinkId=152461)</ept> on the MSDN DevLabs Web site.","pos":[179,318],"source":" To obtain the tools for runtime checking, see [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site."}]}]},{"pos":[355,444],"content":"This method call must be at the beginning of a method or property, before any other code.","nodes":[{"content":"This method call must be at the beginning of a method or property, before any other code.","pos":[0,89]}]},{"pos":[454,586],"content":"This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.","nodes":[{"content":"This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.","pos":[0,132]}]},{"pos":[596,811],"content":"Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%2CSystem.String%29?displayProperty=fullName> method when you want to throw an exception if the precondition fails.","nodes":[{"content":"Use this method instead of the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%2CSystem.String%29?displayProperty=fullName&gt;</ph> method when you want to throw an exception if the precondition fails.","pos":[0,215],"source":"Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%2CSystem.String%29?displayProperty=fullName> method when you want to throw an exception if the precondition fails."}]}],"pos":[60347,61168],"yaml":true,"extradata":"MT"},{"content":"The conditional expression to test.","nodes":[{"pos":[0,35],"content":"The conditional expression to test.","nodes":[{"content":"The conditional expression to test.","pos":[0,35]}]}],"pos":[61382,61418],"yaml":true},{"content":"The message to display if the condition is `false`.","nodes":[{"pos":[0,51],"content":"The message to display if the condition is <ph id=\"ph1\">`false`</ph>.","source":"The message to display if the condition is `false`."}],"pos":[61485,61537],"yaml":true},{"content":"The exception to throw if the condition is `false`.","nodes":[{"pos":[0,51],"content":"The exception to throw if the condition is <ph id=\"ph1\">`false`</ph>.","source":"The exception to throw if the condition is `false`."}],"pos":[61597,61649],"yaml":true},{"content":"Represents the return value of a method or property.","nodes":[{"pos":[0,52],"content":"Represents the return value of a method or property.","nodes":[{"content":"Represents the return value of a method or property.","pos":[0,52]}]}],"pos":[62980,63033],"yaml":true},{"content":"This method can be used only in the conditional expression for the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A> contract.","nodes":[{"pos":[0,132],"content":"This method can be used only in the conditional expression for the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A> contract.","nodes":[{"content":"This method can be used only in the conditional expression for the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph> contract.","pos":[0,132],"source":"This method can be used only in the conditional expression for the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A> contract."}]}],"pos":[63044,63177],"yaml":true,"extradata":"MT"},{"content":"Type of return value of the enclosing method or property.","nodes":[{"pos":[0,57],"content":"Type of return value of the enclosing method or property.","nodes":[{"content":"Type of return value of the enclosing method or property.","pos":[0,57]}]}],"pos":[63817,63875],"yaml":true},{"content":"Return value of the enclosing method or property.","nodes":[{"pos":[0,49],"content":"Return value of the enclosing method or property.","nodes":[{"content":"Return value of the enclosing method or property.","pos":[0,49]}]}],"pos":[63920,63970],"yaml":true},{"content":"Represents the final (output) value of an `out` parameter when returning from a method.","nodes":[{"pos":[0,87],"content":"Represents the final (output) value of an <ph id=\"ph1\">`out`</ph> parameter when returning from a method.","source":"Represents the final (output) value of an `out` parameter when returning from a method."}],"pos":[65362,65450],"yaml":true},{"content":"This method can be used only in the conditional expression for the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A> contract. As with the <xref:System.Diagnostics.Contracts.Contract.OldValue%2A> method, you can omit the generic type parameter whenever the compiler is able to infer its type. The contract rewriter replaces the method call with the value of the `out` parameter. The <xref:System.Diagnostics.Contracts.Contract.ValueAtReturn%2A> method may appear only in postconditions. The argument to the method must be an `out` parameter or a field of a structure `out` parameter. The latter is also useful when referring to fields in the postcondition of a structure constructor.","nodes":[{"pos":[0,689],"content":"This method can be used only in the conditional expression for the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A> contract. As with the <xref:System.Diagnostics.Contracts.Contract.OldValue%2A> method, you can omit the generic type parameter whenever the compiler is able to infer its type. The contract rewriter replaces the method call with the value of the `out` parameter. The <xref:System.Diagnostics.Contracts.Contract.ValueAtReturn%2A> method may appear only in postconditions. The argument to the method must be an `out` parameter or a field of a structure `out` parameter. The latter is also useful when referring to fields in the postcondition of a structure constructor.","nodes":[{"content":"This method can be used only in the conditional expression for the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.Ensures%2A&gt;</ph> contract.","pos":[0,132],"source":"This method can be used only in the conditional expression for the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A> contract."},{"content":"As with the <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.OldValue%2A&gt;</ph> method, you can omit the generic type parameter whenever the compiler is able to infer its type.","pos":[133,298],"source":" As with the <xref:System.Diagnostics.Contracts.Contract.OldValue%2A> method, you can omit the generic type parameter whenever the compiler is able to infer its type."},{"content":"The contract rewriter replaces the method call with the value of the <ph id=\"ph1\">`out`</ph> parameter.","pos":[299,384],"source":" The contract rewriter replaces the method call with the value of the `out` parameter."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Diagnostics.Contracts.Contract.ValueAtReturn%2A&gt;</ph> method may appear only in postconditions.","pos":[385,492],"source":" The <xref:System.Diagnostics.Contracts.Contract.ValueAtReturn%2A> method may appear only in postconditions."},{"content":"The argument to the method must be an <ph id=\"ph1\">`out`</ph> parameter or a field of a structure <ph id=\"ph2\">`out`</ph> parameter.","pos":[493,589],"source":" The argument to the method must be an `out` parameter or a field of a structure `out` parameter."},{"content":"The latter is also useful when referring to fields in the postcondition of a structure constructor.","pos":[590,689]}]}],"pos":[65461,66151],"yaml":true,"extradata":"MT"},{"content":"The `out` parameter.","nodes":[{"pos":[0,20],"content":"The <ph id=\"ph1\">`out`</ph> parameter.","source":"The `out` parameter."}],"pos":[66287,66308],"yaml":true},{"content":"The type of the `out` parameter.","nodes":[{"pos":[0,32],"content":"The type of the <ph id=\"ph1\">`out`</ph> parameter.","source":"The type of the `out` parameter."}],"pos":[66359,66392],"yaml":true},{"content":"The output value of the `out` parameter.","nodes":[{"pos":[0,40],"content":"The output value of the <ph id=\"ph1\">`out`</ph> parameter.","source":"The output value of the `out` parameter."}],"pos":[66437,66478],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Diagnostics.Contracts.Contract\n  commentId: T:System.Diagnostics.Contracts.Contract\n  id: Contract\n  children:\n  - System.Diagnostics.Contracts.Contract.Assert(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.Assume(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.ContractFailed\n  - System.Diagnostics.Contracts.Contract.EndContractBlock\n  - System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})\n  - System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  - System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})\n  - System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  - System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.OldValue``1(``0)\n  - System.Diagnostics.Contracts.Contract.Requires(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)\n  - System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)\n  - System.Diagnostics.Contracts.Contract.Result``1\n  - System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\n  langs:\n  - csharp\n  name: Contract\n  nameWithType: Contract\n  fullName: System.Diagnostics.Contracts.Contract\n  type: Class\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.\n  remarks: \"Code contract classes let you specify preconditions, postconditions, and object invariants in your code. Preconditions are requirements that must be met when entering a method or property. Postconditions describe expectations at the time the method or property code exits. Object invariants describe the expected state for a class that has no condition problems. For more information about preconditions, postconditions, and object invariants, see [Code Contracts](~/docs/framework/debug-trace-profile/code-contracts.md).  \\n  \\n For tools and detailed instructions for using code contracts, see [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site.  \\n  \\n> [!IMPORTANT]\\n>  You must use a binary rewriter to insert run-time enforcement of contracts. Otherwise, contracts such as the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=fullName> method can only be tested statically and will not throw exceptions during run time if a contract is violated. You can download the binary rewriter CCRewrite from [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site. CCRewrite comes with a Visual Studio add-in that enables you to activate run-time contract enforcement from the project **Properties** page. The binary rewriter and the Visual Studio add-in do not ship with [!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)] or the Windows SDK.\"\n  syntax:\n    content: public static class Contract\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.Assert(System.Boolean)\n  commentId: M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)\n  id: Assert(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Assert(Boolean)\n  nameWithType: Contract.Assert(Boolean)\n  fullName: Contract.Assert(Boolean)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Checks for a condition; if the condition is `false`, follows the escalation policy set for the analyzer.\n  remarks: The default escalation policy is to notify the attached debugger about a contract failure or to display an **Assert** dialog box if a debugger is not attached. Optionally, the analyzer can be instructed to throw an exception.\n  syntax:\n    content: >-\n      [System.Diagnostics.Conditional(\"CONTRACTS_FULL\")]\n\n      [System.Diagnostics.Conditional(\"DEBUG\")]\n\n      public static void Assert (bool condition);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to test.\n  overload: System.Diagnostics.Contracts.Contract.Assert*\n  exceptions: []\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n  - type: System.Diagnostics.ConditionalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)\n  id: Assert(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Assert(Boolean, String)\n  nameWithType: Contract.Assert(Boolean, String)\n  fullName: Contract.Assert(Boolean, String)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Checks for a condition; if the condition is `false`, follows the escalation policy set by the analyzer and displays the specified message.\n  remarks: The default escalation policy is to notify the attached debugger about a contract failure or to display an **Assert** dialog box if a debugger is not attached. Optionally, the analyzer can be instructed to throw an exception. The `userMessage` parameter is passed to the debugger output. If `userMessage` is not a constant string literal, tools may not be able to read it.\n  syntax:\n    content: >-\n      [System.Diagnostics.Conditional(\"CONTRACTS_FULL\")]\n\n      [System.Diagnostics.Conditional(\"DEBUG\")]\n\n      public static void Assert (bool condition, string userMessage);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to test.\n    - id: userMessage\n      type: System.String\n      description: A message to display if the condition is not met.\n  overload: System.Diagnostics.Contracts.Contract.Assert*\n  exceptions: []\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n  - type: System.Diagnostics.ConditionalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.Assume(System.Boolean)\n  commentId: M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)\n  id: Assume(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Assume(Boolean)\n  nameWithType: Contract.Assume(Boolean)\n  fullName: Contract.Assume(Boolean)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Instructs code analysis tools to assume that the specified condition is `true`, even if it cannot be statically proven to always be `true`.\n  remarks: At run time, using this method is equivalent to using the <xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%29> method.\n  syntax:\n    content: >-\n      [System.Diagnostics.Conditional(\"DEBUG\")]\n\n      [System.Diagnostics.Conditional(\"CONTRACTS_FULL\")]\n\n      public static void Assume (bool condition);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to assume `true`.\n  overload: System.Diagnostics.Contracts.Contract.Assume*\n  exceptions: []\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n  - type: System.Diagnostics.ConditionalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)\n  id: Assume(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Assume(Boolean, String)\n  nameWithType: Contract.Assume(Boolean, String)\n  fullName: Contract.Assume(Boolean, String)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Instructs code analysis tools to assume that a condition is `true`, even if it cannot be statically proven to always be `true`, and displays a message if the assumption fails.\n  remarks: \"If `userMessage` is not a constant string literal, the contract may not be understood by tools.  \\n  \\n At run time, using this method is equivalent to using the <xref:System.Diagnostics.Contracts.Contract.Assert%28System.Boolean%2CSystem.String%29> method.\"\n  syntax:\n    content: >-\n      [System.Diagnostics.Conditional(\"DEBUG\")]\n\n      [System.Diagnostics.Conditional(\"CONTRACTS_FULL\")]\n\n      public static void Assume (bool condition, string userMessage);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to assume `true`.\n    - id: userMessage\n      type: System.String\n      description: The message to post if the assumption fails.\n  overload: System.Diagnostics.Contracts.Contract.Assume*\n  exceptions: []\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n  - type: System.Diagnostics.ConditionalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.ContractFailed\n  commentId: E:System.Diagnostics.Contracts.Contract.ContractFailed\n  id: ContractFailed\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: ContractFailed\n  nameWithType: Contract.ContractFailed\n  fullName: Contract.ContractFailed\n  type: Event\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Occurs when a contract fails.\n  remarks: \"The event information for this event is supplied by the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs?displayProperty=fullName> object that is passed to the event handler. This event notifies a managed application environment such as an interactive interpreter or a Web browser host that a contract has failed. Before doing so, it will raise an event that an application can handle as it sees fit. For example, if code is being run in a testing framework, you can log a test failure and then end the test.  \\n  \\n The default implementation of the <xref:System.Diagnostics.Contracts.Internal.ContractHelper.RaiseContractFailedEvent%2A> method in the .NET Framework class library is to call each handler that is registered with the <xref:System.Diagnostics.Contracts.Contract.ContractFailed> event. Exceptions thrown by handlers are ignored, but each handler can indicate whether the failure is handled by calling the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled%2A> method for the event arguments. If any handler sets the failure as handled, the method returns `null` and no further action is taken. Alternatively, handlers can call the <xref:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind%2A> method to instruct the code to unwind. In that case, an exception is thrown after all handlers have executed.\"\n  syntax:\n    content: >-\n      [add: System.Security.SecurityCritical]\n\n      [remove: System.Security.SecurityCritical]\n\n      public static event EventHandler<System.Diagnostics.Contracts.ContractFailedEventArgs> ContractFailed;\n    return:\n      type: System.EventHandler{System.Diagnostics.Contracts.ContractFailedEventArgs}\n      description: ''\n  exceptions: []\n  attributes:\n  - type: 'add: System.Security.SecurityCritical'\n  - type: 'remove: System.Security.SecurityCritical'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.EndContractBlock\n  commentId: M:System.Diagnostics.Contracts.Contract.EndContractBlock\n  id: EndContractBlock\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: EndContractBlock()\n  nameWithType: Contract.EndContractBlock()\n  fullName: Contract.EndContractBlock()\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Marks the end of the contract section when a method's contracts contain only preconditions in the `if`-`then`-`throw` form.\n  remarks: \"Most code already contains some parameter validation in the form of `if`-`then`-`throw` code. The contract tools recognize `if`-`then`-`throw` statements as preconditions when the statements appear first inside a method, and the entire set of such statements is followed by an explicit <xref:System.Diagnostics.Contracts.Contract> method call, such as a <xref:System.Diagnostics.Contracts.Contract.Requires%2A>, <xref:System.Diagnostics.Contracts.Contract.Ensures%2A>, <xref:System.Diagnostics.Contracts.Contract.EnsuresOnThrow%2A>, or <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A>.  \\n  \\n When `if`-`then`-`throw` statements appear in this form, the contract tools recognize them as legacy-require statements. The <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A> form is used only if no other contracts follow the `if`-`then`-`throw` sequences, but they should still be tagged as legacy-requires.\"\n  syntax:\n    content: >-\n      [System.Diagnostics.Conditional(\"CONTRACTS_FULL\")]\n\n      public static void EndContractBlock ();\n    parameters: []\n  overload: System.Diagnostics.Contracts.Contract.EndContractBlock*\n  exceptions: []\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)\n  commentId: M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)\n  id: Ensures(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Ensures(Boolean)\n  nameWithType: Contract.Ensures(Boolean)\n  fullName: Contract.Ensures(Boolean)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Specifies a postcondition contract for the enclosing method or property.\n  remarks: \"The `condition` parameter specifies a postcondition that is expected to be `true` when the enclosing method or property returns normally.  \\n  \\n-   This method call must be at the beginning of a method or property, before any other code.  \\n  \\n-   You must use the binary rewriter (available at [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site) for run-time enforcement of this postcondition.\"\n  example:\n  - \"The following example shows how to use the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A> method to ensure that an expected value is returned. This code example is part of a larger example provided for the <xref:System.Diagnostics.Contracts.ContractClassAttribute> class.  \\n  \\n [!code-csharp[ContractExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/contractexample/cs/program.cs#3)]\\n [!code-vb[ContractExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/contractexample/vb/program.vb#3)]\"\n  syntax:\n    content: >-\n      [System.Diagnostics.Conditional(\"CONTRACTS_FULL\")]\n\n      public static void Ensures (bool condition);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to test. The expression may include <xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\"></xref>, <xref href=\"System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\"></xref>, and <xref href=\"System.Diagnostics.Contracts.Contract.Result``1\"></xref> values.\n  overload: System.Diagnostics.Contracts.Contract.Ensures*\n  exceptions: []\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)\n  id: Ensures(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Ensures(Boolean, String)\n  nameWithType: Contract.Ensures(Boolean, String)\n  fullName: Contract.Ensures(Boolean, String)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Specifies a postcondition contract for a provided exit condition and a message to display if the condition is `false`.\n  remarks: \"The `condition` parameter specifies a postcondition that is expected to be `true` when the enclosing method or property returns normally.  \\n  \\n-   This method call must be at the beginning of a method or property, before any other code.  \\n  \\n-   This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  \\n  \\n-   You must use the binary rewriter (available at [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site) for run-time enforcement of this postcondition.  \\n  \\n-   If `userMessage` is not a constant string literal, the contract may not be understood by tools.\"\n  syntax:\n    content: >-\n      [System.Diagnostics.Conditional(\"CONTRACTS_FULL\")]\n\n      public static void Ensures (bool condition, string userMessage);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to test. The expression may include <xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\"></xref> and <xref href=\"System.Diagnostics.Contracts.Contract.Result``1\"></xref> values.\n    - id: userMessage\n      type: System.String\n      description: The message to display if the expression is not `true`.\n  overload: System.Diagnostics.Contracts.Contract.Ensures*\n  exceptions: []\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)\n  commentId: M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)\n  id: EnsuresOnThrow``1(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: EnsuresOnThrow<TException>(Boolean)\n  nameWithType: Contract.EnsuresOnThrow<TException>(Boolean)\n  fullName: Contract.EnsuresOnThrow<TException>(Boolean)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.\n  remarks: \"The `condition` parameter specifies a postcondition that is expected to be `true` when the enclosing method or property terminates abnormally and an exception of type `TException` is thrown.  \\n  \\n-   This method call must be at the beginning of a method or property, before any other code.  \\n  \\n-   This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  \\n  \\n-   You must use the binary rewriter for run-time enforcement of this postcondition.\"\n  syntax:\n    content: >-\n      [System.Diagnostics.Conditional(\"CONTRACTS_FULL\")]\n\n      public static void EnsuresOnThrow<TException> (bool condition) where TException : Exception;\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to test.\n    typeParameters:\n    - id: TException\n      description: The type of exception that invokes the postcondition check.\n  overload: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1*\n  exceptions: []\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)\n  id: EnsuresOnThrow``1(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: EnsuresOnThrow<TException>(Boolean, String)\n  nameWithType: Contract.EnsuresOnThrow<TException>(Boolean, String)\n  fullName: Contract.EnsuresOnThrow<TException>(Boolean, String)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Specifies a postcondition contract and a message to display if the condition is `false` for the enclosing method or property, based on the provided exception and condition.\n  remarks: \"The `condition` parameter specifies a postcondition that is expected to be `true` when the enclosing method or property terminates abnormally and an exception of type `TException` is thrown. The `message` parameter specifies a message to display if the condition is `false`.  \\n  \\n-   This method call must be at the beginning of a method or property, before any other code.  \\n  \\n-   This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  \\n  \\n-   You must use the binary rewriter for run-time enforcement of this postcondition.  \\n  \\n-   If `userMessage` is not a constant string literal, the contract may not be understood by tools.\"\n  syntax:\n    content: >-\n      [System.Diagnostics.Conditional(\"CONTRACTS_FULL\")]\n\n      public static void EnsuresOnThrow<TException> (bool condition, string userMessage) where TException : Exception;\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to test.\n    - id: userMessage\n      type: System.String\n      description: The message to display if the expression is `false`.\n    typeParameters:\n    - id: TException\n      description: The type of exception that invokes the postcondition check.\n  overload: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1*\n  exceptions: []\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})\n  commentId: M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})\n  id: Exists(System.Int32,System.Int32,System.Predicate{System.Int32})\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Exists(Int32, Int32, Predicate<Int32>)\n  nameWithType: Contract.Exists(Int32, Int32, Predicate<Int32>)\n  fullName: Contract.Exists(Int32, Int32, Predicate<Int32>)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Determines whether a specified test is true for any integer within a range of integers.\n  remarks: The `toExclusive` parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0. For example, it would be set to 5 for integers 0 through 4.\n  syntax:\n    content: public static bool Exists (int fromInclusive, int toExclusive, Predicate<int> predicate);\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: The first integer to pass to <code>predicate</code>.\n    - id: toExclusive\n      type: System.Int32\n      description: One more than the last integer to pass to <code>predicate</code>.\n    - id: predicate\n      type: System.Predicate{System.Int32}\n      description: The function to evaluate for any value of the integer in the specified range.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>predicate</code> returns `true` for any integer starting from <code>fromInclusive</code> to <code>toExclusive</code> - 1.'\n  overload: System.Diagnostics.Contracts.Contract.Exists*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>predicate</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>toExclusive</code> is less than <code>fromInclusive</code>.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  commentId: M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  id: Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Exists<T>(IEnumerable<T>, Predicate<T>)\n  nameWithType: Contract.Exists<T>(IEnumerable<T>, Predicate<T>)\n  fullName: Contract.Exists<T>(IEnumerable<T>, Predicate<T>)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Determines whether an element within a collection of elements exists within a function.\n  syntax:\n    content: public static bool Exists<T> (System.Collections.Generic.IEnumerable<T> collection, Predicate<T> predicate);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable`1\n      description: The collection from which elements of type <code>T</code> will be drawn to pass to <code>predicate</code>.\n    - id: predicate\n      type: System.Predicate`1\n      description: The function to evaluate for an element in <code>collection</code>.\n    typeParameters:\n    - id: T\n      description: The type that is contained in <code>collection</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if and only if <code>predicate</code> returns `true` for any element of type <code>T</code> in <code>collection</code>.'\n  overload: System.Diagnostics.Contracts.Contract.Exists``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>collection</code> or <code>predicate</code> is `null`.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})\n  commentId: M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})\n  id: ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: ForAll(Int32, Int32, Predicate<Int32>)\n  nameWithType: Contract.ForAll(Int32, Int32, Predicate<Int32>)\n  fullName: Contract.ForAll(Int32, Int32, Predicate<Int32>)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Determines whether a particular condition is valid for all integers in a specified range.\n  remarks: The `toExclusive` parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0. For example, it would be set to 5 for integers 0 through 4.\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Diagnostics.Contracts.Contract.ForAll%2A> method to determine whether an array has a null element.  \\n  \\n [!code-csharp[Contract.ForAllExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/contract.forallexample/cs/program.cs#1)]\\n [!code-vb[Contract.ForAllExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/contract.forallexample/vb/program.vb#1)]\"\n  syntax:\n    content: public static bool ForAll (int fromInclusive, int toExclusive, Predicate<int> predicate);\n    parameters:\n    - id: fromInclusive\n      type: System.Int32\n      description: The first integer to pass to <code>predicate</code>.\n    - id: toExclusive\n      type: System.Int32\n      description: One more than the last integer to pass to <code>predicate</code>.\n    - id: predicate\n      type: System.Predicate{System.Int32}\n      description: The function to evaluate for the existence of the integers in the specified range.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>predicate</code> returns `true` for all integers starting from <code>fromInclusive</code> to <code>toExclusive</code> - 1.'\n  overload: System.Diagnostics.Contracts.Contract.ForAll*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>predicate</code> is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>toExclusive</code> is less than <code>fromInclusive</code>.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  commentId: M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  id: ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: ForAll<T>(IEnumerable<T>, Predicate<T>)\n  nameWithType: Contract.ForAll<T>(IEnumerable<T>, Predicate<T>)\n  fullName: Contract.ForAll<T>(IEnumerable<T>, Predicate<T>)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Determines whether all the elements in a collection exist within a function.\n  remarks: ''\n  example:\n  - \"The following example demonstrates how to use the <xref:System.Diagnostics.Contracts.Contract.ForAll%2A> method to determine whether a collection has a null element.  \\n  \\n [!code-csharp[Contract.ForAllExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/contract.forallexample/cs/program.cs#1)]\\n [!code-vb[Contract.ForAllExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/contract.forallexample/vb/program.vb#1)]\"\n  syntax:\n    content: public static bool ForAll<T> (System.Collections.Generic.IEnumerable<T> collection, Predicate<T> predicate);\n    parameters:\n    - id: collection\n      type: System.Collections.Generic.IEnumerable`1\n      description: The collection from which elements of type <code>T</code> will be drawn to pass to <code>predicate</code>.\n    - id: predicate\n      type: System.Predicate`1\n      description: The function to evaluate for the existence of all the elements in <code>collection</code>.\n    typeParameters:\n    - id: T\n      description: The type that is contained in <code>collection</code>.\n    return:\n      type: System.Boolean\n      description: '`true` if and only if <code>predicate</code> returns `true` for all elements of type <code>T</code> in <code>collection</code>.'\n  overload: System.Diagnostics.Contracts.Contract.ForAll``1*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>collection</code> or <code>predicate</code> is `null`.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)\n  commentId: M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)\n  id: Invariant(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Invariant(Boolean)\n  nameWithType: Contract.Invariant(Boolean)\n  fullName: Contract.Invariant(Boolean)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Specifies an invariant contract for the enclosing method or property.\n  remarks: \"<xref:System.Diagnostics.Contracts.Contract.Invariant%2A> contracts are contained within a method that is identified by the <xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute> attribute; typically, the method is named `ObjectInvariant`.  \\n  \\n-   This contract can be specified only in a dedicated invariant method that is declared on a class. If the method is not sealed, it should refer only to protected members, not private members, so that subclasses can be sure to maintain the invariants.  \\n  \\n-   This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.  \\n  \\n-   You must use the binary rewriter for run-time enforcement of this invariant.  \\n  \\n-   Invariants are conditionally defined based on the presence of the `CONTRACTS FULL` symbol. During run-time checking, invariants are checked at the end of each public method. If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class. This also happens if the class is re-entered because of a call to a method on another class.\"\n  syntax:\n    content: >-\n      [System.Diagnostics.Conditional(\"CONTRACTS_FULL\")]\n\n      public static void Invariant (bool condition);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to test.\n  overload: System.Diagnostics.Contracts.Contract.Invariant*\n  exceptions: []\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)\n  id: Invariant(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Invariant(Boolean, String)\n  nameWithType: Contract.Invariant(Boolean, String)\n  fullName: Contract.Invariant(Boolean, String)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.\n  remarks: \"<xref:System.Diagnostics.Contracts.Contract.Invariant%2A> contracts are contained within a method that is identified by the <xref:System.Diagnostics.Contracts.ContractInvariantMethodAttribute> attribute; typically, the method is named `ObjectInvariant`.  \\n  \\n-   This contract can be specified only in a dedicated invariant method that is declared on a class.  \\n  \\n-   This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.  \\n  \\n-   You must use the binary rewriter for run-time enforcement of this invariant.  \\n  \\n-   Invariants are conditionally defined on the `CONTRACTS FULL` symbol. During run-time checking, invariants are checked at the end of each public method. If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class. This also happens if the class is re-entered because of a call to a method on another class.\"\n  syntax:\n    content: >-\n      [System.Diagnostics.Conditional(\"CONTRACTS_FULL\")]\n\n      public static void Invariant (bool condition, string userMessage);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to test.\n    - id: userMessage\n      type: System.String\n      description: The message to display if the condition is `false`.\n  overload: System.Diagnostics.Contracts.Contract.Invariant*\n  exceptions: []\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.OldValue``1(``0)\n  commentId: M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)\n  id: OldValue``1(``0)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: OldValue<T>(T)\n  nameWithType: Contract.OldValue<T>(T)\n  fullName: Contract.OldValue<T>(T)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Represents values as they were at the start of a method or property.\n  remarks: This method can be used only in the conditional expression for the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A> contract.\n  example:\n  - \"The following example shows the use of the <xref:System.Diagnostics.Contracts.Contract.OldValue%2A> method to ensure that a count has been updated. This code example is part of a larger example provided for the <xref:System.Diagnostics.Contracts.ContractClassAttribute> class.  \\n  \\n [!code-csharp[ContractExample#5](~/samples/snippets/csharp/VS_Snippets_CLR/contractexample/cs/program.cs#5)]\\n [!code-vb[ContractExample#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/contractexample/vb/program.vb#5)]\"\n  syntax:\n    content: public static T OldValue<T> (T value);\n    parameters:\n    - id: value\n      type: T\n      description: The value to represent (field or parameter).\n    typeParameters:\n    - id: T\n      description: The type of value.\n    return:\n      type: T\n      description: The value of the parameter or field at the start of a method or property.\n  overload: System.Diagnostics.Contracts.Contract.OldValue``1*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.Requires(System.Boolean)\n  commentId: M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)\n  id: Requires(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Requires(Boolean)\n  nameWithType: Contract.Requires(Boolean)\n  fullName: Contract.Requires(Boolean)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Specifies a precondition contract for the enclosing method or property.\n  remarks: \"-   This method call must be at the beginning of a method or property, before any other code.  \\n  \\n-   This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  \\n  \\n-   Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%29?displayProperty=fullName> method when backward compatibility does not force you to throw a particular exception.\"\n  syntax:\n    content: >-\n      [System.Diagnostics.Conditional(\"CONTRACTS_FULL\")]\n\n      public static void Requires (bool condition);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to test.\n  overload: System.Diagnostics.Contracts.Contract.Requires*\n  exceptions: []\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)\n  id: Requires(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Requires(Boolean, String)\n  nameWithType: Contract.Requires(Boolean, String)\n  fullName: Contract.Requires(Boolean, String)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.\n  remarks: \"-   This method call must be at the beginning of a method or property, before any other code.  \\n  \\n-   This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  \\n  \\n-   Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%60%601%28System.Boolean%2CSystem.String%29?displayProperty=fullName> method when backward compatibility does not force you to throw a particular exception.\"\n  syntax:\n    content: >-\n      [System.Diagnostics.Conditional(\"CONTRACTS_FULL\")]\n\n      public static void Requires (bool condition, string userMessage);\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to test.\n    - id: userMessage\n      type: System.String\n      description: The message to display if the condition is `false`.\n  overload: System.Diagnostics.Contracts.Contract.Requires*\n  exceptions: []\n  attributes:\n  - type: System.Diagnostics.ConditionalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)\n  commentId: M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)\n  id: Requires``1(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Requires<TException>(Boolean)\n  nameWithType: Contract.Requires<TException>(Boolean)\n  fullName: Contract.Requires<TException>(Boolean)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.\n  remarks: \"> [!IMPORTANT]\\n>  You must turn on run-time checking to use the <xref:System.Diagnostics.Contracts.Contract.Requires%2A> method. If run-time checking is turned off, the process will be terminated. To obtain the tools for runtime checking, see [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site.  \\n  \\n-   This method call must be at the beginning of a method or property, before any other code.  \\n  \\n-   This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  \\n  \\n-   Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%29?displayProperty=fullName> method when you want to throw an exception if the precondition fails.\"\n  syntax:\n    content: 'public static void Requires<TException> (bool condition) where TException : Exception;'\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to test.\n    typeParameters:\n    - id: TException\n      description: The exception to throw if the condition is `false`.\n  overload: System.Diagnostics.Contracts.Contract.Requires``1*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)\n  commentId: M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)\n  id: Requires``1(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Requires<TException>(Boolean, String)\n  nameWithType: Contract.Requires<TException>(Boolean, String)\n  fullName: Contract.Requires<TException>(Boolean, String)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.\n  remarks: \"-   > [!IMPORTANT]\\n    >  You must turn on run-time checking to use the <xref:System.Diagnostics.Contracts.Contract.Requires%2A> method. If run-time checking is turned off, the process will be terminated. To obtain the tools for runtime checking, see [Code Contracts](http://go.microsoft.com/fwlink/?LinkId=152461) on the MSDN DevLabs Web site.  \\n  \\n     This method call must be at the beginning of a method or property, before any other code.  \\n  \\n-   This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.  \\n  \\n-   Use this method instead of the <xref:System.Diagnostics.Contracts.Contract.Requires%28System.Boolean%2CSystem.String%29?displayProperty=fullName> method when you want to throw an exception if the precondition fails.\"\n  syntax:\n    content: 'public static void Requires<TException> (bool condition, string userMessage) where TException : Exception;'\n    parameters:\n    - id: condition\n      type: System.Boolean\n      description: The conditional expression to test.\n    - id: userMessage\n      type: System.String\n      description: The message to display if the condition is `false`.\n    typeParameters:\n    - id: TException\n      description: The exception to throw if the condition is `false`.\n  overload: System.Diagnostics.Contracts.Contract.Requires``1*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.Result``1\n  commentId: M:System.Diagnostics.Contracts.Contract.Result``1\n  id: Result``1\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: Result<T>()\n  nameWithType: Contract.Result<T>()\n  fullName: Contract.Result<T>()\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Represents the return value of a method or property.\n  remarks: This method can be used only in the conditional expression for the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A> contract.\n  example:\n  - \"The following example shows how to use the <xref:System.Diagnostics.Contracts.Contract.Result%2A> method to specify an expected return value. This code example is part of a larger example provided for the <xref:System.Diagnostics.Contracts.ContractClassAttribute> class.  \\n  \\n [!code-csharp[ContractExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/contractexample/cs/program.cs#3)]\\n [!code-vb[ContractExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/contractexample/vb/program.vb#3)]\"\n  syntax:\n    content: public static T Result<T> ();\n    parameters: []\n    typeParameters:\n    - id: T\n      description: Type of return value of the enclosing method or property.\n    return:\n      type: T\n      description: Return value of the enclosing method or property.\n  overload: System.Diagnostics.Contracts.Contract.Result``1*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\n  commentId: M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\n  id: ValueAtReturn``1(``0@)\n  parent: System.Diagnostics.Contracts.Contract\n  langs:\n  - csharp\n  name: ValueAtReturn<T>(T)\n  nameWithType: Contract.ValueAtReturn<T>(T)\n  fullName: Contract.ValueAtReturn<T>(T)\n  type: Method\n  assemblies:\n  - System.Diagnostics.Contracts\n  - mscorlib\n  - netstandard\n  namespace: System.Diagnostics.Contracts\n  summary: Represents the final (output) value of an `out` parameter when returning from a method.\n  remarks: This method can be used only in the conditional expression for the <xref:System.Diagnostics.Contracts.Contract.Ensures%2A> contract. As with the <xref:System.Diagnostics.Contracts.Contract.OldValue%2A> method, you can omit the generic type parameter whenever the compiler is able to infer its type. The contract rewriter replaces the method call with the value of the `out` parameter. The <xref:System.Diagnostics.Contracts.Contract.ValueAtReturn%2A> method may appear only in postconditions. The argument to the method must be an `out` parameter or a field of a structure `out` parameter. The latter is also useful when referring to fields in the postcondition of a structure constructor.\n  syntax:\n    content: public static T ValueAtReturn<T> (out T value);\n    parameters:\n    - id: value\n      type: T\n      description: The `out` parameter.\n    typeParameters:\n    - id: T\n      description: The type of the `out` parameter.\n    return:\n      type: T\n      description: The output value of the `out` parameter.\n  overload: System.Diagnostics.Contracts.Contract.ValueAtReturn``1*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Diagnostics.Contracts.Contract.Assert(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Assert(Boolean)\n  nameWithType: Contract.Assert(Boolean)\n  fullName: Contract.Assert(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Assert(Boolean, String)\n  nameWithType: Contract.Assert(Boolean, String)\n  fullName: Contract.Assert(Boolean, String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Diagnostics.Contracts.Contract.Assume(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Assume(Boolean)\n  nameWithType: Contract.Assume(Boolean)\n  fullName: Contract.Assume(Boolean)\n- uid: System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Assume(Boolean, String)\n  nameWithType: Contract.Assume(Boolean, String)\n  fullName: Contract.Assume(Boolean, String)\n- uid: System.Diagnostics.Contracts.Contract.ContractFailed\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: ContractFailed\n  nameWithType: Contract.ContractFailed\n  fullName: Contract.ContractFailed\n- uid: System.EventHandler`1\n  name: EventHandler<TEventArgs>\n  nameWithType: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n- uid: System.Diagnostics.Contracts.ContractFailedEventArgs\n  name: ContractFailedEventArgs\n  nameWithType: ContractFailedEventArgs\n  fullName: System.Diagnostics.Contracts.ContractFailedEventArgs\n- uid: System.EventHandler{System.Diagnostics.Contracts.ContractFailedEventArgs}\n  parent: System\n  isExternal: false\n  name: EventHandler<ContractFailedEventArgs>\n  nameWithType: EventHandler<ContractFailedEventArgs>\n  fullName: System.EventHandler<System.Diagnostics.Contracts.ContractFailedEventArgs>\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    nameWithType: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Diagnostics.Contracts.ContractFailedEventArgs\n    name: ContractFailedEventArgs\n    nameWithType: ContractFailedEventArgs\n    fullName: System.Diagnostics.Contracts.ContractFailedEventArgs\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.Contracts.Contract.EndContractBlock\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: EndContractBlock()\n  nameWithType: Contract.EndContractBlock()\n  fullName: Contract.EndContractBlock()\n- uid: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Ensures(Boolean)\n  nameWithType: Contract.Ensures(Boolean)\n  fullName: Contract.Ensures(Boolean)\n- uid: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Ensures(Boolean, String)\n  nameWithType: Contract.Ensures(Boolean, String)\n  fullName: Contract.Ensures(Boolean, String)\n- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: EnsuresOnThrow<TException>(Boolean)\n  nameWithType: Contract.EnsuresOnThrow<TException>(Boolean)\n  fullName: Contract.EnsuresOnThrow<TException>(Boolean)\n- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: EnsuresOnThrow<TException>(Boolean, String)\n  nameWithType: Contract.EnsuresOnThrow<TException>(Boolean, String)\n  fullName: Contract.EnsuresOnThrow<TException>(Boolean, String)\n- uid: System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Exists(Int32, Int32, Predicate<Int32>)\n  nameWithType: Contract.Exists(Int32, Int32, Predicate<Int32>)\n  fullName: Contract.Exists(Int32, Int32, Predicate<Int32>)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Predicate`1\n  name: Predicate<T>\n  nameWithType: Predicate<T>\n  fullName: System.Predicate<T>\n- uid: System.Predicate{System.Int32}\n  parent: System\n  isExternal: false\n  name: Predicate<Int32>\n  nameWithType: Predicate<Int32>\n  fullName: System.Predicate<System.Int32>\n  spec.csharp:\n  - uid: System.Predicate`1\n    name: Predicate\n    nameWithType: Predicate\n    fullName: System.Predicate\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Exists<T>(IEnumerable<T>, Predicate<T>)\n  nameWithType: Contract.Exists<T>(IEnumerable<T>, Predicate<T>)\n  fullName: Contract.Exists<T>(IEnumerable<T>, Predicate<T>)\n- uid: System.Collections.Generic.IEnumerable`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IEnumerable<T>\n  nameWithType: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n- uid: System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: ForAll(Int32, Int32, Predicate<Int32>)\n  nameWithType: Contract.ForAll(Int32, Int32, Predicate<Int32>)\n  fullName: Contract.ForAll(Int32, Int32, Predicate<Int32>)\n- uid: System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: ForAll<T>(IEnumerable<T>, Predicate<T>)\n  nameWithType: Contract.ForAll<T>(IEnumerable<T>, Predicate<T>)\n  fullName: Contract.ForAll<T>(IEnumerable<T>, Predicate<T>)\n- uid: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Invariant(Boolean)\n  nameWithType: Contract.Invariant(Boolean)\n  fullName: Contract.Invariant(Boolean)\n- uid: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Invariant(Boolean, String)\n  nameWithType: Contract.Invariant(Boolean, String)\n  fullName: Contract.Invariant(Boolean, String)\n- uid: System.Diagnostics.Contracts.Contract.OldValue``1(``0)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: OldValue<T>(T)\n  nameWithType: Contract.OldValue<T>(T)\n  fullName: Contract.OldValue<T>(T)\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Diagnostics.Contracts.Contract.Requires(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Requires(Boolean)\n  nameWithType: Contract.Requires(Boolean)\n  fullName: Contract.Requires(Boolean)\n- uid: System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Requires(Boolean, String)\n  nameWithType: Contract.Requires(Boolean, String)\n  fullName: Contract.Requires(Boolean, String)\n- uid: System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Requires<TException>(Boolean)\n  nameWithType: Contract.Requires<TException>(Boolean)\n  fullName: Contract.Requires<TException>(Boolean)\n- uid: System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Requires<TException>(Boolean, String)\n  nameWithType: Contract.Requires<TException>(Boolean, String)\n  fullName: Contract.Requires<TException>(Boolean, String)\n- uid: System.Diagnostics.Contracts.Contract.Result``1\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Result<T>()\n  nameWithType: Contract.Result<T>()\n  fullName: Contract.Result<T>()\n- uid: System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: ValueAtReturn<T>(T)\n  nameWithType: Contract.ValueAtReturn<T>(T)\n  fullName: Contract.ValueAtReturn<T>(T)\n- uid: System.Diagnostics.Contracts.Contract.Assert*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Assert\n  nameWithType: Contract.Assert\n  fullName: Contract.Assert\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n- uid: System.Diagnostics.Contracts.Contract.Assume*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Assume\n  nameWithType: Contract.Assume\n  fullName: Contract.Assume\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n- uid: System.Diagnostics.Contracts.Contract.EndContractBlock*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: EndContractBlock\n  nameWithType: Contract.EndContractBlock\n  fullName: Contract.EndContractBlock\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n- uid: System.Diagnostics.Contracts.Contract.Ensures*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Ensures\n  nameWithType: Contract.Ensures\n  fullName: Contract.Ensures\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: EnsuresOnThrow<TException>\n  nameWithType: Contract.EnsuresOnThrow<TException>\n  fullName: Contract.EnsuresOnThrow<TException>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n- uid: System.Diagnostics.Contracts.Contract.Exists*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Exists\n  nameWithType: Contract.Exists\n  fullName: Contract.Exists\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n- uid: System.Diagnostics.Contracts.Contract.Exists``1*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Exists<T>\n  nameWithType: Contract.Exists<T>\n  fullName: Contract.Exists<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n- uid: System.Diagnostics.Contracts.Contract.ForAll*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: ForAll\n  nameWithType: Contract.ForAll\n  fullName: Contract.ForAll\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n- uid: System.Diagnostics.Contracts.Contract.ForAll``1*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: ForAll<T>\n  nameWithType: Contract.ForAll<T>\n  fullName: Contract.ForAll<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n- uid: System.Diagnostics.Contracts.Contract.Invariant*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Invariant\n  nameWithType: Contract.Invariant\n  fullName: Contract.Invariant\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n- uid: System.Diagnostics.Contracts.Contract.OldValue``1*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: OldValue<T>\n  nameWithType: Contract.OldValue<T>\n  fullName: Contract.OldValue<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n- uid: System.Diagnostics.Contracts.Contract.Requires*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Requires\n  nameWithType: Contract.Requires\n  fullName: Contract.Requires\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n- uid: System.Diagnostics.Contracts.Contract.Requires``1*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Requires<TException>\n  nameWithType: Contract.Requires<TException>\n  fullName: Contract.Requires<TException>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n- uid: System.Diagnostics.Contracts.Contract.Result``1*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: Result<T>\n  nameWithType: Contract.Result<T>\n  fullName: Contract.Result<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n- uid: System.Diagnostics.Contracts.Contract.ValueAtReturn``1*\n  parent: System.Diagnostics.Contracts.Contract\n  isExternal: false\n  name: ValueAtReturn<T>\n  nameWithType: Contract.ValueAtReturn<T>\n  fullName: Contract.ValueAtReturn<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Diagnostics.Contracts/Contract.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}