{"nodes":[{"content":"Retrieves information about a Unicode character. This class cannot be inherited.","nodes":[{"pos":[0,80],"content":"Retrieves information about a Unicode character. This class cannot be inherited.","nodes":[{"content":"Retrieves information about a Unicode character. This class cannot be inherited.","pos":[0,80],"nodes":[{"content":"Retrieves information about a Unicode character.","pos":[0,48]},{"content":"This class cannot be inherited.","pos":[49,80]}]}]}],"pos":[1069,1150],"yaml":true},{"content":"The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) defines a number of Unicode character categories. For example, a character might be categorized as an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a paragraph separator, a math symbol, or a currency symbol. Your application can use the character category to govern string-based operations, such as parsing or extracting substring with regular expressions. The <xref:System.Globalization.UnicodeCategory> enumeration defines the possible character categories.  \n  \n You use the <xref:System.Globalization.CharUnicodeInfo> class to obtain the <xref:System.Globalization.UnicodeCategory> value for a specific character. The <xref:System.Globalization.CharUnicodeInfo> class defines methods that return the following Unicode character values:  \n  \n-   The specific category to which a character or surrogate pair belongs. The value returned is a member of the <xref:System.Globalization.UnicodeCategory> enumeration.  \n  \n-   Numeric value. Applies only to numeric characters, including fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.  \n  \n-   Digit value. Applies to numeric characters that can be combined with other numeric characters to represent a whole number in a numbering system.  \n  \n-   Decimal digit value. Applies only to characters that represent decimal digits in the decimal (base 10) system. A decimal digit can be one of ten digits, from zero through nine. These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.  \n  \n In addition, the <xref:System.Globalization.CharUnicodeInfo> class is used internally by a number of other .NET Framework types and methods that rely on character classification. These include:  \n  \n-   The <xref:System.Globalization.StringInfo> class, which works with textual elements instead of single characters in a string.  \n  \n-   The overloads of the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method, which determine the category to which a character or surrogate pair belongs.  \n  \n-   The [character classes](~/docs/standard/base-types/character-classes-in-regular-expressions.md) recognized by <xref:System.Text.RegularExpressions.Regex>, the .NET Framework's regular expression engine.  \n  \n When using this class in your applications, keep in mind the following programming considerations for using the <xref:System.Char> type. The type can be difficult to use, and strings are generally preferable for representing linguistic content.  \n  \n-   A <xref:System.Char> object does not always correspond to a single character. Although the <xref:System.Char> type represents a single 16-bit value, some characters (such as grapheme clusters and surrogate pairs) consist of two or more UTF-16 code units. For more information, see \"Char Objects and Unicode Characters\" in the <xref:System.String> class.  \n  \n-   The notion of a \"character\" is also flexible. A character is often thought of as a glyph, but many glyphs require multiple code points. For example, ä can be represented either by two code points (\"a\" plus U+0308, which is the combining diaeresis), or by a single code point (\"ä\" or U+00A4). Some languages have many letters, characters, and glyphs that require multiple code points, which can cause confusion in linguistic content representation. For example, there is a ΰ (U+03B0, Greek small letter upsilon with dialytika and tonos), but there is no equivalent capital letter. Uppercasing such a value simply retrieves the original value.","nodes":[{"pos":[0,561],"content":"The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) defines a number of Unicode character categories. For example, a character might be categorized as an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a paragraph separator, a math symbol, or a currency symbol. Your application can use the character category to govern string-based operations, such as parsing or extracting substring with regular expressions. The <xref:System.Globalization.UnicodeCategory> enumeration defines the possible character categories.","nodes":[{"content":"The <bpt id=\"p1\">[</bpt>Unicode Standard<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=37123)</ept> defines a number of Unicode character categories.","pos":[0,118],"source":"The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) defines a number of Unicode character categories."},{"content":"For example, a character might be categorized as an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a paragraph separator, a math symbol, or a currency symbol.","pos":[119,309]},{"content":"Your application can use the character category to govern string-based operations, such as parsing or extracting substring with regular expressions.","pos":[310,458]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.UnicodeCategory&gt;</ph> enumeration defines the possible character categories.","pos":[459,561],"source":" The <xref:System.Globalization.UnicodeCategory> enumeration defines the possible character categories."}]},{"pos":[568,841],"content":"You use the <xref:System.Globalization.CharUnicodeInfo> class to obtain the <xref:System.Globalization.UnicodeCategory> value for a specific character. The <xref:System.Globalization.CharUnicodeInfo> class defines methods that return the following Unicode character values:","nodes":[{"content":"You use the <xref:System.Globalization.CharUnicodeInfo> class to obtain the <xref:System.Globalization.UnicodeCategory> value for a specific character. The <xref:System.Globalization.CharUnicodeInfo> class defines methods that return the following Unicode character values:","pos":[0,273],"nodes":[{"content":"You use the <ph id=\"ph1\">&lt;xref:System.Globalization.CharUnicodeInfo&gt;</ph> class to obtain the <ph id=\"ph2\">&lt;xref:System.Globalization.UnicodeCategory&gt;</ph> value for a specific character.","pos":[0,151],"source":"You use the <xref:System.Globalization.CharUnicodeInfo> class to obtain the <xref:System.Globalization.UnicodeCategory> value for a specific character."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CharUnicodeInfo&gt;</ph> class defines methods that return the following Unicode character values:","pos":[152,273],"source":" The <xref:System.Globalization.CharUnicodeInfo> class defines methods that return the following Unicode character values:"}]}]},{"pos":[851,1015],"content":"The specific category to which a character or surrogate pair belongs. The value returned is a member of the <xref:System.Globalization.UnicodeCategory> enumeration.","nodes":[{"content":"The specific category to which a character or surrogate pair belongs. The value returned is a member of the <xref:System.Globalization.UnicodeCategory> enumeration.","pos":[0,164],"nodes":[{"content":"The specific category to which a character or surrogate pair belongs.","pos":[0,69]},{"content":"The value returned is a member of the <ph id=\"ph1\">&lt;xref:System.Globalization.UnicodeCategory&gt;</ph> enumeration.","pos":[70,164],"source":" The value returned is a member of the <xref:System.Globalization.UnicodeCategory> enumeration."}]}]},{"pos":[1025,1206],"content":"Numeric value. Applies only to numeric characters, including fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.","nodes":[{"content":"Numeric value. Applies only to numeric characters, including fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.","pos":[0,181],"nodes":[{"content":"Numeric value.","pos":[0,14]},{"content":"Applies only to numeric characters, including fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.","pos":[15,181]}]}]},{"pos":[1216,1360],"content":"Digit value. Applies to numeric characters that can be combined with other numeric characters to represent a whole number in a numbering system.","nodes":[{"content":"Digit value. Applies to numeric characters that can be combined with other numeric characters to represent a whole number in a numbering system.","pos":[0,144],"nodes":[{"content":"Digit value.","pos":[0,12]},{"content":"Applies to numeric characters that can be combined with other numeric characters to represent a whole number in a numbering system.","pos":[13,144]}]}]},{"pos":[1370,1661],"content":"Decimal digit value. Applies only to characters that represent decimal digits in the decimal (base 10) system. A decimal digit can be one of ten digits, from zero through nine. These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.","nodes":[{"content":"Decimal digit value. Applies only to characters that represent decimal digits in the decimal (base 10) system. A decimal digit can be one of ten digits, from zero through nine. These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.","pos":[0,291],"nodes":[{"content":"Decimal digit value.","pos":[0,20]},{"content":"Applies only to characters that represent decimal digits in the decimal (base 10) system.","pos":[21,110]},{"content":"A decimal digit can be one of ten digits, from zero through nine.","pos":[111,176]},{"content":"These characters are members of the <ph id=\"ph1\">&lt;xref:System.Globalization.UnicodeCategory?displayProperty=fullName&gt;</ph> category.","pos":[177,291],"source":" These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category."}]}]},{"pos":[1668,1861],"content":"In addition, the <xref:System.Globalization.CharUnicodeInfo> class is used internally by a number of other .NET Framework types and methods that rely on character classification. These include:","nodes":[{"content":"In addition, the <xref:System.Globalization.CharUnicodeInfo> class is used internally by a number of other .NET Framework types and methods that rely on character classification. These include:","pos":[0,193],"nodes":[{"content":"In addition, the <ph id=\"ph1\">&lt;xref:System.Globalization.CharUnicodeInfo&gt;</ph> class is used internally by a number of other .NET Framework types and methods that rely on character classification.","pos":[0,178],"source":"In addition, the <xref:System.Globalization.CharUnicodeInfo> class is used internally by a number of other .NET Framework types and methods that rely on character classification."},{"content":"These include:","pos":[179,193]}]}]},{"pos":[1871,1996],"content":"The <xref:System.Globalization.StringInfo> class, which works with textual elements instead of single characters in a string.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.StringInfo&gt;</ph> class, which works with textual elements instead of single characters in a string.","pos":[0,125],"source":"The <xref:System.Globalization.StringInfo> class, which works with textual elements instead of single characters in a string."}]},{"pos":[2006,2177],"content":"The overloads of the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method, which determine the category to which a character or surrogate pair belongs.","nodes":[{"content":"The overloads of the <ph id=\"ph1\">&lt;xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName&gt;</ph> method, which determine the category to which a character or surrogate pair belongs.","pos":[0,171],"source":"The overloads of the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method, which determine the category to which a character or surrogate pair belongs."}]},{"pos":[2187,2389],"content":"The <bpt id=\"p1\">[</bpt>character classes<ept id=\"p1\">](~/docs/standard/base-types/character-classes-in-regular-expressions.md)</ept> recognized by <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Regex&gt;</ph>, the .NET Framework's regular expression engine.","source":"The [character classes](~/docs/standard/base-types/character-classes-in-regular-expressions.md) recognized by <xref:System.Text.RegularExpressions.Regex>, the .NET Framework's regular expression engine."},{"pos":[2396,2640],"content":"When using this class in your applications, keep in mind the following programming considerations for using the <xref:System.Char> type. The type can be difficult to use, and strings are generally preferable for representing linguistic content.","nodes":[{"content":"When using this class in your applications, keep in mind the following programming considerations for using the <xref:System.Char> type. The type can be difficult to use, and strings are generally preferable for representing linguistic content.","pos":[0,244],"nodes":[{"content":"When using this class in your applications, keep in mind the following programming considerations for using the <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> type.","pos":[0,136],"source":"When using this class in your applications, keep in mind the following programming considerations for using the <xref:System.Char> type."},{"content":"The type can be difficult to use, and strings are generally preferable for representing linguistic content.","pos":[137,244]}]}]},{"pos":[2650,3003],"content":"A <xref:System.Char> object does not always correspond to a single character. Although the <xref:System.Char> type represents a single 16-bit value, some characters (such as grapheme clusters and surrogate pairs) consist of two or more UTF-16 code units. For more information, see \"Char Objects and Unicode Characters\" in the <xref:System.String> class.","nodes":[{"content":"A <xref:System.Char> object does not always correspond to a single character. Although the <xref:System.Char> type represents a single 16-bit value, some characters (such as grapheme clusters and surrogate pairs) consist of two or more UTF-16 code units. For more information, see \"Char Objects and Unicode Characters\" in the <xref:System.String> class.","pos":[0,353],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object does not always correspond to a single character.","pos":[0,77],"source":"A <xref:System.Char> object does not always correspond to a single character."},{"content":"Although the <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> type represents a single 16-bit value, some characters (such as grapheme clusters and surrogate pairs) consist of two or more UTF-16 code units.","pos":[78,254],"source":" Although the <xref:System.Char> type represents a single 16-bit value, some characters (such as grapheme clusters and surrogate pairs) consist of two or more UTF-16 code units."},{"content":"For more information, see \"Char Objects and Unicode Characters\" in the <ph id=\"ph1\">&lt;xref:System.String&gt;</ph> class.","pos":[255,353],"source":" For more information, see \"Char Objects and Unicode Characters\" in the <xref:System.String> class."}]}]},{"pos":[3013,3655],"content":"The notion of a \"character\" is also flexible. A character is often thought of as a glyph, but many glyphs require multiple code points. For example, ä can be represented either by two code points (\"a\" plus U+0308, which is the combining diaeresis), or by a single code point (\"ä\" or U+00A4). Some languages have many letters, characters, and glyphs that require multiple code points, which can cause confusion in linguistic content representation. For example, there is a ΰ (U+03B0, Greek small letter upsilon with dialytika and tonos), but there is no equivalent capital letter. Uppercasing such a value simply retrieves the original value.","nodes":[{"content":"The notion of a \"character\" is also flexible. A character is often thought of as a glyph, but many glyphs require multiple code points. For example, ä can be represented either by two code points (\"a\" plus U+0308, which is the combining diaeresis), or by a single code point (\"ä\" or U+00A4). Some languages have many letters, characters, and glyphs that require multiple code points, which can cause confusion in linguistic content representation. For example, there is a ΰ (U+03B0, Greek small letter upsilon with dialytika and tonos), but there is no equivalent capital letter. Uppercasing such a value simply retrieves the original value.","pos":[0,642],"nodes":[{"content":"The notion of a \"character\" is also flexible.","pos":[0,45]},{"content":"A character is often thought of as a glyph, but many glyphs require multiple code points.","pos":[46,135]},{"content":"For example, ä can be represented either by two code points (\"a\" plus U+0308, which is the combining diaeresis), or by a single code point (\"ä\" or U+00A4).","pos":[136,292]},{"content":"Some languages have many letters, characters, and glyphs that require multiple code points, which can cause confusion in linguistic content representation.","pos":[293,448]},{"content":"For example, there is a ΰ (U+03B0, Greek small letter upsilon with dialytika and tonos), but there is no equivalent capital letter.","pos":[449,580]},{"content":"Uppercasing such a value simply retrieves the original value.","pos":[581,642]}]}]}],"pos":[1161,4851],"yaml":true,"extradata":"MT"},{"content":"Gets the decimal digit value of the specified numeric character.","nodes":[{"pos":[0,64],"content":"Gets the decimal digit value of the specified numeric character.","nodes":[{"content":"Gets the decimal digit value of the specified numeric character.","pos":[0,64]}]}],"pos":[7505,7570],"yaml":true},{"content":"This method converts characters that represent decimal digits to their equivalent integral values. Decimal digits are characters in the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> category that can represent one of ten digits in the decimal (base 10) numbering system, from zero through nine. It includes characters such as U+0030 (DIGIT ZERO) through U+0039 (DIGIT NINE), U+0660 (ARABIC-INDIC DIGIT ZERO) through U+0669 (ARABIC-INDIC DIGIT NINE), U+07C0 (NKO DIGIT ZERO) through U+07C9 (NKO DIGIT NINE), and U+1040 (MYANMAR DIGIT ZERO) through U+1049 (MYANMAR DIGIT NINE).  \n  \n For more information about Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).","nodes":[{"pos":[0,592],"content":"This method converts characters that represent decimal digits to their equivalent integral values. Decimal digits are characters in the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> category that can represent one of ten digits in the decimal (base 10) numbering system, from zero through nine. It includes characters such as U+0030 (DIGIT ZERO) through U+0039 (DIGIT NINE), U+0660 (ARABIC-INDIC DIGIT ZERO) through U+0669 (ARABIC-INDIC DIGIT NINE), U+07C0 (NKO DIGIT ZERO) through U+07C9 (NKO DIGIT NINE), and U+1040 (MYANMAR DIGIT ZERO) through U+1049 (MYANMAR DIGIT NINE).","nodes":[{"content":"This method converts characters that represent decimal digits to their equivalent integral values. Decimal digits are characters in the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> category that can represent one of ten digits in the decimal (base 10) numbering system, from zero through nine. It includes characters such as U+0030 (DIGIT ZERO) through U+0039 (DIGIT NINE), U+0660 (ARABIC-INDIC DIGIT ZERO) through U+0669 (ARABIC-INDIC DIGIT NINE), U+07C0 (NKO DIGIT ZERO) through U+07C9 (NKO DIGIT NINE), and U+1040 (MYANMAR DIGIT ZERO) through U+1049 (MYANMAR DIGIT NINE).","pos":[0,592],"nodes":[{"content":"This method converts characters that represent decimal digits to their equivalent integral values.","pos":[0,98]},{"content":"Decimal digits are characters in the <ph id=\"ph1\">&lt;xref:System.Globalization.UnicodeCategory.DecimalDigitNumber&gt;</ph> category that can represent one of ten digits in the decimal (base 10) numbering system, from zero through nine.","pos":[99,311],"source":" Decimal digits are characters in the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> category that can represent one of ten digits in the decimal (base 10) numbering system, from zero through nine."},{"content":"It includes characters such as U+0030 (DIGIT ZERO) through U+0039 (DIGIT NINE), U+0660 (ARABIC-INDIC DIGIT ZERO) through U+0669 (ARABIC-INDIC DIGIT NINE), U+07C0 (NKO DIGIT ZERO) through U+07C9 (NKO DIGIT NINE), and U+1040 (MYANMAR DIGIT ZERO) through U+1049 (MYANMAR DIGIT NINE).","pos":[312,592]}]}]},{"pos":[599,719],"content":"For more information about Unicode characters, see the <bpt id=\"p1\">[</bpt>Unicode Standard<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=37123)</ept>.","source":"For more information about Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123)."}],"pos":[7581,8305],"yaml":true,"extradata":"MT"},{"content":"The Unicode character for which to get the decimal digit value.","nodes":[{"pos":[0,63],"content":"The Unicode character for which to get the decimal digit value.","nodes":[{"content":"The Unicode character for which to get the decimal digit value.","pos":[0,63]}]}],"pos":[9122,9186],"yaml":true},{"content":"The decimal digit value of the specified numeric character.  \n  \n -or-  \n  \n -1, if the specified character is not a decimal digit.","nodes":[{"pos":[0,59],"content":"The decimal digit value of the specified numeric character.","nodes":[{"content":"The decimal digit value of the specified numeric character.","pos":[0,59]}]},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,131],"content":"-1, if the specified character is not a decimal digit.","nodes":[{"content":"-1, if the specified character is not a decimal digit.","pos":[0,54]}]}],"pos":[9242,9380],"yaml":true},{"content":"Gets the decimal digit value of the numeric character at the specified index of the specified string.","nodes":[{"pos":[0,101],"content":"Gets the decimal digit value of the numeric character at the specified index of the specified string.","nodes":[{"content":"Gets the decimal digit value of the numeric character at the specified index of the specified string.","pos":[0,101]}]}],"pos":[10815,10917],"yaml":true},{"content":"This method converts characters that represent decimal digits to their equivalent integral values. Decimal digits are characters in the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> category that can represent one of ten digits in the decimal (base 10) numbering system, from zero through nine. It includes characters such as U+0030 (DIGIT ZERO) through U+0039 (DIGIT NINE), U+0660 (ARABIC-INDIC DIGIT ZERO) through U+0669 (ARABIC-INDIC DIGIT NINE), U+07C0 (NKO DIGIT ZERO) through U+07C9 (NKO DIGIT NINE), and U+1040 (MYANMAR DIGIT ZERO) through U+1049 (MYANMAR DIGIT NINE).  \n  \n For more information about Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).","nodes":[{"pos":[0,592],"content":"This method converts characters that represent decimal digits to their equivalent integral values. Decimal digits are characters in the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> category that can represent one of ten digits in the decimal (base 10) numbering system, from zero through nine. It includes characters such as U+0030 (DIGIT ZERO) through U+0039 (DIGIT NINE), U+0660 (ARABIC-INDIC DIGIT ZERO) through U+0669 (ARABIC-INDIC DIGIT NINE), U+07C0 (NKO DIGIT ZERO) through U+07C9 (NKO DIGIT NINE), and U+1040 (MYANMAR DIGIT ZERO) through U+1049 (MYANMAR DIGIT NINE).","nodes":[{"content":"This method converts characters that represent decimal digits to their equivalent integral values. Decimal digits are characters in the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> category that can represent one of ten digits in the decimal (base 10) numbering system, from zero through nine. It includes characters such as U+0030 (DIGIT ZERO) through U+0039 (DIGIT NINE), U+0660 (ARABIC-INDIC DIGIT ZERO) through U+0669 (ARABIC-INDIC DIGIT NINE), U+07C0 (NKO DIGIT ZERO) through U+07C9 (NKO DIGIT NINE), and U+1040 (MYANMAR DIGIT ZERO) through U+1049 (MYANMAR DIGIT NINE).","pos":[0,592],"nodes":[{"content":"This method converts characters that represent decimal digits to their equivalent integral values.","pos":[0,98]},{"content":"Decimal digits are characters in the <ph id=\"ph1\">&lt;xref:System.Globalization.UnicodeCategory.DecimalDigitNumber&gt;</ph> category that can represent one of ten digits in the decimal (base 10) numbering system, from zero through nine.","pos":[99,311],"source":" Decimal digits are characters in the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> category that can represent one of ten digits in the decimal (base 10) numbering system, from zero through nine."},{"content":"It includes characters such as U+0030 (DIGIT ZERO) through U+0039 (DIGIT NINE), U+0660 (ARABIC-INDIC DIGIT ZERO) through U+0669 (ARABIC-INDIC DIGIT NINE), U+07C0 (NKO DIGIT ZERO) through U+07C9 (NKO DIGIT NINE), and U+1040 (MYANMAR DIGIT ZERO) through U+1049 (MYANMAR DIGIT NINE).","pos":[312,592]}]}]},{"pos":[599,719],"content":"For more information about Unicode characters, see the <bpt id=\"p1\">[</bpt>Unicode Standard<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=37123)</ept>.","source":"For more information about Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123)."}],"pos":[10928,11652],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.String\"></xref> containing the Unicode character for which to get the decimal digit value.","nodes":[{"pos":[0,113],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the Unicode character for which to get the decimal digit value.","source":"The <xref href=\"System.String\"></xref> containing the Unicode character for which to get the decimal digit value."}],"pos":[12500,12614],"yaml":true},{"content":"The index of the Unicode character for which to get the decimal digit value.","nodes":[{"pos":[0,76],"content":"The index of the Unicode character for which to get the decimal digit value.","nodes":[{"content":"The index of the Unicode character for which to get the decimal digit value.","pos":[0,76]}]}],"pos":[12674,12751],"yaml":true},{"content":"The decimal digit value of the numeric character at the specified index of the specified string.  \n  \n -or-  \n  \n -1, if the character at the specified index of the specified string is not a decimal digit.","nodes":[{"pos":[0,96],"content":"The decimal digit value of the numeric character at the specified index of the specified string.","nodes":[{"content":"The decimal digit value of the numeric character at the specified index of the specified string.","pos":[0,96]}]},{"pos":[103,107],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[114,205],"content":"-1, if the character at the specified index of the specified string is not a decimal digit.","nodes":[{"content":"-1, if the character at the specified index of the specified string is not a decimal digit.","pos":[0,91]}]}],"pos":[12807,13019],"yaml":true},{"content":"<code>s</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>s</code> is `null`."}],"pos":[13206,13232],"yaml":true},{"content":"<code>index</code> is outside the range of valid indexes in <code>s</code>.","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is outside the range of valid indexes in <ph id=\"ph2\">&lt;code&gt;s&lt;/code&gt;</ph>.","source":"<code>index</code> is outside the range of valid indexes in <code>s</code>."}],"pos":[13346,13422],"yaml":true},{"content":"Gets the digit value of the specified numeric character.","nodes":[{"pos":[0,56],"content":"Gets the digit value of the specified numeric character.","nodes":[{"content":"Gets the digit value of the specified numeric character.","pos":[0,56]}]}],"pos":[14655,14712],"yaml":true},{"content":"Digit value is a property that applies only to numeric characters that can be used as digits. A digit is a numeric character that can be combined with other digits to represent a whole number in a numbering system.  \n  \n For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).","nodes":[{"pos":[0,214],"content":"Digit value is a property that applies only to numeric characters that can be used as digits. A digit is a numeric character that can be combined with other digits to represent a whole number in a numbering system.","nodes":[{"content":"Digit value is a property that applies only to numeric characters that can be used as digits. A digit is a numeric character that can be combined with other digits to represent a whole number in a numbering system.","pos":[0,214],"nodes":[{"content":"Digit value is a property that applies only to numeric characters that can be used as digits.","pos":[0,93]},{"content":"A digit is a numeric character that can be combined with other digits to represent a whole number in a numbering system.","pos":[94,214]}]}]},{"pos":[221,338],"content":"For more information on Unicode characters, see the <bpt id=\"p1\">[</bpt>Unicode Standard<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=37123)</ept>.","source":"For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123)."}],"pos":[14723,15066],"yaml":true,"extradata":"MT"},{"content":"The Unicode character for which to get the digit value.","nodes":[{"pos":[0,55],"content":"The Unicode character for which to get the digit value.","nodes":[{"content":"The Unicode character for which to get the digit value.","pos":[0,55]}]}],"pos":[15876,15932],"yaml":true},{"content":"The digit value of the specified numeric character.  \n  \n -or-  \n  \n -1, if the specified character is not a digit.","nodes":[{"pos":[0,51],"content":"The digit value of the specified numeric character.","nodes":[{"content":"The digit value of the specified numeric character.","pos":[0,51]}]},{"pos":[58,62],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[69,115],"content":"-1, if the specified character is not a digit.","nodes":[{"content":"-1, if the specified character is not a digit.","pos":[0,46]}]}],"pos":[15988,16110],"yaml":true},{"content":"Gets the digit value of the numeric character at the specified index of the specified string.","nodes":[{"pos":[0,93],"content":"Gets the digit value of the numeric character at the specified index of the specified string.","nodes":[{"content":"Gets the digit value of the numeric character at the specified index of the specified string.","pos":[0,93]}]}],"pos":[17496,17590],"yaml":true},{"content":"Digit value is a property that applies only to numeric characters that can be used as digits. A digit is a numeric character that can be combined with other digits to represent a whole number in a numbering system.  \n  \n For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).","nodes":[{"pos":[0,214],"content":"Digit value is a property that applies only to numeric characters that can be used as digits. A digit is a numeric character that can be combined with other digits to represent a whole number in a numbering system.","nodes":[{"content":"Digit value is a property that applies only to numeric characters that can be used as digits. A digit is a numeric character that can be combined with other digits to represent a whole number in a numbering system.","pos":[0,214],"nodes":[{"content":"Digit value is a property that applies only to numeric characters that can be used as digits.","pos":[0,93]},{"content":"A digit is a numeric character that can be combined with other digits to represent a whole number in a numbering system.","pos":[94,214]}]}]},{"pos":[221,338],"content":"For more information on Unicode characters, see the <bpt id=\"p1\">[</bpt>Unicode Standard<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=37123)</ept>.","source":"For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123)."}],"pos":[17601,17944],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.String\"></xref> containing the Unicode character for which to get the digit value.","nodes":[{"pos":[0,105],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the Unicode character for which to get the digit value.","source":"The <xref href=\"System.String\"></xref> containing the Unicode character for which to get the digit value."}],"pos":[18785,18891],"yaml":true},{"content":"The index of the Unicode character for which to get the digit value.","nodes":[{"pos":[0,68],"content":"The index of the Unicode character for which to get the digit value.","nodes":[{"content":"The index of the Unicode character for which to get the digit value.","pos":[0,68]}]}],"pos":[18951,19020],"yaml":true},{"content":"The digit value of the numeric character at the specified index of the specified string.  \n  \n -or-  \n  \n -1, if the character at the specified index of the specified string is not a digit.","nodes":[{"pos":[0,88],"content":"The digit value of the numeric character at the specified index of the specified string.","nodes":[{"content":"The digit value of the numeric character at the specified index of the specified string.","pos":[0,88]}]},{"pos":[95,99],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[106,189],"content":"-1, if the character at the specified index of the specified string is not a digit.","nodes":[{"content":"-1, if the character at the specified index of the specified string is not a digit.","pos":[0,83]}]}],"pos":[19076,19272],"yaml":true},{"content":"<code>s</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>s</code> is `null`."}],"pos":[19452,19478],"yaml":true},{"content":"<code>index</code> is outside the range of valid indexes in <code>s</code>.","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is outside the range of valid indexes in <ph id=\"ph2\">&lt;code&gt;s&lt;/code&gt;</ph>.","source":"<code>index</code> is outside the range of valid indexes in <code>s</code>."}],"pos":[19592,19668],"yaml":true},{"content":"Gets the numeric value associated with the specified character.","nodes":[{"pos":[0,63],"content":"Gets the numeric value associated with the specified character.","nodes":[{"content":"Gets the numeric value associated with the specified character.","pos":[0,63]}]}],"pos":[20938,21002],"yaml":true},{"content":"Numeric value is a Unicode character property that applies only to numeric characters, which include fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  \n  \n The <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> method assumes that `ch` corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit. However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> method returns -1 if it is passed either a high surrogate or a low surrogate of this character.  \n  \n [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]\n [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]","nodes":[{"pos":[0,339],"content":"Numeric value is a Unicode character property that applies only to numeric characters, which include fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).","nodes":[{"content":"Numeric value is a Unicode character property that applies only to numeric characters, which include fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.","pos":[0,221]},{"content":"For more information on Unicode characters, see the <bpt id=\"p1\">[</bpt>Unicode Standard<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=37123)</ept>.","pos":[222,339],"source":" For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123)."}]},{"pos":[346,1132],"content":"The <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> method assumes that `ch` corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit. However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> method returns -1 if it is passed either a high surrogate or a low surrogate of this character.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29&gt;</ph> method assumes that <ph id=\"ph2\">`ch`</ph> corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit.","pos":[0,221],"source":"The <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> method assumes that `ch` corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit."},{"content":"However, some numbers in the Unicode standard are represented by two <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> objects that form a surrogate pair.","pos":[222,345],"source":" However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair."},{"content":"For example, the Aegean numbering system consists of code points U+10107 through U+10133.","pos":[346,435]},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Char.ConvertFromUtf32%2A&gt;</ph> method to instantiate a string that represents AEGEAN NUMBER ONE.","pos":[436,571],"source":" The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE."},{"content":"As the output from the example shows, the <ph id=\"ph1\">&lt;xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29&gt;</ph> method returns -1 if it is passed either a high surrogate or a low surrogate of this character.","pos":[572,786],"source":" As the output from the example shows, the <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> method returns -1 if it is passed either a high surrogate or a low surrogate of this character."}]},{"pos":[1139,1538],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Globalization.CharUnicodeInfo.GetNumericValue#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Globalization.CharUnicodeInfo.GetNumericValue#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]\n [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]"}],"pos":[21013,22559],"yaml":true,"extradata":"MT"},{"content":"The Unicode character for which to get the numeric value.","nodes":[{"pos":[0,57],"content":"The Unicode character for which to get the numeric value.","nodes":[{"content":"The Unicode character for which to get the numeric value.","pos":[0,57]}]}],"pos":[23374,23432],"yaml":true},{"content":"The numeric value associated with the specified character.  \n  \n -or-  \n  \n -1, if the specified character is not a numeric character.","nodes":[{"pos":[0,58],"content":"The numeric value associated with the specified character.","nodes":[{"content":"The numeric value associated with the specified character.","pos":[0,58]}]},{"pos":[65,69],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[76,134],"content":"-1, if the specified character is not a numeric character.","nodes":[{"content":"-1, if the specified character is not a numeric character.","pos":[0,58]}]}],"pos":[23489,23630],"yaml":true},{"content":"Gets the numeric value associated with the character at the specified index of the specified string.","nodes":[{"pos":[0,100],"content":"Gets the numeric value associated with the character at the specified index of the specified string.","nodes":[{"content":"Gets the numeric value associated with the character at the specified index of the specified string.","pos":[0,100]}]}],"pos":[25359,25460],"yaml":true},{"content":"Numeric value is a Unicode character property that applies only to numeric characters, which include fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  \n  \n If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit, and, if it does, returns its numeric value. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents each Aegean number. As the output from the example shows, the <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> method returns the correct numeric value if it is passed the high surrogate of an Aegean number. However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.  \n  \n [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]\n [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]","nodes":[{"pos":[0,339],"content":"Numeric value is a Unicode character property that applies only to numeric characters, which include fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).","nodes":[{"content":"Numeric value is a Unicode character property that applies only to numeric characters, which include fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.","pos":[0,221]},{"content":"For more information on Unicode characters, see the <bpt id=\"p1\">[</bpt>Unicode Standard<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=37123)</ept>.","pos":[222,339],"source":" For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123)."}]},{"pos":[346,1227],"content":"If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit, and, if it does, returns its numeric value. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents each Aegean number. As the output from the example shows, the <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> method returns the correct numeric value if it is passed the high surrogate of an Aegean number. However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object at position <ph id=\"ph2\">`index`</ph> is the first character of a valid surrogate pair, the <ph id=\"ph3\">&lt;xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29&gt;</ph> method determines whether the surrogate pair forms a numeric digit, and, if it does, returns its numeric value.","pos":[0,312],"source":"If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit, and, if it does, returns its numeric value."},{"content":"For example, the Aegean numbering system consists of code points U+10107 through U+10133.","pos":[313,402]},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Char.ConvertFromUtf32%2A&gt;</ph> method to instantiate a string that represents each Aegean number.","pos":[403,539],"source":" The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents each Aegean number."},{"content":"As the output from the example shows, the <ph id=\"ph1\">&lt;xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29&gt;</ph> method returns the correct numeric value if it is passed the high surrogate of an Aegean number.","pos":[540,772],"source":" As the output from the example shows, the <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> method returns the correct numeric value if it is passed the high surrogate of an Aegean number."},{"content":"However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.","pos":[773,881]}]},{"pos":[1234,1633],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Globalization.CharUnicodeInfo.GetNumericValue#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Globalization.CharUnicodeInfo.GetNumericValue#3<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]\n [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]"}],"pos":[25471,27112],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.String\"></xref> containing the Unicode character for which to get the numeric value.","nodes":[{"pos":[0,107],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the Unicode character for which to get the numeric value.","source":"The <xref href=\"System.String\"></xref> containing the Unicode character for which to get the numeric value."}],"pos":[27958,28066],"yaml":true},{"content":"The index of the Unicode character for which to get the numeric value.","nodes":[{"pos":[0,70],"content":"The index of the Unicode character for which to get the numeric value.","nodes":[{"content":"The index of the Unicode character for which to get the numeric value.","pos":[0,70]}]}],"pos":[28126,28197],"yaml":true},{"content":"The numeric value associated with the character at the specified index of the specified string.  \n  \n -or-  \n  \n -1, if the character at the specified index of the specified string is not a numeric character.","nodes":[{"pos":[0,95],"content":"The numeric value associated with the character at the specified index of the specified string.","nodes":[{"content":"The numeric value associated with the character at the specified index of the specified string.","pos":[0,95]}]},{"pos":[102,106],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[113,208],"content":"-1, if the character at the specified index of the specified string is not a numeric character.","nodes":[{"content":"-1, if the character at the specified index of the specified string is not a numeric character.","pos":[0,95]}]}],"pos":[28254,28469],"yaml":true},{"content":"<code>s</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>s</code> is `null`."}],"pos":[28651,28677],"yaml":true},{"content":"<code>index</code> is outside the range of valid indexes in <code>s</code>.","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is outside the range of valid indexes in <ph id=\"ph2\">&lt;code&gt;s&lt;/code&gt;</ph>.","source":"<code>index</code> is outside the range of valid indexes in <code>s</code>."}],"pos":[28791,28867],"yaml":true},{"content":"Gets the Unicode category of the specified character.","nodes":[{"pos":[0,53],"content":"Gets the Unicode category of the specified character.","nodes":[{"content":"Gets the Unicode category of the specified character.","pos":[0,53]}]}],"pos":[30459,30513],"yaml":true},{"content":"The Unicode characters are divided into categories. A character's category is one of its properties. For example, a character might be an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a connector punctuation, a math symbol, or a currency symbol. The <xref:System.Globalization.UnicodeCategory> class returns the category of a Unicode character. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  \n  \n The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> method assumes that `ch` corresponds to a single linguistic character and returns its category. This means that, for surrogate pairs, it returns <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> instead of the category to which the surrogate belongs. For example, the Ugaritic alphabet occupies code points U+10380 to U+1039F. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents UGARITIC LETTER ALPA (U+10380), which is the first letter of the Ugaritic alphabet. As the output from the example shows, the <xref:System.Char.IsNumber%28System.Char%29> method returns `false` if it is passed either the high surrogate or the low surrogate of this character.  \n  \n [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]\n [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  \n  \n Note that <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method when passed a particular character as a parameter. The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method is designed to reflect the current version of the Unicode standard. In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility.","nodes":[{"pos":[0,495],"content":"The Unicode characters are divided into categories. A character's category is one of its properties. For example, a character might be an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a connector punctuation, a math symbol, or a currency symbol. The <xref:System.Globalization.UnicodeCategory> class returns the category of a Unicode character. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).","nodes":[{"content":"The Unicode characters are divided into categories.","pos":[0,51]},{"content":"A character's category is one of its properties.","pos":[52,100]},{"content":"For example, a character might be an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a connector punctuation, a math symbol, or a currency symbol.","pos":[101,278]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.UnicodeCategory&gt;</ph> class returns the category of a Unicode character.","pos":[279,377],"source":" The <xref:System.Globalization.UnicodeCategory> class returns the category of a Unicode character."},{"content":"For more information on Unicode characters, see the <bpt id=\"p1\">[</bpt>Unicode Standard<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=37123)</ept>.","pos":[378,495],"source":" For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123)."}]},{"pos":[502,1310],"content":"The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> method assumes that `ch` corresponds to a single linguistic character and returns its category. This means that, for surrogate pairs, it returns <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> instead of the category to which the surrogate belongs. For example, the Ugaritic alphabet occupies code points U+10380 to U+1039F. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents UGARITIC LETTER ALPA (U+10380), which is the first letter of the Ugaritic alphabet. As the output from the example shows, the <xref:System.Char.IsNumber%28System.Char%29> method returns `false` if it is passed either the high surrogate or the low surrogate of this character.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A&gt;</ph> method assumes that <ph id=\"ph2\">`ch`</ph> corresponds to a single linguistic character and returns its category.","pos":[0,165],"source":"The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> method assumes that `ch` corresponds to a single linguistic character and returns its category."},{"content":"This means that, for surrogate pairs, it returns <ph id=\"ph1\">&lt;xref:System.Globalization.UnicodeCategory?displayProperty=fullName&gt;</ph> instead of the category to which the surrogate belongs.","pos":[166,339],"source":" This means that, for surrogate pairs, it returns <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> instead of the category to which the surrogate belongs."},{"content":"For example, the Ugaritic alphabet occupies code points U+10380 to U+1039F.","pos":[340,415]},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Char.ConvertFromUtf32%2A&gt;</ph> method to instantiate a string that represents UGARITIC LETTER ALPA (U+10380), which is the first letter of the Ugaritic alphabet.","pos":[416,616],"source":" The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents UGARITIC LETTER ALPA (U+10380), which is the first letter of the Ugaritic alphabet."},{"content":"As the output from the example shows, the <ph id=\"ph1\">&lt;xref:System.Char.IsNumber%28System.Char%29&gt;</ph> method returns <ph id=\"ph2\">`false`</ph> if it is passed either the high surrogate or the low surrogate of this character.","pos":[617,808],"source":" As the output from the example shows, the <xref:System.Char.IsNumber%28System.Char%29> method returns `false` if it is passed either the high surrogate or the low surrogate of this character."}]},{"pos":[1317,1734],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]\n [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]"},{"pos":[1741,2574],"content":"Note that <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method when passed a particular character as a parameter. The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method is designed to reflect the current version of the Unicode standard. In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility.","nodes":[{"content":"Note that <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method when passed a particular character as a parameter. The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method is designed to reflect the current version of the Unicode standard. In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility.","pos":[0,833],"nodes":[{"content":"Note that <ph id=\"ph1\">&lt;xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName&gt;</ph> does not always return the same <ph id=\"ph2\">&lt;xref:System.Globalization.UnicodeCategory&gt;</ph> value as the <ph id=\"ph3\">&lt;xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName&gt;</ph> method when passed a particular character as a parameter.","pos":[0,313],"source":"Note that <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method when passed a particular character as a parameter."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName&gt;</ph> method is designed to reflect the current version of the Unicode standard.","pos":[314,483],"source":" The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method is designed to reflect the current version of the Unicode standard."},{"content":"In contrast, although the <ph id=\"ph1\">&lt;xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName&gt;</ph> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility.","pos":[484,833],"source":" In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility."}]}]}],"pos":[30524,33108],"yaml":true,"extradata":"MT"},{"content":"The Unicode character for which to get the Unicode category.","nodes":[{"pos":[0,60],"content":"The Unicode character for which to get the Unicode category.","nodes":[{"content":"The Unicode character for which to get the Unicode category.","pos":[0,60]}]}],"pos":[33956,34017],"yaml":true},{"content":"A <xref href=\"System.Globalization.UnicodeCategory\"></xref> value indicating the category of the specified character.","nodes":[{"pos":[0,117],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Globalization.UnicodeCategory\"&gt;&lt;/xref&gt;</ph> value indicating the category of the specified character.","source":"A <xref href=\"System.Globalization.UnicodeCategory\"></xref> value indicating the category of the specified character."}],"pos":[34097,34215],"yaml":true},{"content":"Gets the Unicode category of the character at the specified index of the specified string.","nodes":[{"pos":[0,90],"content":"Gets the Unicode category of the character at the specified index of the specified string.","nodes":[{"content":"Gets the Unicode category of the character at the specified index of the specified string.","pos":[0,90]}]}],"pos":[35965,36056],"yaml":true},{"content":"The Unicode characters are divided into categories. A character's category is one of its properties. For example, a character might be an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a connector punctuation, a math symbol, or a currency symbol. The <xref:System.Globalization.UnicodeCategory> class returns the category of a Unicode character. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  \n  \n If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> method returns the Unicode category of the surrogate pair instead of returning <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>. For example, the Ugaritic alphabet occupies code points U+10380 to U+1039F. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents UGARITIC LETTER ALPA (U+10380), which is the first letter of the Ugaritic alphabet. As the output from the example shows, the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> method returns <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> if it is passed the high surrogate of this character, which indicates that it considers the surrogate pair. However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>.  \n  \n [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]\n [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  \n  \n Note that <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method when passed a particular character as a parameter. The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method is designed to reflect the current version of the Unicode standard. In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility.","nodes":[{"pos":[0,495],"content":"The Unicode characters are divided into categories. A character's category is one of its properties. For example, a character might be an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a connector punctuation, a math symbol, or a currency symbol. The <xref:System.Globalization.UnicodeCategory> class returns the category of a Unicode character. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).","nodes":[{"content":"The Unicode characters are divided into categories.","pos":[0,51]},{"content":"A character's category is one of its properties.","pos":[52,100]},{"content":"For example, a character might be an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a connector punctuation, a math symbol, or a currency symbol.","pos":[101,278]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.UnicodeCategory&gt;</ph> class returns the category of a Unicode character.","pos":[279,377],"source":" The <xref:System.Globalization.UnicodeCategory> class returns the category of a Unicode character."},{"content":"For more information on Unicode characters, see the <bpt id=\"p1\">[</bpt>Unicode Standard<ept id=\"p1\">](http://go.microsoft.com/fwlink/?linkid=37123)</ept>.","pos":[378,495],"source":" For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123)."}]},{"pos":[502,1637],"content":"If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> method returns the Unicode category of the surrogate pair instead of returning <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>. For example, the Ugaritic alphabet occupies code points U+10380 to U+1039F. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents UGARITIC LETTER ALPA (U+10380), which is the first letter of the Ugaritic alphabet. As the output from the example shows, the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> method returns <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> if it is passed the high surrogate of this character, which indicates that it considers the surrogate pair. However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> object at position <ph id=\"ph2\">`index`</ph> is the first character of a valid surrogate pair, the <ph id=\"ph3\">&lt;xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29&gt;</ph> method returns the Unicode category of the surrogate pair instead of returning <ph id=\"ph4\">&lt;xref:System.Globalization.UnicodeCategory?displayProperty=fullName&gt;</ph>.","pos":[0,352],"source":"If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> method returns the Unicode category of the surrogate pair instead of returning <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>."},{"content":"For example, the Ugaritic alphabet occupies code points U+10380 to U+1039F.","pos":[353,428]},{"content":"The following example uses the <ph id=\"ph1\">&lt;xref:System.Char.ConvertFromUtf32%2A&gt;</ph> method to instantiate a string that represents UGARITIC LETTER ALPA (U+10380), which is the first letter of the Ugaritic alphabet.","pos":[429,629],"source":" The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents UGARITIC LETTER ALPA (U+10380), which is the first letter of the Ugaritic alphabet."},{"content":"As the output from the example shows, the <ph id=\"ph1\">&lt;xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29&gt;</ph> method returns <ph id=\"ph2\">&lt;xref:System.Globalization.UnicodeCategory?displayProperty=fullName&gt;</ph> if it is passed the high surrogate of this character, which indicates that it considers the surrogate pair.","pos":[630,960],"source":" As the output from the example shows, the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> method returns <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> if it is passed the high surrogate of this character, which indicates that it considers the surrogate pair."},{"content":"However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns <ph id=\"ph1\">&lt;xref:System.Globalization.UnicodeCategory?displayProperty=fullName&gt;</ph>.","pos":[961,1135],"source":" However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>."}]},{"pos":[1644,2061],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]\n [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]"},{"pos":[2068,2908],"content":"Note that <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method when passed a particular character as a parameter. The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method is designed to reflect the current version of the Unicode standard. In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility.","nodes":[{"content":"Note that <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method when passed a particular character as a parameter. The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method is designed to reflect the current version of the Unicode standard. In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility.","pos":[0,840],"nodes":[{"content":"Note that <ph id=\"ph1\">&lt;xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName&gt;</ph> method does not always return the same <ph id=\"ph2\">&lt;xref:System.Globalization.UnicodeCategory&gt;</ph> value as the <ph id=\"ph3\">&lt;xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName&gt;</ph> method when passed a particular character as a parameter.","pos":[0,320],"source":"Note that <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method when passed a particular character as a parameter."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName&gt;</ph> method is designed to reflect the current version of the Unicode standard.","pos":[321,490],"source":" The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method is designed to reflect the current version of the Unicode standard."},{"content":"In contrast, although the <ph id=\"ph1\">&lt;xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName&gt;</ph> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility.","pos":[491,840],"source":" In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility."}]}]}],"pos":[36067,38985],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.String\"></xref> containing the Unicode character for which to get the Unicode category.","nodes":[{"pos":[0,110],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.String\"&gt;&lt;/xref&gt;</ph> containing the Unicode character for which to get the Unicode category.","source":"The <xref href=\"System.String\"></xref> containing the Unicode character for which to get the Unicode category."}],"pos":[39864,39975],"yaml":true},{"content":"The index of the Unicode character for which to get the Unicode category.","nodes":[{"pos":[0,73],"content":"The index of the Unicode character for which to get the Unicode category.","nodes":[{"content":"The index of the Unicode character for which to get the Unicode category.","pos":[0,73]}]}],"pos":[40035,40109],"yaml":true},{"content":"A <xref href=\"System.Globalization.UnicodeCategory\"></xref> value indicating the category of the character at the specified index of the specified string.","nodes":[{"pos":[0,154],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Globalization.UnicodeCategory\"&gt;&lt;/xref&gt;</ph> value indicating the category of the character at the specified index of the specified string.","source":"A <xref href=\"System.Globalization.UnicodeCategory\"></xref> value indicating the category of the character at the specified index of the specified string."}],"pos":[40189,40344],"yaml":true},{"content":"<code>s</code> is `null`.","nodes":[{"pos":[0,25],"content":"<ph id=\"ph1\">&lt;code&gt;s&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>s</code> is `null`."}],"pos":[40529,40555],"yaml":true},{"content":"<code>index</code> is outside the range of valid indexes in <code>s</code>.","nodes":[{"pos":[0,75],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is outside the range of valid indexes in <ph id=\"ph2\">&lt;code&gt;s&lt;/code&gt;</ph>.","source":"<code>index</code> is outside the range of valid indexes in <code>s</code>."}],"pos":[40669,40745],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Globalization.CharUnicodeInfo\n  commentId: T:System.Globalization.CharUnicodeInfo\n  id: CharUnicodeInfo\n  children:\n  - System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)\n  - System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)\n  - System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)\n  - System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)\n  - System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)\n  - System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)\n  - System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)\n  - System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)\n  langs:\n  - csharp\n  name: CharUnicodeInfo\n  nameWithType: CharUnicodeInfo\n  fullName: System.Globalization.CharUnicodeInfo\n  type: Class\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Retrieves information about a Unicode character. This class cannot be inherited.\n  remarks: \"The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) defines a number of Unicode character categories. For example, a character might be categorized as an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a paragraph separator, a math symbol, or a currency symbol. Your application can use the character category to govern string-based operations, such as parsing or extracting substring with regular expressions. The <xref:System.Globalization.UnicodeCategory> enumeration defines the possible character categories.  \\n  \\n You use the <xref:System.Globalization.CharUnicodeInfo> class to obtain the <xref:System.Globalization.UnicodeCategory> value for a specific character. The <xref:System.Globalization.CharUnicodeInfo> class defines methods that return the following Unicode character values:  \\n  \\n-   The specific category to which a character or surrogate pair belongs. The value returned is a member of the <xref:System.Globalization.UnicodeCategory> enumeration.  \\n  \\n-   Numeric value. Applies only to numeric characters, including fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.  \\n  \\n-   Digit value. Applies to numeric characters that can be combined with other numeric characters to represent a whole number in a numbering system.  \\n  \\n-   Decimal digit value. Applies only to characters that represent decimal digits in the decimal (base 10) system. A decimal digit can be one of ten digits, from zero through nine. These characters are members of the <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> category.  \\n  \\n In addition, the <xref:System.Globalization.CharUnicodeInfo> class is used internally by a number of other .NET Framework types and methods that rely on character classification. These include:  \\n  \\n-   The <xref:System.Globalization.StringInfo> class, which works with textual elements instead of single characters in a string.  \\n  \\n-   The overloads of the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method, which determine the category to which a character or surrogate pair belongs.  \\n  \\n-   The [character classes](~/docs/standard/base-types/character-classes-in-regular-expressions.md) recognized by <xref:System.Text.RegularExpressions.Regex>, the .NET Framework's regular expression engine.  \\n  \\n When using this class in your applications, keep in mind the following programming considerations for using the <xref:System.Char> type. The type can be difficult to use, and strings are generally preferable for representing linguistic content.  \\n  \\n-   A <xref:System.Char> object does not always correspond to a single character. Although the <xref:System.Char> type represents a single 16-bit value, some characters (such as grapheme clusters and surrogate pairs) consist of two or more UTF-16 code units. For more information, see \\\"Char Objects and Unicode Characters\\\" in the <xref:System.String> class.  \\n  \\n-   The notion of a \\\"character\\\" is also flexible. A character is often thought of as a glyph, but many glyphs require multiple code points. For example, ä can be represented either by two code points (\\\"a\\\" plus U+0308, which is the combining diaeresis), or by a single code point (\\\"ä\\\" or U+00A4). Some languages have many letters, characters, and glyphs that require multiple code points, which can cause confusion in linguistic content representation. For example, there is a ΰ (U+03B0, Greek small letter upsilon with dialytika and tonos), but there is no equivalent capital letter. Uppercasing such a value simply retrieves the original value.\"\n  example:\n  - \"The following code example shows the values returned by each method for different types of characters.  \\n  \\n [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]\\n [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]\\n [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]\"\n  syntax:\n    content: public static class CharUnicodeInfo\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CharUnicodeInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)\n  commentId: M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)\n  id: GetDecimalDigitValue(System.Char)\n  parent: System.Globalization.CharUnicodeInfo\n  langs:\n  - csharp\n  name: GetDecimalDigitValue(Char)\n  nameWithType: CharUnicodeInfo.GetDecimalDigitValue(Char)\n  fullName: CharUnicodeInfo.GetDecimalDigitValue(Char)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the decimal digit value of the specified numeric character.\n  remarks: \"This method converts characters that represent decimal digits to their equivalent integral values. Decimal digits are characters in the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> category that can represent one of ten digits in the decimal (base 10) numbering system, from zero through nine. It includes characters such as U+0030 (DIGIT ZERO) through U+0039 (DIGIT NINE), U+0660 (ARABIC-INDIC DIGIT ZERO) through U+0669 (ARABIC-INDIC DIGIT NINE), U+07C0 (NKO DIGIT ZERO) through U+07C9 (NKO DIGIT NINE), and U+1040 (MYANMAR DIGIT ZERO) through U+1049 (MYANMAR DIGIT NINE).  \\n  \\n For more information about Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).\"\n  example:\n  - \"The following code example shows the values returned by each method for different types of characters.  \\n  \\n [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]\\n [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]\\n [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]\"\n  syntax:\n    content: public static int GetDecimalDigitValue (char ch);\n    parameters:\n    - id: ch\n      type: System.Char\n      description: The Unicode character for which to get the decimal digit value.\n    return:\n      type: System.Int32\n      description: \"The decimal digit value of the specified numeric character.  \\n  \\n -or-  \\n  \\n -1, if the specified character is not a decimal digit.\"\n  overload: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CharUnicodeInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)\n  commentId: M:System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)\n  id: GetDecimalDigitValue(System.String,System.Int32)\n  parent: System.Globalization.CharUnicodeInfo\n  langs:\n  - csharp\n  name: GetDecimalDigitValue(String, Int32)\n  nameWithType: CharUnicodeInfo.GetDecimalDigitValue(String, Int32)\n  fullName: CharUnicodeInfo.GetDecimalDigitValue(String, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the decimal digit value of the numeric character at the specified index of the specified string.\n  remarks: \"This method converts characters that represent decimal digits to their equivalent integral values. Decimal digits are characters in the <xref:System.Globalization.UnicodeCategory.DecimalDigitNumber> category that can represent one of ten digits in the decimal (base 10) numbering system, from zero through nine. It includes characters such as U+0030 (DIGIT ZERO) through U+0039 (DIGIT NINE), U+0660 (ARABIC-INDIC DIGIT ZERO) through U+0669 (ARABIC-INDIC DIGIT NINE), U+07C0 (NKO DIGIT ZERO) through U+07C9 (NKO DIGIT NINE), and U+1040 (MYANMAR DIGIT ZERO) through U+1049 (MYANMAR DIGIT NINE).  \\n  \\n For more information about Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).\"\n  example:\n  - \"The following code example shows the values returned by each method for different types of characters.  \\n  \\n [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]\\n [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]\\n [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]\"\n  syntax:\n    content: public static int GetDecimalDigitValue (string s, int index);\n    parameters:\n    - id: s\n      type: System.String\n      description: The <xref href=\"System.String\"></xref> containing the Unicode character for which to get the decimal digit value.\n    - id: index\n      type: System.Int32\n      description: The index of the Unicode character for which to get the decimal digit value.\n    return:\n      type: System.Int32\n      description: \"The decimal digit value of the numeric character at the specified index of the specified string.  \\n  \\n -or-  \\n  \\n -1, if the character at the specified index of the specified string is not a decimal digit.\"\n  overload: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>s</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is outside the range of valid indexes in <code>s</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CharUnicodeInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)\n  commentId: M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)\n  id: GetDigitValue(System.Char)\n  parent: System.Globalization.CharUnicodeInfo\n  langs:\n  - csharp\n  name: GetDigitValue(Char)\n  nameWithType: CharUnicodeInfo.GetDigitValue(Char)\n  fullName: CharUnicodeInfo.GetDigitValue(Char)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the digit value of the specified numeric character.\n  remarks: \"Digit value is a property that applies only to numeric characters that can be used as digits. A digit is a numeric character that can be combined with other digits to represent a whole number in a numbering system.  \\n  \\n For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).\"\n  example:\n  - \"The following code example shows the values returned by each method for different types of characters.  \\n  \\n [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]\\n [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]\\n [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]\"\n  syntax:\n    content: public static int GetDigitValue (char ch);\n    parameters:\n    - id: ch\n      type: System.Char\n      description: The Unicode character for which to get the digit value.\n    return:\n      type: System.Int32\n      description: \"The digit value of the specified numeric character.  \\n  \\n -or-  \\n  \\n -1, if the specified character is not a digit.\"\n  overload: System.Globalization.CharUnicodeInfo.GetDigitValue*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CharUnicodeInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)\n  commentId: M:System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)\n  id: GetDigitValue(System.String,System.Int32)\n  parent: System.Globalization.CharUnicodeInfo\n  langs:\n  - csharp\n  name: GetDigitValue(String, Int32)\n  nameWithType: CharUnicodeInfo.GetDigitValue(String, Int32)\n  fullName: CharUnicodeInfo.GetDigitValue(String, Int32)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the digit value of the numeric character at the specified index of the specified string.\n  remarks: \"Digit value is a property that applies only to numeric characters that can be used as digits. A digit is a numeric character that can be combined with other digits to represent a whole number in a numbering system.  \\n  \\n For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).\"\n  example:\n  - \"The following code example shows the values returned by each method for different types of characters.  \\n  \\n [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]\\n [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]\\n [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]\"\n  syntax:\n    content: public static int GetDigitValue (string s, int index);\n    parameters:\n    - id: s\n      type: System.String\n      description: The <xref href=\"System.String\"></xref> containing the Unicode character for which to get the digit value.\n    - id: index\n      type: System.Int32\n      description: The index of the Unicode character for which to get the digit value.\n    return:\n      type: System.Int32\n      description: \"The digit value of the numeric character at the specified index of the specified string.  \\n  \\n -or-  \\n  \\n -1, if the character at the specified index of the specified string is not a digit.\"\n  overload: System.Globalization.CharUnicodeInfo.GetDigitValue*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>s</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is outside the range of valid indexes in <code>s</code>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CharUnicodeInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)\n  commentId: M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)\n  id: GetNumericValue(System.Char)\n  parent: System.Globalization.CharUnicodeInfo\n  langs:\n  - csharp\n  name: GetNumericValue(Char)\n  nameWithType: CharUnicodeInfo.GetNumericValue(Char)\n  fullName: CharUnicodeInfo.GetNumericValue(Char)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the numeric value associated with the specified character.\n  remarks: \"Numeric value is a Unicode character property that applies only to numeric characters, which include fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  \\n  \\n The <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> method assumes that `ch` corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit. However, some numbers in the Unicode standard are represented by two <xref:System.Char> objects that form a surrogate pair. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.Char%29> method returns -1 if it is passed either a high surrogate or a low surrogate of this character.  \\n  \\n [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#2)]\\n [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#2)]\"\n  example:\n  - \"The following code example shows the values returned by each method for different types of characters.  \\n  \\n [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]\\n [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]\\n [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]\"\n  syntax:\n    content: public static double GetNumericValue (char ch);\n    parameters:\n    - id: ch\n      type: System.Char\n      description: The Unicode character for which to get the numeric value.\n    return:\n      type: System.Double\n      description: \"The numeric value associated with the specified character.  \\n  \\n -or-  \\n  \\n -1, if the specified character is not a numeric character.\"\n  overload: System.Globalization.CharUnicodeInfo.GetNumericValue*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CharUnicodeInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)\n  commentId: M:System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)\n  id: GetNumericValue(System.String,System.Int32)\n  parent: System.Globalization.CharUnicodeInfo\n  langs:\n  - csharp\n  name: GetNumericValue(String, Int32)\n  nameWithType: CharUnicodeInfo.GetNumericValue(String, Int32)\n  fullName: CharUnicodeInfo.GetNumericValue(String, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the numeric value associated with the character at the specified index of the specified string.\n  remarks: \"Numeric value is a Unicode character property that applies only to numeric characters, which include fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  \\n  \\n If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> method determines whether the surrogate pair forms a numeric digit, and, if it does, returns its numeric value. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents each Aegean number. As the output from the example shows, the <xref:System.Globalization.CharUnicodeInfo.GetNumericValue%28System.String%2CSystem.Int32%29> method returns the correct numeric value if it is passed the high surrogate of an Aegean number. However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.  \\n  \\n [!code-csharp[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/cs/getnumericvalue1.cs#3)]\\n [!code-vb[System.Globalization.CharUnicodeInfo.GetNumericValue#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getnumericvalue/vb/getnumericvalue1.vb#3)]\"\n  example:\n  - \"The following code example shows the values returned by each method for different types of characters.  \\n  \\n [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]\\n [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]\\n [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]\"\n  syntax:\n    content: public static double GetNumericValue (string s, int index);\n    parameters:\n    - id: s\n      type: System.String\n      description: The <xref href=\"System.String\"></xref> containing the Unicode character for which to get the numeric value.\n    - id: index\n      type: System.Int32\n      description: The index of the Unicode character for which to get the numeric value.\n    return:\n      type: System.Double\n      description: \"The numeric value associated with the character at the specified index of the specified string.  \\n  \\n -or-  \\n  \\n -1, if the character at the specified index of the specified string is not a numeric character.\"\n  overload: System.Globalization.CharUnicodeInfo.GetNumericValue*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>s</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is outside the range of valid indexes in <code>s</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CharUnicodeInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)\n  commentId: M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)\n  id: GetUnicodeCategory(System.Char)\n  parent: System.Globalization.CharUnicodeInfo\n  langs:\n  - csharp\n  name: GetUnicodeCategory(Char)\n  nameWithType: CharUnicodeInfo.GetUnicodeCategory(Char)\n  fullName: CharUnicodeInfo.GetUnicodeCategory(Char)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the Unicode category of the specified character.\n  remarks: \"The Unicode characters are divided into categories. A character's category is one of its properties. For example, a character might be an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a connector punctuation, a math symbol, or a currency symbol. The <xref:System.Globalization.UnicodeCategory> class returns the category of a Unicode character. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  \\n  \\n The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A> method assumes that `ch` corresponds to a single linguistic character and returns its category. This means that, for surrogate pairs, it returns <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> instead of the category to which the surrogate belongs. For example, the Ugaritic alphabet occupies code points U+10380 to U+1039F. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents UGARITIC LETTER ALPA (U+10380), which is the first letter of the Ugaritic alphabet. As the output from the example shows, the <xref:System.Char.IsNumber%28System.Char%29> method returns `false` if it is passed either the high surrogate or the low surrogate of this character.  \\n  \\n [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#1)]\\n [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#1)]  \\n  \\n Note that <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method when passed a particular character as a parameter. The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method is designed to reflect the current version of the Unicode standard. In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility.\"\n  example:\n  - \"The following code example shows the values returned by each method for different types of characters.  \\n  \\n [!code-cpp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CPP/charunicodeinfo_char.cpp#1)]\\n [!code-csharp[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/CS/charunicodeinfo_char.cs#1)]\\n [!code-vb[System.Globalization.CharUnicodeInfo_Char#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_Char/VB/charunicodeinfo_char.vb#1)]\"\n  syntax:\n    content: public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);\n    parameters:\n    - id: ch\n      type: System.Char\n      description: The Unicode character for which to get the Unicode category.\n    return:\n      type: System.Globalization.UnicodeCategory\n      description: A <xref href=\"System.Globalization.UnicodeCategory\"></xref> value indicating the category of the specified character.\n  overload: System.Globalization.CharUnicodeInfo.GetUnicodeCategory*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CharUnicodeInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)\n  commentId: M:System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)\n  id: GetUnicodeCategory(System.String,System.Int32)\n  parent: System.Globalization.CharUnicodeInfo\n  langs:\n  - csharp\n  name: GetUnicodeCategory(String, Int32)\n  nameWithType: CharUnicodeInfo.GetUnicodeCategory(String, Int32)\n  fullName: CharUnicodeInfo.GetUnicodeCategory(String, Int32)\n  type: Method\n  assemblies:\n  - System.Globalization\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Globalization\n  summary: Gets the Unicode category of the character at the specified index of the specified string.\n  remarks: \"The Unicode characters are divided into categories. A character's category is one of its properties. For example, a character might be an uppercase letter, a lowercase letter, a decimal digit number, a letter number, a connector punctuation, a math symbol, or a currency symbol. The <xref:System.Globalization.UnicodeCategory> class returns the category of a Unicode character. For more information on Unicode characters, see the [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123).  \\n  \\n If the <xref:System.Char> object at position `index` is the first character of a valid surrogate pair, the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> method returns the Unicode category of the surrogate pair instead of returning <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>. For example, the Ugaritic alphabet occupies code points U+10380 to U+1039F. The following example uses the <xref:System.Char.ConvertFromUtf32%2A> method to instantiate a string that represents UGARITIC LETTER ALPA (U+10380), which is the first letter of the Ugaritic alphabet. As the output from the example shows, the <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%28System.String%2CSystem.Int32%29> method returns <xref:System.Globalization.UnicodeCategory?displayProperty=fullName> if it is passed the high surrogate of this character, which indicates that it considers the surrogate pair. However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns <xref:System.Globalization.UnicodeCategory?displayProperty=fullName>.  \\n  \\n [!code-csharp[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/cs/getunicodecategory1.cs#2)]\\n [!code-vb[System.Globalization.CharUnicodeInfo.GetUnicodeCategory#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.charunicodeinfo.getunicodecategory/vb/getunicodecategory1.vb#2)]  \\n  \\n Note that <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method does not always return the same <xref:System.Globalization.UnicodeCategory> value as the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method when passed a particular character as a parameter. The <xref:System.Globalization.CharUnicodeInfo.GetUnicodeCategory%2A?displayProperty=fullName> method is designed to reflect the current version of the Unicode standard. In contrast, although the <xref:System.Char.GetUnicodeCategory%2A?displayProperty=fullName> method usually reflects the current version of the Unicode standard, it might return a character's category based on a previous version of the standard, or it might return a category that differs from the current standard to preserve backward compatibility.\"\n  example:\n  - \"The following code example shows the values returned by each method for different types of characters.  \\n  \\n [!code-cpp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CPP/charunicodeinfo_string.cpp#1)]\\n [!code-csharp[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/CS/charunicodeinfo_string.cs#1)]\\n [!code-vb[System.Globalization.CharUnicodeInfo_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CharUnicodeInfo_String/VB/charunicodeinfo_string.vb#1)]\"\n  syntax:\n    content: public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);\n    parameters:\n    - id: s\n      type: System.String\n      description: The <xref href=\"System.String\"></xref> containing the Unicode character for which to get the Unicode category.\n    - id: index\n      type: System.Int32\n      description: The index of the Unicode character for which to get the Unicode category.\n    return:\n      type: System.Globalization.UnicodeCategory\n      description: A <xref href=\"System.Globalization.UnicodeCategory\"></xref> value indicating the category of the character at the specified index of the specified string.\n  overload: System.Globalization.CharUnicodeInfo.GetUnicodeCategory*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>s</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>index</code> is outside the range of valid indexes in <code>s</code>.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CharUnicodeInfo.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.Char)\n  parent: System.Globalization.CharUnicodeInfo\n  isExternal: false\n  name: GetDecimalDigitValue(Char)\n  nameWithType: CharUnicodeInfo.GetDecimalDigitValue(Char)\n  fullName: CharUnicodeInfo.GetDecimalDigitValue(Char)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue(System.String,System.Int32)\n  parent: System.Globalization.CharUnicodeInfo\n  isExternal: false\n  name: GetDecimalDigitValue(String, Int32)\n  nameWithType: CharUnicodeInfo.GetDecimalDigitValue(String, Int32)\n  fullName: CharUnicodeInfo.GetDecimalDigitValue(String, Int32)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Globalization.CharUnicodeInfo.GetDigitValue(System.Char)\n  parent: System.Globalization.CharUnicodeInfo\n  isExternal: false\n  name: GetDigitValue(Char)\n  nameWithType: CharUnicodeInfo.GetDigitValue(Char)\n  fullName: CharUnicodeInfo.GetDigitValue(Char)\n- uid: System.Globalization.CharUnicodeInfo.GetDigitValue(System.String,System.Int32)\n  parent: System.Globalization.CharUnicodeInfo\n  isExternal: false\n  name: GetDigitValue(String, Int32)\n  nameWithType: CharUnicodeInfo.GetDigitValue(String, Int32)\n  fullName: CharUnicodeInfo.GetDigitValue(String, Int32)\n- uid: System.Globalization.CharUnicodeInfo.GetNumericValue(System.Char)\n  parent: System.Globalization.CharUnicodeInfo\n  isExternal: false\n  name: GetNumericValue(Char)\n  nameWithType: CharUnicodeInfo.GetNumericValue(Char)\n  fullName: CharUnicodeInfo.GetNumericValue(Char)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  nameWithType: Double\n  fullName: System.Double\n- uid: System.Globalization.CharUnicodeInfo.GetNumericValue(System.String,System.Int32)\n  parent: System.Globalization.CharUnicodeInfo\n  isExternal: false\n  name: GetNumericValue(String, Int32)\n  nameWithType: CharUnicodeInfo.GetNumericValue(String, Int32)\n  fullName: CharUnicodeInfo.GetNumericValue(String, Int32)\n- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.Char)\n  parent: System.Globalization.CharUnicodeInfo\n  isExternal: false\n  name: GetUnicodeCategory(Char)\n  nameWithType: CharUnicodeInfo.GetUnicodeCategory(Char)\n  fullName: CharUnicodeInfo.GetUnicodeCategory(Char)\n- uid: System.Globalization.UnicodeCategory\n  parent: System.Globalization\n  isExternal: false\n  name: UnicodeCategory\n  nameWithType: UnicodeCategory\n  fullName: System.Globalization.UnicodeCategory\n- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory(System.String,System.Int32)\n  parent: System.Globalization.CharUnicodeInfo\n  isExternal: false\n  name: GetUnicodeCategory(String, Int32)\n  nameWithType: CharUnicodeInfo.GetUnicodeCategory(String, Int32)\n  fullName: CharUnicodeInfo.GetUnicodeCategory(String, Int32)\n- uid: System.Globalization.CharUnicodeInfo.GetDecimalDigitValue*\n  parent: System.Globalization.CharUnicodeInfo\n  isExternal: false\n  name: GetDecimalDigitValue\n  nameWithType: CharUnicodeInfo.GetDecimalDigitValue\n  fullName: CharUnicodeInfo.GetDecimalDigitValue\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CharUnicodeInfo.xml\n- uid: System.Globalization.CharUnicodeInfo.GetDigitValue*\n  parent: System.Globalization.CharUnicodeInfo\n  isExternal: false\n  name: GetDigitValue\n  nameWithType: CharUnicodeInfo.GetDigitValue\n  fullName: CharUnicodeInfo.GetDigitValue\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CharUnicodeInfo.xml\n- uid: System.Globalization.CharUnicodeInfo.GetNumericValue*\n  parent: System.Globalization.CharUnicodeInfo\n  isExternal: false\n  name: GetNumericValue\n  nameWithType: CharUnicodeInfo.GetNumericValue\n  fullName: CharUnicodeInfo.GetNumericValue\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CharUnicodeInfo.xml\n- uid: System.Globalization.CharUnicodeInfo.GetUnicodeCategory*\n  parent: System.Globalization.CharUnicodeInfo\n  isExternal: false\n  name: GetUnicodeCategory\n  nameWithType: CharUnicodeInfo.GetUnicodeCategory\n  fullName: CharUnicodeInfo.GetUnicodeCategory\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Globalization/CharUnicodeInfo.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}