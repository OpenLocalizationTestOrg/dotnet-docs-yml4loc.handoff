{"nodes":[{"content":"Specifies the culture, case, and sort rules to be used by certain overloads of the <xref href=\"System.String.Compare(System.String,System.String)\"></xref> and <xref href=\"System.String.Equals(System.Object)\"></xref> methods.","nodes":[{"pos":[0,224],"content":"Specifies the culture, case, and sort rules to be used by certain overloads of the <ph id=\"ph1\">&lt;xref href=\"System.String.Compare(System.String,System.String)\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.String.Equals(System.Object)\"&gt;&lt;/xref&gt;</ph> methods.","source":"Specifies the culture, case, and sort rules to be used by certain overloads of the <xref href=\"System.String.Compare(System.String,System.String)\"></xref> and <xref href=\"System.String.Equals(System.Object)\"></xref> methods."}],"pos":[639,864],"yaml":true},{"content":"The <xref:System.StringComparison> enumeration is used to specify whether a string comparison should use the current culture or the invariant culture, word or ordinal sort rules, and be case-sensitive or case-insensitive.  \n  \n> [!IMPORTANT]\n>  When you call a string comparison method such as <xref:System.String.Compare%2A?displayProperty=fullName>, <xref:System.String.Equals%2A?displayProperty=fullName>, or <xref:System.String.IndexOf%2A?displayProperty=fullName>, you should always call an overload that includes a parameter of type <xref:System.StringComparison> so that you can specify the type of comparison that the method performs. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \n  \n An operation that uses word sort rules performs a culture-sensitive comparison wherein certain nonalphanumeric Unicode characters might have special weights assigned to them. Using word sort rules and the conventions of a specific culture, the hyphen (\"-\") might have a very small weight assigned to it so that \"coop\" and \"co-op\" appear next to each other in a sorted list.  \n  \n An operation that uses ordinal sort rules performs a comparison based on the numeric value (Unicode code point) of each <xref:System.Char> in the string. An ordinal comparison is fast but culture-insensitive. When you use ordinal sort rules to sort strings that start with Unicode characters (U+), the string U+xxxx comes before the string U+yyyy if the value of xxxx is numerically less than yyyy.  \n  \n For more information about comparisons, see the <xref:System.String?displayProperty=fullName> class remarks. For more information about culture, see the <xref:System.Globalization.CultureInfo?displayProperty=fullName> class remarks. For guidelines on when to use ordinal or culture-sensitive comparison rules or the rules of the invariant culture, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","nodes":[{"pos":[0,221],"content":"The <xref:System.StringComparison> enumeration is used to specify whether a string comparison should use the current culture or the invariant culture, word or ordinal sort rules, and be case-sensitive or case-insensitive.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.StringComparison&gt;</ph> enumeration is used to specify whether a string comparison should use the current culture or the invariant culture, word or ordinal sort rules, and be case-sensitive or case-insensitive.","pos":[0,221],"source":"The <xref:System.StringComparison> enumeration is used to specify whether a string comparison should use the current culture or the invariant culture, word or ordinal sort rules, and be case-sensitive or case-insensitive."}]},{"pos":[229,758],"content":"[!IMPORTANT]\n When you call a string comparison method such as <xref:System.String.Compare%2A?displayProperty=fullName>, <xref:System.String.Equals%2A?displayProperty=fullName>, or <xref:System.String.IndexOf%2A?displayProperty=fullName>, you should always call an overload that includes a parameter of type <xref:System.StringComparison> so that you can specify the type of comparison that the method performs. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","leadings":["","> "],"nodes":[{"content":" When you call a string comparison method such as <xref:System.String.Compare%2A?displayProperty=fullName>, <xref:System.String.Equals%2A?displayProperty=fullName>, or <xref:System.String.IndexOf%2A?displayProperty=fullName>, you should always call an overload that includes a parameter of type <xref:System.StringComparison> so that you can specify the type of comparison that the method performs. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","pos":[13,527],"nodes":[{"content":"When you call a string comparison method such as <ph id=\"ph1\">&lt;xref:System.String.Compare%2A?displayProperty=fullName&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.String.Equals%2A?displayProperty=fullName&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.String.IndexOf%2A?displayProperty=fullName&gt;</ph>, you should always call an overload that includes a parameter of type <ph id=\"ph4\">&lt;xref:System.StringComparison&gt;</ph> so that you can specify the type of comparison that the method performs.","pos":[1,398],"source":" When you call a string comparison method such as <xref:System.String.Compare%2A?displayProperty=fullName>, <xref:System.String.Equals%2A?displayProperty=fullName>, or <xref:System.String.IndexOf%2A?displayProperty=fullName>, you should always call an overload that includes a parameter of type <xref:System.StringComparison> so that you can specify the type of comparison that the method performs."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Best Practices for Using Strings<ept id=\"p1\">](~/docs/standard/base-types/best-practices-strings.md)</ept>.","pos":[399,514],"source":" For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md)."}]}]},{"pos":[765,1138],"content":"An operation that uses word sort rules performs a culture-sensitive comparison wherein certain nonalphanumeric Unicode characters might have special weights assigned to them. Using word sort rules and the conventions of a specific culture, the hyphen (\"-\") might have a very small weight assigned to it so that \"coop\" and \"co-op\" appear next to each other in a sorted list.","nodes":[{"content":"An operation that uses word sort rules performs a culture-sensitive comparison wherein certain nonalphanumeric Unicode characters might have special weights assigned to them. Using word sort rules and the conventions of a specific culture, the hyphen (\"-\") might have a very small weight assigned to it so that \"coop\" and \"co-op\" appear next to each other in a sorted list.","pos":[0,373],"nodes":[{"content":"An operation that uses word sort rules performs a culture-sensitive comparison wherein certain nonalphanumeric Unicode characters might have special weights assigned to them.","pos":[0,174]},{"content":"Using word sort rules and the conventions of a specific culture, the hyphen (\"-\") might have a very small weight assigned to it so that \"coop\" and \"co-op\" appear next to each other in a sorted list.","pos":[175,373]}]}]},{"pos":[1145,1543],"content":"An operation that uses ordinal sort rules performs a comparison based on the numeric value (Unicode code point) of each <xref:System.Char> in the string. An ordinal comparison is fast but culture-insensitive. When you use ordinal sort rules to sort strings that start with Unicode characters (U+), the string U+xxxx comes before the string U+yyyy if the value of xxxx is numerically less than yyyy.","nodes":[{"content":"An operation that uses ordinal sort rules performs a comparison based on the numeric value (Unicode code point) of each <xref:System.Char> in the string. An ordinal comparison is fast but culture-insensitive. When you use ordinal sort rules to sort strings that start with Unicode characters (U+), the string U+xxxx comes before the string U+yyyy if the value of xxxx is numerically less than yyyy.","pos":[0,398],"nodes":[{"content":"An operation that uses ordinal sort rules performs a comparison based on the numeric value (Unicode code point) of each <ph id=\"ph1\">&lt;xref:System.Char&gt;</ph> in the string.","pos":[0,153],"source":"An operation that uses ordinal sort rules performs a comparison based on the numeric value (Unicode code point) of each <xref:System.Char> in the string."},{"content":"An ordinal comparison is fast but culture-insensitive.","pos":[154,208]},{"content":"When you use ordinal sort rules to sort strings that start with Unicode characters (U+), the string U+xxxx comes before the string U+yyyy if the value of xxxx is numerically less than yyyy.","pos":[209,398]}]}]},{"pos":[1550,1991],"content":"For more information about comparisons, see the <xref:System.String?displayProperty=fullName> class remarks. For more information about culture, see the <xref:System.Globalization.CultureInfo?displayProperty=fullName> class remarks. For guidelines on when to use ordinal or culture-sensitive comparison rules or the rules of the invariant culture, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).","nodes":[{"content":"For more information about comparisons, see the <ph id=\"ph1\">&lt;xref:System.String?displayProperty=fullName&gt;</ph> class remarks.","pos":[0,108],"source":"For more information about comparisons, see the <xref:System.String?displayProperty=fullName> class remarks."},{"content":"For more information about culture, see the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo?displayProperty=fullName&gt;</ph> class remarks.","pos":[109,232],"source":" For more information about culture, see the <xref:System.Globalization.CultureInfo?displayProperty=fullName> class remarks."},{"content":"For guidelines on when to use ordinal or culture-sensitive comparison rules or the rules of the invariant culture, see <bpt id=\"p1\">[</bpt>Best Practices for Using Strings<ept id=\"p1\">](~/docs/standard/base-types/best-practices-strings.md)</ept>.","pos":[233,441],"source":" For guidelines on when to use ordinal or culture-sensitive comparison rules or the rules of the invariant culture, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md)."}]}],"pos":[875,2884],"yaml":true,"extradata":"MT"},{"content":"Compare strings using culture-sensitive sort rules and the current culture.","nodes":[{"pos":[0,75],"content":"Compare strings using culture-sensitive sort rules and the current culture.","nodes":[{"content":"Compare strings using culture-sensitive sort rules and the current culture.","pos":[0,75]}]}],"pos":[5276,5352],"yaml":true},{"content":"Compare strings using culture-sensitive sort rules, the current culture, and ignoring the case of the strings being compared.","nodes":[{"pos":[0,125],"content":"Compare strings using culture-sensitive sort rules, the current culture, and ignoring the case of the strings being compared.","nodes":[{"content":"Compare strings using culture-sensitive sort rules, the current culture, and ignoring the case of the strings being compared.","pos":[0,125]}]}],"pos":[6901,7027],"yaml":true},{"content":"Compare strings using culture-sensitive sort rules and the invariant culture.","nodes":[{"pos":[0,77],"content":"Compare strings using culture-sensitive sort rules and the invariant culture.","nodes":[{"content":"Compare strings using culture-sensitive sort rules and the invariant culture.","pos":[0,77]}]}],"pos":[8538,8616],"yaml":true},{"content":"Compare strings using culture-sensitive sort rules, the invariant culture, and ignoring the case of the strings being compared.","nodes":[{"pos":[0,127],"content":"Compare strings using culture-sensitive sort rules, the invariant culture, and ignoring the case of the strings being compared.","nodes":[{"content":"Compare strings using culture-sensitive sort rules, the invariant culture, and ignoring the case of the strings being compared.","pos":[0,127]}]}],"pos":[9835,9963],"yaml":true},{"content":"Compare strings using ordinal (binary) sort rules.","nodes":[{"pos":[0,50],"content":"Compare strings using ordinal (binary) sort rules.","nodes":[{"content":"Compare strings using ordinal (binary) sort rules.","pos":[0,50]}]}],"pos":[11078,11129],"yaml":true},{"content":"Compare strings using ordinal (binary) sort rules and ignoring the case of the strings being compared.","nodes":[{"pos":[0,102],"content":"Compare strings using ordinal (binary) sort rules and ignoring the case of the strings being compared.","nodes":[{"content":"Compare strings using ordinal (binary) sort rules and ignoring the case of the strings being compared.","pos":[0,102]}]}],"pos":[12629,12732],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.StringComparison\n  commentId: T:System.StringComparison\n  id: StringComparison\n  children:\n  - System.StringComparison.CurrentCulture\n  - System.StringComparison.CurrentCultureIgnoreCase\n  - System.StringComparison.InvariantCulture\n  - System.StringComparison.InvariantCultureIgnoreCase\n  - System.StringComparison.Ordinal\n  - System.StringComparison.OrdinalIgnoreCase\n  langs:\n  - csharp\n  name: StringComparison\n  nameWithType: StringComparison\n  fullName: System.StringComparison\n  type: Enum\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Specifies the culture, case, and sort rules to be used by certain overloads of the <xref href=\"System.String.Compare(System.String,System.String)\"></xref> and <xref href=\"System.String.Equals(System.Object)\"></xref> methods.\n  remarks: \"The <xref:System.StringComparison> enumeration is used to specify whether a string comparison should use the current culture or the invariant culture, word or ordinal sort rules, and be case-sensitive or case-insensitive.  \\n  \\n> [!IMPORTANT]\\n>  When you call a string comparison method such as <xref:System.String.Compare%2A?displayProperty=fullName>, <xref:System.String.Equals%2A?displayProperty=fullName>, or <xref:System.String.IndexOf%2A?displayProperty=fullName>, you should always call an overload that includes a parameter of type <xref:System.StringComparison> so that you can specify the type of comparison that the method performs. For more information, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).  \\n  \\n An operation that uses word sort rules performs a culture-sensitive comparison wherein certain nonalphanumeric Unicode characters might have special weights assigned to them. Using word sort rules and the conventions of a specific culture, the hyphen (\\\"-\\\") might have a very small weight assigned to it so that \\\"coop\\\" and \\\"co-op\\\" appear next to each other in a sorted list.  \\n  \\n An operation that uses ordinal sort rules performs a comparison based on the numeric value (Unicode code point) of each <xref:System.Char> in the string. An ordinal comparison is fast but culture-insensitive. When you use ordinal sort rules to sort strings that start with Unicode characters (U+), the string U+xxxx comes before the string U+yyyy if the value of xxxx is numerically less than yyyy.  \\n  \\n For more information about comparisons, see the <xref:System.String?displayProperty=fullName> class remarks. For more information about culture, see the <xref:System.Globalization.CultureInfo?displayProperty=fullName> class remarks. For guidelines on when to use ordinal or culture-sensitive comparison rules or the rules of the invariant culture, see [Best Practices for Using Strings](~/docs/standard/base-types/best-practices-strings.md).\"\n  example:\n  - \"The following example compares four sets of words by using each member of the <xref:System.StringComparison> enumeration.  The comparisons use the conventions of the English (United States) and Sami, Nothern (Sweden) cultures. Note that the strings \\\"encyclopædia\\\" and \\\"encyclopedia\\\" are considered equivalent in the en-US culture but not in the Sami, Northern (Sweden) culture.  \\n  \\n [!code-csharp[System.String.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.string.equals/cs/equals_ex3.cs#3)]\\n [!code-vb[System.String.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.string.equals/vb/equals_ex3.vb#3)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public enum StringComparison\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparison.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.StringComparison.CurrentCulture\n  commentId: F:System.StringComparison.CurrentCulture\n  id: CurrentCulture\n  parent: System.StringComparison\n  langs:\n  - csharp\n  name: CurrentCulture\n  nameWithType: StringComparison.CurrentCulture\n  fullName: StringComparison.CurrentCulture\n  type: Field\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Compare strings using culture-sensitive sort rules and the current culture.\n  syntax:\n    content: CurrentCulture\n    return:\n      type: System.StringComparison\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparison.xml\n- uid: System.StringComparison.CurrentCultureIgnoreCase\n  commentId: F:System.StringComparison.CurrentCultureIgnoreCase\n  id: CurrentCultureIgnoreCase\n  parent: System.StringComparison\n  langs:\n  - csharp\n  name: CurrentCultureIgnoreCase\n  nameWithType: StringComparison.CurrentCultureIgnoreCase\n  fullName: StringComparison.CurrentCultureIgnoreCase\n  type: Field\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Compare strings using culture-sensitive sort rules, the current culture, and ignoring the case of the strings being compared.\n  syntax:\n    content: CurrentCultureIgnoreCase\n    return:\n      type: System.StringComparison\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparison.xml\n- uid: System.StringComparison.InvariantCulture\n  commentId: F:System.StringComparison.InvariantCulture\n  id: InvariantCulture\n  parent: System.StringComparison\n  langs:\n  - csharp\n  name: InvariantCulture\n  nameWithType: StringComparison.InvariantCulture\n  fullName: StringComparison.InvariantCulture\n  type: Field\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Compare strings using culture-sensitive sort rules and the invariant culture.\n  syntax:\n    content: InvariantCulture\n    return:\n      type: System.StringComparison\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparison.xml\n- uid: System.StringComparison.InvariantCultureIgnoreCase\n  commentId: F:System.StringComparison.InvariantCultureIgnoreCase\n  id: InvariantCultureIgnoreCase\n  parent: System.StringComparison\n  langs:\n  - csharp\n  name: InvariantCultureIgnoreCase\n  nameWithType: StringComparison.InvariantCultureIgnoreCase\n  fullName: StringComparison.InvariantCultureIgnoreCase\n  type: Field\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System\n  summary: Compare strings using culture-sensitive sort rules, the invariant culture, and ignoring the case of the strings being compared.\n  syntax:\n    content: InvariantCultureIgnoreCase\n    return:\n      type: System.StringComparison\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparison.xml\n- uid: System.StringComparison.Ordinal\n  commentId: F:System.StringComparison.Ordinal\n  id: Ordinal\n  parent: System.StringComparison\n  langs:\n  - csharp\n  name: Ordinal\n  nameWithType: StringComparison.Ordinal\n  fullName: StringComparison.Ordinal\n  type: Field\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Compare strings using ordinal (binary) sort rules.\n  syntax:\n    content: Ordinal\n    return:\n      type: System.StringComparison\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparison.xml\n- uid: System.StringComparison.OrdinalIgnoreCase\n  commentId: F:System.StringComparison.OrdinalIgnoreCase\n  id: OrdinalIgnoreCase\n  parent: System.StringComparison\n  langs:\n  - csharp\n  name: OrdinalIgnoreCase\n  nameWithType: StringComparison.OrdinalIgnoreCase\n  fullName: StringComparison.OrdinalIgnoreCase\n  type: Field\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Compare strings using ordinal (binary) sort rules and ignoring the case of the strings being compared.\n  syntax:\n    content: OrdinalIgnoreCase\n    return:\n      type: System.StringComparison\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/StringComparison.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.StringComparison.CurrentCulture\n  parent: System.StringComparison\n  isExternal: false\n  name: CurrentCulture\n  nameWithType: StringComparison.CurrentCulture\n  fullName: StringComparison.CurrentCulture\n- uid: System.StringComparison\n  parent: System\n  isExternal: false\n  name: StringComparison\n  nameWithType: StringComparison\n  fullName: System.StringComparison\n- uid: System.StringComparison.CurrentCultureIgnoreCase\n  parent: System.StringComparison\n  isExternal: false\n  name: CurrentCultureIgnoreCase\n  nameWithType: StringComparison.CurrentCultureIgnoreCase\n  fullName: StringComparison.CurrentCultureIgnoreCase\n- uid: System.StringComparison.InvariantCulture\n  parent: System.StringComparison\n  isExternal: false\n  name: InvariantCulture\n  nameWithType: StringComparison.InvariantCulture\n  fullName: StringComparison.InvariantCulture\n- uid: System.StringComparison.InvariantCultureIgnoreCase\n  parent: System.StringComparison\n  isExternal: false\n  name: InvariantCultureIgnoreCase\n  nameWithType: StringComparison.InvariantCultureIgnoreCase\n  fullName: StringComparison.InvariantCultureIgnoreCase\n- uid: System.StringComparison.Ordinal\n  parent: System.StringComparison\n  isExternal: false\n  name: Ordinal\n  nameWithType: StringComparison.Ordinal\n  fullName: StringComparison.Ordinal\n- uid: System.StringComparison.OrdinalIgnoreCase\n  parent: System.StringComparison\n  isExternal: false\n  name: OrdinalIgnoreCase\n  nameWithType: StringComparison.OrdinalIgnoreCase\n  fullName: StringComparison.OrdinalIgnoreCase\n"}