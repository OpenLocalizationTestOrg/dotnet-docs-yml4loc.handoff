{"nodes":[{"content":"Provides simple domain name resolution functionality.","nodes":[{"pos":[0,53],"content":"Provides simple domain name resolution functionality.","nodes":[{"content":"Provides simple domain name resolution functionality.","pos":[0,53]}]}],"pos":[1524,1578],"yaml":true},{"content":"The <xref:System.Net.Dns> class is a static class that retrieves information about a specific host from the Internet Domain Name System (DNS).  \n  \n The host information from the DNS query is returned in an instance of the <xref:System.Net.IPHostEntry> class. If the specified host has more than one entry in the DNS database, <xref:System.Net.IPHostEntry> contains multiple IP addresses and aliases.","nodes":[{"pos":[0,142],"content":"The <xref:System.Net.Dns> class is a static class that retrieves information about a specific host from the Internet Domain Name System (DNS).","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Dns&gt;</ph> class is a static class that retrieves information about a specific host from the Internet Domain Name System (DNS).","pos":[0,142],"source":"The <xref:System.Net.Dns> class is a static class that retrieves information about a specific host from the Internet Domain Name System (DNS)."}]},{"pos":[149,400],"content":"The host information from the DNS query is returned in an instance of the <xref:System.Net.IPHostEntry> class. If the specified host has more than one entry in the DNS database, <xref:System.Net.IPHostEntry> contains multiple IP addresses and aliases.","nodes":[{"content":"The host information from the DNS query is returned in an instance of the <xref:System.Net.IPHostEntry> class. If the specified host has more than one entry in the DNS database, <xref:System.Net.IPHostEntry> contains multiple IP addresses and aliases.","pos":[0,251],"nodes":[{"content":"The host information from the DNS query is returned in an instance of the <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry&gt;</ph> class.","pos":[0,110],"source":"The host information from the DNS query is returned in an instance of the <xref:System.Net.IPHostEntry> class."},{"content":"If the specified host has more than one entry in the DNS database, <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry&gt;</ph> contains multiple IP addresses and aliases.","pos":[111,251],"source":" If the specified host has more than one entry in the DNS database, <xref:System.Net.IPHostEntry> contains multiple IP addresses and aliases."}]}]}],"pos":[1589,1994],"yaml":true,"extradata":"MT"},{"content":"Asynchronously returns the Internet Protocol (IP) addresses for the specified host.","nodes":[{"pos":[0,83],"content":"Asynchronously returns the Internet Protocol (IP) addresses for the specified host.","nodes":[{"content":"Asynchronously returns the Internet Protocol (IP) addresses for the specified host.","pos":[0,83]}]}],"pos":[4224,4308],"yaml":true},{"content":"The <xref:System.Net.Dns.BeginGetHostAddresses%2A> method asynchronously queries a DNS server for the IP addresses that are associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  \n  \n The asynchronous <xref:System.Net.Dns.BeginGetHostAddresses%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostAddresses%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostAddresses%2A> method.  \n  \n For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)","nodes":[{"pos":[0,251],"content":"The <xref:System.Net.Dns.BeginGetHostAddresses%2A> method asynchronously queries a DNS server for the IP addresses that are associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Dns.BeginGetHostAddresses%2A&gt;</ph> method asynchronously queries a DNS server for the IP addresses that are associated with a host name.","pos":[0,152],"source":"The <xref:System.Net.Dns.BeginGetHostAddresses%2A> method asynchronously queries a DNS server for the IP addresses that are associated with a host name."},{"content":"If <ph id=\"ph1\">`hostNameOrAddress`</ph> is an IP address, this address is returned without querying the DNS server.","pos":[153,251],"source":" If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server."}]},{"pos":[259,482],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]},{"pos":[489,735],"content":"When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.","nodes":[{"content":"When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.","pos":[0,246]}]},{"pos":[742,969],"content":"The asynchronous <xref:System.Net.Dns.BeginGetHostAddresses%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostAddresses%2A> method. Typically, the method is invoked by the `requestCallback` delegate.","nodes":[{"content":"The asynchronous <ph id=\"ph1\">&lt;xref:System.Net.Dns.BeginGetHostAddresses%2A&gt;</ph> operation must be completed by calling the <ph id=\"ph2\">&lt;xref:System.Net.Dns.EndGetHostAddresses%2A&gt;</ph> method.","pos":[0,159],"source":"The asynchronous <xref:System.Net.Dns.BeginGetHostAddresses%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostAddresses%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[160,227],"source":" Typically, the method is invoked by the `requestCallback` delegate."}]},{"pos":[976,1135],"content":"This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostAddresses%2A> method.","nodes":[{"content":"This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostAddresses%2A> method.","pos":[0,159],"nodes":[{"content":"This method does not block until the operation is complete.","pos":[0,59]},{"content":"To block until the operation is complete, use the <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostAddresses%2A&gt;</ph> method.","pos":[60,159],"source":" To block until the operation is complete, use the <xref:System.Net.Dns.GetHostAddresses%2A> method."}]}]},{"pos":[1142,1356],"content":"For more information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>","source":"For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)"}],"pos":[4319,5689],"yaml":true,"extradata":"MT"},{"content":"The host name or IP address to resolve.","nodes":[{"pos":[0,39],"content":"The host name or IP address to resolve.","nodes":[{"content":"The host name or IP address to resolve.","pos":[0,39]}]}],"pos":[5923,5963],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete."}],"pos":[6041,6164],"yaml":true},{"content":"A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"pos":[0,167],"content":"A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation is complete.","pos":[69,167],"source":" This object is passed to the <code>requestCallback</code> delegate when the operation is complete."}]}],"pos":[6225,6393],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> instance that references the asynchronous request.","nodes":[{"pos":[0,94],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> instance that references the asynchronous request.","source":"An <xref href=\"System.IAsyncResult\"></xref> instance that references the asynchronous request."}],"pos":[6456,6551],"yaml":true},{"content":"<code>hostNameOrAddress</code> is `null`.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>hostNameOrAddress</code> is `null`."}],"pos":[6717,6759],"yaml":true},{"content":"The length of <code>hostNameOrAddress</code> is greater than 255 characters.","nodes":[{"pos":[0,76],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than 255 characters.","source":"The length of <code>hostNameOrAddress</code> is greater than 255 characters."}],"pos":[6873,6950],"yaml":true},{"content":"An error is encountered when resolving <code>hostNameOrAddress</code>.","nodes":[{"pos":[0,70],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An error is encountered when resolving <code>hostNameOrAddress</code>."}],"pos":[7064,7135],"yaml":true},{"content":"<code>hostNameOrAddress</code> is an invalid IP address.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an invalid IP address.","source":"<code>hostNameOrAddress</code> is an invalid IP address."}],"pos":[7229,7286],"yaml":true},{"content":"Begins an asynchronous request for <xref href=\"System.Net.IPHostEntry\"></xref> information about the specified DNS host name.","nodes":[{"pos":[0,125],"content":"Begins an asynchronous request for <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> information about the specified DNS host name.","source":"Begins an asynchronous request for <xref href=\"System.Net.IPHostEntry\"></xref> information about the specified DNS host name."}],"pos":[8562,8688],"yaml":true},{"content":"The asynchronous <xref:System.Net.Dns.BeginGetHostByName%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostByName%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostByName%2A> method.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,221],"content":"The asynchronous <xref:System.Net.Dns.BeginGetHostByName%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostByName%2A> method. Typically, the method is invoked by the `requestCallback` delegate.","nodes":[{"content":"The asynchronous <ph id=\"ph1\">&lt;xref:System.Net.Dns.BeginGetHostByName%2A&gt;</ph> operation must be completed by calling the <ph id=\"ph2\">&lt;xref:System.Net.Dns.EndGetHostByName%2A&gt;</ph> method.","pos":[0,153],"source":"The asynchronous <xref:System.Net.Dns.BeginGetHostByName%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostByName%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[154,221],"source":" Typically, the method is invoked by the `requestCallback` delegate."}]},{"pos":[228,384],"content":"This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostByName%2A> method.","nodes":[{"content":"This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostByName%2A> method.","pos":[0,156],"nodes":[{"content":"This method does not block until the operation is complete.","pos":[0,59]},{"content":"To block until the operation is complete, use the <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostByName%2A&gt;</ph> method.","pos":[60,156],"source":" To block until the operation is complete, use the <xref:System.Net.Dns.GetHostByName%2A> method."}]}]},{"pos":[391,610],"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.","source":"For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)."},{"pos":[618,841],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[8699,9550],"yaml":true,"extradata":"MT"},{"content":"The DNS name of the host.","nodes":[{"pos":[0,25],"content":"The DNS name of the host.","nodes":[{"content":"The DNS name of the host.","pos":[0,25]}]}],"pos":[9836,9862],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete."}],"pos":[9940,10063],"yaml":true},{"content":"A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"pos":[0,167],"content":"A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation is complete.","pos":[69,167],"source":" This object is passed to the <code>requestCallback</code> delegate when the operation is complete."}]}],"pos":[10130,10298],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> instance that references the asynchronous request.","nodes":[{"pos":[0,94],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> instance that references the asynchronous request.","source":"An <xref href=\"System.IAsyncResult\"></xref> instance that references the asynchronous request."}],"pos":[10361,10456],"yaml":true},{"content":"<code>hostName</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;hostName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>hostName</code> is `null`."}],"pos":[10619,10652],"yaml":true},{"content":"An error was encountered executing the DNS query.","nodes":[{"pos":[0,49],"content":"An error was encountered executing the DNS query.","nodes":[{"content":"An error was encountered executing the DNS query.","pos":[0,49]}]}],"pos":[10766,10816],"yaml":true},{"content":"Asynchronously resolves an IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance.","nodes":[{"pos":[0,97],"content":"Asynchronously resolves an IP address to an <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance.","source":"Asynchronously resolves an IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance."}],"pos":[12165,12263],"yaml":true},{"content":"The <xref:System.Net.Dns.BeginGetHostEntry%2A> method asynchronously queries a DNS server for the IP addresses and aliases associated with an IP address.  \n  \n **Note** This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n The asynchronous <xref:System.Net.Dns.BeginGetHostEntry%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)","nodes":[{"pos":[0,153],"content":"The <xref:System.Net.Dns.BeginGetHostEntry%2A> method asynchronously queries a DNS server for the IP addresses and aliases associated with an IP address.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Dns.BeginGetHostEntry%2A&gt;</ph> method asynchronously queries a DNS server for the IP addresses and aliases associated with an IP address.","pos":[0,153],"source":"The <xref:System.Net.Dns.BeginGetHostEntry%2A> method asynchronously queries a DNS server for the IP addresses and aliases associated with an IP address."}]},{"pos":[160,381],"content":"**Note** This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This member emits trace information when you enable network tracing in your application.","pos":[0,97],"source":"**Note** This member emits trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[98,221],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]},{"pos":[388,607],"content":"The asynchronous <xref:System.Net.Dns.BeginGetHostEntry%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method. Typically, the method is invoked by the `requestCallback` delegate.","nodes":[{"content":"The asynchronous <ph id=\"ph1\">&lt;xref:System.Net.Dns.BeginGetHostEntry%2A&gt;</ph> operation must be completed by calling the <ph id=\"ph2\">&lt;xref:System.Net.Dns.EndGetHostEntry%2A&gt;</ph> method.","pos":[0,151],"source":"The asynchronous <xref:System.Net.Dns.BeginGetHostEntry%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[152,219],"source":" Typically, the method is invoked by the `requestCallback` delegate."}]},{"pos":[614,769],"content":"This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.","nodes":[{"content":"This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.","pos":[0,155],"nodes":[{"content":"This method does not block until the operation is complete.","pos":[0,59]},{"content":"To block until the operation is complete, use the <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method.","pos":[60,155],"source":" To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method."}]}]},{"pos":[776,994],"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>","source":"For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)"}],"pos":[12274,13279],"yaml":true,"extradata":"MT"},{"content":"The IP address to resolve.","nodes":[{"pos":[0,26],"content":"The IP address to resolve.","nodes":[{"content":"The IP address to resolve.","pos":[0,26]}]}],"pos":[14053,14080],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete."}],"pos":[14158,14281],"yaml":true},{"content":"A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"pos":[0,167],"content":"A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation is complete.","pos":[69,167],"source":" This object is passed to the <code>requestCallback</code> delegate when the operation is complete."}]}],"pos":[14348,14516],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> instance that references the asynchronous request.","nodes":[{"pos":[0,94],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> instance that references the asynchronous request.","source":"An <xref href=\"System.IAsyncResult\"></xref> instance that references the asynchronous request."}],"pos":[14579,14674],"yaml":true},{"content":"<code>address</code> is `null`.","nodes":[{"pos":[0,31],"content":"<code>address</code> is `null`.","nodes":[{"content":"is <ph id=\"ph1\">`null`</ph>.","pos":[21,31],"source":" is `null`."}]}],"pos":[14836,14868],"yaml":true},{"content":"An error is encountered when resolving <code>address</code>.","nodes":[{"pos":[0,60],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An error is encountered when resolving <code>address</code>."}],"pos":[14982,15043],"yaml":true},{"content":"<code>address</code> is an invalid IP address.","nodes":[{"pos":[0,46],"content":"<code>address</code> is an invalid IP address.","nodes":[{"content":"is an invalid IP address.","pos":[21,46]}]}],"pos":[15137,15184],"yaml":true},{"content":"Asynchronously resolves a host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance.","nodes":[{"pos":[0,109],"content":"Asynchronously resolves a host name or IP address to an <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance.","source":"Asynchronously resolves a host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance."}],"pos":[16454,16564],"yaml":true},{"content":"The <xref:System.Net.Dns.BeginGetHostEntry%2A> method queries a DNS server for the IP address that is associated with a host name or IP address.  \n  \n **Note** This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \n  \n The asynchronous <xref:System.Net.Dns.BeginGetHostEntry%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.  \n  \n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).","nodes":[{"pos":[0,144],"content":"The <xref:System.Net.Dns.BeginGetHostEntry%2A> method queries a DNS server for the IP address that is associated with a host name or IP address.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Dns.BeginGetHostEntry%2A&gt;</ph> method queries a DNS server for the IP address that is associated with a host name or IP address.","pos":[0,144],"source":"The <xref:System.Net.Dns.BeginGetHostEntry%2A> method queries a DNS server for the IP address that is associated with a host name or IP address."}]},{"pos":[151,372],"content":"**Note** This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note<ept id=\"p1\">**</ept> This member emits trace information when you enable network tracing in your application.","pos":[0,97],"source":"**Note** This member emits trace information when you enable network tracing in your application."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[98,221],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]},{"pos":[379,598],"content":"The asynchronous <xref:System.Net.Dns.BeginGetHostEntry%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method. Typically, the method is invoked by the `requestCallback` delegate.","nodes":[{"content":"The asynchronous <ph id=\"ph1\">&lt;xref:System.Net.Dns.BeginGetHostEntry%2A&gt;</ph> operation must be completed by calling the <ph id=\"ph2\">&lt;xref:System.Net.Dns.EndGetHostEntry%2A&gt;</ph> method.","pos":[0,151],"source":"The asynchronous <xref:System.Net.Dns.BeginGetHostEntry%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[152,219],"source":" Typically, the method is invoked by the `requestCallback` delegate."}]},{"pos":[605,760],"content":"This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.","nodes":[{"content":"This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.","pos":[0,155],"nodes":[{"content":"This method does not block until the operation is complete.","pos":[0,59]},{"content":"To block until the operation is complete, use the <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method.","pos":[60,155],"source":" To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method."}]}]},{"pos":[767,986],"content":"For detailed information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.","source":"For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)."}],"pos":[16575,17572],"yaml":true,"extradata":"MT"},{"content":"The host name or IP address to resolve.","nodes":[{"pos":[0,39],"content":"The host name or IP address to resolve.","nodes":[{"content":"The host name or IP address to resolve.","pos":[0,39]}]}],"pos":[18345,18385],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete."}],"pos":[18463,18586],"yaml":true},{"content":"A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"pos":[0,167],"content":"A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation is complete.","pos":[69,167],"source":" This object is passed to the <code>requestCallback</code> delegate when the operation is complete."}]}],"pos":[18653,18821],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> instance that references the asynchronous request.","nodes":[{"pos":[0,94],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> instance that references the asynchronous request.","source":"An <xref href=\"System.IAsyncResult\"></xref> instance that references the asynchronous request."}],"pos":[18884,18979],"yaml":true},{"content":"<code>hostNameOrAddress</code> is `null`.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>hostNameOrAddress</code> is `null`."}],"pos":[19141,19183],"yaml":true},{"content":"The length of <code>hostNameOrAddress</code> is greater than 255 characters.","nodes":[{"pos":[0,76],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than 255 characters.","source":"The length of <code>hostNameOrAddress</code> is greater than 255 characters."}],"pos":[19297,19374],"yaml":true},{"content":"An error is encountered when resolving <code>hostNameOrAddress</code>.","nodes":[{"pos":[0,70],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An error is encountered when resolving <code>hostNameOrAddress</code>."}],"pos":[19488,19559],"yaml":true},{"content":"<code>hostNameOrAddress</code> is an invalid IP address.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an invalid IP address.","source":"<code>hostNameOrAddress</code> is an invalid IP address."}],"pos":[19653,19710],"yaml":true},{"content":"Begins an asynchronous request to resolve a DNS host name or IP address to an <xref href=\"System.Net.IPAddress\"></xref> instance.","nodes":[{"pos":[0,129],"content":"Begins an asynchronous request to resolve a DNS host name or IP address to an <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> instance.","source":"Begins an asynchronous request to resolve a DNS host name or IP address to an <xref href=\"System.Net.IPAddress\"></xref> instance."}],"pos":[20950,21080],"yaml":true},{"content":"The asynchronous <xref:System.Net.Dns.BeginResolve%2A> operation must be completed by calling the <xref:System.Net.Dns.EndResolve%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \n  \n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.Resolve%2A> method.  \n  \n For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,209],"content":"The asynchronous <xref:System.Net.Dns.BeginResolve%2A> operation must be completed by calling the <xref:System.Net.Dns.EndResolve%2A> method. Typically, the method is invoked by the `requestCallback` delegate.","nodes":[{"content":"The asynchronous <ph id=\"ph1\">&lt;xref:System.Net.Dns.BeginResolve%2A&gt;</ph> operation must be completed by calling the <ph id=\"ph2\">&lt;xref:System.Net.Dns.EndResolve%2A&gt;</ph> method.","pos":[0,141],"source":"The asynchronous <xref:System.Net.Dns.BeginResolve%2A> operation must be completed by calling the <xref:System.Net.Dns.EndResolve%2A> method."},{"content":"Typically, the method is invoked by the <ph id=\"ph1\">`requestCallback`</ph> delegate.","pos":[142,209],"source":" Typically, the method is invoked by the `requestCallback` delegate."}]},{"pos":[216,366],"content":"This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.Resolve%2A> method.","nodes":[{"content":"This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.Resolve%2A> method.","pos":[0,150],"nodes":[{"content":"This method does not block until the operation is complete.","pos":[0,59]},{"content":"To block until the operation is complete, use the <ph id=\"ph1\">&lt;xref:System.Net.Dns.Resolve%2A&gt;</ph> method.","pos":[60,150],"source":" To block until the operation is complete, use the <xref:System.Net.Dns.Resolve%2A> method."}]}]},{"pos":[373,588],"content":"For more information about using the asynchronous programming model, see <bpt id=\"p1\">[</bpt>Calling Synchronous Methods Asynchronously<ept id=\"p1\">](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</ept>.","source":"For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)."},{"pos":[596,819],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[21091,21920],"yaml":true,"extradata":"MT"},{"content":"The DNS name of the host.","nodes":[{"pos":[0,25],"content":"The DNS name of the host.","nodes":[{"content":"The DNS name of the host.","pos":[0,25]}]}],"pos":[22764,22790],"yaml":true},{"content":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.","nodes":[{"pos":[0,122],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.AsyncCallback\"&gt;&lt;/xref&gt;</ph> delegate that references the method to invoke when the operation is complete.","source":"An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete."}],"pos":[22868,22991],"yaml":true},{"content":"A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"pos":[0,167],"content":"A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.","nodes":[{"content":"A user-defined object that contains information about the operation.","pos":[0,68]},{"content":"This object is passed to the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">requestCallback</ph><ept id=\"p1\">&lt;/code&gt;</ept> delegate when the operation is complete.","pos":[69,167],"source":" This object is passed to the <code>requestCallback</code> delegate when the operation is complete."}]}],"pos":[23058,23226],"yaml":true},{"content":"An <xref href=\"System.IAsyncResult\"></xref> instance that references the asynchronous request.","nodes":[{"pos":[0,94],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> instance that references the asynchronous request.","source":"An <xref href=\"System.IAsyncResult\"></xref> instance that references the asynchronous request."}],"pos":[23289,23384],"yaml":true},{"content":"<code>hostName</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;hostName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>hostName</code> is `null`."}],"pos":[23541,23574],"yaml":true},{"content":"The caller does not have permission to access DNS information.","nodes":[{"pos":[0,62],"content":"The caller does not have permission to access DNS information.","nodes":[{"content":"The caller does not have permission to access DNS information.","pos":[0,62]}]}],"pos":[23688,23751],"yaml":true},{"content":"Ends an asynchronous request for DNS information.","nodes":[{"pos":[0,49],"content":"Ends an asynchronous request for DNS information.","nodes":[{"content":"Ends an asynchronous request for DNS information.","pos":[0,49]}]}],"pos":[24944,24994],"yaml":true},{"content":"The <xref:System.Net.Dns.BeginGetHostAddresses%2A> method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  \n  \n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,227],"content":"The <xref:System.Net.Dns.BeginGetHostAddresses%2A> method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Dns.BeginGetHostAddresses%2A&gt;</ph> method queries a DNS server for the IP addresses associated with a host name.","pos":[0,128],"source":"The <xref:System.Net.Dns.BeginGetHostAddresses%2A> method queries a DNS server for the IP addresses associated with a host name."},{"content":"If <ph id=\"ph1\">`hostNameOrAddress`</ph> is an IP address, this address is returned without querying the DNS server.","pos":[129,227],"source":" If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server."}]},{"pos":[234,480],"content":"When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.","nodes":[{"content":"When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.","pos":[0,246]}]},{"pos":[488,711],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[25005,25724],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to the <xref href=\"System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\"></xref> method.","nodes":[{"pos":[0,194],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> instance returned by a call to the <ph id=\"ph2\">&lt;xref href=\"System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> method.","source":"An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to the <xref href=\"System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\"></xref> method."}],"pos":[25921,26116],"yaml":true},{"content":"An array of type <xref href=\"System.Net.IPAddress\"></xref> that holds the IP addresses for the host specified by the <code>hostNameOrAddress</code> parameter of <xref href=\"System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\"></xref>.","nodes":[{"pos":[0,269],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> that holds the IP addresses for the host specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter of <ph id=\"ph3\">&lt;xref href=\"System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph>.","source":"An array of type <xref href=\"System.Net.IPAddress\"></xref> that holds the IP addresses for the host specified by the <code>hostNameOrAddress</code> parameter of <xref href=\"System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\"></xref>."}],"pos":[26182,26452],"yaml":true},{"content":"Ends an asynchronous request for DNS information.","nodes":[{"pos":[0,49],"content":"Ends an asynchronous request for DNS information.","nodes":[{"content":"Ends an asynchronous request for DNS information.","pos":[0,49]}]}],"pos":[27643,27693],"yaml":true},{"content":"This method blocks until the operation is complete.  \n  \n To perform this operation synchronously, use the <xref:System.Net.Dns.GetHostByName%2A> method.  \n  \n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,51],"content":"This method blocks until the operation is complete.","nodes":[{"content":"This method blocks until the operation is complete.","pos":[0,51]}]},{"pos":[58,153],"content":"To perform this operation synchronously, use the <xref:System.Net.Dns.GetHostByName%2A> method.","nodes":[{"content":"To perform this operation synchronously, use the <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostByName%2A&gt;</ph> method.","pos":[0,95],"source":"To perform this operation synchronously, use the <xref:System.Net.Dns.GetHostByName%2A> method."}]},{"pos":[160,440],"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName&gt;</ph> property is set to <ph id=\"ph2\">`true`</ph>, the <ph id=\"ph3\">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id=\"ph4\">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.","source":"If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty."},{"pos":[448,671],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[27704,28385],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IAsyncResult\"></xref> instance that is returned by a call to the <xref href=\"System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)\"></xref> method.","nodes":[{"pos":[0,199],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> instance that is returned by a call to the <ph id=\"ph2\">&lt;xref href=\"System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> method.","source":"An <xref href=\"System.IAsyncResult\"></xref> instance that is returned by a call to the <xref href=\"System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)\"></xref> method."}],"pos":[28644,28844],"yaml":true},{"content":"An <xref href=\"System.Net.IPHostEntry\"></xref> object that contains DNS information about a host.","nodes":[{"pos":[0,97],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> object that contains DNS information about a host.","source":"An <xref href=\"System.Net.IPHostEntry\"></xref> object that contains DNS information about a host."}],"pos":[28910,29008],"yaml":true},{"content":"<code>asyncResult</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asyncResult</code> is `null`."}],"pos":[29169,29205],"yaml":true},{"content":"Ends an asynchronous request for DNS information.","nodes":[{"pos":[0,49],"content":"Ends an asynchronous request for DNS information.","nodes":[{"content":"Ends an asynchronous request for DNS information.","pos":[0,49]}]}],"pos":[30374,30424],"yaml":true},{"content":"This method blocks until the operation is complete.  \n  \n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n To perform this operation synchronously, use a <xref:System.Net.Dns.GetHostEntry%2A> method.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,51],"content":"This method blocks until the operation is complete.","nodes":[{"content":"This method blocks until the operation is complete.","pos":[0,51]}]},{"pos":[58,224],"content":"The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.","pos":[0,166],"source":"The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty."}]},{"pos":[231,323],"content":"To perform this operation synchronously, use a <xref:System.Net.Dns.GetHostEntry%2A> method.","nodes":[{"content":"To perform this operation synchronously, use a <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method.","pos":[0,92],"source":"To perform this operation synchronously, use a <xref:System.Net.Dns.GetHostEntry%2A> method."}]},{"pos":[331,554],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[30435,30999],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to an <xref href=\"System.Net.Dns.BeginGetHostEntry*\"></xref> method.","nodes":[{"pos":[0,140],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> instance returned by a call to an <ph id=\"ph2\">&lt;xref href=\"System.Net.Dns.BeginGetHostEntry*\"&gt;&lt;/xref&gt;</ph> method.","source":"An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to an <xref href=\"System.Net.Dns.BeginGetHostEntry*\"></xref> method."}],"pos":[31192,31333],"yaml":true},{"content":"An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host.","nodes":[{"pos":[0,105],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance that contains address information about the host.","source":"An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host."}],"pos":[31399,31505],"yaml":true},{"content":"<code>asyncResult</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asyncResult</code> is `null`."}],"pos":[31665,31701],"yaml":true},{"content":"Ends an asynchronous request for DNS information.","nodes":[{"pos":[0,49],"content":"Ends an asynchronous request for DNS information.","nodes":[{"content":"Ends an asynchronous request for DNS information.","pos":[0,49]}]}],"pos":[32791,32841],"yaml":true},{"content":"This method blocks until the operation is complete.  \n  \n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n To perform this operation synchronously, use the <xref:System.Net.Dns.Resolve%2A> method.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,51],"content":"This method blocks until the operation is complete.","nodes":[{"content":"This method blocks until the operation is complete.","pos":[0,51]}]},{"pos":[58,329],"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName&gt;</ph> is set to <ph id=\"ph2\">`true`</ph>, the <ph id=\"ph3\">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id=\"ph4\">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.","source":"If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty."},{"pos":[336,425],"content":"To perform this operation synchronously, use the <xref:System.Net.Dns.Resolve%2A> method.","nodes":[{"content":"To perform this operation synchronously, use the <ph id=\"ph1\">&lt;xref:System.Net.Dns.Resolve%2A&gt;</ph> method.","pos":[0,89],"source":"To perform this operation synchronously, use the <xref:System.Net.Dns.Resolve%2A> method."}]},{"pos":[433,656],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[32852,33518],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.IAsyncResult\"></xref> instance that is returned by a call to the <xref href=\"System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)\"></xref> method.","nodes":[{"pos":[0,193],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> instance that is returned by a call to the <ph id=\"ph2\">&lt;xref href=\"System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> method.","source":"An <xref href=\"System.IAsyncResult\"></xref> instance that is returned by a call to the <xref href=\"System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)\"></xref> method."}],"pos":[34285,34479],"yaml":true},{"content":"An <xref href=\"System.Net.IPHostEntry\"></xref> object that contains DNS information about a host.","nodes":[{"pos":[0,97],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> object that contains DNS information about a host.","source":"An <xref href=\"System.Net.IPHostEntry\"></xref> object that contains DNS information about a host."}],"pos":[34545,34643],"yaml":true},{"content":"<code>asyncResult</code> is `null`.","nodes":[{"pos":[0,35],"content":"<ph id=\"ph1\">&lt;code&gt;asyncResult&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>asyncResult</code> is `null`."}],"pos":[34798,34834],"yaml":true},{"content":"Returns the Internet Protocol (IP) addresses for the specified host.","nodes":[{"pos":[0,68],"content":"Returns the Internet Protocol (IP) addresses for the specified host.","nodes":[{"content":"Returns the Internet Protocol (IP) addresses for the specified host.","pos":[0,68]}]}],"pos":[35973,36042],"yaml":true},{"content":"The <xref:System.Net.Dns.GetHostAddresses%2A> method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  \n  \n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  \n  \n IPv6 addresses are filtered from the results of the <xref:System.Net.Dns.GetHostAddresses%2A> method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPAddress> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,222],"content":"The <xref:System.Net.Dns.GetHostAddresses%2A> method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostAddresses%2A&gt;</ph> method queries a DNS server for the IP addresses associated with a host name.","pos":[0,123],"source":"The <xref:System.Net.Dns.GetHostAddresses%2A> method queries a DNS server for the IP addresses associated with a host name."},{"content":"If <ph id=\"ph1\">`hostNameOrAddress`</ph> is an IP address, this address is returned without querying the DNS server.","pos":[124,222],"source":" If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server."}]},{"pos":[229,475],"content":"When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.","nodes":[{"content":"When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.","pos":[0,246]}]},{"pos":[482,796],"content":"IPv6 addresses are filtered from the results of the <xref:System.Net.Dns.GetHostAddresses%2A> method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPAddress> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.","nodes":[{"content":"IPv6 addresses are filtered from the results of the <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostAddresses%2A&gt;</ph> method if the local computer does not have IPv6 installed.","pos":[0,152],"source":"IPv6 addresses are filtered from the results of the <xref:System.Net.Dns.GetHostAddresses%2A> method if the local computer does not have IPv6 installed."},{"content":"As a result, it is possible to get back an empty <ph id=\"ph1\">&lt;xref:System.Net.IPAddress&gt;</ph> instance if only IPv6 results where available for the <ph id=\"ph2\">`hostNameOrAddress`</ph>.parameter.","pos":[153,314],"source":" As a result, it is possible to get back an empty <xref:System.Net.IPAddress> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter."}]},{"pos":[804,1027],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[36053,37090],"yaml":true,"extradata":"MT"},{"content":"The host name or IP address to resolve.","nodes":[{"pos":[0,39],"content":"The host name or IP address to resolve.","nodes":[{"content":"The host name or IP address to resolve.","pos":[0,39]}]}],"pos":[37823,37863],"yaml":true},{"content":"An array of type <xref href=\"System.Net.IPAddress\"></xref> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter.","nodes":[{"pos":[0,166],"content":"An array of type <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> that holds the IP addresses for the host that is specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"An array of type <xref href=\"System.Net.IPAddress\"></xref> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter."}],"pos":[37929,38096],"yaml":true},{"content":"<code>hostNameOrAddress</code> is `null`.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>hostNameOrAddress</code> is `null`."}],"pos":[38257,38299],"yaml":true},{"content":"The length of <code>hostNameOrAddress</code> is greater than 255 characters.","nodes":[{"pos":[0,76],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than 255 characters.","source":"The length of <code>hostNameOrAddress</code> is greater than 255 characters."}],"pos":[38413,38490],"yaml":true},{"content":"An error is encountered when resolving <code>hostNameOrAddress</code>.","nodes":[{"pos":[0,70],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An error is encountered when resolving <code>hostNameOrAddress</code>."}],"pos":[38604,38675],"yaml":true},{"content":"<code>hostNameOrAddress</code> is an invalid IP address.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an invalid IP address.","source":"<code>hostNameOrAddress</code> is an invalid IP address."}],"pos":[38769,38826],"yaml":true},{"content":"Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.","nodes":[{"pos":[0,97],"content":"Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.","nodes":[{"content":"Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.","pos":[0,97]}]}],"pos":[39946,40044],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved.  \n  \n This method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.","nodes":[{"pos":[0,152],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved.","nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the <ph id=\"ph2\">`hostNameOrAddress`</ph> has been resolved.","pos":[31,152],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved."}]},{"pos":[159,340],"content":"This method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.","nodes":[{"content":"This method queries a DNS server for the IP addresses associated with a host name.","pos":[0,82]},{"content":"If <ph id=\"ph1\">`hostNameOrAddress`</ph> is an IP address, this address is returned without querying the DNS server.","pos":[83,181],"source":" If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server."}]}],"pos":[40055,40400],"yaml":true,"extradata":"MT"},{"content":"The host name or IP address to resolve.","nodes":[{"pos":[0,39],"content":"The host name or IP address to resolve.","nodes":[{"content":"The host name or IP address to resolve.","pos":[0,39]}]}],"pos":[40628,40668],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns an array of type <xref href=\"System.Net.IPAddress\"></xref> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,387],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns an array of type <xref href=\"System.Net.IPAddress\"></xref> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns an array of type <ph id=\"ph2\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph> that holds the IP addresses for the host that is specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","pos":[57,321],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns an array of type <xref href=\"System.Net.IPAddress\"></xref> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter."}]}],"pos":[40763,41161],"yaml":true},{"content":"<code>hostNameOrAddress</code> is `null`.","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>hostNameOrAddress</code> is `null`."}],"pos":[41327,41369],"yaml":true},{"content":"The length of <code>hostNameOrAddress</code> is greater than 255 characters.","nodes":[{"pos":[0,76],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than 255 characters.","source":"The length of <code>hostNameOrAddress</code> is greater than 255 characters."}],"pos":[41483,41560],"yaml":true},{"content":"An error is encountered when resolving <code>hostNameOrAddress</code>.","nodes":[{"pos":[0,70],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An error is encountered when resolving <code>hostNameOrAddress</code>."}],"pos":[41674,41745],"yaml":true},{"content":"<code>hostNameOrAddress</code> is an invalid IP address.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">&lt;code&gt;hostNameOrAddress&lt;/code&gt;</ph> is an invalid IP address.","source":"<code>hostNameOrAddress</code> is an invalid IP address."}],"pos":[41839,41896],"yaml":true},{"content":"Creates an <xref href=\"System.Net.IPHostEntry\"></xref> instance from the specified <xref href=\"System.Net.IPAddress\"></xref>.","nodes":[{"pos":[0,125],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance from the specified <ph id=\"ph2\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph>.","source":"Creates an <xref href=\"System.Net.IPHostEntry\"></xref> instance from the specified <xref href=\"System.Net.IPAddress\"></xref>."}],"pos":[43080,43206],"yaml":true},{"content":"> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[2,225],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[43217,43455],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Net.IPAddress\"></xref>.","nodes":[{"pos":[0,45],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPAddress\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Net.IPAddress\"></xref>."}],"pos":[44338,44384],"yaml":true},{"content":"An <xref href=\"System.Net.IPHostEntry\"></xref>.  \n  \n An <xref href=\"System.Net.IPHostEntry\"></xref> instance.","nodes":[{"pos":[0,47],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph>.","source":"An <xref href=\"System.Net.IPHostEntry\"></xref>."},{"pos":[54,110],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance.","source":"An <xref href=\"System.Net.IPHostEntry\"></xref> instance."}],"pos":[44450,44569],"yaml":true},{"content":"<code>address</code> is `null`.","nodes":[{"pos":[0,31],"content":"<code>address</code> is `null`.","nodes":[{"content":"is <ph id=\"ph1\">`null`</ph>.","pos":[21,31],"source":" is `null`."}]}],"pos":[44730,44762],"yaml":true},{"content":"An error is encountered when resolving <code>address</code>.","nodes":[{"pos":[0,60],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An error is encountered when resolving <code>address</code>."}],"pos":[44876,44937],"yaml":true},{"content":"Creates an <xref href=\"System.Net.IPHostEntry\"></xref> instance from an IP address.","nodes":[{"pos":[0,83],"content":"Creates an <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance from an IP address.","source":"Creates an <xref href=\"System.Net.IPHostEntry\"></xref> instance from an IP address."}],"pos":[46076,46160],"yaml":true},{"content":"> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[2,225],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[46171,46409],"yaml":true,"extradata":"MT"},{"content":"An IP address.","nodes":[{"pos":[0,14],"content":"An IP address.","nodes":[{"content":"An IP address.","pos":[0,14]}]}],"pos":[46645,46660],"yaml":true},{"content":"An <xref href=\"System.Net.IPHostEntry\"></xref> instance.","nodes":[{"pos":[0,56],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance.","source":"An <xref href=\"System.Net.IPHostEntry\"></xref> instance."}],"pos":[46726,46783],"yaml":true},{"content":"<code>address</code> is `null`.","nodes":[{"pos":[0,31],"content":"<code>address</code> is `null`.","nodes":[{"content":"is <ph id=\"ph1\">`null`</ph>.","pos":[21,31],"source":" is `null`."}]}],"pos":[46944,46976],"yaml":true},{"content":"An error is encountered when resolving <code>address</code>.","nodes":[{"pos":[0,60],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An error is encountered when resolving <code>address</code>."}],"pos":[47090,47151],"yaml":true},{"content":"<code>address</code> is not a valid IP address.","nodes":[{"pos":[0,47],"content":"<code>address</code> is not a valid IP address.","nodes":[{"content":"is not a valid IP address.","pos":[21,47]}]}],"pos":[47241,47289],"yaml":true},{"content":"Gets the DNS information for the specified DNS host name.","nodes":[{"pos":[0,57],"content":"Gets the DNS information for the specified DNS host name.","nodes":[{"content":"Gets the DNS information for the specified DNS host name.","pos":[0,57]}]}],"pos":[48410,48468],"yaml":true},{"content":"The <xref:System.Net.Dns.GetHostByName%2A> method queries the Internet DNS server for host information. If you pass an empty string as the host name, this method retrieves the standard host name for the local computer.  \n  \n For asynchronous access to DNS information, use the <xref:System.Net.Dns.BeginGetHostByName%2A> and <xref:System.Net.Dns.EndGetHostByName%2A> methods.  \n  \n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,218],"content":"The <xref:System.Net.Dns.GetHostByName%2A> method queries the Internet DNS server for host information. If you pass an empty string as the host name, this method retrieves the standard host name for the local computer.","nodes":[{"content":"The <xref:System.Net.Dns.GetHostByName%2A> method queries the Internet DNS server for host information. If you pass an empty string as the host name, this method retrieves the standard host name for the local computer.","pos":[0,218],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostByName%2A&gt;</ph> method queries the Internet DNS server for host information.","pos":[0,103],"source":"The <xref:System.Net.Dns.GetHostByName%2A> method queries the Internet DNS server for host information."},{"content":"If you pass an empty string as the host name, this method retrieves the standard host name for the local computer.","pos":[104,218]}]}]},{"pos":[225,375],"content":"For asynchronous access to DNS information, use the <xref:System.Net.Dns.BeginGetHostByName%2A> and <xref:System.Net.Dns.EndGetHostByName%2A> methods.","nodes":[{"content":"For asynchronous access to DNS information, use the <ph id=\"ph1\">&lt;xref:System.Net.Dns.BeginGetHostByName%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Net.Dns.EndGetHostByName%2A&gt;</ph> methods.","pos":[0,150],"source":"For asynchronous access to DNS information, use the <xref:System.Net.Dns.BeginGetHostByName%2A> and <xref:System.Net.Dns.EndGetHostByName%2A> methods."}]},{"pos":[382,662],"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName&gt;</ph> property is set to <ph id=\"ph2\">`true`</ph>, the <ph id=\"ph3\">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id=\"ph4\">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.","source":"If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty."},{"pos":[670,893],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[48479,49382],"yaml":true,"extradata":"MT"},{"content":"The DNS name of the host.","nodes":[{"pos":[0,25],"content":"The DNS name of the host.","nodes":[{"content":"The DNS name of the host.","pos":[0,25]}]}],"pos":[50164,50190],"yaml":true},{"content":"An <xref href=\"System.Net.IPHostEntry\"></xref> object that contains host information for the address specified in <code>hostName</code>.","nodes":[{"pos":[0,136],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> object that contains host information for the address specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">hostName</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Net.IPHostEntry\"></xref> object that contains host information for the address specified in <code>hostName</code>."}],"pos":[50256,50393],"yaml":true},{"content":"<code>hostName</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;hostName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>hostName</code> is `null`."}],"pos":[50551,50584],"yaml":true},{"content":"The length of <code>hostName</code> is greater than 255 characters.","nodes":[{"pos":[0,67],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than 255 characters.","source":"The length of <code>hostName</code> is greater than 255 characters."}],"pos":[50698,50766],"yaml":true},{"content":"An error is encountered when resolving <code>hostName</code>.","nodes":[{"pos":[0,61],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostName</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An error is encountered when resolving <code>hostName</code>."}],"pos":[50880,50942],"yaml":true},{"content":"Resolves an IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance.","nodes":[{"pos":[0,82],"content":"Resolves an IP address to an <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance.","source":"Resolves an IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance."}],"pos":[52087,52170],"yaml":true},{"content":"The <xref:System.Net.Dns.GetHostEntry%2A> method queries a DNS server for the IP addresses and aliases associated with an IP address.  \n  \n IPv6 addresses are filtered from the results of the <xref:System.Net.Dns.GetHostEntry%2A> method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `address` parameter.  \n  \n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,133],"content":"The <xref:System.Net.Dns.GetHostEntry%2A> method queries a DNS server for the IP addresses and aliases associated with an IP address.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method queries a DNS server for the IP addresses and aliases associated with an IP address.","pos":[0,133],"source":"The <xref:System.Net.Dns.GetHostEntry%2A> method queries a DNS server for the IP addresses and aliases associated with an IP address."}]},{"pos":[140,442],"content":"IPv6 addresses are filtered from the results of the <xref:System.Net.Dns.GetHostEntry%2A> method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `address` parameter.","nodes":[{"content":"IPv6 addresses are filtered from the results of the <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method if the local computer does not have IPv6 installed.","pos":[0,148],"source":"IPv6 addresses are filtered from the results of the <xref:System.Net.Dns.GetHostEntry%2A> method if the local computer does not have IPv6 installed."},{"content":"As a result, it is possible to get back an empty <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance if only IPv6 results where available for the <ph id=\"ph2\">`address`</ph> parameter.","pos":[149,302],"source":" As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `address` parameter."}]},{"pos":[449,615],"content":"The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.","pos":[0,166],"source":"The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty."}]},{"pos":[623,846],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[52181,53037],"yaml":true,"extradata":"MT"},{"content":"An IP address.","nodes":[{"pos":[0,14],"content":"An IP address.","nodes":[{"content":"An IP address.","pos":[0,14]}]}],"pos":[53760,53775],"yaml":true},{"content":"An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>address</code>.","nodes":[{"pos":[0,139],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance that contains address information about the host specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>address</code>."}],"pos":[53841,53981],"yaml":true},{"content":"<code>address</code> is `null`.","nodes":[{"pos":[0,31],"content":"<code>address</code> is `null`.","nodes":[{"content":"is <ph id=\"ph1\">`null`</ph>.","pos":[21,31],"source":" is `null`."}]}],"pos":[54138,54170],"yaml":true},{"content":"An error is encountered when resolving <code>address</code>.","nodes":[{"pos":[0,60],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An error is encountered when resolving <code>address</code>."}],"pos":[54284,54345],"yaml":true},{"content":"<code>address</code> is an invalid IP address.","nodes":[{"pos":[0,46],"content":"<code>address</code> is an invalid IP address.","nodes":[{"content":"is an invalid IP address.","pos":[21,46]}]}],"pos":[54439,54486],"yaml":true},{"content":"Resolves a host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance.","nodes":[{"pos":[0,94],"content":"Resolves a host name or IP address to an <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance.","source":"Resolves a host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance."}],"pos":[55552,55647],"yaml":true},{"content":"The <xref:System.Net.Dns.GetHostEntry%2A> method queries a DNS server for the IP address that is associated with a host name or IP address.  \n  \n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.  \n  \n If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.  \n  \n The <xref:System.ArgumentException> exception is also returned if the `hostNameOrAddress` parameter contains <xref:System.Net.IPAddress.Any> or <xref:System.Net.IPAddress.IPv6Any>.  \n  \n The <xref:System.Net.Dns.GetHostEntry%2A> method assumes that if an IP literal string is passed in the `hostNameOrAddress` parameter that the application wants an <xref:System.Net.IPHostEntry> instance returned with all of the properties set. These properties include the <xref:System.Net.IPHostEntry.AddressList%2A>, <xref:System.Net.IPHostEntry.Aliases%2A>, and <xref:System.Net.IPHostEntry.HostName%2A>. As a result, the implementation of the <xref:System.Net.Dns.GetHostEntry%2A> method exhibits the following behavior when an IP string literal is passed:  \n  \n1.  The method tries to parse the address. If the `hostNameOrAddress` parameter contains a legal IP string literal, then the first phase succeeds.  \n  \n2.  A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property.  \n  \n3.  The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <xref:System.Net.IPHostEntry.AddressList%2A> property.  \n  \n For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).  \n  \n For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property.  \n  \n The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.  \n  \n IPv6 addresses are filtered from the results of the <xref:System.Net.Dns.GetHostEntry%2A> method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.  \n  \n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,139],"content":"The <xref:System.Net.Dns.GetHostEntry%2A> method queries a DNS server for the IP address that is associated with a host name or IP address.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method queries a DNS server for the IP address that is associated with a host name or IP address.","pos":[0,139],"source":"The <xref:System.Net.Dns.GetHostEntry%2A> method queries a DNS server for the IP address that is associated with a host name or IP address."}]},{"pos":[146,252],"content":"When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.","nodes":[{"content":"When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.","pos":[0,106]}]},{"pos":[259,638],"content":"If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.","nodes":[{"content":"If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.","pos":[0,379],"nodes":[{"content":"If the host name could not be found, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND).","pos":[0,169],"source":"If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND)."},{"content":"This exception can be returned if the DNS server does not respond.","pos":[170,236]},{"content":"This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.","pos":[237,379]}]}]},{"pos":[645,825],"content":"The <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph> exception is also returned if the <ph id=\"ph2\">`hostNameOrAddress`</ph> parameter contains <ph id=\"ph3\">&lt;xref:System.Net.IPAddress.Any&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Net.IPAddress.IPv6Any&gt;</ph>.","source":"The <xref:System.ArgumentException> exception is also returned if the `hostNameOrAddress` parameter contains <xref:System.Net.IPAddress.Any> or <xref:System.Net.IPAddress.IPv6Any>."},{"pos":[832,1391],"content":"The <xref:System.Net.Dns.GetHostEntry%2A> method assumes that if an IP literal string is passed in the `hostNameOrAddress` parameter that the application wants an <xref:System.Net.IPHostEntry> instance returned with all of the properties set. These properties include the <xref:System.Net.IPHostEntry.AddressList%2A>, <xref:System.Net.IPHostEntry.Aliases%2A>, and <xref:System.Net.IPHostEntry.HostName%2A>. As a result, the implementation of the <xref:System.Net.Dns.GetHostEntry%2A> method exhibits the following behavior when an IP string literal is passed:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method assumes that if an IP literal string is passed in the <ph id=\"ph2\">`hostNameOrAddress`</ph> parameter that the application wants an <ph id=\"ph3\">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned with all of the properties set.","pos":[0,242],"source":"The <xref:System.Net.Dns.GetHostEntry%2A> method assumes that if an IP literal string is passed in the `hostNameOrAddress` parameter that the application wants an <xref:System.Net.IPHostEntry> instance returned with all of the properties set."},{"content":"These properties include the <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry.AddressList%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Net.IPHostEntry.HostName%2A&gt;</ph>.","pos":[243,406],"source":" These properties include the <xref:System.Net.IPHostEntry.AddressList%2A>, <xref:System.Net.IPHostEntry.Aliases%2A>, and <xref:System.Net.IPHostEntry.HostName%2A>."},{"content":"As a result, the implementation of the <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method exhibits the following behavior when an IP string literal is passed:","pos":[407,559],"source":" As a result, the implementation of the <xref:System.Net.Dns.GetHostEntry%2A> method exhibits the following behavior when an IP string literal is passed:"}]},{"pos":[1401,1543],"content":"The method tries to parse the address. If the `hostNameOrAddress` parameter contains a legal IP string literal, then the first phase succeeds.","nodes":[{"content":"The method tries to parse the address.","pos":[0,38]},{"content":"If the <ph id=\"ph1\">`hostNameOrAddress`</ph> parameter contains a legal IP string literal, then the first phase succeeds.","pos":[39,142],"source":" If the `hostNameOrAddress` parameter contains a legal IP string literal, then the first phase succeeds."}]},{"pos":[1553,1731],"content":"A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property.","nodes":[{"content":"A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property.","pos":[0,178],"nodes":[{"content":"A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name.","pos":[0,100]},{"content":"This result is set as the <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry.HostName%2A&gt;</ph> property.","pos":[101,178],"source":" This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property."}]}]},{"pos":[1741,1928],"content":"The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <xref:System.Net.IPHostEntry.AddressList%2A> property.","nodes":[{"content":"The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry.AddressList%2A&gt;</ph> property.","pos":[0,187],"source":"The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <xref:System.Net.IPHostEntry.AddressList%2A> property."}]},{"pos":[1935,2263],"content":"For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).","nodes":[{"content":"For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).","pos":[0,328],"nodes":[{"content":"For an IPv4 string literal, all three steps above may succeed.","pos":[0,62]},{"content":"But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned.","pos":[63,182]},{"content":"This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).","pos":[183,328]}]}]},{"pos":[2270,2549],"content":"For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property.","nodes":[{"content":"For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property.","pos":[0,279],"nodes":[{"content":"For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address.","pos":[0,123]},{"content":"So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry.HostName%2A&gt;</ph> property.","pos":[124,279],"source":" So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property."}]}]},{"pos":[2556,2822],"content":"The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.","nodes":[{"content":"The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.","pos":[0,266],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostAddresses%2A&gt;</ph> method has different behavior with respect to IP literals.","pos":[0,104],"source":"The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals."},{"content":"If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result.","pos":[105,225]},{"content":"There is no attempt at a reverse lookup.","pos":[226,266]}]}]},{"pos":[2829,3141],"content":"IPv6 addresses are filtered from the results of the <xref:System.Net.Dns.GetHostEntry%2A> method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.","nodes":[{"content":"IPv6 addresses are filtered from the results of the <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostEntry%2A&gt;</ph> method if the local computer does not have IPv6 installed.","pos":[0,148],"source":"IPv6 addresses are filtered from the results of the <xref:System.Net.Dns.GetHostEntry%2A> method if the local computer does not have IPv6 installed."},{"content":"As a result, it is possible to get back an empty <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance if only IPv6 results where available for the <ph id=\"ph2\">`hostNameOrAddress`</ph>.parameter.","pos":[149,312],"source":" As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter."}]},{"pos":[3148,3314],"content":"The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.","pos":[0,166],"source":"The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty."}]},{"pos":[3322,3545],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[55658,59233],"yaml":true,"extradata":"MT"},{"content":"The host name or IP address to resolve.","nodes":[{"pos":[0,39],"content":"The host name or IP address to resolve.","nodes":[{"content":"The host name or IP address to resolve.","pos":[0,39]}]}],"pos":[59950,59990],"yaml":true},{"content":"An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>hostNameOrAddress</code>.","nodes":[{"pos":[0,149],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance that contains address information about the host specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>hostNameOrAddress</code>."}],"pos":[60056,60206],"yaml":true},{"content":"The <code>hostNameOrAddress</code> parameter is `null`.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>hostNameOrAddress</code> parameter is `null`."}],"pos":[60363,60419],"yaml":true},{"content":"The length of <code>hostNameOrAddress</code> parameter is greater than 255 characters.","nodes":[{"pos":[0,86],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than 255 characters.","source":"The length of <code>hostNameOrAddress</code> parameter is greater than 255 characters."}],"pos":[60533,60620],"yaml":true},{"content":"An error was encountered when resolving the <code>hostNameOrAddress</code> parameter.","nodes":[{"pos":[0,85],"content":"An error was encountered when resolving the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"An error was encountered when resolving the <code>hostNameOrAddress</code> parameter."}],"pos":[60734,60820],"yaml":true},{"content":"The <code>hostNameOrAddress</code> parameter is an invalid IP address.","nodes":[{"pos":[0,70],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an invalid IP address.","source":"The <code>hostNameOrAddress</code> parameter is an invalid IP address."}],"pos":[60914,60985],"yaml":true},{"content":"Resolves an IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance as an asynchronous operation.","nodes":[{"pos":[0,111],"content":"Resolves an IP address to an <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance as an asynchronous operation.","source":"Resolves an IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance as an asynchronous operation."}],"pos":[62111,62223],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `address` has been resolved.  \n  \n This method queries a DNS server for the IP addresses and aliases associated with an IP address.  \n  \n IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `address` parameter.  \n  \n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,142],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `address` has been resolved.","nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the <ph id=\"ph2\">`address`</ph> has been resolved.","pos":[31,142],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `address` has been resolved."}]},{"pos":[149,245],"content":"This method queries a DNS server for the IP addresses and aliases associated with an IP address.","nodes":[{"content":"This method queries a DNS server for the IP addresses and aliases associated with an IP address.","pos":[0,96]}]},{"pos":[252,517],"content":"IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `address` parameter.","nodes":[{"content":"IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed.","pos":[0,111]},{"content":"As a result, it is possible to get back an empty <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance if only IPv6 results where available for the <ph id=\"ph2\">`address`</ph> parameter.","pos":[112,265],"source":" As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `address` parameter."}]},{"pos":[524,690],"content":"The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.","pos":[0,166],"source":"The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty."}]},{"pos":[698,921],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[62234,63167],"yaml":true,"extradata":"MT"},{"content":"An IP address.","nodes":[{"pos":[0,14],"content":"An IP address.","nodes":[{"content":"An IP address.","pos":[0,14]}]}],"pos":[63392,63407],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns an <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>address</code>.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,360],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns an <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>address</code>.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns an <ph id=\"ph2\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance that contains address information about the host specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[57,294],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns an <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>address</code>."}]}],"pos":[63502,63873],"yaml":true},{"content":"<code>address</code> is `null`.","nodes":[{"pos":[0,31],"content":"<code>address</code> is `null`.","nodes":[{"content":"is <ph id=\"ph1\">`null`</ph>.","pos":[21,31],"source":" is `null`."}]}],"pos":[64035,64067],"yaml":true},{"content":"An error is encountered when resolving <code>address</code>.","nodes":[{"pos":[0,60],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">address</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An error is encountered when resolving <code>address</code>."}],"pos":[64181,64242],"yaml":true},{"content":"<code>address</code> is an invalid IP address.","nodes":[{"pos":[0,46],"content":"<code>address</code> is an invalid IP address.","nodes":[{"content":"is an invalid IP address.","pos":[21,46]}]}],"pos":[64336,64383],"yaml":true},{"content":"Resolves a host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance as an asynchronous operation.","nodes":[{"pos":[0,123],"content":"Resolves a host name or IP address to an <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance as an asynchronous operation.","source":"Resolves a host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance as an asynchronous operation."}],"pos":[65543,65667],"yaml":true},{"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved.  \n  \n This method queries a DNS server for the IP address that is associated with a host name or IP address.  \n  \n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.  \n  \n If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.  \n  \n The <xref:System.ArgumentException> exception is also returned if the `hostNameOrAddress` parameter contains <xref:System.Net.IPAddress.Any> or <xref:System.Net.IPAddress.IPv6Any>.  \n  \n This method assumes that if an IP literal string is passed in the `hostNameOrAddress` parameter that the application wants an <xref:System.Net.IPHostEntry> instance returned with all of the properties set. These properties include the <xref:System.Net.IPHostEntry.AddressList%2A>, <xref:System.Net.IPHostEntry.Aliases%2A>, and <xref:System.Net.IPHostEntry.HostName%2A>. As a result, the implementation of this method exhibits the following behavior when an IP string literal is passed:  \n  \n1.  The method tries to parse the address. If the `hostNameOrAddress` parameter contains a legal IP string literal, then the first phase succeeds.  \n  \n2.  A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property.  \n  \n3.  The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <xref:System.Net.IPHostEntry.AddressList%2A> property.  \n  \n For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).  \n  \n For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property.  \n  \n The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.  \n  \n IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.  \n  \n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,152],"content":"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved.","nodes":[{"content":"This operation will not block.","pos":[0,30]},{"content":"The returned <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task%601&gt;</ph> object will complete after the <ph id=\"ph2\">`hostNameOrAddress`</ph> has been resolved.","pos":[31,152],"source":" The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved."}]},{"pos":[159,261],"content":"This method queries a DNS server for the IP address that is associated with a host name or IP address.","nodes":[{"content":"This method queries a DNS server for the IP address that is associated with a host name or IP address.","pos":[0,102]}]},{"pos":[268,374],"content":"When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.","nodes":[{"content":"When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.","pos":[0,106]}]},{"pos":[381,760],"content":"If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.","nodes":[{"content":"If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.","pos":[0,379],"nodes":[{"content":"If the host name could not be found, the <ph id=\"ph1\">&lt;xref:System.Net.Sockets.SocketException&gt;</ph> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND).","pos":[0,169],"source":"If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND)."},{"content":"This exception can be returned if the DNS server does not respond.","pos":[170,236]},{"content":"This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.","pos":[237,379]}]}]},{"pos":[767,947],"content":"The <ph id=\"ph1\">&lt;xref:System.ArgumentException&gt;</ph> exception is also returned if the <ph id=\"ph2\">`hostNameOrAddress`</ph> parameter contains <ph id=\"ph3\">&lt;xref:System.Net.IPAddress.Any&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Net.IPAddress.IPv6Any&gt;</ph>.","source":"The <xref:System.ArgumentException> exception is also returned if the `hostNameOrAddress` parameter contains <xref:System.Net.IPAddress.Any> or <xref:System.Net.IPAddress.IPv6Any>."},{"pos":[954,1439],"content":"This method assumes that if an IP literal string is passed in the `hostNameOrAddress` parameter that the application wants an <xref:System.Net.IPHostEntry> instance returned with all of the properties set. These properties include the <xref:System.Net.IPHostEntry.AddressList%2A>, <xref:System.Net.IPHostEntry.Aliases%2A>, and <xref:System.Net.IPHostEntry.HostName%2A>. As a result, the implementation of this method exhibits the following behavior when an IP string literal is passed:","nodes":[{"content":"This method assumes that if an IP literal string is passed in the <ph id=\"ph1\">`hostNameOrAddress`</ph> parameter that the application wants an <ph id=\"ph2\">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned with all of the properties set.","pos":[0,205],"source":"This method assumes that if an IP literal string is passed in the `hostNameOrAddress` parameter that the application wants an <xref:System.Net.IPHostEntry> instance returned with all of the properties set."},{"content":"These properties include the <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry.AddressList%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Net.IPHostEntry.HostName%2A&gt;</ph>.","pos":[206,369],"source":" These properties include the <xref:System.Net.IPHostEntry.AddressList%2A>, <xref:System.Net.IPHostEntry.Aliases%2A>, and <xref:System.Net.IPHostEntry.HostName%2A>."},{"content":"As a result, the implementation of this method exhibits the following behavior when an IP string literal is passed:","pos":[370,485]}]},{"pos":[1449,1591],"content":"The method tries to parse the address. If the `hostNameOrAddress` parameter contains a legal IP string literal, then the first phase succeeds.","nodes":[{"content":"The method tries to parse the address.","pos":[0,38]},{"content":"If the <ph id=\"ph1\">`hostNameOrAddress`</ph> parameter contains a legal IP string literal, then the first phase succeeds.","pos":[39,142],"source":" If the `hostNameOrAddress` parameter contains a legal IP string literal, then the first phase succeeds."}]},{"pos":[1601,1779],"content":"A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property.","nodes":[{"content":"A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property.","pos":[0,178],"nodes":[{"content":"A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name.","pos":[0,100]},{"content":"This result is set as the <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry.HostName%2A&gt;</ph> property.","pos":[101,178],"source":" This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property."}]}]},{"pos":[1789,1976],"content":"The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <xref:System.Net.IPHostEntry.AddressList%2A> property.","nodes":[{"content":"The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry.AddressList%2A&gt;</ph> property.","pos":[0,187],"source":"The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <xref:System.Net.IPHostEntry.AddressList%2A> property."}]},{"pos":[1983,2311],"content":"For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).","nodes":[{"content":"For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).","pos":[0,328],"nodes":[{"content":"For an IPv4 string literal, all three steps above may succeed.","pos":[0,62]},{"content":"But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned.","pos":[63,182]},{"content":"This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).","pos":[183,328]}]}]},{"pos":[2318,2597],"content":"For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property.","nodes":[{"content":"For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property.","pos":[0,279],"nodes":[{"content":"For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address.","pos":[0,123]},{"content":"So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry.HostName%2A&gt;</ph> property.","pos":[124,279],"source":" So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property."}]}]},{"pos":[2604,2870],"content":"The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.","nodes":[{"content":"The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.","pos":[0,266],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Dns.GetHostAddresses%2A&gt;</ph> method has different behavior with respect to IP literals.","pos":[0,104],"source":"The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals."},{"content":"If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result.","pos":[105,225]},{"content":"There is no attempt at a reverse lookup.","pos":[226,266]}]}]},{"pos":[2877,3152],"content":"IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.","nodes":[{"content":"IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed.","pos":[0,111]},{"content":"As a result, it is possible to get back an empty <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance if only IPv6 results where available for the <ph id=\"ph2\">`hostNameOrAddress`</ph>.parameter.","pos":[112,275],"source":" As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter."}]},{"pos":[3159,3325],"content":"The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id=\"ph2\">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.","pos":[0,166],"source":"The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty."}]},{"pos":[3333,3556],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[65678,69266],"yaml":true,"extradata":"MT"},{"content":"The host name or IP address to resolve.","nodes":[{"pos":[0,39],"content":"The host name or IP address to resolve.","nodes":[{"content":"The host name or IP address to resolve.","pos":[0,39]}]}],"pos":[69490,69530],"yaml":true},{"content":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>.  \n  \n The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns an <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>hostNameOrAddress</code>.","nodes":[{"pos":[0,59],"content":"Returns <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1\"&gt;&lt;/xref&gt;</ph>.","source":"Returns <xref href=\"System.Threading.Tasks.Task`1\"></xref>."},{"pos":[66,370],"content":"The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns an <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>hostNameOrAddress</code>.","nodes":[{"content":"The task object representing the asynchronous operation.","pos":[0,56]},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Threading.Tasks.Task`1.Result\"&gt;&lt;/xref&gt;</ph> property on the task object returns an <ph id=\"ph2\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance that contains address information about the host specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph3\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[57,304],"source":" The <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> property on the task object returns an <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>hostNameOrAddress</code>."}]}],"pos":[69625,70006],"yaml":true},{"content":"The <code>hostNameOrAddress</code> parameter is `null`.","nodes":[{"pos":[0,55],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>hostNameOrAddress</code> parameter is `null`."}],"pos":[70168,70224],"yaml":true},{"content":"The length of <code>hostNameOrAddress</code> parameter is greater than 255 characters.","nodes":[{"pos":[0,86],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is greater than 255 characters.","source":"The length of <code>hostNameOrAddress</code> parameter is greater than 255 characters."}],"pos":[70338,70425],"yaml":true},{"content":"An error was encountered when resolving the <code>hostNameOrAddress</code> parameter.","nodes":[{"pos":[0,85],"content":"An error was encountered when resolving the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"An error was encountered when resolving the <code>hostNameOrAddress</code> parameter."}],"pos":[70539,70625],"yaml":true},{"content":"The <code>hostNameOrAddress</code> parameter is an invalid IP address.","nodes":[{"pos":[0,70],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostNameOrAddress</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is an invalid IP address.","source":"The <code>hostNameOrAddress</code> parameter is an invalid IP address."}],"pos":[70719,70790],"yaml":true},{"content":"Gets the host name of the local computer.","nodes":[{"pos":[0,41],"content":"Gets the host name of the local computer.","nodes":[{"content":"Gets the host name of the local computer.","pos":[0,41]}]}],"pos":[71851,71893],"yaml":true},{"content":"A string that contains the DNS host name of the local computer.","nodes":[{"pos":[0,63],"content":"A string that contains the DNS host name of the local computer.","nodes":[{"content":"A string that contains the DNS host name of the local computer.","pos":[0,63]}]}],"pos":[72557,72621],"yaml":true},{"content":"An error is encountered when resolving the local host name.","nodes":[{"pos":[0,59],"content":"An error is encountered when resolving the local host name.","nodes":[{"content":"An error is encountered when resolving the local host name.","pos":[0,59]}]}],"pos":[72789,72849],"yaml":true},{"content":"Resolves a DNS host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance.","nodes":[{"pos":[0,98],"content":"Resolves a DNS host name or IP address to an <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance.","source":"Resolves a DNS host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance."}],"pos":[73949,74048],"yaml":true},{"content":"The <xref:System.Net.Dns.Resolve%2A> method queries a DNS server for the IP address associated with a host name or IP address.  \n  \n When `hostName` is a DNS-style host name associated with multiple IP addresses, only the first IP address that resolves to that host name is returned.  \n  \n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \n  \n> [!NOTE]\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","nodes":[{"pos":[0,126],"content":"The <xref:System.Net.Dns.Resolve%2A> method queries a DNS server for the IP address associated with a host name or IP address.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Net.Dns.Resolve%2A&gt;</ph> method queries a DNS server for the IP address associated with a host name or IP address.","pos":[0,126],"source":"The <xref:System.Net.Dns.Resolve%2A> method queries a DNS server for the IP address associated with a host name or IP address."}]},{"pos":[133,283],"content":"When <ph id=\"ph1\">`hostName`</ph> is a DNS-style host name associated with multiple IP addresses, only the first IP address that resolves to that host name is returned.","source":"When `hostName` is a DNS-style host name associated with multiple IP addresses, only the first IP address that resolves to that host name is returned."},{"pos":[290,570],"content":"If the <ph id=\"ph1\">&lt;xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName&gt;</ph> property is set to <ph id=\"ph2\">`true`</ph>, the <ph id=\"ph3\">&lt;xref:System.Net.IPHostEntry.Aliases%2A&gt;</ph> property of the <ph id=\"ph4\">&lt;xref:System.Net.IPHostEntry&gt;</ph> instance returned is not populated by this method and will always be empty.","source":"If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty."},{"pos":[578,801],"content":"[!NOTE]\n This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","leadings":["","> "],"nodes":[{"content":" This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).","pos":[8,221],"nodes":[{"content":"This member emits trace information when you enable network tracing in your application.","pos":[1,89]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Network Tracing in the .NET Framework<ept id=\"p1\">](~/docs/framework/network-programming/network-tracing.md)</ept>.","pos":[90,213],"source":" For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md)."}]}]}],"pos":[74059,74870],"yaml":true,"extradata":"MT"},{"content":"A DNS-style host name or IP address.","nodes":[{"pos":[0,36],"content":"A DNS-style host name or IP address.","nodes":[{"content":"A DNS-style host name or IP address.","pos":[0,36]}]}],"pos":[75597,75634],"yaml":true},{"content":"An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>hostName</code>.","nodes":[{"pos":[0,140],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Net.IPHostEntry\"&gt;&lt;/xref&gt;</ph> instance that contains address information about the host specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">hostName</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>hostName</code>."}],"pos":[75700,75841],"yaml":true},{"content":"<code>hostName</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;hostName&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>hostName</code> is `null`."}],"pos":[75993,76026],"yaml":true},{"content":"The length of <code>hostName</code> is greater than 255 characters.","nodes":[{"pos":[0,67],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is greater than 255 characters.","source":"The length of <code>hostName</code> is greater than 255 characters."}],"pos":[76140,76208],"yaml":true},{"content":"An error is encountered when resolving <code>hostName</code>.","nodes":[{"pos":[0,61],"content":"An error is encountered when resolving <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">hostName</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An error is encountered when resolving <code>hostName</code>."}],"pos":[76322,76384],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Net.Dns\n  commentId: T:System.Net.Dns\n  id: Dns\n  children:\n  - System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\n  - System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)\n  - System.Net.Dns.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)\n  - System.Net.Dns.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)\n  - System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)\n  - System.Net.Dns.EndGetHostAddresses(System.IAsyncResult)\n  - System.Net.Dns.EndGetHostByName(System.IAsyncResult)\n  - System.Net.Dns.EndGetHostEntry(System.IAsyncResult)\n  - System.Net.Dns.EndResolve(System.IAsyncResult)\n  - System.Net.Dns.GetHostAddresses(System.String)\n  - System.Net.Dns.GetHostAddressesAsync(System.String)\n  - System.Net.Dns.GetHostByAddress(System.Net.IPAddress)\n  - System.Net.Dns.GetHostByAddress(System.String)\n  - System.Net.Dns.GetHostByName(System.String)\n  - System.Net.Dns.GetHostEntry(System.Net.IPAddress)\n  - System.Net.Dns.GetHostEntry(System.String)\n  - System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)\n  - System.Net.Dns.GetHostEntryAsync(System.String)\n  - System.Net.Dns.GetHostName\n  - System.Net.Dns.Resolve(System.String)\n  langs:\n  - csharp\n  name: Dns\n  nameWithType: Dns\n  fullName: System.Net.Dns\n  type: Class\n  assemblies:\n  - System.Net.NameResolution\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Provides simple domain name resolution functionality.\n  remarks: \"The <xref:System.Net.Dns> class is a static class that retrieves information about a specific host from the Internet Domain Name System (DNS).  \\n  \\n The host information from the DNS query is returned in an instance of the <xref:System.Net.IPHostEntry> class. If the specified host has more than one entry in the DNS database, <xref:System.Net.IPHostEntry> contains multiple IP addresses and aliases.\"\n  example:\n  - \"The following example queries the DNS database for information on the host www.contoso.com.  \\n  \\n [!code-cpp[Classic Dns Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic Dns Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic Dns Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic Dns Example/CS/source.cs#1)]\\n [!code-vb[Classic Dns Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic Dns Example/VB/source.vb#1)]\"\n  syntax:\n    content: public static class Dns\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\n  id: BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: BeginGetHostAddresses(String, AsyncCallback, Object)\n  nameWithType: Dns.BeginGetHostAddresses(String, AsyncCallback, Object)\n  fullName: Dns.BeginGetHostAddresses(String, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Asynchronously returns the Internet Protocol (IP) addresses for the specified host.\n  remarks: \"The <xref:System.Net.Dns.BeginGetHostAddresses%2A> method asynchronously queries a DNS server for the IP addresses that are associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \\n  \\n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  \\n  \\n The asynchronous <xref:System.Net.Dns.BeginGetHostAddresses%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostAddresses%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostAddresses%2A> method.  \\n  \\n For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)\"\n  syntax:\n    content: public static IAsyncResult BeginGetHostAddresses (string hostNameOrAddress, AsyncCallback requestCallback, object state);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The host name or IP address to resolve.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.\n    - id: state\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> instance that references the asynchronous request.\n  overload: System.Net.Dns.BeginGetHostAddresses*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostNameOrAddress</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostNameOrAddress</code> is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>hostNameOrAddress</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hostNameOrAddress</code> is an invalid IP address.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)\n  id: BeginGetHostByName(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: BeginGetHostByName(String, AsyncCallback, Object)\n  nameWithType: Dns.BeginGetHostByName(String, AsyncCallback, Object)\n  fullName: Dns.BeginGetHostByName(String, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Begins an asynchronous request for <xref href=\"System.Net.IPHostEntry\"></xref> information about the specified DNS host name.\n  remarks: \"The asynchronous <xref:System.Net.Dns.BeginGetHostByName%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostByName%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostByName%2A> method.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use BeginGetHostEntry instead\")]\n\n      public static IAsyncResult BeginGetHostByName (string hostName, AsyncCallback requestCallback, object stateObject);\n    parameters:\n    - id: hostName\n      type: System.String\n      description: The DNS name of the host.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.\n    - id: stateObject\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> instance that references the asynchronous request.\n  overload: System.Net.Dns.BeginGetHostByName*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostName</code> is `null`.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error was encountered executing the DNS query.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Dns.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)\n  id: BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: BeginGetHostEntry(IPAddress, AsyncCallback, Object)\n  nameWithType: Dns.BeginGetHostEntry(IPAddress, AsyncCallback, Object)\n  fullName: Dns.BeginGetHostEntry(IPAddress, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Asynchronously resolves an IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance.\n  remarks: \"The <xref:System.Net.Dns.BeginGetHostEntry%2A> method asynchronously queries a DNS server for the IP addresses and aliases associated with an IP address.  \\n  \\n **Note** This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \\n  \\n The asynchronous <xref:System.Net.Dns.BeginGetHostEntry%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)\"\n  example:\n  - \"The following code example uses the <xref:System.Net.Dns.BeginGetHostEntry%2A> method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  \\n  \\n [!code-cpp[System.Net.Dns#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Dns/CPP/dnsnewmethods.cpp#2)]\\n [!code-csharp[System.Net.Dns#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Dns/CS/dnsnewmethods.cs#2)]\\n [!code-vb[System.Net.Dns#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Dns/vb/dnsnewmethods.vb#2)]\"\n  syntax:\n    content: public static IAsyncResult BeginGetHostEntry (System.Net.IPAddress address, AsyncCallback requestCallback, object stateObject);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: The IP address to resolve.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.\n    - id: stateObject\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> instance that references the asynchronous request.\n  overload: System.Net.Dns.BeginGetHostEntry*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is `null`.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>address</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>address</code> is an invalid IP address.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Dns.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)\n  id: BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: BeginGetHostEntry(String, AsyncCallback, Object)\n  nameWithType: Dns.BeginGetHostEntry(String, AsyncCallback, Object)\n  fullName: Dns.BeginGetHostEntry(String, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Asynchronously resolves a host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance.\n  remarks: \"The <xref:System.Net.Dns.BeginGetHostEntry%2A> method queries a DNS server for the IP address that is associated with a host name or IP address.  \\n  \\n **Note** This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).  \\n  \\n The asynchronous <xref:System.Net.Dns.BeginGetHostEntry%2A> operation must be completed by calling the <xref:System.Net.Dns.EndGetHostEntry%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.GetHostEntry%2A> method.  \\n  \\n For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).\"\n  example:\n  - \"The following code example uses the <xref:System.Net.Dns.BeginGetHostEntry%2A> method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  \\n  \\n [!code-cpp[System.Net.Dns#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Dns/CPP/dnsnewmethods.cpp#2)]\\n [!code-csharp[System.Net.Dns#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Dns/CS/dnsnewmethods.cs#2)]\\n [!code-vb[System.Net.Dns#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Dns/vb/dnsnewmethods.vb#2)]\"\n  syntax:\n    content: public static IAsyncResult BeginGetHostEntry (string hostNameOrAddress, AsyncCallback requestCallback, object stateObject);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The host name or IP address to resolve.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.\n    - id: stateObject\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> instance that references the asynchronous request.\n  overload: System.Net.Dns.BeginGetHostEntry*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostNameOrAddress</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostNameOrAddress</code> is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>hostNameOrAddress</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hostNameOrAddress</code> is an invalid IP address.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)\n  commentId: M:System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)\n  id: BeginResolve(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: BeginResolve(String, AsyncCallback, Object)\n  nameWithType: Dns.BeginResolve(String, AsyncCallback, Object)\n  fullName: Dns.BeginResolve(String, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Begins an asynchronous request to resolve a DNS host name or IP address to an <xref href=\"System.Net.IPAddress\"></xref> instance.\n  remarks: \"The asynchronous <xref:System.Net.Dns.BeginResolve%2A> operation must be completed by calling the <xref:System.Net.Dns.EndResolve%2A> method. Typically, the method is invoked by the `requestCallback` delegate.  \\n  \\n This method does not block until the operation is complete. To block until the operation is complete, use the <xref:System.Net.Dns.Resolve%2A> method.  \\n  \\n For more information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following example uses <xref:System.Net.Dns.BeginResolve%2A> to resolve a DNS host name to an <xref:System.Net.IPAddress>.  \\n  \\n [!code-cpp[Dns_Begin_EndResolve#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Dns_Begin_EndResolve/CPP/dns_begin_endresolve.cpp#1)]\\n [!code-csharp[Dns_Begin_EndResolve#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Dns_Begin_EndResolve/CS/dns_begin_endresolve.cs#1)]\\n [!code-vb[Dns_Begin_EndResolve#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Dns_Begin_EndResolve/VB/dns_begin_endresolve.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use BeginGetHostEntry instead\")]\n\n      public static IAsyncResult BeginResolve (string hostName, AsyncCallback requestCallback, object stateObject);\n    parameters:\n    - id: hostName\n      type: System.String\n      description: The DNS name of the host.\n    - id: requestCallback\n      type: System.AsyncCallback\n      description: An <xref href=\"System.AsyncCallback\"></xref> delegate that references the method to invoke when the operation is complete.\n    - id: stateObject\n      type: System.Object\n      description: A user-defined object that contains information about the operation. This object is passed to the <code>requestCallback</code> delegate when the operation is complete.\n    return:\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> instance that references the asynchronous request.\n  overload: System.Net.Dns.BeginResolve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostName</code> is `null`.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: The caller does not have permission to access DNS information.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.EndGetHostAddresses(System.IAsyncResult)\n  commentId: M:System.Net.Dns.EndGetHostAddresses(System.IAsyncResult)\n  id: EndGetHostAddresses(System.IAsyncResult)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: EndGetHostAddresses(IAsyncResult)\n  nameWithType: Dns.EndGetHostAddresses(IAsyncResult)\n  fullName: Dns.EndGetHostAddresses(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Ends an asynchronous request for DNS information.\n  remarks: \"The <xref:System.Net.Dns.BeginGetHostAddresses%2A> method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  \\n  \\n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public static System.Net.IPAddress[] EndGetHostAddresses (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to the <xref href=\"System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\"></xref> method.\n    return:\n      type: System.Net.IPAddress[]\n      description: An array of type <xref href=\"System.Net.IPAddress\"></xref> that holds the IP addresses for the host specified by the <code>hostNameOrAddress</code> parameter of <xref href=\"System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\"></xref>.\n  overload: System.Net.Dns.EndGetHostAddresses*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.EndGetHostByName(System.IAsyncResult)\n  commentId: M:System.Net.Dns.EndGetHostByName(System.IAsyncResult)\n  id: EndGetHostByName(System.IAsyncResult)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: EndGetHostByName(IAsyncResult)\n  nameWithType: Dns.EndGetHostByName(IAsyncResult)\n  fullName: Dns.EndGetHostByName(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Ends an asynchronous request for DNS information.\n  remarks: \"This method blocks until the operation is complete.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Dns.GetHostByName%2A> method.  \\n  \\n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use EndGetHostEntry instead\")]\n\n      public static System.Net.IPHostEntry EndGetHostByName (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> instance that is returned by a call to the <xref href=\"System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)\"></xref> method.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> object that contains DNS information about a host.\n  overload: System.Net.Dns.EndGetHostByName*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is `null`.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.EndGetHostEntry(System.IAsyncResult)\n  commentId: M:System.Net.Dns.EndGetHostEntry(System.IAsyncResult)\n  id: EndGetHostEntry(System.IAsyncResult)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: EndGetHostEntry(IAsyncResult)\n  nameWithType: Dns.EndGetHostEntry(IAsyncResult)\n  fullName: Dns.EndGetHostEntry(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Ends an asynchronous request for DNS information.\n  remarks: \"This method blocks until the operation is complete.  \\n  \\n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n To perform this operation synchronously, use a <xref:System.Net.Dns.GetHostEntry%2A> method.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public static System.Net.IPHostEntry EndGetHostEntry (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> instance returned by a call to an <xref href=\"System.Net.Dns.BeginGetHostEntry*\"></xref> method.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host.\n  overload: System.Net.Dns.EndGetHostEntry*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.EndResolve(System.IAsyncResult)\n  commentId: M:System.Net.Dns.EndResolve(System.IAsyncResult)\n  id: EndResolve(System.IAsyncResult)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: EndResolve(IAsyncResult)\n  nameWithType: Dns.EndResolve(IAsyncResult)\n  fullName: Dns.EndResolve(IAsyncResult)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Ends an asynchronous request for DNS information.\n  remarks: \"This method blocks until the operation is complete.  \\n  \\n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n To perform this operation synchronously, use the <xref:System.Net.Dns.Resolve%2A> method.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following example ends an asynchronous request for DNS host information.  \\n  \\n [!code-cpp[Dns_Begin_EndResolve#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Dns_Begin_EndResolve/CPP/dns_begin_endresolve.cpp#1)]\\n [!code-csharp[Dns_Begin_EndResolve#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Dns_Begin_EndResolve/CS/dns_begin_endresolve.cs#1)]\\n [!code-vb[Dns_Begin_EndResolve#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Dns_Begin_EndResolve/VB/dns_begin_endresolve.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use EndGetHostEntry instead\")]\n\n      public static System.Net.IPHostEntry EndResolve (IAsyncResult asyncResult);\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: An <xref href=\"System.IAsyncResult\"></xref> instance that is returned by a call to the <xref href=\"System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)\"></xref> method.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> object that contains DNS information about a host.\n  overload: System.Net.Dns.EndResolve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>asyncResult</code> is `null`.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.GetHostAddresses(System.String)\n  commentId: M:System.Net.Dns.GetHostAddresses(System.String)\n  id: GetHostAddresses(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostAddresses(String)\n  nameWithType: Dns.GetHostAddresses(String)\n  fullName: Dns.GetHostAddresses(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Returns the Internet Protocol (IP) addresses for the specified host.\n  remarks: \"The <xref:System.Net.Dns.GetHostAddresses%2A> method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.  \\n  \\n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host for all operating systems except Windows Server 2003; for Windows Server 2003, both IPv4 and IPv6 addresses for the local host are returned.  \\n  \\n IPv6 addresses are filtered from the results of the <xref:System.Net.Dns.GetHostAddresses%2A> method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPAddress> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example uses the <xref:System.Net.Dns.GetHostAddresses%2A> method to resolve an IP address to an array of type <xref:System.Net.IPAddress>.  \\n  \\n [!code-cpp[System.Net.Dns#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Dns/CPP/dnsnewmethods.cpp#3)]\\n [!code-csharp[System.Net.Dns#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Dns/CS/dnsnewmethods.cs#3)]\\n [!code-vb[System.Net.Dns#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Dns/vb/dnsnewmethods.vb#3)]\"\n  syntax:\n    content: public static System.Net.IPAddress[] GetHostAddresses (string hostNameOrAddress);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The host name or IP address to resolve.\n    return:\n      type: System.Net.IPAddress[]\n      description: An array of type <xref href=\"System.Net.IPAddress\"></xref> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter.\n  overload: System.Net.Dns.GetHostAddresses*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostNameOrAddress</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostNameOrAddress</code> is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>hostNameOrAddress</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hostNameOrAddress</code> is an invalid IP address.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.GetHostAddressesAsync(System.String)\n  commentId: M:System.Net.Dns.GetHostAddressesAsync(System.String)\n  id: GetHostAddressesAsync(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostAddressesAsync(String)\n  nameWithType: Dns.GetHostAddressesAsync(String)\n  fullName: Dns.GetHostAddressesAsync(String)\n  type: Method\n  assemblies:\n  - System.Net.NameResolution\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved.  \\n  \\n This method queries a DNS server for the IP addresses associated with a host name. If `hostNameOrAddress` is an IP address, this address is returned without querying the DNS server.\"\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Net.IPAddress[]> GetHostAddressesAsync (string hostNameOrAddress);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The host name or IP address to resolve.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.IPAddress[]}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns an array of type <xref href=\\\"System.Net.IPAddress\\\"></xref> that holds the IP addresses for the host that is specified by the <code>hostNameOrAddress</code> parameter.\"\n  overload: System.Net.Dns.GetHostAddressesAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostNameOrAddress</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostNameOrAddress</code> is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>hostNameOrAddress</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>hostNameOrAddress</code> is an invalid IP address.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.GetHostByAddress(System.Net.IPAddress)\n  commentId: M:System.Net.Dns.GetHostByAddress(System.Net.IPAddress)\n  id: GetHostByAddress(System.Net.IPAddress)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostByAddress(IPAddress)\n  nameWithType: Dns.GetHostByAddress(IPAddress)\n  fullName: Dns.GetHostByAddress(IPAddress)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Creates an <xref href=\"System.Net.IPHostEntry\"></xref> instance from the specified <xref href=\"System.Net.IPAddress\"></xref>.\n  remarks: >-\n    > [!NOTE]\n\n    >  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\n  example:\n  - \"The following example creates a <xref:System.Net.IPHostEntry> from an <xref:System.Net.IPAddress>.  \\n  \\n [!code-cpp[Dns_GetHostByAddress_IPAddress#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Dns_GetHostByAddress_IPAddress/CPP/dns_gethostbyaddress_ipaddress.cpp#1)]\\n [!code-csharp[Dns_GetHostByAddress_IPAddress#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Dns_GetHostByAddress_IPAddress/CS/dns_gethostbyaddress_ipaddress.cs#1)]\\n [!code-vb[Dns_GetHostByAddress_IPAddress#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Dns_GetHostByAddress_IPAddress/VB/dns_gethostbyaddress_ipaddress.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use GetHostEntry instead\")]\n\n      public static System.Net.IPHostEntry GetHostByAddress (System.Net.IPAddress address);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An <xref href=\"System.Net.IPAddress\"></xref>.\n    return:\n      type: System.Net.IPHostEntry\n      description: \"An <xref href=\\\"System.Net.IPHostEntry\\\"></xref>.  \\n  \\n An <xref href=\\\"System.Net.IPHostEntry\\\"></xref> instance.\"\n  overload: System.Net.Dns.GetHostByAddress*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is `null`.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>address</code>.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.GetHostByAddress(System.String)\n  commentId: M:System.Net.Dns.GetHostByAddress(System.String)\n  id: GetHostByAddress(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostByAddress(String)\n  nameWithType: Dns.GetHostByAddress(String)\n  fullName: Dns.GetHostByAddress(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Creates an <xref href=\"System.Net.IPHostEntry\"></xref> instance from an IP address.\n  remarks: >-\n    > [!NOTE]\n\n    >  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use GetHostEntry instead\")]\n\n      public static System.Net.IPHostEntry GetHostByAddress (string address);\n    parameters:\n    - id: address\n      type: System.String\n      description: An IP address.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> instance.\n  overload: System.Net.Dns.GetHostByAddress*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is `null`.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>address</code>.\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: <code>address</code> is not a valid IP address.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.GetHostByName(System.String)\n  commentId: M:System.Net.Dns.GetHostByName(System.String)\n  id: GetHostByName(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostByName(String)\n  nameWithType: Dns.GetHostByName(String)\n  fullName: Dns.GetHostByName(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Gets the DNS information for the specified DNS host name.\n  remarks: \"The <xref:System.Net.Dns.GetHostByName%2A> method queries the Internet DNS server for host information. If you pass an empty string as the host name, this method retrieves the standard host name for the local computer.  \\n  \\n For asynchronous access to DNS information, use the <xref:System.Net.Dns.BeginGetHostByName%2A> and <xref:System.Net.Dns.EndGetHostByName%2A> methods.  \\n  \\n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following example uses the <xref:System.Net.Dns.GetHostByName%2A> method to get the DNS information for the specified DNS host name.  \\n  \\n [!code-cpp[Dns_GetHostByName#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Dns_GetHostByName/CPP/dns_gethostbyname.cpp#1)]\\n [!code-csharp[Dns_GetHostByName#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Dns_GetHostByName/CS/dns_gethostbyname.cs#1)]\\n [!code-vb[Dns_GetHostByName#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Dns_GetHostByName/VB/dns_gethostbyname.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use GetHostEntry instead\")]\n\n      public static System.Net.IPHostEntry GetHostByName (string hostName);\n    parameters:\n    - id: hostName\n      type: System.String\n      description: The DNS name of the host.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> object that contains host information for the address specified in <code>hostName</code>.\n  overload: System.Net.Dns.GetHostByName*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostName</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostName</code> is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>hostName</code>.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.GetHostEntry(System.Net.IPAddress)\n  commentId: M:System.Net.Dns.GetHostEntry(System.Net.IPAddress)\n  id: GetHostEntry(System.Net.IPAddress)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostEntry(IPAddress)\n  nameWithType: Dns.GetHostEntry(IPAddress)\n  fullName: Dns.GetHostEntry(IPAddress)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Resolves an IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance.\n  remarks: \"The <xref:System.Net.Dns.GetHostEntry%2A> method queries a DNS server for the IP addresses and aliases associated with an IP address.  \\n  \\n IPv6 addresses are filtered from the results of the <xref:System.Net.Dns.GetHostEntry%2A> method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `address` parameter.  \\n  \\n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following code example uses the <xref:System.Net.Dns.GetHostEntry%2A> method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  \\n  \\n [!code-cpp[System.Net.Dns#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Dns/CPP/dnsnewmethods.cpp#1)]\\n [!code-csharp[System.Net.Dns#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Dns/CS/dnsnewmethods.cs#1)]\\n [!code-vb[System.Net.Dns#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Dns/vb/dnsnewmethods.vb#1)]\"\n  syntax:\n    content: public static System.Net.IPHostEntry GetHostEntry (System.Net.IPAddress address);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An IP address.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>address</code>.\n  overload: System.Net.Dns.GetHostEntry*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is `null`.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>address</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>address</code> is an invalid IP address.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.GetHostEntry(System.String)\n  commentId: M:System.Net.Dns.GetHostEntry(System.String)\n  id: GetHostEntry(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostEntry(String)\n  nameWithType: Dns.GetHostEntry(String)\n  fullName: Dns.GetHostEntry(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Resolves a host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance.\n  remarks: \"The <xref:System.Net.Dns.GetHostEntry%2A> method queries a DNS server for the IP address that is associated with a host name or IP address.  \\n  \\n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.  \\n  \\n If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.  \\n  \\n The <xref:System.ArgumentException> exception is also returned if the `hostNameOrAddress` parameter contains <xref:System.Net.IPAddress.Any> or <xref:System.Net.IPAddress.IPv6Any>.  \\n  \\n The <xref:System.Net.Dns.GetHostEntry%2A> method assumes that if an IP literal string is passed in the `hostNameOrAddress` parameter that the application wants an <xref:System.Net.IPHostEntry> instance returned with all of the properties set. These properties include the <xref:System.Net.IPHostEntry.AddressList%2A>, <xref:System.Net.IPHostEntry.Aliases%2A>, and <xref:System.Net.IPHostEntry.HostName%2A>. As a result, the implementation of the <xref:System.Net.Dns.GetHostEntry%2A> method exhibits the following behavior when an IP string literal is passed:  \\n  \\n1.  The method tries to parse the address. If the `hostNameOrAddress` parameter contains a legal IP string literal, then the first phase succeeds.  \\n  \\n2.  A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property.  \\n  \\n3.  The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <xref:System.Net.IPHostEntry.AddressList%2A> property.  \\n  \\n For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).  \\n  \\n For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property.  \\n  \\n The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.  \\n  \\n IPv6 addresses are filtered from the results of the <xref:System.Net.Dns.GetHostEntry%2A> method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.  \\n  \\n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following example uses the <xref:System.Net.Dns.GetHostEntry%2A> method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  \\n  \\n [!code-cpp[System.Net.Dns#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Dns/CPP/dnsnewmethods.cpp#1)]\\n [!code-csharp[System.Net.Dns#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Dns/CS/dnsnewmethods.cs#1)]\\n [!code-vb[System.Net.Dns#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Dns/vb/dnsnewmethods.vb#1)]\"\n  syntax:\n    content: public static System.Net.IPHostEntry GetHostEntry (string hostNameOrAddress);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The host name or IP address to resolve.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>hostNameOrAddress</code>.\n  overload: System.Net.Dns.GetHostEntry*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>hostNameOrAddress</code> parameter is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostNameOrAddress</code> parameter is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error was encountered when resolving the <code>hostNameOrAddress</code> parameter.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>hostNameOrAddress</code> parameter is an invalid IP address.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)\n  commentId: M:System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)\n  id: GetHostEntryAsync(System.Net.IPAddress)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostEntryAsync(IPAddress)\n  nameWithType: Dns.GetHostEntryAsync(IPAddress)\n  fullName: Dns.GetHostEntryAsync(IPAddress)\n  type: Method\n  assemblies:\n  - System.Net.NameResolution\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Resolves an IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `address` has been resolved.  \\n  \\n This method queries a DNS server for the IP addresses and aliases associated with an IP address.  \\n  \\n IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `address` parameter.  \\n  \\n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Net.IPHostEntry> GetHostEntryAsync (System.Net.IPAddress address);\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: An IP address.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.IPHostEntry}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns an <xref href=\\\"System.Net.IPHostEntry\\\"></xref> instance that contains address information about the host specified in <code>address</code>.\"\n  overload: System.Net.Dns.GetHostEntryAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>address</code> is `null`.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>address</code>.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>address</code> is an invalid IP address.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.GetHostEntryAsync(System.String)\n  commentId: M:System.Net.Dns.GetHostEntryAsync(System.String)\n  id: GetHostEntryAsync(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostEntryAsync(String)\n  nameWithType: Dns.GetHostEntryAsync(String)\n  fullName: Dns.GetHostEntryAsync(String)\n  type: Method\n  assemblies:\n  - System.Net.NameResolution\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Resolves a host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance as an asynchronous operation.\n  remarks: \"This operation will not block. The returned <xref:System.Threading.Tasks.Task%601> object will complete after the `hostNameOrAddress` has been resolved.  \\n  \\n This method queries a DNS server for the IP address that is associated with a host name or IP address.  \\n  \\n When an empty string is passed as the host name, this method returns the IPv4 addresses of the local host.  \\n  \\n If the host name could not be found, the <xref:System.Net.Sockets.SocketException> exception is returned with a value of 11001 (Windows Sockets error WSAHOST_NOT_FOUND). This exception can be returned if the DNS server does not respond. This exception can also be returned if the name is not an official host name or alias, or it cannot be found in the database(s) being queried.  \\n  \\n The <xref:System.ArgumentException> exception is also returned if the `hostNameOrAddress` parameter contains <xref:System.Net.IPAddress.Any> or <xref:System.Net.IPAddress.IPv6Any>.  \\n  \\n This method assumes that if an IP literal string is passed in the `hostNameOrAddress` parameter that the application wants an <xref:System.Net.IPHostEntry> instance returned with all of the properties set. These properties include the <xref:System.Net.IPHostEntry.AddressList%2A>, <xref:System.Net.IPHostEntry.Aliases%2A>, and <xref:System.Net.IPHostEntry.HostName%2A>. As a result, the implementation of this method exhibits the following behavior when an IP string literal is passed:  \\n  \\n1.  The method tries to parse the address. If the `hostNameOrAddress` parameter contains a legal IP string literal, then the first phase succeeds.  \\n  \\n2.  A reverse lookup using the IP address of the IP string literal is attempted to obtain the host name. This result is set as the <xref:System.Net.IPHostEntry.HostName%2A> property.  \\n  \\n3.  The host name from this reverse lookup is used again to obtain all the possible IP addresses associated with the name and set as the <xref:System.Net.IPHostEntry.AddressList%2A> property.  \\n  \\n For an IPv4 string literal, all three steps above may succeed. But it is possible for a stale DNS record for an IPv4 address that actually belongs to a different host to be returned. This may cause step #3 to fail and throw an exception (there is a DNS PTR record for the IPv4 address, but no DNS A record for the IPv4 address).  \\n  \\n For IPv6, step #2 above may fail, since most IPv6 deployments do not register the reverse (PTR) record for an IPv6 address. So this method may return the string IPv6 literal as the fully-qualified domain (FQDN) host name in the <xref:System.Net.IPHostEntry.HostName%2A> property.  \\n  \\n The <xref:System.Net.Dns.GetHostAddresses%2A> method has different behavior with respect to IP literals. If step #1 above succeeds (it successfully parses as an IP address), that address is immediately returned as the result. There is no attempt at a reverse lookup.  \\n  \\n IPv6 addresses are filtered from the results of this method if the local computer does not have IPv6 installed. As a result, it is possible to get back an empty <xref:System.Net.IPHostEntry> instance if only IPv6 results where available for the `hostNameOrAddress`.parameter.  \\n  \\n The <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  syntax:\n    content: public static System.Threading.Tasks.Task<System.Net.IPHostEntry> GetHostEntryAsync (string hostNameOrAddress);\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: The host name or IP address to resolve.\n    return:\n      type: System.Threading.Tasks.Task{System.Net.IPHostEntry}\n      description: \"Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\"></xref>.  \\n  \\n The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\"></xref> property on the task object returns an <xref href=\\\"System.Net.IPHostEntry\\\"></xref> instance that contains address information about the host specified in <code>hostNameOrAddress</code>.\"\n  overload: System.Net.Dns.GetHostEntryAsync*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>hostNameOrAddress</code> parameter is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostNameOrAddress</code> parameter is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error was encountered when resolving the <code>hostNameOrAddress</code> parameter.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>hostNameOrAddress</code> parameter is an invalid IP address.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.GetHostName\n  commentId: M:System.Net.Dns.GetHostName\n  id: GetHostName\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: GetHostName()\n  nameWithType: Dns.GetHostName()\n  fullName: Dns.GetHostName()\n  type: Method\n  assemblies:\n  - System.Net.NameResolution\n  - System\n  - netstandard\n  namespace: System.Net\n  summary: Gets the host name of the local computer.\n  remarks: ''\n  example:\n  - \"The following example uses the <xref:System.Net.Dns.GetHostName%2A> method to obtain the host name of the local computer.  \\n  \\n [!code-cpp[Dns_GetHostName#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Dns_GetHostName/CPP/dns_gethostname.cpp#1)]\\n [!code-csharp[Dns_GetHostName#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Dns_GetHostName/CS/dns_gethostname.cs#1)]\\n [!code-vb[Dns_GetHostName#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Dns_GetHostName/VB/dns_gethostname.vb#1)]\"\n  syntax:\n    content: public static string GetHostName ();\n    parameters: []\n    return:\n      type: System.String\n      description: A string that contains the DNS host name of the local computer.\n  overload: System.Net.Dns.GetHostName*\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving the local host name.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\n- uid: System.Net.Dns.Resolve(System.String)\n  commentId: M:System.Net.Dns.Resolve(System.String)\n  id: Resolve(System.String)\n  parent: System.Net.Dns\n  langs:\n  - csharp\n  name: Resolve(String)\n  nameWithType: Dns.Resolve(String)\n  fullName: Dns.Resolve(String)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: Resolves a DNS host name or IP address to an <xref href=\"System.Net.IPHostEntry\"></xref> instance.\n  remarks: \"The <xref:System.Net.Dns.Resolve%2A> method queries a DNS server for the IP address associated with a host name or IP address.  \\n  \\n When `hostName` is a DNS-style host name associated with multiple IP addresses, only the first IP address that resolves to that host name is returned.  \\n  \\n If the <xref:System.Net.Configuration.Ipv6Element.Enabled%2A?displayProperty=fullName> property is set to `true`, the <xref:System.Net.IPHostEntry.Aliases%2A> property of the <xref:System.Net.IPHostEntry> instance returned is not populated by this method and will always be empty.  \\n  \\n> [!NOTE]\\n>  This member emits trace information when you enable network tracing in your application. For more information, see [Network Tracing in the .NET Framework](~/docs/framework/network-programming/network-tracing.md).\"\n  example:\n  - \"The following example uses the <xref:System.Net.Dns.Resolve%2A> method to resolve an IP address to an <xref:System.Net.IPHostEntry> instance.  \\n  \\n [!code-cpp[Dns_Resolve#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Dns_Resolve/CPP/dns_resolve.cpp#1)]\\n [!code-csharp[Dns_Resolve#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Dns_Resolve/CS/dns_resolve.cs#1)]\\n [!code-vb[Dns_Resolve#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Dns_Resolve/VB/dns_resolve.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"Use GetHostEntry instead\")]\n\n      public static System.Net.IPHostEntry Resolve (string hostName);\n    parameters:\n    - id: hostName\n      type: System.String\n      description: A DNS-style host name or IP address.\n    return:\n      type: System.Net.IPHostEntry\n      description: An <xref href=\"System.Net.IPHostEntry\"></xref> instance that contains address information about the host specified in <code>hostName</code>.\n  overload: System.Net.Dns.Resolve*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>hostName</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The length of <code>hostName</code> is greater than 255 characters.\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: An error is encountered when resolving <code>hostName</code>.\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n  ms.author: bobdel\n  manager: markl\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Net.Sockets.SocketException\n  parent: System.Net.Sockets\n  isExternal: false\n  name: SocketException\n  nameWithType: SocketException\n  fullName: System.Net.Sockets.SocketException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  nameWithType: FormatException\n  fullName: System.FormatException\n- uid: System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginGetHostAddresses(String, AsyncCallback, Object)\n  nameWithType: Dns.BeginGetHostAddresses(String, AsyncCallback, Object)\n  fullName: Dns.BeginGetHostAddresses(String, AsyncCallback, Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: false\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginGetHostByName(String, AsyncCallback, Object)\n  nameWithType: Dns.BeginGetHostByName(String, AsyncCallback, Object)\n  fullName: Dns.BeginGetHostByName(String, AsyncCallback, Object)\n- uid: System.Net.Dns.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginGetHostEntry(IPAddress, AsyncCallback, Object)\n  nameWithType: Dns.BeginGetHostEntry(IPAddress, AsyncCallback, Object)\n  fullName: Dns.BeginGetHostEntry(IPAddress, AsyncCallback, Object)\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  nameWithType: IPAddress\n  fullName: System.Net.IPAddress\n- uid: System.Net.Dns.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginGetHostEntry(String, AsyncCallback, Object)\n  nameWithType: Dns.BeginGetHostEntry(String, AsyncCallback, Object)\n  fullName: Dns.BeginGetHostEntry(String, AsyncCallback, Object)\n- uid: System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginResolve(String, AsyncCallback, Object)\n  nameWithType: Dns.BeginResolve(String, AsyncCallback, Object)\n  fullName: Dns.BeginResolve(String, AsyncCallback, Object)\n- uid: System.Net.Dns.EndGetHostAddresses(System.IAsyncResult)\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndGetHostAddresses(IAsyncResult)\n  nameWithType: Dns.EndGetHostAddresses(IAsyncResult)\n  fullName: Dns.EndGetHostAddresses(IAsyncResult)\n- uid: System.Net.IPAddress[]\n  parent: System.Net\n  isExternal: false\n  name: IPAddress[]\n  nameWithType: IPAddress[]\n  fullName: System.Net.IPAddress[]\n  spec.csharp:\n  - uid: System.Net.IPAddress\n    name: IPAddress\n    nameWithType: IPAddress\n    fullName: System.Net.IPAddress\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Net.Dns.EndGetHostByName(System.IAsyncResult)\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndGetHostByName(IAsyncResult)\n  nameWithType: Dns.EndGetHostByName(IAsyncResult)\n  fullName: Dns.EndGetHostByName(IAsyncResult)\n- uid: System.Net.IPHostEntry\n  parent: System.Net\n  isExternal: false\n  name: IPHostEntry\n  nameWithType: IPHostEntry\n  fullName: System.Net.IPHostEntry\n- uid: System.Net.Dns.EndGetHostEntry(System.IAsyncResult)\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndGetHostEntry(IAsyncResult)\n  nameWithType: Dns.EndGetHostEntry(IAsyncResult)\n  fullName: Dns.EndGetHostEntry(IAsyncResult)\n- uid: System.Net.Dns.EndResolve(System.IAsyncResult)\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndResolve(IAsyncResult)\n  nameWithType: Dns.EndResolve(IAsyncResult)\n  fullName: Dns.EndResolve(IAsyncResult)\n- uid: System.Net.Dns.GetHostAddresses(System.String)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostAddresses(String)\n  nameWithType: Dns.GetHostAddresses(String)\n  fullName: Dns.GetHostAddresses(String)\n- uid: System.Net.Dns.GetHostAddressesAsync(System.String)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostAddressesAsync(String)\n  nameWithType: Dns.GetHostAddressesAsync(String)\n  fullName: Dns.GetHostAddressesAsync(String)\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Threading.Tasks.Task{System.Net.IPAddress[]}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<IPAddress[]>\n  nameWithType: Task<IPAddress[]>\n  fullName: System.Threading.Tasks.Task<System.Net.IPAddress[]>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.IPAddress\n    name: IPAddress\n    nameWithType: IPAddress\n    fullName: System.Net.IPAddress\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Dns.GetHostByAddress(System.Net.IPAddress)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostByAddress(IPAddress)\n  nameWithType: Dns.GetHostByAddress(IPAddress)\n  fullName: Dns.GetHostByAddress(IPAddress)\n- uid: System.Net.Dns.GetHostByAddress(System.String)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostByAddress(String)\n  nameWithType: Dns.GetHostByAddress(String)\n  fullName: Dns.GetHostByAddress(String)\n- uid: System.Net.Dns.GetHostByName(System.String)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostByName(String)\n  nameWithType: Dns.GetHostByName(String)\n  fullName: Dns.GetHostByName(String)\n- uid: System.Net.Dns.GetHostEntry(System.Net.IPAddress)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostEntry(IPAddress)\n  nameWithType: Dns.GetHostEntry(IPAddress)\n  fullName: Dns.GetHostEntry(IPAddress)\n- uid: System.Net.Dns.GetHostEntry(System.String)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostEntry(String)\n  nameWithType: Dns.GetHostEntry(String)\n  fullName: Dns.GetHostEntry(String)\n- uid: System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostEntryAsync(IPAddress)\n  nameWithType: Dns.GetHostEntryAsync(IPAddress)\n  fullName: Dns.GetHostEntryAsync(IPAddress)\n- uid: System.Threading.Tasks.Task{System.Net.IPHostEntry}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<IPHostEntry>\n  nameWithType: Task<IPHostEntry>\n  fullName: System.Threading.Tasks.Task<System.Net.IPHostEntry>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Net.IPHostEntry\n    name: IPHostEntry\n    nameWithType: IPHostEntry\n    fullName: System.Net.IPHostEntry\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Net.Dns.GetHostEntryAsync(System.String)\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostEntryAsync(String)\n  nameWithType: Dns.GetHostEntryAsync(String)\n  fullName: Dns.GetHostEntryAsync(String)\n- uid: System.Net.Dns.GetHostName\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostName()\n  nameWithType: Dns.GetHostName()\n  fullName: Dns.GetHostName()\n- uid: System.Net.Dns.Resolve(System.String)\n  parent: System.Net.Dns\n  isExternal: false\n  name: Resolve(String)\n  nameWithType: Dns.Resolve(String)\n  fullName: Dns.Resolve(String)\n- uid: System.Net.Dns.BeginGetHostAddresses*\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginGetHostAddresses\n  nameWithType: Dns.BeginGetHostAddresses\n  fullName: Dns.BeginGetHostAddresses\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Net.Dns.BeginGetHostByName*\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginGetHostByName\n  nameWithType: Dns.BeginGetHostByName\n  fullName: Dns.BeginGetHostByName\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Net.Dns.BeginGetHostEntry*\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginGetHostEntry\n  nameWithType: Dns.BeginGetHostEntry\n  fullName: Dns.BeginGetHostEntry\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Net.Dns.BeginResolve*\n  parent: System.Net.Dns\n  isExternal: false\n  name: BeginResolve\n  nameWithType: Dns.BeginResolve\n  fullName: Dns.BeginResolve\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Net.Dns.EndGetHostAddresses*\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndGetHostAddresses\n  nameWithType: Dns.EndGetHostAddresses\n  fullName: Dns.EndGetHostAddresses\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Net.Dns.EndGetHostByName*\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndGetHostByName\n  nameWithType: Dns.EndGetHostByName\n  fullName: Dns.EndGetHostByName\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Net.Dns.EndGetHostEntry*\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndGetHostEntry\n  nameWithType: Dns.EndGetHostEntry\n  fullName: Dns.EndGetHostEntry\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Net.Dns.EndResolve*\n  parent: System.Net.Dns\n  isExternal: false\n  name: EndResolve\n  nameWithType: Dns.EndResolve\n  fullName: Dns.EndResolve\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Net.Dns.GetHostAddresses*\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostAddresses\n  nameWithType: Dns.GetHostAddresses\n  fullName: Dns.GetHostAddresses\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Net.Dns.GetHostAddressesAsync*\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostAddressesAsync\n  nameWithType: Dns.GetHostAddressesAsync\n  fullName: Dns.GetHostAddressesAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Net.Dns.GetHostByAddress*\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostByAddress\n  nameWithType: Dns.GetHostByAddress\n  fullName: Dns.GetHostByAddress\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Net.Dns.GetHostByName*\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostByName\n  nameWithType: Dns.GetHostByName\n  fullName: Dns.GetHostByName\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Net.Dns.GetHostEntry*\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostEntry\n  nameWithType: Dns.GetHostEntry\n  fullName: Dns.GetHostEntry\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Net.Dns.GetHostEntryAsync*\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostEntryAsync\n  nameWithType: Dns.GetHostEntryAsync\n  fullName: Dns.GetHostEntryAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Net.Dns.GetHostName*\n  parent: System.Net.Dns\n  isExternal: false\n  name: GetHostName\n  nameWithType: Dns.GetHostName\n  fullName: Dns.GetHostName\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Net.Dns.Resolve*\n  parent: System.Net.Dns\n  isExternal: false\n  name: Resolve\n  nameWithType: Dns.Resolve\n  fullName: Dns.Resolve\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Net/Dns.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}