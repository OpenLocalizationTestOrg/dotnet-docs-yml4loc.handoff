{"nodes":[{"content":"Defines a keyboard combination that can be used to invoke a command.","nodes":[{"pos":[0,68],"content":"Defines a keyboard combination that can be used to invoke a command.","nodes":[{"content":"Defines a keyboard combination that can be used to invoke a command.","pos":[0,68]}]}],"pos":[969,1038],"yaml":true},{"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves. For example, you can create a <xref:System.Windows.Input.KeyGesture> by using only the F12 key, but to use the X key in a <xref:System.Windows.Input.KeyGesture> it must be paired with a modifier key.  \n  \n In general, you can  \n  \n You can use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to an <xref:System.Windows.Input.ICommand>, so that the command is invoked when the <xref:System.Windows.Input.KeyGesture> occurs.  \n  \n For <xref:System.Windows.Input.KeyGesture> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usages, the property that is generally set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is <xref:System.Windows.Input.KeyBinding.Gesture%2A>, in cases where the gesture represents both a standard key and a modifier key. You can also set the <xref:System.Windows.Input.KeyBinding.Gesture%2A> property to be just a function key, or just a modifier key combination. However, it is more common to set the <xref:System.Windows.Input.KeyBinding.Key%2A> property if the intended command binding is a function key with no modifiers, or <xref:System.Windows.Input.KeyBinding.Modifiers%2A> if the intended command binding is for modifier keys only.  \n  \n<a name=\"xamlAttributeUsage_KeyGesture\"></a>   \n## XAML Attribute Usage  \n  \n```  \n<object property=\"oneOrMoreModifierKeys+key\"/>  \n- or -  \n<object property=\"functionKey\"/>  \n```  \n  \n<a name=\"xamlValues_KeyGesture\"></a>   \n## XAML Values  \n `functionKey`  \n <xref:System.Windows.Input.Key>  \n  \n A single key value, which must be one of the function keys (F1-12) or numeric keypad keys.  \n  \n `oneOrMoreModifierKeys`  \n One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a \"+\" character.  \n  \n `key`  \n <xref:System.Windows.Input.Key>  \n  \n A single key value.","nodes":[{"pos":[0,487],"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves. For example, you can create a <xref:System.Windows.Input.KeyGesture> by using only the F12 key, but to use the X key in a <xref:System.Windows.Input.KeyGesture> it must be paired with a modifier key.","nodes":[{"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves. For example, you can create a <xref:System.Windows.Input.KeyGesture> by using only the F12 key, but to use the X key in a <xref:System.Windows.Input.KeyGesture> it must be paired with a modifier key.","pos":[0,487],"nodes":[{"content":"In most cases, a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> must be associated with one or more <ph id=\"ph2\">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.","pos":[0,133],"source":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>."},{"content":"The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> by themselves.","pos":[134,287],"source":" The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves."},{"content":"For example, you can create a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> by using only the F12 key, but to use the X key in a <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> it must be paired with a modifier key.","pos":[288,487],"source":" For example, you can create a <xref:System.Windows.Input.KeyGesture> by using only the F12 key, but to use the X key in a <xref:System.Windows.Input.KeyGesture> it must be paired with a modifier key."}]}]},{"pos":[494,513],"content":"In general, you can","nodes":[{"content":"In general, you can","pos":[0,19]}]},{"pos":[520,752],"content":"You can use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to an <xref:System.Windows.Input.ICommand>, so that the command is invoked when the <xref:System.Windows.Input.KeyGesture> occurs.","nodes":[{"content":"You can use a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding&gt;</ph> to bind a <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> to an <ph id=\"ph3\">&lt;xref:System.Windows.Input.ICommand&gt;</ph>, so that the command is invoked when the <ph id=\"ph4\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> occurs.","pos":[0,232],"source":"You can use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to an <xref:System.Windows.Input.ICommand>, so that the command is invoked when the <xref:System.Windows.Input.KeyGesture> occurs."}]},{"pos":[759,1522],"content":"For <xref:System.Windows.Input.KeyGesture> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usages, the property that is generally set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is <xref:System.Windows.Input.KeyBinding.Gesture%2A>, in cases where the gesture represents both a standard key and a modifier key. You can also set the <xref:System.Windows.Input.KeyBinding.Gesture%2A> property to be just a function key, or just a modifier key combination. However, it is more common to set the <xref:System.Windows.Input.KeyBinding.Key%2A> property if the intended command binding is a function key with no modifiers, or <xref:System.Windows.Input.KeyBinding.Modifiers%2A> if the intended command binding is for modifier keys only.","nodes":[{"content":"For <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> <ph id=\"ph2\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> usages, the property that is generally set in <ph id=\"ph3\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph> is <ph id=\"ph4\">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph>, in cases where the gesture represents both a standard key and a modifier key.","pos":[0,344],"source":"For <xref:System.Windows.Input.KeyGesture> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usages, the property that is generally set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is <xref:System.Windows.Input.KeyBinding.Gesture%2A>, in cases where the gesture represents both a standard key and a modifier key."},{"content":"You can also set the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding.Gesture%2A&gt;</ph> property to be just a function key, or just a modifier key combination.","pos":[345,487],"source":" You can also set the <xref:System.Windows.Input.KeyBinding.Gesture%2A> property to be just a function key, or just a modifier key combination."},{"content":"However, it is more common to set the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyBinding.Key%2A&gt;</ph> property if the intended command binding is a function key with no modifiers, or <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyBinding.Modifiers%2A&gt;</ph> if the intended command binding is for modifier keys only.","pos":[488,763],"source":" However, it is more common to set the <xref:System.Windows.Input.KeyBinding.Key%2A> property if the intended command binding is a function key with no modifiers, or <xref:System.Windows.Input.KeyBinding.Modifiers%2A> if the intended command binding is for modifier keys only."}]},{"pos":[1579,1599],"content":"XAML Attribute Usage","linkify":"XAML Attribute Usage","nodes":[{"content":"XAML Attribute Usage","pos":[0,20]}]},{"pos":[1756,1767],"content":"XAML Values","linkify":"XAML Values","nodes":[{"content":"XAML Values","pos":[0,11]}]},{"pos":[1771,1819],"content":"`functionKey`  \n <xref:System.Windows.Input.Key>","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Key&gt;</ph>","pos":[17,48],"source":" <xref:System.Windows.Input.Key>"}]},{"pos":[1826,1916],"content":"A single key value, which must be one of the function keys (F1-12) or numeric keypad keys.","nodes":[{"content":"A single key value, which must be one of the function keys (F1-12) or numeric keypad keys.","pos":[0,90]}]},{"pos":[1923,2077],"content":"`oneOrMoreModifierKeys`  \n One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a \"+\" character.","nodes":[{"content":"One or more modifier keys, defined by the <ph id=\"ph1\">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph> enumeration, delimited with a \"+\" character.","pos":[27,154],"source":" One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a \"+\" character."}]},{"pos":[2084,2124],"content":"`key`  \n <xref:System.Windows.Input.Key>","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Input.Key&gt;</ph>","pos":[9,40],"source":" <xref:System.Windows.Input.Key>"}]},{"pos":[2131,2150],"content":"A single key value.","nodes":[{"content":"A single key value.","pos":[0,19]}]}],"pos":[1049,3242],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> class with the specified <xref href=\"System.Windows.Input.Key\"></xref>.","nodes":[{"pos":[0,158],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph> class with the specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.Key\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> class with the specified <xref href=\"System.Windows.Input.Key\"></xref>."}],"pos":[6281,6440],"yaml":true},{"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.","nodes":[{"pos":[0,288],"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.","nodes":[{"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.","pos":[0,288],"nodes":[{"content":"In most cases, a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> must be associated with one or more <ph id=\"ph2\">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.","pos":[0,133],"source":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>."},{"content":"The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> by themselves.","pos":[135,288],"source":"  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves."}]}]}],"pos":[6451,6740],"yaml":true,"extradata":"MT"},{"content":"The key associated with this gesture.","nodes":[{"pos":[0,37],"content":"The key associated with this gesture.","nodes":[{"content":"The key associated with this gesture.","pos":[0,37]}]}],"pos":[7610,7648],"yaml":true},{"content":"<code>key</code> is not a valid <xref href=\"System.Windows.Input.Key\"></xref>.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.Key\"&gt;&lt;/xref&gt;</ph>.","source":"<code>key</code> is not a valid <xref href=\"System.Windows.Input.Key\"></xref>."}],"pos":[7859,7938],"yaml":true},{"content":"<code>key</code> is not a valid <xref href=\"System.Windows.Input.KeyGesture\"></xref>.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph>.","source":"<code>key</code> is not a valid <xref href=\"System.Windows.Input.KeyGesture\"></xref>."}],"pos":[8040,8126],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> class with the specified <xref href=\"System.Windows.Input.Key\"></xref> and <xref href=\"System.Windows.Input.ModifierKeys\"></xref>.","nodes":[{"pos":[0,217],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph> class with the specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.Key\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph3\">&lt;xref href=\"System.Windows.Input.ModifierKeys\"&gt;&lt;/xref&gt;</ph>.","source":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> class with the specified <xref href=\"System.Windows.Input.Key\"></xref> and <xref href=\"System.Windows.Input.ModifierKeys\"></xref>."}],"pos":[9254,9472],"yaml":true},{"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.","nodes":[{"pos":[0,287],"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.","nodes":[{"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.","pos":[0,287],"nodes":[{"content":"In most cases, a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> must be associated with one or more <ph id=\"ph2\">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.","pos":[0,133],"source":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>."},{"content":"The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> by themselves.","pos":[134,287],"source":" The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves."}]}]}],"pos":[9483,9771],"yaml":true,"extradata":"MT"},{"content":"The key associated with the gesture.","nodes":[{"pos":[0,36],"content":"The key associated with the gesture.","nodes":[{"content":"The key associated with the gesture.","pos":[0,36]}]}],"pos":[10705,10742],"yaml":true},{"content":"The modifier keys associated with the gesture.","nodes":[{"pos":[0,46],"content":"The modifier keys associated with the gesture.","nodes":[{"content":"The modifier keys associated with the gesture.","pos":[0,46]}]}],"pos":[10827,10874],"yaml":true},{"content":"<code>modifiers</code> is not a valid <xref href=\"System.Windows.Input.ModifierKeys\"></xref>  \n  \n -or-  \n  \n <code>key</code> is not a valid <xref href=\"System.Windows.Input.Key\"></xref>.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">&lt;code&gt;modifiers&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.ModifierKeys\"&gt;&lt;/xref&gt;</ph>","source":"<code>modifiers</code> is not a valid <xref href=\"System.Windows.Input.ModifierKeys\"></xref>"},{"pos":[99,103],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[110,188],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.Key\"&gt;&lt;/xref&gt;</ph>.","source":"<code>key</code> is not a valid <xref href=\"System.Windows.Input.Key\"></xref>."}],"pos":[11085,11284],"yaml":true},{"content":"<code>key</code> and <code>modifiers</code> do not form a valid <xref href=\"System.Windows.Input.KeyGesture\"></xref>.","nodes":[{"pos":[0,117],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;modifiers&lt;/code&gt;</ph> do not form a valid <ph id=\"ph3\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph>.","source":"<code>key</code> and <code>modifiers</code> do not form a valid <xref href=\"System.Windows.Input.KeyGesture\"></xref>."}],"pos":[11386,11504],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> class with the specified <xref href=\"System.Windows.Input.Key\"></xref>, <xref href=\"System.Windows.Input.ModifierKeys\"></xref>, and display string.","nodes":[{"pos":[0,234],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph> class with the specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.Key\"&gt;&lt;/xref&gt;</ph>, <ph id=\"ph3\">&lt;xref href=\"System.Windows.Input.ModifierKeys\"&gt;&lt;/xref&gt;</ph>, and display string.","source":"Initializes a new instance of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> class with the specified <xref href=\"System.Windows.Input.Key\"></xref>, <xref href=\"System.Windows.Input.ModifierKeys\"></xref>, and display string."}],"pos":[12698,12933],"yaml":true},{"content":"The <xref:System.Windows.Input.KeyGesture.DisplayString%2A> property is set to the `displayString` parameter.","nodes":[{"pos":[0,109],"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture.DisplayString%2A&gt;</ph> property is set to the <ph id=\"ph2\">`displayString`</ph> parameter.","source":"The <xref:System.Windows.Input.KeyGesture.DisplayString%2A> property is set to the `displayString` parameter."}],"pos":[12944,13054],"yaml":true,"extradata":"MT"},{"content":"The key associated with the gesture.","nodes":[{"pos":[0,36],"content":"The key associated with the gesture.","nodes":[{"content":"The key associated with the gesture.","pos":[0,36]}]}],"pos":[13280,13317],"yaml":true},{"content":"The modifier keys associated with the gesture.","nodes":[{"pos":[0,46],"content":"The modifier keys associated with the gesture.","nodes":[{"content":"The modifier keys associated with the gesture.","pos":[0,46]}]}],"pos":[13402,13449],"yaml":true},{"content":"A string representation of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>.","nodes":[{"pos":[0,84],"content":"A string representation of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph>.","source":"A string representation of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>."}],"pos":[13518,13603],"yaml":true},{"content":"<code>modifiers</code> is not a valid <xref href=\"System.Windows.Input.ModifierKeys\"></xref>  \n  \n -or-  \n  \n <code>key</code> is not a valid <xref href=\"System.Windows.Input.Key\"></xref>.","nodes":[{"pos":[0,92],"content":"<ph id=\"ph1\">&lt;code&gt;modifiers&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.ModifierKeys\"&gt;&lt;/xref&gt;</ph>","source":"<code>modifiers</code> is not a valid <xref href=\"System.Windows.Input.ModifierKeys\"></xref>"},{"pos":[99,103],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[110,188],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> is not a valid <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.Key\"&gt;&lt;/xref&gt;</ph>.","source":"<code>key</code> is not a valid <xref href=\"System.Windows.Input.Key\"></xref>."}],"pos":[13814,14013],"yaml":true},{"content":"<code>displayString</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;displayString&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>displayString</code> is `null`."}],"pos":[14115,14153],"yaml":true},{"content":"<code>key</code> and <code>modifiers</code> do not form a valid <xref href=\"System.Windows.Input.KeyGesture\"></xref>.","nodes":[{"pos":[0,117],"content":"<ph id=\"ph1\">&lt;code&gt;key&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;modifiers&lt;/code&gt;</ph> do not form a valid <ph id=\"ph3\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph>.","source":"<code>key</code> and <code>modifiers</code> do not form a valid <xref href=\"System.Windows.Input.KeyGesture\"></xref>."}],"pos":[14255,14373],"yaml":true},{"content":"Gets a string representation of this <xref href=\"System.Windows.Input.KeyGesture\"></xref>.","nodes":[{"pos":[0,90],"content":"Gets a string representation of this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph>.","source":"Gets a string representation of this <xref href=\"System.Windows.Input.KeyGesture\"></xref>."}],"pos":[15292,15383],"yaml":true},{"content":"If a display string was not set in the constructor, an empty string is returned.  \n  \n If this property is empty, the <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A> method returns a string created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A>.","nodes":[{"pos":[0,80],"content":"If a display string was not set in the constructor, an empty string is returned.","nodes":[{"content":"If a display string was not set in the constructor, an empty string is returned.","pos":[0,80]}]},{"pos":[87,330],"content":"If this property is empty, the <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A> method returns a string created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A>.","nodes":[{"content":"If this property is empty, the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A&gt;</ph> method returns a string created from the <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyGesture.Key%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Input.KeyGesture.Modifiers%2A&gt;</ph>.","pos":[0,243],"source":"If this property is empty, the <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A> method returns a string created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A>."}]}],"pos":[15394,15729],"yaml":true,"extradata":"MT"},{"content":"The display string for this <xref href=\"System.Windows.Input.KeyGesture\"></xref>. The default value is <xref href=\"System.String.Empty\"></xref>.","nodes":[{"pos":[0,144],"content":"The display string for this <xref href=\"System.Windows.Input.KeyGesture\"></xref>. The default value is <xref href=\"System.String.Empty\"></xref>.","nodes":[{"content":"The display string for this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph>.","pos":[0,81],"source":"The display string for this <xref href=\"System.Windows.Input.KeyGesture\"></xref>."},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph>.","pos":[82,144],"source":" The default value is <xref href=\"System.String.Empty\"></xref>."}]}],"pos":[15846,15991],"yaml":true},{"content":"Returns a string that can be used to display the <xref href=\"System.Windows.Input.KeyGesture\"></xref>.","nodes":[{"pos":[0,102],"content":"Returns a string that can be used to display the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph>.","source":"Returns a string that can be used to display the <xref href=\"System.Windows.Input.KeyGesture\"></xref>."}],"pos":[17203,17306],"yaml":true},{"content":"If the display string was set by the constructor, that string is returned; otherwise, a string is created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A> with any necessary conversions being governed by the specified <xref:System.Globalization.CultureInfo> object.","nodes":[{"pos":[0,327],"content":"If the display string was set by the constructor, that string is returned; otherwise, a string is created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A> with any necessary conversions being governed by the specified <xref:System.Globalization.CultureInfo> object.","nodes":[{"content":"If the display string was set by the constructor, that string is returned; otherwise, a string is created from the <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture.Key%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyGesture.Modifiers%2A&gt;</ph> with any necessary conversions being governed by the specified <ph id=\"ph3\">&lt;xref:System.Globalization.CultureInfo&gt;</ph> object.","pos":[0,327],"source":"If the display string was set by the constructor, that string is returned; otherwise, a string is created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A> with any necessary conversions being governed by the specified <xref:System.Globalization.CultureInfo> object."}]}],"pos":[17317,17645],"yaml":true,"extradata":"MT"},{"content":"The culture specific information.","nodes":[{"pos":[0,33],"content":"The culture specific information.","nodes":[{"content":"The culture specific information.","pos":[0,33]}]}],"pos":[17851,17885],"yaml":true},{"content":"The string to display","nodes":[{"pos":[0,21],"content":"The string to display","nodes":[{"content":"The string to display","pos":[0,21]}]}],"pos":[17942,17964],"yaml":true},{"content":"Gets the key associated with this <xref href=\"System.Windows.Input.KeyGesture\"></xref>.","nodes":[{"pos":[0,87],"content":"Gets the key associated with this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the key associated with this <xref href=\"System.Windows.Input.KeyGesture\"></xref>."}],"pos":[18912,19000],"yaml":true},{"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.","nodes":[{"pos":[0,288],"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.","nodes":[{"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.","pos":[0,288],"nodes":[{"content":"In most cases, a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> must be associated with one or more <ph id=\"ph2\">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.","pos":[0,133],"source":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>."},{"content":"The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> by themselves.","pos":[135,288],"source":"  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves."}]}]}],"pos":[19011,19300],"yaml":true,"extradata":"MT"},{"content":"The key associated with the gesture.  The default value is <xref href=\"System.Windows.Input.Key.None\"></xref>.","nodes":[{"pos":[0,110],"content":"The key associated with the gesture.  The default value is <xref href=\"System.Windows.Input.Key.None\"></xref>.","nodes":[{"content":"The key associated with the gesture.","pos":[0,36]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.Key.None\"&gt;&lt;/xref&gt;</ph>.","pos":[38,110],"source":"  The default value is <xref href=\"System.Windows.Input.Key.None\"></xref>."}]}],"pos":[19436,19547],"yaml":true},{"content":"Determines whether this <xref href=\"System.Windows.Input.KeyGesture\"></xref> matches the input associated with the specified <xref href=\"System.Windows.Input.InputEventArgs\"></xref> object.","nodes":[{"pos":[0,189],"content":"Determines whether this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph> matches the input associated with the specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.InputEventArgs\"&gt;&lt;/xref&gt;</ph> object.","source":"Determines whether this <xref href=\"System.Windows.Input.KeyGesture\"></xref> matches the input associated with the specified <xref href=\"System.Windows.Input.InputEventArgs\"></xref> object."}],"pos":[20719,20909],"yaml":true},{"content":"`targetElement` can be used to make a more specific decision on whether a command should be invoked on a specific element.","nodes":[{"pos":[0,122],"content":"<ph id=\"ph1\">`targetElement`</ph> can be used to make a more specific decision on whether a command should be invoked on a specific element.","source":"`targetElement` can be used to make a more specific decision on whether a command should be invoked on a specific element."}],"pos":[20920,21045],"yaml":true,"extradata":"MT"},{"content":"The target.","nodes":[{"pos":[0,11],"content":"The target.","nodes":[{"content":"The target.","pos":[0,11]}]}],"pos":[22075,22087],"yaml":true},{"content":"The input event data to compare this gesture to.","nodes":[{"pos":[0,48],"content":"The input event data to compare this gesture to.","nodes":[{"content":"The input event data to compare this gesture to.","pos":[0,48]}]}],"pos":[22179,22228],"yaml":true},{"content":"`true` if the event data matches this <xref href=\"System.Windows.Input.KeyGesture\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,111],"content":"<ph id=\"ph1\">`true`</ph> if the event data matches this <ph id=\"ph2\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the event data matches this <xref href=\"System.Windows.Input.KeyGesture\"></xref>; otherwise, `false`."}],"pos":[22286,22400],"yaml":true},{"content":"Gets the modifier keys associated with this <xref href=\"System.Windows.Input.KeyGesture\"></xref>.","nodes":[{"pos":[0,97],"content":"Gets the modifier keys associated with this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.KeyGesture\"&gt;&lt;/xref&gt;</ph>.","source":"Gets the modifier keys associated with this <xref href=\"System.Windows.Input.KeyGesture\"></xref>."}],"pos":[23365,23463],"yaml":true},{"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves. For example, you can create a <xref:System.Windows.Input.KeyGesture> by using only the F12 key, but to use the X key in a <xref:System.Windows.Input.KeyGesture> it must be paired with a modifier key.","nodes":[{"pos":[0,487],"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves. For example, you can create a <xref:System.Windows.Input.KeyGesture> by using only the F12 key, but to use the X key in a <xref:System.Windows.Input.KeyGesture> it must be paired with a modifier key.","nodes":[{"content":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves. For example, you can create a <xref:System.Windows.Input.KeyGesture> by using only the F12 key, but to use the X key in a <xref:System.Windows.Input.KeyGesture> it must be paired with a modifier key.","pos":[0,487],"nodes":[{"content":"In most cases, a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> must be associated with one or more <ph id=\"ph2\">&lt;xref:System.Windows.Input.ModifierKeys&gt;</ph>.","pos":[0,133],"source":"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>."},{"content":"The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> by themselves.","pos":[134,287],"source":" The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves."},{"content":"For example, you can create a <ph id=\"ph1\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> by using only the F12 key, but to use the X key in a <ph id=\"ph2\">&lt;xref:System.Windows.Input.KeyGesture&gt;</ph> it must be paired with a modifier key.","pos":[288,487],"source":" For example, you can create a <xref:System.Windows.Input.KeyGesture> by using only the F12 key, but to use the X key in a <xref:System.Windows.Input.KeyGesture> it must be paired with a modifier key."}]}]}],"pos":[23474,23962],"yaml":true,"extradata":"MT"},{"content":"The modifier keys associated with the gesture. The default value is <xref href=\"System.Windows.Input.ModifierKeys.None\"></xref>.","nodes":[{"pos":[0,128],"content":"The modifier keys associated with the gesture. The default value is <xref href=\"System.Windows.Input.ModifierKeys.None\"></xref>.","nodes":[{"content":"The modifier keys associated with the gesture.","pos":[0,46]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Windows.Input.ModifierKeys.None\"&gt;&lt;/xref&gt;</ph>.","pos":[47,128],"source":" The default value is <xref href=\"System.Windows.Input.ModifierKeys.None\"></xref>."}]}],"pos":[24122,24251],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Input.KeyGesture\n  commentId: T:System.Windows.Input.KeyGesture\n  id: KeyGesture\n  children:\n  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)\n  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)\n  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)\n  - System.Windows.Input.KeyGesture.DisplayString\n  - System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)\n  - System.Windows.Input.KeyGesture.Key\n  - System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)\n  - System.Windows.Input.KeyGesture.Modifiers\n  langs:\n  - csharp\n  name: KeyGesture\n  nameWithType: KeyGesture\n  fullName: System.Windows.Input.KeyGesture\n  type: Class\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Defines a keyboard combination that can be used to invoke a command.\n  remarks: \"In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves. For example, you can create a <xref:System.Windows.Input.KeyGesture> by using only the F12 key, but to use the X key in a <xref:System.Windows.Input.KeyGesture> it must be paired with a modifier key.  \\n  \\n In general, you can  \\n  \\n You can use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to an <xref:System.Windows.Input.ICommand>, so that the command is invoked when the <xref:System.Windows.Input.KeyGesture> occurs.  \\n  \\n For <xref:System.Windows.Input.KeyGesture> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usages, the property that is generally set in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is <xref:System.Windows.Input.KeyBinding.Gesture%2A>, in cases where the gesture represents both a standard key and a modifier key. You can also set the <xref:System.Windows.Input.KeyBinding.Gesture%2A> property to be just a function key, or just a modifier key combination. However, it is more common to set the <xref:System.Windows.Input.KeyBinding.Key%2A> property if the intended command binding is a function key with no modifiers, or <xref:System.Windows.Input.KeyBinding.Modifiers%2A> if the intended command binding is for modifier keys only.  \\n  \\n<a name=\\\"xamlAttributeUsage_KeyGesture\\\"></a>   \\n## XAML Attribute Usage  \\n  \\n```  \\n<object property=\\\"oneOrMoreModifierKeys+key\\\"/>  \\n- or -  \\n<object property=\\\"functionKey\\\"/>  \\n```  \\n  \\n<a name=\\\"xamlValues_KeyGesture\\\"></a>   \\n## XAML Values  \\n `functionKey`  \\n <xref:System.Windows.Input.Key>  \\n  \\n A single key value, which must be one of the function keys (F1-12) or numeric keypad keys.  \\n  \\n `oneOrMoreModifierKeys`  \\n One or more modifier keys, defined by the <xref:System.Windows.Input.ModifierKeys> enumeration, delimited with a \\\"+\\\" character.  \\n  \\n `key`  \\n <xref:System.Windows.Input.Key>  \\n  \\n A single key value.\"\n  example:\n  - \"The following example shows how to bind the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command to a <xref:System.Windows.Input.KeyGesture> using a <xref:System.Windows.Input.KeyBinding>.  \\n  \\n [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  \\n  \\n The following example shows how to use <xref:System.Windows.Input.KeyGesture> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. Note that the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage does not directly declare a `<KeyGesture>` element. That object element usage is not possible because <xref:System.Windows.Input.KeyGesture> does not expose a public default constructor. Instead, the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] usage uses the typeconverter behavior to declare an entire <xref:System.Windows.Input.KeyGesture> inline as the `Gesture` attribute value.  \\n  \\n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]\"\n  syntax:\n    content: >-\n      [System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))]\n\n      public class KeyGesture : System.Windows.Input.InputGesture\n  inheritance:\n  - System.Object\n  - System.Windows.Input.InputGesture\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.ComponentModel.TypeConverterAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyGesture.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)\n  commentId: M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)\n  id: '#ctor(System.Windows.Input.Key)'\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: KeyGesture(Key)\n  nameWithType: KeyGesture.KeyGesture(Key)\n  fullName: KeyGesture.KeyGesture(Key)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> class with the specified <xref href=\"System.Windows.Input.Key\"></xref>.\n  remarks: In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.\n  example:\n  - \"The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>.  The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \\n  \\n [!code-csharp[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithnomodifier)]\\n [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithnomodifier)]\"\n  syntax:\n    content: public KeyGesture (System.Windows.Input.Key key);\n    parameters:\n    - id: key\n      type: System.Windows.Input.Key\n      description: The key associated with this gesture.\n  overload: System.Windows.Input.KeyGesture.#ctor*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: <code>key</code> is not a valid <xref href=\"System.Windows.Input.Key\"></xref>.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>key</code> is not a valid <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyGesture.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)\n  commentId: M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)\n  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: KeyGesture(Key, ModifierKeys)\n  nameWithType: KeyGesture.KeyGesture(Key, ModifierKeys)\n  fullName: KeyGesture.KeyGesture(Key, ModifierKeys)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> class with the specified <xref href=\"System.Windows.Input.Key\"></xref> and <xref href=\"System.Windows.Input.ModifierKeys\"></xref>.\n  remarks: In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.\n  example:\n  - \"The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>. The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \\n  \\n [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]\"\n  syntax:\n    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);\n    parameters:\n    - id: key\n      type: System.Windows.Input.Key\n      description: The key associated with the gesture.\n    - id: modifiers\n      type: System.Windows.Input.ModifierKeys\n      description: The modifier keys associated with the gesture.\n  overload: System.Windows.Input.KeyGesture.#ctor*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: \"<code>modifiers</code> is not a valid <xref href=\\\"System.Windows.Input.ModifierKeys\\\"></xref>  \\n  \\n -or-  \\n  \\n <code>key</code> is not a valid <xref href=\\\"System.Windows.Input.Key\\\"></xref>.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>key</code> and <code>modifiers</code> do not form a valid <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyGesture.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)\n  commentId: M:System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)\n  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)'\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: KeyGesture(Key, ModifierKeys, String)\n  nameWithType: KeyGesture.KeyGesture(Key, ModifierKeys, String)\n  fullName: KeyGesture.KeyGesture(Key, ModifierKeys, String)\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Input.KeyGesture\"></xref> class with the specified <xref href=\"System.Windows.Input.Key\"></xref>, <xref href=\"System.Windows.Input.ModifierKeys\"></xref>, and display string.\n  remarks: The <xref:System.Windows.Input.KeyGesture.DisplayString%2A> property is set to the `displayString` parameter.\n  syntax:\n    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);\n    parameters:\n    - id: key\n      type: System.Windows.Input.Key\n      description: The key associated with the gesture.\n    - id: modifiers\n      type: System.Windows.Input.ModifierKeys\n      description: The modifier keys associated with the gesture.\n    - id: displayString\n      type: System.String\n      description: A string representation of the <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  overload: System.Windows.Input.KeyGesture.#ctor*\n  exceptions:\n  - type: System.ComponentModel.InvalidEnumArgumentException\n    commentId: T:System.ComponentModel.InvalidEnumArgumentException\n    description: \"<code>modifiers</code> is not a valid <xref href=\\\"System.Windows.Input.ModifierKeys\\\"></xref>  \\n  \\n -or-  \\n  \\n <code>key</code> is not a valid <xref href=\\\"System.Windows.Input.Key\\\"></xref>.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>displayString</code> is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: <code>key</code> and <code>modifiers</code> do not form a valid <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyGesture.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyGesture.DisplayString\n  commentId: P:System.Windows.Input.KeyGesture.DisplayString\n  id: DisplayString\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: DisplayString\n  nameWithType: KeyGesture.DisplayString\n  fullName: KeyGesture.DisplayString\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets a string representation of this <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  remarks: \"If a display string was not set in the constructor, an empty string is returned.  \\n  \\n If this property is empty, the <xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A> method returns a string created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A>.\"\n  syntax:\n    content: public string DisplayString { get; }\n    return:\n      type: System.String\n      description: The display string for this <xref href=\"System.Windows.Input.KeyGesture\"></xref>. The default value is <xref href=\"System.String.Empty\"></xref>.\n  overload: System.Windows.Input.KeyGesture.DisplayString*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyGesture.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)\n  commentId: M:System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)\n  id: GetDisplayStringForCulture(System.Globalization.CultureInfo)\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: GetDisplayStringForCulture(CultureInfo)\n  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)\n  fullName: KeyGesture.GetDisplayStringForCulture(CultureInfo)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Returns a string that can be used to display the <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  remarks: If the display string was set by the constructor, that string is returned; otherwise, a string is created from the <xref:System.Windows.Input.KeyGesture.Key%2A> and <xref:System.Windows.Input.KeyGesture.Modifiers%2A> with any necessary conversions being governed by the specified <xref:System.Globalization.CultureInfo> object.\n  syntax:\n    content: public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);\n    parameters:\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: The culture specific information.\n    return:\n      type: System.String\n      description: The string to display\n  overload: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyGesture.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyGesture.Key\n  commentId: P:System.Windows.Input.KeyGesture.Key\n  id: Key\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: Key\n  nameWithType: KeyGesture.Key\n  fullName: KeyGesture.Key\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the key associated with this <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  remarks: In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>.  The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves.\n  syntax:\n    content: public System.Windows.Input.Key Key { get; }\n    return:\n      type: System.Windows.Input.Key\n      description: The key associated with the gesture.  The default value is <xref href=\"System.Windows.Input.Key.None\"></xref>.\n  overload: System.Windows.Input.KeyGesture.Key*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyGesture.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)\n  commentId: M:System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)\n  id: Matches(System.Object,System.Windows.Input.InputEventArgs)\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: Matches(Object, InputEventArgs)\n  nameWithType: KeyGesture.Matches(Object, InputEventArgs)\n  fullName: KeyGesture.Matches(Object, InputEventArgs)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Determines whether this <xref href=\"System.Windows.Input.KeyGesture\"></xref> matches the input associated with the specified <xref href=\"System.Windows.Input.InputEventArgs\"></xref> object.\n  remarks: '`targetElement` can be used to make a more specific decision on whether a command should be invoked on a specific element.'\n  example:\n  - \"The following example shows how to test whether a <xref:System.Windows.Input.KeyGesture> matches the input associated with an instance of an <xref:System.Windows.Input.InputEventArgs>. A <xref:System.Windows.UIElement.KeyDown> event handler is created that compares the event data with the <xref:System.Windows.Input.KeyGesture> by using the <xref:System.Windows.Input.KeyGesture.Matches%2A> method.  \\n  \\n [!code-csharp[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keydownhandlerkeygesturematches)]\\n [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keydownhandlerkeygesturematches)]\"\n  syntax:\n    content: public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);\n    parameters:\n    - id: targetElement\n      type: System.Object\n      description: The target.\n    - id: inputEventArgs\n      type: System.Windows.Input.InputEventArgs\n      description: The input event data to compare this gesture to.\n    return:\n      type: System.Boolean\n      description: '`true` if the event data matches this <xref href=\"System.Windows.Input.KeyGesture\"></xref>; otherwise, `false`.'\n  overload: System.Windows.Input.KeyGesture.Matches*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyGesture.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Input.KeyGesture.Modifiers\n  commentId: P:System.Windows.Input.KeyGesture.Modifiers\n  id: Modifiers\n  parent: System.Windows.Input.KeyGesture\n  langs:\n  - csharp\n  name: Modifiers\n  nameWithType: KeyGesture.Modifiers\n  fullName: KeyGesture.Modifiers\n  type: Property\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Input\n  summary: Gets the modifier keys associated with this <xref href=\"System.Windows.Input.KeyGesture\"></xref>.\n  remarks: In most cases, a <xref:System.Windows.Input.KeyGesture> must be associated with one or more <xref:System.Windows.Input.ModifierKeys>. The exceptions to this rule are the function keys and the numeric keypad keys, which can be a valid <xref:System.Windows.Input.KeyGesture> by themselves. For example, you can create a <xref:System.Windows.Input.KeyGesture> by using only the F12 key, but to use the X key in a <xref:System.Windows.Input.KeyGesture> it must be paired with a modifier key.\n  syntax:\n    content: public System.Windows.Input.ModifierKeys Modifiers { get; }\n    return:\n      type: System.Windows.Input.ModifierKeys\n      description: The modifier keys associated with the gesture. The default value is <xref href=\"System.Windows.Input.ModifierKeys.None\"></xref>.\n  overload: System.Windows.Input.KeyGesture.Modifiers*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyGesture.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.Input.InputGesture\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputGesture\n  nameWithType: InputGesture\n  fullName: System.Windows.Input.InputGesture\n- uid: System.ComponentModel.InvalidEnumArgumentException\n  parent: System.ComponentModel\n  isExternal: false\n  name: InvalidEnumArgumentException\n  nameWithType: InvalidEnumArgumentException\n  fullName: System.ComponentModel.InvalidEnumArgumentException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: KeyGesture(Key)\n  nameWithType: KeyGesture.KeyGesture(Key)\n  fullName: KeyGesture.KeyGesture(Key)\n- uid: System.Windows.Input.Key\n  parent: System.Windows.Input\n  isExternal: false\n  name: Key\n  nameWithType: Key\n  fullName: System.Windows.Input.Key\n- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: KeyGesture(Key, ModifierKeys)\n  nameWithType: KeyGesture.KeyGesture(Key, ModifierKeys)\n  fullName: KeyGesture.KeyGesture(Key, ModifierKeys)\n- uid: System.Windows.Input.ModifierKeys\n  parent: System.Windows.Input\n  isExternal: false\n  name: ModifierKeys\n  nameWithType: ModifierKeys\n  fullName: System.Windows.Input.ModifierKeys\n- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: KeyGesture(Key, ModifierKeys, String)\n  nameWithType: KeyGesture.KeyGesture(Key, ModifierKeys, String)\n  fullName: KeyGesture.KeyGesture(Key, ModifierKeys, String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Input.KeyGesture.DisplayString\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: DisplayString\n  nameWithType: KeyGesture.DisplayString\n  fullName: KeyGesture.DisplayString\n- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: GetDisplayStringForCulture(CultureInfo)\n  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)\n  fullName: KeyGesture.GetDisplayStringForCulture(CultureInfo)\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.Windows.Input.KeyGesture.Key\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: Key\n  nameWithType: KeyGesture.Key\n  fullName: KeyGesture.Key\n- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: Matches(Object, InputEventArgs)\n  nameWithType: KeyGesture.Matches(Object, InputEventArgs)\n  fullName: KeyGesture.Matches(Object, InputEventArgs)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Input.InputEventArgs\n  parent: System.Windows.Input\n  isExternal: false\n  name: InputEventArgs\n  nameWithType: InputEventArgs\n  fullName: System.Windows.Input.InputEventArgs\n- uid: System.Windows.Input.KeyGesture.Modifiers\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: Modifiers\n  nameWithType: KeyGesture.Modifiers\n  fullName: KeyGesture.Modifiers\n- uid: System.Windows.Input.KeyGesture.#ctor*\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: KeyGesture\n  nameWithType: KeyGesture.KeyGesture\n  fullName: KeyGesture.KeyGesture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyGesture.xml\n- uid: System.Windows.Input.KeyGesture.DisplayString*\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: DisplayString\n  nameWithType: KeyGesture.DisplayString\n  fullName: KeyGesture.DisplayString\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyGesture.xml\n- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: GetDisplayStringForCulture\n  nameWithType: KeyGesture.GetDisplayStringForCulture\n  fullName: KeyGesture.GetDisplayStringForCulture\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyGesture.xml\n- uid: System.Windows.Input.KeyGesture.Key*\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: Key\n  nameWithType: KeyGesture.Key\n  fullName: KeyGesture.Key\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyGesture.xml\n- uid: System.Windows.Input.KeyGesture.Matches*\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: Matches\n  nameWithType: KeyGesture.Matches\n  fullName: KeyGesture.Matches\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyGesture.xml\n- uid: System.Windows.Input.KeyGesture.Modifiers*\n  parent: System.Windows.Input.KeyGesture\n  isExternal: false\n  name: Modifiers\n  nameWithType: KeyGesture.Modifiers\n  fullName: KeyGesture.Modifiers\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Input/KeyGesture.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}