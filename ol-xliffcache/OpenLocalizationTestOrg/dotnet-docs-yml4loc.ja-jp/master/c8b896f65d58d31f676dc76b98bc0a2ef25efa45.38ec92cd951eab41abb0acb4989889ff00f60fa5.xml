{"nodes":[{"content":"Provides access to session-state values as well as session-level settings and lifetime management methods.","nodes":[{"pos":[0,106],"content":"Provides access to session-state values as well as session-level settings and lifetime management methods.","nodes":[{"content":"Provides access to session-state values as well as session-level settings and lifetime management methods.","pos":[0,106]}]}],"pos":[1854,1961],"yaml":true},{"content":"ASP.NET provides session-state management to enable you to store information associated with a unique browser session across multiple requests. You can store a collection of values referenced by a key name or by numerical index. Access to session values and functionality is available using the <xref:System.Web.SessionState.HttpSessionState> class, which is accessible through the <xref:System.Web.HttpContext.Session%2A> property of the current <xref:System.Web.HttpContext>, or the <xref:System.Web.UI.Page.Session%2A> property of the <xref:System.Web.UI.Page>.  \n  \n Session data is associated with a specific browser session using a unique identifier. By default, this identifier is stored in a non-expiring session cookie in the browser, but you can also configure your application to store the session identifier in the URL by setting the `cookieless` attribute to `true` or <xref:System.Web.HttpCookieMode.UseUri> in the  element of your application configuration. You can have ASP.NET determine whether cookies are supported by the browser by specifying a value of <xref:System.Web.HttpCookieMode.UseDeviceProfile> for the `cookieless` attribute. You can also have ASP.NET determine whether cookies are enabled for the browser by specifying a value of <xref:System.Web.HttpCookieMode.AutoDetect> for the `cookieless` attribute. If cookies are supported when <xref:System.Web.HttpCookieMode.UseDeviceProfile> is specified, or enabled when <xref:System.Web.HttpCookieMode.AutoDetect> is specified, then the session identifier will be stored in a cookie; otherwise the session identifier will be stored in the URL.  \n  \n Sessions are started during the first request and session values will persist as long as a new request is made by the browser before the number of minutes specified in the <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property pass. When a new session begins, the session <xref:System.Web.SessionState.SessionStateModule.Start> event is raised. You can use this event to perform any additional work at the start of a session, such as setting default session values. When a session times out, the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method is called, or the ASP.NET application is shut down, the session <xref:System.Web.SessionState.SessionStateModule.End> event is raised. You can use this event to perform any necessary cleanup. The <xref:System.Web.SessionState.SessionStateModule.End> event is raised only when the session state `mode` is set to <xref:System.Web.SessionState.SessionStateMode.InProc>.  \n  \n To improve performance, sessions that use cookies do not allocate session storage until data is actually stored in the <xref:System.Web.UI.Page.Session%2A> object. For more information, see the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> property.  \n  \n Session state does not persist across ASP.NET application boundaries. If a browser navigates to another application, the session information is not available to the new application.  \n  \n Session values are stored in memory on the Web server, by default. You can also store session values in a SQL Server database, an ASP.NET state server, or a custom server. This enables you to preserve session values in cases where the ASP.NET or IIS process or the ASP.NET application restarts and to make session values available across all the servers in a Web farm. This behavior is configured by setting the `mode` attribute to a valid <xref:System.Web.SessionState.SessionStateMode> value in the  element of your application configuration. For more information, see [Session-State Modes](http://msdn.microsoft.com/library/0bb0a3a3-650f-4c47-a0c5-b08b9b591bb4).  \n  \n Alternatives to session state include application state (see the <xref:System.Web.HttpApplication.Application%2A> property) and the ASP.NET cache (see the <xref:System.Web.Caching> namespace), which store variables that can be accessed by all users of an ASP.NET application; the ASP.NET profile (see the <xref:System.Web.Profile> namespace), which persists user values in a data store without expiring them using a time-out; ASP.NET <xref:System.Web.UI.WebControls?displayProperty=fullName>, which persist control values in the <xref:System.Web.UI.Control.ViewState%2A>; <xref:System.Web.HttpResponse.Cookies%2A>; the <xref:System.Web.HttpRequest.QueryString%2A> property; and fields on an HTML form that are available from an HTTP `POST` using the <xref:System.Web.HttpRequest.Form%2A> collection. For more details on the differences between session state and other state-management alternatives, see [ASP.NET State Management Recommendations](http://msdn.microsoft.com/library/af79fa0d-4bc8-47a6-9915-d8e355bfb732).","nodes":[{"pos":[0,564],"content":"ASP.NET provides session-state management to enable you to store information associated with a unique browser session across multiple requests. You can store a collection of values referenced by a key name or by numerical index. Access to session values and functionality is available using the <xref:System.Web.SessionState.HttpSessionState> class, which is accessible through the <xref:System.Web.HttpContext.Session%2A> property of the current <xref:System.Web.HttpContext>, or the <xref:System.Web.UI.Page.Session%2A> property of the <xref:System.Web.UI.Page>.","nodes":[{"content":"ASP.NET provides session-state management to enable you to store information associated with a unique browser session across multiple requests. You can store a collection of values referenced by a key name or by numerical index. Access to session values and functionality is available using the <xref:System.Web.SessionState.HttpSessionState> class, which is accessible through the <xref:System.Web.HttpContext.Session%2A> property of the current <xref:System.Web.HttpContext>, or the <xref:System.Web.UI.Page.Session%2A> property of the <xref:System.Web.UI.Page>.","pos":[0,564],"nodes":[{"content":"ASP.NET provides session-state management to enable you to store information associated with a unique browser session across multiple requests.","pos":[0,143]},{"content":"You can store a collection of values referenced by a key name or by numerical index.","pos":[144,228]},{"content":"Access to session values and functionality is available using the <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState&gt;</ph> class, which is accessible through the <ph id=\"ph2\">&lt;xref:System.Web.HttpContext.Session%2A&gt;</ph> property of the current <ph id=\"ph3\">&lt;xref:System.Web.HttpContext&gt;</ph>, or the <ph id=\"ph4\">&lt;xref:System.Web.UI.Page.Session%2A&gt;</ph> property of the <ph id=\"ph5\">&lt;xref:System.Web.UI.Page&gt;</ph>.","pos":[229,564],"source":" Access to session values and functionality is available using the <xref:System.Web.SessionState.HttpSessionState> class, which is accessible through the <xref:System.Web.HttpContext.Session%2A> property of the current <xref:System.Web.HttpContext>, or the <xref:System.Web.UI.Page.Session%2A> property of the <xref:System.Web.UI.Page>."}]}]},{"pos":[571,1620],"content":"Session data is associated with a specific browser session using a unique identifier. By default, this identifier is stored in a non-expiring session cookie in the browser, but you can also configure your application to store the session identifier in the URL by setting the `cookieless` attribute to `true` or <xref:System.Web.HttpCookieMode.UseUri> in the  element of your application configuration. You can have ASP.NET determine whether cookies are supported by the browser by specifying a value of <xref:System.Web.HttpCookieMode.UseDeviceProfile> for the `cookieless` attribute. You can also have ASP.NET determine whether cookies are enabled for the browser by specifying a value of <xref:System.Web.HttpCookieMode.AutoDetect> for the `cookieless` attribute. If cookies are supported when <xref:System.Web.HttpCookieMode.UseDeviceProfile> is specified, or enabled when <xref:System.Web.HttpCookieMode.AutoDetect> is specified, then the session identifier will be stored in a cookie; otherwise the session identifier will be stored in the URL.","nodes":[{"content":"Session data is associated with a specific browser session using a unique identifier.","pos":[0,85]},{"content":"By default, this identifier is stored in a non-expiring session cookie in the browser, but you can also configure your application to store the session identifier in the URL by setting the <ph id=\"ph1\">`cookieless`</ph> attribute to <ph id=\"ph2\">`true`</ph> or <ph id=\"ph3\">&lt;xref:System.Web.HttpCookieMode.UseUri&gt;</ph> in the  element of your application configuration.","pos":[86,401],"source":" By default, this identifier is stored in a non-expiring session cookie in the browser, but you can also configure your application to store the session identifier in the URL by setting the `cookieless` attribute to `true` or <xref:System.Web.HttpCookieMode.UseUri> in the  element of your application configuration."},{"content":"You can have ASP.NET determine whether cookies are supported by the browser by specifying a value of <ph id=\"ph1\">&lt;xref:System.Web.HttpCookieMode.UseDeviceProfile&gt;</ph> for the <ph id=\"ph2\">`cookieless`</ph> attribute.","pos":[402,584],"source":" You can have ASP.NET determine whether cookies are supported by the browser by specifying a value of <xref:System.Web.HttpCookieMode.UseDeviceProfile> for the `cookieless` attribute."},{"content":"You can also have ASP.NET determine whether cookies are enabled for the browser by specifying a value of <ph id=\"ph1\">&lt;xref:System.Web.HttpCookieMode.AutoDetect&gt;</ph> for the <ph id=\"ph2\">`cookieless`</ph> attribute.","pos":[585,765],"source":" You can also have ASP.NET determine whether cookies are enabled for the browser by specifying a value of <xref:System.Web.HttpCookieMode.AutoDetect> for the `cookieless` attribute."},{"content":"If cookies are supported when <ph id=\"ph1\">&lt;xref:System.Web.HttpCookieMode.UseDeviceProfile&gt;</ph> is specified, or enabled when <ph id=\"ph2\">&lt;xref:System.Web.HttpCookieMode.AutoDetect&gt;</ph> is specified, then the session identifier will be stored in a cookie; otherwise the session identifier will be stored in the URL.","pos":[766,1049],"source":" If cookies are supported when <xref:System.Web.HttpCookieMode.UseDeviceProfile> is specified, or enabled when <xref:System.Web.HttpCookieMode.AutoDetect> is specified, then the session identifier will be stored in a cookie; otherwise the session identifier will be stored in the URL."}]},{"pos":[1627,2568],"content":"Sessions are started during the first request and session values will persist as long as a new request is made by the browser before the number of minutes specified in the <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property pass. When a new session begins, the session <xref:System.Web.SessionState.SessionStateModule.Start> event is raised. You can use this event to perform any additional work at the start of a session, such as setting default session values. When a session times out, the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method is called, or the ASP.NET application is shut down, the session <xref:System.Web.SessionState.SessionStateModule.End> event is raised. You can use this event to perform any necessary cleanup. The <xref:System.Web.SessionState.SessionStateModule.End> event is raised only when the session state `mode` is set to <xref:System.Web.SessionState.SessionStateMode.InProc>.","nodes":[{"content":"Sessions are started during the first request and session values will persist as long as a new request is made by the browser before the number of minutes specified in the <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.Timeout%2A&gt;</ph> property pass.","pos":[0,245],"source":"Sessions are started during the first request and session values will persist as long as a new request is made by the browser before the number of minutes specified in the <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property pass."},{"content":"When a new session begins, the session <ph id=\"ph1\">&lt;xref:System.Web.SessionState.SessionStateModule.Start&gt;</ph> event is raised.","pos":[246,357],"source":" When a new session begins, the session <xref:System.Web.SessionState.SessionStateModule.Start> event is raised."},{"content":"You can use this event to perform any additional work at the start of a session, such as setting default session values.","pos":[358,478]},{"content":"When a session times out, the <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.Abandon%2A&gt;</ph> method is called, or the ASP.NET application is shut down, the session <ph id=\"ph2\">&lt;xref:System.Web.SessionState.SessionStateModule.End&gt;</ph> event is raised.","pos":[479,709],"source":" When a session times out, the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method is called, or the ASP.NET application is shut down, the session <xref:System.Web.SessionState.SessionStateModule.End> event is raised."},{"content":"You can use this event to perform any necessary cleanup.","pos":[710,766]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.SessionState.SessionStateModule.End&gt;</ph> event is raised only when the session state <ph id=\"ph2\">`mode`</ph> is set to <ph id=\"ph3\">&lt;xref:System.Web.SessionState.SessionStateMode.InProc&gt;</ph>.","pos":[767,941],"source":" The <xref:System.Web.SessionState.SessionStateModule.End> event is raised only when the session state `mode` is set to <xref:System.Web.SessionState.SessionStateMode.InProc>."}]},{"pos":[2575,2839],"content":"To improve performance, sessions that use cookies do not allocate session storage until data is actually stored in the <xref:System.Web.UI.Page.Session%2A> object. For more information, see the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> property.","nodes":[{"content":"To improve performance, sessions that use cookies do not allocate session storage until data is actually stored in the <xref:System.Web.UI.Page.Session%2A> object. For more information, see the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> property.","pos":[0,264],"nodes":[{"content":"To improve performance, sessions that use cookies do not allocate session storage until data is actually stored in the <ph id=\"ph1\">&lt;xref:System.Web.UI.Page.Session%2A&gt;</ph> object.","pos":[0,163],"source":"To improve performance, sessions that use cookies do not allocate session storage until data is actually stored in the <xref:System.Web.UI.Page.Session%2A> object."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.SessionID%2A&gt;</ph> property.","pos":[164,264],"source":" For more information, see the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> property."}]}]},{"pos":[2846,3027],"content":"Session state does not persist across ASP.NET application boundaries. If a browser navigates to another application, the session information is not available to the new application.","nodes":[{"content":"Session state does not persist across ASP.NET application boundaries. If a browser navigates to another application, the session information is not available to the new application.","pos":[0,181],"nodes":[{"content":"Session state does not persist across ASP.NET application boundaries.","pos":[0,69]},{"content":"If a browser navigates to another application, the session information is not available to the new application.","pos":[70,181]}]}]},{"pos":[3034,3699],"content":"Session values are stored in memory on the Web server, by default. You can also store session values in a SQL Server database, an ASP.NET state server, or a custom server. This enables you to preserve session values in cases where the ASP.NET or IIS process or the ASP.NET application restarts and to make session values available across all the servers in a Web farm. This behavior is configured by setting the `mode` attribute to a valid <xref:System.Web.SessionState.SessionStateMode> value in the  element of your application configuration. For more information, see [Session-State Modes](http://msdn.microsoft.com/library/0bb0a3a3-650f-4c47-a0c5-b08b9b591bb4).","nodes":[{"content":"Session values are stored in memory on the Web server, by default.","pos":[0,66]},{"content":"You can also store session values in a SQL Server database, an ASP.NET state server, or a custom server.","pos":[67,171]},{"content":"This enables you to preserve session values in cases where the ASP.NET or IIS process or the ASP.NET application restarts and to make session values available across all the servers in a Web farm.","pos":[172,368]},{"content":"This behavior is configured by setting the <ph id=\"ph1\">`mode`</ph> attribute to a valid <ph id=\"ph2\">&lt;xref:System.Web.SessionState.SessionStateMode&gt;</ph> value in the  element of your application configuration.","pos":[369,544],"source":" This behavior is configured by setting the `mode` attribute to a valid <xref:System.Web.SessionState.SessionStateMode> value in the  element of your application configuration."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Session-State Modes<ept id=\"p1\">](http://msdn.microsoft.com/library/0bb0a3a3-650f-4c47-a0c5-b08b9b591bb4)</ept>.","pos":[545,665],"source":" For more information, see [Session-State Modes](http://msdn.microsoft.com/library/0bb0a3a3-650f-4c47-a0c5-b08b9b591bb4)."}]},{"pos":[3706,4724],"content":"Alternatives to session state include application state (see the <xref:System.Web.HttpApplication.Application%2A> property) and the ASP.NET cache (see the <xref:System.Web.Caching> namespace), which store variables that can be accessed by all users of an ASP.NET application; the ASP.NET profile (see the <xref:System.Web.Profile> namespace), which persists user values in a data store without expiring them using a time-out; ASP.NET <xref:System.Web.UI.WebControls?displayProperty=fullName>, which persist control values in the <xref:System.Web.UI.Control.ViewState%2A>; <xref:System.Web.HttpResponse.Cookies%2A>; the <xref:System.Web.HttpRequest.QueryString%2A> property; and fields on an HTML form that are available from an HTTP `POST` using the <xref:System.Web.HttpRequest.Form%2A> collection. For more details on the differences between session state and other state-management alternatives, see [ASP.NET State Management Recommendations](http://msdn.microsoft.com/library/af79fa0d-4bc8-47a6-9915-d8e355bfb732).","nodes":[{"content":"Alternatives to session state include application state (see the <ph id=\"ph1\">&lt;xref:System.Web.HttpApplication.Application%2A&gt;</ph> property) and the ASP.NET cache (see the <ph id=\"ph2\">&lt;xref:System.Web.Caching&gt;</ph> namespace), which store variables that can be accessed by all users of an ASP.NET application; the ASP.NET profile (see the <ph id=\"ph3\">&lt;xref:System.Web.Profile&gt;</ph> namespace), which persists user values in a data store without expiring them using a time-out; ASP.NET <ph id=\"ph4\">&lt;xref:System.Web.UI.WebControls?displayProperty=fullName&gt;</ph>, which persist control values in the <ph id=\"ph5\">&lt;xref:System.Web.UI.Control.ViewState%2A&gt;</ph>; <ph id=\"ph6\">&lt;xref:System.Web.HttpResponse.Cookies%2A&gt;</ph>; the <ph id=\"ph7\">&lt;xref:System.Web.HttpRequest.QueryString%2A&gt;</ph> property; and fields on an HTML form that are available from an HTTP <ph id=\"ph8\">`POST`</ph> using the <ph id=\"ph9\">&lt;xref:System.Web.HttpRequest.Form%2A&gt;</ph> collection.","pos":[0,799],"source":"Alternatives to session state include application state (see the <xref:System.Web.HttpApplication.Application%2A> property) and the ASP.NET cache (see the <xref:System.Web.Caching> namespace), which store variables that can be accessed by all users of an ASP.NET application; the ASP.NET profile (see the <xref:System.Web.Profile> namespace), which persists user values in a data store without expiring them using a time-out; ASP.NET <xref:System.Web.UI.WebControls?displayProperty=fullName>, which persist control values in the <xref:System.Web.UI.Control.ViewState%2A>; <xref:System.Web.HttpResponse.Cookies%2A>; the <xref:System.Web.HttpRequest.QueryString%2A> property; and fields on an HTML form that are available from an HTTP `POST` using the <xref:System.Web.HttpRequest.Form%2A> collection."},{"content":"For more details on the differences between session state and other state-management alternatives, see <bpt id=\"p1\">[</bpt>ASP.NET State Management Recommendations<ept id=\"p1\">](http://msdn.microsoft.com/library/af79fa0d-4bc8-47a6-9915-d8e355bfb732)</ept>.","pos":[800,1018],"source":" For more details on the differences between session state and other state-management alternatives, see [ASP.NET State Management Recommendations](http://msdn.microsoft.com/library/af79fa0d-4bc8-47a6-9915-d8e355bfb732)."}]}],"pos":[1972,6711],"yaml":true,"extradata":"MT"},{"content":"Cancels the current session.","nodes":[{"pos":[0,28],"content":"Cancels the current session.","nodes":[{"content":"Cancels the current session.","pos":[0,28]}]}],"pos":[9169,9198],"yaml":true},{"content":"Once the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method is called, the current session is no longer valid and a new session can be started. <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> causes the <xref:System.Web.SessionState.SessionStateModule.End> event to be raised. A new <xref:System.Web.SessionState.SessionStateModule.Start> event will be raised on the next request.  \n  \n Session identifiers for abandoned or expired sessions are recycled by default. That is, if a request is made that includes the session identifier for an expired or abandoned session, a new session is started using the same session identifier. You can disable this by setting `regenerateExpiredSessionId` attribute of the  configuration element to `true`. For more information, see [Session Identifiers](http://msdn.microsoft.com/library/146ca206-d151-4f2e-a548-bcca05ccf0cb).  \n  \n The <xref:System.Web.SessionState.SessionStateModule.End> event is supported only when the <xref:System.Web.SessionState.HttpSessionState.Mode%2A> property is set to <xref:System.Web.SessionState.SessionStateMode.InProc>.","nodes":[{"pos":[0,406],"content":"Once the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method is called, the current session is no longer valid and a new session can be started. <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> causes the <xref:System.Web.SessionState.SessionStateModule.End> event to be raised. A new <xref:System.Web.SessionState.SessionStateModule.Start> event will be raised on the next request.","nodes":[{"content":"Once the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method is called, the current session is no longer valid and a new session can be started. <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> causes the <xref:System.Web.SessionState.SessionStateModule.End> event to be raised. A new <xref:System.Web.SessionState.SessionStateModule.Start> event will be raised on the next request.","pos":[0,406],"nodes":[{"content":"Once the <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.Abandon%2A&gt;</ph> method is called, the current session is no longer valid and a new session can be started.","pos":[0,158],"source":"Once the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method is called, the current session is no longer valid and a new session can be started."},{"content":"<ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.Abandon%2A&gt;</ph> causes the <ph id=\"ph2\">&lt;xref:System.Web.SessionState.SessionStateModule.End&gt;</ph> event to be raised.","pos":[159,302],"source":" <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> causes the <xref:System.Web.SessionState.SessionStateModule.End> event to be raised."},{"content":"A new <ph id=\"ph1\">&lt;xref:System.Web.SessionState.SessionStateModule.Start&gt;</ph> event will be raised on the next request.","pos":[303,406],"source":" A new <xref:System.Web.SessionState.SessionStateModule.Start> event will be raised on the next request."}]}]},{"pos":[413,888],"content":"Session identifiers for abandoned or expired sessions are recycled by default. That is, if a request is made that includes the session identifier for an expired or abandoned session, a new session is started using the same session identifier. You can disable this by setting `regenerateExpiredSessionId` attribute of the  configuration element to `true`. For more information, see [Session Identifiers](http://msdn.microsoft.com/library/146ca206-d151-4f2e-a548-bcca05ccf0cb).","nodes":[{"content":"Session identifiers for abandoned or expired sessions are recycled by default.","pos":[0,78]},{"content":"That is, if a request is made that includes the session identifier for an expired or abandoned session, a new session is started using the same session identifier.","pos":[79,242]},{"content":"You can disable this by setting <ph id=\"ph1\">`regenerateExpiredSessionId`</ph> attribute of the  configuration element to <ph id=\"ph2\">`true`</ph>.","pos":[243,354],"source":" You can disable this by setting `regenerateExpiredSessionId` attribute of the  configuration element to `true`."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Session Identifiers<ept id=\"p1\">](http://msdn.microsoft.com/library/146ca206-d151-4f2e-a548-bcca05ccf0cb)</ept>.","pos":[355,475],"source":" For more information, see [Session Identifiers](http://msdn.microsoft.com/library/146ca206-d151-4f2e-a548-bcca05ccf0cb)."}]},{"pos":[895,1116],"content":"The <xref:System.Web.SessionState.SessionStateModule.End> event is supported only when the <xref:System.Web.SessionState.HttpSessionState.Mode%2A> property is set to <xref:System.Web.SessionState.SessionStateMode.InProc>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.SessionState.SessionStateModule.End&gt;</ph> event is supported only when the <ph id=\"ph2\">&lt;xref:System.Web.SessionState.HttpSessionState.Mode%2A&gt;</ph> property is set to <ph id=\"ph3\">&lt;xref:System.Web.SessionState.SessionStateMode.InProc&gt;</ph>.","pos":[0,221],"source":"The <xref:System.Web.SessionState.SessionStateModule.End> event is supported only when the <xref:System.Web.SessionState.HttpSessionState.Mode%2A> property is set to <xref:System.Web.SessionState.SessionStateMode.InProc>."}]}],"pos":[9209,10332],"yaml":true,"extradata":"MT"},{"content":"Adds a new item to the session-state collection.","nodes":[{"pos":[0,48],"content":"Adds a new item to the session-state collection.","nodes":[{"content":"Adds a new item to the session-state collection.","pos":[0,48]}]}],"pos":[11500,11549],"yaml":true},{"content":"If the `name` parameter refers to an existing session state item, the existing item is overwritten with the specified `value`.","nodes":[{"pos":[0,126],"content":"If the <ph id=\"ph1\">`name`</ph> parameter refers to an existing session state item, the existing item is overwritten with the specified <ph id=\"ph2\">`value`</ph>.","source":"If the `name` parameter refers to an existing session state item, the existing item is overwritten with the specified `value`."}],"pos":[11560,11687],"yaml":true,"extradata":"MT"},{"content":"The name of the item to add to the session-state collection.","nodes":[{"pos":[0,60],"content":"The name of the item to add to the session-state collection.","nodes":[{"content":"The name of the item to add to the session-state collection.","pos":[0,60]}]}],"pos":[13132,13193],"yaml":true},{"content":"The value of the item to add to the session-state collection.","nodes":[{"pos":[0,61],"content":"The value of the item to add to the session-state collection.","nodes":[{"content":"The value of the item to add to the session-state collection.","pos":[0,61]}]}],"pos":[13254,13316],"yaml":true},{"content":"Removes all keys and values from the session-state collection.","nodes":[{"pos":[0,62],"content":"Removes all keys and values from the session-state collection.","nodes":[{"content":"Removes all keys and values from the session-state collection.","pos":[0,62]}]}],"pos":[14297,14360],"yaml":true},{"content":"Gets or sets the character-set identifier for the current session.","nodes":[{"pos":[0,66],"content":"Gets or sets the character-set identifier for the current session.","nodes":[{"content":"Gets or sets the character-set identifier for the current session.","pos":[0,66]}]}],"pos":[15421,15488],"yaml":true},{"content":"A character set (code page) is used to interpret multi-byte character data, determining character value, and therefore sort order. Code-page settings apply only to multi-byte character data, not to Unicode character data.  \n  \n This <xref:System.Web.SessionState.IHttpSessionState.CodePage%2A> property is provided for compatibility with earlier versions of ASP only. If you do not need to maintain backward compatibility with ASP pages, use the <xref:System.Web.HttpResponse.ContentEncoding%2A> property instead.","nodes":[{"pos":[0,221],"content":"A character set (code page) is used to interpret multi-byte character data, determining character value, and therefore sort order. Code-page settings apply only to multi-byte character data, not to Unicode character data.","nodes":[{"content":"A character set (code page) is used to interpret multi-byte character data, determining character value, and therefore sort order. Code-page settings apply only to multi-byte character data, not to Unicode character data.","pos":[0,221],"nodes":[{"content":"A character set (code page) is used to interpret multi-byte character data, determining character value, and therefore sort order.","pos":[0,130]},{"content":"Code-page settings apply only to multi-byte character data, not to Unicode character data.","pos":[131,221]}]}]},{"pos":[228,513],"content":"This <xref:System.Web.SessionState.IHttpSessionState.CodePage%2A> property is provided for compatibility with earlier versions of ASP only. If you do not need to maintain backward compatibility with ASP pages, use the <xref:System.Web.HttpResponse.ContentEncoding%2A> property instead.","nodes":[{"content":"This <xref:System.Web.SessionState.IHttpSessionState.CodePage%2A> property is provided for compatibility with earlier versions of ASP only. If you do not need to maintain backward compatibility with ASP pages, use the <xref:System.Web.HttpResponse.ContentEncoding%2A> property instead.","pos":[0,285],"nodes":[{"content":"This <ph id=\"ph1\">&lt;xref:System.Web.SessionState.IHttpSessionState.CodePage%2A&gt;</ph> property is provided for compatibility with earlier versions of ASP only.","pos":[0,139],"source":"This <xref:System.Web.SessionState.IHttpSessionState.CodePage%2A> property is provided for compatibility with earlier versions of ASP only."},{"content":"If you do not need to maintain backward compatibility with ASP pages, use the <ph id=\"ph1\">&lt;xref:System.Web.HttpResponse.ContentEncoding%2A&gt;</ph> property instead.","pos":[140,285],"source":" If you do not need to maintain backward compatibility with ASP pages, use the <xref:System.Web.HttpResponse.ContentEncoding%2A> property instead."}]}]}],"pos":[15499,16017],"yaml":true,"extradata":"MT"},{"content":"The character-set identifier for the current session.","nodes":[{"pos":[0,53],"content":"The character-set identifier for the current session.","nodes":[{"content":"The character-set identifier for the current session.","pos":[0,53]}]}],"pos":[16130,16184],"yaml":true},{"content":"Gets a reference to the current session-state object.","nodes":[{"pos":[0,53],"content":"Gets a reference to the current session-state object.","nodes":[{"content":"Gets a reference to the current session-state object.","pos":[0,53]}]}],"pos":[17184,17238],"yaml":true},{"content":"The <xref:System.Web.SessionState.HttpSessionState.Contents%2A> property is provided for compatibility with earlier versions of ASP.","nodes":[{"pos":[0,132],"content":"The <xref:System.Web.SessionState.HttpSessionState.Contents%2A> property is provided for compatibility with earlier versions of ASP.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.Contents%2A&gt;</ph> property is provided for compatibility with earlier versions of ASP.","pos":[0,132],"source":"The <xref:System.Web.SessionState.HttpSessionState.Contents%2A> property is provided for compatibility with earlier versions of ASP."}]}],"pos":[17249,17382],"yaml":true,"extradata":"MT"},{"content":"The current <xref href=\"System.Web.SessionState.HttpSessionState\"></xref>.","nodes":[{"pos":[0,74],"content":"The current <ph id=\"ph1\">&lt;xref href=\"System.Web.SessionState.HttpSessionState\"&gt;&lt;/xref&gt;</ph>.","source":"The current <xref href=\"System.Web.SessionState.HttpSessionState\"></xref>."}],"pos":[17957,18032],"yaml":true},{"content":"Gets a value that indicates whether the application is configured for cookieless sessions.","nodes":[{"pos":[0,90],"content":"Gets a value that indicates whether the application is configured for cookieless sessions.","nodes":[{"content":"Gets a value that indicates whether the application is configured for cookieless sessions.","pos":[0,90]}]}],"pos":[19044,19135],"yaml":true},{"content":"When <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> is `true`, the <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> property returns <xref:System.Web.HttpCookieMode.UseUri>; otherwise the <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> property returns <xref:System.Web.HttpCookieMode.UseCookies>.","nodes":[{"pos":[0,341],"content":"When <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A&gt;</ph> is <ph id=\"ph2\">`true`</ph>, the <ph id=\"ph3\">&lt;xref:System.Web.SessionState.HttpSessionState.CookieMode%2A&gt;</ph> property returns <ph id=\"ph4\">&lt;xref:System.Web.HttpCookieMode.UseUri&gt;</ph>; otherwise the <ph id=\"ph5\">&lt;xref:System.Web.SessionState.HttpSessionState.CookieMode%2A&gt;</ph> property returns <ph id=\"ph6\">&lt;xref:System.Web.HttpCookieMode.UseCookies&gt;</ph>.","source":"When <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> is `true`, the <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> property returns <xref:System.Web.HttpCookieMode.UseUri>; otherwise the <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> property returns <xref:System.Web.HttpCookieMode.UseCookies>."}],"pos":[19146,19488],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Web.HttpCookieMode\"></xref> values that indicate whether the application is configured for cookieless sessions. The default is <xref href=\"System.Web.HttpCookieMode.UseCookies\"></xref>.","nodes":[{"pos":[0,215],"content":"One of the <xref href=\"System.Web.HttpCookieMode\"></xref> values that indicate whether the application is configured for cookieless sessions. The default is <xref href=\"System.Web.HttpCookieMode.UseCookies\"></xref>.","nodes":[{"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Web.HttpCookieMode\"&gt;&lt;/xref&gt;</ph> values that indicate whether the application is configured for cookieless sessions.","pos":[0,141],"source":"One of the <xref href=\"System.Web.HttpCookieMode\"></xref> values that indicate whether the application is configured for cookieless sessions."},{"content":"The default is <ph id=\"ph1\">&lt;xref href=\"System.Web.HttpCookieMode.UseCookies\"&gt;&lt;/xref&gt;</ph>.","pos":[142,215],"source":" The default is <xref href=\"System.Web.HttpCookieMode.UseCookies\"></xref>."}]}],"pos":[20120,20336],"yaml":true},{"content":"Copies the collection of session-state values to a one-dimensional array, starting at the specified index in the array.","nodes":[{"pos":[0,119],"content":"Copies the collection of session-state values to a one-dimensional array, starting at the specified index in the array.","nodes":[{"content":"Copies the collection of session-state values to a one-dimensional array, starting at the specified index in the array.","pos":[0,119]}]}],"pos":[21447,21567],"yaml":true},{"content":"The <xref href=\"System.Array\"></xref> that receives the session values.","nodes":[{"pos":[0,71],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Array\"&gt;&lt;/xref&gt;</ph> that receives the session values.","source":"The <xref href=\"System.Array\"></xref> that receives the session values."}],"pos":[21711,21783],"yaml":true},{"content":"The zero-based index in <code>array</code> from which copying starts.","nodes":[{"pos":[0,69],"content":"The zero-based index in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">array</ph><ept id=\"p1\">&lt;/code&gt;</ept> from which copying starts.","source":"The zero-based index in <code>array</code> from which copying starts."}],"pos":[21843,21913],"yaml":true},{"content":"Gets the number of items in the session-state collection.","nodes":[{"pos":[0,57],"content":"Gets the number of items in the session-state collection.","nodes":[{"content":"Gets the number of items in the session-state collection.","pos":[0,57]}]}],"pos":[22893,22951],"yaml":true},{"content":"The number of items in the collection.","nodes":[{"pos":[0,38],"content":"The number of items in the collection.","nodes":[{"content":"The number of items in the collection.","pos":[0,38]}]}],"pos":[23056,23095],"yaml":true},{"content":"Returns an enumerator that can be used to read all the session-state variable names in the current session.","nodes":[{"pos":[0,107],"content":"Returns an enumerator that can be used to read all the session-state variable names in the current session.","nodes":[{"content":"Returns an enumerator that can be used to read all the session-state variable names in the current session.","pos":[0,107]}]}],"pos":[24126,24234],"yaml":true},{"content":"An <xref href=\"System.Collections.IEnumerator\"></xref> that can iterate through the variable names in the session-state collection.","nodes":[{"pos":[0,131],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Collections.IEnumerator\"&gt;&lt;/xref&gt;</ph> that can iterate through the variable names in the session-state collection.","source":"An <xref href=\"System.Collections.IEnumerator\"></xref> that can iterate through the variable names in the session-state collection."}],"pos":[25384,25516],"yaml":true},{"content":"Gets a value indicating whether the session ID is embedded in the URL or stored in an HTTP cookie.","nodes":[{"pos":[0,98],"content":"Gets a value indicating whether the session ID is embedded in the URL or stored in an HTTP cookie.","nodes":[{"content":"Gets a value indicating whether the session ID is embedded in the URL or stored in an HTTP cookie.","pos":[0,98]}]}],"pos":[26545,26644],"yaml":true},{"content":"ASP.NET identifies sessions uniquely with each browser. By default, the unique identifier for a session is stored in a non-expiring session cookie in the browser. You can specify that session identifiers not be stored in a cookie by setting the `cookieless` attribute to `true` in the  configuration element.  \n  \n> [!NOTE]\n>  To improve the security of your application, your application should allow users to log out, at which point it should call the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method. This reduces the potential for an unwanted source using the unique identifier in the URL to retrieve private data stored in the session for a user.  \n  \n ASP.NET maintains cookieless session state by automatically inserting a unique session ID into the page's URL. For example, the following URL has been modified by ASP.NET to include the unique session ID lit3py55t21z5v55vlm25s55:  \n  \n```  \nhttp://www.example.com/(S(4danlfat035muve4g0mvgfrr))/orderform.aspx  \n```  \n  \n ASP.NET modifies the links contained in all requested pages by embedding a session-ID value in the links just before sending each page to the browser. Session state is maintained as long as the user follows the path of links that the site provides. However, if the user agent rewrites a URL, the session-state instance will be lost.  \n  \n The session ID is embedded in the URL after the slash that follows the application name and before any remaining file or virtual-directory identifier. This allows ASP.NET to resolve the application name before involving the <xref:System.Web.SessionState.SessionStateModule> in the request.  \n  \n By default, session identifiers used in cookieless sessions are recycled. That is, if a request is made with a session ID that has expired, a new session is started using the session ID supplied with the request. This behavior can result in the unwanted sharing of session data when a link that contains a cookieless session ID is shared with multiple browsers, perhaps through a search engine or other program. You can reduce the possibility of session data being shared by multiple clients by disabling the recycling of session identifiers. To do this, set the `regenerateExpiredSessionId` attribute of the  configuration element to `true`. This will result in a new session ID being generated when a cookieless session request is made with an expired session ID. Note that if the request made with the expired session ID uses the HTTP `POST` method, then any posted data will be lost when `regenerateExpiredSessionId` is `true`, as ASP.NET performs a redirect to ensure that the browser has the new session identifier in the URL.  \n  \n> [!NOTE]\n>  While setting the `regenerateExpiredSessionId` attribute to `true` reduces the possibility of unwanted sharing of session data, it does not protect against an unwanted source gaining access to the session of another user by obtaining the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value and including it in requests to the server. If you are storing private or sensitive information in session state, it is recommended that you use SSL to encrypt any communication between the browser and server that includes the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.","nodes":[{"pos":[0,308],"content":"ASP.NET identifies sessions uniquely with each browser. By default, the unique identifier for a session is stored in a non-expiring session cookie in the browser. You can specify that session identifiers not be stored in a cookie by setting the `cookieless` attribute to `true` in the  configuration element.","nodes":[{"content":"ASP.NET identifies sessions uniquely with each browser.","pos":[0,55]},{"content":"By default, the unique identifier for a session is stored in a non-expiring session cookie in the browser.","pos":[56,162]},{"content":"You can specify that session identifiers not be stored in a cookie by setting the <ph id=\"ph1\">`cookieless`</ph> attribute to <ph id=\"ph2\">`true`</ph> in the  configuration element.","pos":[163,308],"source":" You can specify that session identifiers not be stored in a cookie by setting the `cookieless` attribute to `true` in the  configuration element."}]},{"pos":[316,668],"content":"[!NOTE]\n To improve the security of your application, your application should allow users to log out, at which point it should call the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method. This reduces the potential for an unwanted source using the unique identifier in the URL to retrieve private data stored in the session for a user.","leadings":["","> "],"nodes":[{"content":" To improve the security of your application, your application should allow users to log out, at which point it should call the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method. This reduces the potential for an unwanted source using the unique identifier in the URL to retrieve private data stored in the session for a user.","pos":[8,350],"nodes":[{"content":"To improve the security of your application, your application should allow users to log out, at which point it should call the <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.Abandon%2A&gt;</ph> method.","pos":[1,194],"source":" To improve the security of your application, your application should allow users to log out, at which point it should call the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method."},{"content":"This reduces the potential for an unwanted source using the unique identifier in the URL to retrieve private data stored in the session for a user.","pos":[195,342]}]}]},{"pos":[675,904],"content":"ASP.NET maintains cookieless session state by automatically inserting a unique session ID into the page's URL. For example, the following URL has been modified by ASP.NET to include the unique session ID lit3py55t21z5v55vlm25s55:","nodes":[{"content":"ASP.NET maintains cookieless session state by automatically inserting a unique session ID into the page's URL. For example, the following URL has been modified by ASP.NET to include the unique session ID lit3py55t21z5v55vlm25s55:","pos":[0,229],"nodes":[{"content":"ASP.NET maintains cookieless session state by automatically inserting a unique session ID into the page's URL.","pos":[0,110]},{"content":"For example, the following URL has been modified by ASP.NET to include the unique session ID lit3py55t21z5v55vlm25s55:","pos":[111,229]}]}]},{"pos":[996,1328],"content":"ASP.NET modifies the links contained in all requested pages by embedding a session-ID value in the links just before sending each page to the browser. Session state is maintained as long as the user follows the path of links that the site provides. However, if the user agent rewrites a URL, the session-state instance will be lost.","nodes":[{"content":"ASP.NET modifies the links contained in all requested pages by embedding a session-ID value in the links just before sending each page to the browser. Session state is maintained as long as the user follows the path of links that the site provides. However, if the user agent rewrites a URL, the session-state instance will be lost.","pos":[0,332],"nodes":[{"content":"ASP.NET modifies the links contained in all requested pages by embedding a session-ID value in the links just before sending each page to the browser.","pos":[0,150]},{"content":"Session state is maintained as long as the user follows the path of links that the site provides.","pos":[151,248]},{"content":"However, if the user agent rewrites a URL, the session-state instance will be lost.","pos":[249,332]}]}]},{"pos":[1335,1624],"content":"The session ID is embedded in the URL after the slash that follows the application name and before any remaining file or virtual-directory identifier. This allows ASP.NET to resolve the application name before involving the <xref:System.Web.SessionState.SessionStateModule> in the request.","nodes":[{"content":"The session ID is embedded in the URL after the slash that follows the application name and before any remaining file or virtual-directory identifier. This allows ASP.NET to resolve the application name before involving the <xref:System.Web.SessionState.SessionStateModule> in the request.","pos":[0,289],"nodes":[{"content":"The session ID is embedded in the URL after the slash that follows the application name and before any remaining file or virtual-directory identifier.","pos":[0,150]},{"content":"This allows ASP.NET to resolve the application name before involving the <ph id=\"ph1\">&lt;xref:System.Web.SessionState.SessionStateModule&gt;</ph> in the request.","pos":[151,289],"source":" This allows ASP.NET to resolve the application name before involving the <xref:System.Web.SessionState.SessionStateModule> in the request."}]}]},{"pos":[1631,2663],"content":"By default, session identifiers used in cookieless sessions are recycled. That is, if a request is made with a session ID that has expired, a new session is started using the session ID supplied with the request. This behavior can result in the unwanted sharing of session data when a link that contains a cookieless session ID is shared with multiple browsers, perhaps through a search engine or other program. You can reduce the possibility of session data being shared by multiple clients by disabling the recycling of session identifiers. To do this, set the `regenerateExpiredSessionId` attribute of the  configuration element to `true`. This will result in a new session ID being generated when a cookieless session request is made with an expired session ID. Note that if the request made with the expired session ID uses the HTTP `POST` method, then any posted data will be lost when `regenerateExpiredSessionId` is `true`, as ASP.NET performs a redirect to ensure that the browser has the new session identifier in the URL.","nodes":[{"content":"By default, session identifiers used in cookieless sessions are recycled.","pos":[0,73]},{"content":"That is, if a request is made with a session ID that has expired, a new session is started using the session ID supplied with the request.","pos":[74,212]},{"content":"This behavior can result in the unwanted sharing of session data when a link that contains a cookieless session ID is shared with multiple browsers, perhaps through a search engine or other program.","pos":[213,411]},{"content":"You can reduce the possibility of session data being shared by multiple clients by disabling the recycling of session identifiers.","pos":[412,542]},{"content":"To do this, set the <ph id=\"ph1\">`regenerateExpiredSessionId`</ph> attribute of the  configuration element to <ph id=\"ph2\">`true`</ph>.","pos":[543,642],"source":" To do this, set the `regenerateExpiredSessionId` attribute of the  configuration element to `true`."},{"content":"This will result in a new session ID being generated when a cookieless session request is made with an expired session ID.","pos":[643,765]},{"content":"Note that if the request made with the expired session ID uses the HTTP <ph id=\"ph1\">`POST`</ph> method, then any posted data will be lost when <ph id=\"ph2\">`regenerateExpiredSessionId`</ph> is <ph id=\"ph3\">`true`</ph>, as ASP.NET performs a redirect to ensure that the browser has the new session identifier in the URL.","pos":[766,1032],"source":" Note that if the request made with the expired session ID uses the HTTP `POST` method, then any posted data will be lost when `regenerateExpiredSessionId` is `true`, as ASP.NET performs a redirect to ensure that the browser has the new session identifier in the URL."}]},{"pos":[2671,3275],"content":"[!NOTE]\n While setting the `regenerateExpiredSessionId` attribute to `true` reduces the possibility of unwanted sharing of session data, it does not protect against an unwanted source gaining access to the session of another user by obtaining the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value and including it in requests to the server. If you are storing private or sensitive information in session state, it is recommended that you use SSL to encrypt any communication between the browser and server that includes the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.","leadings":["","> "],"nodes":[{"content":" While setting the `regenerateExpiredSessionId` attribute to `true` reduces the possibility of unwanted sharing of session data, it does not protect against an unwanted source gaining access to the session of another user by obtaining the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value and including it in requests to the server. If you are storing private or sensitive information in session state, it is recommended that you use SSL to encrypt any communication between the browser and server that includes the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.","pos":[8,602],"nodes":[{"content":"While setting the <ph id=\"ph1\">`regenerateExpiredSessionId`</ph> attribute to <ph id=\"ph2\">`true`</ph> reduces the possibility of unwanted sharing of session data, it does not protect against an unwanted source gaining access to the session of another user by obtaining the <ph id=\"ph3\">&lt;xref:System.Web.SessionState.HttpSessionState.SessionID%2A&gt;</ph> value and including it in requests to the server.","pos":[1,349],"source":" While setting the `regenerateExpiredSessionId` attribute to `true` reduces the possibility of unwanted sharing of session data, it does not protect against an unwanted source gaining access to the session of another user by obtaining the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value and including it in requests to the server."},{"content":"If you are storing private or sensitive information in session state, it is recommended that you use SSL to encrypt any communication between the browser and server that includes the <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.SessionID%2A&gt;</ph>.","pos":[350,594],"source":" If you are storing private or sensitive information in session state, it is recommended that you use SSL to encrypt any communication between the browser and server that includes the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>."}]}]}],"pos":[26655,29951],"yaml":true,"extradata":"MT"},{"content":"`true` if the session is embedded in the URL; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if the session is embedded in the URL; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the session is embedded in the URL; otherwise, `false`."}],"pos":[30424,30492],"yaml":true},{"content":"Gets a value indicating whether the session was created with the current request.","nodes":[{"pos":[0,81],"content":"Gets a value indicating whether the session was created with the current request.","nodes":[{"content":"Gets a value indicating whether the session was created with the current request.","pos":[0,81]}]}],"pos":[31520,31602],"yaml":true},{"content":"`true` if the session was created with the current request; otherwise, `false`.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">`true`</ph> if the session was created with the current request; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the session was created with the current request; otherwise, `false`."}],"pos":[31717,31799],"yaml":true},{"content":"Gets a value indicating whether the session is read-only.","nodes":[{"pos":[0,57],"content":"Gets a value indicating whether the session is read-only.","nodes":[{"content":"Gets a value indicating whether the session is read-only.","pos":[0,57]}]}],"pos":[32815,32873],"yaml":true},{"content":"`true` if the session is read-only; otherwise, `false`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">`true`</ph> if the session is read-only; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the session is read-only; otherwise, `false`."}],"pos":[32986,33044],"yaml":true},{"content":"Gets a value indicating whether access to the collection of session-state values is synchronized (thread safe).","nodes":[{"pos":[0,111],"content":"Gets a value indicating whether access to the collection of session-state values is synchronized (thread safe).","nodes":[{"content":"Gets a value indicating whether access to the collection of session-state values is synchronized (thread safe).","pos":[0,111]}]}],"pos":[34082,34194],"yaml":true},{"content":"`true` if access to the collection is synchronized (thread safe); otherwise, `false`.","nodes":[{"pos":[0,85],"content":"<ph id=\"ph1\">`true`</ph> if access to the collection is synchronized (thread safe); otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if access to the collection is synchronized (thread safe); otherwise, `false`."}],"pos":[34311,34399],"yaml":true},{"content":"Gets or sets a session value by numerical index.","nodes":[{"pos":[0,48],"content":"Gets or sets a session value by numerical index.","nodes":[{"content":"Gets or sets a session value by numerical index.","pos":[0,48]}]}],"pos":[35444,35493],"yaml":true},{"content":"The numerical index of the session value.","nodes":[{"pos":[0,41],"content":"The numerical index of the session value.","nodes":[{"content":"The numerical index of the session value.","pos":[0,41]}]}],"pos":[35636,35678],"yaml":true},{"content":"The session-state value stored at the specified index, or `null` if the item does not exist.","nodes":[{"pos":[0,92],"content":"The session-state value stored at the specified index, or <ph id=\"ph1\">`null`</ph> if the item does not exist.","source":"The session-state value stored at the specified index, or `null` if the item does not exist."}],"pos":[35735,35828],"yaml":true},{"content":"Gets or sets a session value by name.","nodes":[{"pos":[0,37],"content":"Gets or sets a session value by name.","nodes":[{"content":"Gets or sets a session value by name.","pos":[0,37]}]}],"pos":[36869,36907],"yaml":true},{"content":"The key name of the session value.","nodes":[{"pos":[0,34],"content":"The key name of the session value.","nodes":[{"content":"The key name of the session value.","pos":[0,34]}]}],"pos":[37052,37087],"yaml":true},{"content":"The session-state value with the specified name, or `null` if the item does not exist.","nodes":[{"pos":[0,86],"content":"The session-state value with the specified name, or <ph id=\"ph1\">`null`</ph> if the item does not exist.","source":"The session-state value with the specified name, or `null` if the item does not exist."}],"pos":[37144,37231],"yaml":true},{"content":"Gets a collection of the keys for all values stored in the session-state collection.","nodes":[{"pos":[0,84],"content":"Gets a collection of the keys for all values stored in the session-state collection.","nodes":[{"content":"Gets a collection of the keys for all values stored in the session-state collection.","pos":[0,84]}]}],"pos":[38203,38288],"yaml":true},{"content":"The <xref href=\"System.Collections.Specialized.NameObjectCollectionBase.KeysCollection\"></xref> that contains all the session keys.","nodes":[{"pos":[0,131],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Collections.Specialized.NameObjectCollectionBase.KeysCollection\"&gt;&lt;/xref&gt;</ph> that contains all the session keys.","source":"The <xref href=\"System.Collections.Specialized.NameObjectCollectionBase.KeysCollection\"></xref> that contains all the session keys."}],"pos":[38517,38649],"yaml":true},{"content":"Gets or sets the locale identifier (LCID) of the current session.","nodes":[{"pos":[0,65],"content":"Gets or sets the locale identifier (LCID) of the current session.","nodes":[{"content":"Gets or sets the locale identifier (LCID) of the current session.","pos":[0,65]}]}],"pos":[39621,39687],"yaml":true},{"content":"The <xref:System.Web.SessionState.HttpSessionState.LCID%2A> property is provided for compatibility with earlier versions of ASP only. If you do not need to maintain backward compatibility with ASP pages, use the <xref:System.Globalization.CultureInfo.LCID%2A> property instead.  \n  \n ASP.NET does not store the locale identifier in session state. The <xref:System.Web.SessionState.HttpSessionState.LCID%2A> property accesses the <xref:System.Globalization.CultureInfo.LCID%2A> property to get and set the identifier.","nodes":[{"pos":[0,277],"content":"The <xref:System.Web.SessionState.HttpSessionState.LCID%2A> property is provided for compatibility with earlier versions of ASP only. If you do not need to maintain backward compatibility with ASP pages, use the <xref:System.Globalization.CultureInfo.LCID%2A> property instead.","nodes":[{"content":"The <xref:System.Web.SessionState.HttpSessionState.LCID%2A> property is provided for compatibility with earlier versions of ASP only. If you do not need to maintain backward compatibility with ASP pages, use the <xref:System.Globalization.CultureInfo.LCID%2A> property instead.","pos":[0,277],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.LCID%2A&gt;</ph> property is provided for compatibility with earlier versions of ASP only.","pos":[0,133],"source":"The <xref:System.Web.SessionState.HttpSessionState.LCID%2A> property is provided for compatibility with earlier versions of ASP only."},{"content":"If you do not need to maintain backward compatibility with ASP pages, use the <ph id=\"ph1\">&lt;xref:System.Globalization.CultureInfo.LCID%2A&gt;</ph> property instead.","pos":[134,277],"source":" If you do not need to maintain backward compatibility with ASP pages, use the <xref:System.Globalization.CultureInfo.LCID%2A> property instead."}]}]},{"pos":[284,516],"content":"ASP.NET does not store the locale identifier in session state. The <xref:System.Web.SessionState.HttpSessionState.LCID%2A> property accesses the <xref:System.Globalization.CultureInfo.LCID%2A> property to get and set the identifier.","nodes":[{"content":"ASP.NET does not store the locale identifier in session state. The <xref:System.Web.SessionState.HttpSessionState.LCID%2A> property accesses the <xref:System.Globalization.CultureInfo.LCID%2A> property to get and set the identifier.","pos":[0,232],"nodes":[{"content":"ASP.NET does not store the locale identifier in session state.","pos":[0,62]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.LCID%2A&gt;</ph> property accesses the <ph id=\"ph2\">&lt;xref:System.Globalization.CultureInfo.LCID%2A&gt;</ph> property to get and set the identifier.","pos":[63,232],"source":" The <xref:System.Web.SessionState.HttpSessionState.LCID%2A> property accesses the <xref:System.Globalization.CultureInfo.LCID%2A> property to get and set the identifier."}]}]}],"pos":[39698,40219],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Globalization.CultureInfo\"></xref> instance that specifies the culture of the current session.","nodes":[{"pos":[0,115],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Globalization.CultureInfo\"&gt;&lt;/xref&gt;</ph> instance that specifies the culture of the current session.","source":"A <xref href=\"System.Globalization.CultureInfo\"></xref> instance that specifies the culture of the current session."}],"pos":[40328,40444],"yaml":true},{"content":"Gets the current session-state mode.","nodes":[{"pos":[0,36],"content":"Gets the current session-state mode.","nodes":[{"content":"Gets the current session-state mode.","pos":[0,36]}]}],"pos":[41416,41453],"yaml":true},{"content":"For information about how to configure your server for <xref:System.Web.SessionState.SessionStateMode.StateServer> or <xref:System.Web.SessionState.SessionStateMode.SQLServer> session-state storage, see [ASP.NET Session State Overview](http://msdn.microsoft.com/library/6d60d381-6521-4e1d-9089-da6464f2a9bc).","nodes":[{"pos":[0,308],"content":"For information about how to configure your server for <ph id=\"ph1\">&lt;xref:System.Web.SessionState.SessionStateMode.StateServer&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Web.SessionState.SessionStateMode.SQLServer&gt;</ph> session-state storage, see <bpt id=\"p1\">[</bpt>ASP.NET Session State Overview<ept id=\"p1\">](http://msdn.microsoft.com/library/6d60d381-6521-4e1d-9089-da6464f2a9bc)</ept>.","source":"For information about how to configure your server for <xref:System.Web.SessionState.SessionStateMode.StateServer> or <xref:System.Web.SessionState.SessionStateMode.SQLServer> session-state storage, see [ASP.NET Session State Overview](http://msdn.microsoft.com/library/6d60d381-6521-4e1d-9089-da6464f2a9bc)."}],"pos":[41464,41773],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Web.SessionState.SessionStateMode\"></xref> values.","nodes":[{"pos":[0,80],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Web.SessionState.SessionStateMode\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.Web.SessionState.SessionStateMode\"></xref> values."}],"pos":[42468,42549],"yaml":true},{"content":"Deletes an item from the session-state collection.","nodes":[{"pos":[0,50],"content":"Deletes an item from the session-state collection.","nodes":[{"content":"Deletes an item from the session-state collection.","pos":[0,50]}]}],"pos":[43600,43651],"yaml":true},{"content":"If the session-state collection does not contain an element with the specified `name`, the collection remains unchanged. No exception is thrown.","nodes":[{"pos":[0,144],"content":"If the session-state collection does not contain an element with the specified `name`, the collection remains unchanged. No exception is thrown.","nodes":[{"content":"If the session-state collection does not contain an element with the specified <ph id=\"ph1\">`name`</ph>, the collection remains unchanged.","pos":[0,120],"source":"If the session-state collection does not contain an element with the specified `name`, the collection remains unchanged."},{"content":"No exception is thrown.","pos":[121,144]}]}],"pos":[43662,43807],"yaml":true,"extradata":"MT"},{"content":"The name of the item to delete from the session-state collection.","nodes":[{"pos":[0,65],"content":"The name of the item to delete from the session-state collection.","nodes":[{"content":"The name of the item to delete from the session-state collection.","pos":[0,65]}]}],"pos":[44904,44970],"yaml":true},{"content":"Removes all keys and values from the session-state collection.","nodes":[{"pos":[0,62],"content":"Removes all keys and values from the session-state collection.","nodes":[{"content":"Removes all keys and values from the session-state collection.","pos":[0,62]}]}],"pos":[45978,46041],"yaml":true},{"content":"<xref:System.Web.SessionState.HttpSessionState.RemoveAll%2A> performs the same function as <xref:System.Web.SessionState.HttpSessionState.Clear%2A>.","nodes":[{"pos":[0,148],"content":"<xref:System.Web.SessionState.HttpSessionState.RemoveAll%2A> performs the same function as <xref:System.Web.SessionState.HttpSessionState.Clear%2A>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.RemoveAll%2A&gt;</ph> performs the same function as <ph id=\"ph2\">&lt;xref:System.Web.SessionState.HttpSessionState.Clear%2A&gt;</ph>.","pos":[0,148],"source":"<xref:System.Web.SessionState.HttpSessionState.RemoveAll%2A> performs the same function as <xref:System.Web.SessionState.HttpSessionState.Clear%2A>."}]}],"pos":[46052,46201],"yaml":true,"extradata":"MT"},{"content":"Deletes an item at a specified index from the session-state collection.","nodes":[{"pos":[0,71],"content":"Deletes an item at a specified index from the session-state collection.","nodes":[{"content":"Deletes an item at a specified index from the session-state collection.","pos":[0,71]}]}],"pos":[47331,47403],"yaml":true},{"content":"The index of the item to remove from the session-state collection.","nodes":[{"pos":[0,66],"content":"The index of the item to remove from the session-state collection.","nodes":[{"content":"The index of the item to remove from the session-state collection.","pos":[0,66]}]}],"pos":[47536,47603],"yaml":true},{"content":"<code>index</code> is less than zero.  \n  \n \\- or -  \n  \n <code>index</code> is equal to or greater than <xref href=\"System.Web.SessionState.HttpSessionState.Count\"></xref>.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> is less than zero."},{"pos":[44,51],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[58,173],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> is equal to or greater than <ph id=\"ph2\">&lt;xref href=\"System.Web.SessionState.HttpSessionState.Count\"&gt;&lt;/xref&gt;</ph>.","source":"<code>index</code> is equal to or greater than <xref href=\"System.Web.SessionState.HttpSessionState.Count\"></xref>."}],"pos":[47794,47977],"yaml":true},{"content":"Gets the unique identifier for the session.","nodes":[{"pos":[0,43],"content":"Gets the unique identifier for the session.","nodes":[{"content":"Gets the unique identifier for the session.","pos":[0,43]}]}],"pos":[48903,48947],"yaml":true},{"content":"The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> property is used to uniquely identify a browser with session data on the server. The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value is randomly generated by ASP.NET and stored in a non-expiring session cookie in the browser. The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value is then sent in a cookie with each request to the ASP.NET application.  \n  \n If you want to disable the use of cookies in your ASP.NET application and still make use of session state, you can configure your application to store the session identifier in the URL instead of a cookie by setting the `cookieless` attribute of the  configuration element to `true`, or to <xref:System.Web.HttpCookieMode.UseUri>, in the Web.config file for your application. You can have ASP.NET determine whether cookies are supported by the browser by specifying a value of <xref:System.Web.HttpCookieMode.UseDeviceProfile> for the `cookieless` attribute. You can also have ASP.NET determine whether cookies are enabled for the browser by specifying a value of <xref:System.Web.HttpCookieMode.AutoDetect> for the `cookieless` attribute. If cookies are supported when <xref:System.Web.HttpCookieMode.UseDeviceProfile> is specified, or enabled when <xref:System.Web.HttpCookieMode.AutoDetect> is specified, then the session identifier will be stored in a cookie; otherwise the session identifier will be stored in the URL. For more information, see the <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> property.  \n  \n The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> is sent between the server and the browser in clear text, either in a cookie or in the URL. As a result, an unwanted source could gain access to the session of another user by obtaining the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value and including it in requests to the server. If you are storing private or sensitive information in session state, it is recommended that you use SSL to encrypt any communication between the browser and server that includes the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.  \n  \n When using cookie-based session state, ASP.NET does not allocate storage for session data until the <xref:System.Web.UI.Page.Session%2A> object is used. As a result, a new session ID is generated for each page request until the session object is accessed. If your application requires a static session ID for the entire session, you can either implement the `Session_Start` method in the application's Global.asax file and store data in the <xref:System.Web.UI.Page.Session%2A> object to fix the session ID, or you can use code in another part of your application to explicitly store data in the <xref:System.Web.UI.Page.Session%2A> object.  \n  \n If your application uses cookieless session state, the session ID is generated on the first page view and is maintained for the entire session.","nodes":[{"pos":[0,451],"content":"The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> property is used to uniquely identify a browser with session data on the server. The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value is randomly generated by ASP.NET and stored in a non-expiring session cookie in the browser. The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value is then sent in a cookie with each request to the ASP.NET application.","nodes":[{"content":"The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> property is used to uniquely identify a browser with session data on the server. The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value is randomly generated by ASP.NET and stored in a non-expiring session cookie in the browser. The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value is then sent in a cookie with each request to the ASP.NET application.","pos":[0,451],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.SessionID%2A&gt;</ph> property is used to uniquely identify a browser with session data on the server.","pos":[0,145],"source":"The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> property is used to uniquely identify a browser with session data on the server."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.SessionID%2A&gt;</ph> value is randomly generated by ASP.NET and stored in a non-expiring session cookie in the browser.","pos":[146,309],"source":" The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value is randomly generated by ASP.NET and stored in a non-expiring session cookie in the browser."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.SessionID%2A&gt;</ph> value is then sent in a cookie with each request to the ASP.NET application.","pos":[310,451],"source":" The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value is then sent in a cookie with each request to the ASP.NET application."}]}]},{"pos":[458,1585],"content":"If you want to disable the use of cookies in your ASP.NET application and still make use of session state, you can configure your application to store the session identifier in the URL instead of a cookie by setting the `cookieless` attribute of the  configuration element to `true`, or to <xref:System.Web.HttpCookieMode.UseUri>, in the Web.config file for your application. You can have ASP.NET determine whether cookies are supported by the browser by specifying a value of <xref:System.Web.HttpCookieMode.UseDeviceProfile> for the `cookieless` attribute. You can also have ASP.NET determine whether cookies are enabled for the browser by specifying a value of <xref:System.Web.HttpCookieMode.AutoDetect> for the `cookieless` attribute. If cookies are supported when <xref:System.Web.HttpCookieMode.UseDeviceProfile> is specified, or enabled when <xref:System.Web.HttpCookieMode.AutoDetect> is specified, then the session identifier will be stored in a cookie; otherwise the session identifier will be stored in the URL. For more information, see the <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> property.","nodes":[{"content":"If you want to disable the use of cookies in your ASP.NET application and still make use of session state, you can configure your application to store the session identifier in the URL instead of a cookie by setting the <ph id=\"ph1\">`cookieless`</ph> attribute of the  configuration element to <ph id=\"ph2\">`true`</ph>, or to <ph id=\"ph3\">&lt;xref:System.Web.HttpCookieMode.UseUri&gt;</ph>, in the Web.config file for your application.","pos":[0,375],"source":"If you want to disable the use of cookies in your ASP.NET application and still make use of session state, you can configure your application to store the session identifier in the URL instead of a cookie by setting the `cookieless` attribute of the  configuration element to `true`, or to <xref:System.Web.HttpCookieMode.UseUri>, in the Web.config file for your application."},{"content":"You can have ASP.NET determine whether cookies are supported by the browser by specifying a value of <ph id=\"ph1\">&lt;xref:System.Web.HttpCookieMode.UseDeviceProfile&gt;</ph> for the <ph id=\"ph2\">`cookieless`</ph> attribute.","pos":[376,558],"source":" You can have ASP.NET determine whether cookies are supported by the browser by specifying a value of <xref:System.Web.HttpCookieMode.UseDeviceProfile> for the `cookieless` attribute."},{"content":"You can also have ASP.NET determine whether cookies are enabled for the browser by specifying a value of <ph id=\"ph1\">&lt;xref:System.Web.HttpCookieMode.AutoDetect&gt;</ph> for the <ph id=\"ph2\">`cookieless`</ph> attribute.","pos":[559,739],"source":" You can also have ASP.NET determine whether cookies are enabled for the browser by specifying a value of <xref:System.Web.HttpCookieMode.AutoDetect> for the `cookieless` attribute."},{"content":"If cookies are supported when <ph id=\"ph1\">&lt;xref:System.Web.HttpCookieMode.UseDeviceProfile&gt;</ph> is specified, or enabled when <ph id=\"ph2\">&lt;xref:System.Web.HttpCookieMode.AutoDetect&gt;</ph> is specified, then the session identifier will be stored in a cookie; otherwise the session identifier will be stored in the URL.","pos":[740,1023],"source":" If cookies are supported when <xref:System.Web.HttpCookieMode.UseDeviceProfile> is specified, or enabled when <xref:System.Web.HttpCookieMode.AutoDetect> is specified, then the session identifier will be stored in a cookie; otherwise the session identifier will be stored in the URL."},{"content":"For more information, see the <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A&gt;</ph> property.","pos":[1024,1127],"source":" For more information, see the <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> property."}]},{"pos":[1592,2202],"content":"The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> is sent between the server and the browser in clear text, either in a cookie or in the URL. As a result, an unwanted source could gain access to the session of another user by obtaining the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value and including it in requests to the server. If you are storing private or sensitive information in session state, it is recommended that you use SSL to encrypt any communication between the browser and server that includes the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.","nodes":[{"content":"The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> is sent between the server and the browser in clear text, either in a cookie or in the URL. As a result, an unwanted source could gain access to the session of another user by obtaining the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value and including it in requests to the server. If you are storing private or sensitive information in session state, it is recommended that you use SSL to encrypt any communication between the browser and server that includes the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.","pos":[0,610],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.SessionID%2A&gt;</ph> is sent between the server and the browser in clear text, either in a cookie or in the URL.","pos":[0,156],"source":"The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> is sent between the server and the browser in clear text, either in a cookie or in the URL."},{"content":"As a result, an unwanted source could gain access to the session of another user by obtaining the <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.SessionID%2A&gt;</ph> value and including it in requests to the server.","pos":[157,365],"source":" As a result, an unwanted source could gain access to the session of another user by obtaining the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value and including it in requests to the server."},{"content":"If you are storing private or sensitive information in session state, it is recommended that you use SSL to encrypt any communication between the browser and server that includes the <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.SessionID%2A&gt;</ph>.","pos":[366,610],"source":" If you are storing private or sensitive information in session state, it is recommended that you use SSL to encrypt any communication between the browser and server that includes the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>."}]}]},{"pos":[2209,2849],"content":"When using cookie-based session state, ASP.NET does not allocate storage for session data until the <xref:System.Web.UI.Page.Session%2A> object is used. As a result, a new session ID is generated for each page request until the session object is accessed. If your application requires a static session ID for the entire session, you can either implement the `Session_Start` method in the application's Global.asax file and store data in the <xref:System.Web.UI.Page.Session%2A> object to fix the session ID, or you can use code in another part of your application to explicitly store data in the <xref:System.Web.UI.Page.Session%2A> object.","nodes":[{"content":"When using cookie-based session state, ASP.NET does not allocate storage for session data until the <ph id=\"ph1\">&lt;xref:System.Web.UI.Page.Session%2A&gt;</ph> object is used.","pos":[0,152],"source":"When using cookie-based session state, ASP.NET does not allocate storage for session data until the <xref:System.Web.UI.Page.Session%2A> object is used."},{"content":"As a result, a new session ID is generated for each page request until the session object is accessed.","pos":[153,255]},{"content":"If your application requires a static session ID for the entire session, you can either implement the <ph id=\"ph1\">`Session_Start`</ph> method in the application's Global.asax file and store data in the <ph id=\"ph2\">&lt;xref:System.Web.UI.Page.Session%2A&gt;</ph> object to fix the session ID, or you can use code in another part of your application to explicitly store data in the <ph id=\"ph3\">&lt;xref:System.Web.UI.Page.Session%2A&gt;</ph> object.","pos":[256,640],"source":" If your application requires a static session ID for the entire session, you can either implement the `Session_Start` method in the application's Global.asax file and store data in the <xref:System.Web.UI.Page.Session%2A> object to fix the session ID, or you can use code in another part of your application to explicitly store data in the <xref:System.Web.UI.Page.Session%2A> object."}]},{"pos":[2856,2999],"content":"If your application uses cookieless session state, the session ID is generated on the first page view and is maintained for the entire session.","nodes":[{"content":"If your application uses cookieless session state, the session ID is generated on the first page view and is maintained for the entire session.","pos":[0,143]}]}],"pos":[48958,51968],"yaml":true,"extradata":"MT"},{"content":"The unique session identifier.","nodes":[{"pos":[0,30],"content":"The unique session identifier.","nodes":[{"content":"The unique session identifier.","pos":[0,30]}]}],"pos":[52539,52570],"yaml":true},{"content":"Gets a collection of objects declared by `<object Runat=\"Server\" Scope=\"Session\"/>` tags within the ASP.NET application file Global.asax.","nodes":[{"pos":[0,137],"content":"Gets a collection of objects declared by <ph id=\"ph1\">`&lt;object Runat=\"Server\" Scope=\"Session\"/&gt;`</ph> tags within the ASP.NET application file Global.asax.","source":"Gets a collection of objects declared by `<object Runat=\"Server\" Scope=\"Session\"/>` tags within the ASP.NET application file Global.asax."}],"pos":[53601,53739],"yaml":true},{"content":"If an object on a page does not support serialization and <xref:System.Web.SessionState.HttpSessionState.Mode%2A> is out-of-process (<xref:System.Web.SessionState.SessionStateMode.SQLServer> or <xref:System.Web.SessionState.SessionStateMode.StateServer>), the object will not be created and will not be added to this collection.  \n  \n The <xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A> property is provided for compatibility with earlier versions of ASP.","nodes":[{"pos":[0,328],"content":"If an object on a page does not support serialization and <xref:System.Web.SessionState.HttpSessionState.Mode%2A> is out-of-process (<xref:System.Web.SessionState.SessionStateMode.SQLServer> or <xref:System.Web.SessionState.SessionStateMode.StateServer>), the object will not be created and will not be added to this collection.","nodes":[{"content":"If an object on a page does not support serialization and <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.Mode%2A&gt;</ph> is out-of-process (<ph id=\"ph2\">&lt;xref:System.Web.SessionState.SessionStateMode.SQLServer&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Web.SessionState.SessionStateMode.StateServer&gt;</ph>), the object will not be created and will not be added to this collection.","pos":[0,328],"source":"If an object on a page does not support serialization and <xref:System.Web.SessionState.HttpSessionState.Mode%2A> is out-of-process (<xref:System.Web.SessionState.SessionStateMode.SQLServer> or <xref:System.Web.SessionState.SessionStateMode.StateServer>), the object will not be created and will not be added to this collection."}]},{"pos":[335,472],"content":"The <xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A> property is provided for compatibility with earlier versions of ASP.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A&gt;</ph> property is provided for compatibility with earlier versions of ASP.","pos":[0,137],"source":"The <xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A> property is provided for compatibility with earlier versions of ASP."}]}],"pos":[53750,54227],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Web.HttpStaticObjectsCollection\"></xref> containing objects declared in the Global.asax file.","nodes":[{"pos":[0,115],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Web.HttpStaticObjectsCollection\"&gt;&lt;/xref&gt;</ph> containing objects declared in the Global.asax file.","source":"An <xref href=\"System.Web.HttpStaticObjectsCollection\"></xref> containing objects declared in the Global.asax file."}],"pos":[54828,54944],"yaml":true},{"content":"Gets an object that can be used to synchronize access to the collection of session-state values.","nodes":[{"pos":[0,96],"content":"Gets an object that can be used to synchronize access to the collection of session-state values.","nodes":[{"content":"Gets an object that can be used to synchronize access to the collection of session-state values.","pos":[0,96]}]}],"pos":[55949,56046],"yaml":true},{"content":"An object that can be used to synchronize access to the collection.","nodes":[{"pos":[0,67],"content":"An object that can be used to synchronize access to the collection.","nodes":[{"content":"An object that can be used to synchronize access to the collection.","pos":[0,67]}]}],"pos":[56158,56226],"yaml":true},{"content":"Gets and sets the amount of time, in minutes, allowed between requests before the session-state provider terminates the session.","nodes":[{"pos":[0,128],"content":"Gets and sets the amount of time, in minutes, allowed between requests before the session-state provider terminates the session.","nodes":[{"content":"Gets and sets the amount of time, in minutes, allowed between requests before the session-state provider terminates the session.","pos":[0,128]}]}],"pos":[57220,57349],"yaml":true},{"content":"The <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property can be set in the Web.config file for an application using the `timeout` attribute of the  configuration element, or you can set the <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property value directly using application code.  \n  \n The <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property cannot be set to a value greater than 525,600 minutes (1 year). The default value is 20 minutes.","nodes":[{"pos":[0,311],"content":"The <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.Timeout%2A&gt;</ph> property can be set in the Web.config file for an application using the <ph id=\"ph2\">`timeout`</ph> attribute of the  configuration element, or you can set the <ph id=\"ph3\">&lt;xref:System.Web.SessionState.HttpSessionState.Timeout%2A&gt;</ph> property value directly using application code.","source":"The <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property can be set in the Web.config file for an application using the `timeout` attribute of the  configuration element, or you can set the <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property value directly using application code."},{"pos":[318,486],"content":"The <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property cannot be set to a value greater than 525,600 minutes (1 year). The default value is 20 minutes.","nodes":[{"content":"The <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property cannot be set to a value greater than 525,600 minutes (1 year). The default value is 20 minutes.","pos":[0,168],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Web.SessionState.HttpSessionState.Timeout%2A&gt;</ph> property cannot be set to a value greater than 525,600 minutes (1 year).","pos":[0,135],"source":"The <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property cannot be set to a value greater than 525,600 minutes (1 year)."},{"content":"The default value is 20 minutes.","pos":[136,168]}]}]}],"pos":[57360,57851],"yaml":true,"extradata":"MT"},{"content":"The time-out period, in minutes.","nodes":[{"pos":[0,32],"content":"The time-out period, in minutes.","nodes":[{"content":"The time-out period, in minutes.","pos":[0,32]}]}],"pos":[58279,58312],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Web.SessionState.HttpSessionState\n  commentId: T:System.Web.SessionState.HttpSessionState\n  id: HttpSessionState\n  children:\n  - System.Web.SessionState.HttpSessionState.Abandon\n  - System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)\n  - System.Web.SessionState.HttpSessionState.Clear\n  - System.Web.SessionState.HttpSessionState.CodePage\n  - System.Web.SessionState.HttpSessionState.Contents\n  - System.Web.SessionState.HttpSessionState.CookieMode\n  - System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)\n  - System.Web.SessionState.HttpSessionState.Count\n  - System.Web.SessionState.HttpSessionState.GetEnumerator\n  - System.Web.SessionState.HttpSessionState.IsCookieless\n  - System.Web.SessionState.HttpSessionState.IsNewSession\n  - System.Web.SessionState.HttpSessionState.IsReadOnly\n  - System.Web.SessionState.HttpSessionState.IsSynchronized\n  - System.Web.SessionState.HttpSessionState.Item(System.Int32)\n  - System.Web.SessionState.HttpSessionState.Item(System.String)\n  - System.Web.SessionState.HttpSessionState.Keys\n  - System.Web.SessionState.HttpSessionState.LCID\n  - System.Web.SessionState.HttpSessionState.Mode\n  - System.Web.SessionState.HttpSessionState.Remove(System.String)\n  - System.Web.SessionState.HttpSessionState.RemoveAll\n  - System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)\n  - System.Web.SessionState.HttpSessionState.SessionID\n  - System.Web.SessionState.HttpSessionState.StaticObjects\n  - System.Web.SessionState.HttpSessionState.SyncRoot\n  - System.Web.SessionState.HttpSessionState.Timeout\n  langs:\n  - csharp\n  name: HttpSessionState\n  nameWithType: HttpSessionState\n  fullName: System.Web.SessionState.HttpSessionState\n  type: Class\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Provides access to session-state values as well as session-level settings and lifetime management methods.\n  remarks: \"ASP.NET provides session-state management to enable you to store information associated with a unique browser session across multiple requests. You can store a collection of values referenced by a key name or by numerical index. Access to session values and functionality is available using the <xref:System.Web.SessionState.HttpSessionState> class, which is accessible through the <xref:System.Web.HttpContext.Session%2A> property of the current <xref:System.Web.HttpContext>, or the <xref:System.Web.UI.Page.Session%2A> property of the <xref:System.Web.UI.Page>.  \\n  \\n Session data is associated with a specific browser session using a unique identifier. By default, this identifier is stored in a non-expiring session cookie in the browser, but you can also configure your application to store the session identifier in the URL by setting the `cookieless` attribute to `true` or <xref:System.Web.HttpCookieMode.UseUri> in the  element of your application configuration. You can have ASP.NET determine whether cookies are supported by the browser by specifying a value of <xref:System.Web.HttpCookieMode.UseDeviceProfile> for the `cookieless` attribute. You can also have ASP.NET determine whether cookies are enabled for the browser by specifying a value of <xref:System.Web.HttpCookieMode.AutoDetect> for the `cookieless` attribute. If cookies are supported when <xref:System.Web.HttpCookieMode.UseDeviceProfile> is specified, or enabled when <xref:System.Web.HttpCookieMode.AutoDetect> is specified, then the session identifier will be stored in a cookie; otherwise the session identifier will be stored in the URL.  \\n  \\n Sessions are started during the first request and session values will persist as long as a new request is made by the browser before the number of minutes specified in the <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property pass. When a new session begins, the session <xref:System.Web.SessionState.SessionStateModule.Start> event is raised. You can use this event to perform any additional work at the start of a session, such as setting default session values. When a session times out, the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method is called, or the ASP.NET application is shut down, the session <xref:System.Web.SessionState.SessionStateModule.End> event is raised. You can use this event to perform any necessary cleanup. The <xref:System.Web.SessionState.SessionStateModule.End> event is raised only when the session state `mode` is set to <xref:System.Web.SessionState.SessionStateMode.InProc>.  \\n  \\n To improve performance, sessions that use cookies do not allocate session storage until data is actually stored in the <xref:System.Web.UI.Page.Session%2A> object. For more information, see the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> property.  \\n  \\n Session state does not persist across ASP.NET application boundaries. If a browser navigates to another application, the session information is not available to the new application.  \\n  \\n Session values are stored in memory on the Web server, by default. You can also store session values in a SQL Server database, an ASP.NET state server, or a custom server. This enables you to preserve session values in cases where the ASP.NET or IIS process or the ASP.NET application restarts and to make session values available across all the servers in a Web farm. This behavior is configured by setting the `mode` attribute to a valid <xref:System.Web.SessionState.SessionStateMode> value in the  element of your application configuration. For more information, see [Session-State Modes](http://msdn.microsoft.com/library/0bb0a3a3-650f-4c47-a0c5-b08b9b591bb4).  \\n  \\n Alternatives to session state include application state (see the <xref:System.Web.HttpApplication.Application%2A> property) and the ASP.NET cache (see the <xref:System.Web.Caching> namespace), which store variables that can be accessed by all users of an ASP.NET application; the ASP.NET profile (see the <xref:System.Web.Profile> namespace), which persists user values in a data store without expiring them using a time-out; ASP.NET <xref:System.Web.UI.WebControls?displayProperty=fullName>, which persist control values in the <xref:System.Web.UI.Control.ViewState%2A>; <xref:System.Web.HttpResponse.Cookies%2A>; the <xref:System.Web.HttpRequest.QueryString%2A> property; and fields on an HTML form that are available from an HTTP `POST` using the <xref:System.Web.HttpRequest.Form%2A> collection. For more details on the differences between session state and other state-management alternatives, see [ASP.NET State Management Recommendations](http://msdn.microsoft.com/library/af79fa0d-4bc8-47a6-9915-d8e355bfb732).\"\n  example:\n  - \"The following code example sets and retrieves values from session state.  \\n  \\n> [!IMPORTANT]\\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[HttpSessionState#30](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/session2cs.aspx#30)]  -->\\n <!-- TODO: review snippet reference [!code-vb[HttpSessionState#30](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/session2vb.aspx#30)]  -->\"\n  syntax:\n    content: 'public sealed class HttpSessionState : System.Collections.ICollection'\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  extensionMethods:\n  - System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  - System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.Abandon\n  commentId: M:System.Web.SessionState.HttpSessionState.Abandon\n  id: Abandon\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: Abandon()\n  nameWithType: HttpSessionState.Abandon()\n  fullName: HttpSessionState.Abandon()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Cancels the current session.\n  remarks: \"Once the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method is called, the current session is no longer valid and a new session can be started. <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> causes the <xref:System.Web.SessionState.SessionStateModule.End> event to be raised. A new <xref:System.Web.SessionState.SessionStateModule.Start> event will be raised on the next request.  \\n  \\n Session identifiers for abandoned or expired sessions are recycled by default. That is, if a request is made that includes the session identifier for an expired or abandoned session, a new session is started using the same session identifier. You can disable this by setting `regenerateExpiredSessionId` attribute of the  configuration element to `true`. For more information, see [Session Identifiers](http://msdn.microsoft.com/library/146ca206-d151-4f2e-a548-bcca05ccf0cb).  \\n  \\n The <xref:System.Web.SessionState.SessionStateModule.End> event is supported only when the <xref:System.Web.SessionState.HttpSessionState.Mode%2A> property is set to <xref:System.Web.SessionState.SessionStateMode.InProc>.\"\n  syntax:\n    content: public void Abandon ();\n    parameters: []\n  overload: System.Web.SessionState.HttpSessionState.Abandon*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)\n  commentId: M:System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)\n  id: Add(System.String,System.Object)\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: Add(String, Object)\n  nameWithType: HttpSessionState.Add(String, Object)\n  fullName: HttpSessionState.Add(String, Object)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Adds a new item to the session-state collection.\n  remarks: If the `name` parameter refers to an existing session state item, the existing item is overwritten with the specified `value`.\n  example:\n  - \"The following example shows how to store values in session state by using the <xref:System.Web.SessionState.HttpSessionState.Add%2A> method. It also shows how to remove values in session state by using the <xref:System.Web.SessionState.HttpSessionState.Remove%2A> method. A <xref:System.Web.UI.WebControls.Repeater> control is used to display the contents session state on the Web page. The <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> method is used to iterate through the session-state collection and populate the <xref:System.Web.UI.WebControls.Repeater> control.  \\n  \\n> [!IMPORTANT]\\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[HttpSessionState#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]  -->\\n <!-- TODO: review snippet reference [!code-vb[HttpSessionState#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  -->\"\n  syntax:\n    content: public void Add (string name, object value);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the item to add to the session-state collection.\n    - id: value\n      type: System.Object\n      description: The value of the item to add to the session-state collection.\n  overload: System.Web.SessionState.HttpSessionState.Add*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.Clear\n  commentId: M:System.Web.SessionState.HttpSessionState.Clear\n  id: Clear\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: Clear()\n  nameWithType: HttpSessionState.Clear()\n  fullName: HttpSessionState.Clear()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Removes all keys and values from the session-state collection.\n  syntax:\n    content: public void Clear ();\n    parameters: []\n  overload: System.Web.SessionState.HttpSessionState.Clear*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.CodePage\n  commentId: P:System.Web.SessionState.HttpSessionState.CodePage\n  id: CodePage\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: CodePage\n  nameWithType: HttpSessionState.CodePage\n  fullName: HttpSessionState.CodePage\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets or sets the character-set identifier for the current session.\n  remarks: \"A character set (code page) is used to interpret multi-byte character data, determining character value, and therefore sort order. Code-page settings apply only to multi-byte character data, not to Unicode character data.  \\n  \\n This <xref:System.Web.SessionState.IHttpSessionState.CodePage%2A> property is provided for compatibility with earlier versions of ASP only. If you do not need to maintain backward compatibility with ASP pages, use the <xref:System.Web.HttpResponse.ContentEncoding%2A> property instead.\"\n  syntax:\n    content: public int CodePage { get; set; }\n    return:\n      type: System.Int32\n      description: The character-set identifier for the current session.\n  overload: System.Web.SessionState.HttpSessionState.CodePage*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.Contents\n  commentId: P:System.Web.SessionState.HttpSessionState.Contents\n  id: Contents\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: Contents\n  nameWithType: HttpSessionState.Contents\n  fullName: HttpSessionState.Contents\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets a reference to the current session-state object.\n  remarks: The <xref:System.Web.SessionState.HttpSessionState.Contents%2A> property is provided for compatibility with earlier versions of ASP.\n  example:\n  - \"The following code example lists the item names and values in the <xref:System.Web.SessionState.HttpSessionState.Contents%2A> property.  \\n  \\n [!code-csharp[HttpSessionState#9](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/snippetscs.aspx#9)]\\n [!code-vb[HttpSessionState#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/snippetsvb.aspx#9)]\"\n  syntax:\n    content: public System.Web.SessionState.HttpSessionState Contents { get; }\n    return:\n      type: System.Web.SessionState.HttpSessionState\n      description: The current <xref href=\"System.Web.SessionState.HttpSessionState\"></xref>.\n  overload: System.Web.SessionState.HttpSessionState.Contents*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.CookieMode\n  commentId: P:System.Web.SessionState.HttpSessionState.CookieMode\n  id: CookieMode\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: CookieMode\n  nameWithType: HttpSessionState.CookieMode\n  fullName: HttpSessionState.CookieMode\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets a value that indicates whether the application is configured for cookieless sessions.\n  remarks: When <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> is `true`, the <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> property returns <xref:System.Web.HttpCookieMode.UseUri>; otherwise the <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> property returns <xref:System.Web.HttpCookieMode.UseCookies>.\n  example:\n  - \"The following code example sets the `cookieless` session attribute to `true` in the Web.config file. For this sample application configuration, the <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> property would return <xref:System.Web.HttpCookieMode.UseUri>.  \\n  \\n```  \\n<configuration>  \\n  <system.web>  \\n    <sessionState   \\n      mode=\\\"InProc\\\"  \\n      cookieless=\\\"true\\\"  \\n      timeout=\\\"30\\\" />  \\n  </system.web>  \\n</configuration>  \\n```\"\n  syntax:\n    content: public System.Web.HttpCookieMode CookieMode { get; }\n    return:\n      type: System.Web.HttpCookieMode\n      description: One of the <xref href=\"System.Web.HttpCookieMode\"></xref> values that indicate whether the application is configured for cookieless sessions. The default is <xref href=\"System.Web.HttpCookieMode.UseCookies\"></xref>.\n  overload: System.Web.SessionState.HttpSessionState.CookieMode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: CopyTo(Array, Int32)\n  nameWithType: HttpSessionState.CopyTo(Array, Int32)\n  fullName: HttpSessionState.CopyTo(Array, Int32)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Copies the collection of session-state values to a one-dimensional array, starting at the specified index in the array.\n  syntax:\n    content: public void CopyTo (Array array, int index);\n    parameters:\n    - id: array\n      type: System.Array\n      description: The <xref href=\"System.Array\"></xref> that receives the session values.\n    - id: index\n      type: System.Int32\n      description: The zero-based index in <code>array</code> from which copying starts.\n  overload: System.Web.SessionState.HttpSessionState.CopyTo*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.Count\n  commentId: P:System.Web.SessionState.HttpSessionState.Count\n  id: Count\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: Count\n  nameWithType: HttpSessionState.Count\n  fullName: HttpSessionState.Count\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets the number of items in the session-state collection.\n  syntax:\n    content: public int Count { get; }\n    return:\n      type: System.Int32\n      description: The number of items in the collection.\n  overload: System.Web.SessionState.HttpSessionState.Count*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.GetEnumerator\n  commentId: M:System.Web.SessionState.HttpSessionState.GetEnumerator\n  id: GetEnumerator\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: GetEnumerator()\n  nameWithType: HttpSessionState.GetEnumerator()\n  fullName: HttpSessionState.GetEnumerator()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Returns an enumerator that can be used to read all the session-state variable names in the current session.\n  remarks: ''\n  example:\n  - \"The following example shows how to store values in session state by using the <xref:System.Web.SessionState.HttpSessionState.Add%2A> method. It also shows how to remove values in session state by using the <xref:System.Web.SessionState.HttpSessionState.Remove%2A> method. A <xref:System.Web.UI.WebControls.Repeater> control is used to display the contents of session state on the Web page. The <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> method is used to iterate through the session-state collection and populate the <xref:System.Web.UI.WebControls.Repeater> control.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[HttpSessionState#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]  -->\\n <!-- TODO: review snippet reference [!code-vb[HttpSessionState#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  -->\"\n  syntax:\n    content: public System.Collections.IEnumerator GetEnumerator ();\n    parameters: []\n    return:\n      type: System.Collections.IEnumerator\n      description: An <xref href=\"System.Collections.IEnumerator\"></xref> that can iterate through the variable names in the session-state collection.\n  overload: System.Web.SessionState.HttpSessionState.GetEnumerator*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.IsCookieless\n  commentId: P:System.Web.SessionState.HttpSessionState.IsCookieless\n  id: IsCookieless\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: IsCookieless\n  nameWithType: HttpSessionState.IsCookieless\n  fullName: HttpSessionState.IsCookieless\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets a value indicating whether the session ID is embedded in the URL or stored in an HTTP cookie.\n  remarks: \"ASP.NET identifies sessions uniquely with each browser. By default, the unique identifier for a session is stored in a non-expiring session cookie in the browser. You can specify that session identifiers not be stored in a cookie by setting the `cookieless` attribute to `true` in the  configuration element.  \\n  \\n> [!NOTE]\\n>  To improve the security of your application, your application should allow users to log out, at which point it should call the <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> method. This reduces the potential for an unwanted source using the unique identifier in the URL to retrieve private data stored in the session for a user.  \\n  \\n ASP.NET maintains cookieless session state by automatically inserting a unique session ID into the page's URL. For example, the following URL has been modified by ASP.NET to include the unique session ID lit3py55t21z5v55vlm25s55:  \\n  \\n```  \\nhttp://www.example.com/(S(4danlfat035muve4g0mvgfrr))/orderform.aspx  \\n```  \\n  \\n ASP.NET modifies the links contained in all requested pages by embedding a session-ID value in the links just before sending each page to the browser. Session state is maintained as long as the user follows the path of links that the site provides. However, if the user agent rewrites a URL, the session-state instance will be lost.  \\n  \\n The session ID is embedded in the URL after the slash that follows the application name and before any remaining file or virtual-directory identifier. This allows ASP.NET to resolve the application name before involving the <xref:System.Web.SessionState.SessionStateModule> in the request.  \\n  \\n By default, session identifiers used in cookieless sessions are recycled. That is, if a request is made with a session ID that has expired, a new session is started using the session ID supplied with the request. This behavior can result in the unwanted sharing of session data when a link that contains a cookieless session ID is shared with multiple browsers, perhaps through a search engine or other program. You can reduce the possibility of session data being shared by multiple clients by disabling the recycling of session identifiers. To do this, set the `regenerateExpiredSessionId` attribute of the  configuration element to `true`. This will result in a new session ID being generated when a cookieless session request is made with an expired session ID. Note that if the request made with the expired session ID uses the HTTP `POST` method, then any posted data will be lost when `regenerateExpiredSessionId` is `true`, as ASP.NET performs a redirect to ensure that the browser has the new session identifier in the URL.  \\n  \\n> [!NOTE]\\n>  While setting the `regenerateExpiredSessionId` attribute to `true` reduces the possibility of unwanted sharing of session data, it does not protect against an unwanted source gaining access to the session of another user by obtaining the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value and including it in requests to the server. If you are storing private or sensitive information in session state, it is recommended that you use SSL to encrypt any communication between the browser and server that includes the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.\"\n  example:\n  - \"The following code example sets the `cookieless` session attribute to true in the Web.config file.  \\n  \\n```  \\n<configuration>  \\n  <system.web>  \\n    <sessionState   \\n      mode=\\\"InProc\\\"  \\n      cookieless=\\\"true\\\"  \\n      regenerateExpiredSessionId=\\\"true\\\"  \\n      timeout=\\\"30\\\" />  \\n  </system.web>  \\n</configuration>  \\n```\"\n  syntax:\n    content: public bool IsCookieless { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the session is embedded in the URL; otherwise, `false`.'\n  overload: System.Web.SessionState.HttpSessionState.IsCookieless*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.IsNewSession\n  commentId: P:System.Web.SessionState.HttpSessionState.IsNewSession\n  id: IsNewSession\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: IsNewSession\n  nameWithType: HttpSessionState.IsNewSession\n  fullName: HttpSessionState.IsNewSession\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets a value indicating whether the session was created with the current request.\n  syntax:\n    content: public bool IsNewSession { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the session was created with the current request; otherwise, `false`.'\n  overload: System.Web.SessionState.HttpSessionState.IsNewSession*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.IsReadOnly\n  commentId: P:System.Web.SessionState.HttpSessionState.IsReadOnly\n  id: IsReadOnly\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: IsReadOnly\n  nameWithType: HttpSessionState.IsReadOnly\n  fullName: HttpSessionState.IsReadOnly\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets a value indicating whether the session is read-only.\n  syntax:\n    content: public bool IsReadOnly { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the session is read-only; otherwise, `false`.'\n  overload: System.Web.SessionState.HttpSessionState.IsReadOnly*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.IsSynchronized\n  commentId: P:System.Web.SessionState.HttpSessionState.IsSynchronized\n  id: IsSynchronized\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: IsSynchronized\n  nameWithType: HttpSessionState.IsSynchronized\n  fullName: HttpSessionState.IsSynchronized\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets a value indicating whether access to the collection of session-state values is synchronized (thread safe).\n  syntax:\n    content: public bool IsSynchronized { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if access to the collection is synchronized (thread safe); otherwise, `false`.'\n  overload: System.Web.SessionState.HttpSessionState.IsSynchronized*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.Item(System.Int32)\n  commentId: P:System.Web.SessionState.HttpSessionState.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: Item(Int32)\n  nameWithType: HttpSessionState.Item(Int32)\n  fullName: HttpSessionState.Item(Int32)\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets or sets a session value by numerical index.\n  syntax:\n    content: public object this[int index] { get; set; }\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The numerical index of the session value.\n    return:\n      type: System.Object\n      description: The session-state value stored at the specified index, or `null` if the item does not exist.\n  overload: System.Web.SessionState.HttpSessionState.Item*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.Item(System.String)\n  commentId: P:System.Web.SessionState.HttpSessionState.Item(System.String)\n  id: Item(System.String)\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: Item(String)\n  nameWithType: HttpSessionState.Item(String)\n  fullName: HttpSessionState.Item(String)\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets or sets a session value by name.\n  syntax:\n    content: public object this[string name] { get; set; }\n    parameters:\n    - id: name\n      type: System.String\n      description: The key name of the session value.\n    return:\n      type: System.Object\n      description: The session-state value with the specified name, or `null` if the item does not exist.\n  overload: System.Web.SessionState.HttpSessionState.Item*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.Keys\n  commentId: P:System.Web.SessionState.HttpSessionState.Keys\n  id: Keys\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: Keys\n  nameWithType: HttpSessionState.Keys\n  fullName: HttpSessionState.Keys\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets a collection of the keys for all values stored in the session-state collection.\n  syntax:\n    content: public System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys { get; }\n    return:\n      type: System.Collections.Specialized.NameObjectCollectionBase+KeysCollection\n      description: The <xref href=\"System.Collections.Specialized.NameObjectCollectionBase.KeysCollection\"></xref> that contains all the session keys.\n  overload: System.Web.SessionState.HttpSessionState.Keys*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.LCID\n  commentId: P:System.Web.SessionState.HttpSessionState.LCID\n  id: LCID\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: LCID\n  nameWithType: HttpSessionState.LCID\n  fullName: HttpSessionState.LCID\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets or sets the locale identifier (LCID) of the current session.\n  remarks: \"The <xref:System.Web.SessionState.HttpSessionState.LCID%2A> property is provided for compatibility with earlier versions of ASP only. If you do not need to maintain backward compatibility with ASP pages, use the <xref:System.Globalization.CultureInfo.LCID%2A> property instead.  \\n  \\n ASP.NET does not store the locale identifier in session state. The <xref:System.Web.SessionState.HttpSessionState.LCID%2A> property accesses the <xref:System.Globalization.CultureInfo.LCID%2A> property to get and set the identifier.\"\n  syntax:\n    content: public int LCID { get; set; }\n    return:\n      type: System.Int32\n      description: A <xref href=\"System.Globalization.CultureInfo\"></xref> instance that specifies the culture of the current session.\n  overload: System.Web.SessionState.HttpSessionState.LCID*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.Mode\n  commentId: P:System.Web.SessionState.HttpSessionState.Mode\n  id: Mode\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: Mode\n  nameWithType: HttpSessionState.Mode\n  fullName: HttpSessionState.Mode\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets the current session-state mode.\n  remarks: For information about how to configure your server for <xref:System.Web.SessionState.SessionStateMode.StateServer> or <xref:System.Web.SessionState.SessionStateMode.SQLServer> session-state storage, see [ASP.NET Session State Overview](http://msdn.microsoft.com/library/6d60d381-6521-4e1d-9089-da6464f2a9bc).\n  example:\n  - \"The following code example sets the `mode` session attribute to <xref:System.Web.SessionState.SessionStateMode.SQLServer> in the Web.config file. For SQL Server session mode, the `sqlConnectionString` attribute is also required.  \\n  \\n```  \\n<configuration>  \\n  <system.web>  \\n    <sessionState   \\n      mode=\\\"SQLServer\\\"  \\n      sqlConnectionString=\\\"Data Source=localhost;Integrated Security=SSPI\\\"  \\n      cookieless=\\\"true\\\"  \\n      timeout=\\\"30\\\" />  \\n  </system.web>  \\n</configuration>  \\n```\"\n  syntax:\n    content: public System.Web.SessionState.SessionStateMode Mode { get; }\n    return:\n      type: System.Web.SessionState.SessionStateMode\n      description: One of the <xref href=\"System.Web.SessionState.SessionStateMode\"></xref> values.\n  overload: System.Web.SessionState.HttpSessionState.Mode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.Remove(System.String)\n  commentId: M:System.Web.SessionState.HttpSessionState.Remove(System.String)\n  id: Remove(System.String)\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: Remove(String)\n  nameWithType: HttpSessionState.Remove(String)\n  fullName: HttpSessionState.Remove(String)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Deletes an item from the session-state collection.\n  remarks: If the session-state collection does not contain an element with the specified `name`, the collection remains unchanged. No exception is thrown.\n  example:\n  - \"The following example shows how to store values in session state by using the <xref:System.Web.SessionState.HttpSessionState.Add%2A> method. It also shows how to remove values in session state by using the <xref:System.Web.SessionState.HttpSessionState.Remove%2A> method. A <xref:System.Web.UI.WebControls.Repeater> control is used to display the contents of session state on the Web page. The <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> method is used to iterate through the session-state collection and populate the <xref:System.Web.UI.WebControls.Repeater> control.  \\n  \\n <!-- TODO: review snippet reference [!code-csharp[HttpSessionState#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]  -->\\n <!-- TODO: review snippet reference [!code-vb[HttpSessionState#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  -->\"\n  syntax:\n    content: public void Remove (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the item to delete from the session-state collection.\n  overload: System.Web.SessionState.HttpSessionState.Remove*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.RemoveAll\n  commentId: M:System.Web.SessionState.HttpSessionState.RemoveAll\n  id: RemoveAll\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: RemoveAll()\n  nameWithType: HttpSessionState.RemoveAll()\n  fullName: HttpSessionState.RemoveAll()\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Removes all keys and values from the session-state collection.\n  remarks: <xref:System.Web.SessionState.HttpSessionState.RemoveAll%2A> performs the same function as <xref:System.Web.SessionState.HttpSessionState.Clear%2A>.\n  syntax:\n    content: public void RemoveAll ();\n    parameters: []\n  overload: System.Web.SessionState.HttpSessionState.RemoveAll*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)\n  commentId: M:System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: RemoveAt(Int32)\n  nameWithType: HttpSessionState.RemoveAt(Int32)\n  fullName: HttpSessionState.RemoveAt(Int32)\n  type: Method\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Deletes an item at a specified index from the session-state collection.\n  syntax:\n    content: public void RemoveAt (int index);\n    parameters:\n    - id: index\n      type: System.Int32\n      description: The index of the item to remove from the session-state collection.\n  overload: System.Web.SessionState.HttpSessionState.RemoveAt*\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> is less than zero.  \\n  \\n \\\\- or -  \\n  \\n <code>index</code> is equal to or greater than <xref href=\\\"System.Web.SessionState.HttpSessionState.Count\\\"></xref>.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.SessionID\n  commentId: P:System.Web.SessionState.HttpSessionState.SessionID\n  id: SessionID\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: SessionID\n  nameWithType: HttpSessionState.SessionID\n  fullName: HttpSessionState.SessionID\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets the unique identifier for the session.\n  remarks: \"The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> property is used to uniquely identify a browser with session data on the server. The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value is randomly generated by ASP.NET and stored in a non-expiring session cookie in the browser. The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value is then sent in a cookie with each request to the ASP.NET application.  \\n  \\n If you want to disable the use of cookies in your ASP.NET application and still make use of session state, you can configure your application to store the session identifier in the URL instead of a cookie by setting the `cookieless` attribute of the  configuration element to `true`, or to <xref:System.Web.HttpCookieMode.UseUri>, in the Web.config file for your application. You can have ASP.NET determine whether cookies are supported by the browser by specifying a value of <xref:System.Web.HttpCookieMode.UseDeviceProfile> for the `cookieless` attribute. You can also have ASP.NET determine whether cookies are enabled for the browser by specifying a value of <xref:System.Web.HttpCookieMode.AutoDetect> for the `cookieless` attribute. If cookies are supported when <xref:System.Web.HttpCookieMode.UseDeviceProfile> is specified, or enabled when <xref:System.Web.HttpCookieMode.AutoDetect> is specified, then the session identifier will be stored in a cookie; otherwise the session identifier will be stored in the URL. For more information, see the <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> property.  \\n  \\n The <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> is sent between the server and the browser in clear text, either in a cookie or in the URL. As a result, an unwanted source could gain access to the session of another user by obtaining the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> value and including it in requests to the server. If you are storing private or sensitive information in session state, it is recommended that you use SSL to encrypt any communication between the browser and server that includes the <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.  \\n  \\n When using cookie-based session state, ASP.NET does not allocate storage for session data until the <xref:System.Web.UI.Page.Session%2A> object is used. As a result, a new session ID is generated for each page request until the session object is accessed. If your application requires a static session ID for the entire session, you can either implement the `Session_Start` method in the application's Global.asax file and store data in the <xref:System.Web.UI.Page.Session%2A> object to fix the session ID, or you can use code in another part of your application to explicitly store data in the <xref:System.Web.UI.Page.Session%2A> object.  \\n  \\n If your application uses cookieless session state, the session ID is generated on the first page view and is maintained for the entire session.\"\n  example:\n  - \"The following code example shows a Web.config file that configures session state to use cookieless session identifiers. For more information, see the <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> property.  \\n  \\n```  \\n<configuration>  \\n  <system.web>  \\n    <sessionState   \\n      cookieless=\\\"true\\\"  \\n      regenerateExpiredSessionId=\\\"true\\\"  \\n      timeout=\\\"30\\\" />  \\n  </system.web>  \\n</configuration>  \\n```\"\n  syntax:\n    content: public string SessionID { get; }\n    return:\n      type: System.String\n      description: The unique session identifier.\n  overload: System.Web.SessionState.HttpSessionState.SessionID*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.StaticObjects\n  commentId: P:System.Web.SessionState.HttpSessionState.StaticObjects\n  id: StaticObjects\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: StaticObjects\n  nameWithType: HttpSessionState.StaticObjects\n  fullName: HttpSessionState.StaticObjects\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets a collection of objects declared by `<object Runat=\"Server\" Scope=\"Session\"/>` tags within the ASP.NET application file Global.asax.\n  remarks: \"If an object on a page does not support serialization and <xref:System.Web.SessionState.HttpSessionState.Mode%2A> is out-of-process (<xref:System.Web.SessionState.SessionStateMode.SQLServer> or <xref:System.Web.SessionState.SessionStateMode.StateServer>), the object will not be created and will not be added to this collection.  \\n  \\n The <xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A> property is provided for compatibility with earlier versions of ASP.\"\n  example:\n  - \"The following code example lists the `id` and object type of the objects in the <xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A> collection.  \\n  \\n [!code-csharp[HttpSessionState#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/snippetscs.aspx#10)]\\n [!code-vb[HttpSessionState#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/snippetsvb.aspx#10)]\"\n  syntax:\n    content: public System.Web.HttpStaticObjectsCollection StaticObjects { get; }\n    return:\n      type: System.Web.HttpStaticObjectsCollection\n      description: An <xref href=\"System.Web.HttpStaticObjectsCollection\"></xref> containing objects declared in the Global.asax file.\n  overload: System.Web.SessionState.HttpSessionState.StaticObjects*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.SyncRoot\n  commentId: P:System.Web.SessionState.HttpSessionState.SyncRoot\n  id: SyncRoot\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: SyncRoot\n  nameWithType: HttpSessionState.SyncRoot\n  fullName: HttpSessionState.SyncRoot\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets an object that can be used to synchronize access to the collection of session-state values.\n  syntax:\n    content: public object SyncRoot { get; }\n    return:\n      type: System.Object\n      description: An object that can be used to synchronize access to the collection.\n  overload: System.Web.SessionState.HttpSessionState.SyncRoot*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\n- uid: System.Web.SessionState.HttpSessionState.Timeout\n  commentId: P:System.Web.SessionState.HttpSessionState.Timeout\n  id: Timeout\n  parent: System.Web.SessionState.HttpSessionState\n  langs:\n  - csharp\n  name: Timeout\n  nameWithType: HttpSessionState.Timeout\n  fullName: HttpSessionState.Timeout\n  type: Property\n  assemblies:\n  - System.Web\n  namespace: System.Web.SessionState\n  summary: Gets and sets the amount of time, in minutes, allowed between requests before the session-state provider terminates the session.\n  remarks: \"The <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property can be set in the Web.config file for an application using the `timeout` attribute of the  configuration element, or you can set the <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property value directly using application code.  \\n  \\n The <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> property cannot be set to a value greater than 525,600 minutes (1 year). The default value is 20 minutes.\"\n  example:\n  - \"The following code example sets the `timeout` session attribute to 30 minutes in the Web.config file.  \\n  \\n```  \\n<configuration>  \\n  <system.web>  \\n    <sessionState   \\n      mode=\\\"InProc\\\"  \\n      cookieless=\\\"true\\\"  \\n      timeout=\\\"30\\\" />  \\n  </system.web>  \\n</configuration>  \\n```\"\n  syntax:\n    content: public int Timeout { get; set; }\n    return:\n      type: System.Int32\n      description: The time-out period, in minutes.\n  overload: System.Web.SessionState.HttpSessionState.Timeout*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n  ms.technology:\n  - dotnet-webforms\n  ms.author: riande\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.Web.SessionState.HttpSessionState.Abandon\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Abandon()\n  nameWithType: HttpSessionState.Abandon()\n  fullName: HttpSessionState.Abandon()\n- uid: System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Add(String, Object)\n  nameWithType: HttpSessionState.Add(String, Object)\n  fullName: HttpSessionState.Add(String, Object)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Web.SessionState.HttpSessionState.Clear\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Clear()\n  nameWithType: HttpSessionState.Clear()\n  fullName: HttpSessionState.Clear()\n- uid: System.Web.SessionState.HttpSessionState.CodePage\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: CodePage\n  nameWithType: HttpSessionState.CodePage\n  fullName: HttpSessionState.CodePage\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Web.SessionState.HttpSessionState.Contents\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Contents\n  nameWithType: HttpSessionState.Contents\n  fullName: HttpSessionState.Contents\n- uid: System.Web.SessionState.HttpSessionState\n  parent: System.Web.SessionState\n  isExternal: false\n  name: HttpSessionState\n  nameWithType: HttpSessionState\n  fullName: System.Web.SessionState.HttpSessionState\n- uid: System.Web.SessionState.HttpSessionState.CookieMode\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: CookieMode\n  nameWithType: HttpSessionState.CookieMode\n  fullName: HttpSessionState.CookieMode\n- uid: System.Web.HttpCookieMode\n  parent: System.Web\n  isExternal: false\n  name: HttpCookieMode\n  nameWithType: HttpCookieMode\n  fullName: System.Web.HttpCookieMode\n- uid: System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: CopyTo(Array, Int32)\n  nameWithType: HttpSessionState.CopyTo(Array, Int32)\n  fullName: HttpSessionState.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  nameWithType: Array\n  fullName: System.Array\n- uid: System.Web.SessionState.HttpSessionState.Count\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Count\n  nameWithType: HttpSessionState.Count\n  fullName: HttpSessionState.Count\n- uid: System.Web.SessionState.HttpSessionState.GetEnumerator\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: GetEnumerator()\n  nameWithType: HttpSessionState.GetEnumerator()\n  fullName: HttpSessionState.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  nameWithType: IEnumerator\n  fullName: System.Collections.IEnumerator\n- uid: System.Web.SessionState.HttpSessionState.IsCookieless\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: IsCookieless\n  nameWithType: HttpSessionState.IsCookieless\n  fullName: HttpSessionState.IsCookieless\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Web.SessionState.HttpSessionState.IsNewSession\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: IsNewSession\n  nameWithType: HttpSessionState.IsNewSession\n  fullName: HttpSessionState.IsNewSession\n- uid: System.Web.SessionState.HttpSessionState.IsReadOnly\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: HttpSessionState.IsReadOnly\n  fullName: HttpSessionState.IsReadOnly\n- uid: System.Web.SessionState.HttpSessionState.IsSynchronized\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: HttpSessionState.IsSynchronized\n  fullName: HttpSessionState.IsSynchronized\n- uid: System.Web.SessionState.HttpSessionState.Item(System.Int32)\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Item(Int32)\n  nameWithType: HttpSessionState.Item(Int32)\n  fullName: HttpSessionState.Item(Int32)\n- uid: System.Web.SessionState.HttpSessionState.Item(System.String)\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Item(String)\n  nameWithType: HttpSessionState.Item(String)\n  fullName: HttpSessionState.Item(String)\n- uid: System.Web.SessionState.HttpSessionState.Keys\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Keys\n  nameWithType: HttpSessionState.Keys\n  fullName: HttpSessionState.Keys\n- uid: System.Collections.Specialized.NameObjectCollectionBase\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameObjectCollectionBase\n  nameWithType: NameObjectCollectionBase\n  fullName: System.Collections.Specialized.NameObjectCollectionBase+KeysCollection\n- uid: System.Web.SessionState.HttpSessionState.LCID\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: LCID\n  nameWithType: HttpSessionState.LCID\n  fullName: HttpSessionState.LCID\n- uid: System.Web.SessionState.HttpSessionState.Mode\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Mode\n  nameWithType: HttpSessionState.Mode\n  fullName: HttpSessionState.Mode\n- uid: System.Web.SessionState.SessionStateMode\n  parent: System.Web.SessionState\n  isExternal: false\n  name: SessionStateMode\n  nameWithType: SessionStateMode\n  fullName: System.Web.SessionState.SessionStateMode\n- uid: System.Web.SessionState.HttpSessionState.Remove(System.String)\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Remove(String)\n  nameWithType: HttpSessionState.Remove(String)\n  fullName: HttpSessionState.Remove(String)\n- uid: System.Web.SessionState.HttpSessionState.RemoveAll\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: RemoveAll()\n  nameWithType: HttpSessionState.RemoveAll()\n  fullName: HttpSessionState.RemoveAll()\n- uid: System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: RemoveAt(Int32)\n  nameWithType: HttpSessionState.RemoveAt(Int32)\n  fullName: HttpSessionState.RemoveAt(Int32)\n- uid: System.Web.SessionState.HttpSessionState.SessionID\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: SessionID\n  nameWithType: HttpSessionState.SessionID\n  fullName: HttpSessionState.SessionID\n- uid: System.Web.SessionState.HttpSessionState.StaticObjects\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: StaticObjects\n  nameWithType: HttpSessionState.StaticObjects\n  fullName: HttpSessionState.StaticObjects\n- uid: System.Web.HttpStaticObjectsCollection\n  parent: System.Web\n  isExternal: false\n  name: HttpStaticObjectsCollection\n  nameWithType: HttpStaticObjectsCollection\n  fullName: System.Web.HttpStaticObjectsCollection\n- uid: System.Web.SessionState.HttpSessionState.SyncRoot\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: SyncRoot\n  nameWithType: HttpSessionState.SyncRoot\n  fullName: HttpSessionState.SyncRoot\n- uid: System.Web.SessionState.HttpSessionState.Timeout\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Timeout\n  nameWithType: HttpSessionState.Timeout\n  fullName: HttpSessionState.Timeout\n- uid: System.Web.SessionState.HttpSessionState.Abandon*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Abandon\n  nameWithType: HttpSessionState.Abandon\n  fullName: HttpSessionState.Abandon\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.Add*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Add\n  nameWithType: HttpSessionState.Add\n  fullName: HttpSessionState.Add\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.Clear*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Clear\n  nameWithType: HttpSessionState.Clear\n  fullName: HttpSessionState.Clear\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.CodePage*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: CodePage\n  nameWithType: HttpSessionState.CodePage\n  fullName: HttpSessionState.CodePage\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.Contents*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Contents\n  nameWithType: HttpSessionState.Contents\n  fullName: HttpSessionState.Contents\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.CookieMode*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: CookieMode\n  nameWithType: HttpSessionState.CookieMode\n  fullName: HttpSessionState.CookieMode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.CopyTo*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: CopyTo\n  nameWithType: HttpSessionState.CopyTo\n  fullName: HttpSessionState.CopyTo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.Count*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Count\n  nameWithType: HttpSessionState.Count\n  fullName: HttpSessionState.Count\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.GetEnumerator*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: GetEnumerator\n  nameWithType: HttpSessionState.GetEnumerator\n  fullName: HttpSessionState.GetEnumerator\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.IsCookieless*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: IsCookieless\n  nameWithType: HttpSessionState.IsCookieless\n  fullName: HttpSessionState.IsCookieless\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.IsNewSession*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: IsNewSession\n  nameWithType: HttpSessionState.IsNewSession\n  fullName: HttpSessionState.IsNewSession\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.IsReadOnly*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: IsReadOnly\n  nameWithType: HttpSessionState.IsReadOnly\n  fullName: HttpSessionState.IsReadOnly\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.IsSynchronized*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: IsSynchronized\n  nameWithType: HttpSessionState.IsSynchronized\n  fullName: HttpSessionState.IsSynchronized\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.Item*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Item\n  nameWithType: HttpSessionState.Item\n  fullName: HttpSessionState.Item\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.Keys*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Keys\n  nameWithType: HttpSessionState.Keys\n  fullName: HttpSessionState.Keys\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.LCID*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: LCID\n  nameWithType: HttpSessionState.LCID\n  fullName: HttpSessionState.LCID\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.Mode*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Mode\n  nameWithType: HttpSessionState.Mode\n  fullName: HttpSessionState.Mode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.Remove*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Remove\n  nameWithType: HttpSessionState.Remove\n  fullName: HttpSessionState.Remove\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.RemoveAll*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: RemoveAll\n  nameWithType: HttpSessionState.RemoveAll\n  fullName: HttpSessionState.RemoveAll\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.RemoveAt*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: RemoveAt\n  nameWithType: HttpSessionState.RemoveAt\n  fullName: HttpSessionState.RemoveAt\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.SessionID*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: SessionID\n  nameWithType: HttpSessionState.SessionID\n  fullName: HttpSessionState.SessionID\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.StaticObjects*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: StaticObjects\n  nameWithType: HttpSessionState.StaticObjects\n  fullName: HttpSessionState.StaticObjects\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.SyncRoot*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: SyncRoot\n  nameWithType: HttpSessionState.SyncRoot\n  fullName: HttpSessionState.SyncRoot\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Web.SessionState.HttpSessionState.Timeout*\n  parent: System.Web.SessionState.HttpSessionState\n  isExternal: false\n  name: Timeout\n  nameWithType: HttpSessionState.Timeout\n  fullName: HttpSessionState.Timeout\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Web.SessionState/HttpSessionState.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: Cast<TResult>(IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  fullName: Enumerable.Cast<TResult>(IEnumerable)\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  parent: System.Linq.Enumerable\n  isExternal: false\n  name: OfType<TResult>(IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  fullName: Enumerable.OfType<TResult>(IEnumerable)\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  parent: System.Linq.ParallelEnumerable\n  isExternal: false\n  name: AsParallel(IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  fullName: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  parent: System.Linq.Queryable\n  isExternal: false\n  name: AsQueryable(IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  fullName: Queryable.AsQueryable(IEnumerable)\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  nameWithType: ICollection\n  fullName: System.Collections.ICollection\n"}