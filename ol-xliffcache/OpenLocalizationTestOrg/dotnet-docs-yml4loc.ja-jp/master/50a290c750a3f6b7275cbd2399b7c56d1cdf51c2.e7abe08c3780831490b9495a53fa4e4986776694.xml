{"nodes":[{"content":"Facilitates communication between an enlisted transaction participant and the transaction manager during the Prepare phase of the transaction.","nodes":[{"pos":[0,142],"content":"Facilitates communication between an enlisted transaction participant and the transaction manager during the Prepare phase of the transaction.","nodes":[{"content":"Facilitates communication between an enlisted transaction participant and the transaction manager during the Prepare phase of the transaction.","pos":[0,142]}]}],"pos":[705,848],"yaml":true},{"content":"During the initial (prepare) phase of the transaction, the transaction manager passes this type to the resource manager by calling the <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> method to obtain a resource's vote on the transaction. Depending on whether it votes to commit or roll back, your implementation of the resource manager should call the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> or <xref:System.Transactions.PreparingEnlistment.ForceRollback%2A> methods of this type.  \n  \n The resource manager can also call the <xref:System.Transactions.Enlistment.Done%2A> method at anytime before it has called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method. By doing so, the enlistment is casting a read only vote, meaning that it votes commit on the transaction but does not need to receive the final outcome.  \n  \n Durable resource managers can retrieve the information that is be needed by the transaction manager for re-enlistment from the <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> property. For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).","nodes":[{"pos":[0,513],"content":"During the initial (prepare) phase of the transaction, the transaction manager passes this type to the resource manager by calling the <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> method to obtain a resource's vote on the transaction. Depending on whether it votes to commit or roll back, your implementation of the resource manager should call the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> or <xref:System.Transactions.PreparingEnlistment.ForceRollback%2A> methods of this type.","nodes":[{"content":"During the initial (prepare) phase of the transaction, the transaction manager passes this type to the resource manager by calling the <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> method to obtain a resource's vote on the transaction. Depending on whether it votes to commit or roll back, your implementation of the resource manager should call the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> or <xref:System.Transactions.PreparingEnlistment.ForceRollback%2A> methods of this type.","pos":[0,513],"nodes":[{"content":"During the initial (prepare) phase of the transaction, the transaction manager passes this type to the resource manager by calling the <ph id=\"ph1\">&lt;xref:System.Transactions.IEnlistmentNotification.Prepare%2A&gt;</ph> method to obtain a resource's vote on the transaction.","pos":[0,251],"source":"During the initial (prepare) phase of the transaction, the transaction manager passes this type to the resource manager by calling the <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> method to obtain a resource's vote on the transaction."},{"content":"Depending on whether it votes to commit or roll back, your implementation of the resource manager should call the <ph id=\"ph1\">&lt;xref:System.Transactions.PreparingEnlistment.Prepared%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Transactions.PreparingEnlistment.ForceRollback%2A&gt;</ph> methods of this type.","pos":[252,513],"source":" Depending on whether it votes to commit or roll back, your implementation of the resource manager should call the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> or <xref:System.Transactions.PreparingEnlistment.ForceRollback%2A> methods of this type."}]}]},{"pos":[520,867],"content":"The resource manager can also call the <xref:System.Transactions.Enlistment.Done%2A> method at anytime before it has called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method. By doing so, the enlistment is casting a read only vote, meaning that it votes commit on the transaction but does not need to receive the final outcome.","nodes":[{"content":"The resource manager can also call the <xref:System.Transactions.Enlistment.Done%2A> method at anytime before it has called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method. By doing so, the enlistment is casting a read only vote, meaning that it votes commit on the transaction but does not need to receive the final outcome.","pos":[0,347],"nodes":[{"content":"The resource manager can also call the <ph id=\"ph1\">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method at anytime before it has called the <ph id=\"ph2\">&lt;xref:System.Transactions.PreparingEnlistment.Prepared%2A&gt;</ph> method.","pos":[0,194],"source":"The resource manager can also call the <xref:System.Transactions.Enlistment.Done%2A> method at anytime before it has called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method."},{"content":"By doing so, the enlistment is casting a read only vote, meaning that it votes commit on the transaction but does not need to receive the final outcome.","pos":[195,347]}]}]},{"pos":[874,1211],"content":"Durable resource managers can retrieve the information that is be needed by the transaction manager for re-enlistment from the <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> property. For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).","nodes":[{"content":"Durable resource managers can retrieve the information that is be needed by the transaction manager for re-enlistment from the <ph id=\"ph1\">&lt;xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A&gt;</ph> property.","pos":[0,206],"source":"Durable resource managers can retrieve the information that is be needed by the transaction manager for re-enlistment from the <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> property."},{"content":"For more information on recovery, see <bpt id=\"p1\">[</bpt>Performing Recovery<ept id=\"p1\">](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)</ept>.","pos":[207,337],"source":" For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)."}]}],"pos":[859,2077],"yaml":true,"extradata":"MT"},{"content":"Indicates that the transaction should be rolled back.","nodes":[{"pos":[0,53],"content":"Indicates that the transaction should be rolled back.","nodes":[{"content":"Indicates that the transaction should be rolled back.","pos":[0,53]}]}],"pos":[3988,4042],"yaml":true},{"content":"An implementation of the <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> method of the <xref:System.Transactions.IEnlistmentNotification> interface calls this method to indicate that the transaction must be rolled back.","nodes":[{"pos":[0,233],"content":"An implementation of the <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> method of the <xref:System.Transactions.IEnlistmentNotification> interface calls this method to indicate that the transaction must be rolled back.","nodes":[{"content":"An implementation of the <ph id=\"ph1\">&lt;xref:System.Transactions.IEnlistmentNotification.Prepare%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Transactions.IEnlistmentNotification&gt;</ph> interface calls this method to indicate that the transaction must be rolled back.","pos":[0,233],"source":"An implementation of the <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> method of the <xref:System.Transactions.IEnlistmentNotification> interface calls this method to indicate that the transaction must be rolled back."}]}],"pos":[4053,4287],"yaml":true,"extradata":"MT"},{"content":"Indicates that the transaction should be rolled back.","nodes":[{"pos":[0,53],"content":"Indicates that the transaction should be rolled back.","nodes":[{"content":"Indicates that the transaction should be rolled back.","pos":[0,53]}]}],"pos":[5925,5979],"yaml":true},{"content":"Indicates that the transaction can be committed.","nodes":[{"pos":[0,48],"content":"Indicates that the transaction can be committed.","nodes":[{"content":"Indicates that the transaction can be committed.","pos":[0,48]}]}],"pos":[7358,7407],"yaml":true},{"content":"In the first (prepare) phase of a two phase commit, a resource manager implementing the <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> method of the <xref:System.Transactions.IEnlistmentNotification> interface, calls this method to indicate that the transaction can be committed.  \n  \n The resource manager can call the <xref:System.Transactions.Enlistment.Done%2A> method at anytime before it has called this method.  By doing so, the enlistment is casting a read only vote, meaning that it votes commit on the transaction but does not need to receive the final outcome.  \n  \n Once this method is called by an enlistment and before it returns, it is possible that another thread or this same thread could make a call into the same enlistment method such as <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> to perform a rollback. This can result in a deadlock situation if the resource manager implementation does not release resource locks until after this method returns.","nodes":[{"pos":[0,294],"content":"In the first (prepare) phase of a two phase commit, a resource manager implementing the <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> method of the <xref:System.Transactions.IEnlistmentNotification> interface, calls this method to indicate that the transaction can be committed.","nodes":[{"content":"In the first (prepare) phase of a two phase commit, a resource manager implementing the <ph id=\"ph1\">&lt;xref:System.Transactions.IEnlistmentNotification.Prepare%2A&gt;</ph> method of the <ph id=\"ph2\">&lt;xref:System.Transactions.IEnlistmentNotification&gt;</ph> interface, calls this method to indicate that the transaction can be committed.","pos":[0,294],"source":"In the first (prepare) phase of a two phase commit, a resource manager implementing the <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> method of the <xref:System.Transactions.IEnlistmentNotification> interface, calls this method to indicate that the transaction can be committed."}]},{"pos":[301,586],"content":"The resource manager can call the <xref:System.Transactions.Enlistment.Done%2A> method at anytime before it has called this method.  By doing so, the enlistment is casting a read only vote, meaning that it votes commit on the transaction but does not need to receive the final outcome.","nodes":[{"content":"The resource manager can call the <xref:System.Transactions.Enlistment.Done%2A> method at anytime before it has called this method.  By doing so, the enlistment is casting a read only vote, meaning that it votes commit on the transaction but does not need to receive the final outcome.","pos":[0,285],"nodes":[{"content":"The resource manager can call the <ph id=\"ph1\">&lt;xref:System.Transactions.Enlistment.Done%2A&gt;</ph> method at anytime before it has called this method.","pos":[0,131],"source":"The resource manager can call the <xref:System.Transactions.Enlistment.Done%2A> method at anytime before it has called this method."},{"content":"By doing so, the enlistment is casting a read only vote, meaning that it votes commit on the transaction but does not need to receive the final outcome.","pos":[133,285]}]}]},{"pos":[593,1002],"content":"Once this method is called by an enlistment and before it returns, it is possible that another thread or this same thread could make a call into the same enlistment method such as <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> to perform a rollback. This can result in a deadlock situation if the resource manager implementation does not release resource locks until after this method returns.","nodes":[{"content":"Once this method is called by an enlistment and before it returns, it is possible that another thread or this same thread could make a call into the same enlistment method such as <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> to perform a rollback. This can result in a deadlock situation if the resource manager implementation does not release resource locks until after this method returns.","pos":[0,409],"nodes":[{"content":"Once this method is called by an enlistment and before it returns, it is possible that another thread or this same thread could make a call into the same enlistment method such as <ph id=\"ph1\">&lt;xref:System.Transactions.IEnlistmentNotification.Rollback%2A&gt;</ph> to perform a rollback.","pos":[0,265],"source":"Once this method is called by an enlistment and before it returns, it is possible that another thread or this same thread could make a call into the same enlistment method such as <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> to perform a rollback."},{"content":"This can result in a deadlock situation if the resource manager implementation does not release resource locks until after this method returns.","pos":[266,409]}]}]}],"pos":[7418,8427],"yaml":true,"extradata":"MT"},{"content":"Gets the recovery information of an enlistment.","nodes":[{"pos":[0,47],"content":"Gets the recovery information of an enlistment.","nodes":[{"content":"Gets the recovery information of an enlistment.","pos":[0,47]}]}],"pos":[10010,10058],"yaml":true},{"content":"The recovery information of an enlistment.","nodes":[{"pos":[0,42],"content":"The recovery information of an enlistment.","nodes":[{"content":"The recovery information of an enlistment.","pos":[0,42]}]}],"pos":[10195,10238],"yaml":true},{"content":"An attempt to get recovery information inside a volatile enlistment, which does not generate any recovery information.","nodes":[{"pos":[0,118],"content":"An attempt to get recovery information inside a volatile enlistment, which does not generate any recovery information.","nodes":[{"content":"An attempt to get recovery information inside a volatile enlistment, which does not generate any recovery information.","pos":[0,118]}]}],"pos":[10435,10554],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Transactions.PreparingEnlistment\n  commentId: T:System.Transactions.PreparingEnlistment\n  id: PreparingEnlistment\n  children:\n  - System.Transactions.PreparingEnlistment.ForceRollback\n  - System.Transactions.PreparingEnlistment.ForceRollback(System.Exception)\n  - System.Transactions.PreparingEnlistment.Prepared\n  - System.Transactions.PreparingEnlistment.RecoveryInformation\n  langs:\n  - csharp\n  name: PreparingEnlistment\n  nameWithType: PreparingEnlistment\n  fullName: System.Transactions.PreparingEnlistment\n  type: Class\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Facilitates communication between an enlisted transaction participant and the transaction manager during the Prepare phase of the transaction.\n  remarks: \"During the initial (prepare) phase of the transaction, the transaction manager passes this type to the resource manager by calling the <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> method to obtain a resource's vote on the transaction. Depending on whether it votes to commit or roll back, your implementation of the resource manager should call the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> or <xref:System.Transactions.PreparingEnlistment.ForceRollback%2A> methods of this type.  \\n  \\n The resource manager can also call the <xref:System.Transactions.Enlistment.Done%2A> method at anytime before it has called the <xref:System.Transactions.PreparingEnlistment.Prepared%2A> method. By doing so, the enlistment is casting a read only vote, meaning that it votes commit on the transaction but does not need to receive the final outcome.  \\n  \\n Durable resource managers can retrieve the information that is be needed by the transaction manager for re-enlistment from the <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> property. For more information on recovery, see [Performing Recovery](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691).\"\n  example:\n  - >-\n    [!code-csharp[Tx_Enlist#2](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#2)]\n     [!code-vb[Tx_Enlist#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#2)]\n  syntax:\n    content: 'public class PreparingEnlistment : System.Transactions.Enlistment'\n  inheritance:\n  - System.Object\n  - System.Transactions.Enlistment\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Transactions.Enlistment.Done\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/PreparingEnlistment.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.PreparingEnlistment.ForceRollback\n  commentId: M:System.Transactions.PreparingEnlistment.ForceRollback\n  id: ForceRollback\n  parent: System.Transactions.PreparingEnlistment\n  langs:\n  - csharp\n  name: ForceRollback()\n  nameWithType: PreparingEnlistment.ForceRollback()\n  fullName: PreparingEnlistment.ForceRollback()\n  type: Method\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Indicates that the transaction should be rolled back.\n  remarks: An implementation of the <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> method of the <xref:System.Transactions.IEnlistmentNotification> interface calls this method to indicate that the transaction must be rolled back.\n  example:\n  - >-\n    [!code-csharp[Tx_Enlist#2](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#2)]\n     [!code-vb[Tx_Enlist#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#2)]\n  syntax:\n    content: public void ForceRollback ();\n    parameters: []\n  overload: System.Transactions.PreparingEnlistment.ForceRollback*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/PreparingEnlistment.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.PreparingEnlistment.ForceRollback(System.Exception)\n  commentId: M:System.Transactions.PreparingEnlistment.ForceRollback(System.Exception)\n  id: ForceRollback(System.Exception)\n  parent: System.Transactions.PreparingEnlistment\n  langs:\n  - csharp\n  name: ForceRollback(Exception)\n  nameWithType: PreparingEnlistment.ForceRollback(Exception)\n  fullName: PreparingEnlistment.ForceRollback(Exception)\n  type: Method\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Indicates that the transaction should be rolled back.\n  syntax:\n    content: public void ForceRollback (Exception ex);\n    parameters:\n    - id: e\n      type: System.Exception\n      description: ''\n  overload: System.Transactions.PreparingEnlistment.ForceRollback*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/PreparingEnlistment.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.PreparingEnlistment.Prepared\n  commentId: M:System.Transactions.PreparingEnlistment.Prepared\n  id: Prepared\n  parent: System.Transactions.PreparingEnlistment\n  langs:\n  - csharp\n  name: Prepared()\n  nameWithType: PreparingEnlistment.Prepared()\n  fullName: PreparingEnlistment.Prepared()\n  type: Method\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Indicates that the transaction can be committed.\n  remarks: \"In the first (prepare) phase of a two phase commit, a resource manager implementing the <xref:System.Transactions.IEnlistmentNotification.Prepare%2A> method of the <xref:System.Transactions.IEnlistmentNotification> interface, calls this method to indicate that the transaction can be committed.  \\n  \\n The resource manager can call the <xref:System.Transactions.Enlistment.Done%2A> method at anytime before it has called this method.  By doing so, the enlistment is casting a read only vote, meaning that it votes commit on the transaction but does not need to receive the final outcome.  \\n  \\n Once this method is called by an enlistment and before it returns, it is possible that another thread or this same thread could make a call into the same enlistment method such as <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> to perform a rollback. This can result in a deadlock situation if the resource manager implementation does not release resource locks until after this method returns.\"\n  example:\n  - >-\n    [!code-csharp[Tx_Enlist#2](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#2)]\n     [!code-vb[Tx_Enlist#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#2)]\n  syntax:\n    content: public void Prepared ();\n    parameters: []\n  overload: System.Transactions.PreparingEnlistment.Prepared*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/PreparingEnlistment.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\n- uid: System.Transactions.PreparingEnlistment.RecoveryInformation\n  commentId: M:System.Transactions.PreparingEnlistment.RecoveryInformation\n  id: RecoveryInformation\n  parent: System.Transactions.PreparingEnlistment\n  langs:\n  - csharp\n  name: RecoveryInformation()\n  nameWithType: PreparingEnlistment.RecoveryInformation()\n  fullName: PreparingEnlistment.RecoveryInformation()\n  type: Method\n  assemblies:\n  - System.Transactions\n  - netstandard\n  - System.Transactions.Local\n  namespace: System.Transactions\n  summary: Gets the recovery information of an enlistment.\n  syntax:\n    content: public byte[] RecoveryInformation ();\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: The recovery information of an enlistment.\n  overload: System.Transactions.PreparingEnlistment.RecoveryInformation*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: An attempt to get recovery information inside a volatile enlistment, which does not generate any recovery information.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/PreparingEnlistment.xml\n  ms.technology:\n  - dotnet-standard\n  manager: ghogen\nreferences:\n- uid: System.Transactions.Enlistment\n  parent: System.Transactions\n  isExternal: false\n  name: Enlistment\n  nameWithType: Enlistment\n  fullName: System.Transactions.Enlistment\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Transactions.PreparingEnlistment.ForceRollback\n  parent: System.Transactions.PreparingEnlistment\n  isExternal: false\n  name: ForceRollback()\n  nameWithType: PreparingEnlistment.ForceRollback()\n  fullName: PreparingEnlistment.ForceRollback()\n- uid: System.Transactions.PreparingEnlistment.ForceRollback(System.Exception)\n  parent: System.Transactions.PreparingEnlistment\n  isExternal: false\n  name: ForceRollback(Exception)\n  nameWithType: PreparingEnlistment.ForceRollback(Exception)\n  fullName: PreparingEnlistment.ForceRollback(Exception)\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.Transactions.PreparingEnlistment.Prepared\n  parent: System.Transactions.PreparingEnlistment\n  isExternal: false\n  name: Prepared()\n  nameWithType: PreparingEnlistment.Prepared()\n  fullName: PreparingEnlistment.Prepared()\n- uid: System.Transactions.PreparingEnlistment.RecoveryInformation\n  parent: System.Transactions.PreparingEnlistment\n  isExternal: false\n  name: RecoveryInformation()\n  nameWithType: PreparingEnlistment.RecoveryInformation()\n  fullName: PreparingEnlistment.RecoveryInformation()\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Transactions.PreparingEnlistment.ForceRollback*\n  parent: System.Transactions.PreparingEnlistment\n  isExternal: false\n  name: ForceRollback\n  nameWithType: PreparingEnlistment.ForceRollback\n  fullName: PreparingEnlistment.ForceRollback\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/PreparingEnlistment.xml\n- uid: System.Transactions.PreparingEnlistment.Prepared*\n  parent: System.Transactions.PreparingEnlistment\n  isExternal: false\n  name: Prepared\n  nameWithType: PreparingEnlistment.Prepared\n  fullName: PreparingEnlistment.Prepared\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/PreparingEnlistment.xml\n- uid: System.Transactions.PreparingEnlistment.RecoveryInformation*\n  parent: System.Transactions.PreparingEnlistment\n  isExternal: false\n  name: RecoveryInformation\n  nameWithType: PreparingEnlistment.RecoveryInformation\n  fullName: PreparingEnlistment.RecoveryInformation\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Transactions/PreparingEnlistment.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Transactions.Enlistment.Done\n  parent: System.Transactions.Enlistment\n  isExternal: false\n  name: Done()\n  nameWithType: Enlistment.Done()\n  fullName: Enlistment.Done()\n"}