{"nodes":[{"content":"Defines the base implementation for a claims authentication manager. The claims authentication manager provides a place in the claims processing pipeline for applying processing logic (filtering, validation, extension) to the claims collection in the incoming principal before execution reaches your application code.","nodes":[{"pos":[0,317],"content":"Defines the base implementation for a claims authentication manager. The claims authentication manager provides a place in the claims processing pipeline for applying processing logic (filtering, validation, extension) to the claims collection in the incoming principal before execution reaches your application code.","nodes":[{"content":"Defines the base implementation for a claims authentication manager. The claims authentication manager provides a place in the claims processing pipeline for applying processing logic (filtering, validation, extension) to the claims collection in the incoming principal before execution reaches your application code.","pos":[0,317],"nodes":[{"content":"Defines the base implementation for a claims authentication manager.","pos":[0,68]},{"content":"The claims authentication manager provides a place in the claims processing pipeline for applying processing logic (filtering, validation, extension) to the claims collection in the incoming principal before execution reaches your application code.","pos":[69,317]}]}]}],"pos":[755,1073],"yaml":true},{"content":"The claims authentication manager provides an extensibility point in the application’s claims processing pipeline that you can use to validate, filter, modify, incoming claims or inject new claims into the set of claims presented by a <xref:System.Security.Claims.ClaimsPrincipal> before the RP application code is executed. You can even return a custom implementation of <xref:System.Security.Claims.ClaimsPrincipal> if your RP application requires it. The default implementation provided by the <xref:System.Security.Claims.ClaimsAuthenticationManager> class returns the claims in the <xref:System.Security.Claims.ClaimsPrincipal> unmodified; however, you can derive from this class and override the <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method to modify the claims in the <xref:System.Security.Claims.ClaimsPrincipal> (or to return a custom <xref:System.Security.Claims.ClaimsPrincipal>).  \n  \n A typical reason for creating a custom claims authentication manager is to add, remove, or transform claims based on information that is only known by or is, perhaps, better maintained by the RP application. For example, a history of customer purchases in a shopping cart application might be kept in a data base maintained by the RP application and then added to the claims principal returned by the claims authentication manager based on the value of a name claim found in the incoming principal.  \n  \n You can configure your application to use a `ClaimsAuthenticationManager` either programmatically by using the <xref:System.IdentityModel.Configuration.IdentityConfiguration> class or in configuration through the [\\&lt;claimsAuthenticationManager\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md) element (which is a child element of the [\\&lt;identityConfiguration\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) element). You can override the <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> method to provide processing for custom child elements of the `<claimsAuthenticationManager>` element through which your custom manager can be configured. The base implementation of <xref:System.Security.Claims.ClaimsAuthenticationManager> does not handle any child elements.  \n  \n Configuring your application to use a claims authentication manager ensures that it will be invoked by Windows Identity Foundation (WIF) from the request pipeline.","nodes":[{"pos":[0,927],"content":"The claims authentication manager provides an extensibility point in the application’s claims processing pipeline that you can use to validate, filter, modify, incoming claims or inject new claims into the set of claims presented by a <xref:System.Security.Claims.ClaimsPrincipal> before the RP application code is executed. You can even return a custom implementation of <xref:System.Security.Claims.ClaimsPrincipal> if your RP application requires it. The default implementation provided by the <xref:System.Security.Claims.ClaimsAuthenticationManager> class returns the claims in the <xref:System.Security.Claims.ClaimsPrincipal> unmodified; however, you can derive from this class and override the <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method to modify the claims in the <xref:System.Security.Claims.ClaimsPrincipal> (or to return a custom <xref:System.Security.Claims.ClaimsPrincipal>).","nodes":[{"content":"The claims authentication manager provides an extensibility point in the application’s claims processing pipeline that you can use to validate, filter, modify, incoming claims or inject new claims into the set of claims presented by a <xref:System.Security.Claims.ClaimsPrincipal> before the RP application code is executed. You can even return a custom implementation of <xref:System.Security.Claims.ClaimsPrincipal> if your RP application requires it. The default implementation provided by the <xref:System.Security.Claims.ClaimsAuthenticationManager> class returns the claims in the <xref:System.Security.Claims.ClaimsPrincipal> unmodified; however, you can derive from this class and override the <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method to modify the claims in the <xref:System.Security.Claims.ClaimsPrincipal> (or to return a custom <xref:System.Security.Claims.ClaimsPrincipal>).","pos":[0,927],"nodes":[{"content":"The claims authentication manager provides an extensibility point in the application’s claims processing pipeline that you can use to validate, filter, modify, incoming claims or inject new claims into the set of claims presented by a <ph id=\"ph1\">&lt;xref:System.Security.Claims.ClaimsPrincipal&gt;</ph> before the RP application code is executed.","pos":[0,324],"source":"The claims authentication manager provides an extensibility point in the application’s claims processing pipeline that you can use to validate, filter, modify, incoming claims or inject new claims into the set of claims presented by a <xref:System.Security.Claims.ClaimsPrincipal> before the RP application code is executed."},{"content":"You can even return a custom implementation of <ph id=\"ph1\">&lt;xref:System.Security.Claims.ClaimsPrincipal&gt;</ph> if your RP application requires it.","pos":[325,453],"source":" You can even return a custom implementation of <xref:System.Security.Claims.ClaimsPrincipal> if your RP application requires it."},{"content":"The default implementation provided by the <ph id=\"ph1\">&lt;xref:System.Security.Claims.ClaimsAuthenticationManager&gt;</ph> class returns the claims in the <ph id=\"ph2\">&lt;xref:System.Security.Claims.ClaimsPrincipal&gt;</ph> unmodified; however, you can derive from this class and override the <ph id=\"ph3\">&lt;xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A&gt;</ph> method to modify the claims in the <ph id=\"ph4\">&lt;xref:System.Security.Claims.ClaimsPrincipal&gt;</ph> (or to return a custom <ph id=\"ph5\">&lt;xref:System.Security.Claims.ClaimsPrincipal&gt;</ph>).","pos":[454,927],"source":" The default implementation provided by the <xref:System.Security.Claims.ClaimsAuthenticationManager> class returns the claims in the <xref:System.Security.Claims.ClaimsPrincipal> unmodified; however, you can derive from this class and override the <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method to modify the claims in the <xref:System.Security.Claims.ClaimsPrincipal> (or to return a custom <xref:System.Security.Claims.ClaimsPrincipal>)."}]}]},{"pos":[934,1432],"content":"A typical reason for creating a custom claims authentication manager is to add, remove, or transform claims based on information that is only known by or is, perhaps, better maintained by the RP application. For example, a history of customer purchases in a shopping cart application might be kept in a data base maintained by the RP application and then added to the claims principal returned by the claims authentication manager based on the value of a name claim found in the incoming principal.","nodes":[{"content":"A typical reason for creating a custom claims authentication manager is to add, remove, or transform claims based on information that is only known by or is, perhaps, better maintained by the RP application. For example, a history of customer purchases in a shopping cart application might be kept in a data base maintained by the RP application and then added to the claims principal returned by the claims authentication manager based on the value of a name claim found in the incoming principal.","pos":[0,498],"nodes":[{"content":"A typical reason for creating a custom claims authentication manager is to add, remove, or transform claims based on information that is only known by or is, perhaps, better maintained by the RP application.","pos":[0,207]},{"content":"For example, a history of customer purchases in a shopping cart application might be kept in a data base maintained by the RP application and then added to the claims principal returned by the claims authentication manager based on the value of a name claim found in the incoming principal.","pos":[208,498]}]}]},{"pos":[1439,2360],"content":"You can configure your application to use a `ClaimsAuthenticationManager` either programmatically by using the <xref:System.IdentityModel.Configuration.IdentityConfiguration> class or in configuration through the [\\&lt;claimsAuthenticationManager\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md) element (which is a child element of the [\\&lt;identityConfiguration\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) element). You can override the <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> method to provide processing for custom child elements of the `<claimsAuthenticationManager>` element through which your custom manager can be configured. The base implementation of <xref:System.Security.Claims.ClaimsAuthenticationManager> does not handle any child elements.","nodes":[{"content":"You can configure your application to use a <ph id=\"ph1\">`ClaimsAuthenticationManager`</ph> either programmatically by using the <ph id=\"ph2\">&lt;xref:System.IdentityModel.Configuration.IdentityConfiguration&gt;</ph> class or in configuration through the <bpt id=\"p1\">[</bpt><ph id=\"ph3\">\\&amp;</ph>lt;claimsAuthenticationManager<ph id=\"ph4\">\\&amp;</ph>gt;<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md)</ept> element (which is a child element of the <bpt id=\"p2\">[</bpt><ph id=\"ph5\">\\&amp;</ph>lt;identityConfiguration<ph id=\"ph6\">\\&amp;</ph>gt;<ept id=\"p2\">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md)</ept> element).","pos":[0,539],"source":"You can configure your application to use a `ClaimsAuthenticationManager` either programmatically by using the <xref:System.IdentityModel.Configuration.IdentityConfiguration> class or in configuration through the [\\&lt;claimsAuthenticationManager\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md) element (which is a child element of the [\\&lt;identityConfiguration\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) element)."},{"content":"You can override the <ph id=\"ph1\">&lt;xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A&gt;</ph> method to provide processing for custom child elements of the <ph id=\"ph2\">`&lt;claimsAuthenticationManager&gt;`</ph> element through which your custom manager can be configured.","pos":[540,800],"source":" You can override the <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> method to provide processing for custom child elements of the `<claimsAuthenticationManager>` element through which your custom manager can be configured."},{"content":"The base implementation of <ph id=\"ph1\">&lt;xref:System.Security.Claims.ClaimsAuthenticationManager&gt;</ph> does not handle any child elements.","pos":[801,921],"source":" The base implementation of <xref:System.Security.Claims.ClaimsAuthenticationManager> does not handle any child elements."}]},{"pos":[2367,2530],"content":"Configuring your application to use a claims authentication manager ensures that it will be invoked by Windows Identity Foundation (WIF) from the request pipeline.","nodes":[{"content":"Configuring your application to use a claims authentication manager ensures that it will be invoked by Windows Identity Foundation (WIF) from the request pipeline.","pos":[0,163]}]}],"pos":[1084,3627],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsAuthenticationManager\"></xref> class.","nodes":[{"pos":[0,112],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Claims.ClaimsAuthenticationManager\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsAuthenticationManager\"></xref> class."}],"pos":[5953,6066],"yaml":true},{"content":"When overridden in a derived class, returns a <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> object consistent with the requirements of the RP application. The default implementation does not modify the incoming <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref>.","nodes":[{"pos":[0,285],"content":"When overridden in a derived class, returns a <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> object consistent with the requirements of the RP application. The default implementation does not modify the incoming <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref>.","nodes":[{"content":"When overridden in a derived class, returns a <ph id=\"ph1\">&lt;xref href=\"System.Security.Claims.ClaimsPrincipal\"&gt;&lt;/xref&gt;</ph> object consistent with the requirements of the RP application.","pos":[0,168],"source":"When overridden in a derived class, returns a <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> object consistent with the requirements of the RP application."},{"content":"The default implementation does not modify the incoming <ph id=\"ph1\">&lt;xref href=\"System.Security.Claims.ClaimsPrincipal\"&gt;&lt;/xref&gt;</ph>.","pos":[169,285],"source":" The default implementation does not modify the incoming <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref>."}]}],"pos":[7485,7771],"yaml":true},{"content":"The <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method is called from the request processing pipeline You can override this method in a derived class to filter, modify, or inject claims into the claims principal according to the policy of your RP application. Depending on the requirements of the RP application, you can even return a custom implementation of <xref:System.Security.Claims.ClaimsPrincipal>.","nodes":[{"pos":[0,436],"content":"The <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method is called from the request processing pipeline You can override this method in a derived class to filter, modify, or inject claims into the claims principal according to the policy of your RP application. Depending on the requirements of the RP application, you can even return a custom implementation of <xref:System.Security.Claims.ClaimsPrincipal>.","nodes":[{"content":"The <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method is called from the request processing pipeline You can override this method in a derived class to filter, modify, or inject claims into the claims principal according to the policy of your RP application. Depending on the requirements of the RP application, you can even return a custom implementation of <xref:System.Security.Claims.ClaimsPrincipal>.","pos":[0,436],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A&gt;</ph> method is called from the request processing pipeline You can override this method in a derived class to filter, modify, or inject claims into the claims principal according to the policy of your RP application.","pos":[0,289],"source":"The <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method is called from the request processing pipeline You can override this method in a derived class to filter, modify, or inject claims into the claims principal according to the policy of your RP application."},{"content":"Depending on the requirements of the RP application, you can even return a custom implementation of <ph id=\"ph1\">&lt;xref:System.Security.Claims.ClaimsPrincipal&gt;</ph>.","pos":[290,436],"source":" Depending on the requirements of the RP application, you can even return a custom implementation of <xref:System.Security.Claims.ClaimsPrincipal>."}]}]}],"pos":[7782,8219],"yaml":true,"extradata":"MT"},{"content":"The address of the resource that is being requested.","nodes":[{"pos":[0,52],"content":"The address of the resource that is being requested.","nodes":[{"content":"The address of the resource that is being requested.","pos":[0,52]}]}],"pos":[8474,8527],"yaml":true},{"content":"The claims principal that represents the authenticated user that is attempting to access the resource.","nodes":[{"pos":[0,102],"content":"The claims principal that represents the authenticated user that is attempting to access the resource.","nodes":[{"content":"The claims principal that represents the authenticated user that is attempting to access the resource.","pos":[0,102]}]}],"pos":[8625,8728],"yaml":true},{"content":"A claims principal that contains any modifications necessary for the RP application. The default implementation returns the incoming claims principal unmodified.","nodes":[{"pos":[0,161],"content":"A claims principal that contains any modifications necessary for the RP application. The default implementation returns the incoming claims principal unmodified.","nodes":[{"content":"A claims principal that contains any modifications necessary for the RP application. The default implementation returns the incoming claims principal unmodified.","pos":[0,161],"nodes":[{"content":"A claims principal that contains any modifications necessary for the RP application.","pos":[0,84]},{"content":"The default implementation returns the incoming claims principal unmodified.","pos":[85,161]}]}]}],"pos":[8810,8972],"yaml":true},{"content":"When overridden in a derived class, loads custom configuration from XML.","nodes":[{"pos":[0,72],"content":"When overridden in a derived class, loads custom configuration from XML.","nodes":[{"content":"When overridden in a derived class, loads custom configuration from XML.","pos":[0,72]}]}],"pos":[10257,10330],"yaml":true},{"content":"The <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> method is called by the configuration infrastructure. When this method is called, the `nodelist` will contain the top-level child elements of the [\\&lt;claimsAuthenticationManager\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md) element from the configuration file. Each of these elements may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class. If no child elements appear under the `<claimsAuthenticationManager>` element in the configuration file, this method is not called.  \n  \n The default implementation throws a <xref:System.NotImplementedException>. Override this method in your derived class to enable initialization of your claims authentication manager from a configuration file. For example, the configuration elements might describe a policy to be followed when authenticating a claims principal; or they might be used to point to an attribute store from which additional claims are to be added to the principal.","nodes":[{"pos":[0,694],"content":"The <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> method is called by the configuration infrastructure. When this method is called, the `nodelist` will contain the top-level child elements of the [\\&lt;claimsAuthenticationManager\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md) element from the configuration file. Each of these elements may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class. If no child elements appear under the `<claimsAuthenticationManager>` element in the configuration file, this method is not called.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A&gt;</ph> method is called by the configuration infrastructure.","pos":[0,142],"source":"The <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> method is called by the configuration infrastructure."},{"content":"When this method is called, the <ph id=\"ph1\">`nodelist`</ph> will contain the top-level child elements of the <bpt id=\"p1\">[</bpt><ph id=\"ph2\">\\&amp;</ph>lt;claimsAuthenticationManager<ph id=\"ph3\">\\&amp;</ph>gt;<ept id=\"p1\">](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md)</ept> element from the configuration file.","pos":[143,415],"source":" When this method is called, the `nodelist` will contain the top-level child elements of the [\\&lt;claimsAuthenticationManager\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md) element from the configuration file."},{"content":"Each of these elements may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.","pos":[416,562]},{"content":"If no child elements appear under the <ph id=\"ph1\">`&lt;claimsAuthenticationManager&gt;`</ph> element in the configuration file, this method is not called.","pos":[563,694],"source":" If no child elements appear under the `<claimsAuthenticationManager>` element in the configuration file, this method is not called."}]},{"pos":[701,1143],"content":"The default implementation throws a <xref:System.NotImplementedException>. Override this method in your derived class to enable initialization of your claims authentication manager from a configuration file. For example, the configuration elements might describe a policy to be followed when authenticating a claims principal; or they might be used to point to an attribute store from which additional claims are to be added to the principal.","nodes":[{"content":"The default implementation throws a <xref:System.NotImplementedException>. Override this method in your derived class to enable initialization of your claims authentication manager from a configuration file. For example, the configuration elements might describe a policy to be followed when authenticating a claims principal; or they might be used to point to an attribute store from which additional claims are to be added to the principal.","pos":[0,442],"nodes":[{"content":"The default implementation throws a <ph id=\"ph1\">&lt;xref:System.NotImplementedException&gt;</ph>.","pos":[0,74],"source":"The default implementation throws a <xref:System.NotImplementedException>."},{"content":"Override this method in your derived class to enable initialization of your claims authentication manager from a configuration file.","pos":[75,207]},{"content":"For example, the configuration elements might describe a policy to be followed when authenticating a claims principal; or they might be used to point to an attribute store from which additional claims are to be added to the principal.","pos":[208,442]}]}]}],"pos":[10341,11491],"yaml":true,"extradata":"MT"},{"content":"The custom configuration elements. Each node in the list is of type <xref href=\"System.Xml.XmlElement\"></xref>.","nodes":[{"pos":[0,111],"content":"The custom configuration elements. Each node in the list is of type <xref href=\"System.Xml.XmlElement\"></xref>.","nodes":[{"content":"The custom configuration elements.","pos":[0,34]},{"content":"Each node in the list is of type <ph id=\"ph1\">&lt;xref href=\"System.Xml.XmlElement\"&gt;&lt;/xref&gt;</ph>.","pos":[35,111],"source":" Each node in the list is of type <xref href=\"System.Xml.XmlElement\"></xref>."}]}],"pos":[11682,11794],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Claims.ClaimsAuthenticationManager\n  commentId: T:System.Security.Claims.ClaimsAuthenticationManager\n  id: ClaimsAuthenticationManager\n  children:\n  - System.Security.Claims.ClaimsAuthenticationManager.#ctor\n  - System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)\n  - System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)\n  langs:\n  - csharp\n  name: ClaimsAuthenticationManager\n  nameWithType: ClaimsAuthenticationManager\n  fullName: System.Security.Claims.ClaimsAuthenticationManager\n  type: Class\n  assemblies:\n  - System.IdentityModel\n  namespace: System.Security.Claims\n  summary: Defines the base implementation for a claims authentication manager. The claims authentication manager provides a place in the claims processing pipeline for applying processing logic (filtering, validation, extension) to the claims collection in the incoming principal before execution reaches your application code.\n  remarks: \"The claims authentication manager provides an extensibility point in the application’s claims processing pipeline that you can use to validate, filter, modify, incoming claims or inject new claims into the set of claims presented by a <xref:System.Security.Claims.ClaimsPrincipal> before the RP application code is executed. You can even return a custom implementation of <xref:System.Security.Claims.ClaimsPrincipal> if your RP application requires it. The default implementation provided by the <xref:System.Security.Claims.ClaimsAuthenticationManager> class returns the claims in the <xref:System.Security.Claims.ClaimsPrincipal> unmodified; however, you can derive from this class and override the <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method to modify the claims in the <xref:System.Security.Claims.ClaimsPrincipal> (or to return a custom <xref:System.Security.Claims.ClaimsPrincipal>).  \\n  \\n A typical reason for creating a custom claims authentication manager is to add, remove, or transform claims based on information that is only known by or is, perhaps, better maintained by the RP application. For example, a history of customer purchases in a shopping cart application might be kept in a data base maintained by the RP application and then added to the claims principal returned by the claims authentication manager based on the value of a name claim found in the incoming principal.  \\n  \\n You can configure your application to use a `ClaimsAuthenticationManager` either programmatically by using the <xref:System.IdentityModel.Configuration.IdentityConfiguration> class or in configuration through the [\\\\&lt;claimsAuthenticationManager\\\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md) element (which is a child element of the [\\\\&lt;identityConfiguration\\\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration.md) element). You can override the <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> method to provide processing for custom child elements of the `<claimsAuthenticationManager>` element through which your custom manager can be configured. The base implementation of <xref:System.Security.Claims.ClaimsAuthenticationManager> does not handle any child elements.  \\n  \\n Configuring your application to use a claims authentication manager ensures that it will be invoked by Windows Identity Foundation (WIF) from the request pipeline.\"\n  example:\n  - \"The following code shows a simple claims authentication manager that adds a role claim to the incoming principal without performing any check on the incoming claims..  \\n  \\n [!code-csharp[WifWebApplication1#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifwebapplication1/cs/myclaimsauthenticationmanager/simpleclaimsauthenticatonmanager.cs#1)]  \\n  \\n The following XML shows the `<claimsAuthenticationManager>` element.  \\n  \\n```xml  \\n<system.identityModel>  \\n  <identityConfiguration>  \\n    <claimsAuthenticationManager type=\\\"MyClaimsAuthenticationManager.SimpleClaimsAuthenticatonManager, MyClaimsAuthenticationManager\\\" />  \\n  \\n    ...  \\n  \\n  </identityConfiguration>  \\n</system.identityModel>  \\n```\"\n  syntax:\n    content: 'public class ClaimsAuthenticationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration'\n  inheritance:\n  - System.Object\n  implements:\n  - System.IdentityModel.Configuration.ICustomIdentityConfiguration\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Claims/ClaimsAuthenticationManager.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.Security.Claims.ClaimsAuthenticationManager.#ctor\n  commentId: M:System.Security.Claims.ClaimsAuthenticationManager.#ctor\n  id: '#ctor'\n  parent: System.Security.Claims.ClaimsAuthenticationManager\n  langs:\n  - csharp\n  name: ClaimsAuthenticationManager()\n  nameWithType: ClaimsAuthenticationManager.ClaimsAuthenticationManager()\n  fullName: ClaimsAuthenticationManager.ClaimsAuthenticationManager()\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.Security.Claims\n  summary: Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsAuthenticationManager\"></xref> class.\n  syntax:\n    content: public ClaimsAuthenticationManager ();\n    parameters: []\n  overload: System.Security.Claims.ClaimsAuthenticationManager.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Claims/ClaimsAuthenticationManager.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)\n  commentId: M:System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)\n  id: Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)\n  parent: System.Security.Claims.ClaimsAuthenticationManager\n  langs:\n  - csharp\n  name: Authenticate(String, ClaimsPrincipal)\n  nameWithType: ClaimsAuthenticationManager.Authenticate(String, ClaimsPrincipal)\n  fullName: ClaimsAuthenticationManager.Authenticate(String, ClaimsPrincipal)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.Security.Claims\n  summary: When overridden in a derived class, returns a <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref> object consistent with the requirements of the RP application. The default implementation does not modify the incoming <xref href=\"System.Security.Claims.ClaimsPrincipal\"></xref>.\n  remarks: The <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method is called from the request processing pipeline You can override this method in a derived class to filter, modify, or inject claims into the claims principal according to the policy of your RP application. Depending on the requirements of the RP application, you can even return a custom implementation of <xref:System.Security.Claims.ClaimsPrincipal>.\n  syntax:\n    content: public virtual System.Security.Claims.ClaimsPrincipal Authenticate (string resourceName, System.Security.Claims.ClaimsPrincipal incomingPrincipal);\n    parameters:\n    - id: resourceName\n      type: System.String\n      description: The address of the resource that is being requested.\n    - id: incomingPrincipal\n      type: System.Security.Claims.ClaimsPrincipal\n      description: The claims principal that represents the authenticated user that is attempting to access the resource.\n    return:\n      type: System.Security.Claims.ClaimsPrincipal\n      description: A claims principal that contains any modifications necessary for the RP application. The default implementation returns the incoming claims principal unmodified.\n  overload: System.Security.Claims.ClaimsAuthenticationManager.Authenticate*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Claims/ClaimsAuthenticationManager.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)\n  commentId: M:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)\n  id: LoadCustomConfiguration(System.Xml.XmlNodeList)\n  parent: System.Security.Claims.ClaimsAuthenticationManager\n  langs:\n  - csharp\n  name: LoadCustomConfiguration(XmlNodeList)\n  nameWithType: ClaimsAuthenticationManager.LoadCustomConfiguration(XmlNodeList)\n  fullName: ClaimsAuthenticationManager.LoadCustomConfiguration(XmlNodeList)\n  type: Method\n  assemblies:\n  - System.IdentityModel\n  namespace: System.Security.Claims\n  summary: When overridden in a derived class, loads custom configuration from XML.\n  remarks: \"The <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> method is called by the configuration infrastructure. When this method is called, the `nodelist` will contain the top-level child elements of the [\\\\&lt;claimsAuthenticationManager\\\\&gt;](~/docs/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager.md) element from the configuration file. Each of these elements may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class. If no child elements appear under the `<claimsAuthenticationManager>` element in the configuration file, this method is not called.  \\n  \\n The default implementation throws a <xref:System.NotImplementedException>. Override this method in your derived class to enable initialization of your claims authentication manager from a configuration file. For example, the configuration elements might describe a policy to be followed when authenticating a claims principal; or they might be used to point to an attribute store from which additional claims are to be added to the principal.\"\n  syntax:\n    content: public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);\n    parameters:\n    - id: nodelist\n      type: System.Xml.XmlNodeList\n      description: The custom configuration elements. Each node in the list is of type <xref href=\"System.Xml.XmlElement\"></xref>.\n  overload: System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Claims/ClaimsAuthenticationManager.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.Claims.ClaimsAuthenticationManager.#ctor\n  parent: System.Security.Claims.ClaimsAuthenticationManager\n  isExternal: false\n  name: ClaimsAuthenticationManager()\n  nameWithType: ClaimsAuthenticationManager.ClaimsAuthenticationManager()\n  fullName: ClaimsAuthenticationManager.ClaimsAuthenticationManager()\n- uid: System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)\n  parent: System.Security.Claims.ClaimsAuthenticationManager\n  isExternal: false\n  name: Authenticate(String, ClaimsPrincipal)\n  nameWithType: ClaimsAuthenticationManager.Authenticate(String, ClaimsPrincipal)\n  fullName: ClaimsAuthenticationManager.Authenticate(String, ClaimsPrincipal)\n- uid: System.Security.Claims.ClaimsPrincipal\n  parent: System.Security.Claims\n  isExternal: false\n  name: ClaimsPrincipal\n  nameWithType: ClaimsPrincipal\n  fullName: System.Security.Claims.ClaimsPrincipal\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)\n  parent: System.Security.Claims.ClaimsAuthenticationManager\n  isExternal: false\n  name: LoadCustomConfiguration(XmlNodeList)\n  nameWithType: ClaimsAuthenticationManager.LoadCustomConfiguration(XmlNodeList)\n  fullName: ClaimsAuthenticationManager.LoadCustomConfiguration(XmlNodeList)\n- uid: System.Xml.XmlNodeList\n  parent: System.Xml\n  isExternal: false\n  name: XmlNodeList\n  nameWithType: XmlNodeList\n  fullName: System.Xml.XmlNodeList\n- uid: System.Security.Claims.ClaimsAuthenticationManager.#ctor*\n  parent: System.Security.Claims.ClaimsAuthenticationManager\n  isExternal: false\n  name: ClaimsAuthenticationManager\n  nameWithType: ClaimsAuthenticationManager.ClaimsAuthenticationManager\n  fullName: ClaimsAuthenticationManager.ClaimsAuthenticationManager\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Claims/ClaimsAuthenticationManager.xml\n- uid: System.Security.Claims.ClaimsAuthenticationManager.Authenticate*\n  parent: System.Security.Claims.ClaimsAuthenticationManager\n  isExternal: false\n  name: Authenticate\n  nameWithType: ClaimsAuthenticationManager.Authenticate\n  fullName: ClaimsAuthenticationManager.Authenticate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Claims/ClaimsAuthenticationManager.xml\n- uid: System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration*\n  parent: System.Security.Claims.ClaimsAuthenticationManager\n  isExternal: false\n  name: LoadCustomConfiguration\n  nameWithType: ClaimsAuthenticationManager.LoadCustomConfiguration\n  fullName: ClaimsAuthenticationManager.LoadCustomConfiguration\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Claims/ClaimsAuthenticationManager.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IdentityModel.Configuration.ICustomIdentityConfiguration\n  parent: System.IdentityModel.Configuration\n  isExternal: false\n  name: ICustomIdentityConfiguration\n  nameWithType: ICustomIdentityConfiguration\n  fullName: System.IdentityModel.Configuration.ICustomIdentityConfiguration\n"}