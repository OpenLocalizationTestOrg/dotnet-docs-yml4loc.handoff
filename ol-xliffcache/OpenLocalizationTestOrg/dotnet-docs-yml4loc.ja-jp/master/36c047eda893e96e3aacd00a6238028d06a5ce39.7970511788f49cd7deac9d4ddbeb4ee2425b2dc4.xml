{"nodes":[{"content":"Defines the interface for a random access iterator. Random access iterators support the following operations: moving forward one position by calling <code>operator++</code>, moving backward one position by calling <code>operator--</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic.","nodes":[{"pos":[0,347],"content":"Defines the interface for a random access iterator. Random access iterators support the following operations: moving forward one position by calling <code>operator++</code>, moving backward one position by calling <code>operator--</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic.","nodes":[{"content":"Defines the interface for a random access iterator.","pos":[0,51]},{"content":"Random access iterators support the following operations: moving forward one position by calling <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">operator++</ph><ept id=\"p1\">&lt;/code&gt;</ept>, moving backward one position by calling <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">operator--</ph><ept id=\"p2\">&lt;/code&gt;</ept>, accessing an element by using <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">operator[]</ph><ept id=\"p3\">&lt;/code&gt;</ept>, and accessing an element by using pointer arithmetic.","pos":[52,347],"source":" Random access iterators support the following operations: moving forward one position by calling <code>operator++</code>, moving backward one position by calling <code>operator--</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic."}]}],"pos":[852,1202],"yaml":true},{"content":"[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]","nodes":[],"pos":[1396,1454],"yaml":true},{"content":"Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.","nodes":[{"pos":[0,140],"content":"Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.","nodes":[{"content":"Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.","pos":[0,140]}]}],"pos":[3101,3242],"yaml":true},{"content":"A valid iterator that points to the same container as the current iterator.","nodes":[{"pos":[0,75],"content":"A valid iterator that points to the same container as the current iterator.","nodes":[{"content":"A valid iterator that points to the same container as the current iterator.","pos":[0,75]}]}],"pos":[3479,3555],"yaml":true},{"content":"The distance, in number of elements, between the element that the current iterator is pointing to and the element that <code>_Right</code> is pointing to. This number is negative if <code>_Right</code> points to an element that is before the element that the current iterator points to.","nodes":[{"pos":[0,286],"content":"The distance, in number of elements, between the element that the current iterator is pointing to and the element that <code>_Right</code> is pointing to. This number is negative if <code>_Right</code> points to an element that is before the element that the current iterator points to.","nodes":[{"content":"The distance, in number of elements, between the element that the current iterator is pointing to and the element that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">_Right</ph><ept id=\"p1\">&lt;/code&gt;</ept> is pointing to.","pos":[0,154],"source":"The distance, in number of elements, between the element that the current iterator is pointing to and the element that <code>_Right</code> is pointing to."},{"content":"This number is negative if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">_Right</ph><ept id=\"p1\">&lt;/code&gt;</ept> points to an element that is before the element that the current iterator points to.","pos":[155,286],"source":" This number is negative if <code>_Right</code> points to an element that is before the element that the current iterator points to."}]}],"pos":[3611,3898],"yaml":true},{"content":"Determines whether the current iterator is pointing to an element in the container that precedes the element that the given iterator points to.","nodes":[{"pos":[0,143],"content":"Determines whether the current iterator is pointing to an element in the container that precedes the element that the given iterator points to.","nodes":[{"content":"Determines whether the current iterator is pointing to an element in the container that precedes the element that the given iterator points to.","pos":[0,143]}]}],"pos":[5265,5409],"yaml":true},{"content":"A valid iterator that points to the same container as the current iterator.","nodes":[{"pos":[0,75],"content":"A valid iterator that points to the same container as the current iterator.","nodes":[{"content":"A valid iterator that points to the same container as the current iterator.","pos":[0,75]}]}],"pos":[5648,5724],"yaml":true},{"content":"`true` if the current iterator is pointing to an element that comes before the element that <code>_Right</code> is pointing to; otherwise, `false`.","nodes":[{"pos":[0,147],"content":"<ph id=\"ph1\">`true`</ph> if the current iterator is pointing to an element that comes before the element that <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">_Right</ph><ept id=\"p1\">&lt;/code&gt;</ept> is pointing to; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the current iterator is pointing to an element that comes before the element that <code>_Right</code> is pointing to; otherwise, `false`."}],"pos":[5782,5932],"yaml":true},{"content":"Moves the iterator by the given number of elements.","nodes":[{"pos":[0,51],"content":"Moves the iterator by the given number of elements.","nodes":[{"content":"Moves the iterator by the given number of elements.","pos":[0,51]}]}],"pos":[7060,7112],"yaml":true},{"content":"The number of elements to traverse. To move the iterator forward, specify a positive number. To move the iterator backward, use a negative number.","nodes":[{"pos":[0,146],"content":"The number of elements to traverse. To move the iterator forward, specify a positive number. To move the iterator backward, use a negative number.","nodes":[{"content":"The number of elements to traverse. To move the iterator forward, specify a positive number. To move the iterator backward, use a negative number.","pos":[0,146],"nodes":[{"content":"The number of elements to traverse.","pos":[0,35]},{"content":"To move the iterator forward, specify a positive number.","pos":[36,92]},{"content":"To move the iterator backward, use a negative number.","pos":[93,146]}]}]}],"pos":[7244,7391],"yaml":true},{"content":"The actual number of elements traversed. This number will differ from <code>_Offset</code> if the beginning or end of the container is reached before iterating the desired number of elements.","nodes":[{"pos":[0,191],"content":"The actual number of elements traversed. This number will differ from <code>_Offset</code> if the beginning or end of the container is reached before iterating the desired number of elements.","nodes":[{"content":"The actual number of elements traversed.","pos":[0,40]},{"content":"This number will differ from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">_Offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> if the beginning or end of the container is reached before iterating the desired number of elements.","pos":[41,191],"source":" This number will differ from <code>_Offset</code> if the beginning or end of the container is reached before iterating the desired number of elements."}]}],"pos":[7447,7639],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n  commentId: T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n  id: IRandomAccessIterator`1\n  children:\n  - Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  - Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)\n  langs:\n  - csharp\n  name: IRandomAccessIterator<TValue>\n  nameWithType: IRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue>\n  type: Interface\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: 'Defines the interface for a random access iterator. Random access iterators support the following operations: moving forward one position by calling <code>operator++</code>, moving backward one position by calling <code>operator--</code>, accessing an element by using <code>operator[]</code>, and accessing an element by using pointer arithmetic.'\n  syntax:\n    content: 'public interface IRandomAccessIterator<TValue> : Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator<TValue>'\n    typeParameters:\n    - id: TValue\n      description: '[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]'\n  derivedClasses:\n  - Microsoft.VisualC.StlClr.Generic.ConstContainerRandomAccessIterator`1\n  - Microsoft.VisualC.StlClr.Generic.ConstReverseRandomAccessIterator`1\n  - Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1\n  - Microsoft.VisualC.StlClr.Generic.ReverseRandomAccessIterator`1\n  implements:\n  - Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator{TValue}\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/IRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  id: distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n  langs:\n  - csharp\n  name: distance(IRandomAccessIterator<TValue>)\n  nameWithType: IRandomAccessIterator<TValue>.distance(IRandomAccessIterator<TValue>)\n  fullName: IRandomAccessIterator<TValue>.distance(IRandomAccessIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.\n  syntax:\n    content: public int distance (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: A valid iterator that points to the same container as the current iterator.\n    return:\n      type: System.Int32\n      description: The distance, in number of elements, between the element that the current iterator is pointing to and the element that <code>_Right</code> is pointing to. This number is negative if <code>_Right</code> points to an element that is before the element that the current iterator points to.\n  overload: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/IRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  commentId: M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  id: less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n  langs:\n  - csharp\n  name: less_than(IRandomAccessIterator<TValue>)\n  nameWithType: IRandomAccessIterator<TValue>.less_than(IRandomAccessIterator<TValue>)\n  fullName: IRandomAccessIterator<TValue>.less_than(IRandomAccessIterator<TValue>)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Determines whether the current iterator is pointing to an element in the container that precedes the element that the given iterator points to.\n  syntax:\n    content: public bool less_than (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue> _Right);\n    parameters:\n    - id: _Right\n      type: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n      description: A valid iterator that points to the same container as the current iterator.\n    return:\n      type: System.Boolean\n      description: '`true` if the current iterator is pointing to an element that comes before the element that <code>_Right</code> is pointing to; otherwise, `false`.'\n  overload: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/IRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\n- uid: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)\n  commentId: M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)\n  id: move(System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n  langs:\n  - csharp\n  name: move(Int32)\n  nameWithType: IRandomAccessIterator<TValue>.move(Int32)\n  fullName: IRandomAccessIterator<TValue>.move(Int32)\n  type: Method\n  assemblies:\n  - Microsoft.VisualC.STLCLR\n  namespace: Microsoft.VisualC.StlClr.Generic\n  summary: Moves the iterator by the given number of elements.\n  syntax:\n    content: public int move (int _Offset);\n    parameters:\n    - id: _Offset\n      type: System.Int32\n      description: The number of elements to traverse. To move the iterator forward, specify a positive number. To move the iterator backward, use a negative number.\n    return:\n      type: System.Int32\n      description: The actual number of elements traversed. This number will differ from <code>_Offset</code> if the beginning or end of the container is reached before iterating the desired number of elements.\n  overload: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/IRandomAccessIterator`1.xml\n  ms.author: mblome\n  manager: ghogen\nreferences:\n- uid: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n  isExternal: false\n  name: distance(IRandomAccessIterator<TValue>)\n  nameWithType: IRandomAccessIterator<TValue>.distance(IRandomAccessIterator<TValue>)\n  fullName: IRandomAccessIterator<TValue>.distance(IRandomAccessIterator<TValue>)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IRandomAccessIterator<TValue>\n  nameWithType: IRandomAccessIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator<TValue>\n- uid: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})\n  parent: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n  isExternal: false\n  name: less_than(IRandomAccessIterator<TValue>)\n  nameWithType: IRandomAccessIterator<TValue>.less_than(IRandomAccessIterator<TValue>)\n  fullName: IRandomAccessIterator<TValue>.less_than(IRandomAccessIterator<TValue>)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)\n  parent: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n  isExternal: false\n  name: move(Int32)\n  nameWithType: IRandomAccessIterator<TValue>.move(Int32)\n  fullName: IRandomAccessIterator<TValue>.move(Int32)\n- uid: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance*\n  parent: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n  isExternal: false\n  name: distance\n  nameWithType: IRandomAccessIterator<TValue>.distance\n  fullName: IRandomAccessIterator<TValue>.distance\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/IRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than*\n  parent: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n  isExternal: false\n  name: less_than\n  nameWithType: IRandomAccessIterator<TValue>.less_than\n  fullName: IRandomAccessIterator<TValue>.less_than\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/IRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move*\n  parent: Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1\n  isExternal: false\n  name: move\n  nameWithType: IRandomAccessIterator<TValue>.move\n  fullName: IRandomAccessIterator<TValue>.move\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/Microsoft.VisualC.StlClr.Generic/IRandomAccessIterator`1.xml\n- uid: Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1\n  parent: Microsoft.VisualC.StlClr.Generic\n  isExternal: false\n  name: IBidirectionalIterator<TValue>\n  nameWithType: IBidirectionalIterator<TValue>\n  fullName: Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator<TValue>\n"}