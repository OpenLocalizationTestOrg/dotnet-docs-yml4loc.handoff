### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMACSHA384
  commentId: T:System.Security.Cryptography.HMACSHA384
  id: HMACSHA384
  children:
  - System.Security.Cryptography.HMACSHA384.#ctor
  - System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])
  - System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)
  - System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMACSHA384.HashFinal
  - System.Security.Cryptography.HMACSHA384.HashSize
  - System.Security.Cryptography.HMACSHA384.Initialize
  - System.Security.Cryptography.HMACSHA384.Key
  - System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues
  langs:
  - csharp
  name: HMACSHA384
  nameWithType: HMACSHA384
  fullName: System.Security.Cryptography.HMACSHA384
  type: Class
  assemblies:
  - System.Security.Cryptography.Algorithms
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Computes a Hash-based Message Authentication Code (HMAC) using the <xref href="System.Security.Cryptography.SHA384"></xref> hash function.
  remarks: "<xref:System.Security.Cryptography.HMACSHA384> is a type of keyed hash algorithm that is constructed from the SHA-384 hash function and used as a Hash-based Message Authentication Code (HMAC). The HMAC process mixes a secret key with the message data and hashes the result. The hash value is mixed with the secret key again, and then hashed a second time. The output hash is 384 bits long.  \n  \n An HMAC can be used to determine whether a message sent over a nonsecure channel has been tampered with, provided that the sender and receiver share a secret key. The sender computes the hash value for the original data and sends both the original data and the hash value as a single message. The receiver recalculates the hash value on the received message and checks that the computed HMAC matches the transmitted HMAC.  \n  \n If the original and computed hash values match, the message is authenticated. If they do not match, either the data or the hash value has been changed. HMACs provide security against tampering because knowledge of the secret key is required to change the message and reproduce the correct hash value.  \n  \n <xref:System.Security.Cryptography.HMACSHA384> accepts all key sizes and produces a hash sequence that is 384 bits long."
  example:
  - "The following example shows how to sign a file by using the <xref:System.Security.Cryptography.HMACSHA384> object, and then how to verify the file.  \n  \n [!code-cpp[HMACSHA384#1](~/samples/snippets/cpp/VS_Snippets_CLR/HMACSHA384/CPP/hmacsha384.cpp#1)]\n [!code-csharp[HMACSHA384#1](~/samples/snippets/csharp/VS_Snippets_CLR/HMACSHA384/CS/hmacsha384.cs#1)]\n [!code-vb[HMACSHA384#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/HMACSHA384/vb/hmacsha384.vb#1)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HMACSHA384 : System.Security.Cryptography.HMAC
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HMACSHA384.#ctor
  commentId: M:System.Security.Cryptography.HMACSHA384.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACSHA384
  langs:
  - csharp
  name: HMACSHA384()
  nameWithType: HMACSHA384.HMACSHA384()
  fullName: HMACSHA384.HMACSHA384()
  type: Constructor
  assemblies:
  - System.Security.Cryptography.Algorithms
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.HMACSHA384"></xref> class by using a randomly generated key.
  remarks: This constructor uses a 64-byte, randomly generated key.
  syntax:
    content: public HMACSHA384 ();
    parameters: []
  overload: System.Security.Cryptography.HMACSHA384.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])
  commentId: M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACSHA384
  langs:
  - csharp
  name: HMACSHA384(Byte[])
  nameWithType: HMACSHA384.HMACSHA384(Byte[])
  fullName: HMACSHA384.HMACSHA384(Byte[])
  type: Constructor
  assemblies:
  - System.Security.Cryptography.Algorithms
  - mscorlib
  - netstandard
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.HMACSHA384"></xref> class by using the specified key data.
  remarks: ''
  example:
  - For an example of how to use this constructor, see the <xref:System.Security.Cryptography.HMACSHA384> class.
  syntax:
    content: public HMACSHA384 (byte[] key);
    parameters:
    - id: key
      type: System.Byte[]
      description: The secret key for <xref href="System.Security.Cryptography.HMACSHA384"></xref> encryption. The key can be any length. However, the recommended size is 128 bytes. If the key is more than 128 bytes long, it is hashed (using SHA-384) to derive a 128-byte key. If it is less than 128 bytes long, it is padded to 128 bytes.
  overload: System.Security.Cryptography.HMACSHA384.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>key</code> parameter is `null`.
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.HMACSHA384
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HMACSHA384.Dispose(Boolean)
  fullName: HMACSHA384.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: ''
  overload: System.Security.Cryptography.HMACSHA384.Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
- uid: System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HMACSHA384
  langs:
  - csharp
  name: HashCore(Byte[], Int32, Int32)
  nameWithType: HMACSHA384.HashCore(Byte[], Int32, Int32)
  fullName: HMACSHA384.HashCore(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void HashCore (byte[] rgb, int ib, int cb);
    parameters:
    - id: rgb
      type: System.Byte[]
      description: ''
    - id: ib
      type: System.Int32
      description: ''
    - id: cb
      type: System.Int32
      description: ''
  overload: System.Security.Cryptography.HMACSHA384.HashCore*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
- uid: System.Security.Cryptography.HMACSHA384.HashFinal
  commentId: M:System.Security.Cryptography.HMACSHA384.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.HMACSHA384
  langs:
  - csharp
  name: HashFinal()
  nameWithType: HMACSHA384.HashFinal()
  fullName: HMACSHA384.HashFinal()
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashFinal ();
    parameters: []
    return:
      type: System.Byte[]
      description: ''
  overload: System.Security.Cryptography.HMACSHA384.HashFinal*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
- uid: System.Security.Cryptography.HMACSHA384.HashSize
  commentId: P:System.Security.Cryptography.HMACSHA384.HashSize
  id: HashSize
  parent: System.Security.Cryptography.HMACSHA384
  langs:
  - csharp
  name: HashSize
  nameWithType: HMACSHA384.HashSize
  fullName: HMACSHA384.HashSize
  type: Property
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public override int HashSize { get; }
    return:
      type: System.Int32
      description: ''
  overload: System.Security.Cryptography.HMACSHA384.HashSize*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
- uid: System.Security.Cryptography.HMACSHA384.Initialize
  commentId: M:System.Security.Cryptography.HMACSHA384.Initialize
  id: Initialize
  parent: System.Security.Cryptography.HMACSHA384
  langs:
  - csharp
  name: Initialize()
  nameWithType: HMACSHA384.Initialize()
  fullName: HMACSHA384.Initialize()
  type: Method
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public override void Initialize ();
    parameters: []
  overload: System.Security.Cryptography.HMACSHA384.Initialize*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
- uid: System.Security.Cryptography.HMACSHA384.Key
  commentId: P:System.Security.Cryptography.HMACSHA384.Key
  id: Key
  parent: System.Security.Cryptography.HMACSHA384
  langs:
  - csharp
  name: Key
  nameWithType: HMACSHA384.Key
  fullName: HMACSHA384.Key
  type: Property
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public override byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: ''
  overload: System.Security.Cryptography.HMACSHA384.Key*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
- uid: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues
  commentId: P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues
  id: ProduceLegacyHmacValues
  parent: System.Security.Cryptography.HMACSHA384
  langs:
  - csharp
  name: ProduceLegacyHmacValues
  nameWithType: HMACSHA384.ProduceLegacyHmacValues
  fullName: HMACSHA384.ProduceLegacyHmacValues
  type: Property
  assemblies:
  - mscorlib
  - netstandard
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Provides a workaround for the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] implementation of the <xref href="System.Security.Cryptography.HMACSHA384"></xref> algorithm, which is inconsistent with the [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] implementation of the algorithm.
  remarks: "The purpose of the <xref:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues%2A> Boolean property is to enable [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] applications. When you set this property to `true`, the <xref:System.Security.Cryptography.HMACSHA384> object produces values that match the values produced by the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]. You should set this property only once after you create your HMAC object. You will need to reset your key afterwards, as shown in the following example.  \n  \n```  \npublic static void Test()  \n    {  \n    HMACSHA384 hmac = new HMACSHA384();  \n    hmac.ProduceLegacyHmacValues = true;  \n    hmac.Key = // ...Get the HMAC key.  \n    // ...  \n    // Use the HMAC algorithm.  \n    // ...  \n    }  \n```"
  syntax:
    content: public bool ProduceLegacyHmacValues { get; set; }
    return:
      type: System.Boolean
      description: '`true` to enable [!INCLUDE[net_v20sp1_long](~/includes/net-v20sp1-long-md.md)] applications to interact with [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] applications; otherwise, `false`.'
  overload: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
  ms.technology:
  - dotnet-standard
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Security.Cryptography.HMAC
  parent: System.Security.Cryptography
  isExternal: false
  name: HMAC
  nameWithType: HMAC
  fullName: System.Security.Cryptography.HMAC
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.Cryptography.HMACSHA384.#ctor
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: HMACSHA384()
  nameWithType: HMACSHA384.HMACSHA384()
  fullName: HMACSHA384.HMACSHA384()
- uid: System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: HMACSHA384(Byte[])
  nameWithType: HMACSHA384.HMACSHA384(Byte[])
  fullName: HMACSHA384.HMACSHA384(Byte[])
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HMACSHA384.Dispose(Boolean)
  fullName: HMACSHA384.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: HashCore(Byte[], Int32, Int32)
  nameWithType: HMACSHA384.HashCore(Byte[], Int32, Int32)
  fullName: HMACSHA384.HashCore(Byte[], Int32, Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.HMACSHA384.HashFinal
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: HashFinal()
  nameWithType: HMACSHA384.HashFinal()
  fullName: HMACSHA384.HashFinal()
- uid: System.Security.Cryptography.HMACSHA384.HashSize
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: HashSize
  nameWithType: HMACSHA384.HashSize
  fullName: HMACSHA384.HashSize
- uid: System.Security.Cryptography.HMACSHA384.Initialize
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: Initialize()
  nameWithType: HMACSHA384.Initialize()
  fullName: HMACSHA384.Initialize()
- uid: System.Security.Cryptography.HMACSHA384.Key
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: Key
  nameWithType: HMACSHA384.Key
  fullName: HMACSHA384.Key
- uid: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: ProduceLegacyHmacValues
  nameWithType: HMACSHA384.ProduceLegacyHmacValues
  fullName: HMACSHA384.ProduceLegacyHmacValues
- uid: System.Security.Cryptography.HMACSHA384.#ctor*
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: HMACSHA384
  nameWithType: HMACSHA384.HMACSHA384
  fullName: HMACSHA384.HMACSHA384
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
- uid: System.Security.Cryptography.HMACSHA384.Dispose*
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: Dispose
  nameWithType: HMACSHA384.Dispose
  fullName: HMACSHA384.Dispose
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
- uid: System.Security.Cryptography.HMACSHA384.HashCore*
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: HashCore
  nameWithType: HMACSHA384.HashCore
  fullName: HMACSHA384.HashCore
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
- uid: System.Security.Cryptography.HMACSHA384.HashFinal*
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: HashFinal
  nameWithType: HMACSHA384.HashFinal
  fullName: HMACSHA384.HashFinal
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
- uid: System.Security.Cryptography.HMACSHA384.HashSize*
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: HashSize
  nameWithType: HMACSHA384.HashSize
  fullName: HMACSHA384.HashSize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
- uid: System.Security.Cryptography.HMACSHA384.Initialize*
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: Initialize
  nameWithType: HMACSHA384.Initialize
  fullName: HMACSHA384.Initialize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
- uid: System.Security.Cryptography.HMACSHA384.Key*
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: Key
  nameWithType: HMACSHA384.Key
  fullName: HMACSHA384.Key
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
- uid: System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues*
  parent: System.Security.Cryptography.HMACSHA384
  isExternal: false
  name: ProduceLegacyHmacValues
  nameWithType: HMACSHA384.ProduceLegacyHmacValues
  fullName: HMACSHA384.ProduceLegacyHmacValues
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Cryptography/HMACSHA384.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanReuseTransform
  nameWithType: HashAlgorithm.CanReuseTransform
  fullName: HashAlgorithm.CanReuseTransform
- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: HashAlgorithm.CanTransformMultipleBlocks
  fullName: HashAlgorithm.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.HashAlgorithm.Clear
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Clear()
  nameWithType: HashAlgorithm.Clear()
  fullName: HashAlgorithm.Clear()
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash(Byte[])
  nameWithType: HashAlgorithm.ComputeHash(Byte[])
  fullName: HashAlgorithm.ComputeHash(Byte[])
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash(Stream)
  nameWithType: HashAlgorithm.ComputeHash(Stream)
  fullName: HashAlgorithm.ComputeHash(Stream)
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: ComputeHash(Byte[], Int32, Int32)
  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)
  fullName: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)
- uid: System.Security.Cryptography.HMAC.Create
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create()
  nameWithType: HMAC.Create()
  fullName: HMAC.Create()
- uid: System.Security.Cryptography.HMAC.Create(System.String)
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create(String)
  nameWithType: HMAC.Create(String)
  fullName: HMAC.Create(String)
- uid: System.Security.Cryptography.HashAlgorithm.Dispose
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Dispose()
  nameWithType: HashAlgorithm.Dispose()
  fullName: HashAlgorithm.Dispose()
- uid: System.Security.Cryptography.HashAlgorithm.Hash
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Hash
  nameWithType: HashAlgorithm.Hash
  fullName: HashAlgorithm.Hash
- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashSizeValue
  nameWithType: HashAlgorithm.HashSizeValue
  fullName: HashAlgorithm.HashSizeValue
- uid: System.Security.Cryptography.HashAlgorithm.HashValue
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashValue
  nameWithType: HashAlgorithm.HashValue
  fullName: HashAlgorithm.HashValue
- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: InputBlockSize
  nameWithType: HashAlgorithm.InputBlockSize
  fullName: HashAlgorithm.InputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: OutputBlockSize
  nameWithType: HashAlgorithm.OutputBlockSize
  fullName: HashAlgorithm.OutputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.State
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: State
  nameWithType: HashAlgorithm.State
  fullName: HashAlgorithm.State
- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  fullName: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: TransformFinalBlock(Byte[], Int32, Int32)
  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)
  fullName: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)
- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: KeyValue
  nameWithType: KeyedHashAlgorithm.KeyValue
  fullName: KeyedHashAlgorithm.KeyValue
- uid: System.Security.Cryptography.HMAC.BlockSizeValue
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: BlockSizeValue
  nameWithType: HMAC.BlockSizeValue
  fullName: HMAC.BlockSizeValue
- uid: System.Security.Cryptography.HMAC.HashName
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashName
  nameWithType: HMAC.HashName
  fullName: HMAC.HashName
