<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b93d4d55f4b915d5a13e0620962be30c4d55e4c1</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Windows.Controls.VirtualizingStackPanel.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">334525d2fcc253566e2d49a677fdf5d002dcbfb7</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">8beb1214faa40a56a17af418a0dffb3a7e102652</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Arranges and virtualizes content on a single line that is oriented either horizontally or vertically.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>The standard layout system creates item containers and computes layout for each item associated with a list control.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The word "virtualize" refers to a technique by which a subset of <ph id="ph1">[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]</ph> elements are generated from a larger number of data items based on which items are visible on-screen.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generating many <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> elements when only a few elements might be on the screen can adversely affect the performance of your application.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> calculates the number of visible items and works with the <ph id="ph2">&lt;xref:System.Windows.Controls.ItemContainerGenerator&gt;</ph> from an <ph id="ph3">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> (such as <ph id="ph4">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Controls.ListView&gt;</ph>) to create <ph id="ph6">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> elements only for visible items.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>Virtualization in a <ph id="ph1">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph> only occurs when the items control contained in the panel creates its own item containers.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can ensure this happens by using data binding.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>In scenarios where item containers are created and added to the items control, a <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> offers no performance advantage over a <ph id="ph2">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> is the default items host for the <ph id="ph2">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>By default, the <ph id="ph1">`VirtualizingStackPanel.IsVirtualizing`</ph> attached property is set to <ph id="ph2">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>When the <ph id="ph1">`VirtualizingStackPanel.IsVirtualizing`</ph> attached property is set to <ph id="ph2">`false`</ph>, a <ph id="ph3">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> behaves the same as an ordinary <ph id="ph4">&lt;xref:System.Windows.Controls.StackPanel&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Adds an event handler for the <ph id="ph1">`VirtualizingStackPanel.CleanUpVirtualizedItem`</ph> attached event.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>The standard layout system creates item containers and computes layout for each item associated with a list control.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>The word "virtualize" refers to a technique by which a subset of <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> elements are generated from a larger number of data items based on which items are visible on-screen.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generating many <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> elements when only a few elements might be on the screen can adversely affect the performance of your application.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> calculates the number of visible items and works with the <ph id="ph2">&lt;xref:System.Windows.Controls.ItemContainerGenerator&gt;</ph> from an <ph id="ph3">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> (such as <ph id="ph4">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Controls.ListView&gt;</ph>) to create <ph id="ph6">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> elements only for visible items.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DependencyObject"&gt;&lt;/xref&gt;</ph> that is listening for this event.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>The event handler that is to be added.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Arranges the content of a <ph id="ph1">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel"&gt;&lt;/xref&gt;</ph> element.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.ArrangeOverride%2A&gt;</ph>and <ph id="ph2">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.MeasureOverride%2A&gt;</ph> methods in a derived class for custom layout behavior.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Size"&gt;&lt;/xref&gt;</ph> that this element should use to arrange its child elements.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Size"&gt;&lt;/xref&gt;</ph> that represents the arranged size of this <ph id="ph2">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel"&gt;&lt;/xref&gt;</ph> element and its child elements.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>Generates the item at the specified index position and brings it into view.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>The position of the item to generate and make visible.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">index</ph><ept id="p1">&lt;/code&gt;</ept> position does not exist in the child collection.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>Gets value that indicates whether the <ph id="ph1">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel"&gt;&lt;/xref&gt;</ph> can virtualize items that are grouped or organized in a hierarchy.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> in all cases.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether a <ph id="ph1">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel"&gt;&lt;/xref&gt;</ph> can scroll in the horizontal dimension.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if content can scroll in the horizontal dimension; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that indicates whether content can scroll in the vertical dimension.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if content can scroll in the vertical dimension; otherwise, <ph id="ph2">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">`VirtualizingStackPanel.CleanUpVirtualizedItem`</ph> attached event.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Gets a value that contains the vertical size of the extent.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> that represents the vertical size of the extent.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>The default is 0.0.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>Gets a value that contains the horizontal size of the extent.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> that represents the horizontal size of the extent.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The default is 0.0.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>Returns the position of the specified item, relative to the <ph id="ph1">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The element whose position to find.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>The position of the specified item, relative to the <ph id="ph1">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Gets a value that indicates if this <ph id="ph1">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel"&gt;&lt;/xref&gt;</ph> has a vertical or horizontal orientation.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>This property always returns <ph id="ph1">`true`</ph> because a <ph id="ph2">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> must have either a vertical or horizontal orientation.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>This property always returns <ph id="ph1">`true`</ph>.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>Gets a value that contains the horizontal offset of the scrolled content.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source><ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> that represents the horizontal offset of the scrolled content.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>The default is 0.0.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">`VirtualizingPanel.IsVirtualizing`</ph> attached property.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Scrolls content downward by one logical unit.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override this method in a derived class to change how the stack panel scrolls content downward.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can scroll content down by two units instead of one.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you require physical scrolling instead of logical scrolling, wrap the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> and set its <ph id="ph3">&lt;xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A&gt;</ph> property to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> provides scrolling, and virtualization is disabled.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>Scrolls content to the left by one logical unit.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override this method in a derived class to change how the stack panel scrolls content downward.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can scroll content down by two units instead of one.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you require physical scrolling instead of logical scrolling, wrap the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> and set its <ph id="ph3">&lt;xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A&gt;</ph> property to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> provides scrolling, and virtualization is disabled.</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Scrolls content to the right by one logical unit.</source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override this method in a derived class to change how the stack panel scrolls content to the right.</source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can scroll content right by two units instead of one.</source>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you require physical scrolling instead of logical scrolling, wrap the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> and set its <ph id="ph3">&lt;xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A&gt;</ph> property to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> provides scrolling, and virtualization is disabled.</source>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>Scrolls content upward by one logical unit.</source>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override this method in a derived class to change how the stack panel scrolls content upward.</source>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT">
          <source>For example, you can scroll up two units instead of one.</source>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you require physical scrolling instead of logical scrolling, wrap the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> and set its <ph id="ph3">&lt;xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A&gt;</ph> property to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> provides scrolling, and virtualization is disabled.</source>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>Gets a value that represents the <ph id="ph1">&lt;xref href="System.Windows.Controls.Orientation"&gt;&lt;/xref&gt;</ph> of the <ph id="ph2">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>An <ph id="ph1">&lt;xref href="System.Windows.Controls.Orientation"&gt;&lt;/xref&gt;</ph> value.</source>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>Scrolls to the specified coordinates and makes that portion of a <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> visible.</source>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph> that becomes visible.</source>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Rect"&gt;&lt;/xref&gt;</ph> that represents the coordinate space within a <ph id="ph2">&lt;xref href="System.Windows.Media.Visual"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Windows.Rect"&gt;&lt;/xref&gt;</ph> that is visible.</source>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>Measures the child elements of a <ph id="ph1">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel"&gt;&lt;/xref&gt;</ph> in anticipation of arranging them during the <ph id="ph2">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel.ArrangeOverride(System.Windows.Size)"&gt;&lt;/xref&gt;</ph> pass.</source>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT">
          <source>When scrolling, <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> does not grow in layout size, but effectively adds its descendants on a z-plane, which is normally clipped by a parent element (typically a <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollContentPresenter&gt;</ph>) to the size of the stack.</source>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>An upper limit <ph id="ph1">&lt;xref href="System.Windows.Size"&gt;&lt;/xref&gt;</ph> that should not be exceeded.</source>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Size"&gt;&lt;/xref&gt;</ph> that represents the desired size of the element.</source>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>Scrolls content logically downward in response to a downward click of the mouse wheel button.</source>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.MouseWheelDown%2A&gt;</ph> in a derived class to change how the stack panel responds to the mouse wheel down action.</source>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you require physical scrolling instead of logical scrolling, wrap the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> and set its <ph id="ph3">&lt;xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A&gt;</ph> property to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> provides scrolling, and virtualization is disabled.</source>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>Scrolls content logically to the left in response to a left click of the mouse wheel button.</source>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.MouseWheelLeft%2A&gt;</ph> in a derived class to change how the stack panel responds to the mouse wheel left action.</source>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you require physical scrolling instead of logical scrolling, wrap the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> and set its <ph id="ph3">&lt;xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A&gt;</ph> property to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> provides scrolling, and virtualization is disabled.</source>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>Scrolls content logically to the right in response to a right click of the mouse wheel button.</source>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.MouseWheelRight%2A&gt;</ph> in a derived class to change how the stack panel responds to the mouse wheel right action.</source>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you require physical scrolling instead of logical scrolling, wrap the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> and set its <ph id="ph3">&lt;xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A&gt;</ph> property to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> provides scrolling, and virtualization is disabled.</source>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Scrolls content logically upward in response to an upward click of the mouse wheel button.</source>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.MouseWheelUp%2A&gt;</ph> in a derived class to change how the stack panel responds to the mouse wheel up action.</source>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you require physical scrolling instead of logical scrolling, wrap the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> and set its <ph id="ph3">&lt;xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A&gt;</ph> property to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> provides scrolling, and virtualization is disabled.</source>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>Called when an item that is hosted by the <ph id="ph1">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel"&gt;&lt;/xref&gt;</ph> is re-virtualized.</source>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT">
          <source>The standard layout system creates item containers and computes layout for each item associated with a list control.</source>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT">
          <source>The word "virtualize" refers to a technique by which a subset of <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> elements are generated from a larger number of data items based on which items are visible on-screen.</source>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generating many <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> elements when only a few elements might be on the screen can adversely affect the performance of your application.</source>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> calculates the number of visible items and works with the <ph id="ph2">&lt;xref:System.Windows.Controls.ItemContainerGenerator&gt;</ph> from an <ph id="ph3">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> (such as <ph id="ph4">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Controls.ListView&gt;</ph>) to create <ph id="ph6">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> elements only for visible items.</source>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Data about the event.</source>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>Called when the collection of child elements is cleared by the base <ph id="ph1">&lt;xref href="System.Windows.Controls.Panel"&gt;&lt;/xref&gt;</ph> class.</source>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>Called when the <ph id="ph1">&lt;xref href="System.Windows.Controls.ItemsControl.Items"&gt;&lt;/xref&gt;</ph> collection that is associated with the <ph id="ph2">&lt;xref href="System.Windows.Controls.ItemsControl"&gt;&lt;/xref&gt;</ph> for this <ph id="ph3">&lt;xref href="System.Windows.Controls.Panel"&gt;&lt;/xref&gt;</ph> changes.</source>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Object"&gt;&lt;/xref&gt;</ph> that raised the event.</source>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Provides data for the <ph id="ph1">&lt;xref href="System.Windows.Controls.ItemContainerGenerator.ItemsChanged"&gt;&lt;/xref&gt;</ph> event.</source>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>Called when the offset of the viewport changes as a user scrolls through content.</source>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method, in a derived class, to detect and respond to changes in the viewport location.</source>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>The old offset of the viewport.</source>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>The new offset of the viewport</source>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>Called when the size of the viewport changes.</source>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT">
          <source>Use this method, in a derived class, to detect and respond to changes in the viewport size.</source>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>The old size of the viewport.</source>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>The new size of the viewport.</source>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that describes the horizontal or vertical orientation of stacked content.</source>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT">
          <source>Dependency Property Information</source>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT">
          <source>Identifier field</source>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT">
          <source>Metadata properties set to <ph id="ph1">`true`</ph></source>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Controls.Orientation"&gt;&lt;/xref&gt;</ph> of child content.</source>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>The default is <ph id="ph1">&lt;xref href="System.Windows.Controls.Orientation.Vertical"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel.Orientation"&gt;&lt;/xref&gt;</ph> dependency property.</source>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Scrolls content downward by one page.</source>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.PageDown%2A&gt;</ph> in a derived class to change how the stack panel responds to the page down action.</source>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you require physical scrolling instead of logical scrolling, wrap the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> and set its <ph id="ph3">&lt;xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A&gt;</ph> property to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> provides scrolling, and virtualization is disabled.</source>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Scrolls content to the left by one page.</source>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.PageLeft%2A&gt;</ph> in a derived class to change how the stack panel responds to the page left action.</source>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you require physical scrolling instead of logical scrolling, wrap the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> and set its <ph id="ph3">&lt;xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A&gt;</ph> property to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> provides scrolling, and virtualization is disabled.</source>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Scrolls content to the right by one page.</source>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.PageRight%2A&gt;</ph> in a derived class to change how the stack panel responds to the page right action.</source>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you require physical scrolling instead of logical scrolling, wrap the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> and set its <ph id="ph3">&lt;xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A&gt;</ph> property to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> provides scrolling, and virtualization is disabled.</source>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>Scrolls content upward by one page.</source>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can override <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.PageUp%2A&gt;</ph> in a derived class to change how the stack panel responds to the page up action.</source>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you require physical scrolling instead of logical scrolling, wrap the <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> in a <ph id="ph2">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> and set its <ph id="ph3">&lt;xref:System.Windows.Controls.ScrollViewer.CanContentScroll%2A&gt;</ph> property to <ph id="ph4">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT">
          <source>In this case, the <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> provides scrolling, and virtualization is disabled.</source>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>Removes an event handler for the <ph id="ph1">`VirtualizingStackPanel.CleanUpVirtualizedItem`</ph> attached event.</source>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT">
          <source>The standard layout system creates item containers and computes layout for each item associated with a list control.</source>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT">
          <source>The word "virtualize" refers to a technique by which a subset of <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> elements are generated from a larger number of data items based on which items are visible on-screen.</source>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT">
          <source>Generating many <ph id="ph1">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> elements when only a few elements might be on the screen can adversely affect the performance of your application.</source>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> calculates the number of visible items and works with the <ph id="ph2">&lt;xref:System.Windows.Controls.ItemContainerGenerator&gt;</ph> from an <ph id="ph3">&lt;xref:System.Windows.Controls.ItemsControl&gt;</ph> (such as <ph id="ph4">&lt;xref:System.Windows.Controls.ListBox&gt;</ph> or <ph id="ph5">&lt;xref:System.Windows.Controls.ListView&gt;</ph>) to create <ph id="ph6">[!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]</ph> elements only for visible items.</source>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.DependencyObject"&gt;&lt;/xref&gt;</ph> from which the handler is being removed.</source>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Specifies the event handler that is to be removed.</source>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>Gets or sets a value that identifies the container that controls scrolling behavior in this <ph id="ph1">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Controls.ScrollViewer&gt;</ph> control is the <ph id="ph2">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.ScrollOwner%2A&gt;</ph>, physical scrolling is enabled.</source>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT">
          <source>If a <ph id="ph1">&lt;xref:System.Windows.Controls.VirtualizingStackPanel&gt;</ph> is the <ph id="ph2">&lt;xref:System.Windows.Controls.VirtualizingStackPanel.ScrollOwner%2A&gt;</ph>, scrolling is logical by child element.</source>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Windows.Controls.ScrollViewer"&gt;&lt;/xref&gt;</ph> that owns scrolling for this <ph id="ph2">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>Sets the value of the <ph id="ph1">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel.HorizontalOffset"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel.HorizontalOffset"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>Sets the value of the <ph id="ph1">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel.VerticalOffset"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">&lt;xref href="System.Windows.Controls.VirtualizingStackPanel.VerticalOffset"&gt;&lt;/xref&gt;</ph> property.</source>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>Returns a value that indicates whether a changed item in an <ph id="ph1">&lt;xref href="System.Windows.Controls.ItemsControl"&gt;&lt;/xref&gt;</ph> affects the layout for this panel.</source>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the changed item is a direct child of this <ph id="ph2">&lt;xref href="System.Windows.Controls.VirtualizingPanel"&gt;&lt;/xref&gt;</ph>; <ph id="ph3">`false`</ph> if the changed item is an indirect descendant of the <ph id="ph4">&lt;xref href="System.Windows.Controls.VirtualizingPanel"&gt;&lt;/xref&gt;</ph>.</source>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>Contains data regarding the changed item.</source>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`true`</ph> if the changed item in an <ph id="ph2">&lt;xref href="System.Windows.Controls.ItemsControl"&gt;&lt;/xref&gt;</ph> affects the layout for this panel; otherwise, <ph id="ph3">`false`</ph>.</source>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Gets a value that contains the vertical offset of the scrolled content.</source>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> that represents the vertical offset of the scrolled content.</source>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>The default is 0.0.</source>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Gets a value that contains the vertical size of the viewport of the content.</source>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> that represents the vertical size of the viewport of the content.</source>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>The default is 0.0.</source>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Gets a value that contains the horizontal size of the viewport of the content.</source>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">&lt;xref href="System.Double"&gt;&lt;/xref&gt;</ph> that represents the vertical size of the viewport of the content.</source>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>The default is 0.0.</source>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Identifies the <ph id="ph1">`VirtualizingStackPanel.VirtualizationMode`</ph> attached property.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>