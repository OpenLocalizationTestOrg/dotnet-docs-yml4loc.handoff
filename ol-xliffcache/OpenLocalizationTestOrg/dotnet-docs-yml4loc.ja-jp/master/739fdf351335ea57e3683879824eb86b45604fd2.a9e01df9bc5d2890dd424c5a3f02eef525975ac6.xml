{"nodes":[{"content":"Extend the <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> class to create an exception handler for unhandled exceptions that occur within the Windows Communication Foundation (WCF) runtime.","nodes":[{"pos":[0,211],"content":"Extend the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"&gt;&lt;/xref&gt;</ph> class to create an exception handler for unhandled exceptions that occur within the Windows Communication Foundation (WCF) runtime.","source":"Extend the <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> class to create an exception handler for unhandled exceptions that occur within the Windows Communication Foundation (WCF) runtime."}],"pos":[808,1020],"yaml":true},{"content":"Extend the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and override the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method to determine whether an exception should terminate the application. Then create a new instance of your custom <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and assign it to the static <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> or <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property prior to creating [!INCLUDE[indigo2](~/includes/indigo2-md.md)] clients or services.","nodes":[{"pos":[0,642],"content":"Extend the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and override the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method to determine whether an exception should terminate the application. Then create a new instance of your custom <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and assign it to the static <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> or <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property prior to creating [!INCLUDE[indigo2](~/includes/indigo2-md.md)] clients or services.","nodes":[{"content":"Extend the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> class and override the <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> method to determine whether an exception should terminate the application.","pos":[0,237],"source":"Extend the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and override the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method to determine whether an exception should terminate the application."},{"content":"Then create a new instance of your custom <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> class and assign it to the static <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A&gt;</ph> property prior to creating <ph id=\"ph4\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> clients or services.","pos":[238,642],"source":" Then create a new instance of your custom <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and assign it to the static <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> or <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property prior to creating [!INCLUDE[indigo2](~/includes/indigo2-md.md)] clients or services."}]}],"pos":[1031,1674],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> class.","nodes":[{"pos":[0,109],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> class."}],"pos":[4018,4128],"yaml":true},{"content":"Gets an instance of <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> that handles all exceptions.","nodes":[{"pos":[0,117],"content":"Gets an instance of <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"&gt;&lt;/xref&gt;</ph> that handles all exceptions.","source":"Gets an instance of <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> that handles all exceptions."}],"pos":[5288,5406],"yaml":true},{"content":"An <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> object that returns `true` for all exceptions.","nodes":[{"pos":[0,118],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"&gt;&lt;/xref&gt;</ph> object that returns <ph id=\"ph2\">`true`</ph> for all exceptions.","source":"An <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> object that returns `true` for all exceptions."}],"pos":[5604,5723],"yaml":true},{"content":"Gets or sets the current <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> implementation for the application domain.","nodes":[{"pos":[0,136],"content":"Gets or sets the current <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"&gt;&lt;/xref&gt;</ph> implementation for the application domain.","source":"Gets or sets the current <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> implementation for the application domain."}],"pos":[6949,7086],"yaml":true},{"content":"By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> property is `null`, and unhandled exceptions on asynchronous [!INCLUDE[indigo2](~/includes/indigo2-md.md)] threads terminate the application.  Set this property to an <xref:System.ServiceModel.Dispatcher.ExceptionHandler> object to receive and react to these exceptions.  \n  \n If an unhandled exception occurs on an asynchronous [!INCLUDE[indigo2](~/includes/indigo2-md.md)] thread and reaches this handler, the state of the application domain may be compromised.  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> should not return `true` for these exceptions.","nodes":[{"pos":[0,379],"content":"By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> property is `null`, and unhandled exceptions on asynchronous [!INCLUDE[indigo2](~/includes/indigo2-md.md)] threads terminate the application.  Set this property to an <xref:System.ServiceModel.Dispatcher.ExceptionHandler> object to receive and react to these exceptions.","nodes":[{"content":"By default, the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A&gt;</ph> property is <ph id=\"ph2\">`null`</ph>, and unhandled exceptions on asynchronous <ph id=\"ph3\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> threads terminate the application.","pos":[0,250],"source":"By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> property is `null`, and unhandled exceptions on asynchronous [!INCLUDE[indigo2](~/includes/indigo2-md.md)] threads terminate the application."},{"content":"Set this property to an <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> object to receive and react to these exceptions.","pos":[252,379],"source":"  Set this property to an <xref:System.ServiceModel.Dispatcher.ExceptionHandler> object to receive and react to these exceptions."}]},{"pos":[386,694],"content":"If an unhandled exception occurs on an asynchronous [!INCLUDE[indigo2](~/includes/indigo2-md.md)] thread and reaches this handler, the state of the application domain may be compromised.  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> should not return `true` for these exceptions.","nodes":[{"content":"If an unhandled exception occurs on an asynchronous <ph id=\"ph1\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> thread and reaches this handler, the state of the application domain may be compromised.","pos":[0,186],"source":"If an unhandled exception occurs on an asynchronous [!INCLUDE[indigo2](~/includes/indigo2-md.md)] thread and reaches this handler, the state of the application domain may be compromised."},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> should not return <ph id=\"ph2\">`true`</ph> for these exceptions.","pos":[188,308],"source":"  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> should not return `true` for these exceptions."}]}],"pos":[7097,7796],"yaml":true,"extradata":"MT"},{"content":"Assign a custom <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> object that receives unhandled exceptions that occur on asynchronous [!INCLUDE[indigo1](~/includes/indigo1-md.md)] threads.","nodes":[{"pos":[0,208],"content":"Assign a custom <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"&gt;&lt;/xref&gt;</ph> object that receives unhandled exceptions that occur on asynchronous <ph id=\"ph2\">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> threads.","source":"Assign a custom <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> object that receives unhandled exceptions that occur on asynchronous [!INCLUDE[indigo1](~/includes/indigo1-md.md)] threads."}],"pos":[8269,8478],"yaml":true},{"content":"When overridden in a derived class, returns `true` if the exception has been handled, or `false` if the exception should be rethrown and the application terminated.","nodes":[{"pos":[0,164],"content":"When overridden in a derived class, returns <ph id=\"ph1\">`true`</ph> if the exception has been handled, or <ph id=\"ph2\">`false`</ph> if the exception should be rethrown and the application terminated.","source":"When overridden in a derived class, returns `true` if the exception has been handled, or `false` if the exception should be rethrown and the application terminated."}],"pos":[9838,10003],"yaml":true},{"content":"The <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> property returns `true` if the exception has been handled. If it returns `false` or throws a different exception, the original exception is rethrown.","nodes":[{"pos":[0,227],"content":"The <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> property returns `true` if the exception has been handled. If it returns `false` or throws a different exception, the original exception is rethrown.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> property returns <ph id=\"ph2\">`true`</ph> if the exception has been handled.","pos":[0,136],"source":"The <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> property returns `true` if the exception has been handled."},{"content":"If it returns <ph id=\"ph1\">`false`</ph> or throws a different exception, the original exception is rethrown.","pos":[137,227],"source":" If it returns `false` or throws a different exception, the original exception is rethrown."}]}],"pos":[10014,10242],"yaml":true,"extradata":"MT"},{"content":"The exception the occurred within the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] runtime and which may terminate the application.","nodes":[{"pos":[0,132],"content":"The exception the occurred within the <ph id=\"ph1\">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> runtime and which may terminate the application.","source":"The exception the occurred within the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] runtime and which may terminate the application."}],"pos":[10852,10985],"yaml":true},{"content":"`true` if the exception has been handled; otherwise, `false`.","nodes":[{"pos":[0,61],"content":"<ph id=\"ph1\">`true`</ph> if the exception has been handled; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the exception has been handled; otherwise, `false`."}],"pos":[11043,11107],"yaml":true},{"content":"Gets or sets the current transport <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> implementation for the application domain.","nodes":[{"pos":[0,146],"content":"Gets or sets the current transport <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"&gt;&lt;/xref&gt;</ph> implementation for the application domain.","source":"Gets or sets the current transport <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> implementation for the application domain."}],"pos":[12282,12429],"yaml":true},{"content":"By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property is set to the value of <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, causing unhandled exceptions within [!INCLUDE[indigo2](~/includes/indigo2-md.md)] transports to be ignored.  Set this property to an instance of <xref:System.ServiceModel.Dispatcher.ExceptionHandler> to receive and react to these exceptions.  \n  \n If an unhandled exception occurs within a global [!INCLUDE[indigo2](~/includes/indigo2-md.md)] transport and reaches this handler, there is a possibility that the state of the application domain is compromised. <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> can return `false` for these exceptions to cause the application to be terminated.","nodes":[{"pos":[0,445],"content":"By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property is set to the value of <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, causing unhandled exceptions within [!INCLUDE[indigo2](~/includes/indigo2-md.md)] transports to be ignored.  Set this property to an instance of <xref:System.ServiceModel.Dispatcher.ExceptionHandler> to receive and react to these exceptions.","nodes":[{"content":"By default, the <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A&gt;</ph> property is set to the value of <ph id=\"ph2\">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A&gt;</ph>, causing unhandled exceptions within <ph id=\"ph3\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> transports to be ignored.","pos":[0,311],"source":"By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property is set to the value of <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, causing unhandled exceptions within [!INCLUDE[indigo2](~/includes/indigo2-md.md)] transports to be ignored."},{"content":"Set this property to an instance of <ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler&gt;</ph> to receive and react to these exceptions.","pos":[313,445],"source":"  Set this property to an instance of <xref:System.ServiceModel.Dispatcher.ExceptionHandler> to receive and react to these exceptions."}]},{"pos":[452,819],"content":"If an unhandled exception occurs within a global [!INCLUDE[indigo2](~/includes/indigo2-md.md)] transport and reaches this handler, there is a possibility that the state of the application domain is compromised. <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> can return `false` for these exceptions to cause the application to be terminated.","nodes":[{"content":"If an unhandled exception occurs within a global <ph id=\"ph1\">[!INCLUDE[indigo2](~/includes/indigo2-md.md)]</ph> transport and reaches this handler, there is a possibility that the state of the application domain is compromised.","pos":[0,210],"source":"If an unhandled exception occurs within a global [!INCLUDE[indigo2](~/includes/indigo2-md.md)] transport and reaches this handler, there is a possibility that the state of the application domain is compromised."},{"content":"<ph id=\"ph1\">&lt;xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A&gt;</ph> can return <ph id=\"ph2\">`false`</ph> for these exceptions to cause the application to be terminated.","pos":[211,367],"source":" <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> can return `false` for these exceptions to cause the application to be terminated."}]}],"pos":[12440,13264],"yaml":true,"extradata":"MT"},{"content":"A custom <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> object that receives unhandled exceptions that occur within the global [!INCLUDE[indigo1](~/includes/indigo1-md.md)] transports.","nodes":[{"pos":[0,206],"content":"A custom <ph id=\"ph1\">&lt;xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"&gt;&lt;/xref&gt;</ph> object that receives unhandled exceptions that occur within the global <ph id=\"ph2\">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> transports.","source":"A custom <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> object that receives unhandled exceptions that occur within the global [!INCLUDE[indigo1](~/includes/indigo1-md.md)] transports."}],"pos":[13480,13687],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler\n  commentId: T:System.ServiceModel.Dispatcher.ExceptionHandler\n  id: ExceptionHandler\n  children:\n  - System.ServiceModel.Dispatcher.ExceptionHandler.#ctor\n  - System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle\n  - System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler\n  - System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)\n  - System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler\n  langs:\n  - csharp\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler\n  fullName: System.ServiceModel.Dispatcher.ExceptionHandler\n  type: Class\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Extend the <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> class to create an exception handler for unhandled exceptions that occur within the Windows Communication Foundation (WCF) runtime.\n  remarks: Extend the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and override the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method to determine whether an exception should terminate the application. Then create a new instance of your custom <xref:System.ServiceModel.Dispatcher.ExceptionHandler> class and assign it to the static <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> or <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property prior to creating [!INCLUDE[indigo2](~/includes/indigo2-md.md)] clients or services.\n  example:\n  - \"The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.  \\n  \\n [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]\\n [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  \\n  \\n The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the [!INCLUDE[indigo2](~/includes/indigo2-md.md)] runtime.  \\n  \\n [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]\\n [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]\"\n  syntax:\n    content: public abstract class ExceptionHandler\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor\n  commentId: M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor\n  id: '#ctor'\n  parent: System.ServiceModel.Dispatcher.ExceptionHandler\n  langs:\n  - csharp\n  name: ExceptionHandler()\n  nameWithType: ExceptionHandler.ExceptionHandler()\n  fullName: ExceptionHandler.ExceptionHandler()\n  type: Constructor\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Initializes a new instance of the <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> class.\n  syntax:\n    content: protected ExceptionHandler ();\n    parameters: []\n  overload: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle\n  commentId: P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle\n  id: AlwaysHandle\n  parent: System.ServiceModel.Dispatcher.ExceptionHandler\n  langs:\n  - csharp\n  name: AlwaysHandle\n  nameWithType: ExceptionHandler.AlwaysHandle\n  fullName: ExceptionHandler.AlwaysHandle\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Gets an instance of <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> that handles all exceptions.\n  syntax:\n    content: public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }\n    return:\n      type: System.ServiceModel.Dispatcher.ExceptionHandler\n      description: An <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> object that returns `true` for all exceptions.\n  overload: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler\n  commentId: P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler\n  id: AsynchronousThreadExceptionHandler\n  parent: System.ServiceModel.Dispatcher.ExceptionHandler\n  langs:\n  - csharp\n  name: AsynchronousThreadExceptionHandler\n  nameWithType: ExceptionHandler.AsynchronousThreadExceptionHandler\n  fullName: ExceptionHandler.AsynchronousThreadExceptionHandler\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Gets or sets the current <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> implementation for the application domain.\n  remarks: \"By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A> property is `null`, and unhandled exceptions on asynchronous [!INCLUDE[indigo2](~/includes/indigo2-md.md)] threads terminate the application.  Set this property to an <xref:System.ServiceModel.Dispatcher.ExceptionHandler> object to receive and react to these exceptions.  \\n  \\n If an unhandled exception occurs on an asynchronous [!INCLUDE[indigo2](~/includes/indigo2-md.md)] thread and reaches this handler, the state of the application domain may be compromised.  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> should not return `true` for these exceptions.\"\n  syntax:\n    content: >-\n      [get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)]\n\n      [set: System.Security.SecuritySafeCritical]\n\n      public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }\n    return:\n      type: System.ServiceModel.Dispatcher.ExceptionHandler\n      description: Assign a custom <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> object that receives unhandled exceptions that occur on asynchronous [!INCLUDE[indigo1](~/includes/indigo1-md.md)] threads.\n  overload: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler*\n  exceptions: []\n  attributes:\n  - type: 'get: System.Runtime.ConstrainedExecution.ReliabilityContract'\n  - type: 'set: System.Security.SecuritySafeCritical'\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)\n  commentId: M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)\n  id: HandleException(System.Exception)\n  parent: System.ServiceModel.Dispatcher.ExceptionHandler\n  langs:\n  - csharp\n  name: HandleException(Exception)\n  nameWithType: ExceptionHandler.HandleException(Exception)\n  fullName: ExceptionHandler.HandleException(Exception)\n  type: Method\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: When overridden in a derived class, returns `true` if the exception has been handled, or `false` if the exception should be rethrown and the application terminated.\n  remarks: The <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> property returns `true` if the exception has been handled. If it returns `false` or throws a different exception, the original exception is rethrown.\n  example:\n  - \"The following code example shows an implementation of the <xref:System.ServiceModel.Dispatcher.ExceptionHandler> abstract class that overrides the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> method.  \\n  \\n  \\n  \\n The following code example shows how to enable the custom `MyExceptionHandler` for unhandled exceptions that occur within the [!INCLUDE[indigo2](~/includes/indigo2-md.md)] runtime.\"\n  syntax:\n    content: public abstract bool HandleException (Exception exception);\n    parameters:\n    - id: exception\n      type: System.Exception\n      description: The exception the occurred within the [!INCLUDE[indigo1](~/includes/indigo1-md.md)] runtime and which may terminate the application.\n    return:\n      type: System.Boolean\n      description: '`true` if the exception has been handled; otherwise, `false`.'\n  overload: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler\n  commentId: P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler\n  id: TransportExceptionHandler\n  parent: System.ServiceModel.Dispatcher.ExceptionHandler\n  langs:\n  - csharp\n  name: TransportExceptionHandler\n  nameWithType: ExceptionHandler.TransportExceptionHandler\n  fullName: ExceptionHandler.TransportExceptionHandler\n  type: Property\n  assemblies:\n  - System.ServiceModel\n  namespace: System.ServiceModel.Dispatcher\n  summary: Gets or sets the current transport <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> implementation for the application domain.\n  remarks: \"By default, the <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A> property is set to the value of <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A>, causing unhandled exceptions within [!INCLUDE[indigo2](~/includes/indigo2-md.md)] transports to be ignored.  Set this property to an instance of <xref:System.ServiceModel.Dispatcher.ExceptionHandler> to receive and react to these exceptions.  \\n  \\n If an unhandled exception occurs within a global [!INCLUDE[indigo2](~/includes/indigo2-md.md)] transport and reaches this handler, there is a possibility that the state of the application domain is compromised. <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A> can return `false` for these exceptions to cause the application to be terminated.\"\n  syntax:\n    content: public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }\n    return:\n      type: System.ServiceModel.Dispatcher.ExceptionHandler\n      description: A custom <xref href=\"System.ServiceModel.Dispatcher.ExceptionHandler\"></xref> object that receives unhandled exceptions that occur within the global [!INCLUDE[indigo1](~/includes/indigo1-md.md)] transports.\n  overload: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor\n  parent: System.ServiceModel.Dispatcher.ExceptionHandler\n  isExternal: false\n  name: ExceptionHandler()\n  nameWithType: ExceptionHandler.ExceptionHandler()\n  fullName: ExceptionHandler.ExceptionHandler()\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle\n  parent: System.ServiceModel.Dispatcher.ExceptionHandler\n  isExternal: false\n  name: AlwaysHandle\n  nameWithType: ExceptionHandler.AlwaysHandle\n  fullName: ExceptionHandler.AlwaysHandle\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler\n  parent: System.ServiceModel.Dispatcher\n  isExternal: false\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler\n  fullName: System.ServiceModel.Dispatcher.ExceptionHandler\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler\n  parent: System.ServiceModel.Dispatcher.ExceptionHandler\n  isExternal: false\n  name: AsynchronousThreadExceptionHandler\n  nameWithType: ExceptionHandler.AsynchronousThreadExceptionHandler\n  fullName: ExceptionHandler.AsynchronousThreadExceptionHandler\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)\n  parent: System.ServiceModel.Dispatcher.ExceptionHandler\n  isExternal: false\n  name: HandleException(Exception)\n  nameWithType: ExceptionHandler.HandleException(Exception)\n  fullName: ExceptionHandler.HandleException(Exception)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  nameWithType: Exception\n  fullName: System.Exception\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler\n  parent: System.ServiceModel.Dispatcher.ExceptionHandler\n  isExternal: false\n  name: TransportExceptionHandler\n  nameWithType: ExceptionHandler.TransportExceptionHandler\n  fullName: ExceptionHandler.TransportExceptionHandler\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler.#ctor*\n  parent: System.ServiceModel.Dispatcher.ExceptionHandler\n  isExternal: false\n  name: ExceptionHandler\n  nameWithType: ExceptionHandler.ExceptionHandler\n  fullName: ExceptionHandler.ExceptionHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle*\n  parent: System.ServiceModel.Dispatcher.ExceptionHandler\n  isExternal: false\n  name: AlwaysHandle\n  nameWithType: ExceptionHandler.AlwaysHandle\n  fullName: ExceptionHandler.AlwaysHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler*\n  parent: System.ServiceModel.Dispatcher.ExceptionHandler\n  isExternal: false\n  name: AsynchronousThreadExceptionHandler\n  nameWithType: ExceptionHandler.AsynchronousThreadExceptionHandler\n  fullName: ExceptionHandler.AsynchronousThreadExceptionHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler.HandleException*\n  parent: System.ServiceModel.Dispatcher.ExceptionHandler\n  isExternal: false\n  name: HandleException\n  nameWithType: ExceptionHandler.HandleException\n  fullName: ExceptionHandler.HandleException\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml\n- uid: System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler*\n  parent: System.ServiceModel.Dispatcher.ExceptionHandler\n  isExternal: false\n  name: TransportExceptionHandler\n  nameWithType: ExceptionHandler.TransportExceptionHandler\n  fullName: ExceptionHandler.TransportExceptionHandler\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.ServiceModel.Dispatcher/ExceptionHandler.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}