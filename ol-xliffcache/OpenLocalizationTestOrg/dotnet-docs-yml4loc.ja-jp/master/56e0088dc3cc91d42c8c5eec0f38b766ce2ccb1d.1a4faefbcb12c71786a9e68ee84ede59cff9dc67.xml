{"nodes":[{"content":"Represents an instance store.","nodes":[{"pos":[0,29],"content":"Represents an instance store.","nodes":[{"content":"Represents an instance store.","pos":[0,29]}]}],"pos":[3149,3179],"yaml":true},{"content":"A persistence provider provides access to an instance store through a concrete implementation of the <xref:System.Runtime.DurableInstancing.InstanceStore> class.  \n  \n Persistence providers may call InstanceHandle.Free on handles passed to TryCommand, even after the command has finished executing. But persistence providers must not hold strong references to InstanceHandle or InstanceOwner objects, as this can prevent InstanceStore from being garbage collected.  \n  \n> [!WARNING]\n>  Workflow definitions for persisted workflows cannot be changed. If a workflow definition is changed after it is persisted, the workflow runtime will crash when the workflow is reloaded.","nodes":[{"pos":[0,161],"content":"A persistence provider provides access to an instance store through a concrete implementation of the <xref:System.Runtime.DurableInstancing.InstanceStore> class.","nodes":[{"content":"A persistence provider provides access to an instance store through a concrete implementation of the <ph id=\"ph1\">&lt;xref:System.Runtime.DurableInstancing.InstanceStore&gt;</ph> class.","pos":[0,161],"source":"A persistence provider provides access to an instance store through a concrete implementation of the <xref:System.Runtime.DurableInstancing.InstanceStore> class."}]},{"pos":[168,464],"content":"Persistence providers may call InstanceHandle.Free on handles passed to TryCommand, even after the command has finished executing. But persistence providers must not hold strong references to InstanceHandle or InstanceOwner objects, as this can prevent InstanceStore from being garbage collected.","nodes":[{"content":"Persistence providers may call InstanceHandle.Free on handles passed to TryCommand, even after the command has finished executing. But persistence providers must not hold strong references to InstanceHandle or InstanceOwner objects, as this can prevent InstanceStore from being garbage collected.","pos":[0,296],"nodes":[{"content":"Persistence providers may call InstanceHandle.Free on handles passed to TryCommand, even after the command has finished executing.","pos":[0,130]},{"content":"But persistence providers must not hold strong references to InstanceHandle or InstanceOwner objects, as this can prevent InstanceStore from being garbage collected.","pos":[131,296]}]}]},{"pos":[472,671],"content":"[!WARNING]\n Workflow definitions for persisted workflows cannot be changed. If a workflow definition is changed after it is persisted, the workflow runtime will crash when the workflow is reloaded.","leadings":["","> "],"nodes":[{"content":" Workflow definitions for persisted workflows cannot be changed. If a workflow definition is changed after it is persisted, the workflow runtime will crash when the workflow is reloaded.","pos":[11,197],"nodes":[{"content":"Workflow definitions for persisted workflows cannot be changed.","pos":[1,64]},{"content":"If a workflow definition is changed after it is persisted, the workflow runtime will crash when the workflow is reloaded.","pos":[65,186]}]}]}],"pos":[3190,3869],"yaml":true,"extradata":"MT"},{"content":"Initializes an instance of the <xref href=\"System.Runtime.DurableInstancing.InstanceStore\"></xref> class.","nodes":[{"pos":[0,105],"content":"Initializes an instance of the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceStore\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes an instance of the <xref href=\"System.Runtime.DurableInstancing.InstanceStore\"></xref> class."}],"pos":[5356,5462],"yaml":true},{"content":"Asynchronously executes persistence commands such as <xref href=\"System.Activities.DurableInstancing.LoadWorkflowCommand\"></xref> and <xref href=\"System.Activities.DurableInstancing.SaveWorkflowCommand\"></xref>.","nodes":[{"pos":[0,211],"content":"Asynchronously executes persistence commands such as <ph id=\"ph1\">&lt;xref href=\"System.Activities.DurableInstancing.LoadWorkflowCommand\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Activities.DurableInstancing.SaveWorkflowCommand\"&gt;&lt;/xref&gt;</ph>.","source":"Asynchronously executes persistence commands such as <xref href=\"System.Activities.DurableInstancing.LoadWorkflowCommand\"></xref> and <xref href=\"System.Activities.DurableInstancing.SaveWorkflowCommand\"></xref>."}],"pos":[7332,7544],"yaml":true},{"content":"A host calls the <xref:System.Runtime.DurableInstancing.InstanceStore.BeginExecute%2A> method to execute a persistence command against an instance handle asynchronously. The host obtains the instance handle by invoking the <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> method. The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.  Only one command may be issued against an instance handle at a time.","nodes":[{"pos":[0,533],"content":"A host calls the <xref:System.Runtime.DurableInstancing.InstanceStore.BeginExecute%2A> method to execute a persistence command against an instance handle asynchronously. The host obtains the instance handle by invoking the <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> method. The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.  Only one command may be issued against an instance handle at a time.","nodes":[{"content":"A host calls the <xref:System.Runtime.DurableInstancing.InstanceStore.BeginExecute%2A> method to execute a persistence command against an instance handle asynchronously. The host obtains the instance handle by invoking the <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> method. The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.  Only one command may be issued against an instance handle at a time.","pos":[0,533],"nodes":[{"content":"A host calls the <ph id=\"ph1\">&lt;xref:System.Runtime.DurableInstancing.InstanceStore.BeginExecute%2A&gt;</ph> method to execute a persistence command against an instance handle asynchronously.","pos":[0,169],"source":"A host calls the <xref:System.Runtime.DurableInstancing.InstanceStore.BeginExecute%2A> method to execute a persistence command against an instance handle asynchronously."},{"content":"The host obtains the instance handle by invoking the <ph id=\"ph1\">&lt;xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A&gt;</ph> method.","pos":[170,308],"source":" The host obtains the instance handle by invoking the <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> method."},{"content":"The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.","pos":[309,463]},{"content":"Only one command may be issued against an instance handle at a time.","pos":[465,533]}]}]}],"pos":[7555,8089],"yaml":true,"extradata":"MT"},{"content":"An instance handle.","nodes":[{"pos":[0,19],"content":"An instance handle.","nodes":[{"content":"An instance handle.","pos":[0,19]}]}],"pos":[8440,8460],"yaml":true},{"content":"The command to be executed.","nodes":[{"pos":[0,27],"content":"The command to be executed.","nodes":[{"content":"The command to be executed.","pos":[0,27]}]}],"pos":[8569,8597],"yaml":true},{"content":"The timeout value for the command execution.","nodes":[{"pos":[0,44],"content":"The timeout value for the command execution.","nodes":[{"content":"The timeout value for the command execution.","pos":[0,44]}]}],"pos":[8662,8707],"yaml":true},{"content":"The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.","nodes":[{"pos":[0,110],"content":"The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.","nodes":[{"content":"The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.","pos":[0,110]}]}],"pos":[8778,8889],"yaml":true},{"content":"The state information.","nodes":[{"pos":[0,22],"content":"The state information.","nodes":[{"content":"The state information.","pos":[0,22]}]}],"pos":[8950,8973],"yaml":true},{"content":"The state of the asynchronous operation.","nodes":[{"pos":[0,40],"content":"The state of the asynchronous operation.","nodes":[{"content":"The state of the asynchronous operation.","pos":[0,40]}]}],"pos":[9036,9077],"yaml":true},{"content":"A persistence provider implements this method, which determines whether a particular persistence command can be executed. If the command can be executed, executes the command asynchronously.","nodes":[{"pos":[0,190],"content":"A persistence provider implements this method, which determines whether a particular persistence command can be executed. If the command can be executed, executes the command asynchronously.","nodes":[{"content":"A persistence provider implements this method, which determines whether a particular persistence command can be executed. If the command can be executed, executes the command asynchronously.","pos":[0,190],"nodes":[{"content":"A persistence provider implements this method, which determines whether a particular persistence command can be executed.","pos":[0,121]},{"content":"If the command can be executed, executes the command asynchronously.","pos":[122,190]}]}]}],"pos":[10974,11165],"yaml":true},{"content":"If the command can be executed, the persistence provider calls relevant methods on the InstancePersistenceContext to provide the results of the command.  \n  \n> [!WARNING]\n>  Even though this method is declared as `virtual` rather than `abstract`, there is no implementation. This method must be overridden in order to provide functionality.","nodes":[{"pos":[0,152],"content":"If the command can be executed, the persistence provider calls relevant methods on the InstancePersistenceContext to provide the results of the command.","nodes":[{"content":"If the command can be executed, the persistence provider calls relevant methods on the InstancePersistenceContext to provide the results of the command.","pos":[0,152]}]},{"pos":[160,340],"content":"[!WARNING]\n Even though this method is declared as `virtual` rather than `abstract`, there is no implementation. This method must be overridden in order to provide functionality.","leadings":["","> "],"nodes":[{"content":" Even though this method is declared as `virtual` rather than `abstract`, there is no implementation. This method must be overridden in order to provide functionality.","pos":[11,178],"nodes":[{"content":"Even though this method is declared as <ph id=\"ph1\">`virtual`</ph> rather than <ph id=\"ph2\">`abstract`</ph>, there is no implementation.","pos":[1,101],"source":" Even though this method is declared as `virtual` rather than `abstract`, there is no implementation."},{"content":"This method must be overridden in order to provide functionality.","pos":[102,167]}]}]}],"pos":[11176,11522],"yaml":true,"extradata":"MT"},{"content":"The instance context.","nodes":[{"pos":[0,21],"content":"The instance context.","nodes":[{"content":"The instance context.","pos":[0,21]}]}],"pos":[11913,11935],"yaml":true},{"content":"The persistence command to be executed.","nodes":[{"pos":[0,39],"content":"The persistence command to be executed.","nodes":[{"content":"The persistence command to be executed.","pos":[0,39]}]}],"pos":[12044,12084],"yaml":true},{"content":"The timeout value for the command execution.","nodes":[{"pos":[0,44],"content":"The timeout value for the command execution.","nodes":[{"content":"The timeout value for the command execution.","pos":[0,44]}]}],"pos":[12149,12194],"yaml":true},{"content":"The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.","nodes":[{"pos":[0,110],"content":"The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.","nodes":[{"content":"The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.","pos":[0,110]}]}],"pos":[12265,12376],"yaml":true},{"content":"The state information.","nodes":[{"pos":[0,22],"content":"The state information.","nodes":[{"content":"The state information.","pos":[0,22]}]}],"pos":[12437,12460],"yaml":true},{"content":"The state of the asynchronous operation.","nodes":[{"pos":[0,40],"content":"The state of the asynchronous operation.","nodes":[{"content":"The state of the asynchronous operation.","pos":[0,40]}]}],"pos":[12523,12564],"yaml":true},{"content":"Begins an asynchronous operation to listen for any events raised by the instance store for a specific instance handle.","nodes":[{"pos":[0,118],"content":"Begins an asynchronous operation to listen for any events raised by the instance store for a specific instance handle.","nodes":[{"content":"Begins an asynchronous operation to listen for any events raised by the instance store for a specific instance handle.","pos":[0,118]}]}],"pos":[14146,14265],"yaml":true},{"content":"An instance handle.","nodes":[{"pos":[0,19],"content":"An instance handle.","nodes":[{"content":"An instance handle.","pos":[0,19]}]}],"pos":[14553,14573],"yaml":true},{"content":"The period after which the operation times out.","nodes":[{"pos":[0,47],"content":"The period after which the operation times out.","nodes":[{"content":"The period after which the operation times out.","pos":[0,47]}]}],"pos":[14638,14686],"yaml":true},{"content":"The method to be called after the asynchronous operation is complete.","nodes":[{"pos":[0,69],"content":"The method to be called after the asynchronous operation is complete.","nodes":[{"content":"The method to be called after the asynchronous operation is complete.","pos":[0,69]}]}],"pos":[14757,14827],"yaml":true},{"content":"An object containing the state information associated with the asynchronous operation.","nodes":[{"pos":[0,86],"content":"An object containing the state information associated with the asynchronous operation.","nodes":[{"content":"An object containing the state information associated with the asynchronous operation.","pos":[0,86]}]}],"pos":[14888,14975],"yaml":true},{"content":"Returns an <xref href=\"System.IAsyncResult\"></xref> object..","nodes":[{"pos":[0,60],"content":"Returns an <ph id=\"ph1\">&lt;xref href=\"System.IAsyncResult\"&gt;&lt;/xref&gt;</ph> object..","source":"Returns an <xref href=\"System.IAsyncResult\"></xref> object.."}],"pos":[15038,15099],"yaml":true},{"content":"Creates an instance handle.","nodes":[{"pos":[0,27],"content":"Creates an instance handle.","nodes":[{"content":"Creates an instance handle.","pos":[0,27]}]}],"pos":[16255,16283],"yaml":true},{"content":"The instance handle.","nodes":[{"pos":[0,20],"content":"The instance handle.","nodes":[{"content":"The instance handle.","pos":[0,20]}]}],"pos":[16496,16517],"yaml":true},{"content":"Creates an instance handle.  If the DefaultInstanceOwner is set, the value is automatically bound as the new handle’s instance owner.  The instance identifier passed as a parameter is automatically bound as the new handle’s instance.","nodes":[{"pos":[0,233],"content":"Creates an instance handle.  If the DefaultInstanceOwner is set, the value is automatically bound as the new handle’s instance owner.  The instance identifier passed as a parameter is automatically bound as the new handle’s instance.","nodes":[{"content":"Creates an instance handle.  If the DefaultInstanceOwner is set, the value is automatically bound as the new handle’s instance owner.  The instance identifier passed as a parameter is automatically bound as the new handle’s instance.","pos":[0,233],"nodes":[{"content":"Creates an instance handle.","pos":[0,27]},{"content":"If the DefaultInstanceOwner is set, the value is automatically bound as the new handle’s instance owner.","pos":[29,133]},{"content":"The instance identifier passed as a parameter is automatically bound as the new handle’s instance.","pos":[135,233]}]}]}],"pos":[17726,17960],"yaml":true},{"content":"An instance identifier. Must not be Guid.Empty.","nodes":[{"pos":[0,47],"content":"An instance identifier. Must not be Guid.Empty.","nodes":[{"content":"An instance identifier. Must not be Guid.Empty.","pos":[0,47],"nodes":[{"content":"An instance identifier.","pos":[0,23]},{"content":"Must not be Guid.Empty.","pos":[24,47]}]}]}],"pos":[18158,18206],"yaml":true},{"content":"The instance handle.","nodes":[{"pos":[0,20],"content":"The instance handle.","nodes":[{"content":"The instance handle.","pos":[0,20]}]}],"pos":[18297,18318],"yaml":true},{"content":"Creates an instance handle. If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle’s instance owner.  (Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.)","nodes":[{"pos":[0,232],"content":"Creates an instance handle. If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle’s instance owner.  (Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.)","nodes":[{"content":"Creates an instance handle. If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle’s instance owner.  (Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.)","pos":[0,232],"nodes":[{"content":"Creates an instance handle.","pos":[0,27]},{"content":"If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle’s instance owner.","pos":[28,153]},{"content":"(Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.)","pos":[155,232]}]}]}],"pos":[19659,19892],"yaml":true},{"content":"The owner of an instance.","nodes":[{"pos":[0,25],"content":"The owner of an instance.","nodes":[{"content":"The owner of an instance.","pos":[0,25]}]}],"pos":[20157,20183],"yaml":true},{"content":"The instance handle. A null value indicates that the new handle should not be automatically bound to an instance owner.","nodes":[{"pos":[0,119],"content":"The instance handle. A null value indicates that the new handle should not be automatically bound to an instance owner.","nodes":[{"content":"The instance handle. A null value indicates that the new handle should not be automatically bound to an instance owner.","pos":[0,119],"nodes":[{"content":"The instance handle.","pos":[0,20]},{"content":"A null value indicates that the new handle should not be automatically bound to an instance owner.","pos":[21,119]}]}]}],"pos":[20274,20394],"yaml":true},{"content":"Creates an instance handle. If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle’s instance owner.  (Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.) The instance identifier passed as a parameter is automatically bound as the new handle’s instance.","nodes":[{"pos":[0,331],"content":"Creates an instance handle. If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle’s instance owner.  (Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.) The instance identifier passed as a parameter is automatically bound as the new handle’s instance.","nodes":[{"content":"Creates an instance handle. If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle’s instance owner.  (Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.) The instance identifier passed as a parameter is automatically bound as the new handle’s instance.","pos":[0,331],"nodes":[{"content":"Creates an instance handle.","pos":[0,27]},{"content":"If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle’s instance owner.","pos":[28,153]},{"content":"(Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.) The instance identifier passed as a parameter is automatically bound as the new handle’s instance.","pos":[155,331]}]}]}],"pos":[21789,22121],"yaml":true},{"content":"An InstanceOwner object  that represents the owner of an instance. Pass null as the value for this parameter to indicate that the new handle should not be automatically bound to an instance owner.","nodes":[{"pos":[0,196],"content":"An InstanceOwner object  that represents the owner of an instance. Pass null as the value for this parameter to indicate that the new handle should not be automatically bound to an instance owner.","nodes":[{"content":"An InstanceOwner object  that represents the owner of an instance. Pass null as the value for this parameter to indicate that the new handle should not be automatically bound to an instance owner.","pos":[0,196],"nodes":[{"content":"An InstanceOwner object  that represents the owner of an instance.","pos":[0,66]},{"content":"Pass null as the value for this parameter to indicate that the new handle should not be automatically bound to an instance owner.","pos":[67,196]}]}]}],"pos":[22403,22600],"yaml":true},{"content":"An instance identifier. Must not be Guid.Empty.","nodes":[{"pos":[0,47],"content":"An instance identifier. Must not be Guid.Empty.","nodes":[{"content":"An instance identifier. Must not be Guid.Empty.","pos":[0,47],"nodes":[{"content":"An instance identifier.","pos":[0,23]},{"content":"Must not be Guid.Empty.","pos":[24,47]}]}]}],"pos":[22664,22712],"yaml":true},{"content":"The instance handle.","nodes":[{"pos":[0,20],"content":"The instance handle.","nodes":[{"content":"The instance handle.","pos":[0,20]}]}],"pos":[22803,22824],"yaml":true},{"content":"Gets or sets the default instance owner.","nodes":[{"pos":[0,40],"content":"Gets or sets the default instance owner.","nodes":[{"content":"Gets or sets the default instance owner.","pos":[0,40]}]}],"pos":[23978,24019],"yaml":true},{"content":"Some hosts infer the instance owner to use by reading this property. WorkflowApplication can use this property. WorkflowServiceHost does not use this property.  \n  \n The DefaultInstanceOwner propery must be set to null when it is no longer necessary. InstanceStore objects might not be garbage collected if DefaultInstanceOwner is not null.  \n  \n> [!WARNING]\n>  Even though this method is declared as `virtual` rather than `abstract`, there is no implementation. This method must be overridden in order to provide functionality.","nodes":[{"pos":[0,159],"content":"Some hosts infer the instance owner to use by reading this property. WorkflowApplication can use this property. WorkflowServiceHost does not use this property.","nodes":[{"content":"Some hosts infer the instance owner to use by reading this property. WorkflowApplication can use this property. WorkflowServiceHost does not use this property.","pos":[0,159],"nodes":[{"content":"Some hosts infer the instance owner to use by reading this property.","pos":[0,68]},{"content":"WorkflowApplication can use this property.","pos":[69,111]},{"content":"WorkflowServiceHost does not use this property.","pos":[112,159]}]}]},{"pos":[166,340],"content":"The DefaultInstanceOwner propery must be set to null when it is no longer necessary. InstanceStore objects might not be garbage collected if DefaultInstanceOwner is not null.","nodes":[{"content":"The DefaultInstanceOwner propery must be set to null when it is no longer necessary. InstanceStore objects might not be garbage collected if DefaultInstanceOwner is not null.","pos":[0,174],"nodes":[{"content":"The DefaultInstanceOwner propery must be set to null when it is no longer necessary.","pos":[0,84]},{"content":"InstanceStore objects might not be garbage collected if DefaultInstanceOwner is not null.","pos":[85,174]}]}]},{"pos":[348,528],"content":"[!WARNING]\n Even though this method is declared as `virtual` rather than `abstract`, there is no implementation. This method must be overridden in order to provide functionality.","leadings":["","> "],"nodes":[{"content":" Even though this method is declared as `virtual` rather than `abstract`, there is no implementation. This method must be overridden in order to provide functionality.","pos":[11,178],"nodes":[{"content":"Even though this method is declared as <ph id=\"ph1\">`virtual`</ph> rather than <ph id=\"ph2\">`abstract`</ph>, there is no implementation.","pos":[1,101],"source":" Even though this method is declared as `virtual` rather than `abstract`, there is no implementation."},{"content":"This method must be overridden in order to provide functionality.","pos":[102,167]}]}]}],"pos":[24030,24566],"yaml":true,"extradata":"MT"},{"content":"The default instance owner.","nodes":[{"pos":[0,27],"content":"The default instance owner.","nodes":[{"content":"The default instance owner.","pos":[0,27]}]}],"pos":[24768,24796],"yaml":true},{"content":"Ends the asynchronous operation.","nodes":[{"pos":[0,32],"content":"Ends the asynchronous operation.","nodes":[{"content":"Ends the asynchronous operation.","pos":[0,32]}]}],"pos":[25993,26026],"yaml":true},{"content":"If BeginExecute was called under a transaction, this state may include uncommitted data. Once the transaction is committed successfully, the data in the InstanceView object can be considered committed.","nodes":[{"pos":[0,201],"content":"If BeginExecute was called under a transaction, this state may include uncommitted data. Once the transaction is committed successfully, the data in the InstanceView object can be considered committed.","nodes":[{"content":"If BeginExecute was called under a transaction, this state may include uncommitted data. Once the transaction is committed successfully, the data in the InstanceView object can be considered committed.","pos":[0,201],"nodes":[{"content":"If BeginExecute was called under a transaction, this state may include uncommitted data.","pos":[0,88]},{"content":"Once the transaction is committed successfully, the data in the InstanceView object can be considered committed.","pos":[89,201]}]}]}],"pos":[26037,26239],"yaml":true,"extradata":"MT"},{"content":"The result of the operation.","nodes":[{"pos":[0,28],"content":"The result of the operation.","nodes":[{"content":"The result of the operation.","pos":[0,28]}]}],"pos":[26433,26462],"yaml":true},{"content":"An InstanceView object  representing the known state of the instance after the successful completion of the command.","nodes":[{"pos":[0,116],"content":"An InstanceView object  representing the known state of the instance after the successful completion of the command.","nodes":[{"content":"An InstanceView object  representing the known state of the instance after the successful completion of the command.","pos":[0,116]}]}],"pos":[26551,26668],"yaml":true},{"content":"Ends an asynchronous operation.","nodes":[{"pos":[0,31],"content":"Ends an asynchronous operation.","nodes":[{"content":"Ends an asynchronous operation.","pos":[0,31]}]}],"pos":[27873,27905],"yaml":true},{"content":"> [!WARNING]\n>  Even though this method is declared as `virtual` rather than `abstract`, there is no implementation. This method must be overridden in order to provide functionality.","nodes":[{"pos":[2,182],"content":"[!WARNING]\n Even though this method is declared as `virtual` rather than `abstract`, there is no implementation. This method must be overridden in order to provide functionality.","leadings":["","> "],"nodes":[{"content":" Even though this method is declared as `virtual` rather than `abstract`, there is no implementation. This method must be overridden in order to provide functionality.","pos":[11,178],"nodes":[{"content":"Even though this method is declared as <ph id=\"ph1\">`virtual`</ph> rather than <ph id=\"ph2\">`abstract`</ph>, there is no implementation.","pos":[1,101],"source":" Even though this method is declared as `virtual` rather than `abstract`, there is no implementation."},{"content":"This method must be overridden in order to provide functionality.","pos":[102,167]}]}]}],"pos":[27916,28111],"yaml":true,"extradata":"MT"},{"content":"The result of the operation.","nodes":[{"pos":[0,28],"content":"The result of the operation.","nodes":[{"content":"The result of the operation.","pos":[0,28]}]}],"pos":[28278,28307],"yaml":true},{"content":"A persistence provider implementation should return false if it doesn’t support the command passed to the BeginTryCommand method. Otherwise it should return true or throw an exception.","nodes":[{"pos":[0,184],"content":"A persistence provider implementation should return false if it doesn’t support the command passed to the BeginTryCommand method. Otherwise it should return true or throw an exception.","nodes":[{"content":"A persistence provider implementation should return false if it doesn’t support the command passed to the BeginTryCommand method. Otherwise it should return true or throw an exception.","pos":[0,184],"nodes":[{"content":"A persistence provider implementation should return false if it doesn’t support the command passed to the BeginTryCommand method.","pos":[0,129]},{"content":"Otherwise it should return true or throw an exception.","pos":[130,184]}]}]}],"pos":[28365,28550],"yaml":true},{"content":"Ends the asynchronous operation initiated by the <xref href=\"System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)\"></xref> method.","nodes":[{"pos":[0,243],"content":"Ends the asynchronous operation initiated by the <ph id=\"ph1\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)\"&gt;&lt;/xref&gt;</ph> method.","source":"Ends the asynchronous operation initiated by the <xref href=\"System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)\"></xref> method."}],"pos":[29776,30020],"yaml":true},{"content":"An IAsyncResult object that was handed over to the client by the Begin method.","nodes":[{"pos":[0,78],"content":"An IAsyncResult object that was handed over to the client by the Begin method.","nodes":[{"content":"An IAsyncResult object that was handed over to the client by the Begin method.","pos":[0,78]}]}],"pos":[30265,30344],"yaml":true},{"content":"Returns a list of <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"></xref> objects..","nodes":[{"pos":[0,106],"content":"Returns a list of <ph id=\"ph1\">&lt;xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"&gt;&lt;/xref&gt;</ph> objects..","source":"Returns a list of <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"></xref> objects.."}],"pos":[30478,30585],"yaml":true},{"content":"Executes a persistence command synchronously. Examples of persistence commands are: <xref href=\"System.Activities.DurableInstancing.LoadWorkflowCommand\"></xref> and <xref href=\"System.Activities.DurableInstancing.SaveWorkflowCommand\"></xref>.","nodes":[{"pos":[0,242],"content":"Executes a persistence command synchronously. Examples of persistence commands are: <xref href=\"System.Activities.DurableInstancing.LoadWorkflowCommand\"></xref> and <xref href=\"System.Activities.DurableInstancing.SaveWorkflowCommand\"></xref>.","nodes":[{"content":"Executes a persistence command synchronously.","pos":[0,45]},{"content":"Examples of persistence commands are: <ph id=\"ph1\">&lt;xref href=\"System.Activities.DurableInstancing.LoadWorkflowCommand\"&gt;&lt;/xref&gt;</ph> and <ph id=\"ph2\">&lt;xref href=\"System.Activities.DurableInstancing.SaveWorkflowCommand\"&gt;&lt;/xref&gt;</ph>.","pos":[46,242],"source":" Examples of persistence commands are: <xref href=\"System.Activities.DurableInstancing.LoadWorkflowCommand\"></xref> and <xref href=\"System.Activities.DurableInstancing.SaveWorkflowCommand\"></xref>."}]}],"pos":[32192,32437],"yaml":true},{"content":"A host calls the <xref:System.Runtime.DurableInstancing.InstanceStore.Execute%2A> method to execute a persistence command against an instance handle, which the host obtains by invoking the <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> method. The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.  Only one command may be issued against an instance handle at a time.  \n  \n> [!WARNING]\n>  If this method is executed with a <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand>, it will create an <xref:System.Runtime.DurableInstancing.InstanceOwner> and bind it to the instance. This means that no other process will be able to access that workflow; if the process ends, the workflow cannot be recovered or executed. If such a workflow is executed again, a <xref:System.Runtime.DurableInstancing.InstanceLockedException> will be thrown.  \n>   \n>  If <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand> is not used, the instance store will create a temporary <xref:System.Runtime.DurableInstancing.InstanceOwner> that will be deleted at the end of the process. However, if the process ends before the workflow’s final persistence point, this exception will be thrown, unless the period of time specified in the **HostLockRenewalPeriod** parameter has expired.","nodes":[{"pos":[0,499],"content":"A host calls the <xref:System.Runtime.DurableInstancing.InstanceStore.Execute%2A> method to execute a persistence command against an instance handle, which the host obtains by invoking the <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> method. The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.  Only one command may be issued against an instance handle at a time.","nodes":[{"content":"A host calls the <xref:System.Runtime.DurableInstancing.InstanceStore.Execute%2A> method to execute a persistence command against an instance handle, which the host obtains by invoking the <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> method. The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.  Only one command may be issued against an instance handle at a time.","pos":[0,499],"nodes":[{"content":"A host calls the <ph id=\"ph1\">&lt;xref:System.Runtime.DurableInstancing.InstanceStore.Execute%2A&gt;</ph> method to execute a persistence command against an instance handle, which the host obtains by invoking the <ph id=\"ph2\">&lt;xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A&gt;</ph> method.","pos":[0,274],"source":"A host calls the <xref:System.Runtime.DurableInstancing.InstanceStore.Execute%2A> method to execute a persistence command against an instance handle, which the host obtains by invoking the <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> method."},{"content":"The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.","pos":[275,429]},{"content":"Only one command may be issued against an instance handle at a time.","pos":[431,499]}]}]},{"pos":[507,984],"content":"[!WARNING]\n If this method is executed with a <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand>, it will create an <xref:System.Runtime.DurableInstancing.InstanceOwner> and bind it to the instance. This means that no other process will be able to access that workflow; if the process ends, the workflow cannot be recovered or executed. If such a workflow is executed again, a <xref:System.Runtime.DurableInstancing.InstanceLockedException> will be thrown.","leadings":["","> "],"nodes":[{"content":" If this method is executed with a <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand>, it will create an <xref:System.Runtime.DurableInstancing.InstanceOwner> and bind it to the instance. This means that no other process will be able to access that workflow; if the process ends, the workflow cannot be recovered or executed. If such a workflow is executed again, a <xref:System.Runtime.DurableInstancing.InstanceLockedException> will be thrown.","pos":[11,475],"nodes":[{"content":"If this method is executed with a <ph id=\"ph1\">&lt;xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand&gt;</ph>, it will create an <ph id=\"ph2\">&lt;xref:System.Runtime.DurableInstancing.InstanceOwner&gt;</ph> and bind it to the instance.","pos":[1,206],"source":" If this method is executed with a <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand>, it will create an <xref:System.Runtime.DurableInstancing.InstanceOwner> and bind it to the instance."},{"content":"This means that no other process will be able to access that workflow; if the process ends, the workflow cannot be recovered or executed.","pos":[207,344]},{"content":"If such a workflow is executed again, a <ph id=\"ph1\">&lt;xref:System.Runtime.DurableInstancing.InstanceLockedException&gt;</ph> will be thrown.","pos":[345,464],"source":" If such a workflow is executed again, a <xref:System.Runtime.DurableInstancing.InstanceLockedException> will be thrown."}]}]},{"pos":[995,1424],"content":"If <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand> is not used, the instance store will create a temporary <xref:System.Runtime.DurableInstancing.InstanceOwner> that will be deleted at the end of the process. However, if the process ends before the workflow’s final persistence point, this exception will be thrown, unless the period of time specified in the **HostLockRenewalPeriod** parameter has expired.","nodes":[{"content":"If <ph id=\"ph1\">&lt;xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand&gt;</ph> is not used, the instance store will create a temporary <ph id=\"ph2\">&lt;xref:System.Runtime.DurableInstancing.InstanceOwner&gt;</ph> that will be deleted at the end of the process.","pos":[0,230],"source":"If <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand> is not used, the instance store will create a temporary <xref:System.Runtime.DurableInstancing.InstanceOwner> that will be deleted at the end of the process."},{"content":"However, if the process ends before the workflow’s final persistence point, this exception will be thrown, unless the period of time specified in the <bpt id=\"p1\">**</bpt>HostLockRenewalPeriod<ept id=\"p1\">**</ept> parameter has expired.","pos":[231,429],"source":" However, if the process ends before the workflow’s final persistence point, this exception will be thrown, unless the period of time specified in the **HostLockRenewalPeriod** parameter has expired."}]}],"pos":[32448,33880],"yaml":true,"extradata":"MT"},{"content":"An instance handle.","nodes":[{"pos":[0,19],"content":"An instance handle.","nodes":[{"content":"An instance handle.","pos":[0,19]}]}],"pos":[34221,34241],"yaml":true},{"content":"The command to be executed.","nodes":[{"pos":[0,27],"content":"The command to be executed.","nodes":[{"content":"The command to be executed.","pos":[0,27]}]}],"pos":[34350,34378],"yaml":true},{"content":"The timeout value for the operation.","nodes":[{"pos":[0,36],"content":"The timeout value for the operation.","nodes":[{"content":"The timeout value for the operation.","pos":[0,36]}]}],"pos":[34443,34480],"yaml":true},{"content":"An InstanceView object representing the known state of the instance after the successful completion of the command.  If Execute was called under a transaction, this state may include uncommitted data. Once the transaction is committed successfully, the data in the InstanceView object can be considered committed","nodes":[{"pos":[0,312],"content":"An InstanceView object representing the known state of the instance after the successful completion of the command.  If Execute was called under a transaction, this state may include uncommitted data. Once the transaction is committed successfully, the data in the InstanceView object can be considered committed","nodes":[{"content":"An InstanceView object representing the known state of the instance after the successful completion of the command.  If Execute was called under a transaction, this state may include uncommitted data. Once the transaction is committed successfully, the data in the InstanceView object can be considered committed","pos":[0,312],"nodes":[{"content":"An InstanceView object representing the known state of the instance after the successful completion of the command.","pos":[0,115]},{"content":"If Execute was called under a transaction, this state may include uncommitted data.","pos":[117,200]},{"content":"Once the transaction is committed successfully, the data in the InstanceView object can be considered committed","pos":[201,312]}]}]}],"pos":[34569,34882],"yaml":true},{"content":"Gets all the signaled events bound to an <xref href=\"System.Runtime.DurableInstancing.InstanceOwner\"></xref> object.","nodes":[{"pos":[0,116],"content":"Gets all the signaled events bound to an <ph id=\"ph1\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceOwner\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets all the signaled events bound to an <xref href=\"System.Runtime.DurableInstancing.InstanceOwner\"></xref> object."}],"pos":[36144,36261],"yaml":true},{"content":"An <xref href=\"System.Runtime.DurableInstancing.InstanceOwner\"></xref> object representing the owner of an instance.","nodes":[{"pos":[0,116],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Runtime.DurableInstancing.InstanceOwner\"&gt;&lt;/xref&gt;</ph> object representing the owner of an instance.","source":"An <xref href=\"System.Runtime.DurableInstancing.InstanceOwner\"></xref> object representing the owner of an instance."}],"pos":[36530,36647],"yaml":true},{"content":"Returns an array of <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"></xref> objects..","nodes":[{"pos":[0,108],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"&gt;&lt;/xref&gt;</ph> objects..","source":"Returns an array of <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"></xref> objects.."}],"pos":[36750,36859],"yaml":true},{"content":"Gets each InstanceOwner object that is bound to a valid instance handle or has not been garbage collected.","nodes":[{"pos":[0,106],"content":"Gets each InstanceOwner object that is bound to a valid instance handle or has not been garbage collected.","nodes":[{"content":"Gets each InstanceOwner object that is bound to a valid instance handle or has not been garbage collected.","pos":[0,106]}]}],"pos":[37988,38095],"yaml":true},{"content":"Returns an array of InstanceOwner objects.","nodes":[{"pos":[0,42],"content":"Returns an array of InstanceOwner objects.","nodes":[{"content":"Returns an array of InstanceOwner objects.","pos":[0,42]}]}],"pos":[38106,38149],"yaml":true,"extradata":"MT"},{"content":"The owner of the instance.","nodes":[{"pos":[0,26],"content":"The owner of the instance.","nodes":[{"content":"The owner of the instance.","pos":[0,26]}]}],"pos":[38364,38391],"yaml":true},{"content":"Invoked when an instance handle is freed.","nodes":[{"pos":[0,41],"content":"Invoked when an instance handle is freed.","nodes":[{"content":"Invoked when an instance handle is freed.","pos":[0,41]}]}],"pos":[39801,39843],"yaml":true},{"content":"The instance handle that was freed.","nodes":[{"pos":[0,35],"content":"The instance handle that was freed.","nodes":[{"content":"The instance handle that was freed.","pos":[0,35]}]}],"pos":[40116,40152],"yaml":true},{"content":"The persistence provider’s user context information that was returned from OnNewInstanceHandle, or null if OnNewInstanceHandle is not overridden.","nodes":[{"pos":[0,145],"content":"The persistence provider’s user context information that was returned from OnNewInstanceHandle, or null if OnNewInstanceHandle is not overridden.","nodes":[{"content":"The persistence provider’s user context information that was returned from OnNewInstanceHandle, or null if OnNewInstanceHandle is not overridden.","pos":[0,145]}]}],"pos":[40219,40365],"yaml":true},{"content":"Invoked when a new instance handle is created.","nodes":[{"pos":[0,46],"content":"Invoked when a new instance handle is created.","nodes":[{"content":"Invoked when a new instance handle is created.","pos":[0,46]}]}],"pos":[41706,41753],"yaml":true},{"content":"An instance handle.","nodes":[{"pos":[0,19],"content":"An instance handle.","nodes":[{"content":"An instance handle.","pos":[0,19]}]}],"pos":[42007,42027],"yaml":true},{"content":"An object.  This user context object will be available to the persistence provider when commands are executed using the handle, and when the handle is freed.","nodes":[{"pos":[0,157],"content":"An object.  This user context object will be available to the persistence provider when commands are executed using the handle, and when the handle is freed.","nodes":[{"content":"An object.  This user context object will be available to the persistence provider when commands are executed using the handle, and when the handle is freed.","pos":[0,157],"nodes":[{"content":"An object.","pos":[0,10]},{"content":"This user context object will be available to the persistence provider when commands are executed using the handle, and when the handle is freed.","pos":[12,157]}]}]}],"pos":[42084,42242],"yaml":true},{"content":"Resets the signaled event and removes the event from the signaled events list maintained by the instance owner.","nodes":[{"pos":[0,111],"content":"Resets the signaled event and removes the event from the signaled events list maintained by the instance owner.","nodes":[{"content":"Resets the signaled event and removes the event from the signaled events list maintained by the instance owner.","pos":[0,111]}]}],"pos":[43774,43886],"yaml":true},{"content":"The persistence event that was signaled earlier and to be reset.","nodes":[{"pos":[0,64],"content":"The persistence event that was signaled earlier and to be reset.","nodes":[{"content":"The persistence event that was signaled earlier and to be reset.","pos":[0,64]}]}],"pos":[44199,44264],"yaml":true},{"content":"The instance owner associated with the persistence event.","nodes":[{"pos":[0,57],"content":"The instance owner associated with the persistence event.","nodes":[{"content":"The instance owner associated with the persistence event.","pos":[0,57]}]}],"pos":[44358,44416],"yaml":true},{"content":"An instance store invokes this method to signal an event. A workflow host that subscribes for this persistence event receives it and takes an appropriate action.","nodes":[{"pos":[0,161],"content":"An instance store invokes this method to signal an event. A workflow host that subscribes for this persistence event receives it and takes an appropriate action.","nodes":[{"content":"An instance store invokes this method to signal an event. A workflow host that subscribes for this persistence event receives it and takes an appropriate action.","pos":[0,161],"nodes":[{"content":"An instance store invokes this method to signal an event.","pos":[0,57]},{"content":"A workflow host that subscribes for this persistence event receives it and takes an appropriate action.","pos":[58,161]}]}]}],"pos":[45945,46107],"yaml":true},{"content":"The persistence event to be signaled.","nodes":[{"pos":[0,37],"content":"The persistence event to be signaled.","nodes":[{"content":"The persistence event to be signaled.","pos":[0,37]}]}],"pos":[46421,46459],"yaml":true},{"content":"The instance owner.","nodes":[{"pos":[0,19],"content":"The instance owner.","nodes":[{"content":"The instance owner.","pos":[0,19]}]}],"pos":[46553,46573],"yaml":true},{"content":"A persistence provider implements this method, which determines whether a particular persistence command can be executed and if the command can be executed executes it asynchronously.","nodes":[{"pos":[0,183],"content":"A persistence provider implements this method, which determines whether a particular persistence command can be executed and if the command can be executed executes it asynchronously.","nodes":[{"content":"A persistence provider implements this method, which determines whether a particular persistence command can be executed and if the command can be executed executes it asynchronously.","pos":[0,183]}]}],"pos":[48265,48449],"yaml":true},{"content":"If the command can be executed, the persistence provider calls relevant methods on the <xref:System.Runtime.DurableInstancing.InstancePersistenceContext> to provide the results of the command.","nodes":[{"pos":[0,192],"content":"If the command can be executed, the persistence provider calls relevant methods on the <xref:System.Runtime.DurableInstancing.InstancePersistenceContext> to provide the results of the command.","nodes":[{"content":"If the command can be executed, the persistence provider calls relevant methods on the <ph id=\"ph1\">&lt;xref:System.Runtime.DurableInstancing.InstancePersistenceContext&gt;</ph> to provide the results of the command.","pos":[0,192],"source":"If the command can be executed, the persistence provider calls relevant methods on the <xref:System.Runtime.DurableInstancing.InstancePersistenceContext> to provide the results of the command."}]}],"pos":[48460,48653],"yaml":true,"extradata":"MT"},{"content":"The instance context.","nodes":[{"pos":[0,21],"content":"The instance context.","nodes":[{"content":"The instance context.","pos":[0,21]}]}],"pos":[48993,49015],"yaml":true},{"content":"The command to be executed.","nodes":[{"pos":[0,27],"content":"The command to be executed.","nodes":[{"content":"The command to be executed.","pos":[0,27]}]}],"pos":[49124,49152],"yaml":true},{"content":"Timeout value for the operation.","nodes":[{"pos":[0,32],"content":"Timeout value for the operation.","nodes":[{"content":"Timeout value for the operation.","pos":[0,32]}]}],"pos":[49217,49250],"yaml":true},{"content":"A persistence provider implementation should return `false` if it doesn’t support the command passed as a parameter; otherwise it should return `true` or throw an exception.","nodes":[{"pos":[0,173],"content":"A persistence provider implementation should return <ph id=\"ph1\">`false`</ph> if it doesn’t support the command passed as a parameter; otherwise it should return <ph id=\"ph2\">`true`</ph> or throw an exception.","source":"A persistence provider implementation should return `false` if it doesn’t support the command passed as a parameter; otherwise it should return `true` or throw an exception."}],"pos":[49308,49482],"yaml":true},{"content":"A workflow host typically invokes this method to wait for an event to be signaled.","nodes":[{"pos":[0,82],"content":"A workflow host typically invokes this method to wait for an event to be signaled.","nodes":[{"content":"A workflow host typically invokes this method to wait for an event to be signaled.","pos":[0,82]}]}],"pos":[50855,50938],"yaml":true},{"content":"The instance handle that is bound to the event.","nodes":[{"pos":[0,47],"content":"The instance handle that is bound to the event.","nodes":[{"content":"The instance handle that is bound to the event.","pos":[0,47]}]}],"pos":[51261,51309],"yaml":true},{"content":"The time span after which the waiting operation times out.","nodes":[{"pos":[0,58],"content":"The time span after which the waiting operation times out.","nodes":[{"content":"The time span after which the waiting operation times out.","pos":[0,58]}]}],"pos":[51374,51433],"yaml":true},{"content":"A list of <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"></xref> objects.","nodes":[{"pos":[0,97],"content":"A list of <ph id=\"ph1\">&lt;xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"&gt;&lt;/xref&gt;</ph> objects.","source":"A list of <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"></xref> objects."}],"pos":[51567,51665],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.DurableInstancing.InstanceStore\n  commentId: T:System.Runtime.DurableInstancing.InstanceStore\n  id: InstanceStore\n  children:\n  - System.Runtime.DurableInstancing.InstanceStore.#ctor\n  - System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)\n  - System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)\n  - System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)\n  - System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle\n  - System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)\n  - System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)\n  - System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)\n  - System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner\n  - System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)\n  - System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)\n  - System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(System.IAsyncResult)\n  - System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)\n  - System.Runtime.DurableInstancing.InstanceStore.GetEvents(System.Runtime.DurableInstancing.InstanceOwner)\n  - System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners\n  - System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)\n  - System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)\n  - System.Runtime.DurableInstancing.InstanceStore.ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)\n  - System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)\n  - System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)\n  - System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)\n  langs:\n  - csharp\n  name: InstanceStore\n  nameWithType: InstanceStore\n  fullName: System.Runtime.DurableInstancing.InstanceStore\n  type: Class\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Represents an instance store.\n  remarks: \"A persistence provider provides access to an instance store through a concrete implementation of the <xref:System.Runtime.DurableInstancing.InstanceStore> class.  \\n  \\n Persistence providers may call InstanceHandle.Free on handles passed to TryCommand, even after the command has finished executing. But persistence providers must not hold strong references to InstanceHandle or InstanceOwner objects, as this can prevent InstanceStore from being garbage collected.  \\n  \\n> [!WARNING]\\n>  Workflow definitions for persisted workflows cannot be changed. If a workflow definition is changed after it is persisted, the workflow runtime will crash when the workflow is reloaded.\"\n  syntax:\n    content: public abstract class InstanceStore\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Activities.DurableInstancing.SqlWorkflowInstanceStore\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.#ctor\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.#ctor\n  id: '#ctor'\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: InstanceStore()\n  nameWithType: InstanceStore.InstanceStore()\n  fullName: InstanceStore.InstanceStore()\n  type: Constructor\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Initializes an instance of the <xref href=\"System.Runtime.DurableInstancing.InstanceStore\"></xref> class.\n  syntax:\n    content: protected InstanceStore ();\n    parameters: []\n  overload: System.Runtime.DurableInstancing.InstanceStore.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)\n  id: BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: BeginExecute(InstanceHandle, InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n  nameWithType: InstanceStore.BeginExecute(InstanceHandle, InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n  fullName: InstanceStore.BeginExecute(InstanceHandle, InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Asynchronously executes persistence commands such as <xref href=\"System.Activities.DurableInstancing.LoadWorkflowCommand\"></xref> and <xref href=\"System.Activities.DurableInstancing.SaveWorkflowCommand\"></xref>.\n  remarks: A host calls the <xref:System.Runtime.DurableInstancing.InstanceStore.BeginExecute%2A> method to execute a persistence command against an instance handle asynchronously. The host obtains the instance handle by invoking the <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> method. The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.  Only one command may be issued against an instance handle at a time.\n  syntax:\n    content: public IAsyncResult BeginExecute (System.Runtime.DurableInstancing.InstanceHandle handle, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, object state);\n    parameters:\n    - id: handle\n      type: System.Runtime.DurableInstancing.InstanceHandle\n      description: An instance handle.\n    - id: command\n      type: System.Runtime.DurableInstancing.InstancePersistenceCommand\n      description: The command to be executed.\n    - id: timeout\n      type: System.TimeSpan\n      description: The timeout value for the command execution.\n    - id: callback\n      type: System.AsyncCallback\n      description: The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.\n    - id: state\n      type: System.Object\n      description: The state information.\n    return:\n      type: System.IAsyncResult\n      description: The state of the asynchronous operation.\n  overload: System.Runtime.DurableInstancing.InstanceStore.BeginExecute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)\n  id: BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: BeginTryCommand(InstancePersistenceContext, InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n  nameWithType: InstanceStore.BeginTryCommand(InstancePersistenceContext, InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n  fullName: InstanceStore.BeginTryCommand(InstancePersistenceContext, InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: A persistence provider implements this method, which determines whether a particular persistence command can be executed. If the command can be executed, executes the command asynchronously.\n  remarks: \"If the command can be executed, the persistence provider calls relevant methods on the InstancePersistenceContext to provide the results of the command.  \\n  \\n> [!WARNING]\\n>  Even though this method is declared as `virtual` rather than `abstract`, there is no implementation. This method must be overridden in order to provide functionality.\"\n  syntax:\n    content: protected virtual IAsyncResult BeginTryCommand (System.Runtime.DurableInstancing.InstancePersistenceContext context, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout, AsyncCallback callback, object state);\n    parameters:\n    - id: context\n      type: System.Runtime.DurableInstancing.InstancePersistenceContext\n      description: The instance context.\n    - id: command\n      type: System.Runtime.DurableInstancing.InstancePersistenceCommand\n      description: The persistence command to be executed.\n    - id: timeout\n      type: System.TimeSpan\n      description: The timeout value for the command execution.\n    - id: callback\n      type: System.AsyncCallback\n      description: The asynchronous callback delegate that receives notification of the completion of the asynchronous operation.\n    - id: state\n      type: System.Object\n      description: The state information.\n    return:\n      type: System.IAsyncResult\n      description: The state of the asynchronous operation.\n  overload: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)\n  id: BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: BeginWaitForEvents(InstanceHandle, TimeSpan, AsyncCallback, Object)\n  nameWithType: InstanceStore.BeginWaitForEvents(InstanceHandle, TimeSpan, AsyncCallback, Object)\n  fullName: InstanceStore.BeginWaitForEvents(InstanceHandle, TimeSpan, AsyncCallback, Object)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Begins an asynchronous operation to listen for any events raised by the instance store for a specific instance handle.\n  syntax:\n    content: public IAsyncResult BeginWaitForEvents (System.Runtime.DurableInstancing.InstanceHandle handle, TimeSpan timeout, AsyncCallback callback, object state);\n    parameters:\n    - id: handle\n      type: System.Runtime.DurableInstancing.InstanceHandle\n      description: An instance handle.\n    - id: timeout\n      type: System.TimeSpan\n      description: The period after which the operation times out.\n    - id: callback\n      type: System.AsyncCallback\n      description: The method to be called after the asynchronous operation is complete.\n    - id: state\n      type: System.Object\n      description: An object containing the state information associated with the asynchronous operation.\n    return:\n      type: System.IAsyncResult\n      description: Returns an <xref href=\"System.IAsyncResult\"></xref> object..\n  overload: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle\n  id: CreateInstanceHandle\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: CreateInstanceHandle()\n  nameWithType: InstanceStore.CreateInstanceHandle()\n  fullName: InstanceStore.CreateInstanceHandle()\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Creates an instance handle.\n  syntax:\n    content: public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle ();\n    parameters: []\n    return:\n      type: System.Runtime.DurableInstancing.InstanceHandle\n      description: The instance handle.\n  overload: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)\n  id: CreateInstanceHandle(System.Guid)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: CreateInstanceHandle(Guid)\n  nameWithType: InstanceStore.CreateInstanceHandle(Guid)\n  fullName: InstanceStore.CreateInstanceHandle(Guid)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Creates an instance handle.  If the DefaultInstanceOwner is set, the value is automatically bound as the new handle’s instance owner.  The instance identifier passed as a parameter is automatically bound as the new handle’s instance.\n  syntax:\n    content: public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle (Guid instanceId);\n    parameters:\n    - id: instanceId\n      type: System.Guid\n      description: An instance identifier. Must not be Guid.Empty.\n    return:\n      type: System.Runtime.DurableInstancing.InstanceHandle\n      description: The instance handle.\n  overload: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)\n  id: CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: CreateInstanceHandle(InstanceOwner)\n  nameWithType: InstanceStore.CreateInstanceHandle(InstanceOwner)\n  fullName: InstanceStore.CreateInstanceHandle(InstanceOwner)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Creates an instance handle. If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle’s instance owner.  (Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.)\n  syntax:\n    content: public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle (System.Runtime.DurableInstancing.InstanceOwner owner);\n    parameters:\n    - id: owner\n      type: System.Runtime.DurableInstancing.InstanceOwner\n      description: The owner of an instance.\n    return:\n      type: System.Runtime.DurableInstancing.InstanceHandle\n      description: The instance handle. A null value indicates that the new handle should not be automatically bound to an instance owner.\n  overload: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)\n  id: CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: CreateInstanceHandle(InstanceOwner, Guid)\n  nameWithType: InstanceStore.CreateInstanceHandle(InstanceOwner, Guid)\n  fullName: InstanceStore.CreateInstanceHandle(InstanceOwner, Guid)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Creates an instance handle. If the instance owner passed as a parameter is not null, the value is automatically bound as the new handle’s instance owner.  (Otherwise, no instance owner is bound, even if DefaultInstanceOwner is set.) The instance identifier passed as a parameter is automatically bound as the new handle’s instance.\n  syntax:\n    content: public System.Runtime.DurableInstancing.InstanceHandle CreateInstanceHandle (System.Runtime.DurableInstancing.InstanceOwner owner, Guid instanceId);\n    parameters:\n    - id: owner\n      type: System.Runtime.DurableInstancing.InstanceOwner\n      description: An InstanceOwner object  that represents the owner of an instance. Pass null as the value for this parameter to indicate that the new handle should not be automatically bound to an instance owner.\n    - id: instanceId\n      type: System.Guid\n      description: An instance identifier. Must not be Guid.Empty.\n    return:\n      type: System.Runtime.DurableInstancing.InstanceHandle\n      description: The instance handle.\n  overload: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner\n  commentId: P:System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner\n  id: DefaultInstanceOwner\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: DefaultInstanceOwner\n  nameWithType: InstanceStore.DefaultInstanceOwner\n  fullName: InstanceStore.DefaultInstanceOwner\n  type: Property\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Gets or sets the default instance owner.\n  remarks: \"Some hosts infer the instance owner to use by reading this property. WorkflowApplication can use this property. WorkflowServiceHost does not use this property.  \\n  \\n The DefaultInstanceOwner propery must be set to null when it is no longer necessary. InstanceStore objects might not be garbage collected if DefaultInstanceOwner is not null.  \\n  \\n> [!WARNING]\\n>  Even though this method is declared as `virtual` rather than `abstract`, there is no implementation. This method must be overridden in order to provide functionality.\"\n  syntax:\n    content: public System.Runtime.DurableInstancing.InstanceOwner DefaultInstanceOwner { get; set; }\n    return:\n      type: System.Runtime.DurableInstancing.InstanceOwner\n      description: The default instance owner.\n  overload: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)\n  id: EndExecute(System.IAsyncResult)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: EndExecute(IAsyncResult)\n  nameWithType: InstanceStore.EndExecute(IAsyncResult)\n  fullName: InstanceStore.EndExecute(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Ends the asynchronous operation.\n  remarks: If BeginExecute was called under a transaction, this state may include uncommitted data. Once the transaction is committed successfully, the data in the InstanceView object can be considered committed.\n  syntax:\n    content: public System.Runtime.DurableInstancing.InstanceView EndExecute (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The result of the operation.\n    return:\n      type: System.Runtime.DurableInstancing.InstanceView\n      description: An InstanceView object  representing the known state of the instance after the successful completion of the command.\n  overload: System.Runtime.DurableInstancing.InstanceStore.EndExecute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)\n  id: EndTryCommand(System.IAsyncResult)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: EndTryCommand(IAsyncResult)\n  nameWithType: InstanceStore.EndTryCommand(IAsyncResult)\n  fullName: InstanceStore.EndTryCommand(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Ends an asynchronous operation.\n  remarks: >-\n    > [!WARNING]\n\n    >  Even though this method is declared as `virtual` rather than `abstract`, there is no implementation. This method must be overridden in order to provide functionality.\n  syntax:\n    content: protected virtual bool EndTryCommand (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: The result of the operation.\n    return:\n      type: System.Boolean\n      description: A persistence provider implementation should return false if it doesn’t support the command passed to the BeginTryCommand method. Otherwise it should return true or throw an exception.\n  overload: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(System.IAsyncResult)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(System.IAsyncResult)\n  id: EndWaitForEvents(System.IAsyncResult)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: EndWaitForEvents(IAsyncResult)\n  nameWithType: InstanceStore.EndWaitForEvents(IAsyncResult)\n  fullName: InstanceStore.EndWaitForEvents(IAsyncResult)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Ends the asynchronous operation initiated by the <xref href=\"System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)\"></xref> method.\n  syntax:\n    content: public System.Collections.Generic.List<System.Runtime.DurableInstancing.InstancePersistenceEvent> EndWaitForEvents (IAsyncResult result);\n    parameters:\n    - id: result\n      type: System.IAsyncResult\n      description: An IAsyncResult object that was handed over to the client by the Begin method.\n    return:\n      type: System.Collections.Generic.List{System.Runtime.DurableInstancing.InstancePersistenceEvent}\n      description: Returns a list of <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"></xref> objects..\n  overload: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)\n  id: Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: Execute(InstanceHandle, InstancePersistenceCommand, TimeSpan)\n  nameWithType: InstanceStore.Execute(InstanceHandle, InstancePersistenceCommand, TimeSpan)\n  fullName: InstanceStore.Execute(InstanceHandle, InstancePersistenceCommand, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: 'Executes a persistence command synchronously. Examples of persistence commands are: <xref href=\"System.Activities.DurableInstancing.LoadWorkflowCommand\"></xref> and <xref href=\"System.Activities.DurableInstancing.SaveWorkflowCommand\"></xref>.'\n  remarks: \"A host calls the <xref:System.Runtime.DurableInstancing.InstanceStore.Execute%2A> method to execute a persistence command against an instance handle, which the host obtains by invoking the <xref:System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle%2A> method. The instance handle may be bound to entities that represent the context and subject of the command, such as an instance, instance owner, or instance lock.  Only one command may be issued against an instance handle at a time.  \\n  \\n> [!WARNING]\\n>  If this method is executed with a <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand>, it will create an <xref:System.Runtime.DurableInstancing.InstanceOwner> and bind it to the instance. This means that no other process will be able to access that workflow; if the process ends, the workflow cannot be recovered or executed. If such a workflow is executed again, a <xref:System.Runtime.DurableInstancing.InstanceLockedException> will be thrown.  \\n>   \\n>  If <xref:System.Activities.DurableInstancing.CreateWorkflowOwnerCommand> is not used, the instance store will create a temporary <xref:System.Runtime.DurableInstancing.InstanceOwner> that will be deleted at the end of the process. However, if the process ends before the workflow’s final persistence point, this exception will be thrown, unless the period of time specified in the **HostLockRenewalPeriod** parameter has expired.\"\n  syntax:\n    content: public System.Runtime.DurableInstancing.InstanceView Execute (System.Runtime.DurableInstancing.InstanceHandle handle, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout);\n    parameters:\n    - id: handle\n      type: System.Runtime.DurableInstancing.InstanceHandle\n      description: An instance handle.\n    - id: command\n      type: System.Runtime.DurableInstancing.InstancePersistenceCommand\n      description: The command to be executed.\n    - id: timeout\n      type: System.TimeSpan\n      description: The timeout value for the operation.\n    return:\n      type: System.Runtime.DurableInstancing.InstanceView\n      description: An InstanceView object representing the known state of the instance after the successful completion of the command.  If Execute was called under a transaction, this state may include uncommitted data. Once the transaction is committed successfully, the data in the InstanceView object can be considered committed\n  overload: System.Runtime.DurableInstancing.InstanceStore.Execute*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.GetEvents(System.Runtime.DurableInstancing.InstanceOwner)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.GetEvents(System.Runtime.DurableInstancing.InstanceOwner)\n  id: GetEvents(System.Runtime.DurableInstancing.InstanceOwner)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: GetEvents(InstanceOwner)\n  nameWithType: InstanceStore.GetEvents(InstanceOwner)\n  fullName: InstanceStore.GetEvents(InstanceOwner)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Gets all the signaled events bound to an <xref href=\"System.Runtime.DurableInstancing.InstanceOwner\"></xref> object.\n  syntax:\n    content: protected System.Runtime.DurableInstancing.InstancePersistenceEvent[] GetEvents (System.Runtime.DurableInstancing.InstanceOwner owner);\n    parameters:\n    - id: owner\n      type: System.Runtime.DurableInstancing.InstanceOwner\n      description: An <xref href=\"System.Runtime.DurableInstancing.InstanceOwner\"></xref> object representing the owner of an instance.\n    return:\n      type: System.Runtime.DurableInstancing.InstancePersistenceEvent[]\n      description: Returns an array of <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"></xref> objects..\n  overload: System.Runtime.DurableInstancing.InstanceStore.GetEvents*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners\n  id: GetInstanceOwners\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: GetInstanceOwners()\n  nameWithType: InstanceStore.GetInstanceOwners()\n  fullName: InstanceStore.GetInstanceOwners()\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Gets each InstanceOwner object that is bound to a valid instance handle or has not been garbage collected.\n  remarks: Returns an array of InstanceOwner objects.\n  syntax:\n    content: protected System.Runtime.DurableInstancing.InstanceOwner[] GetInstanceOwners ();\n    parameters: []\n    return:\n      type: System.Runtime.DurableInstancing.InstanceOwner[]\n      description: The owner of the instance.\n  overload: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)\n  id: OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: OnFreeInstanceHandle(InstanceHandle, Object)\n  nameWithType: InstanceStore.OnFreeInstanceHandle(InstanceHandle, Object)\n  fullName: InstanceStore.OnFreeInstanceHandle(InstanceHandle, Object)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Invoked when an instance handle is freed.\n  syntax:\n    content: protected virtual void OnFreeInstanceHandle (System.Runtime.DurableInstancing.InstanceHandle instanceHandle, object userContext);\n    parameters:\n    - id: instanceHandle\n      type: System.Runtime.DurableInstancing.InstanceHandle\n      description: The instance handle that was freed.\n    - id: userContext\n      type: System.Object\n      description: The persistence provider’s user context information that was returned from OnNewInstanceHandle, or null if OnNewInstanceHandle is not overridden.\n  overload: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)\n  id: OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: OnNewInstanceHandle(InstanceHandle)\n  nameWithType: InstanceStore.OnNewInstanceHandle(InstanceHandle)\n  fullName: InstanceStore.OnNewInstanceHandle(InstanceHandle)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Invoked when a new instance handle is created.\n  syntax:\n    content: protected virtual object OnNewInstanceHandle (System.Runtime.DurableInstancing.InstanceHandle instanceHandle);\n    parameters:\n    - id: instanceHandle\n      type: System.Runtime.DurableInstancing.InstanceHandle\n      description: An instance handle.\n    return:\n      type: System.Object\n      description: An object.  This user context object will be available to the persistence provider when commands are executed using the handle, and when the handle is freed.\n  overload: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)\n  id: ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: ResetEvent(InstancePersistenceEvent, InstanceOwner)\n  nameWithType: InstanceStore.ResetEvent(InstancePersistenceEvent, InstanceOwner)\n  fullName: InstanceStore.ResetEvent(InstancePersistenceEvent, InstanceOwner)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: Resets the signaled event and removes the event from the signaled events list maintained by the instance owner.\n  syntax:\n    content: protected void ResetEvent (System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent, System.Runtime.DurableInstancing.InstanceOwner owner);\n    parameters:\n    - id: persistenceEvent\n      type: System.Runtime.DurableInstancing.InstancePersistenceEvent\n      description: The persistence event that was signaled earlier and to be reset.\n    - id: owner\n      type: System.Runtime.DurableInstancing.InstanceOwner\n      description: The instance owner associated with the persistence event.\n  overload: System.Runtime.DurableInstancing.InstanceStore.ResetEvent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)\n  id: SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: SignalEvent(InstancePersistenceEvent, InstanceOwner)\n  nameWithType: InstanceStore.SignalEvent(InstancePersistenceEvent, InstanceOwner)\n  fullName: InstanceStore.SignalEvent(InstancePersistenceEvent, InstanceOwner)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: An instance store invokes this method to signal an event. A workflow host that subscribes for this persistence event receives it and takes an appropriate action.\n  syntax:\n    content: protected void SignalEvent (System.Runtime.DurableInstancing.InstancePersistenceEvent persistenceEvent, System.Runtime.DurableInstancing.InstanceOwner owner);\n    parameters:\n    - id: persistenceEvent\n      type: System.Runtime.DurableInstancing.InstancePersistenceEvent\n      description: The persistence event to be signaled.\n    - id: owner\n      type: System.Runtime.DurableInstancing.InstanceOwner\n      description: The instance owner.\n  overload: System.Runtime.DurableInstancing.InstanceStore.SignalEvent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)\n  id: TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: TryCommand(InstancePersistenceContext, InstancePersistenceCommand, TimeSpan)\n  nameWithType: InstanceStore.TryCommand(InstancePersistenceContext, InstancePersistenceCommand, TimeSpan)\n  fullName: InstanceStore.TryCommand(InstancePersistenceContext, InstancePersistenceCommand, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: A persistence provider implements this method, which determines whether a particular persistence command can be executed and if the command can be executed executes it asynchronously.\n  remarks: If the command can be executed, the persistence provider calls relevant methods on the <xref:System.Runtime.DurableInstancing.InstancePersistenceContext> to provide the results of the command.\n  syntax:\n    content: protected virtual bool TryCommand (System.Runtime.DurableInstancing.InstancePersistenceContext context, System.Runtime.DurableInstancing.InstancePersistenceCommand command, TimeSpan timeout);\n    parameters:\n    - id: context\n      type: System.Runtime.DurableInstancing.InstancePersistenceContext\n      description: The instance context.\n    - id: command\n      type: System.Runtime.DurableInstancing.InstancePersistenceCommand\n      description: The command to be executed.\n    - id: timeout\n      type: System.TimeSpan\n      description: Timeout value for the operation.\n    return:\n      type: System.Boolean\n      description: A persistence provider implementation should return `false` if it doesn’t support the command passed as a parameter; otherwise it should return `true` or throw an exception.\n  overload: System.Runtime.DurableInstancing.InstanceStore.TryCommand*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)\n  commentId: M:System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)\n  id: WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  langs:\n  - csharp\n  name: WaitForEvents(InstanceHandle, TimeSpan)\n  nameWithType: InstanceStore.WaitForEvents(InstanceHandle, TimeSpan)\n  fullName: InstanceStore.WaitForEvents(InstanceHandle, TimeSpan)\n  type: Method\n  assemblies:\n  - System.Runtime.DurableInstancing\n  namespace: System.Runtime.DurableInstancing\n  summary: A workflow host typically invokes this method to wait for an event to be signaled.\n  syntax:\n    content: public System.Collections.Generic.List<System.Runtime.DurableInstancing.InstancePersistenceEvent> WaitForEvents (System.Runtime.DurableInstancing.InstanceHandle handle, TimeSpan timeout);\n    parameters:\n    - id: handle\n      type: System.Runtime.DurableInstancing.InstanceHandle\n      description: The instance handle that is bound to the event.\n    - id: timeout\n      type: System.TimeSpan\n      description: The time span after which the waiting operation times out.\n    return:\n      type: System.Collections.Generic.List{System.Runtime.DurableInstancing.InstancePersistenceEvent}\n      description: A list of <xref href=\"System.Runtime.DurableInstancing.InstancePersistenceEvent\"></xref> objects.\n  overload: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Runtime.DurableInstancing.InstanceStore.#ctor\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: InstanceStore()\n  nameWithType: InstanceStore.InstanceStore()\n  fullName: InstanceStore.InstanceStore()\n- uid: System.Runtime.DurableInstancing.InstanceStore.BeginExecute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: BeginExecute(InstanceHandle, InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n  nameWithType: InstanceStore.BeginExecute(InstanceHandle, InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n  fullName: InstanceStore.BeginExecute(InstanceHandle, InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  nameWithType: IAsyncResult\n  fullName: System.IAsyncResult\n- uid: System.Runtime.DurableInstancing.InstanceHandle\n  parent: System.Runtime.DurableInstancing\n  isExternal: false\n  name: InstanceHandle\n  nameWithType: InstanceHandle\n  fullName: System.Runtime.DurableInstancing.InstanceHandle\n- uid: System.Runtime.DurableInstancing.InstancePersistenceCommand\n  parent: System.Runtime.DurableInstancing\n  isExternal: false\n  name: InstancePersistenceCommand\n  nameWithType: InstancePersistenceCommand\n  fullName: System.Runtime.DurableInstancing.InstancePersistenceCommand\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  nameWithType: TimeSpan\n  fullName: System.TimeSpan\n- uid: System.AsyncCallback\n  parent: System\n  isExternal: false\n  name: AsyncCallback\n  nameWithType: AsyncCallback\n  fullName: System.AsyncCallback\n- uid: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: BeginTryCommand(InstancePersistenceContext, InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n  nameWithType: InstanceStore.BeginTryCommand(InstancePersistenceContext, InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n  fullName: InstanceStore.BeginTryCommand(InstancePersistenceContext, InstancePersistenceCommand, TimeSpan, AsyncCallback, Object)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceContext\n  parent: System.Runtime.DurableInstancing\n  isExternal: false\n  name: InstancePersistenceContext\n  nameWithType: InstancePersistenceContext\n  fullName: System.Runtime.DurableInstancing.InstancePersistenceContext\n- uid: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan,System.AsyncCallback,System.Object)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: BeginWaitForEvents(InstanceHandle, TimeSpan, AsyncCallback, Object)\n  nameWithType: InstanceStore.BeginWaitForEvents(InstanceHandle, TimeSpan, AsyncCallback, Object)\n  fullName: InstanceStore.BeginWaitForEvents(InstanceHandle, TimeSpan, AsyncCallback, Object)\n- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: CreateInstanceHandle()\n  nameWithType: InstanceStore.CreateInstanceHandle()\n  fullName: InstanceStore.CreateInstanceHandle()\n- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Guid)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: CreateInstanceHandle(Guid)\n  nameWithType: InstanceStore.CreateInstanceHandle(Guid)\n  fullName: InstanceStore.CreateInstanceHandle(Guid)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: CreateInstanceHandle(InstanceOwner)\n  nameWithType: InstanceStore.CreateInstanceHandle(InstanceOwner)\n  fullName: InstanceStore.CreateInstanceHandle(InstanceOwner)\n- uid: System.Runtime.DurableInstancing.InstanceOwner\n  parent: System.Runtime.DurableInstancing\n  isExternal: false\n  name: InstanceOwner\n  nameWithType: InstanceOwner\n  fullName: System.Runtime.DurableInstancing.InstanceOwner\n- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle(System.Runtime.DurableInstancing.InstanceOwner,System.Guid)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: CreateInstanceHandle(InstanceOwner, Guid)\n  nameWithType: InstanceStore.CreateInstanceHandle(InstanceOwner, Guid)\n  fullName: InstanceStore.CreateInstanceHandle(InstanceOwner, Guid)\n- uid: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: DefaultInstanceOwner\n  nameWithType: InstanceStore.DefaultInstanceOwner\n  fullName: InstanceStore.DefaultInstanceOwner\n- uid: System.Runtime.DurableInstancing.InstanceStore.EndExecute(System.IAsyncResult)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: EndExecute(IAsyncResult)\n  nameWithType: InstanceStore.EndExecute(IAsyncResult)\n  fullName: InstanceStore.EndExecute(IAsyncResult)\n- uid: System.Runtime.DurableInstancing.InstanceView\n  parent: System.Runtime.DurableInstancing\n  isExternal: false\n  name: InstanceView\n  nameWithType: InstanceView\n  fullName: System.Runtime.DurableInstancing.InstanceView\n- uid: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand(System.IAsyncResult)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: EndTryCommand(IAsyncResult)\n  nameWithType: InstanceStore.EndTryCommand(IAsyncResult)\n  fullName: InstanceStore.EndTryCommand(IAsyncResult)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents(System.IAsyncResult)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: EndWaitForEvents(IAsyncResult)\n  nameWithType: InstanceStore.EndWaitForEvents(IAsyncResult)\n  fullName: InstanceStore.EndWaitForEvents(IAsyncResult)\n- uid: System.Collections.Generic.List`1\n  name: List<T>\n  nameWithType: List<T>\n  fullName: System.Collections.Generic.List<T>\n- uid: System.Runtime.DurableInstancing.InstancePersistenceEvent\n  name: InstancePersistenceEvent\n  nameWithType: InstancePersistenceEvent\n  fullName: System.Runtime.DurableInstancing.InstancePersistenceEvent\n- uid: System.Collections.Generic.List{System.Runtime.DurableInstancing.InstancePersistenceEvent}\n  parent: System.Collections.Generic\n  isExternal: false\n  name: List<InstancePersistenceEvent>\n  nameWithType: List<InstancePersistenceEvent>\n  fullName: System.Collections.Generic.List<System.Runtime.DurableInstancing.InstancePersistenceEvent>\n  spec.csharp:\n  - uid: System.Collections.Generic.List`1\n    name: List\n    nameWithType: List\n    fullName: System.Collections.Generic.List\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Runtime.DurableInstancing.InstancePersistenceEvent\n    name: InstancePersistenceEvent\n    nameWithType: InstancePersistenceEvent\n    fullName: System.Runtime.DurableInstancing.InstancePersistenceEvent\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Runtime.DurableInstancing.InstanceStore.Execute(System.Runtime.DurableInstancing.InstanceHandle,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: Execute(InstanceHandle, InstancePersistenceCommand, TimeSpan)\n  nameWithType: InstanceStore.Execute(InstanceHandle, InstancePersistenceCommand, TimeSpan)\n  fullName: InstanceStore.Execute(InstanceHandle, InstancePersistenceCommand, TimeSpan)\n- uid: System.Runtime.DurableInstancing.InstanceStore.GetEvents(System.Runtime.DurableInstancing.InstanceOwner)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: GetEvents(InstanceOwner)\n  nameWithType: InstanceStore.GetEvents(InstanceOwner)\n  fullName: InstanceStore.GetEvents(InstanceOwner)\n- uid: System.Runtime.DurableInstancing.InstancePersistenceEvent[]\n  parent: System.Runtime.DurableInstancing\n  isExternal: false\n  name: InstancePersistenceEvent[]\n  nameWithType: InstancePersistenceEvent[]\n  fullName: System.Runtime.DurableInstancing.InstancePersistenceEvent[]\n  spec.csharp:\n  - uid: System.Runtime.DurableInstancing.InstancePersistenceEvent\n    name: InstancePersistenceEvent\n    nameWithType: InstancePersistenceEvent\n    fullName: System.Runtime.DurableInstancing.InstancePersistenceEvent\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: GetInstanceOwners()\n  nameWithType: InstanceStore.GetInstanceOwners()\n  fullName: InstanceStore.GetInstanceOwners()\n- uid: System.Runtime.DurableInstancing.InstanceOwner[]\n  parent: System.Runtime.DurableInstancing\n  isExternal: false\n  name: InstanceOwner[]\n  nameWithType: InstanceOwner[]\n  fullName: System.Runtime.DurableInstancing.InstanceOwner[]\n  spec.csharp:\n  - uid: System.Runtime.DurableInstancing.InstanceOwner\n    name: InstanceOwner\n    nameWithType: InstanceOwner\n    fullName: System.Runtime.DurableInstancing.InstanceOwner\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle,System.Object)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: OnFreeInstanceHandle(InstanceHandle, Object)\n  nameWithType: InstanceStore.OnFreeInstanceHandle(InstanceHandle, Object)\n  fullName: InstanceStore.OnFreeInstanceHandle(InstanceHandle, Object)\n- uid: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle(System.Runtime.DurableInstancing.InstanceHandle)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: OnNewInstanceHandle(InstanceHandle)\n  nameWithType: InstanceStore.OnNewInstanceHandle(InstanceHandle)\n  fullName: InstanceStore.OnNewInstanceHandle(InstanceHandle)\n- uid: System.Runtime.DurableInstancing.InstanceStore.ResetEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: ResetEvent(InstancePersistenceEvent, InstanceOwner)\n  nameWithType: InstanceStore.ResetEvent(InstancePersistenceEvent, InstanceOwner)\n  fullName: InstanceStore.ResetEvent(InstancePersistenceEvent, InstanceOwner)\n- uid: System.Runtime.DurableInstancing.InstanceStore.SignalEvent(System.Runtime.DurableInstancing.InstancePersistenceEvent,System.Runtime.DurableInstancing.InstanceOwner)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: SignalEvent(InstancePersistenceEvent, InstanceOwner)\n  nameWithType: InstanceStore.SignalEvent(InstancePersistenceEvent, InstanceOwner)\n  fullName: InstanceStore.SignalEvent(InstancePersistenceEvent, InstanceOwner)\n- uid: System.Runtime.DurableInstancing.InstanceStore.TryCommand(System.Runtime.DurableInstancing.InstancePersistenceContext,System.Runtime.DurableInstancing.InstancePersistenceCommand,System.TimeSpan)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: TryCommand(InstancePersistenceContext, InstancePersistenceCommand, TimeSpan)\n  nameWithType: InstanceStore.TryCommand(InstancePersistenceContext, InstancePersistenceCommand, TimeSpan)\n  fullName: InstanceStore.TryCommand(InstancePersistenceContext, InstancePersistenceCommand, TimeSpan)\n- uid: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents(System.Runtime.DurableInstancing.InstanceHandle,System.TimeSpan)\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: WaitForEvents(InstanceHandle, TimeSpan)\n  nameWithType: InstanceStore.WaitForEvents(InstanceHandle, TimeSpan)\n  fullName: InstanceStore.WaitForEvents(InstanceHandle, TimeSpan)\n- uid: System.Runtime.DurableInstancing.InstanceStore.#ctor*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: InstanceStore\n  nameWithType: InstanceStore.InstanceStore\n  fullName: InstanceStore.InstanceStore\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.BeginExecute*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: BeginExecute\n  nameWithType: InstanceStore.BeginExecute\n  fullName: InstanceStore.BeginExecute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.BeginTryCommand*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: BeginTryCommand\n  nameWithType: InstanceStore.BeginTryCommand\n  fullName: InstanceStore.BeginTryCommand\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.BeginWaitForEvents*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: BeginWaitForEvents\n  nameWithType: InstanceStore.BeginWaitForEvents\n  fullName: InstanceStore.BeginWaitForEvents\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.CreateInstanceHandle*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: CreateInstanceHandle\n  nameWithType: InstanceStore.CreateInstanceHandle\n  fullName: InstanceStore.CreateInstanceHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.DefaultInstanceOwner*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: DefaultInstanceOwner\n  nameWithType: InstanceStore.DefaultInstanceOwner\n  fullName: InstanceStore.DefaultInstanceOwner\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.EndExecute*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: EndExecute\n  nameWithType: InstanceStore.EndExecute\n  fullName: InstanceStore.EndExecute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.EndTryCommand*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: EndTryCommand\n  nameWithType: InstanceStore.EndTryCommand\n  fullName: InstanceStore.EndTryCommand\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.EndWaitForEvents*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: EndWaitForEvents\n  nameWithType: InstanceStore.EndWaitForEvents\n  fullName: InstanceStore.EndWaitForEvents\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.Execute*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: Execute\n  nameWithType: InstanceStore.Execute\n  fullName: InstanceStore.Execute\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.GetEvents*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: GetEvents\n  nameWithType: InstanceStore.GetEvents\n  fullName: InstanceStore.GetEvents\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.GetInstanceOwners*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: GetInstanceOwners\n  nameWithType: InstanceStore.GetInstanceOwners\n  fullName: InstanceStore.GetInstanceOwners\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.OnFreeInstanceHandle*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: OnFreeInstanceHandle\n  nameWithType: InstanceStore.OnFreeInstanceHandle\n  fullName: InstanceStore.OnFreeInstanceHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.OnNewInstanceHandle*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: OnNewInstanceHandle\n  nameWithType: InstanceStore.OnNewInstanceHandle\n  fullName: InstanceStore.OnNewInstanceHandle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.ResetEvent*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: ResetEvent\n  nameWithType: InstanceStore.ResetEvent\n  fullName: InstanceStore.ResetEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.SignalEvent*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: SignalEvent\n  nameWithType: InstanceStore.SignalEvent\n  fullName: InstanceStore.SignalEvent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.TryCommand*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: TryCommand\n  nameWithType: InstanceStore.TryCommand\n  fullName: InstanceStore.TryCommand\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Runtime.DurableInstancing.InstanceStore.WaitForEvents*\n  parent: System.Runtime.DurableInstancing.InstanceStore\n  isExternal: false\n  name: WaitForEvents\n  nameWithType: InstanceStore.WaitForEvents\n  fullName: InstanceStore.WaitForEvents\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.DurableInstancing/InstanceStore.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}