{"nodes":[{"content":"Represents an X.509 token used as the signing credential.","nodes":[{"pos":[0,57],"content":"Represents an X.509 token used as the signing credential.","nodes":[{"content":"Represents an X.509 token used as the signing credential.","pos":[0,57]}]}],"pos":[1182,1240],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate.","nodes":[{"pos":[0,153],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"&gt;&lt;/xref&gt;</ph> class based on the specified X.509 certificate.","source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate."}],"pos":[3325,3479],"yaml":true},{"content":"By default, this constructor uses an <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> to generate the security key identifier.","nodes":[{"pos":[0,143],"content":"By default, this constructor uses an <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> to generate the security key identifier.","nodes":[{"content":"By default, this constructor uses an <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause&gt;</ph> to generate the security key identifier.","pos":[0,143],"source":"By default, this constructor uses an <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> to generate the security key identifier."}]}],"pos":[3490,3634],"yaml":true,"extradata":"MT"},{"content":"The X.509 certificate.","nodes":[{"pos":[0,22],"content":"The X.509 certificate.","nodes":[{"content":"The X.509 certificate.","pos":[0,22]}]}],"pos":[3897,3920],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate and security key identifier.","nodes":[{"pos":[0,181],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"&gt;&lt;/xref&gt;</ph> class based on the specified X.509 certificate and security key identifier.","source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate and security key identifier."}],"pos":[5535,5717],"yaml":true},{"content":"The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <xref:System.IdentityModel.Tokens.X509SecurityToken> are <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause>, and <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause>. However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the `ski` parameter.","nodes":[{"pos":[0,677],"content":"The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <xref:System.IdentityModel.Tokens.X509SecurityToken> are <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause>, and <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause>. However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the `ski` parameter.","nodes":[{"content":"The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.X509SecurityToken&gt;</ph> are <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause&gt;</ph>.","pos":[0,474],"source":"The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <xref:System.IdentityModel.Tokens.X509SecurityToken> are <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause>, and <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause>."},{"content":"However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the <ph id=\"ph1\">`ski`</ph> parameter.","pos":[475,677],"source":" However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the `ski` parameter."}]}],"pos":[5728,6406],"yaml":true,"extradata":"MT"},{"content":"The X.509 certificate.","nodes":[{"pos":[0,22],"content":"The X.509 certificate.","nodes":[{"content":"The X.509 certificate.","pos":[0,22]}]}],"pos":[6724,6747],"yaml":true},{"content":"The security key identifier.","nodes":[{"pos":[0,28],"content":"The security key identifier.","nodes":[{"content":"The security key identifier.","pos":[0,28]}]}],"pos":[6842,6871],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate, signature algorithm, and digest algorithm.","nodes":[{"pos":[0,196],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"&gt;&lt;/xref&gt;</ph> class based on the specified X.509 certificate, signature algorithm, and digest algorithm.","source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate, signature algorithm, and digest algorithm."}],"pos":[8399,8596],"yaml":true},{"content":"By default, this constructor uses an <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> to generate the security key identifier.","nodes":[{"pos":[0,143],"content":"By default, this constructor uses an <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> to generate the security key identifier.","nodes":[{"content":"By default, this constructor uses an <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause&gt;</ph> to generate the security key identifier.","pos":[0,143],"source":"By default, this constructor uses an <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> to generate the security key identifier."}]}],"pos":[8607,8751],"yaml":true,"extradata":"MT"},{"content":"The X.509 certificate.","nodes":[{"pos":[0,22],"content":"The X.509 certificate.","nodes":[{"content":"The X.509 certificate.","pos":[0,22]}]}],"pos":[9065,9088],"yaml":true},{"content":"The signature algorithm.","nodes":[{"pos":[0,24],"content":"The signature algorithm.","nodes":[{"content":"The signature algorithm.","pos":[0,24]}]}],"pos":[9162,9187],"yaml":true},{"content":"The digest algorithm.","nodes":[{"pos":[0,21],"content":"The digest algorithm.","nodes":[{"content":"The digest algorithm.","pos":[0,21]}]}],"pos":[9258,9280],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate, security key identifier, signature algorithm, and digest algorithm.","nodes":[{"pos":[0,221],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"&gt;&lt;/xref&gt;</ph> class based on the specified X.509 certificate, security key identifier, signature algorithm, and digest algorithm.","source":"Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate, security key identifier, signature algorithm, and digest algorithm."}],"pos":[11027,11249],"yaml":true},{"content":"The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <xref:System.IdentityModel.Tokens.X509SecurityToken> are <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause>, and <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause>. However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the `ski` parameter.","nodes":[{"pos":[0,677],"content":"The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <xref:System.IdentityModel.Tokens.X509SecurityToken> are <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause>, and <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause>. However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the `ski` parameter.","nodes":[{"content":"The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <ph id=\"ph1\">&lt;xref:System.IdentityModel.Tokens.X509SecurityToken&gt;</ph> are <ph id=\"ph2\">&lt;xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause&gt;</ph>.","pos":[0,474],"source":"The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <xref:System.IdentityModel.Tokens.X509SecurityToken> are <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause>, and <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause>."},{"content":"However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the <ph id=\"ph1\">`ski`</ph> parameter.","pos":[475,677],"source":" However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the `ski` parameter."}]}],"pos":[11260,11938],"yaml":true,"extradata":"MT"},{"content":"The X.509 certificate.","nodes":[{"pos":[0,22],"content":"The X.509 certificate.","nodes":[{"content":"The X.509 certificate.","pos":[0,22]}]}],"pos":[12307,12330],"yaml":true},{"content":"The security key identifier.","nodes":[{"pos":[0,28],"content":"The security key identifier.","nodes":[{"content":"The security key identifier.","pos":[0,28]}]}],"pos":[12425,12454],"yaml":true},{"content":"The signature algorithm.","nodes":[{"pos":[0,24],"content":"The signature algorithm.","nodes":[{"content":"The signature algorithm.","pos":[0,24]}]}],"pos":[12528,12553],"yaml":true},{"content":"The digest algorithm.","nodes":[{"pos":[0,21],"content":"The digest algorithm.","nodes":[{"content":"The digest algorithm.","pos":[0,21]}]}],"pos":[12624,12646],"yaml":true},{"content":"Gets the X.509 certificate.","nodes":[{"pos":[0,27],"content":"Gets the X.509 certificate.","nodes":[{"content":"Gets the X.509 certificate.","pos":[0,27]}]}],"pos":[13776,13804],"yaml":true},{"content":"The X.509 certificate.","nodes":[{"pos":[0,22],"content":"The X.509 certificate.","nodes":[{"content":"The X.509 certificate.","pos":[0,22]}]}],"pos":[14024,14047],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IdentityModel.Tokens.X509SigningCredentials\n  commentId: T:System.IdentityModel.Tokens.X509SigningCredentials\n  id: X509SigningCredentials\n  children:\n  - System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  - System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier)\n  - System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)\n  - System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.String)\n  - System.IdentityModel.Tokens.X509SigningCredentials.Certificate\n  langs:\n  - csharp\n  name: X509SigningCredentials\n  nameWithType: X509SigningCredentials\n  fullName: System.IdentityModel.Tokens.X509SigningCredentials\n  type: Class\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Represents an X.509 token used as the signing credential.\n  syntax:\n    content: 'public class X509SigningCredentials : System.IdentityModel.Tokens.SigningCredentials'\n  inheritance:\n  - System.Object\n  - System.IdentityModel.Tokens.SigningCredentials\n  implements: []\n  inheritedMembers:\n  - System.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm\n  - System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm\n  - System.IdentityModel.Tokens.SigningCredentials.SigningKey\n  - System.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/X509SigningCredentials.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  commentId: M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)'\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  langs:\n  - csharp\n  name: X509SigningCredentials(X509Certificate2)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2)\n  fullName: X509SigningCredentials.X509SigningCredentials(X509Certificate2)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate.\n  remarks: By default, this constructor uses an <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> to generate the security key identifier.\n  syntax:\n    content: public X509SigningCredentials (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The X.509 certificate.\n  overload: System.IdentityModel.Tokens.X509SigningCredentials.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/X509SigningCredentials.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier)\n  commentId: M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier)\n  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier)'\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  langs:\n  - csharp\n  name: X509SigningCredentials(X509Certificate2, SecurityKeyIdentifier)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2, SecurityKeyIdentifier)\n  fullName: X509SigningCredentials.X509SigningCredentials(X509Certificate2, SecurityKeyIdentifier)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate and security key identifier.\n  remarks: The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <xref:System.IdentityModel.Tokens.X509SecurityToken> are <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause>, and <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause>. However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the `ski` parameter.\n  syntax:\n    content: public X509SigningCredentials (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.IdentityModel.Tokens.SecurityKeyIdentifier ski);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The X.509 certificate.\n    - id: ski\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifier\n      description: The security key identifier.\n  overload: System.IdentityModel.Tokens.X509SigningCredentials.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/X509SigningCredentials.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)\n  commentId: M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)\n  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)'\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  langs:\n  - csharp\n  name: X509SigningCredentials(X509Certificate2, String, String)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2, String, String)\n  fullName: X509SigningCredentials.X509SigningCredentials(X509Certificate2, String, String)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate, signature algorithm, and digest algorithm.\n  remarks: By default, this constructor uses an <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause> to generate the security key identifier.\n  syntax:\n    content: public X509SigningCredentials (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, string signatureAlgorithm, string digestAlgorithm);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The X.509 certificate.\n    - id: signatureAlgorithm\n      type: System.String\n      description: The signature algorithm.\n    - id: digestAlgorithm\n      type: System.String\n      description: The digest algorithm.\n  overload: System.IdentityModel.Tokens.X509SigningCredentials.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/X509SigningCredentials.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.String)\n  commentId: M:System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.String)\n  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.String)'\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  langs:\n  - csharp\n  name: X509SigningCredentials(X509Certificate2, SecurityKeyIdentifier, String, String)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2, SecurityKeyIdentifier, String, String)\n  fullName: X509SigningCredentials.X509SigningCredentials(X509Certificate2, SecurityKeyIdentifier, String, String)\n  type: Constructor\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Initializes a new instance of the <xref href=\"System.IdentityModel.Tokens.X509SigningCredentials\"></xref> class based on the specified X.509 certificate, security key identifier, signature algorithm, and digest algorithm.\n  remarks: The key identifier clause types supported by Windows Communication Foundation for generating a security key identifier that references an <xref:System.IdentityModel.Tokens.X509SecurityToken> are <xref:System.IdentityModel.Tokens.X509SubjectKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509ThumbprintKeyIdentifierClause>, <xref:System.IdentityModel.Tokens.X509IssuerSerialKeyIdentifierClause>, and <xref:System.IdentityModel.Tokens.X509RawDataKeyIdentifierClause>. However, in order to enable custom scenarios, this constructor does not perform any validation on the clause types that were used to generate the security key identifier supplied in the `ski` parameter.\n  syntax:\n    content: public X509SigningCredentials (System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.IdentityModel.Tokens.SecurityKeyIdentifier ski, string signatureAlgorithm, string digestAlgorithm);\n    parameters:\n    - id: certificate\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The X.509 certificate.\n    - id: ski\n      type: System.IdentityModel.Tokens.SecurityKeyIdentifier\n      description: The security key identifier.\n    - id: signatureAlgorithm\n      type: System.String\n      description: The signature algorithm.\n    - id: digestAlgorithm\n      type: System.String\n      description: The digest algorithm.\n  overload: System.IdentityModel.Tokens.X509SigningCredentials.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/X509SigningCredentials.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.Certificate\n  commentId: P:System.IdentityModel.Tokens.X509SigningCredentials.Certificate\n  id: Certificate\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  langs:\n  - csharp\n  name: Certificate\n  nameWithType: X509SigningCredentials.Certificate\n  fullName: X509SigningCredentials.Certificate\n  type: Property\n  assemblies:\n  - System.IdentityModel\n  namespace: System.IdentityModel.Tokens\n  summary: Gets the X.509 certificate.\n  syntax:\n    content: public System.Security.Cryptography.X509Certificates.X509Certificate2 Certificate { get; }\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate2\n      description: The X.509 certificate.\n  overload: System.IdentityModel.Tokens.X509SigningCredentials.Certificate*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/X509SigningCredentials.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: v-jibran\n  manager: markgal\nreferences:\n- uid: System.IdentityModel.Tokens.SigningCredentials\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SigningCredentials\n  nameWithType: SigningCredentials\n  fullName: System.IdentityModel.Tokens.SigningCredentials\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  isExternal: false\n  name: X509SigningCredentials(X509Certificate2)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2)\n  fullName: X509SigningCredentials.X509SigningCredentials(X509Certificate2)\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate2\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate2\n  nameWithType: X509Certificate2\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier)\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  isExternal: false\n  name: X509SigningCredentials(X509Certificate2, SecurityKeyIdentifier)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2, SecurityKeyIdentifier)\n  fullName: X509SigningCredentials.X509SigningCredentials(X509Certificate2, SecurityKeyIdentifier)\n- uid: System.IdentityModel.Tokens.SecurityKeyIdentifier\n  parent: System.IdentityModel.Tokens\n  isExternal: false\n  name: SecurityKeyIdentifier\n  nameWithType: SecurityKeyIdentifier\n  fullName: System.IdentityModel.Tokens.SecurityKeyIdentifier\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.String,System.String)\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  isExternal: false\n  name: X509SigningCredentials(X509Certificate2, String, String)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2, String, String)\n  fullName: X509SigningCredentials.X509SigningCredentials(X509Certificate2, String, String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2,System.IdentityModel.Tokens.SecurityKeyIdentifier,System.String,System.String)\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  isExternal: false\n  name: X509SigningCredentials(X509Certificate2, SecurityKeyIdentifier, String, String)\n  nameWithType: X509SigningCredentials.X509SigningCredentials(X509Certificate2, SecurityKeyIdentifier, String, String)\n  fullName: X509SigningCredentials.X509SigningCredentials(X509Certificate2, SecurityKeyIdentifier, String, String)\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.Certificate\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  isExternal: false\n  name: Certificate\n  nameWithType: X509SigningCredentials.Certificate\n  fullName: X509SigningCredentials.Certificate\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.#ctor*\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  isExternal: false\n  name: X509SigningCredentials\n  nameWithType: X509SigningCredentials.X509SigningCredentials\n  fullName: X509SigningCredentials.X509SigningCredentials\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/X509SigningCredentials.xml\n- uid: System.IdentityModel.Tokens.X509SigningCredentials.Certificate*\n  parent: System.IdentityModel.Tokens.X509SigningCredentials\n  isExternal: false\n  name: Certificate\n  nameWithType: X509SigningCredentials.Certificate\n  fullName: X509SigningCredentials.Certificate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IdentityModel.Tokens/X509SigningCredentials.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IdentityModel.Tokens.SigningCredentials.DigestAlgorithm\n  parent: System.IdentityModel.Tokens.SigningCredentials\n  isExternal: false\n  name: DigestAlgorithm\n  nameWithType: SigningCredentials.DigestAlgorithm\n  fullName: SigningCredentials.DigestAlgorithm\n- uid: System.IdentityModel.Tokens.SigningCredentials.SignatureAlgorithm\n  parent: System.IdentityModel.Tokens.SigningCredentials\n  isExternal: false\n  name: SignatureAlgorithm\n  nameWithType: SigningCredentials.SignatureAlgorithm\n  fullName: SigningCredentials.SignatureAlgorithm\n- uid: System.IdentityModel.Tokens.SigningCredentials.SigningKey\n  parent: System.IdentityModel.Tokens.SigningCredentials\n  isExternal: false\n  name: SigningKey\n  nameWithType: SigningCredentials.SigningKey\n  fullName: SigningCredentials.SigningKey\n- uid: System.IdentityModel.Tokens.SigningCredentials.SigningKeyIdentifier\n  parent: System.IdentityModel.Tokens.SigningCredentials\n  isExternal: false\n  name: SigningKeyIdentifier\n  nameWithType: SigningCredentials.SigningKeyIdentifier\n  fullName: SigningCredentials.SigningKeyIdentifier\n"}