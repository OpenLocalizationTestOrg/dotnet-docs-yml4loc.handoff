{"nodes":[{"content":"Provides the configuration setting for International Domain Name (IDN) processing in the <xref href=\"System.Uri\"></xref> class.","nodes":[{"pos":[0,127],"content":"Provides the configuration setting for International Domain Name (IDN) processing in the <ph id=\"ph1\">&lt;xref href=\"System.Uri\"&gt;&lt;/xref&gt;</ph> class.","source":"Provides the configuration setting for International Domain Name (IDN) processing in the <xref href=\"System.Uri\"></xref> class."}],"pos":[630,758],"yaml":true},{"content":"The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) based on RFC 3987. Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI. This ensures application compatibility with prior versions of the .NET Framework.  \n  \n The configuration setting for the <xref:System.Configuration.IdnElement> is indirectly controlled by the <xref:System.Configuration.IriParsingElement> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class. IRI processing must be enabled for IDN processing to be possible. If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.  \n  \n The Internationalized Domain Name (IDN) attribute only controls IDN processing. All other IRI processing (character normalization, for example) is performed by default.  \n  \n The configuration setting for the <xref:System.Configuration.IdnElement> will be read once when the first <xref:System.Uri?displayProperty=fullName> class is constructed. Changes to configuration settings after that time are ignored.  \n  \n For more information on IRI support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class.","nodes":[{"pos":[0,356],"content":"The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) based on RFC 3987. Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI. This ensures application compatibility with prior versions of the .NET Framework.","nodes":[{"content":"The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) based on RFC 3987. Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI. This ensures application compatibility with prior versions of the .NET Framework.","pos":[0,356],"nodes":[{"content":"The existing <ph id=\"ph1\">&lt;xref:System.Uri?displayProperty=fullName&gt;</ph> class has been extended to provide support for International Resource Identifiers (IRI) based on RFC 3987.","pos":[0,162],"source":"The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) based on RFC 3987."},{"content":"Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI.","pos":[163,274]},{"content":"This ensures application compatibility with prior versions of the .NET Framework.","pos":[275,356]}]}]},{"pos":[363,865],"content":"The configuration setting for the <xref:System.Configuration.IdnElement> is indirectly controlled by the <xref:System.Configuration.IriParsingElement> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class. IRI processing must be enabled for IDN processing to be possible. If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.","nodes":[{"content":"The configuration setting for the <xref:System.Configuration.IdnElement> is indirectly controlled by the <xref:System.Configuration.IriParsingElement> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class. IRI processing must be enabled for IDN processing to be possible. If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.","pos":[0,502],"nodes":[{"content":"The configuration setting for the <ph id=\"ph1\">&lt;xref:System.Configuration.IdnElement&gt;</ph> is indirectly controlled by the <ph id=\"ph2\">&lt;xref:System.Configuration.IriParsingElement&gt;</ph> configuration setting that controls IRI processing in the <ph id=\"ph3\">&lt;xref:System.Uri?displayProperty=fullName&gt;</ph> class.","pos":[0,258],"source":"The configuration setting for the <xref:System.Configuration.IdnElement> is indirectly controlled by the <xref:System.Configuration.IriParsingElement> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class."},{"content":"IRI processing must be enabled for IDN processing to be possible.","pos":[259,324]},{"content":"If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.","pos":[325,502]}]}]},{"pos":[872,1040],"content":"The Internationalized Domain Name (IDN) attribute only controls IDN processing. All other IRI processing (character normalization, for example) is performed by default.","nodes":[{"content":"The Internationalized Domain Name (IDN) attribute only controls IDN processing. All other IRI processing (character normalization, for example) is performed by default.","pos":[0,168],"nodes":[{"content":"The Internationalized Domain Name (IDN) attribute only controls IDN processing.","pos":[0,79]},{"content":"All other IRI processing (character normalization, for example) is performed by default.","pos":[80,168]}]}]},{"pos":[1047,1280],"content":"The configuration setting for the <xref:System.Configuration.IdnElement> will be read once when the first <xref:System.Uri?displayProperty=fullName> class is constructed. Changes to configuration settings after that time are ignored.","nodes":[{"content":"The configuration setting for the <xref:System.Configuration.IdnElement> will be read once when the first <xref:System.Uri?displayProperty=fullName> class is constructed. Changes to configuration settings after that time are ignored.","pos":[0,233],"nodes":[{"content":"The configuration setting for the <ph id=\"ph1\">&lt;xref:System.Configuration.IdnElement&gt;</ph> will be read once when the first <ph id=\"ph2\">&lt;xref:System.Uri?displayProperty=fullName&gt;</ph> class is constructed.","pos":[0,170],"source":"The configuration setting for the <xref:System.Configuration.IdnElement> will be read once when the first <xref:System.Uri?displayProperty=fullName> class is constructed."},{"content":"Changes to configuration settings after that time are ignored.","pos":[171,233]}]}]},{"pos":[1287,1405],"content":"For more information on IRI support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class.","nodes":[{"content":"For more information on IRI support, see the Remarks section for the <ph id=\"ph1\">&lt;xref:System.Uri?displayProperty=fullName&gt;</ph> class.","pos":[0,118],"source":"For more information on IRI support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class."}]}],"pos":[769,2185],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Configuration.IdnElement\"></xref> class.","nodes":[{"pos":[0,93],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Configuration.IdnElement\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Configuration.IdnElement\"></xref> class."}],"pos":[6144,6238],"yaml":true},{"content":"This constructor creates a <xref:System.Configuration.IdnElement> instance","nodes":[{"pos":[0,74],"content":"This constructor creates a <xref:System.Configuration.IdnElement> instance","nodes":[{"content":"This constructor creates a <ph id=\"ph1\">&lt;xref:System.Configuration.IdnElement&gt;</ph> instance","pos":[0,74],"source":"This constructor creates a <xref:System.Configuration.IdnElement> instance"}]}],"pos":[6249,6324],"yaml":true,"extradata":"MT"},{"content":"Gets or sets the value of the <xref href=\"System.Configuration.IdnElement\"></xref> configuration setting.","nodes":[{"pos":[0,105],"content":"Gets or sets the value of the <ph id=\"ph1\">&lt;xref href=\"System.Configuration.IdnElement\"&gt;&lt;/xref&gt;</ph> configuration setting.","source":"Gets or sets the value of the <xref href=\"System.Configuration.IdnElement\"></xref> configuration setting."}],"pos":[7411,7517],"yaml":true},{"content":"The International Domain Name (IDN) attribute only controls IDN processing. All other International Resource Identifiers (IRI)  processing (character normalization, for example) is performed by default.  \n  \n The configuration setting for the <xref:System.Configuration.IdnElement> is indirectly controlled by the <xref:System.Configuration.IriParsingElement?displayProperty=fullName> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class. IRI processing must be enabled for IDN processing to be possible. If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.  \n  \n The configuration setting for the <xref:System.Configuration.IdnElement> will be read once when the first <xref:System.Uri?displayProperty=fullName> class is constructed. Changes to configuration settings after that time are ignored.  \n  \n For more information on IRI support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class.","nodes":[{"pos":[0,202],"content":"The International Domain Name (IDN) attribute only controls IDN processing. All other International Resource Identifiers (IRI)  processing (character normalization, for example) is performed by default.","nodes":[{"content":"The International Domain Name (IDN) attribute only controls IDN processing. All other International Resource Identifiers (IRI)  processing (character normalization, for example) is performed by default.","pos":[0,202],"nodes":[{"content":"The International Domain Name (IDN) attribute only controls IDN processing.","pos":[0,75]},{"content":"All other International Resource Identifiers (IRI)  processing (character normalization, for example) is performed by default.","pos":[76,202]}]}]},{"pos":[209,736],"content":"The configuration setting for the <xref:System.Configuration.IdnElement> is indirectly controlled by the <xref:System.Configuration.IriParsingElement?displayProperty=fullName> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class. IRI processing must be enabled for IDN processing to be possible. If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.","nodes":[{"content":"The configuration setting for the <xref:System.Configuration.IdnElement> is indirectly controlled by the <xref:System.Configuration.IriParsingElement?displayProperty=fullName> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class. IRI processing must be enabled for IDN processing to be possible. If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.","pos":[0,527],"nodes":[{"content":"The configuration setting for the <ph id=\"ph1\">&lt;xref:System.Configuration.IdnElement&gt;</ph> is indirectly controlled by the <ph id=\"ph2\">&lt;xref:System.Configuration.IriParsingElement?displayProperty=fullName&gt;</ph> configuration setting that controls IRI processing in the <ph id=\"ph3\">&lt;xref:System.Uri?displayProperty=fullName&gt;</ph> class.","pos":[0,283],"source":"The configuration setting for the <xref:System.Configuration.IdnElement> is indirectly controlled by the <xref:System.Configuration.IriParsingElement?displayProperty=fullName> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class."},{"content":"IRI processing must be enabled for IDN processing to be possible.","pos":[284,349]},{"content":"If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.","pos":[350,527]}]}]},{"pos":[743,976],"content":"The configuration setting for the <xref:System.Configuration.IdnElement> will be read once when the first <xref:System.Uri?displayProperty=fullName> class is constructed. Changes to configuration settings after that time are ignored.","nodes":[{"content":"The configuration setting for the <xref:System.Configuration.IdnElement> will be read once when the first <xref:System.Uri?displayProperty=fullName> class is constructed. Changes to configuration settings after that time are ignored.","pos":[0,233],"nodes":[{"content":"The configuration setting for the <ph id=\"ph1\">&lt;xref:System.Configuration.IdnElement&gt;</ph> will be read once when the first <ph id=\"ph2\">&lt;xref:System.Uri?displayProperty=fullName&gt;</ph> class is constructed.","pos":[0,170],"source":"The configuration setting for the <xref:System.Configuration.IdnElement> will be read once when the first <xref:System.Uri?displayProperty=fullName> class is constructed."},{"content":"Changes to configuration settings after that time are ignored.","pos":[171,233]}]}]},{"pos":[983,1101],"content":"For more information on IRI support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class.","nodes":[{"content":"For more information on IRI support, see the Remarks section for the <ph id=\"ph1\">&lt;xref:System.Uri?displayProperty=fullName&gt;</ph> class.","pos":[0,118],"source":"For more information on IRI support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class."}]}],"pos":[7528,8638],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.UriIdnScope\"></xref> that contains the current configuration setting for IDN processing.","nodes":[{"pos":[0,109],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.UriIdnScope\"&gt;&lt;/xref&gt;</ph> that contains the current configuration setting for IDN processing.","source":"A <xref href=\"System.UriIdnScope\"></xref> that contains the current configuration setting for IDN processing."}],"pos":[9013,9123],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Configuration.IdnElement\n  commentId: T:System.Configuration.IdnElement\n  id: IdnElement\n  children:\n  - System.Configuration.IdnElement.#ctor\n  - System.Configuration.IdnElement.Enabled\n  - System.Configuration.IdnElement.Equals(System.Object)\n  - System.Configuration.IdnElement.GetHashCode\n  - System.Configuration.IdnElement.Properties\n  langs:\n  - csharp\n  name: IdnElement\n  nameWithType: IdnElement\n  fullName: System.Configuration.IdnElement\n  type: Class\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Provides the configuration setting for International Domain Name (IDN) processing in the <xref href=\"System.Uri\"></xref> class.\n  remarks: \"The existing <xref:System.Uri?displayProperty=fullName> class has been extended to provide support for International Resource Identifiers (IRI) based on RFC 3987. Current users will not see any change from the .NET Framework 2.0 behavior unless they specifically enable IRI. This ensures application compatibility with prior versions of the .NET Framework.  \\n  \\n The configuration setting for the <xref:System.Configuration.IdnElement> is indirectly controlled by the <xref:System.Configuration.IriParsingElement> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class. IRI processing must be enabled for IDN processing to be possible. If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.  \\n  \\n The Internationalized Domain Name (IDN) attribute only controls IDN processing. All other IRI processing (character normalization, for example) is performed by default.  \\n  \\n The configuration setting for the <xref:System.Configuration.IdnElement> will be read once when the first <xref:System.Uri?displayProperty=fullName> class is constructed. Changes to configuration settings after that time are ignored.  \\n  \\n For more information on IRI support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class.\"\n  syntax:\n    content: 'public sealed class IdnElement : System.Configuration.ConfigurationElement'\n  inheritance:\n  - System.Object\n  - System.Configuration.ConfigurationElement\n  implements: []\n  inheritedMembers:\n  - System.Configuration.ConfigurationElement.CurrentConfiguration\n  - System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)\n  - System.Configuration.ConfigurationElement.ElementInformation\n  - System.Configuration.ConfigurationElement.ElementProperty\n  - System.Configuration.ConfigurationElement.EvaluationContext\n  - System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)\n  - System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)\n  - System.Configuration.ConfigurationElement.HasContext\n  - System.Configuration.ConfigurationElement.Init\n  - System.Configuration.ConfigurationElement.InitializeDefault\n  - System.Configuration.ConfigurationElement.IsModified\n  - System.Configuration.ConfigurationElement.IsReadOnly\n  - System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)\n  - System.Configuration.ConfigurationElement.Item(System.String)\n  - System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)\n  - System.Configuration.ConfigurationElement.LockAllAttributesExcept\n  - System.Configuration.ConfigurationElement.LockAllElementsExcept\n  - System.Configuration.ConfigurationElement.LockAttributes\n  - System.Configuration.ConfigurationElement.LockElements\n  - System.Configuration.ConfigurationElement.LockItem\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)\n  - System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)\n  - System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)\n  - System.Configuration.ConfigurationElement.PostDeserialize\n  - System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)\n  - System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)\n  - System.Configuration.ConfigurationElement.ResetModified\n  - System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  - System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)\n  - System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)\n  - System.Configuration.ConfigurationElement.SetReadOnly\n  - System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IdnElement.xml\n  ms.technology:\n  - dotnet-standard\n  manager: wpickett\n- uid: System.Configuration.IdnElement.#ctor\n  commentId: M:System.Configuration.IdnElement.#ctor\n  id: '#ctor'\n  parent: System.Configuration.IdnElement\n  langs:\n  - csharp\n  name: IdnElement()\n  nameWithType: IdnElement.IdnElement()\n  fullName: IdnElement.IdnElement()\n  type: Constructor\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Initializes a new instance of the <xref href=\"System.Configuration.IdnElement\"></xref> class.\n  remarks: This constructor creates a <xref:System.Configuration.IdnElement> instance\n  syntax:\n    content: public IdnElement ();\n    parameters: []\n  overload: System.Configuration.IdnElement.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IdnElement.xml\n  ms.technology:\n  - dotnet-webforms\n  manager: wpickett\n- uid: System.Configuration.IdnElement.Enabled\n  commentId: P:System.Configuration.IdnElement.Enabled\n  id: Enabled\n  parent: System.Configuration.IdnElement\n  langs:\n  - csharp\n  name: Enabled\n  nameWithType: IdnElement.Enabled\n  fullName: IdnElement.Enabled\n  type: Property\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  summary: Gets or sets the value of the <xref href=\"System.Configuration.IdnElement\"></xref> configuration setting.\n  remarks: \"The International Domain Name (IDN) attribute only controls IDN processing. All other International Resource Identifiers (IRI)  processing (character normalization, for example) is performed by default.  \\n  \\n The configuration setting for the <xref:System.Configuration.IdnElement> is indirectly controlled by the <xref:System.Configuration.IriParsingElement?displayProperty=fullName> configuration setting that controls IRI processing in the <xref:System.Uri?displayProperty=fullName> class. IRI processing must be enabled for IDN processing to be possible. If IRI processing is disabled, then IDN processing will be set to the default setting where the .NET Framework 2.0 behavior is used for compatibility and IDN names are not used.  \\n  \\n The configuration setting for the <xref:System.Configuration.IdnElement> will be read once when the first <xref:System.Uri?displayProperty=fullName> class is constructed. Changes to configuration settings after that time are ignored.  \\n  \\n For more information on IRI support, see the Remarks section for the <xref:System.Uri?displayProperty=fullName> class.\"\n  syntax:\n    content: >-\n      [System.Configuration.ConfigurationProperty(\"enabled\", DefaultValue=Mono.Cecil.CustomAttributeArgument, Options=System.Configuration.ConfigurationPropertyOptions.IsRequired | System.Configuration.ConfigurationPropertyOptions.IsKey)]\n\n      public UriIdnScope Enabled { get; set; }\n    return:\n      type: System.UriIdnScope\n      description: A <xref href=\"System.UriIdnScope\"></xref> that contains the current configuration setting for IDN processing.\n  overload: System.Configuration.IdnElement.Enabled*\n  exceptions: []\n  attributes:\n  - type: System.Configuration.ConfigurationPropertyAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IdnElement.xml\n  ms.technology:\n  - dotnet-webforms\n  manager: wpickett\n- uid: System.Configuration.IdnElement.Equals(System.Object)\n  commentId: M:System.Configuration.IdnElement.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Configuration.IdnElement\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: IdnElement.Equals(Object)\n  fullName: IdnElement.Equals(Object)\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Configuration\n  syntax:\n    content: public override bool Equals (object o);\n    parameters:\n    - id: o\n      type: System.Object\n      description: ''\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Configuration.IdnElement.Equals*\n  exceptions: []\n  version:\n  - xamarinmac-3.0\n  monikers:\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IdnElement.xml\n- uid: System.Configuration.IdnElement.GetHashCode\n  commentId: M:System.Configuration.IdnElement.GetHashCode\n  id: GetHashCode\n  parent: System.Configuration.IdnElement\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: IdnElement.GetHashCode()\n  fullName: IdnElement.GetHashCode()\n  type: Method\n  assemblies:\n  - System\n  namespace: System.Configuration\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: ''\n  overload: System.Configuration.IdnElement.GetHashCode*\n  exceptions: []\n  version:\n  - xamarinmac-3.0\n  monikers:\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IdnElement.xml\n- uid: System.Configuration.IdnElement.Properties\n  commentId: P:System.Configuration.IdnElement.Properties\n  id: Properties\n  parent: System.Configuration.IdnElement\n  langs:\n  - csharp\n  name: Properties\n  nameWithType: IdnElement.Properties\n  fullName: IdnElement.Properties\n  type: Property\n  assemblies:\n  - System\n  - System.Configuration.ConfigurationManager\n  namespace: System.Configuration\n  syntax:\n    content: protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }\n    return:\n      type: System.Configuration.ConfigurationPropertyCollection\n      description: ''\n  overload: System.Configuration.IdnElement.Properties*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IdnElement.xml\nreferences:\n- uid: System.Configuration.ConfigurationElement\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationElement\n  nameWithType: ConfigurationElement\n  fullName: System.Configuration.ConfigurationElement\n- uid: System.Configuration.IdnElement.#ctor\n  parent: System.Configuration.IdnElement\n  isExternal: false\n  name: IdnElement()\n  nameWithType: IdnElement.IdnElement()\n  fullName: IdnElement.IdnElement()\n- uid: System.Configuration.IdnElement.Enabled\n  parent: System.Configuration.IdnElement\n  isExternal: false\n  name: Enabled\n  nameWithType: IdnElement.Enabled\n  fullName: IdnElement.Enabled\n- uid: System.UriIdnScope\n  parent: System\n  isExternal: false\n  name: UriIdnScope\n  nameWithType: UriIdnScope\n  fullName: System.UriIdnScope\n- uid: System.Configuration.IdnElement.Equals(System.Object)\n  parent: System.Configuration.IdnElement\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: IdnElement.Equals(Object)\n  fullName: IdnElement.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Configuration.IdnElement.GetHashCode\n  parent: System.Configuration.IdnElement\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: IdnElement.GetHashCode()\n  fullName: IdnElement.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Configuration.IdnElement.Properties\n  parent: System.Configuration.IdnElement\n  isExternal: false\n  name: Properties\n  nameWithType: IdnElement.Properties\n  fullName: IdnElement.Properties\n- uid: System.Configuration.ConfigurationPropertyCollection\n  parent: System.Configuration\n  isExternal: false\n  name: ConfigurationPropertyCollection\n  nameWithType: ConfigurationPropertyCollection\n  fullName: System.Configuration.ConfigurationPropertyCollection\n- uid: System.Configuration.IdnElement.#ctor*\n  parent: System.Configuration.IdnElement\n  isExternal: false\n  name: IdnElement\n  nameWithType: IdnElement.IdnElement\n  fullName: IdnElement.IdnElement\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IdnElement.xml\n- uid: System.Configuration.IdnElement.Enabled*\n  parent: System.Configuration.IdnElement\n  isExternal: false\n  name: Enabled\n  nameWithType: IdnElement.Enabled\n  fullName: IdnElement.Enabled\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IdnElement.xml\n- uid: System.Configuration.IdnElement.Equals*\n  parent: System.Configuration.IdnElement\n  isExternal: false\n  name: Equals\n  nameWithType: IdnElement.Equals\n  fullName: IdnElement.Equals\n  monikers:\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IdnElement.xml\n- uid: System.Configuration.IdnElement.GetHashCode*\n  parent: System.Configuration.IdnElement\n  isExternal: false\n  name: GetHashCode\n  nameWithType: IdnElement.GetHashCode\n  fullName: IdnElement.GetHashCode\n  monikers:\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IdnElement.xml\n- uid: System.Configuration.IdnElement.Properties*\n  parent: System.Configuration.IdnElement\n  isExternal: false\n  name: Properties\n  nameWithType: IdnElement.Properties\n  fullName: IdnElement.Properties\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Configuration/IdnElement.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Configuration.ConfigurationElement.CurrentConfiguration\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: CurrentConfiguration\n  nameWithType: ConfigurationElement.CurrentConfiguration\n  fullName: ConfigurationElement.CurrentConfiguration\n- uid: System.Configuration.ConfigurationElement.DeserializeElement(System.Xml.XmlReader,System.Boolean)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: DeserializeElement(XmlReader, Boolean)\n  nameWithType: ConfigurationElement.DeserializeElement(XmlReader, Boolean)\n  fullName: ConfigurationElement.DeserializeElement(XmlReader, Boolean)\n- uid: System.Configuration.ConfigurationElement.ElementInformation\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ElementInformation\n  nameWithType: ConfigurationElement.ElementInformation\n  fullName: ConfigurationElement.ElementInformation\n- uid: System.Configuration.ConfigurationElement.ElementProperty\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ElementProperty\n  nameWithType: ConfigurationElement.ElementProperty\n  fullName: ConfigurationElement.ElementProperty\n- uid: System.Configuration.ConfigurationElement.EvaluationContext\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: EvaluationContext\n  nameWithType: ConfigurationElement.EvaluationContext\n  fullName: ConfigurationElement.EvaluationContext\n- uid: System.Configuration.ConfigurationElement.GetTransformedAssemblyString(System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: GetTransformedAssemblyString(String)\n  nameWithType: ConfigurationElement.GetTransformedAssemblyString(String)\n  fullName: ConfigurationElement.GetTransformedAssemblyString(String)\n- uid: System.Configuration.ConfigurationElement.GetTransformedTypeString(System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: GetTransformedTypeString(String)\n  nameWithType: ConfigurationElement.GetTransformedTypeString(String)\n  fullName: ConfigurationElement.GetTransformedTypeString(String)\n- uid: System.Configuration.ConfigurationElement.HasContext\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: HasContext\n  nameWithType: ConfigurationElement.HasContext\n  fullName: ConfigurationElement.HasContext\n- uid: System.Configuration.ConfigurationElement.Init\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Init()\n  nameWithType: ConfigurationElement.Init()\n  fullName: ConfigurationElement.Init()\n- uid: System.Configuration.ConfigurationElement.InitializeDefault\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: InitializeDefault()\n  nameWithType: ConfigurationElement.InitializeDefault()\n  fullName: ConfigurationElement.InitializeDefault()\n- uid: System.Configuration.ConfigurationElement.IsModified\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: IsModified()\n  nameWithType: ConfigurationElement.IsModified()\n  fullName: ConfigurationElement.IsModified()\n- uid: System.Configuration.ConfigurationElement.IsReadOnly\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: IsReadOnly()\n  nameWithType: ConfigurationElement.IsReadOnly()\n  fullName: ConfigurationElement.IsReadOnly()\n- uid: System.Configuration.ConfigurationElement.Item(System.Configuration.ConfigurationProperty)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Item(ConfigurationProperty)\n  nameWithType: ConfigurationElement.Item(ConfigurationProperty)\n  fullName: ConfigurationElement.Item(ConfigurationProperty)\n- uid: System.Configuration.ConfigurationElement.Item(System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Item(String)\n  nameWithType: ConfigurationElement.Item(String)\n  fullName: ConfigurationElement.Item(String)\n- uid: System.Configuration.ConfigurationElement.ListErrors(System.Collections.IList)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ListErrors(IList)\n  nameWithType: ConfigurationElement.ListErrors(IList)\n  fullName: ConfigurationElement.ListErrors(IList)\n- uid: System.Configuration.ConfigurationElement.LockAllAttributesExcept\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockAllAttributesExcept\n  nameWithType: ConfigurationElement.LockAllAttributesExcept\n  fullName: ConfigurationElement.LockAllAttributesExcept\n- uid: System.Configuration.ConfigurationElement.LockAllElementsExcept\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockAllElementsExcept\n  nameWithType: ConfigurationElement.LockAllElementsExcept\n  fullName: ConfigurationElement.LockAllElementsExcept\n- uid: System.Configuration.ConfigurationElement.LockAttributes\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockAttributes\n  nameWithType: ConfigurationElement.LockAttributes\n  fullName: ConfigurationElement.LockAttributes\n- uid: System.Configuration.ConfigurationElement.LockElements\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockElements\n  nameWithType: ConfigurationElement.LockElements\n  fullName: ConfigurationElement.LockElements\n- uid: System.Configuration.ConfigurationElement.LockItem\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: LockItem\n  nameWithType: ConfigurationElement.LockItem\n  fullName: ConfigurationElement.LockItem\n- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedAttribute(System.String,System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: OnDeserializeUnrecognizedAttribute(String, String)\n  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedAttribute(String, String)\n  fullName: ConfigurationElement.OnDeserializeUnrecognizedAttribute(String, String)\n- uid: System.Configuration.ConfigurationElement.OnDeserializeUnrecognizedElement(System.String,System.Xml.XmlReader)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: OnDeserializeUnrecognizedElement(String, XmlReader)\n  nameWithType: ConfigurationElement.OnDeserializeUnrecognizedElement(String, XmlReader)\n  fullName: ConfigurationElement.OnDeserializeUnrecognizedElement(String, XmlReader)\n- uid: System.Configuration.ConfigurationElement.OnRequiredPropertyNotFound(System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: OnRequiredPropertyNotFound(String)\n  nameWithType: ConfigurationElement.OnRequiredPropertyNotFound(String)\n  fullName: ConfigurationElement.OnRequiredPropertyNotFound(String)\n- uid: System.Configuration.ConfigurationElement.PostDeserialize\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: PostDeserialize()\n  nameWithType: ConfigurationElement.PostDeserialize()\n  fullName: ConfigurationElement.PostDeserialize()\n- uid: System.Configuration.ConfigurationElement.PreSerialize(System.Xml.XmlWriter)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: PreSerialize(XmlWriter)\n  nameWithType: ConfigurationElement.PreSerialize(XmlWriter)\n  fullName: ConfigurationElement.PreSerialize(XmlWriter)\n- uid: System.Configuration.ConfigurationElement.Reset(System.Configuration.ConfigurationElement)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Reset(ConfigurationElement)\n  nameWithType: ConfigurationElement.Reset(ConfigurationElement)\n  fullName: ConfigurationElement.Reset(ConfigurationElement)\n- uid: System.Configuration.ConfigurationElement.ResetModified\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: ResetModified()\n  nameWithType: ConfigurationElement.ResetModified()\n  fullName: ConfigurationElement.ResetModified()\n- uid: System.Configuration.ConfigurationElement.SerializeElement(System.Xml.XmlWriter,System.Boolean)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SerializeElement(XmlWriter, Boolean)\n  nameWithType: ConfigurationElement.SerializeElement(XmlWriter, Boolean)\n  fullName: ConfigurationElement.SerializeElement(XmlWriter, Boolean)\n- uid: System.Configuration.ConfigurationElement.SerializeToXmlElement(System.Xml.XmlWriter,System.String)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SerializeToXmlElement(XmlWriter, String)\n  nameWithType: ConfigurationElement.SerializeToXmlElement(XmlWriter, String)\n  fullName: ConfigurationElement.SerializeToXmlElement(XmlWriter, String)\n- uid: System.Configuration.ConfigurationElement.SetPropertyValue(System.Configuration.ConfigurationProperty,System.Object,System.Boolean)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SetPropertyValue(ConfigurationProperty, Object, Boolean)\n  nameWithType: ConfigurationElement.SetPropertyValue(ConfigurationProperty, Object, Boolean)\n  fullName: ConfigurationElement.SetPropertyValue(ConfigurationProperty, Object, Boolean)\n- uid: System.Configuration.ConfigurationElement.SetReadOnly\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: SetReadOnly()\n  nameWithType: ConfigurationElement.SetReadOnly()\n  fullName: ConfigurationElement.SetReadOnly()\n- uid: System.Configuration.ConfigurationElement.Unmerge(System.Configuration.ConfigurationElement,System.Configuration.ConfigurationElement,System.Configuration.ConfigurationSaveMode)\n  parent: System.Configuration.ConfigurationElement\n  isExternal: false\n  name: Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode)\n  nameWithType: ConfigurationElement.Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode)\n  fullName: ConfigurationElement.Unmerge(ConfigurationElement, ConfigurationElement, ConfigurationSaveMode)\n"}