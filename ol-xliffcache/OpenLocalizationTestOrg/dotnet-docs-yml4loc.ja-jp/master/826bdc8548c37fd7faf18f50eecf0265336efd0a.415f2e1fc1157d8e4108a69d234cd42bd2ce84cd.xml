{"nodes":[{"content":"Represents the results from a single capturing group.","nodes":[{"pos":[0,53],"content":"Represents the results from a single capturing group.","nodes":[{"content":"Represents the results from a single capturing group.","pos":[0,53]}]}],"pos":[643,697],"yaml":true},{"content":"A capturing group can capture zero, one, or more strings in a single match because of quantifiers. (For more information, see [Quantifiers](~/docs/standard/base-types/quantifiers-in-regular-expressions.md).) All the substrings matched by a single capturing group are available from the <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName> property. Information about the last substring captured can be accessed directly from the `Value` and `Index` properties. (That is, the <xref:System.Text.RegularExpressions.Group> instance is equivalent to the last item of the collection returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property, which reflects the last capture made by the capturing group.)  \n  \n An example helps to clarify this relationship between a <xref:System.Text.RegularExpressions.Group> object and the <xref:System.Text.RegularExpressions.CaptureCollection?displayProperty=fullName> that is returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property. The regular expression pattern `(\\b(\\w+?)[,:;]?\\s?)+[?.!]` matches entire sentences. The regular expression is defined as shown in the following table.  \n  \n|Pattern|Description|  \n|-------------|-----------------|  \n|`\\b`|Begin the match at a word boundary.|  \n|`(\\w+?)`|Match one or more word characters, but as few characters as possible. This is the second (inner) capturing group. (The first capturing group includes the `\\b` language element.)|  \n|`[,:;]?`|Match zero or one occurrence of a comma, colon, or semicolon.|  \n|`\\s?`|Match zero or one occurrence of a white-space character.|  \n|`(\\b(\\w+?)[,:;]?\\s?)+`|Match the pattern consisting of a word boundary, one or more word characters, a punctuation symbol, and a white-space character one or more times. This is the first capturing group.|  \n|`[?.!]`|Match any occurrence of a period, question mark, or exclamation point.|  \n  \n In this regular expression pattern, the subpattern `(\\w+?)` is designed to match multiple words within a sentence. However, the value of the <xref:System.Text.RegularExpressions.Group> object represents only the last match that `(\\w+?)` captures, whereas the <xref:System.Text.RegularExpressions.Group.Captures%2A> property returns a <xref:System.Text.RegularExpressions.CaptureCollection> that represents all captured text. As the output shows, the <xref:System.Text.RegularExpressions.CaptureCollection> for the second capturing group contains four objects. The last of these corresponds to the <xref:System.Text.RegularExpressions.Group> object.  \n  \n [!code-csharp[System.Text.RegularExpressions.Group.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/cs/groupandcaptures1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Group.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/vb/groupandcaptures1.vb#1)]","nodes":[{"pos":[0,748],"content":"A capturing group can capture zero, one, or more strings in a single match because of quantifiers. (For more information, see [Quantifiers](~/docs/standard/base-types/quantifiers-in-regular-expressions.md).) All the substrings matched by a single capturing group are available from the <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName> property. Information about the last substring captured can be accessed directly from the `Value` and `Index` properties. (That is, the <xref:System.Text.RegularExpressions.Group> instance is equivalent to the last item of the collection returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property, which reflects the last capture made by the capturing group.)","nodes":[{"content":"A capturing group can capture zero, one, or more strings in a single match because of quantifiers.","pos":[0,98]},{"content":"(For more information, see <bpt id=\"p1\">[</bpt>Quantifiers<ept id=\"p1\">](~/docs/standard/base-types/quantifiers-in-regular-expressions.md)</ept>.) All the substrings matched by a single capturing group are available from the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName&gt;</ph> property.","pos":[99,376],"source":" (For more information, see [Quantifiers](~/docs/standard/base-types/quantifiers-in-regular-expressions.md).) All the substrings matched by a single capturing group are available from the <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName> property."},{"content":"Information about the last substring captured can be accessed directly from the <ph id=\"ph1\">`Value`</ph> and <ph id=\"ph2\">`Index`</ph> properties.","pos":[377,488],"source":" Information about the last substring captured can be accessed directly from the `Value` and `Index` properties."},{"content":"(That is, the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> instance is equivalent to the last item of the collection returned by the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A&gt;</ph> property, which reflects the last capture made by the capturing group.)","pos":[489,748],"source":" (That is, the <xref:System.Text.RegularExpressions.Group> instance is equivalent to the last item of the collection returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property, which reflects the last capture made by the capturing group.)"}]},{"pos":[755,1192],"content":"An example helps to clarify this relationship between a <xref:System.Text.RegularExpressions.Group> object and the <xref:System.Text.RegularExpressions.CaptureCollection?displayProperty=fullName> that is returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property. The regular expression pattern `(\\b(\\w+?)[,:;]?\\s?)+[?.!]` matches entire sentences. The regular expression is defined as shown in the following table.","nodes":[{"content":"An example helps to clarify this relationship between a <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object and the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.CaptureCollection?displayProperty=fullName&gt;</ph> that is returned by the <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A&gt;</ph> property.","pos":[0,285],"source":"An example helps to clarify this relationship between a <xref:System.Text.RegularExpressions.Group> object and the <xref:System.Text.RegularExpressions.CaptureCollection?displayProperty=fullName> that is returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property."},{"content":"The regular expression pattern <ph id=\"ph1\">`(\\b(\\w+?)[,:;]?\\s?)+[?.!]`</ph> matches entire sentences.","pos":[286,370],"source":" The regular expression pattern `(\\b(\\w+?)[,:;]?\\s?)+[?.!]` matches entire sentences."},{"content":"The regular expression is defined as shown in the following table.","pos":[371,437]}]},{"pos":[1199,1206],"content":"Pattern","nodes":[{"content":"Pattern","pos":[0,7]}]},{"pos":[1207,1218],"content":"Description","nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[1264,1299],"content":"Begin the match at a word boundary.","nodes":[{"content":"Begin the match at a word boundary.","pos":[0,35]}]},{"pos":[1313,1490],"content":"Match one or more word characters, but as few characters as possible. This is the second (inner) capturing group. (The first capturing group includes the `\\b` language element.)","nodes":[{"content":"Match one or more word characters, but as few characters as possible.","pos":[0,69]},{"content":"This is the second (inner) capturing group.","pos":[70,113]},{"content":"(The first capturing group includes the <ph id=\"ph1\">`\\b`</ph> language element.)","pos":[114,177],"source":" (The first capturing group includes the `\\b` language element.)"}]},{"pos":[1504,1565],"content":"Match zero or one occurrence of a comma, colon, or semicolon.","nodes":[{"content":"Match zero or one occurrence of a comma, colon, or semicolon.","pos":[0,61]}]},{"pos":[1576,1632],"content":"Match zero or one occurrence of a white-space character.","nodes":[{"content":"Match zero or one occurrence of a white-space character.","pos":[0,56]}]},{"pos":[1660,1841],"content":"Match the pattern consisting of a word boundary, one or more word characters, a punctuation symbol, and a white-space character one or more times. This is the first capturing group.","nodes":[{"content":"Match the pattern consisting of a word boundary, one or more word characters, a punctuation symbol, and a white-space character one or more times. This is the first capturing group.","pos":[0,181],"nodes":[{"content":"Match the pattern consisting of a word boundary, one or more word characters, a punctuation symbol, and a white-space character one or more times.","pos":[0,146]},{"content":"This is the first capturing group.","pos":[147,181]}]}]},{"pos":[1854,1924],"content":"Match any occurrence of a period, question mark, or exclamation point.","nodes":[{"content":"Match any occurrence of a period, question mark, or exclamation point.","pos":[0,70]}]},{"pos":[1932,2580],"content":"In this regular expression pattern, the subpattern `(\\w+?)` is designed to match multiple words within a sentence. However, the value of the <xref:System.Text.RegularExpressions.Group> object represents only the last match that `(\\w+?)` captures, whereas the <xref:System.Text.RegularExpressions.Group.Captures%2A> property returns a <xref:System.Text.RegularExpressions.CaptureCollection> that represents all captured text. As the output shows, the <xref:System.Text.RegularExpressions.CaptureCollection> for the second capturing group contains four objects. The last of these corresponds to the <xref:System.Text.RegularExpressions.Group> object.","nodes":[{"content":"In this regular expression pattern, the subpattern <ph id=\"ph1\">`(\\w+?)`</ph> is designed to match multiple words within a sentence.","pos":[0,114],"source":"In this regular expression pattern, the subpattern `(\\w+?)` is designed to match multiple words within a sentence."},{"content":"However, the value of the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object represents only the last match that <ph id=\"ph2\">`(\\w+?)`</ph> captures, whereas the <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A&gt;</ph> property returns a <ph id=\"ph4\">&lt;xref:System.Text.RegularExpressions.CaptureCollection&gt;</ph> that represents all captured text.","pos":[115,424],"source":" However, the value of the <xref:System.Text.RegularExpressions.Group> object represents only the last match that `(\\w+?)` captures, whereas the <xref:System.Text.RegularExpressions.Group.Captures%2A> property returns a <xref:System.Text.RegularExpressions.CaptureCollection> that represents all captured text."},{"content":"As the output shows, the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.CaptureCollection&gt;</ph> for the second capturing group contains four objects.","pos":[425,559],"source":" As the output shows, the <xref:System.Text.RegularExpressions.CaptureCollection> for the second capturing group contains four objects."},{"content":"The last of these corresponds to the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object.","pos":[560,648],"source":" The last of these corresponds to the <xref:System.Text.RegularExpressions.Group> object."}]},{"pos":[2587,2948],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Group.Class#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/cs/groupandcaptures1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Group.Class#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/vb/groupandcaptures1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Group.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/cs/groupandcaptures1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Group.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/vb/groupandcaptures1.vb#1)]"}],"pos":[708,3687],"yaml":true,"extradata":"MT"},{"content":"Gets a collection of all the captures matched by the capturing group, in innermost-leftmost-first order (or innermost-rightmost-first order if the regular expression is modified with the <xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\"></xref> option). The collection may have zero or more items.","nodes":[{"pos":[0,316],"content":"Gets a collection of all the captures matched by the capturing group, in innermost-leftmost-first order (or innermost-rightmost-first order if the regular expression is modified with the <xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\"></xref> option). The collection may have zero or more items.","nodes":[{"content":"Gets a collection of all the captures matched by the capturing group, in innermost-leftmost-first order (or innermost-rightmost-first order if the regular expression is modified with the <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\"&gt;&lt;/xref&gt;</ph> option).","pos":[0,272],"source":"Gets a collection of all the captures matched by the capturing group, in innermost-leftmost-first order (or innermost-rightmost-first order if the regular expression is modified with the <xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\"></xref> option)."},{"content":"The collection may have zero or more items.","pos":[273,316]}]}],"pos":[5847,6164],"yaml":true},{"content":"If a quantifier is not applied to a capturing group, the collection returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property contains a single <xref:System.Text.RegularExpressions.Capture> object that provides information about the same substring as the <xref:System.Text.RegularExpressions.Group> object. This is illustrated in the following example. It defines a regular expression, `\\b(\\w+)\\b`, that extracts a single word from a sentence. The <xref:System.Text.RegularExpressions.Group> object captures the word \"This\", and the single object in the <xref:System.Text.RegularExpressions.CaptureCollection> contains information about the same capture.  \n  \n [!code-csharp[System.Text.RegularExpressions.Group.Captures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Group.Captures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures1.vb#1)]  \n  \n The real utility of the <xref:System.Text.RegularExpressions.Group.Captures%2A> property occurs when a quantifier is applied to a capturing group so that the group captures multiple substrings in a single regular expression. In this case, the <xref:System.Text.RegularExpressions.Group> object contains information about the last captured substring, whereas the <xref:System.Text.RegularExpressions.Group.Captures%2A> property contains information about all the substrings captured by the group. In the following example, the regular expression `\\b(\\w+\\s*)+\\.` matches an entire sentence that ends in a period. The group `(\\w+\\s*)+` captures the individual words in the collection. Because the <xref:System.Text.RegularExpressions.Group> collection contains information only about the last captured substring, it captures the last word in the sentence, \"sentence\". However, each word captured by the group is available from the collection returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property.  \n  \n [!code-csharp[System.Text.RegularExpressions.Group.Captures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures2.cs#2)]\n [!code-vb[System.Text.RegularExpressions.Group.Captures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures2.vb#2)]","nodes":[{"pos":[0,677],"content":"If a quantifier is not applied to a capturing group, the collection returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property contains a single <xref:System.Text.RegularExpressions.Capture> object that provides information about the same substring as the <xref:System.Text.RegularExpressions.Group> object. This is illustrated in the following example. It defines a regular expression, `\\b(\\w+)\\b`, that extracts a single word from a sentence. The <xref:System.Text.RegularExpressions.Group> object captures the word \"This\", and the single object in the <xref:System.Text.RegularExpressions.CaptureCollection> contains information about the same capture.","nodes":[{"content":"If a quantifier is not applied to a capturing group, the collection returned by the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A&gt;</ph> property contains a single <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Capture&gt;</ph> object that provides information about the same substring as the <ph id=\"ph3\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object.","pos":[0,329],"source":"If a quantifier is not applied to a capturing group, the collection returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property contains a single <xref:System.Text.RegularExpressions.Capture> object that provides information about the same substring as the <xref:System.Text.RegularExpressions.Group> object."},{"content":"This is illustrated in the following example.","pos":[330,375]},{"content":"It defines a regular expression, <ph id=\"ph1\">`\\b(\\w+)\\b`</ph>, that extracts a single word from a sentence.","pos":[376,466],"source":" It defines a regular expression, `\\b(\\w+)\\b`, that extracts a single word from a sentence."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object captures the word \"This\", and the single object in the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.CaptureCollection&gt;</ph> contains information about the same capture.","pos":[467,677],"source":" The <xref:System.Text.RegularExpressions.Group> object captures the word \"This\", and the single object in the <xref:System.Text.RegularExpressions.CaptureCollection> contains information about the same capture."}]},{"pos":[684,1041],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Group.Captures#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures1.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Group.Captures#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures1.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Group.Captures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures1.cs#1)]\n [!code-vb[System.Text.RegularExpressions.Group.Captures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures1.vb#1)]"},{"pos":[1048,2068],"content":"The real utility of the <xref:System.Text.RegularExpressions.Group.Captures%2A> property occurs when a quantifier is applied to a capturing group so that the group captures multiple substrings in a single regular expression. In this case, the <xref:System.Text.RegularExpressions.Group> object contains information about the last captured substring, whereas the <xref:System.Text.RegularExpressions.Group.Captures%2A> property contains information about all the substrings captured by the group. In the following example, the regular expression `\\b(\\w+\\s*)+\\.` matches an entire sentence that ends in a period. The group `(\\w+\\s*)+` captures the individual words in the collection. Because the <xref:System.Text.RegularExpressions.Group> collection contains information only about the last captured substring, it captures the last word in the sentence, \"sentence\". However, each word captured by the group is available from the collection returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property.","nodes":[{"content":"The real utility of the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A&gt;</ph> property occurs when a quantifier is applied to a capturing group so that the group captures multiple substrings in a single regular expression.","pos":[0,224],"source":"The real utility of the <xref:System.Text.RegularExpressions.Group.Captures%2A> property occurs when a quantifier is applied to a capturing group so that the group captures multiple substrings in a single regular expression."},{"content":"In this case, the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> object contains information about the last captured substring, whereas the <ph id=\"ph2\">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A&gt;</ph> property contains information about all the substrings captured by the group.","pos":[225,495],"source":" In this case, the <xref:System.Text.RegularExpressions.Group> object contains information about the last captured substring, whereas the <xref:System.Text.RegularExpressions.Group.Captures%2A> property contains information about all the substrings captured by the group."},{"content":"In the following example, the regular expression <ph id=\"ph1\">`\\b(\\w+\\s*)+\\.`</ph> matches an entire sentence that ends in a period.","pos":[496,610],"source":" In the following example, the regular expression `\\b(\\w+\\s*)+\\.` matches an entire sentence that ends in a period."},{"content":"The group <ph id=\"ph1\">`(\\w+\\s*)+`</ph> captures the individual words in the collection.","pos":[611,681],"source":" The group `(\\w+\\s*)+` captures the individual words in the collection."},{"content":"Because the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group&gt;</ph> collection contains information only about the last captured substring, it captures the last word in the sentence, \"sentence\".","pos":[682,864],"source":" Because the <xref:System.Text.RegularExpressions.Group> collection contains information only about the last captured substring, it captures the last word in the sentence, \"sentence\"."},{"content":"However, each word captured by the group is available from the collection returned by the <ph id=\"ph1\">&lt;xref:System.Text.RegularExpressions.Group.Captures%2A&gt;</ph> property.","pos":[865,1020],"source":" However, each word captured by the group is available from the collection returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property."}]},{"pos":[2075,2432],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Text.RegularExpressions.Group.Captures#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures2.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Text.RegularExpressions.Group.Captures#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures2.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Text.RegularExpressions.Group.Captures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures2.cs#2)]\n [!code-vb[System.Text.RegularExpressions.Group.Captures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures2.vb#2)]"}],"pos":[6175,8631],"yaml":true,"extradata":"MT"},{"content":"The collection of substrings matched by the group.","nodes":[{"pos":[0,50],"content":"The collection of substrings matched by the group.","nodes":[{"content":"The collection of substrings matched by the group.","pos":[0,50]}]}],"pos":[8820,8871],"yaml":true},{"content":"Returns the name of the capturing group representing by the current instance.","nodes":[{"pos":[0,77],"content":"Returns the name of the capturing group representing by the current instance.","nodes":[{"content":"Returns the name of the capturing group representing by the current instance.","pos":[0,77]}]}],"pos":[10363,10441],"yaml":true},{"content":"The name of the capturing group represented by the current instance.","nodes":[{"pos":[0,68],"content":"The name of the capturing group represented by the current instance.","nodes":[{"content":"The name of the capturing group represented by the current instance.","pos":[0,68]}]}],"pos":[10549,10618],"yaml":true},{"content":"Gets a value indicating whether the match is successful.","nodes":[{"pos":[0,56],"content":"Gets a value indicating whether the match is successful.","nodes":[{"content":"Gets a value indicating whether the match is successful.","pos":[0,56]}]}],"pos":[11436,11493],"yaml":true},{"content":"The `Success` property is true if at least one substring was captured by this group. It is equivalent to the Boolean expression (Group.Captures.Count > 0).","nodes":[{"pos":[0,155],"content":"The `Success` property is true if at least one substring was captured by this group. It is equivalent to the Boolean expression (Group.Captures.Count > 0).","nodes":[{"content":"The <ph id=\"ph1\">`Success`</ph> property is true if at least one substring was captured by this group.","pos":[0,84],"source":"The `Success` property is true if at least one substring was captured by this group."},{"content":"It is equivalent to the Boolean expression (Group.Captures.Count &gt; 0).","pos":[85,155],"source":" It is equivalent to the Boolean expression (Group.Captures.Count > 0)."}]}],"pos":[11504,11660],"yaml":true,"extradata":"MT"},{"content":"`true` if the match is successful; otherwise, `false`.","nodes":[{"pos":[0,54],"content":"<ph id=\"ph1\">`true`</ph> if the match is successful; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the match is successful; otherwise, `false`."}],"pos":[11770,11827],"yaml":true},{"content":"Returns a `Group` object equivalent to the one supplied that is safe to share between multiple threads.","nodes":[{"pos":[0,103],"content":"Returns a <ph id=\"ph1\">`Group`</ph> object equivalent to the one supplied that is safe to share between multiple threads.","source":"Returns a `Group` object equivalent to the one supplied that is safe to share between multiple threads."}],"pos":[13515,13619],"yaml":true},{"content":"The input <xref href=\"System.Text.RegularExpressions.Group\"></xref> object.","nodes":[{"pos":[0,75],"content":"The input <ph id=\"ph1\">&lt;xref href=\"System.Text.RegularExpressions.Group\"&gt;&lt;/xref&gt;</ph> object.","source":"The input <xref href=\"System.Text.RegularExpressions.Group\"></xref> object."}],"pos":[13852,13928],"yaml":true},{"content":"A regular expression `Group` object.","nodes":[{"pos":[0,36],"content":"A regular expression <ph id=\"ph1\">`Group`</ph> object.","source":"A regular expression `Group` object."}],"pos":[14008,14045],"yaml":true},{"content":"<code>inner</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;inner&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>inner</code> is `null`."}],"pos":[14224,14254],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.RegularExpressions.Group\n  commentId: T:System.Text.RegularExpressions.Group\n  id: Group\n  children:\n  - System.Text.RegularExpressions.Group.Captures\n  - System.Text.RegularExpressions.Group.Name\n  - System.Text.RegularExpressions.Group.Success\n  - System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)\n  langs:\n  - csharp\n  name: Group\n  nameWithType: Group\n  fullName: System.Text.RegularExpressions.Group\n  type: Class\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Represents the results from a single capturing group.\n  remarks: \"A capturing group can capture zero, one, or more strings in a single match because of quantifiers. (For more information, see [Quantifiers](~/docs/standard/base-types/quantifiers-in-regular-expressions.md).) All the substrings matched by a single capturing group are available from the <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=fullName> property. Information about the last substring captured can be accessed directly from the `Value` and `Index` properties. (That is, the <xref:System.Text.RegularExpressions.Group> instance is equivalent to the last item of the collection returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property, which reflects the last capture made by the capturing group.)  \\n  \\n An example helps to clarify this relationship between a <xref:System.Text.RegularExpressions.Group> object and the <xref:System.Text.RegularExpressions.CaptureCollection?displayProperty=fullName> that is returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property. The regular expression pattern `(\\\\b(\\\\w+?)[,:;]?\\\\s?)+[?.!]` matches entire sentences. The regular expression is defined as shown in the following table.  \\n  \\n|Pattern|Description|  \\n|-------------|-----------------|  \\n|`\\\\b`|Begin the match at a word boundary.|  \\n|`(\\\\w+?)`|Match one or more word characters, but as few characters as possible. This is the second (inner) capturing group. (The first capturing group includes the `\\\\b` language element.)|  \\n|`[,:;]?`|Match zero or one occurrence of a comma, colon, or semicolon.|  \\n|`\\\\s?`|Match zero or one occurrence of a white-space character.|  \\n|`(\\\\b(\\\\w+?)[,:;]?\\\\s?)+`|Match the pattern consisting of a word boundary, one or more word characters, a punctuation symbol, and a white-space character one or more times. This is the first capturing group.|  \\n|`[?.!]`|Match any occurrence of a period, question mark, or exclamation point.|  \\n  \\n In this regular expression pattern, the subpattern `(\\\\w+?)` is designed to match multiple words within a sentence. However, the value of the <xref:System.Text.RegularExpressions.Group> object represents only the last match that `(\\\\w+?)` captures, whereas the <xref:System.Text.RegularExpressions.Group.Captures%2A> property returns a <xref:System.Text.RegularExpressions.CaptureCollection> that represents all captured text. As the output shows, the <xref:System.Text.RegularExpressions.CaptureCollection> for the second capturing group contains four objects. The last of these corresponds to the <xref:System.Text.RegularExpressions.Group> object.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Group.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/cs/groupandcaptures1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Group.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.class/vb/groupandcaptures1.vb#1)]\"\n  syntax:\n    content: 'public class Group : System.Text.RegularExpressions.Capture'\n  inheritance:\n  - System.Object\n  - System.Text.RegularExpressions.Capture\n  derivedClasses:\n  - System.Text.RegularExpressions.Match\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Text.RegularExpressions.Capture.Index\n  - System.Text.RegularExpressions.Capture.Length\n  - System.Text.RegularExpressions.Capture.ToString\n  - System.Text.RegularExpressions.Capture.Value\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Group.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Group.Captures\n  commentId: P:System.Text.RegularExpressions.Group.Captures\n  id: Captures\n  parent: System.Text.RegularExpressions.Group\n  langs:\n  - csharp\n  name: Captures\n  nameWithType: Group.Captures\n  fullName: Group.Captures\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Gets a collection of all the captures matched by the capturing group, in innermost-leftmost-first order (or innermost-rightmost-first order if the regular expression is modified with the <xref href=\"System.Text.RegularExpressions.RegexOptions.RightToLeft\"></xref> option). The collection may have zero or more items.\n  remarks: \"If a quantifier is not applied to a capturing group, the collection returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property contains a single <xref:System.Text.RegularExpressions.Capture> object that provides information about the same substring as the <xref:System.Text.RegularExpressions.Group> object. This is illustrated in the following example. It defines a regular expression, `\\\\b(\\\\w+)\\\\b`, that extracts a single word from a sentence. The <xref:System.Text.RegularExpressions.Group> object captures the word \\\"This\\\", and the single object in the <xref:System.Text.RegularExpressions.CaptureCollection> contains information about the same capture.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Group.Captures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures1.cs#1)]\\n [!code-vb[System.Text.RegularExpressions.Group.Captures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures1.vb#1)]  \\n  \\n The real utility of the <xref:System.Text.RegularExpressions.Group.Captures%2A> property occurs when a quantifier is applied to a capturing group so that the group captures multiple substrings in a single regular expression. In this case, the <xref:System.Text.RegularExpressions.Group> object contains information about the last captured substring, whereas the <xref:System.Text.RegularExpressions.Group.Captures%2A> property contains information about all the substrings captured by the group. In the following example, the regular expression `\\\\b(\\\\w+\\\\s*)+\\\\.` matches an entire sentence that ends in a period. The group `(\\\\w+\\\\s*)+` captures the individual words in the collection. Because the <xref:System.Text.RegularExpressions.Group> collection contains information only about the last captured substring, it captures the last word in the sentence, \\\"sentence\\\". However, each word captured by the group is available from the collection returned by the <xref:System.Text.RegularExpressions.Group.Captures%2A> property.  \\n  \\n [!code-csharp[System.Text.RegularExpressions.Group.Captures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/cs/captures2.cs#2)]\\n [!code-vb[System.Text.RegularExpressions.Group.Captures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.group.captures/vb/captures2.vb#2)]\"\n  syntax:\n    content: public System.Text.RegularExpressions.CaptureCollection Captures { get; }\n    return:\n      type: System.Text.RegularExpressions.CaptureCollection\n      description: The collection of substrings matched by the group.\n  overload: System.Text.RegularExpressions.Group.Captures*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Group.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Group.Name\n  commentId: P:System.Text.RegularExpressions.Group.Name\n  id: Name\n  parent: System.Text.RegularExpressions.Group\n  langs:\n  - csharp\n  name: Name\n  nameWithType: Group.Name\n  fullName: Group.Name\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  namespace: System.Text.RegularExpressions\n  summary: Returns the name of the capturing group representing by the current instance.\n  syntax:\n    content: public string Name { get; }\n    return:\n      type: System.String\n      description: The name of the capturing group represented by the current instance.\n  overload: System.Text.RegularExpressions.Group.Name*\n  exceptions: []\n  version:\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  monikers:\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Group.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Group.Success\n  commentId: P:System.Text.RegularExpressions.Group.Success\n  id: Success\n  parent: System.Text.RegularExpressions.Group\n  langs:\n  - csharp\n  name: Success\n  nameWithType: Group.Success\n  fullName: Group.Success\n  type: Property\n  assemblies:\n  - System.Text.RegularExpressions\n  - System\n  - netstandard\n  namespace: System.Text.RegularExpressions\n  summary: Gets a value indicating whether the match is successful.\n  remarks: The `Success` property is true if at least one substring was captured by this group. It is equivalent to the Boolean expression (Group.Captures.Count > 0).\n  syntax:\n    content: public bool Success { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the match is successful; otherwise, `false`.'\n  overload: System.Text.RegularExpressions.Group.Success*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Group.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)\n  commentId: M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)\n  id: Synchronized(System.Text.RegularExpressions.Group)\n  parent: System.Text.RegularExpressions.Group\n  langs:\n  - csharp\n  name: Synchronized(Group)\n  nameWithType: Group.Synchronized(Group)\n  fullName: Group.Synchronized(Group)\n  type: Method\n  assemblies:\n  - System\n  - netstandard\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: Returns a `Group` object equivalent to the one supplied that is safe to share between multiple threads.\n  syntax:\n    content: public static System.Text.RegularExpressions.Group Synchronized (System.Text.RegularExpressions.Group inner);\n    parameters:\n    - id: inner\n      type: System.Text.RegularExpressions.Group\n      description: The input <xref href=\"System.Text.RegularExpressions.Group\"></xref> object.\n    return:\n      type: System.Text.RegularExpressions.Group\n      description: A regular expression `Group` object.\n  overload: System.Text.RegularExpressions.Group.Synchronized*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>inner</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Group.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Text.RegularExpressions.Capture\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: Capture\n  nameWithType: Capture\n  fullName: System.Text.RegularExpressions.Capture\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Text.RegularExpressions.Group.Captures\n  parent: System.Text.RegularExpressions.Group\n  isExternal: false\n  name: Captures\n  nameWithType: Group.Captures\n  fullName: Group.Captures\n- uid: System.Text.RegularExpressions.CaptureCollection\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: CaptureCollection\n  nameWithType: CaptureCollection\n  fullName: System.Text.RegularExpressions.CaptureCollection\n- uid: System.Text.RegularExpressions.Group.Name\n  parent: System.Text.RegularExpressions.Group\n  isExternal: false\n  name: Name\n  nameWithType: Group.Name\n  fullName: Group.Name\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Text.RegularExpressions.Group.Success\n  parent: System.Text.RegularExpressions.Group\n  isExternal: false\n  name: Success\n  nameWithType: Group.Success\n  fullName: Group.Success\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)\n  parent: System.Text.RegularExpressions.Group\n  isExternal: false\n  name: Synchronized(Group)\n  nameWithType: Group.Synchronized(Group)\n  fullName: Group.Synchronized(Group)\n- uid: System.Text.RegularExpressions.Group\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: Group\n  nameWithType: Group\n  fullName: System.Text.RegularExpressions.Group\n- uid: System.Text.RegularExpressions.Group.Captures*\n  parent: System.Text.RegularExpressions.Group\n  isExternal: false\n  name: Captures\n  nameWithType: Group.Captures\n  fullName: Group.Captures\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Group.xml\n- uid: System.Text.RegularExpressions.Group.Name*\n  parent: System.Text.RegularExpressions.Group\n  isExternal: false\n  name: Name\n  nameWithType: Group.Name\n  fullName: Group.Name\n  monikers:\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Group.xml\n- uid: System.Text.RegularExpressions.Group.Success*\n  parent: System.Text.RegularExpressions.Group\n  isExternal: false\n  name: Success\n  nameWithType: Group.Success\n  fullName: Group.Success\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Group.xml\n- uid: System.Text.RegularExpressions.Group.Synchronized*\n  parent: System.Text.RegularExpressions.Group\n  isExternal: false\n  name: Synchronized\n  nameWithType: Group.Synchronized\n  fullName: Group.Synchronized\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text.RegularExpressions/Group.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Text.RegularExpressions.Capture.ToString\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: ToString()\n  nameWithType: Capture.ToString()\n  fullName: Capture.ToString()\n- uid: System.Text.RegularExpressions.Capture.Index\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: Index\n  nameWithType: Capture.Index\n  fullName: Capture.Index\n- uid: System.Text.RegularExpressions.Capture.Length\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: Length\n  nameWithType: Capture.Length\n  fullName: Capture.Length\n- uid: System.Text.RegularExpressions.Capture.Value\n  parent: System.Text.RegularExpressions.Capture\n  isExternal: false\n  name: Value\n  nameWithType: Capture.Value\n  fullName: Capture.Value\n"}