{"nodes":[{"content":"The CMK Store provider implementation for using  Microsoft CAPI based Cryptographic Service Providers (CSP) with [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx).","nodes":[{"pos":[0,182],"content":"The CMK Store provider implementation for using  Microsoft CAPI based Cryptographic Service Providers (CSP) with <bpt id=\"p1\">[</bpt>Always Encrypted<ept id=\"p1\">](https://msdn.microsoft.com/library/mt163865.aspx)</ept>.","source":"The CMK Store provider implementation for using  Microsoft CAPI based Cryptographic Service Providers (CSP) with [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx)."}],"pos":[861,1044],"yaml":true},{"content":"Enables storing Always Encrypted column master key keys in a store, such as a hardware security module (HSM), that supports the Microsoft CAPI based Cryptographic Service Providers (CSP).","nodes":[{"pos":[0,187],"content":"Enables storing Always Encrypted column master key keys in a store, such as a hardware security module (HSM), that supports the Microsoft CAPI based Cryptographic Service Providers (CSP).","nodes":[{"content":"Enables storing Always Encrypted column master key keys in a store, such as a hardware security module (HSM), that supports the Microsoft CAPI based Cryptographic Service Providers (CSP).","pos":[0,187]}]}],"pos":[1055,1243],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlColumnEncryptionCspProvider\"></xref> class.","nodes":[{"pos":[0,114],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Data.SqlClient.SqlColumnEncryptionCspProvider\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlColumnEncryptionCspProvider\"></xref> class."}],"pos":[2686,2801],"yaml":true},{"content":"Decrypts the given encrypted value using an asymmetric key specified by the key path and algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CSP provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","nodes":[{"pos":[0,303],"content":"Decrypts the given encrypted value using an asymmetric key specified by the key path and algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CSP provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","nodes":[{"content":"Decrypts the given encrypted value using an asymmetric key specified by the key path and algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CSP provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","pos":[0,303],"nodes":[{"content":"Decrypts the given encrypted value using an asymmetric key specified by the key path and algorithm.","pos":[0,99]},{"content":"The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CSP provider.","pos":[100,236]},{"content":"The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","pos":[237,303]}]}]}],"pos":[4121,4425],"yaml":true},{"content":"The master key path.","nodes":[{"pos":[0,20],"content":"The master key path.","nodes":[{"content":"The master key path.","pos":[0,20]}]}],"pos":[4672,4693],"yaml":true},{"content":"The encryption algorithm.","nodes":[{"pos":[0,25],"content":"The encryption algorithm.","nodes":[{"content":"The encryption algorithm.","pos":[0,25]}]}],"pos":[4768,4794],"yaml":true},{"content":"The encrypted column encryption key.","nodes":[{"pos":[0,36],"content":"The encrypted column encryption key.","nodes":[{"content":"The encrypted column encryption key.","pos":[0,36]}]}],"pos":[4878,4915],"yaml":true},{"content":"The decrypted column encryption key.","nodes":[{"pos":[0,36],"content":"The decrypted column encryption key.","nodes":[{"content":"The decrypted column encryption key.","pos":[0,36]}]}],"pos":[4972,5009],"yaml":true},{"content":"Encrypts the given plain text column encryption key using an asymmetric key specified by the key path and the specified algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CSP provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","nodes":[{"pos":[0,334],"content":"Encrypts the given plain text column encryption key using an asymmetric key specified by the key path and the specified algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CSP provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","nodes":[{"content":"Encrypts the given plain text column encryption key using an asymmetric key specified by the key path and the specified algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CSP provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","pos":[0,334],"nodes":[{"content":"Encrypts the given plain text column encryption key using an asymmetric key specified by the key path and the specified algorithm.","pos":[0,130]},{"content":"The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CSP provider.","pos":[131,267]},{"content":"The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.","pos":[268,334]}]}]}],"pos":[6266,6601],"yaml":true},{"content":"The master key path.","nodes":[{"pos":[0,20],"content":"The master key path.","nodes":[{"content":"The master key path.","pos":[0,20]}]}],"pos":[6839,6860],"yaml":true},{"content":"The encryption algorithm.","nodes":[{"pos":[0,25],"content":"The encryption algorithm.","nodes":[{"content":"The encryption algorithm.","pos":[0,25]}]}],"pos":[6935,6961],"yaml":true},{"content":"The encrypted column encryption key.","nodes":[{"pos":[0,36],"content":"The encrypted column encryption key.","nodes":[{"content":"The encrypted column encryption key.","pos":[0,36]}]}],"pos":[7036,7073],"yaml":true},{"content":"The encrypted column encryption key.","nodes":[{"pos":[0,36],"content":"The encrypted column encryption key.","nodes":[{"content":"The encrypted column encryption key.","pos":[0,36]}]}],"pos":[7130,7167],"yaml":true},{"content":"A constant string for the provider name 'MSSQL_CSP_PROVIDER'.","nodes":[{"pos":[0,61],"content":"A constant string for the provider name 'MSSQL_CSP_PROVIDER'.","nodes":[{"content":"A constant string for the provider name 'MSSQL_CSP_PROVIDER'.","pos":[0,61]}]}],"pos":[8138,8200],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.SqlClient.SqlColumnEncryptionCspProvider\n  commentId: T:System.Data.SqlClient.SqlColumnEncryptionCspProvider\n  id: SqlColumnEncryptionCspProvider\n  children:\n  - System.Data.SqlClient.SqlColumnEncryptionCspProvider.#ctor\n  - System.Data.SqlClient.SqlColumnEncryptionCspProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  - System.Data.SqlClient.SqlColumnEncryptionCspProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  - System.Data.SqlClient.SqlColumnEncryptionCspProvider.ProviderName\n  langs:\n  - csharp\n  name: SqlColumnEncryptionCspProvider\n  nameWithType: SqlColumnEncryptionCspProvider\n  fullName: System.Data.SqlClient.SqlColumnEncryptionCspProvider\n  type: Class\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: The CMK Store provider implementation for using  Microsoft CAPI based Cryptographic Service Providers (CSP) with [Always Encrypted](https://msdn.microsoft.com/library/mt163865.aspx).\n  remarks: Enables storing Always Encrypted column master key keys in a store, such as a hardware security module (HSM), that supports the Microsoft CAPI based Cryptographic Service Providers (CSP).\n  syntax:\n    content: 'public class SqlColumnEncryptionCspProvider : System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider'\n  inheritance:\n  - System.Object\n  - System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCspProvider.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlColumnEncryptionCspProvider.#ctor\n  commentId: M:System.Data.SqlClient.SqlColumnEncryptionCspProvider.#ctor\n  id: '#ctor'\n  parent: System.Data.SqlClient.SqlColumnEncryptionCspProvider\n  langs:\n  - csharp\n  name: SqlColumnEncryptionCspProvider()\n  nameWithType: SqlColumnEncryptionCspProvider.SqlColumnEncryptionCspProvider()\n  fullName: SqlColumnEncryptionCspProvider.SqlColumnEncryptionCspProvider()\n  type: Constructor\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlColumnEncryptionCspProvider\"></xref> class.\n  syntax:\n    content: public SqlColumnEncryptionCspProvider ();\n    parameters: []\n  overload: System.Data.SqlClient.SqlColumnEncryptionCspProvider.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCspProvider.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlColumnEncryptionCspProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  commentId: M:System.Data.SqlClient.SqlColumnEncryptionCspProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  id: DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  parent: System.Data.SqlClient.SqlColumnEncryptionCspProvider\n  langs:\n  - csharp\n  name: DecryptColumnEncryptionKey(String, String, Byte[])\n  nameWithType: SqlColumnEncryptionCspProvider.DecryptColumnEncryptionKey(String, String, Byte[])\n  fullName: SqlColumnEncryptionCspProvider.DecryptColumnEncryptionKey(String, String, Byte[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Decrypts the given encrypted value using an asymmetric key specified by the key path and algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CSP provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.\n  syntax:\n    content: public override byte[] DecryptColumnEncryptionKey (string masterKeyPath, string encryptionAlgorithm, byte[] encryptedColumnEncryptionKey);\n    parameters:\n    - id: masterKeyPath\n      type: System.String\n      description: The master key path.\n    - id: encryptionAlgorithm\n      type: System.String\n      description: The encryption algorithm.\n    - id: encryptedColumnEncryptionKey\n      type: System.Byte[]\n      description: The encrypted column encryption key.\n    return:\n      type: System.Byte[]\n      description: The decrypted column encryption key.\n  overload: System.Data.SqlClient.SqlColumnEncryptionCspProvider.DecryptColumnEncryptionKey*\n  exceptions: []\n  version:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCspProvider.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlColumnEncryptionCspProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  commentId: M:System.Data.SqlClient.SqlColumnEncryptionCspProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  id: EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  parent: System.Data.SqlClient.SqlColumnEncryptionCspProvider\n  langs:\n  - csharp\n  name: EncryptColumnEncryptionKey(String, String, Byte[])\n  nameWithType: SqlColumnEncryptionCspProvider.EncryptColumnEncryptionKey(String, String, Byte[])\n  fullName: SqlColumnEncryptionCspProvider.EncryptColumnEncryptionKey(String, String, Byte[])\n  type: Method\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: Encrypts the given plain text column encryption key using an asymmetric key specified by the key path and the specified algorithm. The key path will be in the format of [ProviderName]/KeyIdentifier and should be an asymmetric key stored in the specified CSP provider. The valid algorithm used to encrypt/decrypt the CEK is 'RSA_OAEP'.\n  syntax:\n    content: public override byte[] EncryptColumnEncryptionKey (string masterKeyPath, string encryptionAlgorithm, byte[] columnEncryptionKey);\n    parameters:\n    - id: masterKeyPath\n      type: System.String\n      description: The master key path.\n    - id: encryptionAlgorithm\n      type: System.String\n      description: The encryption algorithm.\n    - id: columnEncryptionKey\n      type: System.Byte[]\n      description: The encrypted column encryption key.\n    return:\n      type: System.Byte[]\n      description: The encrypted column encryption key.\n  overload: System.Data.SqlClient.SqlColumnEncryptionCspProvider.EncryptColumnEncryptionKey*\n  exceptions: []\n  version:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCspProvider.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.SqlClient.SqlColumnEncryptionCspProvider.ProviderName\n  commentId: F:System.Data.SqlClient.SqlColumnEncryptionCspProvider.ProviderName\n  id: ProviderName\n  parent: System.Data.SqlClient.SqlColumnEncryptionCspProvider\n  langs:\n  - csharp\n  name: ProviderName\n  nameWithType: SqlColumnEncryptionCspProvider.ProviderName\n  fullName: SqlColumnEncryptionCspProvider.ProviderName\n  type: Field\n  assemblies:\n  - System.Data\n  namespace: System.Data.SqlClient\n  summary: A constant string for the provider name 'MSSQL_CSP_PROVIDER'.\n  syntax:\n    content: public const string ProviderName;\n    return:\n      type: System.String\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCspProvider.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\nreferences:\n- uid: System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: SqlColumnEncryptionKeyStoreProvider\n  nameWithType: SqlColumnEncryptionKeyStoreProvider\n  fullName: System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider\n- uid: System.Data.SqlClient.SqlColumnEncryptionCspProvider.#ctor\n  parent: System.Data.SqlClient.SqlColumnEncryptionCspProvider\n  isExternal: false\n  name: SqlColumnEncryptionCspProvider()\n  nameWithType: SqlColumnEncryptionCspProvider.SqlColumnEncryptionCspProvider()\n  fullName: SqlColumnEncryptionCspProvider.SqlColumnEncryptionCspProvider()\n- uid: System.Data.SqlClient.SqlColumnEncryptionCspProvider.DecryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  parent: System.Data.SqlClient.SqlColumnEncryptionCspProvider\n  isExternal: false\n  name: DecryptColumnEncryptionKey(String, String, Byte[])\n  nameWithType: SqlColumnEncryptionCspProvider.DecryptColumnEncryptionKey(String, String, Byte[])\n  fullName: SqlColumnEncryptionCspProvider.DecryptColumnEncryptionKey(String, String, Byte[])\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Data.SqlClient.SqlColumnEncryptionCspProvider.EncryptColumnEncryptionKey(System.String,System.String,System.Byte[])\n  parent: System.Data.SqlClient.SqlColumnEncryptionCspProvider\n  isExternal: false\n  name: EncryptColumnEncryptionKey(String, String, Byte[])\n  nameWithType: SqlColumnEncryptionCspProvider.EncryptColumnEncryptionKey(String, String, Byte[])\n  fullName: SqlColumnEncryptionCspProvider.EncryptColumnEncryptionKey(String, String, Byte[])\n- uid: System.Data.SqlClient.SqlColumnEncryptionCspProvider.ProviderName\n  parent: System.Data.SqlClient.SqlColumnEncryptionCspProvider\n  isExternal: false\n  name: ProviderName\n  nameWithType: SqlColumnEncryptionCspProvider.ProviderName\n  fullName: SqlColumnEncryptionCspProvider.ProviderName\n- uid: System.Data.SqlClient.SqlColumnEncryptionCspProvider.#ctor*\n  parent: System.Data.SqlClient.SqlColumnEncryptionCspProvider\n  isExternal: false\n  name: SqlColumnEncryptionCspProvider\n  nameWithType: SqlColumnEncryptionCspProvider.SqlColumnEncryptionCspProvider\n  fullName: SqlColumnEncryptionCspProvider.SqlColumnEncryptionCspProvider\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCspProvider.xml\n- uid: System.Data.SqlClient.SqlColumnEncryptionCspProvider.DecryptColumnEncryptionKey*\n  parent: System.Data.SqlClient.SqlColumnEncryptionCspProvider\n  isExternal: false\n  name: DecryptColumnEncryptionKey\n  nameWithType: SqlColumnEncryptionCspProvider.DecryptColumnEncryptionKey\n  fullName: SqlColumnEncryptionCspProvider.DecryptColumnEncryptionKey\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCspProvider.xml\n- uid: System.Data.SqlClient.SqlColumnEncryptionCspProvider.EncryptColumnEncryptionKey*\n  parent: System.Data.SqlClient.SqlColumnEncryptionCspProvider\n  isExternal: false\n  name: EncryptColumnEncryptionKey\n  nameWithType: SqlColumnEncryptionCspProvider.EncryptColumnEncryptionKey\n  fullName: SqlColumnEncryptionCspProvider.EncryptColumnEncryptionKey\n  monikers:\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlColumnEncryptionCspProvider.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}