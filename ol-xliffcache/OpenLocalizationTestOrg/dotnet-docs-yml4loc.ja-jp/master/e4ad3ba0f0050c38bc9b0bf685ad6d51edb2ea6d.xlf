<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e4ad3ba0f0050c38bc9b0bf685ad6d51edb2ea6d</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Microsoft.VisualBasic.CompilerServices.FlowControl.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">6bcb9e670550854dba2a3ca2747910615b70a7b5</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d1c364b9527d586c4a016e2781932879e736cc45</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Provides services to the Visual Basic compiler for compiling <ph id="ph1">`For...Next`</ph> and <ph id="ph2">`For Each`</ph> loops.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>Checks for a synchronization lock on the specified type.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>The data type for which to check for synchronization lock.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Gets the enumerator for an array being iterated over in a <ph id="ph1">`For Each`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>An array being iterated over in a <ph id="ph1">`For Each`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>The enumerator for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">ary</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Gets the enumerator for an object being iterated over in a <ph id="ph1">`For Each`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>An object being iterated over in a <ph id="ph1">`For Each`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>The enumerator for <bpt id="p1">&lt;code&gt;</bpt><ph id="ph1">obj</ph><ept id="p1">&lt;/code&gt;</ept>.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>Sets a reference to the next object in a <ph id="ph1">`For Each`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>The range variable of the <ph id="ph1">`For Each`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>The <ph id="ph1">&lt;xref href="System.Collections.IEnumerator"&gt;&lt;/xref&gt;</ph> of the object being iterated over in the <ph id="ph2">`For Each`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`True`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">obj</ph><ept id="p1">&lt;/code&gt;</ept> refers to the next object; <ph id="ph3">`False`</ph> if there are no more objects and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph4">obj</ph><ept id="p2">&lt;/code&gt;</ept> is <ph id="ph5">`Nothing`</ph>.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>Initializes a <ph id="ph1">`For...Next`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>The loop counter variable.</source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>The initial value of the loop counter.</source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">`To`</ph> option.</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>The value of the <ph id="ph1">`Step`</ph> option.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An object that contains verified values for loop values.</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>The counter value for the next loop iteration.</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`False`</ph> if the loop has terminated; otherwise, <ph id="ph2">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Checks for valid values for the loop counter, <ph id="ph1">`Step`</ph>, and <ph id="ph2">`To`</ph> values.</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Decimal`</ph> value that represents the initial value passed for the loop counter variable.</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Decimal`</ph> value that represents the value passed by using the <ph id="ph2">`To`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Decimal`</ph> value that represents the value passed by using the <ph id="ph2">`Step`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`True`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">StepValue</ph><ept id="p1">&lt;/code&gt;</ept> is greater than zero and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p2">&lt;/code&gt;</ept> is less than or equal to <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">limit</ph><ept id="p3">&lt;/code&gt;</ept>, or if <bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">StepValue</ph><ept id="p4">&lt;/code&gt;</ept> is less than or equal to zero and <bpt id="p5">&lt;code&gt;</bpt><ph id="ph6">count</ph><ept id="p5">&lt;/code&gt;</ept> is greater than or equal to <bpt id="p6">&lt;code&gt;</bpt><ph id="ph7">limit</ph><ept id="p6">&lt;/code&gt;</ept>; otherwise, <ph id="ph8">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Increments a <ph id="ph1">`For...Next`</ph> loop.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The loop counter variable.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>An object that contains verified values for loop values.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>The counter value for the next loop iteration.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`False`</ph> if the loop has terminated; otherwise, <ph id="ph2">`True`</ph>.</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>Checks for valid values for the loop counter, <ph id="ph1">`Step`</ph>, and <ph id="ph2">`To`</ph> values.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Single`</ph> value that represents the initial value passed for the loop counter variable.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Single`</ph> value that represents the value passed by using the <ph id="ph2">`To`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Single`</ph> value that represents the value passed by using the <ph id="ph2">`Step`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`True`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">StepValue</ph><ept id="p1">&lt;/code&gt;</ept> is greater than zero and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p2">&lt;/code&gt;</ept> is less than or equal to <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">limit</ph><ept id="p3">&lt;/code&gt;</ept>, or if <bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">StepValue</ph><ept id="p4">&lt;/code&gt;</ept> is less than or equal to zero and <bpt id="p5">&lt;code&gt;</bpt><ph id="ph6">count</ph><ept id="p5">&lt;/code&gt;</ept> is greater than or equal to <bpt id="p6">&lt;code&gt;</bpt><ph id="ph7">limit</ph><ept id="p6">&lt;/code&gt;</ept>; otherwise, <ph id="ph8">`False`</ph>.</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>Checks for valid values for the loop counter, <ph id="ph1">`Step`</ph>, and <ph id="ph2">`To`</ph> values.</source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Double`</ph> value that represents the initial value passed for the loop counter variable.</source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Double`</ph> value that represents the value passed by using the <ph id="ph2">`To`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>Required.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>A <ph id="ph1">`Double`</ph> value that represents the value passed by using the <ph id="ph2">`Step`</ph> keyword.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source><ph id="ph1">`True`</ph> if <bpt id="p1">&lt;code&gt;</bpt><ph id="ph2">StepValue</ph><ept id="p1">&lt;/code&gt;</ept> is greater than zero and <bpt id="p2">&lt;code&gt;</bpt><ph id="ph3">count</ph><ept id="p2">&lt;/code&gt;</ept> is less than or equal to <bpt id="p3">&lt;code&gt;</bpt><ph id="ph4">limit</ph><ept id="p3">&lt;/code&gt;</ept>, or if <bpt id="p4">&lt;code&gt;</bpt><ph id="ph5">StepValue</ph><ept id="p4">&lt;/code&gt;</ept> is less than or equal to zero and <bpt id="p5">&lt;code&gt;</bpt><ph id="ph6">count</ph><ept id="p5">&lt;/code&gt;</ept> is greater than or equal to <bpt id="p6">&lt;code&gt;</bpt><ph id="ph7">limit</ph><ept id="p6">&lt;/code&gt;</ept>; otherwise, <ph id="ph8">`False`</ph>.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>