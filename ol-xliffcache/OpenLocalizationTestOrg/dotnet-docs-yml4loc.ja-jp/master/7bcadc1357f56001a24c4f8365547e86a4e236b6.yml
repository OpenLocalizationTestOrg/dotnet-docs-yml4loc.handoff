### YamlMime:ManagedReference
items:
- uid: System.Text.UTF32Encoding
  commentId: T:System.Text.UTF32Encoding
  id: UTF32Encoding
  children:
  - System.Text.UTF32Encoding.#ctor
  - System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)
  - System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)
  - System.Text.UTF32Encoding.Equals(System.Object)
  - System.Text.UTF32Encoding.GetByteCount(System.String)
  - System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)
  - System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  - System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)
  - System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  - System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - System.Text.UTF32Encoding.GetDecoder
  - System.Text.UTF32Encoding.GetEncoder
  - System.Text.UTF32Encoding.GetHashCode
  - System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  - System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  - System.Text.UTF32Encoding.GetPreamble
  - System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: UTF32Encoding
  nameWithType: UTF32Encoding
  fullName: System.Text.UTF32Encoding
  type: Class
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Represents a UTF-32 encoding of Unicode characters.
  remarks: "Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.  \n  \n The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) assigns a code point (a number) to each character in every supported script. A Unicode Transformation Format (UTF) is a way to encode that code point. The [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) uses the following UTFs:  \n  \n-   UTF-8, which represents each code point as a sequence of one to four bytes.  \n  \n-   UTF-16, which represents each code point as a sequence of one to two 16-bit integers.  \n  \n-   UTF-32, which represents each code point as a 32-bit integer.  \n  \n For more information about the UTFs and other encodings supported by <xref:System.Text>, see .  \n  \n The <xref:System.Text.UTF32Encoding> class represents a UTF-32 encoding. The encoder can use the big endian byte order (most significant byte first) or the little endian byte order (least significant byte first). For example, the Latin Capital Letter A (code point U+0041) is serialized as follows (in hexadecimal):  \n  \n-   Big endian byte order: 00 00 00 41  \n  \n-   Little endian byte order: 41 00 00 00  \n  \n It is generally more efficient to store Unicode characters using the native byte order. For example, it is better to use the little endian byte order on little endian platforms, such as Intel computers. <xref:System.Text.UTF32Encoding> corresponds to the Windows code pages 12000 (little endian byte order) and 12001 (big endian byte order). You can determine the \"endianness\" of a particular architecture by calling the <xref:System.BitConverter.IsLittleEndian?displayProperty=fullName> method.  \n  \n Optionally, the <xref:System.Text.UTF32Encoding> object provides a byte order mark (BOM), which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. If the preamble contains a byte order mark (BOM), it helps the decoder determine the byte order and the transformation format or UTF of a byte array.  \n  \n If the <xref:System.Text.UTF32Encoding> instance is configured to provide a BOM, you can retrieve it by calling the <xref:System.Text.UTF32Encoding.GetPreamble%2A> method; otherwise, the method returns an empty array. Note that, even if a <xref:System.Text.UTF32Encoding> object is configured for BOM support, you must include the BOM at the beginning of the encoded byte stream as appropriate; the encoding methods of the <xref:System.Text.UTF32Encoding> class do not do this automatically.  \n  \n To enable error detection and to make the class instance more secure, you should instantiate a <xref:System.Text.UTF32Encoding> object by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidBytes` argument to `true`. With error detection, a method that detects an invalid sequence of characters or bytes throws an <xref:System.ArgumentException> exception. Without error detection, no exception is thrown, and the invalid sequence is generally ignored.  \n  \n You can instantiate a <xref:System.Text.UTF32Encoding> object in a number of ways, depending on whether you want to it to provide a byte order mark (BOM), whether you want big-endian or little-endian encoding, and whether you want to enable error detection. The following table lists the <xref:System.Text.UTF32Encoding> constructors and the <xref:System.Text.Encoding> properties that return a <xref:System.Text.UnicodeEncoding> object.  \n  \n|Member|Endianness|BOM|Error detection|  \n|------------|----------------|---------|---------------------|  \n|<xref:System.Text.Encoding.UTF32%2A?displayProperty=fullName>|Little-endian|Yes|No (Replacement fallback)|  \n|<xref:System.Text.UTF32Encoding.%23ctor?displayProperty=fullName>|Little-endian|Yes|No (Replacement fallback)|  \n|<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=fullName>|Configurable|Configurable|No (Replacement fallback)|  \n|<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=fullName>|Configurable|Configurable|Configurable|  \n  \n The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.UTF32Encoding.GetBytes%2A> method performs the actual encoding.  \n  \n Likewise, the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.UTF32Encoding.GetChars%2A> and <xref:System.Text.UTF32Encoding.GetString%2A> methods perform the actual decoding.  \n  \n For an encoder or decoder that is able to save state information when encoding or decoding data that spans multiple blocks (such as string of 1 million characters that is encoded in 100,000-character segments), use the <xref:System.Text.UTF32Encoding.GetEncoder%2A> and <xref:System.Text.UTF32Encoding.GetDecoder%2A> properties, respectively."
  example:
  - "The following example demonstrates the behavior of <xref:System.Text.UTF32Encoding> objects with and without error detection enabled. It creates a byte array whose last four bytes represent an invalid surrogate pair; the high surrogate U+D8FF is followed by an U+01FF, which is outside the range of low surrogates (0xDC00 through 0xDFFF). Without error detection, the UTF32 decoder uses replacement fallback to replace the invalid surrogate pair with REPLACEMENT CHARACTER (U+FFFD).  \n  \n [!code-cpp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CPP/errordetection.cpp#1)]\n [!code-csharp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CS/errordetection.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/VB/ErrorDetection.vb#1)]  \n  \n The following example encodes a string of Unicode characters into a byte array by using a <xref:System.Text.UTF32Encoding> object. The byte array is then decoded into a string to demonstrate that there is no loss of data.  \n  \n [!code-csharp[System.Text.UTF32Encoding.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.class/cs/snippet.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.class/vb/snippet.vb#1)]  \n  \n The following example uses the same string as the previous one, except that it writes the encoded bytes to a file and prefixes the byte stream with a byte order mark (BOM). It then reads the file in two different ways: as a text file by using a <xref:System.IO.StreamReader> object; and as a binary file. As you would expect, in neither case is the BOM included in the newly read string.  \n  \n [!code-csharp[System.Text.UTF32Encoding.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.class/cs/bom1.cs#2)]\n [!code-vb[System.Text.UTF32Encoding.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.class/vb/bom1.vb#2)]"
  syntax:
    content: 'public sealed class UTF32Encoding : System.Text.Encoding'
  inheritance:
  - System.Object
  - System.Text.Encoding
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Text.Encoding.ASCII
  - System.Text.Encoding.BigEndianUnicode
  - System.Text.Encoding.BodyName
  - System.Text.Encoding.Clone
  - System.Text.Encoding.CodePage
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.DecoderFallback
  - System.Text.Encoding.Default
  - System.Text.Encoding.EncoderFallback
  - System.Text.Encoding.EncodingName
  - System.Text.Encoding.GetByteCount(System.Char[])
  - System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)
  - System.Text.Encoding.GetBytes(System.Char[])
  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  - System.Text.Encoding.GetBytes(System.String)
  - System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)
  - System.Text.Encoding.GetCharCount(System.Byte[])
  - System.Text.Encoding.GetChars(System.Byte[])
  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.GetEncoding(System.Int32)
  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetEncoding(System.String)
  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetEncodings
  - System.Text.Encoding.GetString(System.Byte*,System.Int32)
  - System.Text.Encoding.GetString(System.Byte[])
  - System.Text.Encoding.HeaderName
  - System.Text.Encoding.IsAlwaysNormalized
  - System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  - System.Text.Encoding.IsBrowserDisplay
  - System.Text.Encoding.IsBrowserSave
  - System.Text.Encoding.IsMailNewsDisplay
  - System.Text.Encoding.IsMailNewsSave
  - System.Text.Encoding.IsReadOnly
  - System.Text.Encoding.IsSingleByte
  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  - System.Text.Encoding.Unicode
  - System.Text.Encoding.UTF32
  - System.Text.Encoding.UTF7
  - System.Text.Encoding.UTF8
  - System.Text.Encoding.WebName
  - System.Text.Encoding.WindowsCodePage
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.#ctor
  commentId: M:System.Text.UTF32Encoding.#ctor
  id: '#ctor'
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: UTF32Encoding()
  nameWithType: UTF32Encoding.UTF32Encoding()
  fullName: UTF32Encoding.UTF32Encoding()
  type: Constructor
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Initializes a new instance of the <xref href="System.Text.UTF32Encoding"></xref> class.
  remarks: "This constructor creates an instance that uses the little endian byte order, provides a Unicode byte order mark, and does not throw an exception when an invalid encoding is detected.  \n  \n> [!NOTE]\n>  For security reasons, you should enable error detection by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidCharacters` argument to `true`."
  example:
  - "The following example retrieves and displays the byte order mark for different <xref:System.Text.UTF32Encoding> instances.  \n  \n [!code-cpp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]\n [!code-csharp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]"
  syntax:
    content: public UTF32Encoding ();
    parameters: []
  overload: System.Text.UTF32Encoding.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)
  commentId: M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean)'
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: UTF32Encoding(Boolean, Boolean)
  nameWithType: UTF32Encoding.UTF32Encoding(Boolean, Boolean)
  fullName: UTF32Encoding.UTF32Encoding(Boolean, Boolean)
  type: Constructor
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Initializes a new instance of the <xref href="System.Text.UTF32Encoding"></xref> class. Parameters specify whether to use the big endian byte order and whether the <xref href="System.Text.UTF32Encoding.GetPreamble"></xref> method returns a Unicode Unicode byte order mark.
  remarks: "This constructor creates an instance that does not throw an exception when an invalid encoding is detected.  \n  \n> [!NOTE]\n>  For security reasons, you should enable error detection by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidCharacters` argument to `true`."
  example:
  - "The following example retrieves and displays the byte order mark for different <xref:System.Text.UTF32Encoding> instances.  \n  \n [!code-cpp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]\n [!code-csharp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]"
  syntax:
    content: public UTF32Encoding (bool bigEndian, bool byteOrderMark);
    parameters:
    - id: bigEndian
      type: System.Boolean
      description: '`true` to use the big endian byte order (most significant byte first), or `false` to use the little endian byte order (least significant byte first).'
    - id: byteOrderMark
      type: System.Boolean
      description: '`true` to specify that a Unicode byte order mark is provided; otherwise, `false`.'
  overload: System.Text.UTF32Encoding.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)
  commentId: M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean,System.Boolean)'
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: UTF32Encoding(Boolean, Boolean, Boolean)
  nameWithType: UTF32Encoding.UTF32Encoding(Boolean, Boolean, Boolean)
  fullName: UTF32Encoding.UTF32Encoding(Boolean, Boolean, Boolean)
  type: Constructor
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Initializes a new instance of the <xref href="System.Text.UTF32Encoding"></xref> class. Parameters specify whether to use the big endian byte order, whether to provide a Unicode byte order mark, and whether to throw an exception when an invalid encoding is detected.
  remarks: "If `throwOnInvalidCharacters` is `true`, a method that detects an invalid byte sequence throws <xref:System.ArgumentException?displayProperty=fullName>. Otherwise, the method does not throw an exception, and the invalid sequence is ignored.  \n  \n> [!NOTE]\n>  For security reasons, you should enable error detection by calling the <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> constructor and setting its `throwOnInvalidCharacters` argument to `true`."
  example:
  - "The following example demonstrates the behavior of <xref:System.Text.UTF32Encoding>, both with error detection enabled and without.  \n  \n [!code-cpp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CPP/errordetection.cpp#1)]\n [!code-csharp[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CS/errordetection.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.ErrorDetection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/VB/ErrorDetection.vb#1)]"
  syntax:
    content: public UTF32Encoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);
    parameters:
    - id: bigEndian
      type: System.Boolean
      description: '`true` to use the big endian byte order (most significant byte first), or `false` to use the little endian byte order (least significant byte first).'
    - id: byteOrderMark
      type: System.Boolean
      description: '`true` to specify that a Unicode byte order mark is provided; otherwise, `false`.'
    - id: throwOnInvalidCharacters
      type: System.Boolean
      description: '`true` to specify that an exception should be thrown when an invalid encoding is detected; otherwise, `false`.'
  overload: System.Text.UTF32Encoding.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.Equals(System.Object)
  commentId: M:System.Text.UTF32Encoding.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: UTF32Encoding.Equals(Object)
  fullName: UTF32Encoding.Equals(Object)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Determines whether the specified <xref href="System.Object"></xref> is equal to the current <xref href="System.Text.UTF32Encoding"></xref> object.
  remarks: "Two <xref:System.Text.UTF32Encoding> objects are considered equal if all of the following conditions are true:  \n  \n-   Both objects use the same byte order.  \n  \n-   Both objects provide the byte order mark, or both do not.  \n  \n-   Both objects use the same encoder fallback.  \n  \n-   Both objects use the same decoder fallback."
  example:
  - "The following example creates <xref:System.Text.UTF32Encoding> objects using different parameter values and then checks them for equality.  \n  \n [!code-cpp[System.Text.UTF32Encoding.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/CPP/equals.cpp#1)]\n [!code-csharp[System.Text.UTF32Encoding.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/CS/equals.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/VB/equals.vb#1)]"
  syntax:
    content: public override bool Equals (object value);
    parameters:
    - id: value
      type: System.Object
      description: The <xref href="System.Object"></xref> to compare with the current object.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> is an instance of <xref href="System.Text.UTF32Encoding"></xref> and is equal to the current object; otherwise, `false`.'
  overload: System.Text.UTF32Encoding.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetByteCount(System.String)
  commentId: M:System.Text.UTF32Encoding.GetByteCount(System.String)
  id: GetByteCount(System.String)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetByteCount(String)
  nameWithType: UTF32Encoding.GetByteCount(String)
  fullName: UTF32Encoding.GetByteCount(String)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Calculates the number of bytes produced by encoding the characters in the specified <xref href="System.String"></xref>.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method. The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting the preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble is not reflected in the value returned by the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method."
  example:
  - "The following example calls the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> and <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> methods to calculate the maximum and actual number of bytes required to encode a string. It also displays the actual number of bytes required to store a byte stream with a byte order mark.  \n  \n [!code-csharp[System.Text.Utf32Encoding.GetByteCount#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/cs/getbytecount1.cs#1)]\n [!code-vb[System.Text.Utf32Encoding.GetByteCount#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/vb/getbytecount1.vb#1)]"
  syntax:
    content: public override int GetByteCount (string s);
    parameters:
    - id: s
      type: System.String
      description: The <xref href="System.String"></xref> containing the set of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  overload: System.Text.UTF32Encoding.GetByteCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>s</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The resulting number of bytes is greater than the maximum number that can be returned as an integer.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Error detection is enabled, and <code>s</code> contains an invalid sequence of characters.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)
  id: GetByteCount(System.Char*,System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetByteCount(Char*, Int32)
  nameWithType: UTF32Encoding.GetByteCount(Char*, Int32)
  fullName: UTF32Encoding.GetByteCount(Char*, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>. The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw an <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Security.SecurityCritical]

      public override int GetByteCount (char* chars, int count);
    parameters:
    - id: chars
      type: System.Char*
      description: A pointer to the first character to encode.
    - id: count
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  overload: System.Text.UTF32Encoding.GetByteCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>chars</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>count</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  id: GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetByteCount(Char[], Int32, Int32)
  nameWithType: UTF32Encoding.GetByteCount(Char[], Int32, Int32)
  fullName: UTF32Encoding.GetByteCount(Char[], Int32, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Calculates the number of bytes produced by encoding a set of characters from the specified character array.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method. The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n To ensure that the encoded bytes are decoded properly when they are saved as a file or a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility, and the number of bytes in the preamble Is not reflected in the value returned by the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method."
  example:
  - "The following example populates an array with a Latin uppercase and lowercase characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Latin lowercase characters. It then displays this information along with the total number of bytes needed if a byte order mark is added. It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Latin lowercase characters. The following example populates an array with a combination of Greek and Cyrillic characters and calls the <xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> method to determine the number of bytes needed to encode the Cyrillic characters. It then displays this information along with the total number of bytes needed if a byte order mark is added. It compares this number with the value returned by the <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> method, which indicates maximum number of bytes needed to encode the Cyrillic characters.  \n  \n [!code-csharp[System.Text.Utf32Encoding.GetByteCount#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/cs/getbytecount2.cs#2)]\n [!code-vb[System.Text.Utf32Encoding.GetByteCount#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/vb/getbytecount2.vb#2)]"
  syntax:
    content: public override int GetByteCount (char[] chars, int index, int count);
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the set of characters to encode.
    - id: index
      type: System.Int32
      description: The index of the first character to encode.
    - id: count
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The number of bytes produced by encoding the specified characters.
  overload: System.Text.UTF32Encoding.GetByteCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>chars</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetBytes(Char*, Int32, Byte*, Int32)
  nameWithType: UTF32Encoding.GetBytes(Char*, Int32, Byte*, Int32)
  fullName: UTF32Encoding.GetBytes(Char*, Int32, Byte*, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method. The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Security.SecurityCritical]

      public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);
    parameters:
    - id: chars
      type: System.Char*
      description: A pointer to the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte*
      description: A pointer to the location at which to start writing the resulting sequence of bytes.
    - id: byteCount
      type: System.Int32
      description: The maximum number of bytes to write.
    return:
      type: System.Int32
      description: The actual number of bytes written at the location indicated by the <code>bytes</code> parameter.
  overload: System.Text.UTF32Encoding.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>chars</code> is `null`.  \n  \n -or-  \n  \n <code>bytes</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>charCount</code> or <code>byteCount</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.  \n  \n -or-  \n  \n <code>byteCount</code> is less than the resulting number of bytes."
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)
  nameWithType: UTF32Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)
  fullName: UTF32Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Encodes a set of characters from the specified character array into the specified byte array.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method. The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes."
  example:
  - "The following example determines the number of bytes required to encode three characters from a character array, then encodes the characters and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.UTF32Encoding.GetBytes_CharArr#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]\n [!code-csharp[System.Text.UTF32Encoding.GetBytes_CharArr#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.GetBytes_CharArr#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/VB/GetBytes_CharArr.vb#1)]"
  syntax:
    content: public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);
    parameters:
    - id: chars
      type: System.Char[]
      description: The character array containing the set of characters to encode.
    - id: charIndex
      type: System.Int32
      description: The index of the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte[]
      description: The byte array to contain the resulting sequence of bytes.
    - id: byteIndex
      type: System.Int32
      description: The index at which to start writing the resulting sequence of bytes.
    return:
      type: System.Int32
      description: The actual number of bytes written into <code>bytes</code>.
  overload: System.Text.UTF32Encoding.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>chars</code> is `null`.  \n  \n -or-  \n  \n <code>bytes</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n <code>byteIndex</code> is not a valid index in <code>bytes</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Error detection is enabled, and <code>chars</code> contains an invalid sequence of characters.  \n  \n -or-  \n  \n <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes."
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetBytes(String, Int32, Int32, Byte[], Int32)
  nameWithType: UTF32Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)
  fullName: UTF32Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Encodes a set of characters from the specified <xref href="System.String"></xref> into the specified byte array.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method. The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively.  \n  \n> [!NOTE]\n>  To ensure that the encoded bytes are decoded properly when they are saved as a file or as a stream, you can prefix a stream of encoded bytes with a preamble. Inserting a preamble at the beginning of a byte stream (such as at the beginning of a series of bytes to be written to a file) is the developer's responsibility. The <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a preamble to the beginning of a sequence of encoded bytes."
  example:
  - "The following example determines the number of bytes required to encode a string, then encodes the string and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]\n [!code-csharp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CS/getbytes_string.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/VB/GetBytes_String.vb#1)]"
  syntax:
    content: public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);
    parameters:
    - id: s
      type: System.String
      description: The <xref href="System.String"></xref> containing the set of characters to encode.
    - id: charIndex
      type: System.Int32
      description: The index of the first character to encode.
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    - id: bytes
      type: System.Byte[]
      description: The byte array to contain the resulting sequence of bytes.
    - id: byteIndex
      type: System.Int32
      description: The index at which to start writing the resulting sequence of bytes.
    return:
      type: System.Int32
      description: The actual number of bytes written into <code>bytes</code>.
  overload: System.Text.UTF32Encoding.GetBytes*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>s</code> is `null`.  \n  \n -or-  \n  \n <code>bytes</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n <code>byteIndex</code> is not a valid index in <code>bytes</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Error detection is enabled, and <code>s</code> contains an invalid sequence of characters.  \n  \n -or-  \n  \n <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes."
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  id: GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetCharCount(Byte[], Int32, Int32)
  nameWithType: UTF32Encoding.GetCharCount(Byte[], Int32, Int32)
  fullName: UTF32Encoding.GetCharCount(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
  remarks: "The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method calculates the exact array size required by the <xref:System.Text.UTF32Encoding.GetChars%2A> method to store the resulting characters. To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method. The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown."
  example:
  - "The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.  \n  \n [!code-cpp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]\n [!code-csharp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]"
  syntax:
    content: public override int GetCharCount (byte[] bytes, int index, int count);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: index
      type: System.Int32
      description: The index of the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes.
  overload: System.Text.UTF32Encoding.GetCharCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)
  id: GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetCharCount(Byte*, Int32)
  nameWithType: UTF32Encoding.GetCharCount(Byte*, Int32)
  fullName: UTF32Encoding.GetCharCount(Byte*, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.
  remarks: "<xref:System.Text.UTF32Encoding.GetCharCount%2A> calculates the exact array size required by the <xref:System.Text.UTF32Encoding.GetChars%2A> method to store the resulting characters. To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method. The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Security.SecurityCritical]

      public override int GetCharCount (byte* bytes, int count);
    parameters:
    - id: bytes
      type: System.Byte*
      description: A pointer to the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The number of characters produced by decoding the specified sequence of bytes.
  overload: System.Text.UTF32Encoding.GetCharCount*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>count</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetChars(Byte*, Int32, Char*, Int32)
  nameWithType: UTF32Encoding.GetChars(Byte*, Int32, Char*, Int32)
  fullName: UTF32Encoding.GetChars(Byte*, Int32, Char*, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method. To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method. The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Security.SecurityCritical]

      public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);
    parameters:
    - id: bytes
      type: System.Byte*
      description: A pointer to the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    - id: chars
      type: System.Char*
      description: A pointer to the location at which to start writing the resulting set of characters.
    - id: charCount
      type: System.Int32
      description: The maximum number of characters to write.
    return:
      type: System.Int32
      description: The actual number of characters written at the location indicated by <code>chars</code>.
  overload: System.Text.UTF32Encoding.GetChars*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>bytes</code> is `null`.  \n  \n -or-  \n  \n <code>chars</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>byteCount</code> or <code>charCount</code> is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.  \n  \n -or-  \n  \n <code>charCount</code> is less than the resulting number of characters."
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  nameWithType: UTF32Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: UTF32Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Decodes a sequence of bytes from the specified byte array into the specified character array.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetChars%2A> to store the resulting characters, call the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method. To calculate the maximum array size, call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method. The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n If the range of bytes to be decoded includes the byte order mark (BOM) and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application uses the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively."
  example:
  - "The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.  \n  \n [!code-cpp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]\n [!code-csharp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]"
  syntax:
    content: public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: byteIndex
      type: System.Int32
      description: The index of the first byte to decode.
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    - id: chars
      type: System.Char[]
      description: The character array to contain the resulting set of characters.
    - id: charIndex
      type: System.Int32
      description: The index at which to start writing the resulting set of characters.
    return:
      type: System.Int32
      description: The actual number of characters written into <code>chars</code>.
  overload: System.Text.UTF32Encoding.GetChars*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>bytes</code> is `null`.  \n  \n -or-  \n  \n <code>chars</code> is `null`."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>byteIndex</code> or <code>byteCount</code> or <code>charIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>byteindex</code> and <code>byteCount</code> do not denote a valid range in <code>bytes</code>.  \n  \n -or-  \n  \n <code>charIndex</code> is not a valid index in <code>chars</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.  \n  \n -or-  \n  \n <code>chars</code> does not have enough capacity from <code>charIndex</code> to the end of the array to accommodate the resulting characters."
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetDecoder
  commentId: M:System.Text.UTF32Encoding.GetDecoder
  id: GetDecoder
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetDecoder()
  nameWithType: UTF32Encoding.GetDecoder()
  fullName: UTF32Encoding.GetDecoder()
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Obtains a decoder that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.
  remarks: "The <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref:System.Text.UTF32Encoding.GetChars%2A> method. However, a <xref:System.Text.Decoder> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.UTF32Encoding.GetDecoder%2A> and <xref:System.Text.UTF32Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  \n  \n If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor was set to `true`, error detection is also enabled in the <xref:System.Text.Decoder> returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the decoder is undefined and processing must stop."
  example:
  - "The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.  \n  \n [!code-cpp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CPP/encdec.cpp#1)]\n [!code-csharp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CS/encdec.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/VB/EncDec.vb#1)]"
  syntax:
    content: public override System.Text.Decoder GetDecoder ();
    parameters: []
    return:
      type: System.Text.Decoder
      description: A <xref href="System.Text.Decoder"></xref> that converts a UTF-32 encoded sequence of bytes into a sequence of Unicode characters.
  overload: System.Text.UTF32Encoding.GetDecoder*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetEncoder
  commentId: M:System.Text.UTF32Encoding.GetEncoder
  id: GetEncoder
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetEncoder()
  nameWithType: UTF32Encoding.GetEncoder()
  fullName: UTF32Encoding.GetEncoder()
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Obtains an encoder that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.
  remarks: "The <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref:System.Text.UTF32Encoding.GetBytes%2A> method. However, a <xref:System.Text.Encoder> maintains state information between calls so it can correctly encode character sequences that span blocks. The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high-surrogate, and the matching low-surrogate might be in the next data block. Therefore, <xref:System.Text.UTF32Encoding.GetDecoder%2A> and <xref:System.Text.UTF32Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  \n  \n If error detection is enabled, that is, the `throwOnInvalidCharacters` parameter of the constructor was set to `true`, error detection is also enabled in the <xref:System.Text.Encoder> returned by this method. If error detection is enabled and an invalid sequence is encountered, the state of the encoder is undefined and processing must stop."
  example:
  - "The following example uses an encoder and a decoder to encode a string into an array of bytes, and then decode the bytes into an array of characters.  \n  \n [!code-cpp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CPP/encdec.cpp#1)]\n [!code-csharp[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CS/encdec.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.EncDec#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/VB/EncDec.vb#1)]"
  syntax:
    content: public override System.Text.Encoder GetEncoder ();
    parameters: []
    return:
      type: System.Text.Encoder
      description: A <xref href="System.Text.Encoder"></xref> that converts a sequence of Unicode characters into a UTF-32 encoded sequence of bytes.
  overload: System.Text.UTF32Encoding.GetEncoder*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetHashCode
  commentId: M:System.Text.UTF32Encoding.GetHashCode
  id: GetHashCode
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: UTF32Encoding.GetHashCode()
  fullName: UTF32Encoding.GetHashCode()
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Returns the hash code for the current instance.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: The hash code for the current <xref href="System.Text.UTF32Encoding"></xref> object.
  overload: System.Text.UTF32Encoding.GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  id: GetMaxByteCount(System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetMaxByteCount(Int32)
  nameWithType: UTF32Encoding.GetMaxByteCount(Int32)
  fullName: UTF32Encoding.GetMaxByteCount(Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Calculates the maximum number of bytes produced by encoding the specified number of characters.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetBytes%2A> to store the resulting bytes, you call the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method. The <xref:System.Text.UTF32Encoding.GetByteCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> method generally executes faster.  \n  \n <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.EncoderFallback>. If a fallback is chosen with a potentially large string,  <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> can return large values.  \n  \n In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach and use <xref:System.Text.UTF32Encoding.GetByteCount%2A> or <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName>.  \n  \n <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> has no relationship to <xref:System.Text.UTF32Encoding.GetChars%2A>. If you need a similar function to use with <xref:System.Text.UTF32Encoding.GetChars%2A>, use <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>.  \n  \n> [!NOTE]\n>  `GetMaxByteCount(N)` is not necessarily the same value as `N* GetMaxByteCount(1)`."
  example:
  - "The following example determines the number of bytes required to encode a string, then encodes the string and displays the resulting bytes.  \n  \n [!code-cpp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]\n [!code-csharp[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CS/getbytes_string.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.GetBytes_String#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/VB/GetBytes_String.vb#1)]"
  syntax:
    content: public override int GetMaxByteCount (int charCount);
    parameters:
    - id: charCount
      type: System.Int32
      description: The number of characters to encode.
    return:
      type: System.Int32
      description: The maximum number of bytes produced by encoding the specified number of characters.
  overload: System.Text.UTF32Encoding.GetMaxByteCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>charCount</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer."
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.EncoderFallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  id: GetMaxCharCount(System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetMaxCharCount(Int32)
  nameWithType: UTF32Encoding.GetMaxCharCount(Int32)
  fullName: UTF32Encoding.GetMaxCharCount(Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Calculates the maximum number of characters produced by decoding the specified number of bytes.
  remarks: "To calculate the exact array size required by <xref:System.Text.UTF32Encoding.GetChars%2A> to store the resulting characters, you call the <xref:System.Text.UTF32Encoding.GetCharCount%2A> method. To calculate the maximum array size, you call the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method. The <xref:System.Text.UTF32Encoding.GetCharCount%2A> method generally allocates less memory, while the <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> method generally executes faster.  \n  \n <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> is a worst-case number, including the worst case for the currently selected <xref:System.Text.DecoderFallback>. If a fallback is chosen with a potentially large string, <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> can return large values.  \n  \n In most cases, this method returns reasonable numbers for small strings. For large strings, you might have to choose between using very large buffers and catching errors in the rare case that a more reasonable buffer is exceeded. You might also want to consider a different approach and use <xref:System.Text.UTF32Encoding.GetCharCount%2A> or <xref:System.Text.Decoder.Convert%2A>.  \n  \n <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> has no relationship to <xref:System.Text.UTF32Encoding.GetBytes%2A>. If you need a similar function to use with <xref:System.Text.UTF32Encoding.GetBytes%2A>, use <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>.  \n  \n> [!NOTE]\n>  `GetMaxCharCount(N)` is not necessarily the same value as `N* GetMaxCharCount(1)`."
  example:
  - "The following example encodes a string into an array of bytes, and then decodes the bytes into an array of characters.  \n  \n [!code-cpp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]\n [!code-csharp[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.GetChars#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]"
  syntax:
    content: public override int GetMaxCharCount (int byteCount);
    parameters:
    - id: byteCount
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.Int32
      description: The maximum number of characters produced by decoding the specified number of bytes.
  overload: System.Text.UTF32Encoding.GetMaxCharCount*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>byteCount</code> is less than zero.  \n  \n -or-  \n  \n The resulting number of bytes is greater than the maximum number that can be returned as an integer."
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetPreamble
  commentId: M:System.Text.UTF32Encoding.GetPreamble
  id: GetPreamble
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetPreamble()
  nameWithType: UTF32Encoding.GetPreamble()
  fullName: UTF32Encoding.GetPreamble()
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Returns a Unicode byte order mark encoded in UTF-32 format, if the <xref href="System.Text.UTF32Encoding"></xref> object is configured to supply one.
  remarks: "The <xref:System.Text.UTF32Encoding> object can provide a preamble, which is an array of bytes that can be prefixed to the sequence of bytes resulting from the encoding process. Prefacing a sequence of encoded bytes with a byte order mark (code points U+0000 U+FEFF) helps the decoder determine the byte order and the transformation format, or UTF. The Unicode byte order mark (BOM) is serialized as follows (in hexadecimal):  \n  \n-   Big endian byte order: 00 00 FE FF  \n  \n-   Little endian byte order: FF FE 00 00  \n  \n You can instantiate a <xref:System.Text.UTF32Encoding> object whose <xref:System.Text.UTF32Encoding.GetPreamble%2A> method returns a valid BOM in the following ways:  \n  \n-   By retrieving the <xref:System.Text.UTF32Encoding> object returned by the <xref:System.Text.Encoding.UTF32%2A?displayProperty=fullName> property.  \n  \n-   By calling the parameterless <xref:System.Text.UTF32Encoding.%23ctor> constructor to instantiate a <xref:System.Text.UTF32Encoding> object.  \n  \n-   By supplying `true` as the value of the `byteOrderMark` argument to the <xref:System.Text.UTF32Encoding.%23ctor%2A> and <xref:System.Text.UTF32Encoding.%23ctor%2A> constructors.  \n  \n We recommend that you use the BOM, since it provides nearly certain identification of an encoding for files that otherwise have lost reference to the <xref:System.Text.UTF32Encoding> object, for example, untagged or improperly tagged web data, or random text files stored when a business did not have international concerns or other data. Often, user problems might be avoided if data is consistently and properly tagged.  \n  \n For standards that provide an encoding type, a BOM is somewhat redundant. However, it can be used to help a server send the correct encoding header. Alternatively, it can be used as a fallback in case the encoding is otherwise lost.  \n  \n There are some disadvantages to using a BOM. For example, knowing how to limit the database fields that use a BOM can be difficult. Concatenation of files can be a problem also, for example, when files are merged in such a way that an unnecessary character can end up in the middle of data. In spite of the few disadvantages, however, the use of a BOM is highly recommended.  \n  \n For more information on byte order and the byte order mark, see The Unicode Standard at the [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123).  \n  \n> [!CAUTION]\n>  To ensure that the encoded bytes are decoded properly, you should prefix encoded bytes with a preamble. Note that the <xref:System.Text.UTF32Encoding.GetBytes%2A> method does not prepend a BOM to a sequence of encoded bytes; supplying a BOM at the beginning of an appropriate byte stream is the developer's responsibility."
  example:
  - "The following code example retrieves and displays the byte order mark for different <xref:System.Text.UTF32Encoding> instances.  \n  \n [!code-cpp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]\n [!code-csharp[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.GetPreamble#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  \n  \n The following example instantiates two <xref:System.Text.UTF32Encoding> objects, the first of which does not provide a BOM and the second of which does. It then calls the <xref:System.Text.UTF32Encoding.GetPreamble%2A> method to write the BOM to a file before writing a UTF-32-encoded string. As the output from the example shows, the file that saves the bytes from the second encoder has four more bytes that the first.  \n  \n [!code-csharp[System.Text.UTF32Encoding.GetPreamble#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble1.cs#2)]\n [!code-vb[System.Text.UTF32Encoding.GetPreamble#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/getpreamble1.vb#2)]  \n  \n You can also compare the files by using the `fc` command in a console window, or you can inspect the files in a text editor that includes a Hex View mode. Note that when the file is opened in an editor that supports UTF-32, the BOM is not displayed."
  syntax:
    content: public override byte[] GetPreamble ();
    parameters: []
    return:
      type: System.Byte[]
      description: A byte array containing the Unicode byte order mark, if the <xref href="System.Text.UTF32Encoding"></xref> object is configured to supply one. Otherwise, this method returns a zero-length byte array.
  overload: System.Text.UTF32Encoding.GetPreamble*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  id: GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF32Encoding
  langs:
  - csharp
  name: GetString(Byte[], Int32, Int32)
  nameWithType: UTF32Encoding.GetString(Byte[], Int32, Int32)
  fullName: UTF32Encoding.GetString(Byte[], Int32, Int32)
  type: Method
  assemblies:
  - System.Text.Encoding.Extensions
  - mscorlib
  - netstandard
  namespace: System.Text
  summary: Decodes a range of bytes from a byte array into a string.
  remarks: "With error detection, an invalid sequence causes this method to throw a <xref:System.ArgumentException>. Without error detection, invalid sequences are ignored, and no exception is thrown.  \n  \n If the range of bytes to be decoded includes the byte order mark (BOM), and the byte array was returned by a method of a non-BOM aware type, the character U+FFFE is included in the character array returned by this method. You can remove it by calling the <xref:System.String.TrimStart%2A?displayProperty=fullName> method.  \n  \n Data to be converted, such as data read from a stream, might be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref:System.Text.Decoder> or the <xref:System.Text.Encoder> provided by the <xref:System.Text.UTF32Encoding.GetDecoder%2A> method or the <xref:System.Text.UTF32Encoding.GetEncoder%2A> method, respectively."
  example:
  - "The following example encodes a string into two arrays arrays of bytes, one in little-endian order and the other in big-endian order. It then decodes the bytes back into a string.  \n  \n [!code-csharp[System.Text.UTF32Encoding.GetString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/CS/getstring.cs#1)]\n [!code-vb[System.Text.UTF32Encoding.GetString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/VB/GetString.vb#1)]  \n  \n The following example initializes an array by calling the <xref:System.Text.UTF32Encoding.GetByteCount%2A> method to determine exactly how many bytes are required for an encoded string and then adding the size of the byte order mark (BOM). The example then calls the <xref:System.Text.UTF32Encoding.GetPreamble%2A> method to store the BOM to the array before calling the <xref:System.Text.UTF32Encoding.GetBytes%2A> method to store the encoded bytes to the array. The example then calls the <xref:System.Text.UTF32Encoding.GetString%2A> method to decode the string.  \n  \n [!code-csharp[System.Text.UTF32Encoding.GetString#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/CS/GetString1.cs#2)]\n [!code-vb[System.Text.UTF32Encoding.GetString#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/VB/GetString1.vb#2)]  \n  \n Note that in this case the decoded string differs from the original string, since it begins with a 32-bit byte order mark U+FFFE U+0000. This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character \"?\"."
  syntax:
    content: public override string GetString (byte[] bytes, int index, int count);
    parameters:
    - id: bytes
      type: System.Byte[]
      description: The byte array containing the sequence of bytes to decode.
    - id: index
      type: System.Int32
      description: The index of the first byte to decode.
    - id: count
      type: System.Int32
      description: The number of bytes to decode.
    return:
      type: System.String
      description: A string that contains the results of decoding the specified sequence of bytes.
  overload: System.Text.UTF32Encoding.GetString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>bytes</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>bytes</code>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Error detection is enabled, and <code>bytes</code> contains an invalid sequence of bytes.
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for a complete explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoding.DecoderFallback\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\"></xref>."
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Text.EncoderFallbackException
  parent: System.Text
  isExternal: false
  name: EncoderFallbackException
  nameWithType: EncoderFallbackException
  fullName: System.Text.EncoderFallbackException
- uid: System.Text.DecoderFallbackException
  parent: System.Text
  isExternal: false
  name: DecoderFallbackException
  nameWithType: DecoderFallbackException
  fullName: System.Text.DecoderFallbackException
- uid: System.Text.UTF32Encoding.#ctor
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: UTF32Encoding()
  nameWithType: UTF32Encoding.UTF32Encoding()
  fullName: UTF32Encoding.UTF32Encoding()
- uid: System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: UTF32Encoding(Boolean, Boolean)
  nameWithType: UTF32Encoding.UTF32Encoding(Boolean, Boolean)
  fullName: UTF32Encoding.UTF32Encoding(Boolean, Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: UTF32Encoding(Boolean, Boolean, Boolean)
  nameWithType: UTF32Encoding.UTF32Encoding(Boolean, Boolean, Boolean)
  fullName: UTF32Encoding.UTF32Encoding(Boolean, Boolean, Boolean)
- uid: System.Text.UTF32Encoding.Equals(System.Object)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: Equals(Object)
  nameWithType: UTF32Encoding.Equals(Object)
  fullName: UTF32Encoding.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Text.UTF32Encoding.GetByteCount(System.String)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetByteCount(String)
  nameWithType: UTF32Encoding.GetByteCount(String)
  fullName: UTF32Encoding.GetByteCount(String)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetByteCount(Char*, Int32)
  nameWithType: UTF32Encoding.GetByteCount(Char*, Int32)
  fullName: UTF32Encoding.GetByteCount(Char*, Int32)
- uid: System.Char
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Char*
  parent: System
  isExternal: false
  name: Char*
  nameWithType: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetByteCount(Char[], Int32, Int32)
  nameWithType: UTF32Encoding.GetByteCount(Char[], Int32, Int32)
  fullName: UTF32Encoding.GetByteCount(Char[], Int32, Int32)
- uid: System.Char[]
  parent: System
  isExternal: false
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetBytes(Char*, Int32, Byte*, Int32)
  nameWithType: UTF32Encoding.GetBytes(Char*, Int32, Byte*, Int32)
  fullName: UTF32Encoding.GetBytes(Char*, Int32, Byte*, Int32)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte*
  parent: System
  isExternal: false
  name: Byte*
  nameWithType: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)
  nameWithType: UTF32Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)
  fullName: UTF32Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetBytes(String, Int32, Int32, Byte[], Int32)
  nameWithType: UTF32Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)
  fullName: UTF32Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)
- uid: System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetCharCount(Byte[], Int32, Int32)
  nameWithType: UTF32Encoding.GetCharCount(Byte[], Int32, Int32)
  fullName: UTF32Encoding.GetCharCount(Byte[], Int32, Int32)
- uid: System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetCharCount(Byte*, Int32)
  nameWithType: UTF32Encoding.GetCharCount(Byte*, Int32)
  fullName: UTF32Encoding.GetCharCount(Byte*, Int32)
- uid: System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetChars(Byte*, Int32, Char*, Int32)
  nameWithType: UTF32Encoding.GetChars(Byte*, Int32, Char*, Int32)
  fullName: UTF32Encoding.GetChars(Byte*, Int32, Char*, Int32)
- uid: System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  nameWithType: UTF32Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: UTF32Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)
- uid: System.Text.UTF32Encoding.GetDecoder
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetDecoder()
  nameWithType: UTF32Encoding.GetDecoder()
  fullName: UTF32Encoding.GetDecoder()
- uid: System.Text.Decoder
  parent: System.Text
  isExternal: false
  name: Decoder
  nameWithType: Decoder
  fullName: System.Text.Decoder
- uid: System.Text.UTF32Encoding.GetEncoder
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetEncoder()
  nameWithType: UTF32Encoding.GetEncoder()
  fullName: UTF32Encoding.GetEncoder()
- uid: System.Text.Encoder
  parent: System.Text
  isExternal: false
  name: Encoder
  nameWithType: Encoder
  fullName: System.Text.Encoder
- uid: System.Text.UTF32Encoding.GetHashCode
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetHashCode()
  nameWithType: UTF32Encoding.GetHashCode()
  fullName: UTF32Encoding.GetHashCode()
- uid: System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetMaxByteCount(Int32)
  nameWithType: UTF32Encoding.GetMaxByteCount(Int32)
  fullName: UTF32Encoding.GetMaxByteCount(Int32)
- uid: System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetMaxCharCount(Int32)
  nameWithType: UTF32Encoding.GetMaxCharCount(Int32)
  fullName: UTF32Encoding.GetMaxCharCount(Int32)
- uid: System.Text.UTF32Encoding.GetPreamble
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetPreamble()
  nameWithType: UTF32Encoding.GetPreamble()
  fullName: UTF32Encoding.GetPreamble()
- uid: System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetString(Byte[], Int32, Int32)
  nameWithType: UTF32Encoding.GetString(Byte[], Int32, Int32)
  fullName: UTF32Encoding.GetString(Byte[], Int32, Int32)
- uid: System.Text.UTF32Encoding.#ctor*
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: UTF32Encoding
  nameWithType: UTF32Encoding.UTF32Encoding
  fullName: UTF32Encoding.UTF32Encoding
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
- uid: System.Text.UTF32Encoding.Equals*
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: Equals
  nameWithType: UTF32Encoding.Equals
  fullName: UTF32Encoding.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
- uid: System.Text.UTF32Encoding.GetByteCount*
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetByteCount
  nameWithType: UTF32Encoding.GetByteCount
  fullName: UTF32Encoding.GetByteCount
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
- uid: System.Text.UTF32Encoding.GetBytes*
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetBytes
  nameWithType: UTF32Encoding.GetBytes
  fullName: UTF32Encoding.GetBytes
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
- uid: System.Text.UTF32Encoding.GetCharCount*
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetCharCount
  nameWithType: UTF32Encoding.GetCharCount
  fullName: UTF32Encoding.GetCharCount
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
- uid: System.Text.UTF32Encoding.GetChars*
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetChars
  nameWithType: UTF32Encoding.GetChars
  fullName: UTF32Encoding.GetChars
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
- uid: System.Text.UTF32Encoding.GetDecoder*
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetDecoder
  nameWithType: UTF32Encoding.GetDecoder
  fullName: UTF32Encoding.GetDecoder
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
- uid: System.Text.UTF32Encoding.GetEncoder*
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetEncoder
  nameWithType: UTF32Encoding.GetEncoder
  fullName: UTF32Encoding.GetEncoder
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
- uid: System.Text.UTF32Encoding.GetHashCode*
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetHashCode
  nameWithType: UTF32Encoding.GetHashCode
  fullName: UTF32Encoding.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
- uid: System.Text.UTF32Encoding.GetMaxByteCount*
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetMaxByteCount
  nameWithType: UTF32Encoding.GetMaxByteCount
  fullName: UTF32Encoding.GetMaxByteCount
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
- uid: System.Text.UTF32Encoding.GetMaxCharCount*
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetMaxCharCount
  nameWithType: UTF32Encoding.GetMaxCharCount
  fullName: UTF32Encoding.GetMaxCharCount
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
- uid: System.Text.UTF32Encoding.GetPreamble*
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetPreamble
  nameWithType: UTF32Encoding.GetPreamble
  fullName: UTF32Encoding.GetPreamble
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
- uid: System.Text.UTF32Encoding.GetString*
  parent: System.Text.UTF32Encoding
  isExternal: false
  name: GetString
  nameWithType: UTF32Encoding.GetString
  fullName: UTF32Encoding.GetString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/UTF32Encoding.xml
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.Text.Encoding.ASCII
  parent: System.Text.Encoding
  isExternal: false
  name: ASCII
  nameWithType: Encoding.ASCII
  fullName: Encoding.ASCII
- uid: System.Text.Encoding.BigEndianUnicode
  parent: System.Text.Encoding
  isExternal: false
  name: BigEndianUnicode
  nameWithType: Encoding.BigEndianUnicode
  fullName: Encoding.BigEndianUnicode
- uid: System.Text.Encoding.BodyName
  parent: System.Text.Encoding
  isExternal: false
  name: BodyName
  nameWithType: Encoding.BodyName
  fullName: Encoding.BodyName
- uid: System.Text.Encoding.Clone
  parent: System.Text.Encoding
  isExternal: false
  name: Clone()
  nameWithType: Encoding.Clone()
  fullName: Encoding.Clone()
- uid: System.Text.Encoding.CodePage
  parent: System.Text.Encoding
  isExternal: false
  name: CodePage
  nameWithType: Encoding.CodePage
  fullName: Encoding.CodePage
- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)
  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)
  fullName: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)
- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  parent: System.Text.Encoding
  isExternal: false
  name: Convert(Encoding, Encoding, Byte[])
  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[])
  fullName: Encoding.Convert(Encoding, Encoding, Byte[])
- uid: System.Text.Encoding.DecoderFallback
  parent: System.Text.Encoding
  isExternal: false
  name: DecoderFallback
  nameWithType: Encoding.DecoderFallback
  fullName: Encoding.DecoderFallback
- uid: System.Text.Encoding.Default
  parent: System.Text.Encoding
  isExternal: false
  name: Default
  nameWithType: Encoding.Default
  fullName: Encoding.Default
- uid: System.Text.Encoding.EncoderFallback
  parent: System.Text.Encoding
  isExternal: false
  name: EncoderFallback
  nameWithType: Encoding.EncoderFallback
  fullName: Encoding.EncoderFallback
- uid: System.Text.Encoding.EncodingName
  parent: System.Text.Encoding
  isExternal: false
  name: EncodingName
  nameWithType: Encoding.EncodingName
  fullName: Encoding.EncodingName
- uid: System.Text.Encoding.GetByteCount(System.String,System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetByteCount(String, Int32, Int32)
  nameWithType: Encoding.GetByteCount(String, Int32, Int32)
  fullName: Encoding.GetByteCount(String, Int32, Int32)
- uid: System.Text.Encoding.GetByteCount(System.Char[])
  parent: System.Text.Encoding
  isExternal: false
  name: GetByteCount(Char[])
  nameWithType: Encoding.GetByteCount(Char[])
  fullName: Encoding.GetByteCount(Char[])
- uid: System.Text.Encoding.GetBytes(System.Char[])
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes(Char[])
  nameWithType: Encoding.GetBytes(Char[])
  fullName: Encoding.GetBytes(Char[])
- uid: System.Text.Encoding.GetBytes(System.String)
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes(String)
  nameWithType: Encoding.GetBytes(String)
  fullName: Encoding.GetBytes(String)
- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes(Char[], Int32, Int32)
  nameWithType: Encoding.GetBytes(Char[], Int32, Int32)
  fullName: Encoding.GetBytes(Char[], Int32, Int32)
- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetBytes(String, Int32, Int32)
  nameWithType: Encoding.GetBytes(String, Int32, Int32)
  fullName: Encoding.GetBytes(String, Int32, Int32)
- uid: System.Text.Encoding.GetCharCount(System.Byte[])
  parent: System.Text.Encoding
  isExternal: false
  name: GetCharCount(Byte[])
  nameWithType: Encoding.GetCharCount(Byte[])
  fullName: Encoding.GetCharCount(Byte[])
- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetChars(Byte[], Int32, Int32)
  nameWithType: Encoding.GetChars(Byte[], Int32, Int32)
  fullName: Encoding.GetChars(Byte[], Int32, Int32)
- uid: System.Text.Encoding.GetChars(System.Byte[])
  parent: System.Text.Encoding
  isExternal: false
  name: GetChars(Byte[])
  nameWithType: Encoding.GetChars(Byte[])
  fullName: Encoding.GetChars(Byte[])
- uid: System.Text.Encoding.GetEncoding(System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncoding(Int32)
  nameWithType: Encoding.GetEncoding(Int32)
  fullName: Encoding.GetEncoding(Int32)
- uid: System.Text.Encoding.GetEncoding(System.String)
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncoding(String)
  nameWithType: Encoding.GetEncoding(String)
  fullName: Encoding.GetEncoding(String)
- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)
  nameWithType: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)
  fullName: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)
- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncoding(String, EncoderFallback, DecoderFallback)
  nameWithType: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)
  fullName: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)
- uid: System.Text.Encoding.GetEncodings
  parent: System.Text.Encoding
  isExternal: false
  name: GetEncodings()
  nameWithType: Encoding.GetEncodings()
  fullName: Encoding.GetEncodings()
- uid: System.Text.Encoding.GetString(System.Byte[])
  parent: System.Text.Encoding
  isExternal: false
  name: GetString(Byte[])
  nameWithType: Encoding.GetString(Byte[])
  fullName: Encoding.GetString(Byte[])
- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)
  parent: System.Text.Encoding
  isExternal: false
  name: GetString(Byte*, Int32)
  nameWithType: Encoding.GetString(Byte*, Int32)
  fullName: Encoding.GetString(Byte*, Int32)
- uid: System.Text.Encoding.HeaderName
  parent: System.Text.Encoding
  isExternal: false
  name: HeaderName
  nameWithType: Encoding.HeaderName
  fullName: Encoding.HeaderName
- uid: System.Text.Encoding.IsAlwaysNormalized
  parent: System.Text.Encoding
  isExternal: false
  name: IsAlwaysNormalized()
  nameWithType: Encoding.IsAlwaysNormalized()
  fullName: Encoding.IsAlwaysNormalized()
- uid: System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm)
  parent: System.Text.Encoding
  isExternal: false
  name: IsAlwaysNormalized(NormalizationForm)
  nameWithType: Encoding.IsAlwaysNormalized(NormalizationForm)
  fullName: Encoding.IsAlwaysNormalized(NormalizationForm)
- uid: System.Text.Encoding.IsBrowserDisplay
  parent: System.Text.Encoding
  isExternal: false
  name: IsBrowserDisplay
  nameWithType: Encoding.IsBrowserDisplay
  fullName: Encoding.IsBrowserDisplay
- uid: System.Text.Encoding.IsBrowserSave
  parent: System.Text.Encoding
  isExternal: false
  name: IsBrowserSave
  nameWithType: Encoding.IsBrowserSave
  fullName: Encoding.IsBrowserSave
- uid: System.Text.Encoding.IsMailNewsDisplay
  parent: System.Text.Encoding
  isExternal: false
  name: IsMailNewsDisplay
  nameWithType: Encoding.IsMailNewsDisplay
  fullName: Encoding.IsMailNewsDisplay
- uid: System.Text.Encoding.IsMailNewsSave
  parent: System.Text.Encoding
  isExternal: false
  name: IsMailNewsSave
  nameWithType: Encoding.IsMailNewsSave
  fullName: Encoding.IsMailNewsSave
- uid: System.Text.Encoding.IsReadOnly
  parent: System.Text.Encoding
  isExternal: false
  name: IsReadOnly
  nameWithType: Encoding.IsReadOnly
  fullName: Encoding.IsReadOnly
- uid: System.Text.Encoding.IsSingleByte
  parent: System.Text.Encoding
  isExternal: false
  name: IsSingleByte
  nameWithType: Encoding.IsSingleByte
  fullName: Encoding.IsSingleByte
- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  parent: System.Text.Encoding
  isExternal: false
  name: RegisterProvider(EncodingProvider)
  nameWithType: Encoding.RegisterProvider(EncodingProvider)
  fullName: Encoding.RegisterProvider(EncodingProvider)
- uid: System.Text.Encoding.Unicode
  parent: System.Text.Encoding
  isExternal: false
  name: Unicode
  nameWithType: Encoding.Unicode
  fullName: Encoding.Unicode
- uid: System.Text.Encoding.UTF32
  parent: System.Text.Encoding
  isExternal: false
  name: UTF32
  nameWithType: Encoding.UTF32
  fullName: Encoding.UTF32
- uid: System.Text.Encoding.UTF7
  parent: System.Text.Encoding
  isExternal: false
  name: UTF7
  nameWithType: Encoding.UTF7
  fullName: Encoding.UTF7
- uid: System.Text.Encoding.UTF8
  parent: System.Text.Encoding
  isExternal: false
  name: UTF8
  nameWithType: Encoding.UTF8
  fullName: Encoding.UTF8
- uid: System.Text.Encoding.WebName
  parent: System.Text.Encoding
  isExternal: false
  name: WebName
  nameWithType: Encoding.WebName
  fullName: Encoding.WebName
- uid: System.Text.Encoding.WindowsCodePage
  parent: System.Text.Encoding
  isExternal: false
  name: WindowsCodePage
  nameWithType: Encoding.WindowsCodePage
  fullName: Encoding.WindowsCodePage
