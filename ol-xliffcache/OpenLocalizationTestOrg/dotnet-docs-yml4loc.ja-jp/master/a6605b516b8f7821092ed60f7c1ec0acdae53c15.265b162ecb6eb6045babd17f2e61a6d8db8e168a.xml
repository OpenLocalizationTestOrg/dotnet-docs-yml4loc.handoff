{"nodes":[{"content":"Controls the ability to access files and folders. This class cannot be inherited.","nodes":[{"pos":[0,81],"content":"Controls the ability to access files and folders. This class cannot be inherited.","nodes":[{"content":"Controls the ability to access files and folders. This class cannot be inherited.","pos":[0,81],"nodes":[{"content":"Controls the ability to access files and folders.","pos":[0,49]},{"content":"This class cannot be inherited.","pos":[50,81]}]}]}],"pos":[2535,2617],"yaml":true},{"content":"This permission distinguishes between the following four types of file IO access provided by <xref:System.Security.Permissions.FileIOPermissionAccess>:  \n  \n-   `Read`: Read access to the contents of the file or access to information about the file, such as its length or last modification time.  \n  \n-   `Write`: Write access to the contents of the file or access to change information about the file, such as its name. Also allows for deletion and overwriting.  \n  \n-   `Append`: Ability to write to the end of a file only. No ability to read.  \n  \n-   `PathDiscovery`: Access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure that is revealed in the path. This value does not grant access to files or folders represented by the path.  \n  \n> [!NOTE]\n>  Giving <xref:System.Security.Permissions.FileIOPermissionAccess.Write> access to an assembly is similar to granting it full trust. If an application should not write to the file system, it should not have <xref:System.Security.Permissions.FileIOPermissionAccess.Write> access.  \n  \n All these permissions are independent, meaning that rights to one do not imply rights to another. For example, `Write` permission does not imply permission to `Read` or `Append`. If more than one permission is desired, they can be combined using a bitwise OR as shown in the code example that follows. File permission is defined in terms of canonical absolute paths; calls should always be made with canonical file paths.  \n  \n <xref:System.Security.Permissions.FileIOPermission> describes protected operations on files and folders. The <xref:System.IO.File> class helps provide secure access to files and folders. The security access check is performed when the handle to the file is created. By doing the check at creation time, the performance impact of the security check is minimized. Opening a file happens once, while reading and writing can happen multiple times. Once the file is opened, no further checks are done. If the object is passed to an untrusted caller, it can be misused. For example, file handles should not be stored in public global statics where code with less permission can access them.  \n  \n <xref:System.Security.Permissions.FileIOPermissionAccess> specifies actions that can be performed on the file or folder. In addition, these actions can be combined using a bitwise OR to form complex instances.  \n  \n Access to a folder implies access to all the files it contains, as well as access to all the files and folders in its subfolders. For example, `Read` access to C:\\folder1\\ implies `Read` access to C:\\folder1\\file1.txt, C:\\folder1\\folder2\\\\, C:\\folder1\\folder2\\file2.txt, and so on.  \n  \n> [!NOTE]\n>  In versions of the .NET Framework before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code. <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly. To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access. For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md).","nodes":[{"pos":[0,151],"content":"This permission distinguishes between the following four types of file IO access provided by <xref:System.Security.Permissions.FileIOPermissionAccess>:","nodes":[{"content":"This permission distinguishes between the following four types of file IO access provided by <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;</ph>:","pos":[0,151],"source":"This permission distinguishes between the following four types of file IO access provided by <xref:System.Security.Permissions.FileIOPermissionAccess>:"}]},{"pos":[161,295],"content":"<ph id=\"ph1\">`Read`</ph>: Read access to the contents of the file or access to information about the file, such as its length or last modification time.","source":"`Read`: Read access to the contents of the file or access to information about the file, such as its length or last modification time."},{"pos":[305,462],"content":"`Write`: Write access to the contents of the file or access to change information about the file, such as its name. Also allows for deletion and overwriting.","nodes":[{"content":"<ph id=\"ph1\">`Write`</ph>: Write access to the contents of the file or access to change information about the file, such as its name.","pos":[0,115],"source":"`Write`: Write access to the contents of the file or access to change information about the file, such as its name."},{"content":"Also allows for deletion and overwriting.","pos":[116,157]}]},{"pos":[472,545],"content":"`Append`: Ability to write to the end of a file only. No ability to read.","nodes":[{"content":"<ph id=\"ph1\">`Append`</ph>: Ability to write to the end of a file only.","pos":[0,53],"source":"`Append`: Ability to write to the end of a file only."},{"content":"No ability to read.","pos":[54,73]}]},{"pos":[555,852],"content":"`PathDiscovery`: Access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure that is revealed in the path. This value does not grant access to files or folders represented by the path.","nodes":[{"content":"<ph id=\"ph1\">`PathDiscovery`</ph>: Access to the information in the path itself.","pos":[0,62],"source":"`PathDiscovery`: Access to the information in the path itself."},{"content":"This helps protect sensitive information in the path, such as user names, as well as information about the directory structure that is revealed in the path.","pos":[63,219]},{"content":"This value does not grant access to files or folders represented by the path.","pos":[220,297]}]},{"pos":[860,1147],"content":"[!NOTE]\n Giving <xref:System.Security.Permissions.FileIOPermissionAccess.Write> access to an assembly is similar to granting it full trust. If an application should not write to the file system, it should not have <xref:System.Security.Permissions.FileIOPermissionAccess.Write> access.","leadings":["","> "],"nodes":[{"content":" Giving <xref:System.Security.Permissions.FileIOPermissionAccess.Write> access to an assembly is similar to granting it full trust. If an application should not write to the file system, it should not have <xref:System.Security.Permissions.FileIOPermissionAccess.Write> access.","pos":[8,285],"nodes":[{"content":"Giving <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess.Write&gt;</ph> access to an assembly is similar to granting it full trust.","pos":[1,131],"source":" Giving <xref:System.Security.Permissions.FileIOPermissionAccess.Write> access to an assembly is similar to granting it full trust."},{"content":"If an application should not write to the file system, it should not have <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess.Write&gt;</ph> access.","pos":[132,277],"source":" If an application should not write to the file system, it should not have <xref:System.Security.Permissions.FileIOPermissionAccess.Write> access."}]}]},{"pos":[1154,1575],"content":"All these permissions are independent, meaning that rights to one do not imply rights to another. For example, `Write` permission does not imply permission to `Read` or `Append`. If more than one permission is desired, they can be combined using a bitwise OR as shown in the code example that follows. File permission is defined in terms of canonical absolute paths; calls should always be made with canonical file paths.","nodes":[{"content":"All these permissions are independent, meaning that rights to one do not imply rights to another.","pos":[0,97]},{"content":"For example, <ph id=\"ph1\">`Write`</ph> permission does not imply permission to <ph id=\"ph2\">`Read`</ph> or <ph id=\"ph3\">`Append`</ph>.","pos":[98,178],"source":" For example, `Write` permission does not imply permission to `Read` or `Append`."},{"content":"If more than one permission is desired, they can be combined using a bitwise OR as shown in the code example that follows.","pos":[179,301]},{"content":"File permission is defined in terms of canonical absolute paths; calls should always be made with canonical file paths.","pos":[302,421]}]},{"pos":[1582,2266],"content":"<xref:System.Security.Permissions.FileIOPermission> describes protected operations on files and folders. The <xref:System.IO.File> class helps provide secure access to files and folders. The security access check is performed when the handle to the file is created. By doing the check at creation time, the performance impact of the security check is minimized. Opening a file happens once, while reading and writing can happen multiple times. Once the file is opened, no further checks are done. If the object is passed to an untrusted caller, it can be misused. For example, file handles should not be stored in public global statics where code with less permission can access them.","nodes":[{"content":"<xref:System.Security.Permissions.FileIOPermission> describes protected operations on files and folders. The <xref:System.IO.File> class helps provide secure access to files and folders. The security access check is performed when the handle to the file is created. By doing the check at creation time, the performance impact of the security check is minimized. Opening a file happens once, while reading and writing can happen multiple times. Once the file is opened, no further checks are done. If the object is passed to an untrusted caller, it can be misused. For example, file handles should not be stored in public global statics where code with less permission can access them.","pos":[0,684],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph> describes protected operations on files and folders.","pos":[0,104],"source":"<xref:System.Security.Permissions.FileIOPermission> describes protected operations on files and folders."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.File&gt;</ph> class helps provide secure access to files and folders.","pos":[105,186],"source":" The <xref:System.IO.File> class helps provide secure access to files and folders."},{"content":"The security access check is performed when the handle to the file is created.","pos":[187,265]},{"content":"By doing the check at creation time, the performance impact of the security check is minimized.","pos":[266,361]},{"content":"Opening a file happens once, while reading and writing can happen multiple times.","pos":[362,443]},{"content":"Once the file is opened, no further checks are done.","pos":[444,496]},{"content":"If the object is passed to an untrusted caller, it can be misused.","pos":[497,563]},{"content":"For example, file handles should not be stored in public global statics where code with less permission can access them.","pos":[564,684]}]}]},{"pos":[2273,2482],"content":"<xref:System.Security.Permissions.FileIOPermissionAccess> specifies actions that can be performed on the file or folder. In addition, these actions can be combined using a bitwise OR to form complex instances.","nodes":[{"content":"<xref:System.Security.Permissions.FileIOPermissionAccess> specifies actions that can be performed on the file or folder. In addition, these actions can be combined using a bitwise OR to form complex instances.","pos":[0,209],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;</ph> specifies actions that can be performed on the file or folder.","pos":[0,120],"source":"<xref:System.Security.Permissions.FileIOPermissionAccess> specifies actions that can be performed on the file or folder."},{"content":"In addition, these actions can be combined using a bitwise OR to form complex instances.","pos":[121,209]}]}]},{"pos":[2489,2770],"content":"Access to a folder implies access to all the files it contains, as well as access to all the files and folders in its subfolders. For example, `Read` access to C:\\folder1\\ implies `Read` access to C:\\folder1\\file1.txt, C:\\folder1\\folder2\\\\, C:\\folder1\\folder2\\file2.txt, and so on.","nodes":[{"content":"Access to a folder implies access to all the files it contains, as well as access to all the files and folders in its subfolders.","pos":[0,129]},{"content":"For example, <ph id=\"ph1\">`Read`</ph> access to C:\\folder1\\ implies <ph id=\"ph2\">`Read`</ph> access to C:\\folder1\\file1.txt, C:\\folder1\\folder2<ph id=\"ph3\">\\\\</ph>, C:\\folder1\\folder2\\file2.txt, and so on.","pos":[130,281],"source":" For example, `Read` access to C:\\folder1\\ implies `Read` access to C:\\folder1\\file1.txt, C:\\folder1\\folder2\\\\, C:\\folder1\\folder2\\file2.txt, and so on."}]},{"pos":[2778,3566],"content":"[!NOTE]\n In versions of the .NET Framework before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code. <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly. To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access. For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md).","leadings":["","> "],"nodes":[{"content":" In versions of the .NET Framework before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code. <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly. To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access. For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md).","pos":[8,786],"nodes":[{"content":"In versions of the .NET Framework before the <ph id=\"ph1\">[!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]</ph>, you could use the <ph id=\"ph2\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName&gt;</ph> method to prevent inadvertent access to system resources by trusted code.","pos":[1,271],"source":" In versions of the .NET Framework before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code."},{"content":"<ph id=\"ph1\">&lt;xref:System.Security.CodeAccessPermission.Deny%2A&gt;</ph> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly.","pos":[272,436],"source":" <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly."},{"content":"To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access.","pos":[437,591]},{"content":"For information about running an application in a sandbox, see <bpt id=\"p1\">[</bpt>How to: Run Partially Trusted Code in a Sandbox<ept id=\"p1\">](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md)</ept>.","pos":[592,778],"source":" For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md)."}]}]}],"pos":[2628,6230],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> class with fully restricted or unrestricted permission as specified.","nodes":[{"pos":[0,168],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> class with fully restricted or unrestricted permission as specified.","source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> class with fully restricted or unrestricted permission as specified."}],"pos":[10711,10880],"yaml":true},{"content":"Creates either fully restricted (`None`) or `Unrestricted` access to files and directories.","nodes":[{"pos":[0,91],"content":"Creates either fully restricted (<ph id=\"ph1\">`None`</ph>) or <ph id=\"ph2\">`Unrestricted`</ph> access to files and directories.","source":"Creates either fully restricted (`None`) or `Unrestricted` access to files and directories."}],"pos":[10891,10983],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> enumeration values.","nodes":[{"pos":[0,95],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> enumeration values."}],"pos":[11816,11912],"yaml":true},{"content":"The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>.","nodes":[{"pos":[0,122],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">state</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.PermissionState\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>."}],"pos":[12084,12207],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> class with the specified access to the designated file or directory.","nodes":[{"pos":[0,168],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> class with the specified access to the designated file or directory.","source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> class with the specified access to the designated file or directory."}],"pos":[13664,13833],"yaml":true},{"content":"This constructor allows only one of the <xref:System.Security.Permissions.FileIOPermissionAccess> values to be specified for the specified file or directory. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.","nodes":[{"pos":[0,270],"content":"This constructor allows only one of the <xref:System.Security.Permissions.FileIOPermissionAccess> values to be specified for the specified file or directory. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.","nodes":[{"content":"This constructor allows only one of the <xref:System.Security.Permissions.FileIOPermissionAccess> values to be specified for the specified file or directory. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.","pos":[0,270],"nodes":[{"content":"This constructor allows only one of the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;</ph> values to be specified for the specified file or directory.","pos":[0,157],"source":"This constructor allows only one of the <xref:System.Security.Permissions.FileIOPermissionAccess> values to be specified for the specified file or directory."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermission.AddPathList%2A&gt;</ph> method to define complex permissions.","pos":[158,270],"source":" Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions."}]}]}],"pos":[13844,14115],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> enumeration values.","nodes":[{"pos":[0,120],"content":"A bitwise combination of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> enumeration values."}],"pos":[15190,15311],"yaml":true},{"content":"The absolute path of the file or directory.","nodes":[{"pos":[0,43],"content":"The absolute path of the file or directory.","nodes":[{"content":"The absolute path of the file or directory.","pos":[0,43]}]}],"pos":[15371,15415],"yaml":true},{"content":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.  \n  \n -or-  \n  \n The <code>path</code> parameter is not a valid string.  \n  \n -or-  \n  \n The <code>path</code> parameter does not specify the absolute path to the file or directory.","nodes":[{"pos":[0,130],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[137,141],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[148,202],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid string.","source":"The <code>path</code> parameter is not a valid string."},{"pos":[209,213],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[220,312],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter does not specify the absolute path to the file or directory.","source":"The <code>path</code> parameter does not specify the absolute path to the file or directory."}],"pos":[15587,15912],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> class with the specified access to the designated files and directories.","nodes":[{"pos":[0,172],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> class with the specified access to the designated files and directories.","source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> class with the specified access to the designated files and directories."}],"pos":[17381,17554],"yaml":true},{"content":"This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified files and directories. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.","nodes":[{"pos":[0,266],"content":"This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified files and directories. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.","nodes":[{"content":"This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified files and directories. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.","pos":[0,266],"nodes":[{"content":"This constructor allows only one <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;</ph> value to be specified for the specified files and directories.","pos":[0,153],"source":"This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified files and directories."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermission.AddPathList%2A&gt;</ph> method to define complex permissions.","pos":[154,266],"source":" Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions."}]}]}],"pos":[17565,17832],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> enumeration values.","nodes":[{"pos":[0,120],"content":"A bitwise combination of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> enumeration values."}],"pos":[18074,18195],"yaml":true},{"content":"An array containing the absolute paths of the files and directories.","nodes":[{"pos":[0,68],"content":"An array containing the absolute paths of the files and directories.","nodes":[{"content":"An array containing the absolute paths of the files and directories.","pos":[0,68]}]}],"pos":[18261,18330],"yaml":true},{"content":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.  \n  \n -or-  \n  \n An entry in the <code>pathList</code> array is not a valid string.","nodes":[{"pos":[0,130],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[137,141],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[148,214],"content":"An entry in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pathList</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is not a valid string.","source":"An entry in the <code>pathList</code> array is not a valid string."}],"pos":[18502,18725],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> class with the specified access to the designated file or directory and the specified access rights to file control information.","nodes":[{"pos":[0,228],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> class with the specified access to the designated file or directory and the specified access rights to file control information.","source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> class with the specified access to the designated file or directory and the specified access rights to file control information."}],"pos":[20401,20630],"yaml":true},{"content":"This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified file or directories. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.  \n  \n The `control` parameter specifies whether the access control list (ACL) for the file or directory specified by `path` can be changed, viewed, or cannot be accessed.  \n  \n> [!IMPORTANT]\n>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change or view an ACL is an important permission and should be granted with caution.","nodes":[{"pos":[0,264],"content":"This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified file or directories. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.","nodes":[{"content":"This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified file or directories. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.","pos":[0,264],"nodes":[{"content":"This constructor allows only one <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;</ph> value to be specified for the specified file or directories.","pos":[0,151],"source":"This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified file or directories."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermission.AddPathList%2A&gt;</ph> method to define complex permissions.","pos":[152,264],"source":" Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions."}]}]},{"pos":[271,435],"content":"The <ph id=\"ph1\">`control`</ph> parameter specifies whether the access control list (ACL) for the file or directory specified by <ph id=\"ph2\">`path`</ph> can be changed, viewed, or cannot be accessed.","source":"The `control` parameter specifies whether the access control list (ACL) for the file or directory specified by `path` can be changed, viewed, or cannot be accessed."},{"pos":[443,711],"content":"[!IMPORTANT]\n An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change or view an ACL is an important permission and should be granted with caution.","leadings":["","> "],"nodes":[{"content":" An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change or view an ACL is an important permission and should be granted with caution.","pos":[13,266],"nodes":[{"content":"An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.","pos":[1,152]},{"content":"The ability to change or view an ACL is an important permission and should be granted with caution.","pos":[154,253]}]}]}],"pos":[20641,21360],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> enumeration values.","nodes":[{"pos":[0,120],"content":"A bitwise combination of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> enumeration values."}],"pos":[21656,21777],"yaml":true},{"content":"A bitwise combination of the <xref href=\"System.Security.AccessControl.AccessControlActions\"></xref> enumeration values.","nodes":[{"pos":[0,120],"content":"A bitwise combination of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AccessControlActions\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"A bitwise combination of the <xref href=\"System.Security.AccessControl.AccessControlActions\"></xref> enumeration values."}],"pos":[21877,21998],"yaml":true},{"content":"The absolute path of the file or directory.","nodes":[{"pos":[0,43],"content":"The absolute path of the file or directory.","nodes":[{"content":"The absolute path of the file or directory.","pos":[0,43]}]}],"pos":[22058,22102],"yaml":true},{"content":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.  \n  \n -or-  \n  \n The <code>path</code> parameter is not a valid string.  \n  \n -or-  \n  \n The <code>path</code> parameter does not specify the absolute path to the file or directory.","nodes":[{"pos":[0,130],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[137,141],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[148,202],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid string.","source":"The <code>path</code> parameter is not a valid string."},{"pos":[209,213],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[220,312],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter does not specify the absolute path to the file or directory.","source":"The <code>path</code> parameter does not specify the absolute path to the file or directory."}],"pos":[22274,22599],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> class with the specified access to the designated files and directories and the specified access rights to file control information.","nodes":[{"pos":[0,232],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> class with the specified access to the designated files and directories and the specified access rights to file control information.","source":"Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> class with the specified access to the designated files and directories and the specified access rights to file control information."}],"pos":[24287,24520],"yaml":true},{"content":"This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified files and directories. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.  \n  \n The `control` parameter specifies whether the access control list (ACL) for the file or directory specified by `path` can be changed, viewed, or cannot be accessed.  \n  \n> [!IMPORTANT]\n>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change or view an ACL is an important permission and should be granted with caution.","nodes":[{"pos":[0,266],"content":"This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified files and directories. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.","nodes":[{"content":"This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified files and directories. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.","pos":[0,266],"nodes":[{"content":"This constructor allows only one <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;</ph> value to be specified for the specified files and directories.","pos":[0,153],"source":"This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified files and directories."},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermission.AddPathList%2A&gt;</ph> method to define complex permissions.","pos":[154,266],"source":" Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions."}]}]},{"pos":[273,437],"content":"The <ph id=\"ph1\">`control`</ph> parameter specifies whether the access control list (ACL) for the file or directory specified by <ph id=\"ph2\">`path`</ph> can be changed, viewed, or cannot be accessed.","source":"The `control` parameter specifies whether the access control list (ACL) for the file or directory specified by `path` can be changed, viewed, or cannot be accessed."},{"pos":[445,713],"content":"[!IMPORTANT]\n An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change or view an ACL is an important permission and should be granted with caution.","leadings":["","> "],"nodes":[{"content":" An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change or view an ACL is an important permission and should be granted with caution.","pos":[13,266],"nodes":[{"content":"An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.","pos":[1,152]},{"content":"The ability to change or view an ACL is an important permission and should be granted with caution.","pos":[154,253]}]}]}],"pos":[24531,25252],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> enumeration values.","nodes":[{"pos":[0,120],"content":"A bitwise combination of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> enumeration values."}],"pos":[25554,25675],"yaml":true},{"content":"A bitwise combination of the <xref href=\"System.Security.AccessControl.AccessControlActions\"></xref> enumeration values.","nodes":[{"pos":[0,120],"content":"A bitwise combination of the <ph id=\"ph1\">&lt;xref href=\"System.Security.AccessControl.AccessControlActions\"&gt;&lt;/xref&gt;</ph> enumeration values.","source":"A bitwise combination of the <xref href=\"System.Security.AccessControl.AccessControlActions\"></xref> enumeration values."}],"pos":[25775,25896],"yaml":true},{"content":"An array containing the absolute paths of the files and directories.","nodes":[{"pos":[0,68],"content":"An array containing the absolute paths of the files and directories.","nodes":[{"content":"An array containing the absolute paths of the files and directories.","pos":[0,68]}]}],"pos":[25962,26031],"yaml":true},{"content":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.  \n  \n -or-  \n  \n An entry in the <code>pathList</code> array is not a valid string.","nodes":[{"pos":[0,130],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[137,141],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[148,214],"content":"An entry in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pathList</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is not a valid string.","source":"An entry in the <code>pathList</code> array is not a valid string."}],"pos":[26203,26426],"yaml":true},{"content":"Adds access for the specified file or directory to the existing state of the permission.","nodes":[{"pos":[0,88],"content":"Adds access for the specified file or directory to the existing state of the permission.","nodes":[{"content":"Adds access for the specified file or directory to the existing state of the permission.","pos":[0,88]}]}],"pos":[27879,27968],"yaml":true},{"content":"Use this method to modify file and directory access by adding to the state of the current permission.","nodes":[{"pos":[0,101],"content":"Use this method to modify file and directory access by adding to the state of the current permission.","nodes":[{"content":"Use this method to modify file and directory access by adding to the state of the current permission.","pos":[0,101]}]}],"pos":[27979,28081],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values.","nodes":[{"pos":[0,108],"content":"A bitwise combination of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph> values.","source":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values."}],"pos":[29010,29119],"yaml":true},{"content":"The absolute path of a file or directory.","nodes":[{"pos":[0,41],"content":"The absolute path of a file or directory.","nodes":[{"content":"The absolute path of a file or directory.","pos":[0,41]}]}],"pos":[29179,29221],"yaml":true},{"content":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.  \n  \n -or-  \n  \n The <code>path</code> parameter is not a valid string.  \n  \n -or-  \n  \n The <code>path</code> parameter did not specify the absolute path to the file or directory.","nodes":[{"pos":[0,130],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[137,141],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[148,202],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid string.","source":"The <code>path</code> parameter is not a valid string."},{"pos":[209,213],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[220,311],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter did not specify the absolute path to the file or directory.","source":"The <code>path</code> parameter did not specify the absolute path to the file or directory."}],"pos":[29399,29723],"yaml":true},{"content":"The <code>path</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>path</code> parameter is `null`."}],"pos":[29825,29868],"yaml":true},{"content":"The <code>path</code> parameter has an invalid format.","nodes":[{"pos":[0,54],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter has an invalid format.","source":"The <code>path</code> parameter has an invalid format."}],"pos":[29970,30025],"yaml":true},{"content":"Adds access for the specified files and directories to the existing state of the permission.","nodes":[{"pos":[0,92],"content":"Adds access for the specified files and directories to the existing state of the permission.","nodes":[{"content":"Adds access for the specified files and directories to the existing state of the permission.","pos":[0,92]}]}],"pos":[31490,31583],"yaml":true},{"content":"Use this method to modify file and directory access by adding to the state of the current permission.","nodes":[{"pos":[0,101],"content":"Use this method to modify file and directory access by adding to the state of the current permission.","nodes":[{"content":"Use this method to modify file and directory access by adding to the state of the current permission.","pos":[0,101]}]}],"pos":[31594,31696],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values.","nodes":[{"pos":[0,108],"content":"A bitwise combination of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph> values.","source":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values."}],"pos":[31938,32047],"yaml":true},{"content":"An array containing the absolute paths of the files and directories.","nodes":[{"pos":[0,68],"content":"An array containing the absolute paths of the files and directories.","nodes":[{"content":"An array containing the absolute paths of the files and directories.","pos":[0,68]}]}],"pos":[32113,32182],"yaml":true},{"content":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.  \n  \n -or-  \n  \n An entry in the <code>pathList</code> array is not valid.","nodes":[{"pos":[0,130],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[137,141],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[148,205],"content":"An entry in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pathList</ph><ept id=\"p1\">&lt;/code&gt;</ept> array is not valid.","source":"An entry in the <code>pathList</code> array is not valid."}],"pos":[32360,32574],"yaml":true},{"content":"An entry in the <code>pathList</code> array has an invalid format.","nodes":[{"pos":[0,66],"content":"An entry in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pathList</ph><ept id=\"p1\">&lt;/code&gt;</ept> array has an invalid format.","source":"An entry in the <code>pathList</code> array has an invalid format."}],"pos":[32676,32743],"yaml":true},{"content":"The <code>pathList</code> parameter is `null`.","nodes":[{"pos":[0,46],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pathList</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>pathList</code> parameter is `null`."}],"pos":[32845,32892],"yaml":true},{"content":"Gets or sets the permitted access to all files.","nodes":[{"pos":[0,47],"content":"Gets or sets the permitted access to all files.","nodes":[{"content":"Gets or sets the permitted access to all files.","pos":[0,47]}]}],"pos":[34035,34083],"yaml":true},{"content":"This property gets or sets the permitted access to all files on the local computer and network drives.  \n  \n An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be checked for using a bitwise AND operation.","nodes":[{"pos":[0,102],"content":"This property gets or sets the permitted access to all files on the local computer and network drives.","nodes":[{"content":"This property gets or sets the permitted access to all files on the local computer and network drives.","pos":[0,102]}]},{"pos":[109,236],"content":"An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be checked for using a bitwise AND operation.","nodes":[{"content":"An individual <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;</ph> value can be checked for using a bitwise AND operation.","pos":[0,127],"source":"An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be checked for using a bitwise AND operation."}]}],"pos":[34094,34335],"yaml":true,"extradata":"MT"},{"content":"The set of file I/O flags for all files.","nodes":[{"pos":[0,40],"content":"The set of file I/O flags for all files.","nodes":[{"content":"The set of file I/O flags for all files.","pos":[0,40]}]}],"pos":[35131,35172],"yaml":true},{"content":"Gets or sets the permitted access to all local files.","nodes":[{"pos":[0,53],"content":"Gets or sets the permitted access to all local files.","nodes":[{"content":"Gets or sets the permitted access to all local files.","pos":[0,53]}]}],"pos":[36429,36483],"yaml":true},{"content":"Local files are files contained on the local computer. Any files not accessed through a network drive are local files.  \n  \n An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be checked for using a bitwise AND operation.","nodes":[{"pos":[0,118],"content":"Local files are files contained on the local computer. Any files not accessed through a network drive are local files.","nodes":[{"content":"Local files are files contained on the local computer. Any files not accessed through a network drive are local files.","pos":[0,118],"nodes":[{"content":"Local files are files contained on the local computer.","pos":[0,54]},{"content":"Any files not accessed through a network drive are local files.","pos":[55,118]}]}]},{"pos":[125,252],"content":"An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be checked for using a bitwise AND operation.","nodes":[{"content":"An individual <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;</ph> value can be checked for using a bitwise AND operation.","pos":[0,127],"source":"An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be checked for using a bitwise AND operation."}]}],"pos":[36494,36751],"yaml":true,"extradata":"MT"},{"content":"The set of file I/O flags for all local files.","nodes":[{"pos":[0,46],"content":"The set of file I/O flags for all local files.","nodes":[{"content":"The set of file I/O flags for all local files.","pos":[0,46]}]}],"pos":[37557,37604],"yaml":true},{"content":"Creates and returns an identical copy of the current permission.","nodes":[{"pos":[0,64],"content":"Creates and returns an identical copy of the current permission.","nodes":[{"content":"Creates and returns an identical copy of the current permission.","pos":[0,64]}]}],"pos":[38816,38881],"yaml":true},{"content":"A copy of the permission represents the same access to resources as the original permission.","nodes":[{"pos":[0,92],"content":"A copy of the permission represents the same access to resources as the original permission.","nodes":[{"content":"A copy of the permission represents the same access to resources as the original permission.","pos":[0,92]}]}],"pos":[38892,38985],"yaml":true,"extradata":"MT"},{"content":"A copy of the current permission.","nodes":[{"pos":[0,33],"content":"A copy of the current permission.","nodes":[{"content":"A copy of the current permission.","pos":[0,33]}]}],"pos":[39151,39185],"yaml":true},{"content":"Determines whether the specified <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> object is equal to the current <xref href=\"System.Security.Permissions.FileIOPermission\"></xref>.","nodes":[{"pos":[0,196],"content":"Determines whether the specified <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> object is equal to the current <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph>.","source":"Determines whether the specified <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> object is equal to the current <xref href=\"System.Security.Permissions.FileIOPermission\"></xref>."}],"pos":[40463,40660],"yaml":true},{"content":"For more information, see <xref:System.Object.Equals%2A>.","nodes":[{"pos":[0,57],"content":"For more information, see <xref:System.Object.Equals%2A>.","nodes":[{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Object.Equals%2A&gt;</ph>.","pos":[0,57],"source":"For more information, see <xref:System.Object.Equals%2A>."}]}],"pos":[40671,40729],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> object to compare with the current <xref href=\"System.Security.Permissions.FileIOPermission\"></xref>.","nodes":[{"pos":[0,171],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> object to compare with the current <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph>.","source":"The <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> object to compare with the current <xref href=\"System.Security.Permissions.FileIOPermission\"></xref>."}],"pos":[40936,41108],"yaml":true},{"content":"`true` if the specified <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is equal to the current <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> object; otherwise, `false`.","nodes":[{"pos":[0,207],"content":"<ph id=\"ph1\">`true`</ph> if the specified <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> is equal to the current <ph id=\"ph3\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> object; otherwise, <ph id=\"ph4\">`false`</ph>.","source":"`true` if the specified <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is equal to the current <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> object; otherwise, `false`."}],"pos":[41166,41376],"yaml":true},{"content":"Reconstructs a permission with a specified state from an XML encoding.","nodes":[{"pos":[0,70],"content":"Reconstructs a permission with a specified state from an XML encoding.","nodes":[{"content":"Reconstructs a permission with a specified state from an XML encoding.","pos":[0,70]}]}],"pos":[42818,42889],"yaml":true},{"content":"The XML encoding used to reconstruct the permission.","nodes":[{"pos":[0,52],"content":"The XML encoding used to reconstruct the permission.","nodes":[{"content":"The XML encoding used to reconstruct the permission.","pos":[0,52]}]}],"pos":[43073,43126],"yaml":true},{"content":"The <code>esd</code> parameter is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>esd</code> parameter is `null`."}],"pos":[43308,43350],"yaml":true},{"content":"The <code>esd</code> parameter is not a valid permission element.  \n  \n -or-  \n  \n The <code>esd</code> parameter's version number is not compatible.","nodes":[{"pos":[0,65],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid permission element.","source":"The <code>esd</code> parameter is not a valid permission element."},{"pos":[72,76],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[83,149],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">esd</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter's version number is not compatible.","source":"The <code>esd</code> parameter's version number is not compatible."}],"pos":[43444,43600],"yaml":true},{"content":"Gets a hash code for the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> object that is suitable for use in hashing algorithms and data structures such as a hash table.","nodes":[{"pos":[0,186],"content":"Gets a hash code for the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> object that is suitable for use in hashing algorithms and data structures such as a hash table.","source":"Gets a hash code for the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> object that is suitable for use in hashing algorithms and data structures such as a hash table."}],"pos":[44765,44952],"yaml":true},{"content":"The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.Permissions.FileIOPermission> objects.","nodes":[{"pos":[0,187],"content":"The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.Permissions.FileIOPermission> objects.","nodes":[{"content":"The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph> objects.","pos":[0,187],"source":"The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.Permissions.FileIOPermission> objects."}]}],"pos":[44963,45151],"yaml":true,"extradata":"MT"},{"content":"A hash code for the current <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> object.","nodes":[{"pos":[0,101],"content":"A hash code for the current <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermission\"&gt;&lt;/xref&gt;</ph> object.","source":"A hash code for the current <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> object."}],"pos":[45352,45454],"yaml":true},{"content":"Gets all files and directories with the specified <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.","nodes":[{"pos":[0,122],"content":"Gets all files and directories with the specified <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph>.","source":"Gets all files and directories with the specified <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."}],"pos":[47003,47126],"yaml":true},{"content":"Use this method to get the state of the current permission. To get the state of both `Read` and `Write` access, two calls to this method are required.  \n  \n> [!NOTE]\n>  The `access` parameter is limited to the values of <xref:System.Security.Permissions.FileIOPermissionAccess>, which represent single types of file access. Those values are <xref:System.Security.Permissions.FileIOPermissionAccess.Read>, <xref:System.Security.Permissions.FileIOPermissionAccess.Write>, <xref:System.Security.Permissions.FileIOPermissionAccess.Append>, and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>. The values acceptable to `access` do not include <xref:System.Security.Permissions.FileIOPermissionAccess.NoAccess> and <xref:System.Security.Permissions.FileIOPermissionAccess.AllAccess>, which do not represent single types of file access.","nodes":[{"pos":[0,150],"content":"Use this method to get the state of the current permission. To get the state of both `Read` and `Write` access, two calls to this method are required.","nodes":[{"content":"Use this method to get the state of the current permission.","pos":[0,59]},{"content":"To get the state of both <ph id=\"ph1\">`Read`</ph> and <ph id=\"ph2\">`Write`</ph> access, two calls to this method are required.","pos":[60,150],"source":" To get the state of both `Read` and `Write` access, two calls to this method are required."}]},{"pos":[158,853],"content":"[!NOTE]\n The `access` parameter is limited to the values of <xref:System.Security.Permissions.FileIOPermissionAccess>, which represent single types of file access. Those values are <xref:System.Security.Permissions.FileIOPermissionAccess.Read>, <xref:System.Security.Permissions.FileIOPermissionAccess.Write>, <xref:System.Security.Permissions.FileIOPermissionAccess.Append>, and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>. The values acceptable to `access` do not include <xref:System.Security.Permissions.FileIOPermissionAccess.NoAccess> and <xref:System.Security.Permissions.FileIOPermissionAccess.AllAccess>, which do not represent single types of file access.","leadings":["","> "],"nodes":[{"content":" The `access` parameter is limited to the values of <xref:System.Security.Permissions.FileIOPermissionAccess>, which represent single types of file access. Those values are <xref:System.Security.Permissions.FileIOPermissionAccess.Read>, <xref:System.Security.Permissions.FileIOPermissionAccess.Write>, <xref:System.Security.Permissions.FileIOPermissionAccess.Append>, and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>. The values acceptable to `access` do not include <xref:System.Security.Permissions.FileIOPermissionAccess.NoAccess> and <xref:System.Security.Permissions.FileIOPermissionAccess.AllAccess>, which do not represent single types of file access.","pos":[8,693],"nodes":[{"content":"The <ph id=\"ph1\">`access`</ph> parameter is limited to the values of <ph id=\"ph2\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess&gt;</ph>, which represent single types of file access.","pos":[1,155],"source":" The `access` parameter is limited to the values of <xref:System.Security.Permissions.FileIOPermissionAccess>, which represent single types of file access."},{"content":"Those values are <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess.Read&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess.Write&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess.Append&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery&gt;</ph>.","pos":[156,444],"source":" Those values are <xref:System.Security.Permissions.FileIOPermissionAccess.Read>, <xref:System.Security.Permissions.FileIOPermissionAccess.Write>, <xref:System.Security.Permissions.FileIOPermissionAccess.Append>, and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>."},{"content":"The values acceptable to <ph id=\"ph1\">`access`</ph> do not include <ph id=\"ph2\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess.NoAccess&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess.AllAccess&gt;</ph>, which do not represent single types of file access.","pos":[445,685],"source":" The values acceptable to `access` do not include <xref:System.Security.Permissions.FileIOPermissionAccess.NoAccess> and <xref:System.Security.Permissions.FileIOPermissionAccess.AllAccess>, which do not represent single types of file access."}]}]}],"pos":[47137,47996],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values that represents a single type of file access.","nodes":[{"pos":[0,135],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph> values that represents a single type of file access.","source":"One of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values that represents a single type of file access."}],"pos":[49038,49174],"yaml":true},{"content":"An array containing the paths of the files and directories to which access specified by the <code>access</code> parameter is granted.","nodes":[{"pos":[0,133],"content":"An array containing the paths of the files and directories to which access specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is granted.","source":"An array containing the paths of the files and directories to which access specified by the <code>access</code> parameter is granted."}],"pos":[49233,49367],"yaml":true},{"content":"<code>access</code> is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.  \n  \n -or-  \n  \n <code>access</code> is <xref href=\"System.Security.Permissions.FileIOPermissionAccess.AllAccess\"></xref>, which represents more than one type of file access, or <xref href=\"System.Security.Permissions.FileIOPermissionAccess.NoAccess\"></xref>, which does not represent any type of file access.","nodes":[{"pos":[0,116],"content":"<ph id=\"ph1\">&lt;code&gt;access&lt;/code&gt;</ph> is not a valid value of <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph>.","source":"<code>access</code> is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,426],"content":"<ph id=\"ph1\">&lt;code&gt;access&lt;/code&gt;</ph> is <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.AllAccess\"&gt;&lt;/xref&gt;</ph>, which represents more than one type of file access, or <ph id=\"ph3\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess.NoAccess\"&gt;&lt;/xref&gt;</ph>, which does not represent any type of file access.","source":"<code>access</code> is <xref href=\"System.Security.Permissions.FileIOPermissionAccess.AllAccess\"></xref>, which represents more than one type of file access, or <xref href=\"System.Security.Permissions.FileIOPermissionAccess.NoAccess\"></xref>, which does not represent any type of file access."}],"pos":[49545,49984],"yaml":true},{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","nodes":[{"pos":[0,113],"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","nodes":[{"content":"Creates and returns a permission that is the intersection of the current permission and the specified permission.","pos":[0,113]}]}],"pos":[51257,51371],"yaml":true},{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.","nodes":[{"pos":[0,198],"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.","nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.","pos":[0,198],"nodes":[{"content":"The intersection of two permissions is a permission that describes the set of operations they both describe in common.","pos":[0,118]},{"content":"Only a demand that passes both original permissions will pass the intersection.","pos":[119,198]}]}]}],"pos":[51382,51581],"yaml":true,"extradata":"MT"},{"content":"A permission to intersect with the current permission. It must be the same type as the current permission.","nodes":[{"pos":[0,106],"content":"A permission to intersect with the current permission. It must be the same type as the current permission.","nodes":[{"content":"A permission to intersect with the current permission. It must be the same type as the current permission.","pos":[0,106],"nodes":[{"content":"A permission to intersect with the current permission.","pos":[0,54]},{"content":"It must be the same type as the current permission.","pos":[55,106]}]}]}],"pos":[51788,51895],"yaml":true},{"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.","nodes":[{"pos":[0,165],"content":"A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.","nodes":[{"content":"A new permission that represents the intersection of the current permission and the specified permission.","pos":[0,105]},{"content":"This new permission is <ph id=\"ph1\">`null`</ph> if the intersection is empty.","pos":[106,165],"source":" This new permission is `null` if the intersection is empty."}]}],"pos":[51966,52132],"yaml":true},{"content":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission.","nodes":[{"pos":[0,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph> and is not of the same type as the current permission.","source":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission."}],"pos":[52308,52411],"yaml":true},{"content":"Determines whether the current permission is a subset of the specified permission.","nodes":[{"pos":[0,82],"content":"Determines whether the current permission is a subset of the specified permission.","nodes":[{"content":"Determines whether the current permission is a subset of the specified permission.","pos":[0,82]}]}],"pos":[53690,53773],"yaml":true},{"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is contained by the specified permission. For example, a permission that represents read access to C:\\example.txt is a subset of a permission that represents read access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.","nodes":[{"pos":[0,444],"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is contained by the specified permission. For example, a permission that represents read access to C:\\example.txt is a subset of a permission that represents read access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.","nodes":[{"content":"The current permission is a subset of the specified permission if the current permission specifies a set of operations that is contained by the specified permission.","pos":[0,165]},{"content":"For example, a permission that represents read access to C:\\example.txt is a subset of a permission that represents read access to C:<ph id=\"ph1\">\\\\</ph>.","pos":[166,302],"source":" For example, a permission that represents read access to C:\\example.txt is a subset of a permission that represents read access to C:\\\\."},{"content":"If this method returns <ph id=\"ph1\">`true`</ph>, the current permission represents no more access to the protected resource than does the specified permission.","pos":[303,444],"source":" If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission."}]}],"pos":[53784,54229],"yaml":true,"extradata":"MT"},{"content":"A permission that is to be tested for the subset relationship. This permission must be the same type as the current permission.","nodes":[{"pos":[0,127],"content":"A permission that is to be tested for the subset relationship. This permission must be the same type as the current permission.","nodes":[{"content":"A permission that is to be tested for the subset relationship. This permission must be the same type as the current permission.","pos":[0,127],"nodes":[{"content":"A permission that is to be tested for the subset relationship.","pos":[0,62]},{"content":"This permission must be the same type as the current permission.","pos":[63,127]}]}]}],"pos":[54414,54542],"yaml":true},{"content":"`true` if the current permission is a subset of the specified permission; otherwise, `false`.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">`true`</ph> if the current permission is a subset of the specified permission; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current permission is a subset of the specified permission; otherwise, `false`."}],"pos":[54600,54696],"yaml":true},{"content":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission.","nodes":[{"pos":[0,102],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">target</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph> and is not of the same type as the current permission.","source":"The <code>target</code> parameter is not `null` and is not of the same type as the current permission."}],"pos":[54873,54976],"yaml":true},{"content":"Returns a value indicating whether the current permission is unrestricted.","nodes":[{"pos":[0,74],"content":"Returns a value indicating whether the current permission is unrestricted.","nodes":[{"content":"Returns a value indicating whether the current permission is unrestricted.","pos":[0,74]}]}],"pos":[56159,56234],"yaml":true},{"content":"An unrestricted permission represents access to all resources protected by the permission.","nodes":[{"pos":[0,90],"content":"An unrestricted permission represents access to all resources protected by the permission.","nodes":[{"content":"An unrestricted permission represents access to all resources protected by the permission.","pos":[0,90]}]}],"pos":[56245,56336],"yaml":true,"extradata":"MT"},{"content":"`true` if the current permission is unrestricted; otherwise, `false`.","nodes":[{"pos":[0,69],"content":"<ph id=\"ph1\">`true`</ph> if the current permission is unrestricted; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current permission is unrestricted; otherwise, `false`."}],"pos":[56467,56539],"yaml":true},{"content":"Sets the specified access to the specified file or directory, replacing the existing state of the permission.","nodes":[{"pos":[0,109],"content":"Sets the specified access to the specified file or directory, replacing the existing state of the permission.","nodes":[{"content":"Sets the specified access to the specified file or directory, replacing the existing state of the permission.","pos":[0,109]}]}],"pos":[58082,58192],"yaml":true},{"content":"The previous state of the current permission for the specified access type is overwritten. The following code sets the access for C:\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess.Read>.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermission#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/remarks.cpp#12)]\n [!code-csharp[System.Security.Permissions.FileIOPermission#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/remarks.cs#12)]\n [!code-vb[System.Security.Permissions.FileIOPermission#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/remarks.vb#12)]  \n  \n This access will not be overwritten by the following code because the access types are not the same.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermission#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/remarks.cpp#13)]\n [!code-csharp[System.Security.Permissions.FileIOPermission#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/remarks.cs#13)]\n [!code-vb[System.Security.Permissions.FileIOPermission#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/remarks.vb#13)]","nodes":[{"pos":[0,204],"content":"The previous state of the current permission for the specified access type is overwritten. The following code sets the access for C:\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess.Read>.","nodes":[{"content":"The previous state of the current permission for the specified access type is overwritten. The following code sets the access for C:\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess.Read>.","pos":[0,204],"nodes":[{"content":"The previous state of the current permission for the specified access type is overwritten.","pos":[0,90]},{"content":"The following code sets the access for C:\\temp to <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess.Read&gt;</ph>.","pos":[91,204],"source":" The following code sets the access for C:\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess.Read>."}]}]},{"pos":[211,737],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Security.Permissions.FileIOPermission#12<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/remarks.cpp#12)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Security.Permissions.FileIOPermission#12<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/remarks.cs#12)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Security.Permissions.FileIOPermission#12<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/remarks.vb#12)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.Security.Permissions.FileIOPermission#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/remarks.cpp#12)]\n [!code-csharp[System.Security.Permissions.FileIOPermission#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/remarks.cs#12)]\n [!code-vb[System.Security.Permissions.FileIOPermission#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/remarks.vb#12)]"},{"pos":[744,844],"content":"This access will not be overwritten by the following code because the access types are not the same.","nodes":[{"content":"This access will not be overwritten by the following code because the access types are not the same.","pos":[0,100]}]},{"pos":[851,1377],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Security.Permissions.FileIOPermission#13<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/remarks.cpp#13)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Security.Permissions.FileIOPermission#13<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/remarks.cs#13)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Security.Permissions.FileIOPermission#13<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/remarks.vb#13)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.Security.Permissions.FileIOPermission#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/remarks.cpp#13)]\n [!code-csharp[System.Security.Permissions.FileIOPermission#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/remarks.cs#13)]\n [!code-vb[System.Security.Permissions.FileIOPermission#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/remarks.vb#13)]"}],"pos":[58203,59594],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values.","nodes":[{"pos":[0,108],"content":"A bitwise combination of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph> values.","source":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values."}],"pos":[60622,60731],"yaml":true},{"content":"The absolute path of the file or directory.","nodes":[{"pos":[0,43],"content":"The absolute path of the file or directory.","nodes":[{"content":"The absolute path of the file or directory.","pos":[0,43]}]}],"pos":[60791,60835],"yaml":true},{"content":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.  \n  \n -or-  \n  \n The <code>path</code> parameter is not a valid string.  \n  \n -or-  \n  \n The <code>path</code> parameter did not specify the absolute path to the file or directory.","nodes":[{"pos":[0,130],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[137,141],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[148,202],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid string.","source":"The <code>path</code> parameter is not a valid string."},{"pos":[209,213],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[220,311],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">path</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter did not specify the absolute path to the file or directory.","source":"The <code>path</code> parameter did not specify the absolute path to the file or directory."}],"pos":[61013,61337],"yaml":true},{"content":"Sets the specified access to the specified files and directories, replacing the current state for the specified access with the new set of paths.","nodes":[{"pos":[0,145],"content":"Sets the specified access to the specified files and directories, replacing the current state for the specified access with the new set of paths.","nodes":[{"content":"Sets the specified access to the specified files and directories, replacing the current state for the specified access with the new set of paths.","pos":[0,145]}]}],"pos":[62802,62948],"yaml":true},{"content":"The previous state of the current permission for the specified access type is overwritten. The following code sets the access for C:\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess.Read>.  \n  \n This access will not be overwritten by the following code because the access types are not the same.  \n  \n [!code-cpp[System.Security.Permissions.FileIOPermission#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/remarks.cpp#15)]\n [!code-csharp[System.Security.Permissions.FileIOPermission#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/remarks.cs#15)]\n [!code-vb[System.Security.Permissions.FileIOPermission#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/remarks.vb#15)]","nodes":[{"pos":[0,204],"content":"The previous state of the current permission for the specified access type is overwritten. The following code sets the access for C:\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess.Read>.","nodes":[{"content":"The previous state of the current permission for the specified access type is overwritten. The following code sets the access for C:\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess.Read>.","pos":[0,204],"nodes":[{"content":"The previous state of the current permission for the specified access type is overwritten.","pos":[0,90]},{"content":"The following code sets the access for C:\\temp to <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermissionAccess.Read&gt;</ph>.","pos":[91,204],"source":" The following code sets the access for C:\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess.Read>."}]}]},{"pos":[211,311],"content":"This access will not be overwritten by the following code because the access types are not the same.","nodes":[{"content":"This access will not be overwritten by the following code because the access types are not the same.","pos":[0,100]}]},{"pos":[318,844],"content":"<bpt id=\"p1\">[!code-cpp</bpt><bpt id=\"p2\">[</bpt>System.Security.Permissions.FileIOPermission#15<ept id=\"p2\">](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/remarks.cpp#15)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-csharp</bpt><bpt id=\"p4\">[</bpt>System.Security.Permissions.FileIOPermission#15<ept id=\"p4\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/remarks.cs#15)</ept><ept id=\"p3\">]</ept> <bpt id=\"p5\">[!code-vb</bpt><bpt id=\"p6\">[</bpt>System.Security.Permissions.FileIOPermission#15<ept id=\"p6\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/remarks.vb#15)</ept><ept id=\"p5\">]</ept>","source":"[!code-cpp[System.Security.Permissions.FileIOPermission#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/remarks.cpp#15)]\n [!code-csharp[System.Security.Permissions.FileIOPermission#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/remarks.cs#15)]\n [!code-vb[System.Security.Permissions.FileIOPermission#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/remarks.vb#15)]"}],"pos":[62959,63813],"yaml":true,"extradata":"MT"},{"content":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values.","nodes":[{"pos":[0,108],"content":"A bitwise combination of the <ph id=\"ph1\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph> values.","source":"A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values."}],"pos":[64055,64164],"yaml":true},{"content":"An array containing the absolute paths of the files and directories.","nodes":[{"pos":[0,68],"content":"An array containing the absolute paths of the files and directories.","nodes":[{"content":"An array containing the absolute paths of the files and directories.","pos":[0,68]}]}],"pos":[64230,64299],"yaml":true},{"content":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.  \n  \n -or-  \n  \n An entry in the <code>pathList</code> parameter is not a valid string.","nodes":[{"pos":[0,130],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid value of <ph id=\"ph2\">&lt;xref href=\"System.Security.Permissions.FileIOPermissionAccess\"&gt;&lt;/xref&gt;</ph>.","source":"The <code>access</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>."},{"pos":[137,141],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[148,218],"content":"An entry in the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pathList</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not a valid string.","source":"An entry in the <code>pathList</code> parameter is not a valid string."}],"pos":[64477,64704],"yaml":true},{"content":"Creates an XML encoding of the permission and its current state.","nodes":[{"pos":[0,64],"content":"Creates an XML encoding of the permission and its current state.","nodes":[{"content":"Creates an XML encoding of the permission and its current state.","pos":[0,64]}]}],"pos":[65833,65898],"yaml":true},{"content":"An XML encoding of the permission, including any state information.","nodes":[{"pos":[0,67],"content":"An XML encoding of the permission, including any state information.","nodes":[{"content":"An XML encoding of the permission, including any state information.","pos":[0,67]}]}],"pos":[66073,66141],"yaml":true},{"content":"Creates a permission that is the union of the current permission and the specified permission.","nodes":[{"pos":[0,94],"content":"Creates a permission that is the union of the current permission and the specified permission.","nodes":[{"content":"Creates a permission that is the union of the current permission and the specified permission.","pos":[0,94]}]}],"pos":[67471,67566],"yaml":true},{"content":"The result of a call to <xref:System.Security.Permissions.FileIOPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","nodes":[{"pos":[0,269],"content":"The result of a call to <xref:System.Security.Permissions.FileIOPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","nodes":[{"content":"The result of a call to <xref:System.Security.Permissions.FileIOPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.","pos":[0,269],"nodes":[{"content":"The result of a call to <ph id=\"ph1\">&lt;xref:System.Security.Permissions.FileIOPermission.Union%2A&gt;</ph> is a permission that represents all the operations represented by both the current permission and the specified permission.","pos":[0,208],"source":"The result of a call to <xref:System.Security.Permissions.FileIOPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission."},{"content":"Any demand that passes either permission passes their union.","pos":[209,269]}]}]}],"pos":[67577,67847],"yaml":true,"extradata":"MT"},{"content":"A permission to combine with the current permission. It must be the same type as the current permission.","nodes":[{"pos":[0,104],"content":"A permission to combine with the current permission. It must be the same type as the current permission.","nodes":[{"content":"A permission to combine with the current permission. It must be the same type as the current permission.","pos":[0,104],"nodes":[{"content":"A permission to combine with the current permission.","pos":[0,52]},{"content":"It must be the same type as the current permission.","pos":[53,104]}]}]}],"pos":[68048,68153],"yaml":true},{"content":"A new permission that represents the union of the current permission and the specified permission.","nodes":[{"pos":[0,98],"content":"A new permission that represents the union of the current permission and the specified permission.","nodes":[{"content":"A new permission that represents the union of the current permission and the specified permission.","pos":[0,98]}]}],"pos":[68224,68323],"yaml":true},{"content":"The <code>other</code> parameter is not `null` and is not of the same type as the current permission.","nodes":[{"pos":[0,101],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">other</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is not <ph id=\"ph2\">`null`</ph> and is not of the same type as the current permission.","source":"The <code>other</code> parameter is not `null` and is not of the same type as the current permission."}],"pos":[68495,68597],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Security.Permissions.FileIOPermission\n  commentId: T:System.Security.Permissions.FileIOPermission\n  id: FileIOPermission\n  children:\n  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)\n  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)\n  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])\n  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  - System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])\n  - System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)\n  - System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])\n  - System.Security.Permissions.FileIOPermission.AllFiles\n  - System.Security.Permissions.FileIOPermission.AllLocalFiles\n  - System.Security.Permissions.FileIOPermission.Copy\n  - System.Security.Permissions.FileIOPermission.Equals(System.Object)\n  - System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)\n  - System.Security.Permissions.FileIOPermission.GetHashCode\n  - System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)\n  - System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)\n  - System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)\n  - System.Security.Permissions.FileIOPermission.IsUnrestricted\n  - System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)\n  - System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])\n  - System.Security.Permissions.FileIOPermission.ToXml\n  - System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)\n  langs:\n  - csharp\n  name: FileIOPermission\n  nameWithType: FileIOPermission\n  fullName: System.Security.Permissions.FileIOPermission\n  type: Class\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Controls the ability to access files and folders. This class cannot be inherited.\n  remarks: \"This permission distinguishes between the following four types of file IO access provided by <xref:System.Security.Permissions.FileIOPermissionAccess>:  \\n  \\n-   `Read`: Read access to the contents of the file or access to information about the file, such as its length or last modification time.  \\n  \\n-   `Write`: Write access to the contents of the file or access to change information about the file, such as its name. Also allows for deletion and overwriting.  \\n  \\n-   `Append`: Ability to write to the end of a file only. No ability to read.  \\n  \\n-   `PathDiscovery`: Access to the information in the path itself. This helps protect sensitive information in the path, such as user names, as well as information about the directory structure that is revealed in the path. This value does not grant access to files or folders represented by the path.  \\n  \\n> [!NOTE]\\n>  Giving <xref:System.Security.Permissions.FileIOPermissionAccess.Write> access to an assembly is similar to granting it full trust. If an application should not write to the file system, it should not have <xref:System.Security.Permissions.FileIOPermissionAccess.Write> access.  \\n  \\n All these permissions are independent, meaning that rights to one do not imply rights to another. For example, `Write` permission does not imply permission to `Read` or `Append`. If more than one permission is desired, they can be combined using a bitwise OR as shown in the code example that follows. File permission is defined in terms of canonical absolute paths; calls should always be made with canonical file paths.  \\n  \\n <xref:System.Security.Permissions.FileIOPermission> describes protected operations on files and folders. The <xref:System.IO.File> class helps provide secure access to files and folders. The security access check is performed when the handle to the file is created. By doing the check at creation time, the performance impact of the security check is minimized. Opening a file happens once, while reading and writing can happen multiple times. Once the file is opened, no further checks are done. If the object is passed to an untrusted caller, it can be misused. For example, file handles should not be stored in public global statics where code with less permission can access them.  \\n  \\n <xref:System.Security.Permissions.FileIOPermissionAccess> specifies actions that can be performed on the file or folder. In addition, these actions can be combined using a bitwise OR to form complex instances.  \\n  \\n Access to a folder implies access to all the files it contains, as well as access to all the files and folders in its subfolders. For example, `Read` access to C:\\\\folder1\\\\ implies `Read` access to C:\\\\folder1\\\\file1.txt, C:\\\\folder1\\\\folder2\\\\\\\\, C:\\\\folder1\\\\folder2\\\\file2.txt, and so on.  \\n  \\n> [!NOTE]\\n>  In versions of the .NET Framework before the [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], you could use the <xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> method to prevent inadvertent access to system resources by trusted code. <xref:System.Security.CodeAccessPermission.Deny%2A> is now obsolete, and access to resources is now determined solely by the granted permission set for an assembly. To limit access to files, you must run partially trusted code in a sandbox and assign it permissions only to resources that the code is allowed to access. For information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/docs/framework/misc/how-to-run-partially-trusted-code-in-a-sandbox.md).\"\n  example:\n  - \"The following examples illustrate code that uses <xref:System.Security.Permissions.FileIOPermission>. After the following two lines of code, the object `f` represents permission to read all files on the client computer's local disks. The code example then demands the permission to determine whether the application has permission to read the files.  \\n  \\n [!code-cpp[Classic FileIOPermission Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FileIOPermission Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CS/source.cs#1)]\\n [!code-vb[Classic FileIOPermission Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermission Example/VB/source.vb#1)]  \\n  \\n After the following two lines of code, the object `f2` represents permissions to read C:\\\\test_r and read and write to C:\\\\example\\\\out.txt. `Read` and `Write` represent the file/folder permissions as previously described. After creating the permission, the code demands the permission to determine whether the application has the right to read and write to the file.  \\n  \\n [!code-cpp[Classic FileIOPermission Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CPP/source.cpp#2)]\\n [!code-csharp[Classic FileIOPermission Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CS/source.cs#2)]\\n [!code-vb[Classic FileIOPermission Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermission Example/VB/source.vb#2)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public sealed class FileIOPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission\n  inheritance:\n  - System.Object\n  - System.Security.CodeAccessPermission\n  implements:\n  - System.Security.Permissions.IUnrestrictedPermission\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Security.CodeAccessPermission.Assert\n  - System.Security.CodeAccessPermission.Demand\n  - System.Security.CodeAccessPermission.Deny\n  - System.Security.CodeAccessPermission.PermitOnly\n  - System.Security.CodeAccessPermission.RevertAll\n  - System.Security.CodeAccessPermission.RevertAssert\n  - System.Security.CodeAccessPermission.RevertDeny\n  - System.Security.CodeAccessPermission.RevertPermitOnly\n  - System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  - System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  - System.Security.CodeAccessPermission.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)\n  commentId: M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)\n  id: '#ctor(System.Security.Permissions.PermissionState)'\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: FileIOPermission(PermissionState)\n  nameWithType: FileIOPermission.FileIOPermission(PermissionState)\n  fullName: FileIOPermission.FileIOPermission(PermissionState)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> class with fully restricted or unrestricted permission as specified.\n  remarks: Creates either fully restricted (`None`) or `Unrestricted` access to files and directories.\n  example:\n  - \"The following code example creates a new instance of the <xref:System.Security.Permissions.FileIOPermission> class with fully restricted read access.  \\n  \\n [!code-cpp[Classic FileIOPermission Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FileIOPermission Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CS/source.cs#1)]\\n [!code-vb[Classic FileIOPermission Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermission Example/VB/source.vb#1)]\"\n  syntax:\n    content: public FileIOPermission (System.Security.Permissions.PermissionState state);\n    parameters:\n    - id: state\n      type: System.Security.Permissions.PermissionState\n      description: One of the <xref href=\"System.Security.Permissions.PermissionState\"></xref> enumeration values.\n  overload: System.Security.Permissions.FileIOPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>state</code> parameter is not a valid value of <xref href=\"System.Security.Permissions.PermissionState\"></xref>.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)\n  commentId: M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)\n  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)'\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: FileIOPermission(FileIOPermissionAccess, String)\n  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess, String)\n  fullName: FileIOPermission.FileIOPermission(FileIOPermissionAccess, String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> class with the specified access to the designated file or directory.\n  remarks: This constructor allows only one of the <xref:System.Security.Permissions.FileIOPermissionAccess> values to be specified for the specified file or directory. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.\n  example:\n  - \"The following code example shows the use of the <xref:System.Security.Permissions.FileIOPermission.%23ctor%28System.Security.Permissions.FileIOPermissionAccess%2CSystem.String%29?displayProperty=fullName> constructor to create a new instance of the <xref:System.Security.Permissions.FileIOPermission> class, which provides complete access to the C:\\\\test_r file.  \\n  \\n [!code-cpp[Classic FileIOPermission Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CPP/source.cpp#2)]\\n [!code-csharp[Classic FileIOPermission Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CS/source.cs#2)]\\n [!code-vb[Classic FileIOPermission Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermission Example/VB/source.vb#2)]\"\n  syntax:\n    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, string path);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.FileIOPermissionAccess\n      description: A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> enumeration values.\n    - id: path\n      type: System.String\n      description: The absolute path of the file or directory.\n  overload: System.Security.Permissions.FileIOPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>access</code> parameter is not a valid value of <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>path</code> parameter is not a valid string.  \\n  \\n -or-  \\n  \\n The <code>path</code> parameter does not specify the absolute path to the file or directory.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])\n  commentId: M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])\n  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])'\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: FileIOPermission(FileIOPermissionAccess, String[])\n  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess, String[])\n  fullName: FileIOPermission.FileIOPermission(FileIOPermissionAccess, String[])\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> class with the specified access to the designated files and directories.\n  remarks: This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified files and directories. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.\n  syntax:\n    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.FileIOPermissionAccess\n      description: A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> enumeration values.\n    - id: pathList\n      type: System.String[]\n      description: An array containing the absolute paths of the files and directories.\n  overload: System.Security.Permissions.FileIOPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>access</code> parameter is not a valid value of <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess\\\"></xref>.  \\n  \\n -or-  \\n  \\n An entry in the <code>pathList</code> array is not a valid string.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  commentId: M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)'\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: FileIOPermission(FileIOPermissionAccess, AccessControlActions, String)\n  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess, AccessControlActions, String)\n  fullName: FileIOPermission.FileIOPermission(FileIOPermissionAccess, AccessControlActions, String)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> class with the specified access to the designated file or directory and the specified access rights to file control information.\n  remarks: \"This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified file or directories. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.  \\n  \\n The `control` parameter specifies whether the access control list (ACL) for the file or directory specified by `path` can be changed, viewed, or cannot be accessed.  \\n  \\n> [!IMPORTANT]\\n>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change or view an ACL is an important permission and should be granted with caution.\"\n  syntax:\n    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string path);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.FileIOPermissionAccess\n      description: A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> enumeration values.\n    - id: control\n      type: System.Security.AccessControl.AccessControlActions\n      description: A bitwise combination of the <xref href=\"System.Security.AccessControl.AccessControlActions\"></xref> enumeration values.\n    - id: path\n      type: System.String\n      description: The absolute path of the file or directory.\n  overload: System.Security.Permissions.FileIOPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>access</code> parameter is not a valid value of <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>path</code> parameter is not a valid string.  \\n  \\n -or-  \\n  \\n The <code>path</code> parameter does not specify the absolute path to the file or directory.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])\n  commentId: M:System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])\n  id: '#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])'\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: FileIOPermission(FileIOPermissionAccess, AccessControlActions, String[])\n  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess, AccessControlActions, String[])\n  fullName: FileIOPermission.FileIOPermission(FileIOPermissionAccess, AccessControlActions, String[])\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Initializes a new instance of the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> class with the specified access to the designated files and directories and the specified access rights to file control information.\n  remarks: \"This constructor allows only one <xref:System.Security.Permissions.FileIOPermissionAccess> value to be specified for the specified files and directories. Use the <xref:System.Security.Permissions.FileIOPermission.AddPathList%2A> method to define complex permissions.  \\n  \\n The `control` parameter specifies whether the access control list (ACL) for the file or directory specified by `path` can be changed, viewed, or cannot be accessed.  \\n  \\n> [!IMPORTANT]\\n>  An access control list (ACL) describes individuals or groups who have, or do not have, rights to specific actions on the given file and its properties.  The ability to change or view an ACL is an important permission and should be granted with caution.\"\n  syntax:\n    content: public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string[] pathList);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.FileIOPermissionAccess\n      description: A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> enumeration values.\n    - id: control\n      type: System.Security.AccessControl.AccessControlActions\n      description: A bitwise combination of the <xref href=\"System.Security.AccessControl.AccessControlActions\"></xref> enumeration values.\n    - id: pathList\n      type: System.String[]\n      description: An array containing the absolute paths of the files and directories.\n  overload: System.Security.Permissions.FileIOPermission.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>access</code> parameter is not a valid value of <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess\\\"></xref>.  \\n  \\n -or-  \\n  \\n An entry in the <code>pathList</code> array is not a valid string.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)\n  commentId: M:System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)\n  id: AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: AddPathList(FileIOPermissionAccess, String)\n  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess, String)\n  fullName: FileIOPermission.AddPathList(FileIOPermissionAccess, String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Adds access for the specified file or directory to the existing state of the permission.\n  remarks: Use this method to modify file and directory access by adding to the state of the current permission.\n  example:\n  - \"The following code example shows the use of the <xref:System.Security.Permissions.FileIOPermission.AddPathList%28System.Security.Permissions.FileIOPermissionAccess%2CSystem.String%29?displayProperty=fullName> method.  \\n  \\n [!code-cpp[Classic FileIOPermission Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CPP/source.cpp#2)]\\n [!code-csharp[Classic FileIOPermission Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CS/source.cs#2)]\\n [!code-vb[Classic FileIOPermission Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermission Example/VB/source.vb#2)]\"\n  syntax:\n    content: public void AddPathList (System.Security.Permissions.FileIOPermissionAccess access, string path);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.FileIOPermissionAccess\n      description: A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values.\n    - id: path\n      type: System.String\n      description: The absolute path of a file or directory.\n  overload: System.Security.Permissions.FileIOPermission.AddPathList*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>access</code> parameter is not a valid value of <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>path</code> parameter is not a valid string.  \\n  \\n -or-  \\n  \\n The <code>path</code> parameter did not specify the absolute path to the file or directory.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>path</code> parameter is `null`.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The <code>path</code> parameter has an invalid format.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])\n  commentId: M:System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])\n  id: AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: AddPathList(FileIOPermissionAccess, String[])\n  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess, String[])\n  fullName: FileIOPermission.AddPathList(FileIOPermissionAccess, String[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Adds access for the specified files and directories to the existing state of the permission.\n  remarks: Use this method to modify file and directory access by adding to the state of the current permission.\n  syntax:\n    content: public void AddPathList (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.FileIOPermissionAccess\n      description: A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values.\n    - id: pathList\n      type: System.String[]\n      description: An array containing the absolute paths of the files and directories.\n  overload: System.Security.Permissions.FileIOPermission.AddPathList*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>access</code> parameter is not a valid value of <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess\\\"></xref>.  \\n  \\n -or-  \\n  \\n An entry in the <code>pathList</code> array is not valid.\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: An entry in the <code>pathList</code> array has an invalid format.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>pathList</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.AllFiles\n  commentId: P:System.Security.Permissions.FileIOPermission.AllFiles\n  id: AllFiles\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: AllFiles\n  nameWithType: FileIOPermission.AllFiles\n  fullName: FileIOPermission.AllFiles\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets or sets the permitted access to all files.\n  remarks: \"This property gets or sets the permitted access to all files on the local computer and network drives.  \\n  \\n An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be checked for using a bitwise AND operation.\"\n  example:\n  - \"The following code example shows the use of the <xref:System.Security.Permissions.FileIOPermission.AllFiles%2A> property.  \\n  \\n [!code-cpp[Classic FileIOPermission Example#3](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CPP/source.cpp#3)]\\n [!code-csharp[Classic FileIOPermission Example#3](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CS/source.cs#3)]\\n [!code-vb[Classic FileIOPermission Example#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermission Example/VB/source.vb#3)]\"\n  syntax:\n    content: public System.Security.Permissions.FileIOPermissionAccess AllFiles { get; set; }\n    return:\n      type: System.Security.Permissions.FileIOPermissionAccess\n      description: The set of file I/O flags for all files.\n  overload: System.Security.Permissions.FileIOPermission.AllFiles*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.AllLocalFiles\n  commentId: P:System.Security.Permissions.FileIOPermission.AllLocalFiles\n  id: AllLocalFiles\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: AllLocalFiles\n  nameWithType: FileIOPermission.AllLocalFiles\n  fullName: FileIOPermission.AllLocalFiles\n  type: Property\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets or sets the permitted access to all local files.\n  remarks: \"Local files are files contained on the local computer. Any files not accessed through a network drive are local files.  \\n  \\n An individual <xref:System.Security.Permissions.FileIOPermissionAccess> value can be checked for using a bitwise AND operation.\"\n  example:\n  - \"The following code example shows the use of the <xref:System.Security.Permissions.FileIOPermission.AllLocalFiles%2A> property.  \\n  \\n [!code-cpp[Classic FileIOPermission Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CPP/source.cpp#1)]\\n [!code-csharp[Classic FileIOPermission Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic FileIOPermission Example/CS/source.cs#1)]\\n [!code-vb[Classic FileIOPermission Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic FileIOPermission Example/VB/source.vb#1)]\"\n  syntax:\n    content: public System.Security.Permissions.FileIOPermissionAccess AllLocalFiles { get; set; }\n    return:\n      type: System.Security.Permissions.FileIOPermissionAccess\n      description: The set of file I/O flags for all local files.\n  overload: System.Security.Permissions.FileIOPermission.AllLocalFiles*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.Copy\n  commentId: M:System.Security.Permissions.FileIOPermission.Copy\n  id: Copy\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: Copy()\n  nameWithType: FileIOPermission.Copy()\n  fullName: FileIOPermission.Copy()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Creates and returns an identical copy of the current permission.\n  remarks: A copy of the permission represents the same access to resources as the original permission.\n  syntax:\n    content: public override System.Security.IPermission Copy ();\n    parameters: []\n    return:\n      type: System.Security.IPermission\n      description: A copy of the current permission.\n  overload: System.Security.Permissions.FileIOPermission.Copy*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.Equals(System.Object)\n  commentId: M:System.Security.Permissions.FileIOPermission.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: FileIOPermission.Equals(Object)\n  fullName: FileIOPermission.Equals(Object)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Determines whether the specified <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> object is equal to the current <xref href=\"System.Security.Permissions.FileIOPermission\"></xref>.\n  remarks: For more information, see <xref:System.Object.Equals%2A>.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> object to compare with the current <xref href=\"System.Security.Permissions.FileIOPermission\"></xref>.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> is equal to the current <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> object; otherwise, `false`.'\n  overload: System.Security.Permissions.FileIOPermission.Equals*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)\n  commentId: M:System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)\n  id: FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: FromXml(SecurityElement)\n  nameWithType: FileIOPermission.FromXml(SecurityElement)\n  fullName: FileIOPermission.FromXml(SecurityElement)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Reconstructs a permission with a specified state from an XML encoding.\n  syntax:\n    content: public override void FromXml (System.Security.SecurityElement esd);\n    parameters:\n    - id: esd\n      type: System.Security.SecurityElement\n      description: The XML encoding used to reconstruct the permission.\n  overload: System.Security.Permissions.FileIOPermission.FromXml*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>esd</code> parameter is `null`.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>esd</code> parameter is not a valid permission element.  \\n  \\n -or-  \\n  \\n The <code>esd</code> parameter's version number is not compatible.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.GetHashCode\n  commentId: M:System.Security.Permissions.FileIOPermission.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: FileIOPermission.GetHashCode()\n  fullName: FileIOPermission.GetHashCode()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets a hash code for the <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> object that is suitable for use in hashing algorithms and data structures such as a hash table.\n  remarks: The hash code for two instances of the same permission might be different, hence a hash code should not be used to compare two <xref:System.Security.Permissions.FileIOPermission> objects.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: A hash code for the current <xref href=\"System.Security.Permissions.FileIOPermission\"></xref> object.\n  overload: System.Security.Permissions.FileIOPermission.GetHashCode*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)\n  commentId: M:System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)\n  id: GetPathList(System.Security.Permissions.FileIOPermissionAccess)\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: GetPathList(FileIOPermissionAccess)\n  nameWithType: FileIOPermission.GetPathList(FileIOPermissionAccess)\n  fullName: FileIOPermission.GetPathList(FileIOPermissionAccess)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Gets all files and directories with the specified <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref>.\n  remarks: \"Use this method to get the state of the current permission. To get the state of both `Read` and `Write` access, two calls to this method are required.  \\n  \\n> [!NOTE]\\n>  The `access` parameter is limited to the values of <xref:System.Security.Permissions.FileIOPermissionAccess>, which represent single types of file access. Those values are <xref:System.Security.Permissions.FileIOPermissionAccess.Read>, <xref:System.Security.Permissions.FileIOPermissionAccess.Write>, <xref:System.Security.Permissions.FileIOPermissionAccess.Append>, and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery>. The values acceptable to `access` do not include <xref:System.Security.Permissions.FileIOPermissionAccess.NoAccess> and <xref:System.Security.Permissions.FileIOPermissionAccess.AllAccess>, which do not represent single types of file access.\"\n  example:\n  - \"The following code example shows the use of the <xref:System.Security.Permissions.FileIOPermission.GetPathList%2A> method. This example is part of a larger example provided for the <xref:System.Security.Permissions.FileIOPermission> class.  \\n  \\n [!code-cpp[System.Security.Permissions.FileIOPermission#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/fileiopermission.cpp#7)]\\n [!code-csharp[System.Security.Permissions.FileIOPermission#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/fileiopermission.cs#7)]\\n [!code-vb[System.Security.Permissions.FileIOPermission#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/fileiopermission.vb#7)]\"\n  syntax:\n    content: public string[] GetPathList (System.Security.Permissions.FileIOPermissionAccess access);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.FileIOPermissionAccess\n      description: One of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values that represents a single type of file access.\n    return:\n      type: System.String[]\n      description: An array containing the paths of the files and directories to which access specified by the <code>access</code> parameter is granted.\n  overload: System.Security.Permissions.FileIOPermission.GetPathList*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>access</code> is not a valid value of <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess\\\"></xref>.  \\n  \\n -or-  \\n  \\n <code>access</code> is <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess.AllAccess\\\"></xref>, which represents more than one type of file access, or <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess.NoAccess\\\"></xref>, which does not represent any type of file access.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)\n  commentId: M:System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)\n  id: Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: Intersect(IPermission)\n  nameWithType: FileIOPermission.Intersect(IPermission)\n  fullName: FileIOPermission.Intersect(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Creates and returns a permission that is the intersection of the current permission and the specified permission.\n  remarks: The intersection of two permissions is a permission that describes the set of operations they both describe in common. Only a demand that passes both original permissions will pass the intersection.\n  syntax:\n    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission to intersect with the current permission. It must be the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the intersection of the current permission and the specified permission. This new permission is `null` if the intersection is empty.\n  overload: System.Security.Permissions.FileIOPermission.Intersect*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not `null` and is not of the same type as the current permission.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)\n  commentId: M:System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)\n  id: IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: IsSubsetOf(IPermission)\n  nameWithType: FileIOPermission.IsSubsetOf(IPermission)\n  fullName: FileIOPermission.IsSubsetOf(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Determines whether the current permission is a subset of the specified permission.\n  remarks: The current permission is a subset of the specified permission if the current permission specifies a set of operations that is contained by the specified permission. For example, a permission that represents read access to C:\\example.txt is a subset of a permission that represents read access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.\n  syntax:\n    content: public override bool IsSubsetOf (System.Security.IPermission target);\n    parameters:\n    - id: target\n      type: System.Security.IPermission\n      description: A permission that is to be tested for the subset relationship. This permission must be the same type as the current permission.\n    return:\n      type: System.Boolean\n      description: '`true` if the current permission is a subset of the specified permission; otherwise, `false`.'\n  overload: System.Security.Permissions.FileIOPermission.IsSubsetOf*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>target</code> parameter is not `null` and is not of the same type as the current permission.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.IsUnrestricted\n  commentId: M:System.Security.Permissions.FileIOPermission.IsUnrestricted\n  id: IsUnrestricted\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: IsUnrestricted()\n  nameWithType: FileIOPermission.IsUnrestricted()\n  fullName: FileIOPermission.IsUnrestricted()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Returns a value indicating whether the current permission is unrestricted.\n  remarks: An unrestricted permission represents access to all resources protected by the permission.\n  syntax:\n    content: public bool IsUnrestricted ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the current permission is unrestricted; otherwise, `false`.'\n  overload: System.Security.Permissions.FileIOPermission.IsUnrestricted*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)\n  commentId: M:System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)\n  id: SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: SetPathList(FileIOPermissionAccess, String)\n  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess, String)\n  fullName: FileIOPermission.SetPathList(FileIOPermissionAccess, String)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Sets the specified access to the specified file or directory, replacing the existing state of the permission.\n  remarks: \"The previous state of the current permission for the specified access type is overwritten. The following code sets the access for C:\\\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess.Read>.  \\n  \\n [!code-cpp[System.Security.Permissions.FileIOPermission#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/remarks.cpp#12)]\\n [!code-csharp[System.Security.Permissions.FileIOPermission#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/remarks.cs#12)]\\n [!code-vb[System.Security.Permissions.FileIOPermission#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/remarks.vb#12)]  \\n  \\n This access will not be overwritten by the following code because the access types are not the same.  \\n  \\n [!code-cpp[System.Security.Permissions.FileIOPermission#13](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/remarks.cpp#13)]\\n [!code-csharp[System.Security.Permissions.FileIOPermission#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/remarks.cs#13)]\\n [!code-vb[System.Security.Permissions.FileIOPermission#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/remarks.vb#13)]\"\n  example:\n  - \"The following code example shows the use of the <xref:System.Security.Permissions.FileIOPermission.SetPathList%28System.Security.Permissions.FileIOPermissionAccess%2CSystem.String%29?displayProperty=fullName> method.  \\n  \\n [!code-cpp[System.Security.Permissions.FileIOPermission#7](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/fileiopermission.cpp#7)]\\n [!code-csharp[System.Security.Permissions.FileIOPermission#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/fileiopermission.cs#7)]\\n [!code-vb[System.Security.Permissions.FileIOPermission#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/fileiopermission.vb#7)]\"\n  syntax:\n    content: public void SetPathList (System.Security.Permissions.FileIOPermissionAccess access, string path);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.FileIOPermissionAccess\n      description: A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values.\n    - id: path\n      type: System.String\n      description: The absolute path of the file or directory.\n  overload: System.Security.Permissions.FileIOPermission.SetPathList*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>access</code> parameter is not a valid value of <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess\\\"></xref>.  \\n  \\n -or-  \\n  \\n The <code>path</code> parameter is not a valid string.  \\n  \\n -or-  \\n  \\n The <code>path</code> parameter did not specify the absolute path to the file or directory.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])\n  commentId: M:System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])\n  id: SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: SetPathList(FileIOPermissionAccess, String[])\n  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess, String[])\n  fullName: FileIOPermission.SetPathList(FileIOPermissionAccess, String[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Sets the specified access to the specified files and directories, replacing the current state for the specified access with the new set of paths.\n  remarks: \"The previous state of the current permission for the specified access type is overwritten. The following code sets the access for C:\\\\temp to <xref:System.Security.Permissions.FileIOPermissionAccess.Read>.  \\n  \\n This access will not be overwritten by the following code because the access types are not the same.  \\n  \\n [!code-cpp[System.Security.Permissions.FileIOPermission#15](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CPP/remarks.cpp#15)]\\n [!code-csharp[System.Security.Permissions.FileIOPermission#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/CS/remarks.cs#15)]\\n [!code-vb[System.Security.Permissions.FileIOPermission#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.FileIOPermission/VB/remarks.vb#15)]\"\n  syntax:\n    content: public void SetPathList (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);\n    parameters:\n    - id: access\n      type: System.Security.Permissions.FileIOPermissionAccess\n      description: A bitwise combination of the <xref href=\"System.Security.Permissions.FileIOPermissionAccess\"></xref> values.\n    - id: pathList\n      type: System.String[]\n      description: An array containing the absolute paths of the files and directories.\n  overload: System.Security.Permissions.FileIOPermission.SetPathList*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"The <code>access</code> parameter is not a valid value of <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess\\\"></xref>.  \\n  \\n -or-  \\n  \\n An entry in the <code>pathList</code> parameter is not a valid string.\"\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.ToXml\n  commentId: M:System.Security.Permissions.FileIOPermission.ToXml\n  id: ToXml\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: ToXml()\n  nameWithType: FileIOPermission.ToXml()\n  fullName: FileIOPermission.ToXml()\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Creates an XML encoding of the permission and its current state.\n  syntax:\n    content: public override System.Security.SecurityElement ToXml ();\n    parameters: []\n    return:\n      type: System.Security.SecurityElement\n      description: An XML encoding of the permission, including any state information.\n  overload: System.Security.Permissions.FileIOPermission.ToXml*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)\n  commentId: M:System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)\n  id: Union(System.Security.IPermission)\n  parent: System.Security.Permissions.FileIOPermission\n  langs:\n  - csharp\n  name: Union(IPermission)\n  nameWithType: FileIOPermission.Union(IPermission)\n  fullName: FileIOPermission.Union(IPermission)\n  type: Method\n  assemblies:\n  - mscorlib\n  - System.Security.Permissions\n  namespace: System.Security.Permissions\n  summary: Creates a permission that is the union of the current permission and the specified permission.\n  remarks: The result of a call to <xref:System.Security.Permissions.FileIOPermission.Union%2A> is a permission that represents all the operations represented by both the current permission and the specified permission. Any demand that passes either permission passes their union.\n  syntax:\n    content: public override System.Security.IPermission Union (System.Security.IPermission other);\n    parameters:\n    - id: other\n      type: System.Security.IPermission\n      description: A permission to combine with the current permission. It must be the same type as the current permission.\n    return:\n      type: System.Security.IPermission\n      description: A new permission that represents the union of the current permission and the specified permission.\n  overload: System.Security.Permissions.FileIOPermission.Union*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>other</code> parameter is not `null` and is not of the same type as the current permission.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Security.CodeAccessPermission\n  parent: System.Security\n  isExternal: false\n  name: CodeAccessPermission\n  nameWithType: CodeAccessPermission\n  fullName: System.Security.CodeAccessPermission\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.PermissionState)\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: FileIOPermission(PermissionState)\n  nameWithType: FileIOPermission.FileIOPermission(PermissionState)\n  fullName: FileIOPermission.FileIOPermission(PermissionState)\n- uid: System.Security.Permissions.PermissionState\n  parent: System.Security.Permissions\n  isExternal: false\n  name: PermissionState\n  nameWithType: PermissionState\n  fullName: System.Security.Permissions.PermissionState\n- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String)\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: FileIOPermission(FileIOPermissionAccess, String)\n  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess, String)\n  fullName: FileIOPermission.FileIOPermission(FileIOPermissionAccess, String)\n- uid: System.Security.Permissions.FileIOPermissionAccess\n  parent: System.Security.Permissions\n  isExternal: false\n  name: FileIOPermissionAccess\n  nameWithType: FileIOPermissionAccess\n  fullName: System.Security.Permissions.FileIOPermissionAccess\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.String[])\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: FileIOPermission(FileIOPermissionAccess, String[])\n  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess, String[])\n  fullName: FileIOPermission.FileIOPermission(FileIOPermissionAccess, String[])\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: FileIOPermission(FileIOPermissionAccess, AccessControlActions, String)\n  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess, AccessControlActions, String)\n  fullName: FileIOPermission.FileIOPermission(FileIOPermissionAccess, AccessControlActions, String)\n- uid: System.Security.AccessControl.AccessControlActions\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlActions\n  nameWithType: AccessControlActions\n  fullName: System.Security.AccessControl.AccessControlActions\n- uid: System.Security.Permissions.FileIOPermission.#ctor(System.Security.Permissions.FileIOPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String[])\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: FileIOPermission(FileIOPermissionAccess, AccessControlActions, String[])\n  nameWithType: FileIOPermission.FileIOPermission(FileIOPermissionAccess, AccessControlActions, String[])\n  fullName: FileIOPermission.FileIOPermission(FileIOPermissionAccess, AccessControlActions, String[])\n- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: AddPathList(FileIOPermissionAccess, String)\n  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess, String)\n  fullName: FileIOPermission.AddPathList(FileIOPermissionAccess, String)\n- uid: System.Security.Permissions.FileIOPermission.AddPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: AddPathList(FileIOPermissionAccess, String[])\n  nameWithType: FileIOPermission.AddPathList(FileIOPermissionAccess, String[])\n  fullName: FileIOPermission.AddPathList(FileIOPermissionAccess, String[])\n- uid: System.Security.Permissions.FileIOPermission.AllFiles\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: AllFiles\n  nameWithType: FileIOPermission.AllFiles\n  fullName: FileIOPermission.AllFiles\n- uid: System.Security.Permissions.FileIOPermission.AllLocalFiles\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: AllLocalFiles\n  nameWithType: FileIOPermission.AllLocalFiles\n  fullName: FileIOPermission.AllLocalFiles\n- uid: System.Security.Permissions.FileIOPermission.Copy\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: Copy()\n  nameWithType: FileIOPermission.Copy()\n  fullName: FileIOPermission.Copy()\n- uid: System.Security.IPermission\n  parent: System.Security\n  isExternal: false\n  name: IPermission\n  nameWithType: IPermission\n  fullName: System.Security.IPermission\n- uid: System.Security.Permissions.FileIOPermission.Equals(System.Object)\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: FileIOPermission.Equals(Object)\n  fullName: FileIOPermission.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Security.Permissions.FileIOPermission.FromXml(System.Security.SecurityElement)\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: FromXml(SecurityElement)\n  nameWithType: FileIOPermission.FromXml(SecurityElement)\n  fullName: FileIOPermission.FromXml(SecurityElement)\n- uid: System.Security.SecurityElement\n  parent: System.Security\n  isExternal: false\n  name: SecurityElement\n  nameWithType: SecurityElement\n  fullName: System.Security.SecurityElement\n- uid: System.Security.Permissions.FileIOPermission.GetHashCode\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: FileIOPermission.GetHashCode()\n  fullName: FileIOPermission.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Permissions.FileIOPermission.GetPathList(System.Security.Permissions.FileIOPermissionAccess)\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: GetPathList(FileIOPermissionAccess)\n  nameWithType: FileIOPermission.GetPathList(FileIOPermissionAccess)\n  fullName: FileIOPermission.GetPathList(FileIOPermissionAccess)\n- uid: System.Security.Permissions.FileIOPermission.Intersect(System.Security.IPermission)\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: Intersect(IPermission)\n  nameWithType: FileIOPermission.Intersect(IPermission)\n  fullName: FileIOPermission.Intersect(IPermission)\n- uid: System.Security.Permissions.FileIOPermission.IsSubsetOf(System.Security.IPermission)\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: IsSubsetOf(IPermission)\n  nameWithType: FileIOPermission.IsSubsetOf(IPermission)\n  fullName: FileIOPermission.IsSubsetOf(IPermission)\n- uid: System.Security.Permissions.FileIOPermission.IsUnrestricted\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: IsUnrestricted()\n  nameWithType: FileIOPermission.IsUnrestricted()\n  fullName: FileIOPermission.IsUnrestricted()\n- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String)\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: SetPathList(FileIOPermissionAccess, String)\n  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess, String)\n  fullName: FileIOPermission.SetPathList(FileIOPermissionAccess, String)\n- uid: System.Security.Permissions.FileIOPermission.SetPathList(System.Security.Permissions.FileIOPermissionAccess,System.String[])\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: SetPathList(FileIOPermissionAccess, String[])\n  nameWithType: FileIOPermission.SetPathList(FileIOPermissionAccess, String[])\n  fullName: FileIOPermission.SetPathList(FileIOPermissionAccess, String[])\n- uid: System.Security.Permissions.FileIOPermission.ToXml\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: ToXml()\n  nameWithType: FileIOPermission.ToXml()\n  fullName: FileIOPermission.ToXml()\n- uid: System.Security.Permissions.FileIOPermission.Union(System.Security.IPermission)\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: Union(IPermission)\n  nameWithType: FileIOPermission.Union(IPermission)\n  fullName: FileIOPermission.Union(IPermission)\n- uid: System.Security.Permissions.FileIOPermission.#ctor*\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: FileIOPermission\n  nameWithType: FileIOPermission.FileIOPermission\n  fullName: FileIOPermission.FileIOPermission\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n- uid: System.Security.Permissions.FileIOPermission.AddPathList*\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: AddPathList\n  nameWithType: FileIOPermission.AddPathList\n  fullName: FileIOPermission.AddPathList\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n- uid: System.Security.Permissions.FileIOPermission.AllFiles*\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: AllFiles\n  nameWithType: FileIOPermission.AllFiles\n  fullName: FileIOPermission.AllFiles\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n- uid: System.Security.Permissions.FileIOPermission.AllLocalFiles*\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: AllLocalFiles\n  nameWithType: FileIOPermission.AllLocalFiles\n  fullName: FileIOPermission.AllLocalFiles\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n- uid: System.Security.Permissions.FileIOPermission.Copy*\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: Copy\n  nameWithType: FileIOPermission.Copy\n  fullName: FileIOPermission.Copy\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n- uid: System.Security.Permissions.FileIOPermission.Equals*\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: Equals\n  nameWithType: FileIOPermission.Equals\n  fullName: FileIOPermission.Equals\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n- uid: System.Security.Permissions.FileIOPermission.FromXml*\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: FromXml\n  nameWithType: FileIOPermission.FromXml\n  fullName: FileIOPermission.FromXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n- uid: System.Security.Permissions.FileIOPermission.GetHashCode*\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: GetHashCode\n  nameWithType: FileIOPermission.GetHashCode\n  fullName: FileIOPermission.GetHashCode\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n- uid: System.Security.Permissions.FileIOPermission.GetPathList*\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: GetPathList\n  nameWithType: FileIOPermission.GetPathList\n  fullName: FileIOPermission.GetPathList\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n- uid: System.Security.Permissions.FileIOPermission.Intersect*\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: Intersect\n  nameWithType: FileIOPermission.Intersect\n  fullName: FileIOPermission.Intersect\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n- uid: System.Security.Permissions.FileIOPermission.IsSubsetOf*\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: IsSubsetOf\n  nameWithType: FileIOPermission.IsSubsetOf\n  fullName: FileIOPermission.IsSubsetOf\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n- uid: System.Security.Permissions.FileIOPermission.IsUnrestricted*\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: IsUnrestricted\n  nameWithType: FileIOPermission.IsUnrestricted\n  fullName: FileIOPermission.IsUnrestricted\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n- uid: System.Security.Permissions.FileIOPermission.SetPathList*\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: SetPathList\n  nameWithType: FileIOPermission.SetPathList\n  fullName: FileIOPermission.SetPathList\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n- uid: System.Security.Permissions.FileIOPermission.ToXml*\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: ToXml\n  nameWithType: FileIOPermission.ToXml\n  fullName: FileIOPermission.ToXml\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n- uid: System.Security.Permissions.FileIOPermission.Union*\n  parent: System.Security.Permissions.FileIOPermission\n  isExternal: false\n  name: Union\n  nameWithType: FileIOPermission.Union\n  fullName: FileIOPermission.Union\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Security.Permissions/FileIOPermission.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Security.CodeAccessPermission.ToString\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: ToString()\n  nameWithType: CodeAccessPermission.ToString()\n  fullName: CodeAccessPermission.ToString()\n- uid: System.Security.CodeAccessPermission.Assert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Assert()\n  nameWithType: CodeAccessPermission.Assert()\n  fullName: CodeAccessPermission.Assert()\n- uid: System.Security.CodeAccessPermission.Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Demand()\n  nameWithType: CodeAccessPermission.Demand()\n  fullName: CodeAccessPermission.Demand()\n- uid: System.Security.CodeAccessPermission.Deny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: Deny()\n  nameWithType: CodeAccessPermission.Deny()\n  fullName: CodeAccessPermission.Deny()\n- uid: System.Security.CodeAccessPermission.PermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: PermitOnly()\n  nameWithType: CodeAccessPermission.PermitOnly()\n  fullName: CodeAccessPermission.PermitOnly()\n- uid: System.Security.CodeAccessPermission.RevertAll\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAll()\n  nameWithType: CodeAccessPermission.RevertAll()\n  fullName: CodeAccessPermission.RevertAll()\n- uid: System.Security.CodeAccessPermission.RevertAssert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertAssert()\n  nameWithType: CodeAccessPermission.RevertAssert()\n  fullName: CodeAccessPermission.RevertAssert()\n- uid: System.Security.CodeAccessPermission.RevertDeny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertDeny()\n  nameWithType: CodeAccessPermission.RevertDeny()\n  fullName: CodeAccessPermission.RevertDeny()\n- uid: System.Security.CodeAccessPermission.RevertPermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: RevertPermitOnly()\n  nameWithType: CodeAccessPermission.RevertPermitOnly()\n  fullName: CodeAccessPermission.RevertPermitOnly()\n- uid: System.Security.CodeAccessPermission.System#Security#IPermission#Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IPermission.Demand()\n  nameWithType: CodeAccessPermission.IPermission.Demand()\n  fullName: CodeAccessPermission.IPermission.Demand()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Assert()\n  nameWithType: CodeAccessPermission.IStackWalk.Assert()\n  fullName: CodeAccessPermission.IStackWalk.Assert()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Demand()\n  nameWithType: CodeAccessPermission.IStackWalk.Demand()\n  fullName: CodeAccessPermission.IStackWalk.Demand()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.Deny()\n  nameWithType: CodeAccessPermission.IStackWalk.Deny()\n  fullName: CodeAccessPermission.IStackWalk.Deny()\n- uid: System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly\n  parent: System.Security.CodeAccessPermission\n  isExternal: false\n  name: IStackWalk.PermitOnly()\n  nameWithType: CodeAccessPermission.IStackWalk.PermitOnly()\n  fullName: CodeAccessPermission.IStackWalk.PermitOnly()\n- uid: System.Security.Permissions.IUnrestrictedPermission\n  parent: System.Security.Permissions\n  isExternal: false\n  name: IUnrestrictedPermission\n  nameWithType: IUnrestrictedPermission\n  fullName: System.Security.Permissions.IUnrestrictedPermission\n"}