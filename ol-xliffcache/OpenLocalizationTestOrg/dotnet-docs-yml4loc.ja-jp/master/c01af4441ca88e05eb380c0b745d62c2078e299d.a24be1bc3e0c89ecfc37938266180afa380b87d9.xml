{"nodes":[{"content":"Converts a set of characters into a sequence of bytes.","nodes":[{"pos":[0,54],"content":"Converts a set of characters into a sequence of bytes.","nodes":[{"content":"Converts a set of characters into a sequence of bytes.","pos":[0,54]}]}],"pos":[1190,1245],"yaml":true},{"content":"To obtain an instance of an implementation of the <xref:System.Text.Encoder> class, the application should use the <xref:System.Text.Encoding.GetEncoder%2A> method of an <xref:System.Text.Encoding> implementation.  \n  \n The <xref:System.Text.Encoder.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoder.GetBytes%2A> method performs the actual encoding. There are several versions of both of these methods available in the <xref:System.Text.Encoder> class. For more information, see <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName>.  \n  \n A <xref:System.Text.Encoder> object maintains state information between successive calls to `GetBytes` or <xref:System.Text.Decoder.Convert%2A> methods so that it can correctly encode character sequences that span blocks. The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  \n  \n> [!NOTE]\n>  When the application is done with a stream of data it should make sure that the state information is flushed by setting the `flush` parameter to `true` in the appropriate method call. If an exception occurs or if the application switches streams, it should call <xref:System.Text.Encoder.Reset%2A> to clear the internal state of the `Encoder` object.  \n  \n## Version Considerations  \n A <xref:System.Text.Decoder> or <xref:System.Text.Encoder> object can be serialized during a conversion operation. The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.","nodes":[{"pos":[0,213],"content":"To obtain an instance of an implementation of the <xref:System.Text.Encoder> class, the application should use the <xref:System.Text.Encoding.GetEncoder%2A> method of an <xref:System.Text.Encoding> implementation.","nodes":[{"content":"To obtain an instance of an implementation of the <ph id=\"ph1\">&lt;xref:System.Text.Encoder&gt;</ph> class, the application should use the <ph id=\"ph2\">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method of an <ph id=\"ph3\">&lt;xref:System.Text.Encoding&gt;</ph> implementation.","pos":[0,213],"source":"To obtain an instance of an implementation of the <xref:System.Text.Encoder> class, the application should use the <xref:System.Text.Encoding.GetEncoder%2A> method of an <xref:System.Text.Encoding> implementation."}]},{"pos":[220,626],"content":"The <xref:System.Text.Encoder.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoder.GetBytes%2A> method performs the actual encoding. There are several versions of both of these methods available in the <xref:System.Text.Encoder> class. For more information, see <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName>.","nodes":[{"content":"The <xref:System.Text.Encoder.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoder.GetBytes%2A> method performs the actual encoding. There are several versions of both of these methods available in the <xref:System.Text.Encoder> class. For more information, see <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName>.","pos":[0,406],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph> method determines how many bytes result in encoding a set of Unicode characters, and the <ph id=\"ph2\">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> method performs the actual encoding.","pos":[0,211],"source":"The <xref:System.Text.Encoder.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoder.GetBytes%2A> method performs the actual encoding."},{"content":"There are several versions of both of these methods available in the <ph id=\"ph1\">&lt;xref:System.Text.Encoder&gt;</ph> class.","pos":[212,314],"source":" There are several versions of both of these methods available in the <xref:System.Text.Encoder> class."},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName&gt;</ph>.","pos":[315,406],"source":" For more information, see <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName>."}]}]},{"pos":[633,1392],"content":"A <xref:System.Text.Encoder> object maintains state information between successive calls to `GetBytes` or <xref:System.Text.Decoder.Convert%2A> methods so that it can correctly encode character sequences that span blocks. The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Text.Encoder&gt;</ph> object maintains state information between successive calls to <ph id=\"ph2\">`GetBytes`</ph> or <ph id=\"ph3\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph> methods so that it can correctly encode character sequences that span blocks.","pos":[0,221],"source":"A <xref:System.Text.Encoder> object maintains state information between successive calls to `GetBytes` or <xref:System.Text.Decoder.Convert%2A> methods so that it can correctly encode character sequences that span blocks."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Encoder&gt;</ph> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation.","pos":[222,378],"source":" The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation."},{"content":"For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block.","pos":[379,512]},{"content":"Therefore, <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetDecoder%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.","pos":[513,759],"source":" Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream."}]},{"pos":[1400,1761],"content":"[!NOTE]\n When the application is done with a stream of data it should make sure that the state information is flushed by setting the `flush` parameter to `true` in the appropriate method call. If an exception occurs or if the application switches streams, it should call <xref:System.Text.Encoder.Reset%2A> to clear the internal state of the `Encoder` object.","leadings":["","> "],"nodes":[{"content":" When the application is done with a stream of data it should make sure that the state information is flushed by setting the `flush` parameter to `true` in the appropriate method call. If an exception occurs or if the application switches streams, it should call <xref:System.Text.Encoder.Reset%2A> to clear the internal state of the `Encoder` object.","pos":[8,359],"nodes":[{"content":"When the application is done with a stream of data it should make sure that the state information is flushed by setting the <ph id=\"ph1\">`flush`</ph> parameter to <ph id=\"ph2\">`true`</ph> in the appropriate method call.","pos":[1,184],"source":" When the application is done with a stream of data it should make sure that the state information is flushed by setting the `flush` parameter to `true` in the appropriate method call."},{"content":"If an exception occurs or if the application switches streams, it should call <ph id=\"ph1\">&lt;xref:System.Text.Encoder.Reset%2A&gt;</ph> to clear the internal state of the <ph id=\"ph2\">`Encoder`</ph> object.","pos":[185,351],"source":" If an exception occurs or if the application switches streams, it should call <xref:System.Text.Encoder.Reset%2A> to clear the internal state of the `Encoder` object."}]}]},{"pos":[1770,1792],"content":"Version Considerations","linkify":"Version Considerations","nodes":[{"content":"Version Considerations","pos":[0,22]}]},{"pos":[1796,2062],"content":"A <xref:System.Text.Decoder> or <xref:System.Text.Encoder> object can be serialized during a conversion operation. The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.","nodes":[{"content":"A <xref:System.Text.Decoder> or <xref:System.Text.Encoder> object can be serialized during a conversion operation. The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.","pos":[0,266],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Text.Decoder&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.Encoder&gt;</ph> object can be serialized during a conversion operation.","pos":[0,114],"source":"A <xref:System.Text.Decoder> or <xref:System.Text.Encoder> object can be serialized during a conversion operation."},{"content":"The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.","pos":[115,266]}]}]}],"pos":[1256,3331],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Text.Encoder\"></xref> class.","nodes":[{"pos":[0,81],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Text.Encoder\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Text.Encoder\"></xref> class."}],"pos":[6002,6084],"yaml":true},{"content":"To obtain an instance of an implementation of this class, the application should use the <xref:System.Text.Encoding.GetEncoder%2A> method of an <xref:System.Text.Encoding> implementation.","nodes":[{"pos":[0,187],"content":"To obtain an instance of an implementation of this class, the application should use the <xref:System.Text.Encoding.GetEncoder%2A> method of an <xref:System.Text.Encoding> implementation.","nodes":[{"content":"To obtain an instance of an implementation of this class, the application should use the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetEncoder%2A&gt;</ph> method of an <ph id=\"ph2\">&lt;xref:System.Text.Encoding&gt;</ph> implementation.","pos":[0,187],"source":"To obtain an instance of an implementation of this class, the application should use the <xref:System.Text.Encoding.GetEncoder%2A> method of an <xref:System.Text.Encoding> implementation."}]}],"pos":[6095,6283],"yaml":true,"extradata":"MT"},{"content":"Converts a buffer of Unicode characters to an encoded byte sequence and stores the result in another buffer.","nodes":[{"pos":[0,108],"content":"Converts a buffer of Unicode characters to an encoded byte sequence and stores the result in another buffer.","nodes":[{"content":"Converts a buffer of Unicode characters to an encoded byte sequence and stores the result in another buffer.","pos":[0,108]}]}],"pos":[8847,8956],"yaml":true},{"content":"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  \n  \n The `Convert` method is designed to be used in a loop to encode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the encoding operation in a fixed-size buffer. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.  \n  \n The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of characters specified by the `charCount` parameter cannot be converted without exceeding the number of bytes specified by the `byteCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `chars` parameter by the number of characters specified by the `charsUsed` parameter, then call the `Convert` method again to process the remaining input.  \n  \n The `completed` parameter can also be set to `false`, even though the `charsUsed` and `charCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Encoder> object that has not been stored in the `chars` buffer.","nodes":[{"pos":[0,549],"content":"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.","nodes":[{"content":"Remember that the <ph id=\"ph1\">&lt;xref:System.Text.Encoder&gt;</ph> object saves state between calls to <ph id=\"ph2\">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph>.","pos":[0,119],"source":"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.Convert%2A>."},{"content":"When the application is done with a stream of data, it should set the <ph id=\"ph1\">`flush`</ph> parameter to <ph id=\"ph2\">`true`</ph> to make sure that the state information is flushed.","pos":[120,269],"source":" When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed."},{"content":"With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer.","pos":[270,383]},{"content":"Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.","pos":[384,549]}]},{"pos":[556,1091],"content":"The `Convert` method is designed to be used in a loop to encode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the encoding operation in a fixed-size buffer. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.","nodes":[{"content":"The <ph id=\"ph1\">`Convert`</ph> method is designed to be used in a loop to encode an arbitrary amount of input, such as data read from a file or stream.","pos":[0,134],"source":"The `Convert` method is designed to be used in a loop to encode an arbitrary amount of input, such as data read from a file or stream."},{"content":"It stores the output of the encoding operation in a fixed-size buffer.","pos":[135,205]},{"content":"<ph id=\"ph1\">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id=\"ph2\">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> will fill as much space as possible and return the chars read and bytes written.","pos":[206,432],"source":" <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written."},{"content":"Also see the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName&gt;</ph> topic for more comments.","pos":[433,535],"source":" Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments."}]},{"pos":[1098,1707],"content":"The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of characters specified by the `charCount` parameter cannot be converted without exceeding the number of bytes specified by the `byteCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `chars` parameter by the number of characters specified by the `charsUsed` parameter, then call the `Convert` method again to process the remaining input.","nodes":[{"content":"The <ph id=\"ph1\">`completed`</ph> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer.","pos":[0,130],"source":"The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer."},{"content":"This parameter is set to <ph id=\"ph1\">`false`</ph> if the number of characters specified by the <ph id=\"ph2\">`charCount`</ph> parameter cannot be converted without exceeding the number of bytes specified by the <ph id=\"ph3\">`byteCount`</ph> parameter.","pos":[131,328],"source":" This parameter is set to `false` if the number of characters specified by the `charCount` parameter cannot be converted without exceeding the number of bytes specified by the `byteCount` parameter."},{"content":"In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <ph id=\"ph1\">`chars`</ph> parameter by the number of characters specified by the <ph id=\"ph2\">`charsUsed`</ph> parameter, then call the <ph id=\"ph3\">`Convert`</ph> method again to process the remaining input.","pos":[329,609],"source":" In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `chars` parameter by the number of characters specified by the `charsUsed` parameter, then call the `Convert` method again to process the remaining input."}]},{"pos":[1714,1967],"content":"The `completed` parameter can also be set to `false`, even though the `charsUsed` and `charCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Encoder> object that has not been stored in the `chars` buffer.","nodes":[{"content":"The <ph id=\"ph1\">`completed`</ph> parameter can also be set to <ph id=\"ph2\">`false`</ph>, even though the <ph id=\"ph3\">`charsUsed`</ph> and <ph id=\"ph4\">`charCount`</ph> parameters are equal.","pos":[0,119],"source":"The `completed` parameter can also be set to `false`, even though the `charsUsed` and `charCount` parameters are equal."},{"content":"This situation occurs if there is still data in the <ph id=\"ph1\">&lt;xref:System.Text.Encoder&gt;</ph> object that has not been stored in the <ph id=\"ph2\">`chars`</ph> buffer.","pos":[120,253],"source":" This situation occurs if there is still data in the <xref:System.Text.Encoder> object that has not been stored in the `chars` buffer."}]}],"pos":[8967,10943],"yaml":true,"extradata":"MT"},{"content":"The address of a string of UTF-16 encoded characters to convert.","nodes":[{"pos":[0,64],"content":"The address of a string of UTF-16 encoded characters to convert.","nodes":[{"content":"The address of a string of UTF-16 encoded characters to convert.","pos":[0,64]}]}],"pos":[11343,11408],"yaml":true},{"content":"The number of characters in <code>chars</code> to convert.","nodes":[{"pos":[0,58],"content":"The number of characters in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> to convert.","source":"The number of characters in <code>chars</code> to convert."}],"pos":[11472,11531],"yaml":true},{"content":"The address of a buffer to store the converted bytes.","nodes":[{"pos":[0,53],"content":"The address of a buffer to store the converted bytes.","nodes":[{"content":"The address of a buffer to store the converted bytes.","pos":[0,53]}]}],"pos":[11591,11645],"yaml":true},{"content":"The maximum number of bytes in <code>bytes</code> to use in the conversion.","nodes":[{"pos":[0,75],"content":"The maximum number of bytes in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept> to use in the conversion.","source":"The maximum number of bytes in <code>bytes</code> to use in the conversion."}],"pos":[11709,11785],"yaml":true},{"content":"`true` to indicate no further data is to be converted; otherwise, `false`.","nodes":[{"pos":[0,74],"content":"<ph id=\"ph1\">`true`</ph> to indicate no further data is to be converted; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to indicate no further data is to be converted; otherwise, `false`."}],"pos":[11847,11924],"yaml":true},{"content":"When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion. This parameter is passed uninitialized.","nodes":[{"pos":[0,157],"content":"When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains the number of characters from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> that were used in the conversion.","pos":[0,117],"source":"When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion."},{"content":"This parameter is passed uninitialized.","pos":[118,157]}]}],"pos":[11988,12146],"yaml":true},{"content":"When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.","nodes":[{"pos":[0,128],"content":"When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.","pos":[0,128],"nodes":[{"content":"When this method returns, contains the number of bytes that were used in the conversion.","pos":[0,88]},{"content":"This parameter is passed uninitialized.","pos":[89,128]}]}]}],"pos":[12210,12339],"yaml":true},{"content":"When this method returns, contains `true` if all the characters specified by <code>charCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.","nodes":[{"pos":[0,175],"content":"When this method returns, contains `true` if all the characters specified by <code>charCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains <ph id=\"ph1\">`true`</ph> if all the characters specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">charCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> were converted; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,135],"source":"When this method returns, contains `true` if all the characters specified by <code>charCount</code> were converted; otherwise, `false`."},{"content":"This parameter is passed uninitialized.","pos":[136,175]}]}],"pos":[12405,12581],"yaml":true},{"content":"<code>chars</code> or <code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph> (<ph id=\"ph4\">`Nothing`</ph>).","source":"<code>chars</code> or <code>bytes</code> is `null` (`Nothing`)."}],"pos":[12738,12802],"yaml":true},{"content":"<code>charCount</code> or <code>byteCount</code> is less than zero.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.","source":"<code>charCount</code> or <code>byteCount</code> is less than zero."}],"pos":[12916,12984],"yaml":true},{"content":"The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Encoder.GetByteCount*\"></xref> method.","nodes":[{"pos":[0,211],"content":"The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Encoder.GetByteCount*\"></xref> method.","nodes":[{"content":"The output buffer is too small to contain any of the converted input.","pos":[0,69]},{"content":"The output buffer should be greater than or equal to the size indicated by the <ph id=\"ph1\">&lt;xref href=\"System.Text.Encoder.GetByteCount*\"&gt;&lt;/xref&gt;</ph> method.","pos":[70,211],"source":" The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Encoder.GetByteCount*\"></xref> method."}]}],"pos":[13078,13290],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,278],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoder.Fallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[13408,13697],"yaml":true},{"content":"Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.","nodes":[{"pos":[0,111],"content":"Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.","nodes":[{"content":"Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.","pos":[0,111]}]}],"pos":[15767,15879],"yaml":true},{"content":"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  \n  \n The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the encoding operation in a fixed-size buffer. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.  \n  \n The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of characters specified by the `charCount` parameter cannot be converted without exceeding the number of bytes specified by the `byteCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `chars` parameter by the number of characters specified by the `charsUsed` parameter, then call the `Convert` method again to process the remaining input.  \n  \n The `completed` parameter can also be set to `false`, even though the `charsUsed` and `charCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Encoder> object that has not been stored in the `chars` buffer.","nodes":[{"pos":[0,549],"content":"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.","nodes":[{"content":"Remember that the <ph id=\"ph1\">&lt;xref:System.Text.Encoder&gt;</ph> object saves state between calls to <ph id=\"ph2\">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph>.","pos":[0,119],"source":"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.Convert%2A>."},{"content":"When the application is done with a stream of data, it should set the <ph id=\"ph1\">`flush`</ph> parameter to <ph id=\"ph2\">`true`</ph> to make sure that the state information is flushed.","pos":[120,269],"source":" When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed."},{"content":"With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer.","pos":[270,383]},{"content":"Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.","pos":[384,549]}]},{"pos":[556,1091],"content":"The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the encoding operation in a fixed-size buffer. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.","nodes":[{"content":"The <ph id=\"ph1\">`Convert`</ph> method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream.","pos":[0,134],"source":"The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream."},{"content":"It stores the output of the encoding operation in a fixed-size buffer.","pos":[135,205]},{"content":"<ph id=\"ph1\">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id=\"ph2\">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> will fill as much space as possible and return the chars read and bytes written.","pos":[206,432],"source":" <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written."},{"content":"Also see the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName&gt;</ph> topic for more comments.","pos":[433,535],"source":" Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments."}]},{"pos":[1098,1707],"content":"The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of characters specified by the `charCount` parameter cannot be converted without exceeding the number of bytes specified by the `byteCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `chars` parameter by the number of characters specified by the `charsUsed` parameter, then call the `Convert` method again to process the remaining input.","nodes":[{"content":"The <ph id=\"ph1\">`completed`</ph> output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer.","pos":[0,130],"source":"The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer."},{"content":"This parameter is set to <ph id=\"ph1\">`false`</ph> if the number of characters specified by the <ph id=\"ph2\">`charCount`</ph> parameter cannot be converted without exceeding the number of bytes specified by the <ph id=\"ph3\">`byteCount`</ph> parameter.","pos":[131,328],"source":" This parameter is set to `false` if the number of characters specified by the `charCount` parameter cannot be converted without exceeding the number of bytes specified by the `byteCount` parameter."},{"content":"In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the <ph id=\"ph1\">`chars`</ph> parameter by the number of characters specified by the <ph id=\"ph2\">`charsUsed`</ph> parameter, then call the <ph id=\"ph3\">`Convert`</ph> method again to process the remaining input.","pos":[329,609],"source":" In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `chars` parameter by the number of characters specified by the `charsUsed` parameter, then call the `Convert` method again to process the remaining input."}]},{"pos":[1714,1967],"content":"The `completed` parameter can also be set to `false`, even though the `charsUsed` and `charCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Encoder> object that has not been stored in the `chars` buffer.","nodes":[{"content":"The <ph id=\"ph1\">`completed`</ph> parameter can also be set to <ph id=\"ph2\">`false`</ph>, even though the <ph id=\"ph3\">`charsUsed`</ph> and <ph id=\"ph4\">`charCount`</ph> parameters are equal.","pos":[0,119],"source":"The `completed` parameter can also be set to `false`, even though the `charsUsed` and `charCount` parameters are equal."},{"content":"This situation occurs if there is still data in the <ph id=\"ph1\">&lt;xref:System.Text.Encoder&gt;</ph> object that has not been stored in the <ph id=\"ph2\">`chars`</ph> buffer.","pos":[120,253],"source":" This situation occurs if there is still data in the <xref:System.Text.Encoder> object that has not been stored in the `chars` buffer."}]}],"pos":[15890,17866],"yaml":true,"extradata":"MT"},{"content":"An array of characters to convert.","nodes":[{"pos":[0,34],"content":"An array of characters to convert.","nodes":[{"content":"An array of characters to convert.","pos":[0,34]}]}],"pos":[18766,18801],"yaml":true},{"content":"The first element of <code>chars</code> to convert.","nodes":[{"pos":[0,51],"content":"The first element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> to convert.","source":"The first element of <code>chars</code> to convert."}],"pos":[18865,18917],"yaml":true},{"content":"The number of elements of <code>chars</code> to convert.","nodes":[{"pos":[0,56],"content":"The number of elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> to convert.","source":"The number of elements of <code>chars</code> to convert."}],"pos":[18981,19038],"yaml":true},{"content":"An array where the converted bytes are stored.","nodes":[{"pos":[0,46],"content":"An array where the converted bytes are stored.","nodes":[{"content":"An array where the converted bytes are stored.","pos":[0,46]}]}],"pos":[19099,19146],"yaml":true},{"content":"The first element of <code>bytes</code> in which data is stored.","nodes":[{"pos":[0,64],"content":"The first element of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept> in which data is stored.","source":"The first element of <code>bytes</code> in which data is stored."}],"pos":[19210,19275],"yaml":true},{"content":"The maximum number of elements of <code>bytes</code> to use in the conversion.","nodes":[{"pos":[0,78],"content":"The maximum number of elements of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept> to use in the conversion.","source":"The maximum number of elements of <code>bytes</code> to use in the conversion."}],"pos":[19339,19418],"yaml":true},{"content":"`true` to indicate no further data is to be converted; otherwise, `false`.","nodes":[{"pos":[0,74],"content":"<ph id=\"ph1\">`true`</ph> to indicate no further data is to be converted; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to indicate no further data is to be converted; otherwise, `false`."}],"pos":[19480,19557],"yaml":true},{"content":"When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion. This parameter is passed uninitialized.","nodes":[{"pos":[0,157],"content":"When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains the number of characters from <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept> that were used in the conversion.","pos":[0,117],"source":"When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion."},{"content":"This parameter is passed uninitialized.","pos":[118,157]}]}],"pos":[19621,19779],"yaml":true},{"content":"When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.","nodes":[{"pos":[0,132],"content":"When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.","pos":[0,132],"nodes":[{"content":"When this method returns, contains the number of bytes that were produced by the conversion.","pos":[0,92]},{"content":"This parameter is passed uninitialized.","pos":[93,132]}]}]}],"pos":[19843,19976],"yaml":true},{"content":"When this method returns, contains `true` if all the characters specified by <code>charCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.","nodes":[{"pos":[0,175],"content":"When this method returns, contains `true` if all the characters specified by <code>charCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains <ph id=\"ph1\">`true`</ph> if all the characters specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">charCount</ph><ept id=\"p1\">&lt;/code&gt;</ept> were converted; otherwise, <ph id=\"ph3\">`false`</ph>.","pos":[0,135],"source":"When this method returns, contains `true` if all the characters specified by <code>charCount</code> were converted; otherwise, `false`."},{"content":"This parameter is passed uninitialized.","pos":[136,175]}]}],"pos":[20042,20218],"yaml":true},{"content":"<code>chars</code> or <code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,63],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph3\">`null`</ph> (<ph id=\"ph4\">`Nothing`</ph>).","source":"<code>chars</code> or <code>bytes</code> is `null` (`Nothing`)."}],"pos":[20375,20439],"yaml":true},{"content":"<code>charIndex</code>, <code>charCount</code>, <code>byteIndex</code>, or <code>byteCount</code> is less than zero.  \n  \n -or-  \n  \n The length of <code>chars</code> - <code>charIndex</code> is less than <code>charCount</code>.  \n  \n -or-  \n  \n The length of <code>bytes</code> - <code>byteIndex</code> is less than <code>byteCount</code>.","nodes":[{"pos":[0,116],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph>, <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph>, <ph id=\"ph3\">&lt;code&gt;byteIndex&lt;/code&gt;</ph>, or <ph id=\"ph4\">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.","source":"<code>charIndex</code>, <code>charCount</code>, <code>byteIndex</code>, or <code>byteCount</code> is less than zero."},{"pos":[123,127],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[134,228],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">chars</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph2\"> - </ph><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">charIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">charCount</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The length of <code>chars</code> - <code>charIndex</code> is less than <code>charCount</code>."},{"pos":[235,239],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[246,340],"content":"The length of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept><ph id=\"ph2\"> - </ph><bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph3\">byteIndex</ph><ept id=\"p2\">&lt;/code&gt;</ept> is less than <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">byteCount</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"The length of <code>bytes</code> - <code>byteIndex</code> is less than <code>byteCount</code>."}],"pos":[20553,20904],"yaml":true},{"content":"The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Encoder.GetByteCount*\"></xref> method.","nodes":[{"pos":[0,211],"content":"The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Encoder.GetByteCount*\"></xref> method.","nodes":[{"content":"The output buffer is too small to contain any of the converted input.","pos":[0,69]},{"content":"The output buffer should be greater than or equal to the size indicated by the <ph id=\"ph1\">&lt;xref href=\"System.Text.Encoder.GetByteCount*\"&gt;&lt;/xref&gt;</ph> method.","pos":[70,211],"source":" The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Encoder.GetByteCount*\"></xref> method."}]}],"pos":[20998,21210],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,278],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoder.Fallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[21328,21617],"yaml":true},{"content":"Gets or sets a <xref href=\"System.Text.EncoderFallback\"></xref> object for the current <xref href=\"System.Text.Encoder\"></xref> object.","nodes":[{"pos":[0,135],"content":"Gets or sets a <ph id=\"ph1\">&lt;xref href=\"System.Text.EncoderFallback\"&gt;&lt;/xref&gt;</ph> object for the current <ph id=\"ph2\">&lt;xref href=\"System.Text.Encoder\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets or sets a <xref href=\"System.Text.EncoderFallback\"></xref> object for the current <xref href=\"System.Text.Encoder\"></xref> object."}],"pos":[23076,23212],"yaml":true},{"content":"The <xref:System.Text.EncoderFallback> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.","nodes":[{"pos":[0,157],"content":"The <xref:System.Text.EncoderFallback> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallback&gt;</ph> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.","pos":[0,157],"source":"The <xref:System.Text.EncoderFallback> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence."}]}],"pos":[23223,23381],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Text.EncoderFallback\"></xref> object.","nodes":[{"pos":[0,58],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Text.EncoderFallback\"&gt;&lt;/xref&gt;</ph> object.","source":"A <xref href=\"System.Text.EncoderFallback\"></xref> object."}],"pos":[23600,23659],"yaml":true},{"content":"The value in a set operation is `null` (`Nothing`).","nodes":[{"pos":[0,51],"content":"The value in a set operation is <ph id=\"ph1\">`null`</ph> (<ph id=\"ph2\">`Nothing`</ph>).","source":"The value in a set operation is `null` (`Nothing`)."}],"pos":[23817,23869],"yaml":true},{"content":"A new value cannot be assigned in a set operation because the current <xref href=\"System.Text.EncoderFallbackBuffer\"></xref> object contains data that has not been encoded yet.","nodes":[{"pos":[0,176],"content":"A new value cannot be assigned in a set operation because the current <ph id=\"ph1\">&lt;xref href=\"System.Text.EncoderFallbackBuffer\"&gt;&lt;/xref&gt;</ph> object contains data that has not been encoded yet.","source":"A new value cannot be assigned in a set operation because the current <xref href=\"System.Text.EncoderFallbackBuffer\"></xref> object contains data that has not been encoded yet."}],"pos":[23963,24140],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,278],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoder.Fallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[24258,24547],"yaml":true},{"content":"Gets the <xref href=\"System.Text.EncoderFallbackBuffer\"></xref> object associated with the current <xref href=\"System.Text.Encoder\"></xref> object.","nodes":[{"pos":[0,147],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Text.EncoderFallbackBuffer\"&gt;&lt;/xref&gt;</ph> object associated with the current <ph id=\"ph2\">&lt;xref href=\"System.Text.Encoder\"&gt;&lt;/xref&gt;</ph> object.","source":"Gets the <xref href=\"System.Text.EncoderFallbackBuffer\"></xref> object associated with the current <xref href=\"System.Text.Encoder\"></xref> object."}],"pos":[25922,26070],"yaml":true},{"content":"The <xref:System.Text.Encoder.FallbackBuffer%2A> object represents data used by the <xref:System.Text.EncoderFallback> object. The <xref:System.Text.EncoderFallback> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.","nodes":[{"pos":[0,284],"content":"The <xref:System.Text.Encoder.FallbackBuffer%2A> object represents data used by the <xref:System.Text.EncoderFallback> object. The <xref:System.Text.EncoderFallback> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.","nodes":[{"content":"The <xref:System.Text.Encoder.FallbackBuffer%2A> object represents data used by the <xref:System.Text.EncoderFallback> object. The <xref:System.Text.EncoderFallback> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.","pos":[0,284],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.Encoder.FallbackBuffer%2A&gt;</ph> object represents data used by the <ph id=\"ph2\">&lt;xref:System.Text.EncoderFallback&gt;</ph> object.","pos":[0,126],"source":"The <xref:System.Text.Encoder.FallbackBuffer%2A> object represents data used by the <xref:System.Text.EncoderFallback> object."},{"content":"The <ph id=\"ph1\">&lt;xref:System.Text.EncoderFallback&gt;</ph> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.","pos":[127,284],"source":" The <xref:System.Text.EncoderFallback> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence."}]}]}],"pos":[26081,26366],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Text.EncoderFallbackBuffer\"></xref> object.","nodes":[{"pos":[0,64],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Text.EncoderFallbackBuffer\"&gt;&lt;/xref&gt;</ph> object.","source":"A <xref href=\"System.Text.EncoderFallbackBuffer\"></xref> object."}],"pos":[26598,26663],"yaml":true},{"content":"When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer. A parameter indicates whether to clear the internal state of the encoder after the calculation.","nodes":[{"pos":[0,248],"content":"When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer. A parameter indicates whether to clear the internal state of the encoder after the calculation.","nodes":[{"content":"When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer. A parameter indicates whether to clear the internal state of the encoder after the calculation.","pos":[0,248],"nodes":[{"content":"When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.","pos":[0,152]},{"content":"A parameter indicates whether to clear the internal state of the encoder after the calculation.","pos":[153,248]}]}]}],"pos":[28259,28508],"yaml":true},{"content":"This method does not affect the state of the encoder.  \n  \n To calculate the exact array size that <xref:System.Text.Encoder.GetBytes%2A> requires to store the resulting bytes, the application should use <xref:System.Text.Encoder.GetByteCount%2A>.  \n  \n If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation.","nodes":[{"pos":[0,53],"content":"This method does not affect the state of the encoder.","nodes":[{"content":"This method does not affect the state of the encoder.","pos":[0,53]}]},{"pos":[60,247],"content":"To calculate the exact array size that <xref:System.Text.Encoder.GetBytes%2A> requires to store the resulting bytes, the application should use <xref:System.Text.Encoder.GetByteCount%2A>.","nodes":[{"content":"To calculate the exact array size that <ph id=\"ph1\">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> requires to store the resulting bytes, the application should use <ph id=\"ph2\">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.","pos":[0,187],"source":"To calculate the exact array size that <xref:System.Text.Encoder.GetBytes%2A> requires to store the resulting bytes, the application should use <xref:System.Text.Encoder.GetByteCount%2A>."}]},{"pos":[254,650],"content":"If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation.","nodes":[{"content":"If <ph id=\"ph1\">`GetBytes`</ph> is called with <ph id=\"ph2\">`flush`</ph> set to <ph id=\"ph3\">`false`</ph>, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation.","pos":[0,188],"source":"If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation."},{"content":"The application should call <ph id=\"ph1\">`GetByteCount`</ph> on a block of data immediately before calling <ph id=\"ph2\">`GetBytes`</ph> on the same block, so that any trailing characters from the previous block are included in the calculation.","pos":[189,396],"source":" The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation."}]}],"pos":[28519,29176],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first character to encode.","nodes":[{"pos":[0,43],"content":"A pointer to the first character to encode.","nodes":[{"content":"A pointer to the first character to encode.","pos":[0,43]}]}],"pos":[29490,29534],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[29594,29630],"yaml":true},{"content":"`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">`true`</ph> to simulate clearing the internal state of the encoder after the calculation; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`."}],"pos":[29692,29799],"yaml":true},{"content":"The number of bytes produced by encoding the specified characters and any characters in the internal buffer.","nodes":[{"pos":[0,108],"content":"The number of bytes produced by encoding the specified characters and any characters in the internal buffer.","nodes":[{"content":"The number of bytes produced by encoding the specified characters and any characters in the internal buffer.","pos":[0,108]}]}],"pos":[29855,29964],"yaml":true},{"content":"<code>chars</code> is `null` (`Nothing` in Visual Basic .NET).","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph> in Visual Basic .NET).","source":"<code>chars</code> is `null` (`Nothing` in Visual Basic .NET)."}],"pos":[30126,30189],"yaml":true},{"content":"<code>count</code> is less than zero.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>count</code> is less than zero."}],"pos":[30303,30341],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,278],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoder.Fallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[30459,30748],"yaml":true},{"content":"When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array. A parameter indicates whether to clear the internal state of the encoder after the calculation.","nodes":[{"pos":[0,239],"content":"When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array. A parameter indicates whether to clear the internal state of the encoder after the calculation.","nodes":[{"content":"When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array. A parameter indicates whether to clear the internal state of the encoder after the calculation.","pos":[0,239],"nodes":[{"content":"When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.","pos":[0,143]},{"content":"A parameter indicates whether to clear the internal state of the encoder after the calculation.","pos":[144,239]}]}]}],"pos":[32277,32517],"yaml":true},{"content":"This method does not affect the state of the encoder.  \n  \n To calculate the exact array size that <xref:System.Text.Encoder.GetBytes%2A> requires to store the resulting bytes, the application should use <xref:System.Text.Encoder.GetByteCount%2A>.  \n  \n If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation.","nodes":[{"pos":[0,53],"content":"This method does not affect the state of the encoder.","nodes":[{"content":"This method does not affect the state of the encoder.","pos":[0,53]}]},{"pos":[60,247],"content":"To calculate the exact array size that <xref:System.Text.Encoder.GetBytes%2A> requires to store the resulting bytes, the application should use <xref:System.Text.Encoder.GetByteCount%2A>.","nodes":[{"content":"To calculate the exact array size that <ph id=\"ph1\">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> requires to store the resulting bytes, the application should use <ph id=\"ph2\">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.","pos":[0,187],"source":"To calculate the exact array size that <xref:System.Text.Encoder.GetBytes%2A> requires to store the resulting bytes, the application should use <xref:System.Text.Encoder.GetByteCount%2A>."}]},{"pos":[254,650],"content":"If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation.","nodes":[{"content":"If <ph id=\"ph1\">`GetBytes`</ph> is called with <ph id=\"ph2\">`flush`</ph> set to <ph id=\"ph3\">`false`</ph>, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation.","pos":[0,188],"source":"If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation."},{"content":"The application should call <ph id=\"ph1\">`GetByteCount`</ph> on a block of data immediately before calling <ph id=\"ph2\">`GetBytes`</ph> on the same block, so that any trailing characters from the previous block are included in the calculation.","pos":[189,396],"source":" The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation."}]}],"pos":[32528,33185],"yaml":true,"extradata":"MT"},{"content":"The character array containing the set of characters to encode.","nodes":[{"pos":[0,63],"content":"The character array containing the set of characters to encode.","nodes":[{"content":"The character array containing the set of characters to encode.","pos":[0,63]}]}],"pos":[34185,34249],"yaml":true},{"content":"The index of the first character to encode.","nodes":[{"pos":[0,43],"content":"The index of the first character to encode.","nodes":[{"content":"The index of the first character to encode.","pos":[0,43]}]}],"pos":[34309,34353],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[34413,34449],"yaml":true},{"content":"`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`.","nodes":[{"pos":[0,104],"content":"<ph id=\"ph1\">`true`</ph> to simulate clearing the internal state of the encoder after the calculation; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`."}],"pos":[34511,34618],"yaml":true},{"content":"The number of bytes produced by encoding the specified characters and any characters in the internal buffer.","nodes":[{"pos":[0,108],"content":"The number of bytes produced by encoding the specified characters and any characters in the internal buffer.","nodes":[{"content":"The number of bytes produced by encoding the specified characters and any characters in the internal buffer.","pos":[0,108]}]}],"pos":[34674,34783],"yaml":true},{"content":"<code>chars</code> is `null`.","nodes":[{"pos":[0,29],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>chars</code> is `null`."}],"pos":[34945,34975],"yaml":true},{"content":"<code>index</code> or <code>count</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.","nodes":[{"pos":[0,59],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> is less than zero.","source":"<code>index</code> or <code>count</code> is less than zero."},{"pos":[66,70],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[77,169],"content":"<ph id=\"ph1\">&lt;code&gt;index&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;count&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>."}],"pos":[35089,35265],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,278],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoder.Fallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[35383,35672],"yaml":true},{"content":"When overridden in a derived class, encodes a set of characters starting at the specified character pointer and any characters in the internal buffer into a sequence of bytes that are stored starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the encoder after the conversion.","nodes":[{"pos":[0,325],"content":"When overridden in a derived class, encodes a set of characters starting at the specified character pointer and any characters in the internal buffer into a sequence of bytes that are stored starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the encoder after the conversion.","nodes":[{"content":"When overridden in a derived class, encodes a set of characters starting at the specified character pointer and any characters in the internal buffer into a sequence of bytes that are stored starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the encoder after the conversion.","pos":[0,325],"nodes":[{"content":"When overridden in a derived class, encodes a set of characters starting at the specified character pointer and any characters in the internal buffer into a sequence of bytes that are stored starting at the specified byte pointer.","pos":[0,230]},{"content":"A parameter indicates whether to clear the internal state of the encoder after the conversion.","pos":[231,325]}]}]}],"pos":[37344,37670],"yaml":true},{"content":"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.GetBytes%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` in the last call to `GetBytes` to make sure that the state information is flushed and that the encoded bytes are properly terminated. With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.  \n  \n To calculate the exact buffer size that `GetBytes` requires to store the resulting characters, the application should use <xref:System.Text.Encoder.GetByteCount%2A>.  \n  \n If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation.  \n  \n If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Encoder.Convert%2A> method. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.","nodes":[{"pos":[0,531],"content":"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.GetBytes%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` in the last call to `GetBytes` to make sure that the state information is flushed and that the encoded bytes are properly terminated. With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.","nodes":[{"content":"Remember that the <ph id=\"ph1\">&lt;xref:System.Text.Encoder&gt;</ph> object saves state between calls to <ph id=\"ph2\">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph>.","pos":[0,120],"source":"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.GetBytes%2A>."},{"content":"When the application is done with a stream of data, it should set the <ph id=\"ph1\">`flush`</ph> parameter to <ph id=\"ph2\">`true`</ph> in the last call to <ph id=\"ph3\">`GetBytes`</ph> to make sure that the state information is flushed and that the encoded bytes are properly terminated.","pos":[121,352],"source":" When the application is done with a stream of data, it should set the `flush` parameter to `true` in the last call to `GetBytes` to make sure that the state information is flushed and that the encoded bytes are properly terminated."},{"content":"With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.","pos":[353,531]}]},{"pos":[538,703],"content":"To calculate the exact buffer size that <ph id=\"ph1\">`GetBytes`</ph> requires to store the resulting characters, the application should use <ph id=\"ph2\">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.","source":"To calculate the exact buffer size that `GetBytes` requires to store the resulting characters, the application should use <xref:System.Text.Encoder.GetByteCount%2A>."},{"pos":[710,1101],"content":"If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation.","nodes":[{"content":"If <ph id=\"ph1\">`GetBytes`</ph> is called with <ph id=\"ph2\">`flush`</ph> set to <ph id=\"ph3\">`false`</ph>, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation.","pos":[0,183],"source":"If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation."},{"content":"The application should call <ph id=\"ph1\">`GetByteCount`</ph> on a block of data immediately before calling <ph id=\"ph2\">`GetBytes`</ph> on the same block, so that any trailing characters from the previous block are included in the calculation.","pos":[184,391],"source":" The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation."}]},{"pos":[1108,1570],"content":"If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Encoder.Convert%2A> method. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.","nodes":[{"content":"If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Encoder.Convert%2A> method. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.","pos":[0,462],"nodes":[{"content":"If your application is to convert many segments of an input stream, consider using the <ph id=\"ph1\">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> method.","pos":[0,132],"source":"If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Encoder.Convert%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id=\"ph2\">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> will fill as much space as possible and return the chars read and bytes written.","pos":[133,359],"source":" <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written."},{"content":"Also see the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName&gt;</ph> topic for more comments.","pos":[360,462],"source":" Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments."}]}]}],"pos":[37681,39260],"yaml":true,"extradata":"MT"},{"content":"A pointer to the first character to encode.","nodes":[{"pos":[0,43],"content":"A pointer to the first character to encode.","nodes":[{"content":"A pointer to the first character to encode.","pos":[0,43]}]}],"pos":[39602,39646],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[39710,39746],"yaml":true},{"content":"A pointer to the location at which to start writing the resulting sequence of bytes.","nodes":[{"pos":[0,84],"content":"A pointer to the location at which to start writing the resulting sequence of bytes.","nodes":[{"content":"A pointer to the location at which to start writing the resulting sequence of bytes.","pos":[0,84]}]}],"pos":[39806,39891],"yaml":true},{"content":"The maximum number of bytes to write.","nodes":[{"pos":[0,37],"content":"The maximum number of bytes to write.","nodes":[{"content":"The maximum number of bytes to write.","pos":[0,37]}]}],"pos":[39955,39993],"yaml":true},{"content":"`true` to clear the internal state of the encoder after the conversion; otherwise, `false`.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">`true`</ph> to clear the internal state of the encoder after the conversion; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to clear the internal state of the encoder after the conversion; otherwise, `false`."}],"pos":[40055,40149],"yaml":true},{"content":"The actual number of bytes written at the location indicated by the <code>bytes</code> parameter.","nodes":[{"pos":[0,97],"content":"The actual number of bytes written at the location indicated by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"The actual number of bytes written at the location indicated by the <code>bytes</code> parameter."}],"pos":[40205,40303],"yaml":true},{"content":"<code>chars</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>chars</code> is `null` (`Nothing`)."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,100],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[40461,40568],"yaml":true},{"content":"<code>charCount</code> or <code>byteCount</code> is less than zero.","nodes":[{"pos":[0,67],"content":"<ph id=\"ph1\">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than zero.","source":"<code>charCount</code> or <code>byteCount</code> is less than zero."}],"pos":[40682,40750],"yaml":true},{"content":"<code>byteCount</code> is less than the resulting number of bytes.","nodes":[{"pos":[0,66],"content":"<ph id=\"ph1\">&lt;code&gt;byteCount&lt;/code&gt;</ph> is less than the resulting number of bytes.","source":"<code>byteCount</code> is less than the resulting number of bytes."}],"pos":[40844,40911],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,278],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoder.Fallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[41029,41318],"yaml":true},{"content":"When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array. A parameter indicates whether to clear the internal state of the encoder after the conversion.","nodes":[{"pos":[0,266],"content":"When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array. A parameter indicates whether to clear the internal state of the encoder after the conversion.","nodes":[{"content":"When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array. A parameter indicates whether to clear the internal state of the encoder after the conversion.","pos":[0,266],"nodes":[{"content":"When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array.","pos":[0,171]},{"content":"A parameter indicates whether to clear the internal state of the encoder after the conversion.","pos":[172,266]}]}]}],"pos":[42949,43216],"yaml":true},{"content":"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.GetBytes%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` in the last call to `GetBytes` to make sure that the state information is flushed and that the encoded bytes are properly terminated. With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.  \n  \n To calculate the exact buffer size that `GetBytes` requires to store the resulting characters, the application should use <xref:System.Text.Encoder.GetByteCount%2A>.  \n  \n If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation.  \n  \n If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Encoder.Convert%2A> method. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.","nodes":[{"pos":[0,531],"content":"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.GetBytes%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` in the last call to `GetBytes` to make sure that the state information is flushed and that the encoded bytes are properly terminated. With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.","nodes":[{"content":"Remember that the <ph id=\"ph1\">&lt;xref:System.Text.Encoder&gt;</ph> object saves state between calls to <ph id=\"ph2\">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph>.","pos":[0,120],"source":"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.GetBytes%2A>."},{"content":"When the application is done with a stream of data, it should set the <ph id=\"ph1\">`flush`</ph> parameter to <ph id=\"ph2\">`true`</ph> in the last call to <ph id=\"ph3\">`GetBytes`</ph> to make sure that the state information is flushed and that the encoded bytes are properly terminated.","pos":[121,352],"source":" When the application is done with a stream of data, it should set the `flush` parameter to `true` in the last call to `GetBytes` to make sure that the state information is flushed and that the encoded bytes are properly terminated."},{"content":"With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.","pos":[353,531]}]},{"pos":[538,703],"content":"To calculate the exact buffer size that <ph id=\"ph1\">`GetBytes`</ph> requires to store the resulting characters, the application should use <ph id=\"ph2\">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>.","source":"To calculate the exact buffer size that `GetBytes` requires to store the resulting characters, the application should use <xref:System.Text.Encoder.GetByteCount%2A>."},{"pos":[710,1101],"content":"If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation.","nodes":[{"content":"If <ph id=\"ph1\">`GetBytes`</ph> is called with <ph id=\"ph2\">`flush`</ph> set to <ph id=\"ph3\">`false`</ph>, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation.","pos":[0,183],"source":"If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation."},{"content":"The application should call <ph id=\"ph1\">`GetByteCount`</ph> on a block of data immediately before calling <ph id=\"ph2\">`GetBytes`</ph> on the same block, so that any trailing characters from the previous block are included in the calculation.","pos":[184,391],"source":" The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation."}]},{"pos":[1108,1570],"content":"If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Encoder.Convert%2A> method. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.","nodes":[{"content":"If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Encoder.Convert%2A> method. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.","pos":[0,462],"nodes":[{"content":"If your application is to convert many segments of an input stream, consider using the <ph id=\"ph1\">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> method.","pos":[0,132],"source":"If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Encoder.Convert%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> will throw an exception if the output buffer isn't large enough, but <ph id=\"ph2\">&lt;xref:System.Text.Encoder.Convert%2A&gt;</ph> will fill as much space as possible and return the chars read and bytes written.","pos":[133,359],"source":" <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written."},{"content":"Also see the <ph id=\"ph1\">&lt;xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName&gt;</ph> topic for more comments.","pos":[360,462],"source":" Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments."}]}]}],"pos":[43227,44806],"yaml":true,"extradata":"MT"},{"content":"The character array containing the set of characters to encode.","nodes":[{"pos":[0,63],"content":"The character array containing the set of characters to encode.","nodes":[{"content":"The character array containing the set of characters to encode.","pos":[0,63]}]}],"pos":[45930,45994],"yaml":true},{"content":"The index of the first character to encode.","nodes":[{"pos":[0,43],"content":"The index of the first character to encode.","nodes":[{"content":"The index of the first character to encode.","pos":[0,43]}]}],"pos":[46058,46102],"yaml":true},{"content":"The number of characters to encode.","nodes":[{"pos":[0,35],"content":"The number of characters to encode.","nodes":[{"content":"The number of characters to encode.","pos":[0,35]}]}],"pos":[46166,46202],"yaml":true},{"content":"The byte array to contain the resulting sequence of bytes.","nodes":[{"pos":[0,58],"content":"The byte array to contain the resulting sequence of bytes.","nodes":[{"content":"The byte array to contain the resulting sequence of bytes.","pos":[0,58]}]}],"pos":[46263,46322],"yaml":true},{"content":"The index at which to start writing the resulting sequence of bytes.","nodes":[{"pos":[0,68],"content":"The index at which to start writing the resulting sequence of bytes.","nodes":[{"content":"The index at which to start writing the resulting sequence of bytes.","pos":[0,68]}]}],"pos":[46386,46455],"yaml":true},{"content":"`true` to clear the internal state of the encoder after the conversion; otherwise, `false`.","nodes":[{"pos":[0,91],"content":"<ph id=\"ph1\">`true`</ph> to clear the internal state of the encoder after the conversion; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` to clear the internal state of the encoder after the conversion; otherwise, `false`."}],"pos":[46517,46611],"yaml":true},{"content":"The actual number of bytes written into <code>bytes</code>.","nodes":[{"pos":[0,59],"content":"The actual number of bytes written into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bytes</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The actual number of bytes written into <code>bytes</code>."}],"pos":[46667,46727],"yaml":true},{"content":"<code>chars</code> is `null` (`Nothing`).  \n  \n -or-  \n  \n <code>bytes</code> is `null` (`Nothing`).","nodes":[{"pos":[0,41],"content":"<ph id=\"ph1\">&lt;code&gt;chars&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>chars</code> is `null` (`Nothing`)."},{"pos":[48,52],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[59,100],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph> (<ph id=\"ph3\">`Nothing`</ph>).","source":"<code>bytes</code> is `null` (`Nothing`)."}],"pos":[46885,46992],"yaml":true},{"content":"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \n  \n -or-  \n  \n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \n  \n -or-  \n  \n <code>byteIndex</code> is not a valid index in <code>bytes</code>.","nodes":[{"pos":[0,93],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> or <ph id=\"ph3\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is less than zero.","source":"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero."},{"pos":[100,104],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[111,211],"content":"<ph id=\"ph1\">&lt;code&gt;charIndex&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;charCount&lt;/code&gt;</ph> do not denote a valid range in <ph id=\"ph3\">&lt;code&gt;chars&lt;/code&gt;</ph>.","source":"<code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>."},{"pos":[218,222],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[229,295],"content":"<ph id=\"ph1\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> is not a valid index in <ph id=\"ph2\">&lt;code&gt;bytes&lt;/code&gt;</ph>.","source":"<code>byteIndex</code> is not a valid index in <code>bytes</code>."}],"pos":[47106,47412],"yaml":true},{"content":"<code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.","nodes":[{"pos":[0,136],"content":"<ph id=\"ph1\">&lt;code&gt;bytes&lt;/code&gt;</ph> does not have enough capacity from <ph id=\"ph2\">&lt;code&gt;byteIndex&lt;/code&gt;</ph> to the end of the array to accommodate the resulting bytes.","source":"<code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes."}],"pos":[47506,47643],"yaml":true},{"content":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \n  \n -and-  \n  \n <xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>.","nodes":[{"pos":[0,141],"content":"A fallback occurred (see <bpt id=\"p1\">[</bpt>Character Encoding in the .NET Framework<ept id=\"p1\">](~/docs/standard/base-types/character-encoding.md)</ept> for fuller explanation)","source":"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)"},{"pos":[148,153],"content":"-and-","nodes":[{"content":"-and-","pos":[0,5]}]},{"pos":[160,278],"content":"<ph id=\"ph1\">&lt;xref href=\"System.Text.Encoder.Fallback\"&gt;&lt;/xref&gt;</ph> is set to <ph id=\"ph2\">&lt;xref href=\"System.Text.EncoderExceptionFallback\"&gt;&lt;/xref&gt;</ph>.","source":"<xref href=\"System.Text.Encoder.Fallback\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\"></xref>."}],"pos":[47761,48050],"yaml":true},{"content":"When overridden in a derived class, sets the encoder back to its initial state.","nodes":[{"pos":[0,79],"content":"When overridden in a derived class, sets the encoder back to its initial state.","nodes":[{"content":"When overridden in a derived class, sets the encoder back to its initial state.","pos":[0,79]}]}],"pos":[49420,49500],"yaml":true},{"content":"This method clears the internal state of the <xref:System.Text.Encoder> object. The method clears any state information preserved from a previous call to <xref:System.Text.Encoder.GetBytes%2A> or <xref:System.Text.Decoder.Convert%2A>, including trailing characters at the end of the previous data block, such as an unmatched high surrogate.  \n  \n Your application should call the `Reset` method if it wants to reuse the same encoder even after an exception is thrown by <xref:System.Text.Encoder.GetBytes%2A> or <xref:System.Text.Encoder.GetByteCount%2A>, or if the application switches streams.","nodes":[{"pos":[0,340],"content":"This method clears the internal state of the <xref:System.Text.Encoder> object. The method clears any state information preserved from a previous call to <xref:System.Text.Encoder.GetBytes%2A> or <xref:System.Text.Decoder.Convert%2A>, including trailing characters at the end of the previous data block, such as an unmatched high surrogate.","nodes":[{"content":"This method clears the internal state of the <xref:System.Text.Encoder> object. The method clears any state information preserved from a previous call to <xref:System.Text.Encoder.GetBytes%2A> or <xref:System.Text.Decoder.Convert%2A>, including trailing characters at the end of the previous data block, such as an unmatched high surrogate.","pos":[0,340],"nodes":[{"content":"This method clears the internal state of the <ph id=\"ph1\">&lt;xref:System.Text.Encoder&gt;</ph> object.","pos":[0,79],"source":"This method clears the internal state of the <xref:System.Text.Encoder> object."},{"content":"The method clears any state information preserved from a previous call to <ph id=\"ph1\">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Text.Decoder.Convert%2A&gt;</ph>, including trailing characters at the end of the previous data block, such as an unmatched high surrogate.","pos":[80,340],"source":" The method clears any state information preserved from a previous call to <xref:System.Text.Encoder.GetBytes%2A> or <xref:System.Text.Decoder.Convert%2A>, including trailing characters at the end of the previous data block, such as an unmatched high surrogate."}]}]},{"pos":[347,595],"content":"Your application should call the <ph id=\"ph1\">`Reset`</ph> method if it wants to reuse the same encoder even after an exception is thrown by <ph id=\"ph2\">&lt;xref:System.Text.Encoder.GetBytes%2A&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Text.Encoder.GetByteCount%2A&gt;</ph>, or if the application switches streams.","source":"Your application should call the `Reset` method if it wants to reuse the same encoder even after an exception is thrown by <xref:System.Text.Encoder.GetBytes%2A> or <xref:System.Text.Encoder.GetByteCount%2A>, or if the application switches streams."}],"pos":[49511,50111],"yaml":true,"extradata":"MT"}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Text.Encoder\n  commentId: T:System.Text.Encoder\n  id: Encoder\n  children:\n  - System.Text.Encoder.#ctor\n  - System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  - System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  - System.Text.Encoder.Fallback\n  - System.Text.Encoder.FallbackBuffer\n  - System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)\n  - System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\n  - System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)\n  - System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\n  - System.Text.Encoder.Reset\n  langs:\n  - csharp\n  name: Encoder\n  nameWithType: Encoder\n  fullName: System.Text.Encoder\n  type: Class\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Converts a set of characters into a sequence of bytes.\n  remarks: \"To obtain an instance of an implementation of the <xref:System.Text.Encoder> class, the application should use the <xref:System.Text.Encoding.GetEncoder%2A> method of an <xref:System.Text.Encoding> implementation.  \\n  \\n The <xref:System.Text.Encoder.GetByteCount%2A> method determines how many bytes result in encoding a set of Unicode characters, and the <xref:System.Text.Encoder.GetBytes%2A> method performs the actual encoding. There are several versions of both of these methods available in the <xref:System.Text.Encoder> class. For more information, see <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName>.  \\n  \\n A <xref:System.Text.Encoder> object maintains state information between successive calls to `GetBytes` or <xref:System.Text.Decoder.Convert%2A> methods so that it can correctly encode character sequences that span blocks. The <xref:System.Text.Encoder> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.  \\n  \\n> [!NOTE]\\n>  When the application is done with a stream of data it should make sure that the state information is flushed by setting the `flush` parameter to `true` in the appropriate method call. If an exception occurs or if the application switches streams, it should call <xref:System.Text.Encoder.Reset%2A> to clear the internal state of the `Encoder` object.  \\n  \\n## Version Considerations  \\n A <xref:System.Text.Decoder> or <xref:System.Text.Encoder> object can be serialized during a conversion operation. The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.\"\n  example:\n  - \"The following example demonstrates how to convert an array of Unicode characters into blocks of bytes using a specified encoding. For comparison, the array of characters is first encoded using <xref:System.Text.UTF7Encoding>. Next, the array of characters is encoded using an <xref:System.Text.Encoder>.  \\n  \\n [!code-cpp[System.Text.Encoder Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoder Example/CPP/snippet.cpp#1)]\\n [!code-csharp[System.Text.Encoder Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoder Example/CS/snippet.cs#1)]\\n [!code-vb[System.Text.Encoder Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoder Example/VB/snippet.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public abstract class Encoder\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Encoder.#ctor\n  commentId: M:System.Text.Encoder.#ctor\n  id: '#ctor'\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: Encoder()\n  nameWithType: Encoder.Encoder()\n  fullName: Encoder.Encoder()\n  type: Constructor\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Initializes a new instance of the <xref href=\"System.Text.Encoder\"></xref> class.\n  remarks: To obtain an instance of an implementation of this class, the application should use the <xref:System.Text.Encoding.GetEncoder%2A> method of an <xref:System.Text.Encoding> implementation.\n  example:\n  - \"The following example demonstrates two techniques for initializing a new <xref:System.Text.Encoder> instance.  \\n  \\n [!code-cpp[System.Text.Encoder.ctor Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoder.ctor Example/CPP/ctor.cpp#1)]\\n [!code-csharp[System.Text.Encoder.ctor Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoder.ctor Example/CS/ctor.cs#1)]\\n [!code-vb[System.Text.Encoder.ctor Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoder.ctor Example/VB/ctor.vb#1)]\"\n  syntax:\n    content: protected Encoder ();\n    parameters: []\n  overload: System.Text.Encoder.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  commentId: M:System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  id: Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: Convert(Char*, Int32, Byte*, Int32, Boolean, Int32, Int32, Boolean)\n  nameWithType: Encoder.Convert(Char*, Int32, Byte*, Int32, Boolean, Int32, Int32, Boolean)\n  fullName: Encoder.Convert(Char*, Int32, Byte*, Int32, Boolean, Int32, Int32, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Converts a buffer of Unicode characters to an encoded byte sequence and stores the result in another buffer.\n  remarks: \"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  \\n  \\n The `Convert` method is designed to be used in a loop to encode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the encoding operation in a fixed-size buffer. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.  \\n  \\n The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of characters specified by the `charCount` parameter cannot be converted without exceeding the number of bytes specified by the `byteCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `chars` parameter by the number of characters specified by the `charsUsed` parameter, then call the `Convert` method again to process the remaining input.  \\n  \\n The `completed` parameter can also be set to `false`, even though the `charsUsed` and `charCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Encoder> object that has not been stored in the `chars` buffer.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public virtual void Convert (char* chars, int charCount, byte* bytes, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: The address of a string of UTF-16 encoded characters to convert.\n    - id: charCount\n      type: System.Int32\n      description: The number of characters in <code>chars</code> to convert.\n    - id: bytes\n      type: System.Byte*\n      description: The address of a buffer to store the converted bytes.\n    - id: byteCount\n      type: System.Int32\n      description: The maximum number of bytes in <code>bytes</code> to use in the conversion.\n    - id: flush\n      type: System.Boolean\n      description: '`true` to indicate no further data is to be converted; otherwise, `false`.'\n    - id: charsUsed\n      type: System.Int32\n      description: When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion. This parameter is passed uninitialized.\n    - id: bytesUsed\n      type: System.Int32\n      description: When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.\n    - id: completed\n      type: System.Boolean\n      description: When this method returns, contains `true` if all the characters specified by <code>charCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.\n  overload: System.Text.Encoder.Convert*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>chars</code> or <code>bytes</code> is `null` (`Nothing`).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>charCount</code> or <code>byteCount</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Encoder.GetByteCount*\"></xref> method.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoder.Fallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  altCompliant: System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  commentId: M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  id: Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, Int32, Int32, Boolean)\n  nameWithType: Encoder.Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, Int32, Int32, Boolean)\n  fullName: Encoder.Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, Int32, Int32, Boolean)\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.\n  remarks: \"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.Convert%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` to make sure that the state information is flushed. With this setting, the encoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  \\n  \\n The `Convert` method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the encoding operation in a fixed-size buffer. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.  \\n  \\n The `completed` output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to `false` if the number of characters specified by the `charCount` parameter cannot be converted without exceeding the number of bytes specified by the `byteCount` parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the `chars` parameter by the number of characters specified by the `charsUsed` parameter, then call the `Convert` method again to process the remaining input.  \\n  \\n The `completed` parameter can also be set to `false`, even though the `charsUsed` and `charCount` parameters are equal. This situation occurs if there is still data in the <xref:System.Text.Encoder> object that has not been stored in the `chars` buffer.\"\n  example:\n  - \"The following example uses the <xref:System.Text.Encoder.Convert%2A> method to convert a file of UTF-16 characters to UTF-8, then uses the <xref:System.Text.Decoder.Convert%2A> method to convert the UTF-8 characters back to UTF-16 characters.  \\n  \\n [!code-csharp[sys.txt.EncoderDecoder.convert#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.EncoderDecoder.convert/cs/edCvt.cs#1)]\\n [!code-vb[sys.txt.EncoderDecoder.convert#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.EncoderDecoder.convert/vb/edCvt.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual void Convert (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: An array of characters to convert.\n    - id: charIndex\n      type: System.Int32\n      description: The first element of <code>chars</code> to convert.\n    - id: charCount\n      type: System.Int32\n      description: The number of elements of <code>chars</code> to convert.\n    - id: bytes\n      type: System.Byte[]\n      description: An array where the converted bytes are stored.\n    - id: byteIndex\n      type: System.Int32\n      description: The first element of <code>bytes</code> in which data is stored.\n    - id: byteCount\n      type: System.Int32\n      description: The maximum number of elements of <code>bytes</code> to use in the conversion.\n    - id: flush\n      type: System.Boolean\n      description: '`true` to indicate no further data is to be converted; otherwise, `false`.'\n    - id: charsUsed\n      type: System.Int32\n      description: When this method returns, contains the number of characters from <code>chars</code> that were used in the conversion. This parameter is passed uninitialized.\n    - id: bytesUsed\n      type: System.Int32\n      description: When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.\n    - id: completed\n      type: System.Boolean\n      description: When this method returns, contains `true` if all the characters specified by <code>charCount</code> were converted; otherwise, `false`. This parameter is passed uninitialized.\n  overload: System.Text.Encoder.Convert*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>chars</code> or <code>bytes</code> is `null` (`Nothing`).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>charIndex</code>, <code>charCount</code>, <code>byteIndex</code>, or <code>byteCount</code> is less than zero.  \\n  \\n -or-  \\n  \\n The length of <code>chars</code> - <code>charIndex</code> is less than <code>charCount</code>.  \\n  \\n -or-  \\n  \\n The length of <code>bytes</code> - <code>byteIndex</code> is less than <code>byteCount</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href=\"System.Text.Encoder.GetByteCount*\"></xref> method.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoder.Fallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Encoder.Fallback\n  commentId: P:System.Text.Encoder.Fallback\n  id: Fallback\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: Fallback\n  nameWithType: Encoder.Fallback\n  fullName: Encoder.Fallback\n  type: Property\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Gets or sets a <xref href=\"System.Text.EncoderFallback\"></xref> object for the current <xref href=\"System.Text.Encoder\"></xref> object.\n  remarks: The <xref:System.Text.EncoderFallback> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Text.EncoderFallback Fallback { get; set; }\n    return:\n      type: System.Text.EncoderFallback\n      description: A <xref href=\"System.Text.EncoderFallback\"></xref> object.\n  overload: System.Text.Encoder.Fallback*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The value in a set operation is `null` (`Nothing`).\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: A new value cannot be assigned in a set operation because the current <xref href=\"System.Text.EncoderFallbackBuffer\"></xref> object contains data that has not been encoded yet.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoder.Fallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Encoder.FallbackBuffer\n  commentId: P:System.Text.Encoder.FallbackBuffer\n  id: FallbackBuffer\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: FallbackBuffer\n  nameWithType: Encoder.FallbackBuffer\n  fullName: Encoder.FallbackBuffer\n  type: Property\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: Gets the <xref href=\"System.Text.EncoderFallbackBuffer\"></xref> object associated with the current <xref href=\"System.Text.Encoder\"></xref> object.\n  remarks: The <xref:System.Text.Encoder.FallbackBuffer%2A> object represents data used by the <xref:System.Text.EncoderFallback> object. The <xref:System.Text.EncoderFallback> object represents an error handler that is invoked when a character cannot be converted into an encoded byte sequence.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public System.Text.EncoderFallbackBuffer FallbackBuffer { get; }\n    return:\n      type: System.Text.EncoderFallbackBuffer\n      description: A <xref href=\"System.Text.EncoderFallbackBuffer\"></xref> object.\n  overload: System.Text.Encoder.FallbackBuffer*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)\n  commentId: M:System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)\n  id: GetByteCount(System.Char*,System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: GetByteCount(Char*, Int32, Boolean)\n  nameWithType: Encoder.GetByteCount(Char*, Int32, Boolean)\n  fullName: Encoder.GetByteCount(Char*, Int32, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer. A parameter indicates whether to clear the internal state of the encoder after the calculation.\n  remarks: \"This method does not affect the state of the encoder.  \\n  \\n To calculate the exact array size that <xref:System.Text.Encoder.GetBytes%2A> requires to store the resulting bytes, the application should use <xref:System.Text.Encoder.GetByteCount%2A>.  \\n  \\n If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public virtual int GetByteCount (char* chars, int count, bool flush);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: A pointer to the first character to encode.\n    - id: count\n      type: System.Int32\n      description: The number of characters to encode.\n    - id: flush\n      type: System.Boolean\n      description: '`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`.'\n    return:\n      type: System.Int32\n      description: The number of bytes produced by encoding the specified characters and any characters in the internal buffer.\n  overload: System.Text.Encoder.GetByteCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>chars</code> is `null` (`Nothing` in Visual Basic .NET).\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>count</code> is less than zero.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoder.Fallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\n  commentId: M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\n  id: GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: GetByteCount(Char[], Int32, Int32, Boolean)\n  nameWithType: Encoder.GetByteCount(Char[], Int32, Int32, Boolean)\n  fullName: Encoder.GetByteCount(Char[], Int32, Int32, Boolean)\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array. A parameter indicates whether to clear the internal state of the encoder after the calculation.\n  remarks: \"This method does not affect the state of the encoder.  \\n  \\n To calculate the exact array size that <xref:System.Text.Encoder.GetBytes%2A> requires to store the resulting bytes, the application should use <xref:System.Text.Encoder.GetByteCount%2A>.  \\n  \\n If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing characters at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation.\"\n  example:\n  - \"The following code example demonstrates how to use the <xref:System.Text.Encoder.GetByteCount%2A> method to return the number of bytes required to encode an array of characters using a Unicode <xref:System.Text.Encoder>.  \\n  \\n [!code-cpp[System.Text.Encoder.GetByteCount Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoder.GetByteCount Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]\\n [!code-csharp[System.Text.Encoder.GetByteCount Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoder.GetByteCount Example/CS/getbytecount-char[]-int32-int32.cs#1)]\\n [!code-vb[System.Text.Encoder.GetByteCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoder.GetByteCount Example/VB/getbytecount-char[]-int32-int32.vb#1)]\"\n  syntax:\n    content: public abstract int GetByteCount (char[] chars, int index, int count, bool flush);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: The character array containing the set of characters to encode.\n    - id: index\n      type: System.Int32\n      description: The index of the first character to encode.\n    - id: count\n      type: System.Int32\n      description: The number of characters to encode.\n    - id: flush\n      type: System.Boolean\n      description: '`true` to simulate clearing the internal state of the encoder after the calculation; otherwise, `false`.'\n    return:\n      type: System.Int32\n      description: The number of bytes produced by encoding the specified characters and any characters in the internal buffer.\n  overload: System.Text.Encoder.GetByteCount*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>chars</code> is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>index</code> or <code>count</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>index</code> and <code>count</code> do not denote a valid range in <code>chars</code>.\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoder.Fallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)\n  commentId: M:System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)\n  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: GetBytes(Char*, Int32, Byte*, Int32, Boolean)\n  nameWithType: Encoder.GetBytes(Char*, Int32, Byte*, Int32, Boolean)\n  fullName: Encoder.GetBytes(Char*, Int32, Byte*, Int32, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, encodes a set of characters starting at the specified character pointer and any characters in the internal buffer into a sequence of bytes that are stored starting at the specified byte pointer. A parameter indicates whether to clear the internal state of the encoder after the conversion.\n  remarks: \"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.GetBytes%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` in the last call to `GetBytes` to make sure that the state information is flushed and that the encoded bytes are properly terminated. With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.  \\n  \\n To calculate the exact buffer size that `GetBytes` requires to store the resulting characters, the application should use <xref:System.Text.Encoder.GetByteCount%2A>.  \\n  \\n If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation.  \\n  \\n If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Encoder.Convert%2A> method. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      [System.Security.SecurityCritical]\n\n      public virtual int GetBytes (char* chars, int charCount, byte* bytes, int byteCount, bool flush);\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: A pointer to the first character to encode.\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to encode.\n    - id: bytes\n      type: System.Byte*\n      description: A pointer to the location at which to start writing the resulting sequence of bytes.\n    - id: byteCount\n      type: System.Int32\n      description: The maximum number of bytes to write.\n    - id: flush\n      type: System.Boolean\n      description: '`true` to clear the internal state of the encoder after the conversion; otherwise, `false`.'\n    return:\n      type: System.Int32\n      description: The actual number of bytes written at the location indicated by the <code>bytes</code> parameter.\n  overload: System.Text.Encoder.GetBytes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>chars</code> is `null` (`Nothing`).  \\n  \\n -or-  \\n  \\n <code>bytes</code> is `null` (`Nothing`).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: <code>charCount</code> or <code>byteCount</code> is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>byteCount</code> is less than the resulting number of bytes.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoder.Fallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\n  commentId: M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\n  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)\n  nameWithType: Encoder.GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)\n  fullName: Encoder.GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array. A parameter indicates whether to clear the internal state of the encoder after the conversion.\n  remarks: \"Remember that the <xref:System.Text.Encoder> object saves state between calls to <xref:System.Text.Encoder.GetBytes%2A>. When the application is done with a stream of data, it should set the `flush` parameter to `true` in the last call to `GetBytes` to make sure that the state information is flushed and that the encoded bytes are properly terminated. With this setting, the encoder ignores invalid bytes at the end of the data block, such as unmatched surrogates or incomplete combining sequences, and clears the internal buffer.  \\n  \\n To calculate the exact buffer size that `GetBytes` requires to store the resulting characters, the application should use <xref:System.Text.Encoder.GetByteCount%2A>.  \\n  \\n If `GetBytes` is called with `flush` set to `false`, the encoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next encoding operation. The application should call `GetByteCount` on a block of data immediately before calling `GetBytes` on the same block, so that any trailing characters from the previous block are included in the calculation.  \\n  \\n If your application is to convert many segments of an input stream, consider using the <xref:System.Text.Encoder.Convert%2A> method. <xref:System.Text.Encoder.GetBytes%2A> will throw an exception if the output buffer isn't large enough, but <xref:System.Text.Encoder.Convert%2A> will fill as much space as possible and return the chars read and bytes written. Also see the <xref:System.Text.Encoding.GetBytes%2A?displayProperty=fullName> topic for more comments.\"\n  example:\n  - \"The following example demonstrates how to encode a range of elements from a character array and store the encoded bytes in a range of elements in a byte array. The <xref:System.Text.Encoder.GetByteCount%2A> method is used to determine the size of the array required by <xref:System.Text.Encoder.GetBytes%2A>.  \\n  \\n [!code-cpp[System.Text.Encoder.GetBytes Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Encoder.GetBytes Example/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]\\n [!code-csharp[System.Text.Encoder.GetBytes Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Encoder.GetBytes Example/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]\\n [!code-vb[System.Text.Encoder.GetBytes Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Encoder.GetBytes Example/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]\"\n  syntax:\n    content: public abstract int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: The character array containing the set of characters to encode.\n    - id: charIndex\n      type: System.Int32\n      description: The index of the first character to encode.\n    - id: charCount\n      type: System.Int32\n      description: The number of characters to encode.\n    - id: bytes\n      type: System.Byte[]\n      description: The byte array to contain the resulting sequence of bytes.\n    - id: byteIndex\n      type: System.Int32\n      description: The index at which to start writing the resulting sequence of bytes.\n    - id: flush\n      type: System.Boolean\n      description: '`true` to clear the internal state of the encoder after the conversion; otherwise, `false`.'\n    return:\n      type: System.Int32\n      description: The actual number of bytes written into <code>bytes</code>.\n  overload: System.Text.Encoder.GetBytes*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"<code>chars</code> is `null` (`Nothing`).  \\n  \\n -or-  \\n  \\n <code>bytes</code> is `null` (`Nothing`).\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"<code>charIndex</code> or <code>charCount</code> or <code>byteIndex</code> is less than zero.  \\n  \\n -or-  \\n  \\n <code>charIndex</code> and <code>charCount</code> do not denote a valid range in <code>chars</code>.  \\n  \\n -or-  \\n  \\n <code>byteIndex</code> is not a valid index in <code>bytes</code>.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>bytes</code> does not have enough capacity from <code>byteIndex</code> to the end of the array to accommodate the resulting bytes.\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"A fallback occurred (see [Character Encoding in the .NET Framework](~/docs/standard/base-types/character-encoding.md) for fuller explanation)  \\n  \\n -and-  \\n  \\n <xref href=\\\"System.Text.Encoder.Fallback\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\"></xref>.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Text.Encoder.Reset\n  commentId: M:System.Text.Encoder.Reset\n  id: Reset\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  name: Reset()\n  nameWithType: Encoder.Reset()\n  fullName: Encoder.Reset()\n  type: Method\n  assemblies:\n  - System.Text.Encoding\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Text\n  summary: When overridden in a derived class, sets the encoder back to its initial state.\n  remarks: \"This method clears the internal state of the <xref:System.Text.Encoder> object. The method clears any state information preserved from a previous call to <xref:System.Text.Encoder.GetBytes%2A> or <xref:System.Text.Decoder.Convert%2A>, including trailing characters at the end of the previous data block, such as an unmatched high surrogate.  \\n  \\n Your application should call the `Reset` method if it wants to reuse the same encoder even after an exception is thrown by <xref:System.Text.Encoder.GetBytes%2A> or <xref:System.Text.Encoder.GetByteCount%2A>, or if the application switches streams.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public virtual void Reset ();\n    parameters: []\n  overload: System.Text.Encoder.Reset*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Text.EncoderFallbackException\n  parent: System.Text\n  isExternal: false\n  name: EncoderFallbackException\n  nameWithType: EncoderFallbackException\n  fullName: System.Text.EncoderFallbackException\n- uid: System.Text.Encoder.#ctor\n  parent: System.Text.Encoder\n  isExternal: false\n  name: Encoder()\n  nameWithType: Encoder.Encoder()\n  fullName: Encoder.Encoder()\n- uid: System.Text.Encoder.Convert(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Encoder\n  isExternal: false\n  name: Convert(Char*, Int32, Byte*, Int32, Boolean, Int32, Int32, Boolean)\n  nameWithType: Encoder.Convert(Char*, Int32, Byte*, Int32, Boolean, Int32, Int32, Boolean)\n  fullName: Encoder.Convert(Char*, Int32, Byte*, Int32, Boolean, Int32, Int32, Boolean)\n- uid: System.Char\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Char*\n  parent: System\n  isExternal: false\n  name: Char*\n  nameWithType: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte*\n  parent: System\n  isExternal: false\n  name: Byte*\n  nameWithType: Byte*\n  fullName: System.Byte*\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Encoder\n  isExternal: false\n  name: Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, Int32, Int32, Boolean)\n  nameWithType: Encoder.Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, Int32, Int32, Boolean)\n  fullName: Encoder.Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, Int32, Int32, Boolean)\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Text.Encoder.Fallback\n  parent: System.Text.Encoder\n  isExternal: false\n  name: Fallback\n  nameWithType: Encoder.Fallback\n  fullName: Encoder.Fallback\n- uid: System.Text.EncoderFallback\n  parent: System.Text\n  isExternal: false\n  name: EncoderFallback\n  nameWithType: EncoderFallback\n  fullName: System.Text.EncoderFallback\n- uid: System.Text.Encoder.FallbackBuffer\n  parent: System.Text.Encoder\n  isExternal: false\n  name: FallbackBuffer\n  nameWithType: Encoder.FallbackBuffer\n  fullName: Encoder.FallbackBuffer\n- uid: System.Text.EncoderFallbackBuffer\n  parent: System.Text\n  isExternal: false\n  name: EncoderFallbackBuffer\n  nameWithType: EncoderFallbackBuffer\n  fullName: System.Text.EncoderFallbackBuffer\n- uid: System.Text.Encoder.GetByteCount(System.Char*,System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  isExternal: false\n  name: GetByteCount(Char*, Int32, Boolean)\n  nameWithType: Encoder.GetByteCount(Char*, Int32, Boolean)\n  fullName: Encoder.GetByteCount(Char*, Int32, Boolean)\n- uid: System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  isExternal: false\n  name: GetByteCount(Char[], Int32, Int32, Boolean)\n  nameWithType: Encoder.GetByteCount(Char[], Int32, Int32, Boolean)\n  fullName: Encoder.GetByteCount(Char[], Int32, Int32, Boolean)\n- uid: System.Text.Encoder.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  isExternal: false\n  name: GetBytes(Char*, Int32, Byte*, Int32, Boolean)\n  nameWithType: Encoder.GetBytes(Char*, Int32, Byte*, Int32, Boolean)\n  fullName: Encoder.GetBytes(Char*, Int32, Byte*, Int32, Boolean)\n- uid: System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  isExternal: false\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)\n  nameWithType: Encoder.GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)\n  fullName: Encoder.GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)\n- uid: System.Text.Encoder.Reset\n  parent: System.Text.Encoder\n  isExternal: false\n  name: Reset()\n  nameWithType: Encoder.Reset()\n  fullName: Encoder.Reset()\n- uid: System.Text.Encoder.#ctor*\n  parent: System.Text.Encoder\n  isExternal: false\n  name: Encoder\n  nameWithType: Encoder.Encoder\n  fullName: Encoder.Encoder\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n- uid: System.Text.Encoder.Convert*\n  parent: System.Text.Encoder\n  isExternal: false\n  name: Convert\n  nameWithType: Encoder.Convert\n  fullName: Encoder.Convert\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n- uid: System.Text.Encoder.Fallback*\n  parent: System.Text.Encoder\n  isExternal: false\n  name: Fallback\n  nameWithType: Encoder.Fallback\n  fullName: Encoder.Fallback\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n- uid: System.Text.Encoder.FallbackBuffer*\n  parent: System.Text.Encoder\n  isExternal: false\n  name: FallbackBuffer\n  nameWithType: Encoder.FallbackBuffer\n  fullName: Encoder.FallbackBuffer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n- uid: System.Text.Encoder.GetByteCount*\n  parent: System.Text.Encoder\n  isExternal: false\n  name: GetByteCount\n  nameWithType: Encoder.GetByteCount\n  fullName: Encoder.GetByteCount\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n- uid: System.Text.Encoder.GetBytes*\n  parent: System.Text.Encoder\n  isExternal: false\n  name: GetBytes\n  nameWithType: Encoder.GetBytes\n  fullName: Encoder.GetBytes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  - netcore-1.0\n  - netcore-1.1\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n- uid: System.Text.Encoder.Reset*\n  parent: System.Text.Encoder\n  isExternal: false\n  name: Reset\n  nameWithType: Encoder.Reset\n  fullName: Encoder.Reset\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Text/Encoder.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}