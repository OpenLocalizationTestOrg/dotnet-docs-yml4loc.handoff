{"nodes":[{"content":"Provides access to unmanaged blocks of memory from managed code.","nodes":[{"pos":[0,64],"content":"Provides access to unmanaged blocks of memory from managed code.","nodes":[{"content":"Provides access to unmanaged blocks of memory from managed code.","pos":[0,64]}]}],"pos":[2311,2376],"yaml":true},{"content":"This class supports access to unmanaged memory using the existing stream-based model and does not require that the contents in the unmanaged memory be copied to the heap.  \n  \n> [!IMPORTANT]\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","nodes":[{"pos":[0,170],"content":"This class supports access to unmanaged memory using the existing stream-based model and does not require that the contents in the unmanaged memory be copied to the heap.","nodes":[{"content":"This class supports access to unmanaged memory using the existing stream-based model and does not require that the contents in the unmanaged memory be copied to the heap.","pos":[0,170]}]},{"pos":[178,704],"content":"[!IMPORTANT]\n This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","leadings":["","> "],"nodes":[{"content":" This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic.","pos":[13,524],"nodes":[{"content":"This type implements the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface.","pos":[1,62],"source":" This type implements the <xref:System.IDisposable> interface."},{"content":"When you have finished using the type, you should dispose of it either directly or indirectly.","pos":[63,157]},{"content":"To dispose of the type directly, call its <ph id=\"ph1\">&lt;xref:System.IDisposable.Dispose%2A&gt;</ph> method in a <ph id=\"ph2\">`try`</ph><ph id=\"ph3\">/</ph><ph id=\"ph4\">`catch`</ph> block.","pos":[158,269],"source":" To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block."},{"content":"To dispose of it indirectly, use a language construct such as <ph id=\"ph1\">`using`</ph> (in C#) or <ph id=\"ph2\">`Using`</ph> (in Visual Basic).","pos":[270,377],"source":" To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic)."},{"content":"For more information, see the \"Using an Object that Implements IDisposable\" section in the <ph id=\"ph1\">&lt;xref:System.IDisposable&gt;</ph> interface topic.","pos":[378,511],"source":" For more information, see the \"Using an Object that Implements IDisposable\" section in the <xref:System.IDisposable> interface topic."}]}]}],"pos":[2387,3099],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class.","nodes":[{"pos":[0,93],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.UnmanagedMemoryStream\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class."}],"pos":[6456,6550],"yaml":true},{"content":"The user does not have the required permission.","nodes":[{"pos":[0,47],"content":"The user does not have the required permission.","nodes":[{"content":"The user does not have the required permission.","pos":[0,47]}]}],"pos":[6805,6853],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class using the specified location and memory length.","nodes":[{"pos":[0,140],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.UnmanagedMemoryStream\"&gt;&lt;/xref&gt;</ph> class using the specified location and memory length.","source":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class using the specified location and memory length."}],"pos":[8270,8411],"yaml":true},{"content":"This constructor creates a new instance of the <xref:System.IO.UnmanagedMemoryStream> class, and by default sets the <xref:System.IO.UnmanagedMemoryStream.CanWrite%2A> property to `false` and the <xref:System.IO.UnmanagedMemoryStream.CanRead%2A> property to `true`. The <xref:System.IO.UnmanagedMemoryStream.Length%2A> property is set to the value of the `length` parameter and cannot be changed.","nodes":[{"pos":[0,396],"content":"This constructor creates a new instance of the <xref:System.IO.UnmanagedMemoryStream> class, and by default sets the <xref:System.IO.UnmanagedMemoryStream.CanWrite%2A> property to `false` and the <xref:System.IO.UnmanagedMemoryStream.CanRead%2A> property to `true`. The <xref:System.IO.UnmanagedMemoryStream.Length%2A> property is set to the value of the `length` parameter and cannot be changed.","nodes":[{"content":"This constructor creates a new instance of the <ph id=\"ph1\">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> class, and by default sets the <ph id=\"ph2\">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> property to <ph id=\"ph3\">`false`</ph> and the <ph id=\"ph4\">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph> property to <ph id=\"ph5\">`true`</ph>.","pos":[0,265],"source":"This constructor creates a new instance of the <xref:System.IO.UnmanagedMemoryStream> class, and by default sets the <xref:System.IO.UnmanagedMemoryStream.CanWrite%2A> property to `false` and the <xref:System.IO.UnmanagedMemoryStream.CanRead%2A> property to `true`."},{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.UnmanagedMemoryStream.Length%2A&gt;</ph> property is set to the value of the <ph id=\"ph2\">`length`</ph> parameter and cannot be changed.","pos":[266,396],"source":" The <xref:System.IO.UnmanagedMemoryStream.Length%2A> property is set to the value of the `length` parameter and cannot be changed."}]}],"pos":[8422,8819],"yaml":true,"extradata":"MT"},{"content":"A pointer to an unmanaged memory location.","nodes":[{"pos":[0,42],"content":"A pointer to an unmanaged memory location.","nodes":[{"content":"A pointer to an unmanaged memory location.","pos":[0,42]}]}],"pos":[9521,9564],"yaml":true},{"content":"The length of the memory to use.","nodes":[{"pos":[0,32],"content":"The length of the memory to use.","nodes":[{"content":"The length of the memory to use.","pos":[0,32]}]}],"pos":[9625,9658],"yaml":true},{"content":"The user does not have the required permission.","nodes":[{"pos":[0,47],"content":"The user does not have the required permission.","nodes":[{"content":"The user does not have the required permission.","pos":[0,47]}]}],"pos":[9835,9883],"yaml":true},{"content":"The <code>pointer</code> value is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pointer</ph><ept id=\"p1\">&lt;/code&gt;</ept> value is <ph id=\"ph2\">`null`</ph>.","source":"The <code>pointer</code> value is `null`."}],"pos":[9985,10027],"yaml":true},{"content":"The <code>length</code> value is less than zero.  \n  \n \\- or -  \n  \n The <code>length</code> is large enough to cause an overflow.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p1\">&lt;/code&gt;</ept> value is less than zero.","source":"The <code>length</code> value is less than zero."},{"pos":[55,62],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[69,130],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p1\">&lt;/code&gt;</ept> is large enough to cause an overflow.","source":"The <code>length</code> is large enough to cause an overflow."}],"pos":[10141,10279],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class in a safe buffer with a specified offset and length.","nodes":[{"pos":[0,145],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.UnmanagedMemoryStream\"&gt;&lt;/xref&gt;</ph> class in a safe buffer with a specified offset and length.","source":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class in a safe buffer with a specified offset and length."}],"pos":[11946,12092],"yaml":true},{"content":"The buffer to contain the unmanaged memory stream.","nodes":[{"pos":[0,50],"content":"The buffer to contain the unmanaged memory stream.","nodes":[{"content":"The buffer to contain the unmanaged memory stream.","pos":[0,50]}]}],"pos":[12328,12379],"yaml":true},{"content":"The byte position in the buffer at which to start the unmanaged memory stream.","nodes":[{"pos":[0,78],"content":"The byte position in the buffer at which to start the unmanaged memory stream.","nodes":[{"content":"The byte position in the buffer at which to start the unmanaged memory stream.","pos":[0,78]}]}],"pos":[12440,12519],"yaml":true},{"content":"The length of the unmanaged memory stream.","nodes":[{"pos":[0,42],"content":"The length of the unmanaged memory stream.","nodes":[{"content":"The length of the unmanaged memory stream.","pos":[0,42]}]}],"pos":[12580,12623],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class using the specified location, memory length, total amount of memory, and file access values.","nodes":[{"pos":[0,185],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.UnmanagedMemoryStream\"&gt;&lt;/xref&gt;</ph> class using the specified location, memory length, total amount of memory, and file access values.","source":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class using the specified location, memory length, total amount of memory, and file access values."}],"pos":[14267,14453],"yaml":true},{"content":"The `length` parameter defines the current amount of memory in use. If reading or appending data to the stream, the `length` value should be equal to the amount of valid data in the stream to be read from or preserved. If writing to the stream, this value should be zero.  \n  \n The `capacity` parameter indicates the amount of total memory available. This value can describe a region that is longer than the length specified, or indicate a region that can be appended to. Any attempt to write beyond this value will fail.  \n  \n The `access` parameter sets the <xref:System.IO.UnmanagedMemoryStream.CanRead%2A>, and <xref:System.IO.UnmanagedMemoryStream.CanWrite%2A> properties. Note that specifying <xref:System.IO.FileAccess.Write> does not guarantee that the stream will be writable. The access parameters allow the implementer to create an object whose implementation can match the actual stream that is exposed.","nodes":[{"pos":[0,271],"content":"The `length` parameter defines the current amount of memory in use. If reading or appending data to the stream, the `length` value should be equal to the amount of valid data in the stream to be read from or preserved. If writing to the stream, this value should be zero.","nodes":[{"content":"The <ph id=\"ph1\">`length`</ph> parameter defines the current amount of memory in use.","pos":[0,67],"source":"The `length` parameter defines the current amount of memory in use."},{"content":"If reading or appending data to the stream, the <ph id=\"ph1\">`length`</ph> value should be equal to the amount of valid data in the stream to be read from or preserved.","pos":[68,218],"source":" If reading or appending data to the stream, the `length` value should be equal to the amount of valid data in the stream to be read from or preserved."},{"content":"If writing to the stream, this value should be zero.","pos":[219,271]}]},{"pos":[278,521],"content":"The `capacity` parameter indicates the amount of total memory available. This value can describe a region that is longer than the length specified, or indicate a region that can be appended to. Any attempt to write beyond this value will fail.","nodes":[{"content":"The <ph id=\"ph1\">`capacity`</ph> parameter indicates the amount of total memory available.","pos":[0,72],"source":"The `capacity` parameter indicates the amount of total memory available."},{"content":"This value can describe a region that is longer than the length specified, or indicate a region that can be appended to.","pos":[73,193]},{"content":"Any attempt to write beyond this value will fail.","pos":[194,243]}]},{"pos":[528,915],"content":"The `access` parameter sets the <xref:System.IO.UnmanagedMemoryStream.CanRead%2A>, and <xref:System.IO.UnmanagedMemoryStream.CanWrite%2A> properties. Note that specifying <xref:System.IO.FileAccess.Write> does not guarantee that the stream will be writable. The access parameters allow the implementer to create an object whose implementation can match the actual stream that is exposed.","nodes":[{"content":"The <ph id=\"ph1\">`access`</ph> parameter sets the <ph id=\"ph2\">&lt;xref:System.IO.UnmanagedMemoryStream.CanRead%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.IO.UnmanagedMemoryStream.CanWrite%2A&gt;</ph> properties.","pos":[0,149],"source":"The `access` parameter sets the <xref:System.IO.UnmanagedMemoryStream.CanRead%2A>, and <xref:System.IO.UnmanagedMemoryStream.CanWrite%2A> properties."},{"content":"Note that specifying <ph id=\"ph1\">&lt;xref:System.IO.FileAccess.Write&gt;</ph> does not guarantee that the stream will be writable.","pos":[150,257],"source":" Note that specifying <xref:System.IO.FileAccess.Write> does not guarantee that the stream will be writable."},{"content":"The access parameters allow the implementer to create an object whose implementation can match the actual stream that is exposed.","pos":[258,387]}]}],"pos":[14464,15386],"yaml":true,"extradata":"MT"},{"content":"A pointer to an unmanaged memory location.","nodes":[{"pos":[0,42],"content":"A pointer to an unmanaged memory location.","nodes":[{"content":"A pointer to an unmanaged memory location.","pos":[0,42]}]}],"pos":[16114,16157],"yaml":true},{"content":"The length of the memory to use.","nodes":[{"pos":[0,32],"content":"The length of the memory to use.","nodes":[{"content":"The length of the memory to use.","pos":[0,32]}]}],"pos":[16218,16251],"yaml":true},{"content":"The total amount of memory assigned to the stream.","nodes":[{"pos":[0,50],"content":"The total amount of memory assigned to the stream.","nodes":[{"content":"The total amount of memory assigned to the stream.","pos":[0,50]}]}],"pos":[16314,16365],"yaml":true},{"content":"One of the <xref href=\"System.IO.FileAccess\"></xref> values.","nodes":[{"pos":[0,60],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileAccess\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.IO.FileAccess\"></xref> values."}],"pos":[16434,16495],"yaml":true},{"content":"The user does not have the required permission.","nodes":[{"pos":[0,47],"content":"The user does not have the required permission.","nodes":[{"content":"The user does not have the required permission.","pos":[0,47]}]}],"pos":[16672,16720],"yaml":true},{"content":"The <code>pointer</code> value is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pointer</ph><ept id=\"p1\">&lt;/code&gt;</ept> value is <ph id=\"ph2\">`null`</ph>.","source":"The <code>pointer</code> value is `null`."}],"pos":[16822,16864],"yaml":true},{"content":"The <code>length</code> value is less than zero.  \n  \n \\- or -  \n  \n The <code>capacity</code> value is less than zero.  \n  \n \\- or -  \n  \n The <code>length</code> value is greater than the <code>capacity</code> value.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p1\">&lt;/code&gt;</ept> value is less than zero.","source":"The <code>length</code> value is less than zero."},{"pos":[55,62],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[69,119],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">capacity</ph><ept id=\"p1\">&lt;/code&gt;</ept> value is less than zero.","source":"The <code>capacity</code> value is less than zero."},{"pos":[126,133],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[140,218],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p1\">&lt;/code&gt;</ept> value is greater than the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">capacity</ph><ept id=\"p2\">&lt;/code&gt;</ept> value.","source":"The <code>length</code> value is greater than the <code>capacity</code> value."}],"pos":[16978,17209],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class in a safe buffer with a specified offset, length, and file access.","nodes":[{"pos":[0,159],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.UnmanagedMemoryStream\"&gt;&lt;/xref&gt;</ph> class in a safe buffer with a specified offset, length, and file access.","source":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class in a safe buffer with a specified offset, length, and file access."}],"pos":[18975,19135],"yaml":true},{"content":"The buffer to contain the unmanaged memory stream.","nodes":[{"pos":[0,50],"content":"The buffer to contain the unmanaged memory stream.","nodes":[{"content":"The buffer to contain the unmanaged memory stream.","pos":[0,50]}]}],"pos":[19400,19451],"yaml":true},{"content":"The byte position in the buffer at which to start the unmanaged memory stream.","nodes":[{"pos":[0,78],"content":"The byte position in the buffer at which to start the unmanaged memory stream.","nodes":[{"content":"The byte position in the buffer at which to start the unmanaged memory stream.","pos":[0,78]}]}],"pos":[19512,19591],"yaml":true},{"content":"The length of the unmanaged memory stream.","nodes":[{"pos":[0,42],"content":"The length of the unmanaged memory stream.","nodes":[{"content":"The length of the unmanaged memory stream.","pos":[0,42]}]}],"pos":[19652,19695],"yaml":true},{"content":"The mode of file access to the unmanaged memory stream.","nodes":[{"pos":[0,55],"content":"The mode of file access to the unmanaged memory stream.","nodes":[{"content":"The mode of file access to the unmanaged memory stream.","pos":[0,55]}]}],"pos":[19764,19820],"yaml":true},{"content":"Gets a value indicating whether a stream supports reading.","nodes":[{"pos":[0,58],"content":"Gets a value indicating whether a stream supports reading.","nodes":[{"content":"Gets a value indicating whether a stream supports reading.","pos":[0,58]}]}],"pos":[21141,21200],"yaml":true},{"content":"This property indicates whether the current stream object supports reading.","nodes":[{"pos":[0,75],"content":"This property indicates whether the current stream object supports reading.","nodes":[{"content":"This property indicates whether the current stream object supports reading.","pos":[0,75]}]}],"pos":[21211,21287],"yaml":true,"extradata":"MT"},{"content":"`false` if the object was created by a constructor with an <code>access</code> parameter that did not include reading the stream and if the stream is closed; otherwise, `true`.","nodes":[{"pos":[0,176],"content":"<ph id=\"ph1\">`false`</ph> if the object was created by a constructor with an <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter that did not include reading the stream and if the stream is closed; otherwise, <ph id=\"ph3\">`true`</ph>.","source":"`false` if the object was created by a constructor with an <code>access</code> parameter that did not include reading the stream and if the stream is closed; otherwise, `true`."}],"pos":[22083,22262],"yaml":true},{"content":"Gets a value indicating whether a stream supports seeking.","nodes":[{"pos":[0,58],"content":"Gets a value indicating whether a stream supports seeking.","nodes":[{"content":"Gets a value indicating whether a stream supports seeking.","pos":[0,58]}]}],"pos":[23568,23627],"yaml":true},{"content":"This property indicates whether the current stream object supports seeking.","nodes":[{"pos":[0,75],"content":"This property indicates whether the current stream object supports seeking.","nodes":[{"content":"This property indicates whether the current stream object supports seeking.","pos":[0,75]}]}],"pos":[23638,23714],"yaml":true,"extradata":"MT"},{"content":"`false` if the stream is closed; otherwise, `true`.","nodes":[{"pos":[0,51],"content":"<ph id=\"ph1\">`false`</ph> if the stream is closed; otherwise, <ph id=\"ph2\">`true`</ph>.","source":"`false` if the stream is closed; otherwise, `true`."}],"pos":[23833,23887],"yaml":true},{"content":"Gets a value indicating whether a stream supports writing.","nodes":[{"pos":[0,58],"content":"Gets a value indicating whether a stream supports writing.","nodes":[{"content":"Gets a value indicating whether a stream supports writing.","pos":[0,58]}]}],"pos":[25199,25258],"yaml":true},{"content":"This property indicates whether the current stream object supports writing.","nodes":[{"pos":[0,75],"content":"This property indicates whether the current stream object supports writing.","nodes":[{"content":"This property indicates whether the current stream object supports writing.","pos":[0,75]}]}],"pos":[25269,25345],"yaml":true,"extradata":"MT"},{"content":"`false` if the object was created by a constructor with an <code>access</code> parameter value that supports writing or was created by a constructor that had no parameters, or if the stream is closed; otherwise, `true`.","nodes":[{"pos":[0,219],"content":"<ph id=\"ph1\">`false`</ph> if the object was created by a constructor with an <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">access</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter value that supports writing or was created by a constructor that had no parameters, or if the stream is closed; otherwise, <ph id=\"ph3\">`true`</ph>.","source":"`false` if the object was created by a constructor with an <code>access</code> parameter value that supports writing or was created by a constructor that had no parameters, or if the stream is closed; otherwise, `true`."}],"pos":[26136,26358],"yaml":true},{"content":"Gets the stream length (size) or the total amount of memory assigned to a stream (capacity).","nodes":[{"pos":[0,92],"content":"Gets the stream length (size) or the total amount of memory assigned to a stream (capacity).","nodes":[{"content":"Gets the stream length (size) or the total amount of memory assigned to a stream (capacity).","pos":[0,92]}]}],"pos":[27671,27764],"yaml":true},{"content":"This property returns the `capacity` value provided to the constructor. If no `capacity` value was specified when the stream was initialized, this property returns the stream length.","nodes":[{"pos":[0,182],"content":"This property returns the `capacity` value provided to the constructor. If no `capacity` value was specified when the stream was initialized, this property returns the stream length.","nodes":[{"content":"This property returns the <ph id=\"ph1\">`capacity`</ph> value provided to the constructor.","pos":[0,71],"source":"This property returns the `capacity` value provided to the constructor."},{"content":"If no <ph id=\"ph1\">`capacity`</ph> value was specified when the stream was initialized, this property returns the stream length.","pos":[72,182],"source":" If no `capacity` value was specified when the stream was initialized, this property returns the stream length."}]}],"pos":[27775,27958],"yaml":true,"extradata":"MT"},{"content":"The size or capacity of the stream.","nodes":[{"pos":[0,35],"content":"The size or capacity of the stream.","nodes":[{"content":"The size or capacity of the stream.","pos":[0,35]}]}],"pos":[28067,28103],"yaml":true},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[28277,28299],"yaml":true},{"content":"Releases the unmanaged resources used by the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> and optionally releases the managed resources.","nodes":[{"pos":[0,144],"content":"Releases the unmanaged resources used by the <ph id=\"ph1\">&lt;xref href=\"System.IO.UnmanagedMemoryStream\"&gt;&lt;/xref&gt;</ph> and optionally releases the managed resources.","source":"Releases the unmanaged resources used by the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> and optionally releases the managed resources."}],"pos":[29608,29753],"yaml":true},{"content":"This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.UnmanagedMemoryStream.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.IO.UnmanagedMemoryStream.Dispose%2A> with `disposing` set to `false`.  \n  \n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.UnmanagedMemoryStream> references. This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object.","nodes":[{"pos":[0,440],"content":"This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.UnmanagedMemoryStream.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.IO.UnmanagedMemoryStream.Dispose%2A> with `disposing` set to `false`.","nodes":[{"content":"This method is called by the public <ph id=\"ph1\">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Object.Finalize%2A&gt;</ph> method.","pos":[0,141],"source":"This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> invokes the protected <ph id=\"ph2\">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph> method with the <ph id=\"ph3\">`disposing`</ph> parameter set to <ph id=\"ph4\">`true`</ph>.","pos":[142,316],"source":" <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.UnmanagedMemoryStream.Dispose%2A> method with the `disposing` parameter set to `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Object.Finalize%2A&gt;</ph> invokes <ph id=\"ph2\">&lt;xref:System.IO.UnmanagedMemoryStream.Dispose%2A&gt;</ph> with <ph id=\"ph3\">`disposing`</ph> set to <ph id=\"ph4\">`false`</ph>.","pos":[317,440],"source":" <xref:System.Object.Finalize%2A> invokes <xref:System.IO.UnmanagedMemoryStream.Dispose%2A> with `disposing` set to `false`."}]},{"pos":[447,720],"content":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.UnmanagedMemoryStream> references. This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object.","nodes":[{"content":"When the <ph id=\"ph1\">`disposing`</ph> parameter is <ph id=\"ph2\">`true`</ph>, this method releases all resources held by any managed objects that this <ph id=\"ph3\">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> references.","pos":[0,165],"source":"When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.UnmanagedMemoryStream> references."},{"content":"This method invokes the <ph id=\"ph1\">&lt;xref:System.ComponentModel.Component.Dispose%2A&gt;</ph> method of each referenced object.","pos":[166,273],"source":" This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object."}]}],"pos":[29764,30489],"yaml":true,"extradata":"MT"},{"content":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> to release both managed and unmanaged resources; <ph id=\"ph2\">`false`</ph> to release only unmanaged resources.","source":"`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources."}],"pos":[30644,30747],"yaml":true},{"content":"Overrides the <xref href=\"System.IO.Stream.Flush\"></xref> method so that no action is performed.","nodes":[{"pos":[0,96],"content":"Overrides the <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream.Flush\"&gt;&lt;/xref&gt;</ph> method so that no action is performed.","source":"Overrides the <xref href=\"System.IO.Stream.Flush\"></xref> method so that no action is performed."}],"pos":[32062,32159],"yaml":true},{"content":"This method performs no action for this class but is included as part of the <xref:System.IO.Stream> base class. Since any data is written to RAM, this method is redundant.","nodes":[{"pos":[0,172],"content":"This method performs no action for this class but is included as part of the <xref:System.IO.Stream> base class. Since any data is written to RAM, this method is redundant.","nodes":[{"content":"This method performs no action for this class but is included as part of the <xref:System.IO.Stream> base class. Since any data is written to RAM, this method is redundant.","pos":[0,172],"nodes":[{"content":"This method performs no action for this class but is included as part of the <ph id=\"ph1\">&lt;xref:System.IO.Stream&gt;</ph> base class.","pos":[0,112],"source":"This method performs no action for this class but is included as part of the <xref:System.IO.Stream> base class."},{"content":"Since any data is written to RAM, this method is redundant.","pos":[113,172]}]}]}],"pos":[32170,32343],"yaml":true,"extradata":"MT"},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[32587,32609],"yaml":true},{"content":"Overrides the <xref href=\"System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\"></xref> method so that the operation is cancelled if specified, but no other action is performed.  \n  \n Available starting in [!INCLUDE[net_2015](~/includes/net-2015-md.md)]","nodes":[{"pos":[0,188],"content":"Overrides the <ph id=\"ph1\">&lt;xref href=\"System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\"&gt;&lt;/xref&gt;</ph> method so that the operation is cancelled if specified, but no other action is performed.","source":"Overrides the <xref href=\"System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\"></xref> method so that the operation is cancelled if specified, but no other action is performed."},{"pos":[195,264],"content":"Available starting in <ph id=\"ph1\">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph>","source":"Available starting in [!INCLUDE[net_2015](~/includes/net-2015-md.md)]"}],"pos":[34026,34297],"yaml":true},{"content":"If the operation isn’t cancelled, the <xref:System.IO.UnmanagedMemoryStream> calls the <xref:System.IO.UnmanagedMemoryStream.Flush%2A> method, which means that no action performed.","nodes":[{"pos":[0,180],"content":"If the operation isn’t cancelled, the <xref:System.IO.UnmanagedMemoryStream> calls the <xref:System.IO.UnmanagedMemoryStream.Flush%2A> method, which means that no action performed.","nodes":[{"content":"If the operation isn’t cancelled, the <ph id=\"ph1\">&lt;xref:System.IO.UnmanagedMemoryStream&gt;</ph> calls the <ph id=\"ph2\">&lt;xref:System.IO.UnmanagedMemoryStream.Flush%2A&gt;</ph> method, which means that no action performed.","pos":[0,180],"source":"If the operation isn’t cancelled, the <xref:System.IO.UnmanagedMemoryStream> calls the <xref:System.IO.UnmanagedMemoryStream.Flush%2A> method, which means that no action performed."}]}],"pos":[34308,34489],"yaml":true,"extradata":"MT"},{"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"pos":[0,130],"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken.None\"&gt;&lt;/xref&gt;</ph>.","pos":[48,130],"source":" The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>."}]}],"pos":[34800,34931],"yaml":true},{"content":"A task that represents the asynchronous flush operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous flush operation.","nodes":[{"content":"A task that represents the asynchronous flush operation.","pos":[0,56]}]}],"pos":[35002,35059],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class in a safe buffer with a specified offset, length, and file access.","nodes":[{"pos":[0,159],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.UnmanagedMemoryStream\"&gt;&lt;/xref&gt;</ph> class in a safe buffer with a specified offset, length, and file access.","source":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class in a safe buffer with a specified offset, length, and file access."}],"pos":[36755,36915],"yaml":true},{"content":"The buffer to contain the unmanaged memory stream.","nodes":[{"pos":[0,50],"content":"The buffer to contain the unmanaged memory stream.","nodes":[{"content":"The buffer to contain the unmanaged memory stream.","pos":[0,50]}]}],"pos":[37177,37228],"yaml":true},{"content":"The byte position in the buffer at which to start the unmanaged memory stream.","nodes":[{"pos":[0,78],"content":"The byte position in the buffer at which to start the unmanaged memory stream.","nodes":[{"content":"The byte position in the buffer at which to start the unmanaged memory stream.","pos":[0,78]}]}],"pos":[37289,37368],"yaml":true},{"content":"The length of the unmanaged memory stream.","nodes":[{"pos":[0,42],"content":"The length of the unmanaged memory stream.","nodes":[{"content":"The length of the unmanaged memory stream.","pos":[0,42]}]}],"pos":[37429,37472],"yaml":true},{"content":"The mode of file access to the unmanaged memory stream.","nodes":[{"pos":[0,55],"content":"The mode of file access to the unmanaged memory stream.","nodes":[{"content":"The mode of file access to the unmanaged memory stream.","pos":[0,55]}]}],"pos":[37541,37597],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class by using a pointer to an unmanaged memory location.","nodes":[{"pos":[0,144],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.IO.UnmanagedMemoryStream\"&gt;&lt;/xref&gt;</ph> class by using a pointer to an unmanaged memory location.","source":"Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class by using a pointer to an unmanaged memory location."}],"pos":[39221,39366],"yaml":true},{"content":"This method is equivalent to the <xref:System.IO.UnmanagedMemoryStream.%23ctor%2A> constructor. It supports methods that need to initialize the pointer before setting stream variables and, therefore, cannot call the parameterized constructor. Such methods should use the default constructor, <xref:System.IO.UnmanagedMemoryStream.%23ctor>, initialize the pointer, and then invoke the <xref:System.IO.UnmanagedMemoryStream.Initialize%2A> method.","nodes":[{"pos":[0,444],"content":"This method is equivalent to the <xref:System.IO.UnmanagedMemoryStream.%23ctor%2A> constructor. It supports methods that need to initialize the pointer before setting stream variables and, therefore, cannot call the parameterized constructor. Such methods should use the default constructor, <xref:System.IO.UnmanagedMemoryStream.%23ctor>, initialize the pointer, and then invoke the <xref:System.IO.UnmanagedMemoryStream.Initialize%2A> method.","nodes":[{"content":"This method is equivalent to the <xref:System.IO.UnmanagedMemoryStream.%23ctor%2A> constructor. It supports methods that need to initialize the pointer before setting stream variables and, therefore, cannot call the parameterized constructor. Such methods should use the default constructor, <xref:System.IO.UnmanagedMemoryStream.%23ctor>, initialize the pointer, and then invoke the <xref:System.IO.UnmanagedMemoryStream.Initialize%2A> method.","pos":[0,444],"nodes":[{"content":"This method is equivalent to the <ph id=\"ph1\">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor%2A&gt;</ph> constructor.","pos":[0,95],"source":"This method is equivalent to the <xref:System.IO.UnmanagedMemoryStream.%23ctor%2A> constructor."},{"content":"It supports methods that need to initialize the pointer before setting stream variables and, therefore, cannot call the parameterized constructor.","pos":[96,242]},{"content":"Such methods should use the default constructor, <ph id=\"ph1\">&lt;xref:System.IO.UnmanagedMemoryStream.%23ctor&gt;</ph>, initialize the pointer, and then invoke the <ph id=\"ph2\">&lt;xref:System.IO.UnmanagedMemoryStream.Initialize%2A&gt;</ph> method.","pos":[243,444],"source":" Such methods should use the default constructor, <xref:System.IO.UnmanagedMemoryStream.%23ctor>, initialize the pointer, and then invoke the <xref:System.IO.UnmanagedMemoryStream.Initialize%2A> method."}]}]}],"pos":[39377,39822],"yaml":true,"extradata":"MT"},{"content":"A pointer to an unmanaged memory location.","nodes":[{"pos":[0,42],"content":"A pointer to an unmanaged memory location.","nodes":[{"content":"A pointer to an unmanaged memory location.","pos":[0,42]}]}],"pos":[40110,40153],"yaml":true},{"content":"The length of the memory to use.","nodes":[{"pos":[0,32],"content":"The length of the memory to use.","nodes":[{"content":"The length of the memory to use.","pos":[0,32]}]}],"pos":[40214,40247],"yaml":true},{"content":"The total amount of memory assigned to the stream.","nodes":[{"pos":[0,50],"content":"The total amount of memory assigned to the stream.","nodes":[{"content":"The total amount of memory assigned to the stream.","pos":[0,50]}]}],"pos":[40310,40361],"yaml":true},{"content":"One of the <xref href=\"System.IO.FileAccess\"></xref> values.","nodes":[{"pos":[0,60],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.IO.FileAccess\"&gt;&lt;/xref&gt;</ph> values.","source":"One of the <xref href=\"System.IO.FileAccess\"></xref> values."}],"pos":[40430,40491],"yaml":true},{"content":"The user does not have the required permission.","nodes":[{"pos":[0,47],"content":"The user does not have the required permission.","nodes":[{"content":"The user does not have the required permission.","pos":[0,47]}]}],"pos":[40673,40721],"yaml":true},{"content":"The <code>pointer</code> value is `null`.","nodes":[{"pos":[0,41],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">pointer</ph><ept id=\"p1\">&lt;/code&gt;</ept> value is <ph id=\"ph2\">`null`</ph>.","source":"The <code>pointer</code> value is `null`."}],"pos":[40823,40865],"yaml":true},{"content":"The <code>length</code> value is less than zero.  \n  \n \\- or -  \n  \n The <code>capacity</code> value is less than zero.  \n  \n \\- or -  \n  \n The <code>length</code> value is large enough to cause an overflow.","nodes":[{"pos":[0,48],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p1\">&lt;/code&gt;</ept> value is less than zero.","source":"The <code>length</code> value is less than zero."},{"pos":[55,62],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[69,119],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">capacity</ph><ept id=\"p1\">&lt;/code&gt;</ept> value is less than zero.","source":"The <code>capacity</code> value is less than zero."},{"pos":[126,133],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[140,207],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">length</ph><ept id=\"p1\">&lt;/code&gt;</ept> value is large enough to cause an overflow.","source":"The <code>length</code> value is large enough to cause an overflow."}],"pos":[40979,41199],"yaml":true},{"content":"Gets the length of the data in a stream.","nodes":[{"pos":[0,40],"content":"Gets the length of the data in a stream.","nodes":[{"content":"Gets the length of the data in a stream.","pos":[0,40]}]}],"pos":[42534,42575],"yaml":true},{"content":"If unchanged since the stream was initialized, this property returns the length value provided to the constructor. If changes to the stream have occurred, this property reflects any changes to the length of the data.","nodes":[{"pos":[0,216],"content":"If unchanged since the stream was initialized, this property returns the length value provided to the constructor. If changes to the stream have occurred, this property reflects any changes to the length of the data.","nodes":[{"content":"If unchanged since the stream was initialized, this property returns the length value provided to the constructor. If changes to the stream have occurred, this property reflects any changes to the length of the data.","pos":[0,216],"nodes":[{"content":"If unchanged since the stream was initialized, this property returns the length value provided to the constructor.","pos":[0,114]},{"content":"If changes to the stream have occurred, this property reflects any changes to the length of the data.","pos":[115,216]}]}]}],"pos":[42586,42803],"yaml":true,"extradata":"MT"},{"content":"The length of the data in the stream.","nodes":[{"pos":[0,37],"content":"The length of the data in the stream.","nodes":[{"content":"The length of the data in the stream.","pos":[0,37]}]}],"pos":[43374,43412],"yaml":true},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[43584,43606],"yaml":true},{"content":"Gets or sets the current position in a stream.","nodes":[{"pos":[0,46],"content":"Gets or sets the current position in a stream.","nodes":[{"content":"Gets or sets the current position in a stream.","pos":[0,46]}]}],"pos":[44848,44895],"yaml":true},{"content":"When a stream is initialized, this property is set to zero.  \n  \n Although you can set the position of the stream beyond the stream's capacity, you will not be able to access that area using the <xref:System.IO.UnmanagedMemoryStream.Read%2A> and <xref:System.IO.UnmanagedMemoryStream.Write%2A> methods. <xref:System.IO.UnmanagedMemoryStream.Read%2A> will return 0 and <xref:System.IO.UnmanagedMemoryStream.Write%2A> will throw a <xref:System.NotSupportedException>. This support is primarily for design and code compatibility with basic stream operations.","nodes":[{"pos":[0,59],"content":"When a stream is initialized, this property is set to zero.","nodes":[{"content":"When a stream is initialized, this property is set to zero.","pos":[0,59]}]},{"pos":[66,555],"content":"Although you can set the position of the stream beyond the stream's capacity, you will not be able to access that area using the <xref:System.IO.UnmanagedMemoryStream.Read%2A> and <xref:System.IO.UnmanagedMemoryStream.Write%2A> methods. <xref:System.IO.UnmanagedMemoryStream.Read%2A> will return 0 and <xref:System.IO.UnmanagedMemoryStream.Write%2A> will throw a <xref:System.NotSupportedException>. This support is primarily for design and code compatibility with basic stream operations.","nodes":[{"content":"Although you can set the position of the stream beyond the stream's capacity, you will not be able to access that area using the <xref:System.IO.UnmanagedMemoryStream.Read%2A> and <xref:System.IO.UnmanagedMemoryStream.Write%2A> methods. <xref:System.IO.UnmanagedMemoryStream.Read%2A> will return 0 and <xref:System.IO.UnmanagedMemoryStream.Write%2A> will throw a <xref:System.NotSupportedException>. This support is primarily for design and code compatibility with basic stream operations.","pos":[0,489],"nodes":[{"content":"Although you can set the position of the stream beyond the stream's capacity, you will not be able to access that area using the <ph id=\"ph1\">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph> methods.","pos":[0,236],"source":"Although you can set the position of the stream beyond the stream's capacity, you will not be able to access that area using the <xref:System.IO.UnmanagedMemoryStream.Read%2A> and <xref:System.IO.UnmanagedMemoryStream.Write%2A> methods."},{"content":"<ph id=\"ph1\">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> will return 0 and <ph id=\"ph2\">&lt;xref:System.IO.UnmanagedMemoryStream.Write%2A&gt;</ph> will throw a <ph id=\"ph3\">&lt;xref:System.NotSupportedException&gt;</ph>.","pos":[237,399],"source":" <xref:System.IO.UnmanagedMemoryStream.Read%2A> will return 0 and <xref:System.IO.UnmanagedMemoryStream.Write%2A> will throw a <xref:System.NotSupportedException>."},{"content":"This support is primarily for design and code compatibility with basic stream operations.","pos":[400,489]}]}]}],"pos":[44906,45466],"yaml":true,"extradata":"MT"},{"content":"The current position in the stream.","nodes":[{"pos":[0,35],"content":"The current position in the stream.","nodes":[{"content":"The current position in the stream.","pos":[0,35]}]}],"pos":[45649,45685],"yaml":true},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[45859,45881],"yaml":true},{"content":"The position is set to a value that is less than zero, or the position is larger than <xref href=\"System.Int32.MaxValue\"></xref> or results in overflow when added to the current pointer.","nodes":[{"pos":[0,186],"content":"The position is set to a value that is less than zero, or the position is larger than <ph id=\"ph1\">&lt;xref href=\"System.Int32.MaxValue\"&gt;&lt;/xref&gt;</ph> or results in overflow when added to the current pointer.","source":"The position is set to a value that is less than zero, or the position is larger than <xref href=\"System.Int32.MaxValue\"></xref> or results in overflow when added to the current pointer."}],"pos":[45995,46182],"yaml":true},{"content":"Gets or sets a byte pointer to a stream based on the current position in the stream.","nodes":[{"pos":[0,84],"content":"Gets or sets a byte pointer to a stream based on the current position in the stream.","nodes":[{"content":"Gets or sets a byte pointer to a stream based on the current position in the stream.","pos":[0,84]}]}],"pos":[47534,47619],"yaml":true},{"content":"To return a pointer to the entire stream, set the <xref:System.IO.UnmanagedMemoryStream.Position%2A> property to zero, and then call this property.","nodes":[{"pos":[0,147],"content":"To return a pointer to the entire stream, set the <xref:System.IO.UnmanagedMemoryStream.Position%2A> property to zero, and then call this property.","nodes":[{"content":"To return a pointer to the entire stream, set the <ph id=\"ph1\">&lt;xref:System.IO.UnmanagedMemoryStream.Position%2A&gt;</ph> property to zero, and then call this property.","pos":[0,147],"source":"To return a pointer to the entire stream, set the <xref:System.IO.UnmanagedMemoryStream.Position%2A> property to zero, and then call this property."}]}],"pos":[47630,47778],"yaml":true,"extradata":"MT"},{"content":"A byte pointer.","nodes":[{"pos":[0,15],"content":"A byte pointer.","nodes":[{"content":"A byte pointer.","pos":[0,15]}]}],"pos":[48039,48055],"yaml":true},{"content":"The current position is larger than the capacity of the stream.","nodes":[{"pos":[0,63],"content":"The current position is larger than the capacity of the stream.","nodes":[{"content":"The current position is larger than the capacity of the stream.","pos":[0,63]}]}],"pos":[48238,48302],"yaml":true},{"content":"The position is being set is not a valid position in the current stream.","nodes":[{"pos":[0,72],"content":"The position is being set is not a valid position in the current stream.","nodes":[{"content":"The position is being set is not a valid position in the current stream.","pos":[0,72]}]}],"pos":[48416,48489],"yaml":true},{"content":"The pointer is being set to a lower value than the starting position of the stream.","nodes":[{"pos":[0,83],"content":"The pointer is being set to a lower value than the starting position of the stream.","nodes":[{"content":"The pointer is being set to a lower value than the starting position of the stream.","pos":[0,83]}]}],"pos":[48577,48661],"yaml":true},{"content":"The stream was initialized for use with a <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref>. The <xref href=\"System.IO.UnmanagedMemoryStream.PositionPointer\"></xref> property is valid only for streams that are initialized with a <xref href=\"System.Byte\"></xref> pointer.","nodes":[{"pos":[0,283],"content":"The stream was initialized for use with a <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref>. The <xref href=\"System.IO.UnmanagedMemoryStream.PositionPointer\"></xref> property is valid only for streams that are initialized with a <xref href=\"System.Byte\"></xref> pointer.","nodes":[{"content":"The stream was initialized for use with a <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.SafeBuffer\"&gt;&lt;/xref&gt;</ph>.","pos":[0,105],"source":"The stream was initialized for use with a <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref>."},{"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.UnmanagedMemoryStream.PositionPointer\"&gt;&lt;/xref&gt;</ph> property is valid only for streams that are initialized with a <ph id=\"ph2\">&lt;xref href=\"System.Byte\"&gt;&lt;/xref&gt;</ph> pointer.","pos":[106,283],"source":" The <xref href=\"System.IO.UnmanagedMemoryStream.PositionPointer\"></xref> property is valid only for streams that are initialized with a <xref href=\"System.Byte\"></xref> pointer."}]}],"pos":[48763,49047],"yaml":true},{"content":"Reads the specified number of bytes into the specified array.","nodes":[{"pos":[0,61],"content":"Reads the specified number of bytes into the specified array.","nodes":[{"content":"Reads the specified number of bytes into the specified array.","pos":[0,61]}]}],"pos":[50605,50667],"yaml":true},{"content":"The `offset` parameter gives the offset of the byte in the `array` parameter (the buffer index) at which to begin reading, and the `count` parameter gives the maximum number of bytes to be read from this stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached. If the read operation is successful, the current position of the stream is advanced by the number of bytes read. If an exception occurs, the current position of the stream is unchanged.  \n  \n The <xref:System.IO.UnmanagedMemoryStream.Read%2A> method returns zero only after reaching the end of the stream. Otherwise, <xref:System.IO.UnmanagedMemoryStream.Read%2A> always reads at least one byte from the stream before returning. If no data is available from the stream upon a call to <xref:System.IO.UnmanagedMemoryStream.Read%2A>, the method will block until at least one byte of data can be returned. An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.","nodes":[{"pos":[0,497],"content":"The `offset` parameter gives the offset of the byte in the `array` parameter (the buffer index) at which to begin reading, and the `count` parameter gives the maximum number of bytes to be read from this stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached. If the read operation is successful, the current position of the stream is advanced by the number of bytes read. If an exception occurs, the current position of the stream is unchanged.","nodes":[{"content":"The <ph id=\"ph1\">`offset`</ph> parameter gives the offset of the byte in the <ph id=\"ph2\">`array`</ph> parameter (the buffer index) at which to begin reading, and the <ph id=\"ph3\">`count`</ph> parameter gives the maximum number of bytes to be read from this stream.","pos":[0,211],"source":"The `offset` parameter gives the offset of the byte in the `array` parameter (the buffer index) at which to begin reading, and the `count` parameter gives the maximum number of bytes to be read from this stream."},{"content":"The returned value is the actual number of bytes read, or zero if the end of the stream is reached.","pos":[212,311]},{"content":"If the read operation is successful, the current position of the stream is advanced by the number of bytes read.","pos":[312,424]},{"content":"If an exception occurs, the current position of the stream is unchanged.","pos":[425,497]}]},{"pos":[504,1029],"content":"The <xref:System.IO.UnmanagedMemoryStream.Read%2A> method returns zero only after reaching the end of the stream. Otherwise, <xref:System.IO.UnmanagedMemoryStream.Read%2A> always reads at least one byte from the stream before returning. If no data is available from the stream upon a call to <xref:System.IO.UnmanagedMemoryStream.Read%2A>, the method will block until at least one byte of data can be returned. An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.","nodes":[{"content":"The <xref:System.IO.UnmanagedMemoryStream.Read%2A> method returns zero only after reaching the end of the stream. Otherwise, <xref:System.IO.UnmanagedMemoryStream.Read%2A> always reads at least one byte from the stream before returning. If no data is available from the stream upon a call to <xref:System.IO.UnmanagedMemoryStream.Read%2A>, the method will block until at least one byte of data can be returned. An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.","pos":[0,525],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> method returns zero only after reaching the end of the stream.","pos":[0,113],"source":"The <xref:System.IO.UnmanagedMemoryStream.Read%2A> method returns zero only after reaching the end of the stream."},{"content":"Otherwise, <ph id=\"ph1\">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph> always reads at least one byte from the stream before returning.","pos":[114,236],"source":" Otherwise, <xref:System.IO.UnmanagedMemoryStream.Read%2A> always reads at least one byte from the stream before returning."},{"content":"If no data is available from the stream upon a call to <ph id=\"ph1\">&lt;xref:System.IO.UnmanagedMemoryStream.Read%2A&gt;</ph>, the method will block until at least one byte of data can be returned.","pos":[237,410],"source":" If no data is available from the stream upon a call to <xref:System.IO.UnmanagedMemoryStream.Read%2A>, the method will block until at least one byte of data can be returned."},{"content":"An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.","pos":[411,525]}]}]}],"pos":[50678,51712],"yaml":true,"extradata":"MT"},{"content":"When this method returns, contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1) replaced by the bytes read from the current source. This parameter is passed uninitialized.","nodes":[{"pos":[0,246],"content":"When this method returns, contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1) replaced by the bytes read from the current source. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains the specified byte array with the values between <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> and (<bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">offset</ph><ept id=\"p2\">&lt;/code&gt;</ept><ph id=\"ph3\"> + </ph><bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph4\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> - 1) replaced by the bytes read from the current source.","pos":[0,206],"source":"When this method returns, contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1) replaced by the bytes read from the current source."},{"content":"This parameter is passed uninitialized.","pos":[207,246]}]}],"pos":[52315,52562],"yaml":true},{"content":"The zero-based byte offset in <code>buffer</code> at which to begin storing the data read from the current stream.","nodes":[{"pos":[0,114],"content":"The zero-based byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin storing the data read from the current stream.","source":"The zero-based byte offset in <code>buffer</code> at which to begin storing the data read from the current stream."}],"pos":[52623,52738],"yaml":true},{"content":"The maximum number of bytes to read from the current stream.","nodes":[{"pos":[0,60],"content":"The maximum number of bytes to read from the current stream.","nodes":[{"content":"The maximum number of bytes to read from the current stream.","pos":[0,60]}]}],"pos":[52798,52859],"yaml":true},{"content":"The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.","nodes":[{"pos":[0,202],"content":"The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.","nodes":[{"content":"The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.","pos":[0,202],"nodes":[{"content":"The total number of bytes read into the buffer.","pos":[0,47]},{"content":"This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.","pos":[48,202]}]}]}],"pos":[52915,53118],"yaml":true},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[53288,53310],"yaml":true},{"content":"The underlying memory does not support reading.  \n  \n \\- or -  \n  \n The <xref href=\"System.IO.UnmanagedMemoryStream.CanRead\"></xref> property is set to `false`.","nodes":[{"pos":[0,47],"content":"The underlying memory does not support reading.","nodes":[{"content":"The underlying memory does not support reading.","pos":[0,47]}]},{"pos":[54,61],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[68,160],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.IO.UnmanagedMemoryStream.CanRead\"&gt;&lt;/xref&gt;</ph> property is set to <ph id=\"ph2\">`false`</ph>.","source":"The <xref href=\"System.IO.UnmanagedMemoryStream.CanRead\"></xref> property is set to `false`."}],"pos":[53412,53582],"yaml":true},{"content":"The <code>buffer</code> parameter is set to `null`.","nodes":[{"pos":[0,51],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is set to <ph id=\"ph2\">`null`</ph>.","source":"The <code>buffer</code> parameter is set to `null`."}],"pos":[53684,53736],"yaml":true},{"content":"The <code>offset</code> parameter is less than zero.  \n  \n \\- or -  \n  \n The <code>count</code> parameter is less than zero.","nodes":[{"pos":[0,52],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than zero.","source":"The <code>offset</code> parameter is less than zero."},{"pos":[59,66],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[73,124],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than zero.","source":"The <code>count</code> parameter is less than zero."}],"pos":[53850,53982],"yaml":true},{"content":"The length of the buffer array minus the <code>offset</code> parameter is less than the <code>count</code> parameter.","nodes":[{"pos":[0,117],"content":"The length of the buffer array minus the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is less than the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">count</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter.","source":"The length of the buffer array minus the <code>offset</code> parameter is less than the <code>count</code> parameter."}],"pos":[54076,54194],"yaml":true},{"content":"Asynchronously reads the specified number of bytes into the specified array.  \n  \n Available starting in [!INCLUDE[net_2015](~/includes/net-2015-md.md)]","nodes":[{"pos":[0,76],"content":"Asynchronously reads the specified number of bytes into the specified array.","nodes":[{"content":"Asynchronously reads the specified number of bytes into the specified array.","pos":[0,76]}]},{"pos":[83,152],"content":"Available starting in <ph id=\"ph1\">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph>","source":"Available starting in [!INCLUDE[net_2015](~/includes/net-2015-md.md)]"}],"pos":[55808,55965],"yaml":true},{"content":"If an exception occurs during the read operation, it will be set as the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName> of the property of the returned task.","nodes":[{"pos":[0,182],"content":"If an exception occurs during the read operation, it will be set as the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName> of the property of the returned task.","nodes":[{"content":"If an exception occurs during the read operation, it will be set as the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName&gt;</ph> of the property of the returned task.","pos":[0,182],"source":"If an exception occurs during the read operation, it will be set as the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName> of the property of the returned task."}]}],"pos":[55976,56159],"yaml":true,"extradata":"MT"},{"content":"The buffer to write the data into.","nodes":[{"pos":[0,34],"content":"The buffer to write the data into.","nodes":[{"content":"The buffer to write the data into.","pos":[0,34]}]}],"pos":[56480,56515],"yaml":true},{"content":"The byte offset in <code>buffer</code> at which to begin writing data from the stream.","nodes":[{"pos":[0,86],"content":"The byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin writing data from the stream.","source":"The byte offset in <code>buffer</code> at which to begin writing data from the stream."}],"pos":[56576,56663],"yaml":true},{"content":"The maximum number of bytes to read.","nodes":[{"pos":[0,36],"content":"The maximum number of bytes to read.","nodes":[{"content":"The maximum number of bytes to read.","pos":[0,36]}]}],"pos":[56723,56760],"yaml":true},{"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"pos":[0,130],"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken.None\"&gt;&lt;/xref&gt;</ph>.","pos":[48,130],"source":" The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>."}]}],"pos":[56854,56985],"yaml":true},{"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","nodes":[{"pos":[0,367],"content":"A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","nodes":[{"content":"A task that represents the asynchronous read operation.","pos":[0,55]},{"content":"The value of the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter contains the total number of bytes read into the buffer.","pos":[56,160],"source":" The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer."},{"content":"The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.","pos":[161,367]}]}],"pos":[57070,57438],"yaml":true},{"content":"Reads a byte from a stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.","nodes":[{"pos":[0,126],"content":"Reads a byte from a stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.","nodes":[{"content":"Reads a byte from a stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.","pos":[0,126]}]}],"pos":[58743,58870],"yaml":true},{"content":"Use this method to return integer values from the stream.","nodes":[{"pos":[0,57],"content":"Use this method to return integer values from the stream.","nodes":[{"content":"Use this method to return integer values from the stream.","pos":[0,57]}]}],"pos":[58881,58939],"yaml":true,"extradata":"MT"},{"content":"The unsigned byte cast to an <xref href=\"System.Int32\"></xref> object, or -1 if at the end of the stream.","nodes":[{"pos":[0,105],"content":"The unsigned byte cast to an <ph id=\"ph1\">&lt;xref href=\"System.Int32\"&gt;&lt;/xref&gt;</ph> object, or -1 if at the end of the stream.","source":"The unsigned byte cast to an <xref href=\"System.Int32\"></xref> object, or -1 if at the end of the stream."}],"pos":[59756,59862],"yaml":true},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[60036,60058],"yaml":true},{"content":"The underlying memory does not support reading.  \n  \n \\- or -  \n  \n The current position is at the end of the stream.","nodes":[{"pos":[0,47],"content":"The underlying memory does not support reading.","nodes":[{"content":"The underlying memory does not support reading.","pos":[0,47]}]},{"pos":[54,61],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[68,117],"content":"The current position is at the end of the stream.","nodes":[{"content":"The current position is at the end of the stream.","pos":[0,49]}]}],"pos":[60160,60285],"yaml":true},{"content":"Sets the current position of the current stream to the given value.","nodes":[{"pos":[0,67],"content":"Sets the current position of the current stream to the given value.","nodes":[{"content":"Sets the current position of the current stream to the given value.","pos":[0,67]}]}],"pos":[61680,61748],"yaml":true},{"content":"For more information about seeking, see <xref:System.IO.FileStream.Seek%2A>.","nodes":[{"pos":[0,76],"content":"For more information about seeking, see <xref:System.IO.FileStream.Seek%2A>.","nodes":[{"content":"For more information about seeking, see <ph id=\"ph1\">&lt;xref:System.IO.FileStream.Seek%2A&gt;</ph>.","pos":[0,76],"source":"For more information about seeking, see <xref:System.IO.FileStream.Seek%2A>."}]}],"pos":[61759,61836],"yaml":true,"extradata":"MT"},{"content":"The point relative to <code>origin</code> to begin seeking from.","nodes":[{"pos":[0,64],"content":"The point relative to <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">origin</ph><ept id=\"p1\">&lt;/code&gt;</ept> to begin seeking from.","source":"The point relative to <code>origin</code> to begin seeking from."}],"pos":[62003,62068],"yaml":true},{"content":"Specifies the beginning, the end, or the current position as a reference point for <code>origin</code>, using a value of type <xref href=\"System.IO.SeekOrigin\"></xref>.","nodes":[{"pos":[0,168],"content":"Specifies the beginning, the end, or the current position as a reference point for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">origin</ph><ept id=\"p1\">&lt;/code&gt;</ept>, using a value of type <ph id=\"ph2\">&lt;xref href=\"System.IO.SeekOrigin\"&gt;&lt;/xref&gt;</ph>.","source":"Specifies the beginning, the end, or the current position as a reference point for <code>origin</code>, using a value of type <xref href=\"System.IO.SeekOrigin\"></xref>."}],"pos":[62134,62303],"yaml":true},{"content":"The new position in the stream.","nodes":[{"pos":[0,31],"content":"The new position in the stream.","nodes":[{"content":"The new position in the stream.","pos":[0,31]}]}],"pos":[62359,62391],"yaml":true},{"content":"An attempt was made to seek before the beginning of the stream.","nodes":[{"pos":[0,63],"content":"An attempt was made to seek before the beginning of the stream.","nodes":[{"content":"An attempt was made to seek before the beginning of the stream.","pos":[0,63]}]}],"pos":[62543,62607],"yaml":true},{"content":"The <code>offset</code> value is larger than the maximum size of the stream.","nodes":[{"pos":[0,76],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> value is larger than the maximum size of the stream.","source":"The <code>offset</code> value is larger than the maximum size of the stream."}],"pos":[62721,62798],"yaml":true},{"content":"<code>loc</code> is invalid.","nodes":[{"pos":[0,28],"content":"<ph id=\"ph1\">&lt;code&gt;loc&lt;/code&gt;</ph> is invalid.","source":"<code>loc</code> is invalid."}],"pos":[62892,62921],"yaml":true},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[63027,63049],"yaml":true},{"content":"Sets the length of a stream to a specified value.","nodes":[{"pos":[0,49],"content":"Sets the length of a stream to a specified value.","nodes":[{"content":"Sets the length of a stream to a specified value.","pos":[0,49]}]}],"pos":[64358,64408],"yaml":true},{"content":"If the given value is less than the current length of the stream, the stream is truncated. If the given value is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new lengths are undefined.  \n  \n A stream must support both writing and seeking for <xref:System.IO.UnmanagedMemoryStream.SetLength%2A> to work.","nodes":[{"pos":[0,287],"content":"If the given value is less than the current length of the stream, the stream is truncated. If the given value is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new lengths are undefined.","nodes":[{"content":"If the given value is less than the current length of the stream, the stream is truncated. If the given value is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new lengths are undefined.","pos":[0,287],"nodes":[{"content":"If the given value is less than the current length of the stream, the stream is truncated.","pos":[0,90]},{"content":"If the given value is larger than the current length of the stream, the stream is expanded.","pos":[91,182]},{"content":"If the stream is expanded, the contents of the stream between the old and the new lengths are undefined.","pos":[183,287]}]}]},{"pos":[294,405],"content":"A stream must support both writing and seeking for <xref:System.IO.UnmanagedMemoryStream.SetLength%2A> to work.","nodes":[{"content":"A stream must support both writing and seeking for <ph id=\"ph1\">&lt;xref:System.IO.UnmanagedMemoryStream.SetLength%2A&gt;</ph> to work.","pos":[0,111],"source":"A stream must support both writing and seeking for <xref:System.IO.UnmanagedMemoryStream.SetLength%2A> to work."}]}],"pos":[64419,64829],"yaml":true,"extradata":"MT"},{"content":"The length of the stream.","nodes":[{"pos":[0,25],"content":"The length of the stream.","nodes":[{"content":"The length of the stream.","pos":[0,25]}]}],"pos":[64973,64999],"yaml":true},{"content":"An I/O error has occurred.","nodes":[{"pos":[0,26],"content":"An I/O error has occurred.","nodes":[{"content":"An I/O error has occurred.","pos":[0,26]}]}],"pos":[65156,65183],"yaml":true},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[65289,65311],"yaml":true},{"content":"The underlying memory does not support writing.  \n  \n \\- or -  \n  \n An attempt is made to write to the stream and the <xref href=\"System.IO.UnmanagedMemoryStream.CanWrite\"></xref> property is `false`.","nodes":[{"pos":[0,47],"content":"The underlying memory does not support writing.","nodes":[{"content":"The underlying memory does not support writing.","pos":[0,47]}]},{"pos":[54,61],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[68,200],"content":"An attempt is made to write to the stream and the <ph id=\"ph1\">&lt;xref href=\"System.IO.UnmanagedMemoryStream.CanWrite\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`false`</ph>.","source":"An attempt is made to write to the stream and the <xref href=\"System.IO.UnmanagedMemoryStream.CanWrite\"></xref> property is `false`."}],"pos":[65413,65623],"yaml":true},{"content":"The specified <code>value</code> exceeds the capacity of the stream.  \n  \n \\- or -  \n  \n The specified <code>value</code> is negative.","nodes":[{"pos":[0,68],"content":"The specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> exceeds the capacity of the stream.","source":"The specified <code>value</code> exceeds the capacity of the stream."},{"pos":[75,82],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[89,134],"content":"The specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> is negative.","source":"The specified <code>value</code> is negative."}],"pos":[65737,65879],"yaml":true},{"content":"Writes a block of bytes to the current stream using data from a buffer.","nodes":[{"pos":[0,71],"content":"Writes a block of bytes to the current stream using data from a buffer.","nodes":[{"content":"Writes a block of bytes to the current stream using data from a buffer.","pos":[0,71]}]}],"pos":[67307,67379],"yaml":true},{"content":"Writing occurs at the current position in the stream.","nodes":[{"pos":[0,53],"content":"Writing occurs at the current position in the stream.","nodes":[{"content":"Writing occurs at the current position in the stream.","pos":[0,53]}]}],"pos":[67390,67444],"yaml":true,"extradata":"MT"},{"content":"The byte array from which to copy bytes to the current stream.","nodes":[{"pos":[0,62],"content":"The byte array from which to copy bytes to the current stream.","nodes":[{"content":"The byte array from which to copy bytes to the current stream.","pos":[0,62]}]}],"pos":[68049,68112],"yaml":true},{"content":"The offset in the buffer at which to begin copying bytes to the current stream.","nodes":[{"pos":[0,79],"content":"The offset in the buffer at which to begin copying bytes to the current stream.","nodes":[{"content":"The offset in the buffer at which to begin copying bytes to the current stream.","pos":[0,79]}]}],"pos":[68173,68253],"yaml":true},{"content":"The number of bytes to write to the current stream.","nodes":[{"pos":[0,51],"content":"The number of bytes to write to the current stream.","nodes":[{"content":"The number of bytes to write to the current stream.","pos":[0,51]}]}],"pos":[68313,68365],"yaml":true},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[68536,68558],"yaml":true},{"content":"The underlying memory does not support writing.  \n  \n \\- or -  \n  \n An attempt is made to write to the stream and the <xref href=\"System.IO.UnmanagedMemoryStream.CanWrite\"></xref> property is `false`.  \n  \n \\- or -  \n  \n The <code>count</code> value is greater than the capacity of the stream.  \n  \n \\- or -  \n  \n The position is at the end of the stream capacity.","nodes":[{"pos":[0,47],"content":"The underlying memory does not support writing.","nodes":[{"content":"The underlying memory does not support writing.","pos":[0,47]}]},{"pos":[54,61],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[68,200],"content":"An attempt is made to write to the stream and the <ph id=\"ph1\">&lt;xref href=\"System.IO.UnmanagedMemoryStream.CanWrite\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`false`</ph>.","source":"An attempt is made to write to the stream and the <xref href=\"System.IO.UnmanagedMemoryStream.CanWrite\"></xref> property is `false`."},{"pos":[207,214],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[221,293],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> value is greater than the capacity of the stream.","source":"The <code>count</code> value is greater than the capacity of the stream."},{"pos":[300,307],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[314,364],"content":"The position is at the end of the stream capacity.","nodes":[{"content":"The position is at the end of the stream capacity.","pos":[0,50]}]}],"pos":[68660,69044],"yaml":true},{"content":"An I/O error occurs.","nodes":[{"pos":[0,20],"content":"An I/O error occurs.","nodes":[{"content":"An I/O error occurs.","pos":[0,20]}]}],"pos":[69132,69153],"yaml":true},{"content":"One of the specified parameters is less than zero.","nodes":[{"pos":[0,50],"content":"One of the specified parameters is less than zero.","nodes":[{"content":"One of the specified parameters is less than zero.","pos":[0,50]}]}],"pos":[69267,69318],"yaml":true},{"content":"The <code>offset</code> parameter minus the length of the <code>buffer</code> parameter is less than the <code>count</code> parameter.","nodes":[{"pos":[0,134],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">offset</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter minus the length of the <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">buffer</ph><ept id=\"p2\">&lt;/code&gt;</ept> parameter is less than the <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">count</ph><ept id=\"p3\">&lt;/code&gt;</ept> parameter.","source":"The <code>offset</code> parameter minus the length of the <code>buffer</code> parameter is less than the <code>count</code> parameter."}],"pos":[69412,69547],"yaml":true},{"content":"The <code>buffer</code> parameter is `null`.","nodes":[{"pos":[0,44],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>buffer</code> parameter is `null`."}],"pos":[69649,69694],"yaml":true},{"content":"Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.  \n  \n Available starting in [!INCLUDE[net_2015](~/includes/net-2015-md.md)]","nodes":[{"pos":[0,181],"content":"Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.","nodes":[{"content":"Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.","pos":[0,181]}]},{"pos":[188,257],"content":"Available starting in <ph id=\"ph1\">[!INCLUDE[net_2015](~/includes/net-2015-md.md)]</ph>","source":"Available starting in [!INCLUDE[net_2015](~/includes/net-2015-md.md)]"}],"pos":[71314,71576],"yaml":true},{"content":"If an exception occurs during the write operation, it will be set as the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName> of the property of the returned task.","nodes":[{"pos":[0,183],"content":"If an exception occurs during the write operation, it will be set as the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName> of the property of the returned task.","nodes":[{"content":"If an exception occurs during the write operation, it will be set as the <ph id=\"ph1\">&lt;xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName&gt;</ph> of the property of the returned task.","pos":[0,183],"source":"If an exception occurs during the write operation, it will be set as the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName> of the property of the returned task."}]}],"pos":[71587,71771],"yaml":true,"extradata":"MT"},{"content":"The buffer to write data from.","nodes":[{"pos":[0,30],"content":"The buffer to write data from.","nodes":[{"content":"The buffer to write data from.","pos":[0,30]}]}],"pos":[72088,72119],"yaml":true},{"content":"The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream.","nodes":[{"pos":[0,98],"content":"The zero-based byte offset in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">buffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> from which to begin copying bytes to the stream.","source":"The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream."}],"pos":[72180,72279],"yaml":true},{"content":"The maximum number of bytes to write.","nodes":[{"pos":[0,37],"content":"The maximum number of bytes to write.","nodes":[{"content":"The maximum number of bytes to write.","pos":[0,37]}]}],"pos":[72339,72377],"yaml":true},{"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"pos":[0,130],"content":"The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.","nodes":[{"content":"The token to monitor for cancellation requests.","pos":[0,47]},{"content":"The default value is <ph id=\"ph1\">&lt;xref href=\"System.Threading.CancellationToken.None\"&gt;&lt;/xref&gt;</ph>.","pos":[48,130],"source":" The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>."}]}],"pos":[72471,72602],"yaml":true},{"content":"A task that represents the asynchronous write operation.","nodes":[{"pos":[0,56],"content":"A task that represents the asynchronous write operation.","nodes":[{"content":"A task that represents the asynchronous write operation.","pos":[0,56]}]}],"pos":[72673,72730],"yaml":true},{"content":"Writes a byte to the current position in the file stream.","nodes":[{"pos":[0,57],"content":"Writes a byte to the current position in the file stream.","nodes":[{"content":"Writes a byte to the current position in the file stream.","pos":[0,57]}]}],"pos":[74093,74151],"yaml":true},{"content":"A byte value written to the stream.","nodes":[{"pos":[0,35],"content":"A byte value written to the stream.","nodes":[{"content":"A byte value written to the stream.","pos":[0,35]}]}],"pos":[74979,75015],"yaml":true},{"content":"The stream is closed.","nodes":[{"pos":[0,21],"content":"The stream is closed.","nodes":[{"content":"The stream is closed.","pos":[0,21]}]}],"pos":[75190,75212],"yaml":true},{"content":"The underlying memory does not support writing.  \n  \n \\- or -  \n  \n An attempt is made to write to the stream and the <xref href=\"System.IO.UnmanagedMemoryStream.CanWrite\"></xref> property is `false`.  \n  \n \\- or -  \n  \n The current position is at the end of the capacity of the stream.","nodes":[{"pos":[0,47],"content":"The underlying memory does not support writing.","nodes":[{"content":"The underlying memory does not support writing.","pos":[0,47]}]},{"pos":[54,61],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[68,200],"content":"An attempt is made to write to the stream and the <ph id=\"ph1\">&lt;xref href=\"System.IO.UnmanagedMemoryStream.CanWrite\"&gt;&lt;/xref&gt;</ph> property is <ph id=\"ph2\">`false`</ph>.","source":"An attempt is made to write to the stream and the <xref href=\"System.IO.UnmanagedMemoryStream.CanWrite\"></xref> property is `false`."},{"pos":[207,214],"content":"\\- or -","nodes":[{"content":"<ph id=\"ph1\">\\-</ph> or -","pos":[0,7],"source":"\\- or -"}]},{"pos":[221,286],"content":"The current position is at the end of the capacity of the stream.","nodes":[{"content":"The current position is at the end of the capacity of the stream.","pos":[0,65]}]}],"pos":[75314,75615],"yaml":true},{"content":"The supplied <code>value</code> causes the stream exceed its maximum capacity.","nodes":[{"pos":[0,78],"content":"The supplied <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">value</ph><ept id=\"p1\">&lt;/code&gt;</ept> causes the stream exceed its maximum capacity.","source":"The supplied <code>value</code> causes the stream exceed its maximum capacity."}],"pos":[75703,75782],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.IO.UnmanagedMemoryStream\n  commentId: T:System.IO.UnmanagedMemoryStream\n  id: UnmanagedMemoryStream\n  children:\n  - System.IO.UnmanagedMemoryStream.#ctor\n  - System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)\n  - System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)\n  - System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)\n  - System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  - System.IO.UnmanagedMemoryStream.CanRead\n  - System.IO.UnmanagedMemoryStream.CanSeek\n  - System.IO.UnmanagedMemoryStream.CanWrite\n  - System.IO.UnmanagedMemoryStream.Capacity\n  - System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)\n  - System.IO.UnmanagedMemoryStream.Flush\n  - System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)\n  - System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  - System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)\n  - System.IO.UnmanagedMemoryStream.Length\n  - System.IO.UnmanagedMemoryStream.Position\n  - System.IO.UnmanagedMemoryStream.PositionPointer\n  - System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)\n  - System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.UnmanagedMemoryStream.ReadByte\n  - System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)\n  - System.IO.UnmanagedMemoryStream.SetLength(System.Int64)\n  - System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)\n  - System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  - System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)\n  langs:\n  - csharp\n  name: UnmanagedMemoryStream\n  nameWithType: UnmanagedMemoryStream\n  fullName: System.IO.UnmanagedMemoryStream\n  type: Class\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Provides access to unmanaged blocks of memory from managed code.\n  remarks: \"This class supports access to unmanaged memory using the existing stream-based model and does not require that the contents in the unmanaged memory be copied to the heap.  \\n  \\n> [!IMPORTANT]\\n>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a `try`/`catch` block. To dispose of it indirectly, use a language construct such as `using` (in C#) or `Using` (in Visual Basic). For more information, see the \\\"Using an Object that Implements IDisposable\\\" section in the <xref:System.IDisposable> interface topic.\"\n  example:\n  - \"The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class.  A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class.  \\n  \\n [!code-csharp[System.IO.UnmanagedMemoryStream#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UnmanagedMemoryStream/cs/sample.cs#1)]\"\n  syntax:\n    content: 'public class UnmanagedMemoryStream : System.IO.Stream'\n  inheritance:\n  - System.Object\n  - System.IO.Stream\n  derivedClasses:\n  - System.IO.MemoryMappedFiles.MemoryMappedViewStream\n  implements: []\n  inheritedMembers:\n  - System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  - System.IO.Stream.CanTimeout\n  - System.IO.Stream.Close\n  - System.IO.Stream.CopyTo(System.IO.Stream)\n  - System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  - System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  - System.IO.Stream.CreateWaitHandle\n  - System.IO.Stream.Dispose\n  - System.IO.Stream.EndRead(System.IAsyncResult)\n  - System.IO.Stream.EndWrite(System.IAsyncResult)\n  - System.IO.Stream.FlushAsync\n  - System.IO.Stream.Null\n  - System.IO.Stream.ObjectInvariant\n  - System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.ReadTimeout\n  - System.IO.Stream.Synchronized(System.IO.Stream)\n  - System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  - System.IO.Stream.WriteTimeout\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.#ctor\n  commentId: M:System.IO.UnmanagedMemoryStream.#ctor\n  id: '#ctor'\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: UnmanagedMemoryStream()\n  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream()\n  fullName: UnmanagedMemoryStream.UnmanagedMemoryStream()\n  type: Constructor\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class.\n  syntax:\n    content: protected UnmanagedMemoryStream ();\n    parameters: []\n  overload: System.IO.UnmanagedMemoryStream.#ctor*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have the required permission.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)\n  commentId: M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)\n  id: '#ctor(System.Byte*,System.Int64)'\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: UnmanagedMemoryStream(Byte*, Int64)\n  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*, Int64)\n  fullName: UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*, Int64)\n  type: Constructor\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class using the specified location and memory length.\n  remarks: This constructor creates a new instance of the <xref:System.IO.UnmanagedMemoryStream> class, and by default sets the <xref:System.IO.UnmanagedMemoryStream.CanWrite%2A> property to `false` and the <xref:System.IO.UnmanagedMemoryStream.CanRead%2A> property to `true`. The <xref:System.IO.UnmanagedMemoryStream.Length%2A> property is set to the value of the `length` parameter and cannot be changed.\n  example:\n  - \"The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class. A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class.  \\n  \\n [!code-csharp[System.IO.UnmanagedMemoryStream_Example#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UnmanagedMemoryStream_Example/cs/program.cs#00)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Security.SecurityCritical]\n\n      public UnmanagedMemoryStream (byte* pointer, long length);\n    parameters:\n    - id: pointer\n      type: System.Byte*\n      description: A pointer to an unmanaged memory location.\n    - id: length\n      type: System.Int64\n      description: The length of the memory to use.\n  overload: System.IO.UnmanagedMemoryStream.#ctor*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have the required permission.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>pointer</code> value is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <code>length</code> value is less than zero.  \\n  \\n \\\\- or -  \\n  \\n The <code>length</code> is large enough to cause an overflow.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)\n  commentId: M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)\n  id: '#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)'\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: UnmanagedMemoryStream(SafeBuffer, Int64, Int64)\n  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer, Int64, Int64)\n  fullName: UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer, Int64, Int64)\n  type: Constructor\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class in a safe buffer with a specified offset and length.\n  syntax:\n    content: public UnmanagedMemoryStream (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length);\n    parameters:\n    - id: buffer\n      type: System.Runtime.InteropServices.SafeBuffer\n      description: The buffer to contain the unmanaged memory stream.\n    - id: offset\n      type: System.Int64\n      description: The byte position in the buffer at which to start the unmanaged memory stream.\n    - id: length\n      type: System.Int64\n      description: The length of the unmanaged memory stream.\n  overload: System.IO.UnmanagedMemoryStream.#ctor*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)\n  commentId: M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)\n  id: '#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)'\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: UnmanagedMemoryStream(Byte*, Int64, Int64, FileAccess)\n  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*, Int64, Int64, FileAccess)\n  fullName: UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*, Int64, Int64, FileAccess)\n  type: Constructor\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class using the specified location, memory length, total amount of memory, and file access values.\n  remarks: \"The `length` parameter defines the current amount of memory in use. If reading or appending data to the stream, the `length` value should be equal to the amount of valid data in the stream to be read from or preserved. If writing to the stream, this value should be zero.  \\n  \\n The `capacity` parameter indicates the amount of total memory available. This value can describe a region that is longer than the length specified, or indicate a region that can be appended to. Any attempt to write beyond this value will fail.  \\n  \\n The `access` parameter sets the <xref:System.IO.UnmanagedMemoryStream.CanRead%2A>, and <xref:System.IO.UnmanagedMemoryStream.CanWrite%2A> properties. Note that specifying <xref:System.IO.FileAccess.Write> does not guarantee that the stream will be writable. The access parameters allow the implementer to create an object whose implementation can match the actual stream that is exposed.\"\n  example:\n  - \"The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class.  A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class.  \\n  \\n [!code-csharp[System.IO.UnmanagedMemoryStream#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UnmanagedMemoryStream/cs/sample.cs#1)]\"\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Security.SecurityCritical]\n\n      public UnmanagedMemoryStream (byte* pointer, long length, long capacity, System.IO.FileAccess access);\n    parameters:\n    - id: pointer\n      type: System.Byte*\n      description: A pointer to an unmanaged memory location.\n    - id: length\n      type: System.Int64\n      description: The length of the memory to use.\n    - id: capacity\n      type: System.Int64\n      description: The total amount of memory assigned to the stream.\n    - id: access\n      type: System.IO.FileAccess\n      description: One of the <xref href=\"System.IO.FileAccess\"></xref> values.\n  overload: System.IO.UnmanagedMemoryStream.#ctor*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have the required permission.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>pointer</code> value is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <code>length</code> value is less than zero.  \\n  \\n \\\\- or -  \\n  \\n The <code>capacity</code> value is less than zero.  \\n  \\n \\\\- or -  \\n  \\n The <code>length</code> value is greater than the <code>capacity</code> value.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  commentId: M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  id: '#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)'\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: UnmanagedMemoryStream(SafeBuffer, Int64, Int64, FileAccess)\n  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer, Int64, Int64, FileAccess)\n  fullName: UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer, Int64, Int64, FileAccess)\n  type: Constructor\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class in a safe buffer with a specified offset, length, and file access.\n  syntax:\n    content: public UnmanagedMemoryStream (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length, System.IO.FileAccess access);\n    parameters:\n    - id: buffer\n      type: System.Runtime.InteropServices.SafeBuffer\n      description: The buffer to contain the unmanaged memory stream.\n    - id: offset\n      type: System.Int64\n      description: The byte position in the buffer at which to start the unmanaged memory stream.\n    - id: length\n      type: System.Int64\n      description: The length of the unmanaged memory stream.\n    - id: access\n      type: System.IO.FileAccess\n      description: The mode of file access to the unmanaged memory stream.\n  overload: System.IO.UnmanagedMemoryStream.#ctor*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.CanRead\n  commentId: P:System.IO.UnmanagedMemoryStream.CanRead\n  id: CanRead\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: CanRead\n  nameWithType: UnmanagedMemoryStream.CanRead\n  fullName: UnmanagedMemoryStream.CanRead\n  type: Property\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Gets a value indicating whether a stream supports reading.\n  remarks: This property indicates whether the current stream object supports reading.\n  example:\n  - \"The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class. A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class. In this example, an <xref:System.IO.UnmanagedMemoryStream> object is passed to a method which checks the <xref:System.IO.UnmanagedMemoryStream.CanRead%2A> property before attempting to display the contents to the console.  \\n  \\n [!code-csharp[System.IO.UnmanagedMemoryStream_Example#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UnmanagedMemoryStream_Example/cs/program.cs#00)]\"\n  syntax:\n    content: public override bool CanRead { get; }\n    return:\n      type: System.Boolean\n      description: '`false` if the object was created by a constructor with an <code>access</code> parameter that did not include reading the stream and if the stream is closed; otherwise, `true`.'\n  overload: System.IO.UnmanagedMemoryStream.CanRead*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.CanSeek\n  commentId: P:System.IO.UnmanagedMemoryStream.CanSeek\n  id: CanSeek\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: CanSeek\n  nameWithType: UnmanagedMemoryStream.CanSeek\n  fullName: UnmanagedMemoryStream.CanSeek\n  type: Property\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Gets a value indicating whether a stream supports seeking.\n  remarks: This property indicates whether the current stream object supports seeking.\n  syntax:\n    content: public override bool CanSeek { get; }\n    return:\n      type: System.Boolean\n      description: '`false` if the stream is closed; otherwise, `true`.'\n  overload: System.IO.UnmanagedMemoryStream.CanSeek*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.CanWrite\n  commentId: P:System.IO.UnmanagedMemoryStream.CanWrite\n  id: CanWrite\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: CanWrite\n  nameWithType: UnmanagedMemoryStream.CanWrite\n  fullName: UnmanagedMemoryStream.CanWrite\n  type: Property\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Gets a value indicating whether a stream supports writing.\n  remarks: This property indicates whether the current stream object supports writing.\n  example:\n  - \"The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class. A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class. In this example, an <xref:System.IO.UnmanagedMemoryStream> object is passed to a method which checks the <xref:System.IO.UnmanagedMemoryStream.CanWrite%2A> property before attempting to write the data to the stream.  \\n  \\n [!code-csharp[System.IO.UnmanagedMemoryStream_Example#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UnmanagedMemoryStream_Example/cs/program.cs#00)]\"\n  syntax:\n    content: public override bool CanWrite { get; }\n    return:\n      type: System.Boolean\n      description: '`false` if the object was created by a constructor with an <code>access</code> parameter value that supports writing or was created by a constructor that had no parameters, or if the stream is closed; otherwise, `true`.'\n  overload: System.IO.UnmanagedMemoryStream.CanWrite*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.Capacity\n  commentId: P:System.IO.UnmanagedMemoryStream.Capacity\n  id: Capacity\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: Capacity\n  nameWithType: UnmanagedMemoryStream.Capacity\n  fullName: UnmanagedMemoryStream.Capacity\n  type: Property\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Gets the stream length (size) or the total amount of memory assigned to a stream (capacity).\n  remarks: This property returns the `capacity` value provided to the constructor. If no `capacity` value was specified when the stream was initialized, this property returns the stream length.\n  syntax:\n    content: public long Capacity { get; }\n    return:\n      type: System.Int64\n      description: The size or capacity of the stream.\n  overload: System.IO.UnmanagedMemoryStream.Capacity*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)\n  commentId: M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: Dispose(Boolean)\n  nameWithType: UnmanagedMemoryStream.Dispose(Boolean)\n  fullName: UnmanagedMemoryStream.Dispose(Boolean)\n  type: Method\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Releases the unmanaged resources used by the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> and optionally releases the managed resources.\n  remarks: \"This method is called by the public <xref:System.ComponentModel.Component.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. <xref:System.ComponentModel.Component.Dispose%2A> invokes the protected <xref:System.IO.UnmanagedMemoryStream.Dispose%2A> method with the `disposing` parameter set to `true`. <xref:System.Object.Finalize%2A> invokes <xref:System.IO.UnmanagedMemoryStream.Dispose%2A> with `disposing` set to `false`.  \\n  \\n When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.IO.UnmanagedMemoryStream> references. This method invokes the <xref:System.ComponentModel.Component.Dispose%2A> method of each referenced object.\"\n  syntax:\n    content: protected override void Dispose (bool disposing);\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: '`true` to release both managed and unmanaged resources; `false` to release only unmanaged resources.'\n  overload: System.IO.UnmanagedMemoryStream.Dispose*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.Flush\n  commentId: M:System.IO.UnmanagedMemoryStream.Flush\n  id: Flush\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: Flush()\n  nameWithType: UnmanagedMemoryStream.Flush()\n  fullName: UnmanagedMemoryStream.Flush()\n  type: Method\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Overrides the <xref href=\"System.IO.Stream.Flush\"></xref> method so that no action is performed.\n  remarks: This method performs no action for this class but is included as part of the <xref:System.IO.Stream> base class. Since any data is written to RAM, this method is redundant.\n  syntax:\n    content: public override void Flush ();\n    parameters: []\n  overload: System.IO.UnmanagedMemoryStream.Flush*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)\n  commentId: M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)\n  id: FlushAsync(System.Threading.CancellationToken)\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: FlushAsync(CancellationToken)\n  nameWithType: UnmanagedMemoryStream.FlushAsync(CancellationToken)\n  fullName: UnmanagedMemoryStream.FlushAsync(CancellationToken)\n  type: Method\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: \"Overrides the <xref href=\\\"System.IO.Stream.FlushAsync(System.Threading.CancellationToken)\\\"></xref> method so that the operation is cancelled if specified, but no other action is performed.  \\n  \\n Available starting in [!INCLUDE[net_2015](~/includes/net-2015-md.md)]\"\n  remarks: If the operation isn’t cancelled, the <xref:System.IO.UnmanagedMemoryStream> calls the <xref:System.IO.UnmanagedMemoryStream.Flush%2A> method, which means that no action performed.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous flush operation.\n  overload: System.IO.UnmanagedMemoryStream.FlushAsync*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  commentId: M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  id: Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: Initialize(SafeBuffer, Int64, Int64, FileAccess)\n  nameWithType: UnmanagedMemoryStream.Initialize(SafeBuffer, Int64, Int64, FileAccess)\n  fullName: UnmanagedMemoryStream.Initialize(SafeBuffer, Int64, Int64, FileAccess)\n  type: Method\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class in a safe buffer with a specified offset, length, and file access.\n  syntax:\n    content: protected void Initialize (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length, System.IO.FileAccess access);\n    parameters:\n    - id: buffer\n      type: System.Runtime.InteropServices.SafeBuffer\n      description: The buffer to contain the unmanaged memory stream.\n    - id: offset\n      type: System.Int64\n      description: The byte position in the buffer at which to start the unmanaged memory stream.\n    - id: length\n      type: System.Int64\n      description: The length of the unmanaged memory stream.\n    - id: access\n      type: System.IO.FileAccess\n      description: The mode of file access to the unmanaged memory stream.\n  overload: System.IO.UnmanagedMemoryStream.Initialize*\n  exceptions: []\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)\n  commentId: M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)\n  id: Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: Initialize(Byte*, Int64, Int64, FileAccess)\n  nameWithType: UnmanagedMemoryStream.Initialize(Byte*, Int64, Int64, FileAccess)\n  fullName: UnmanagedMemoryStream.Initialize(Byte*, Int64, Int64, FileAccess)\n  type: Method\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Initializes a new instance of the <xref href=\"System.IO.UnmanagedMemoryStream\"></xref> class by using a pointer to an unmanaged memory location.\n  remarks: This method is equivalent to the <xref:System.IO.UnmanagedMemoryStream.%23ctor%2A> constructor. It supports methods that need to initialize the pointer before setting stream variables and, therefore, cannot call the parameterized constructor. Such methods should use the default constructor, <xref:System.IO.UnmanagedMemoryStream.%23ctor>, initialize the pointer, and then invoke the <xref:System.IO.UnmanagedMemoryStream.Initialize%2A> method.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [System.Security.SecurityCritical]\n\n      protected void Initialize (byte* pointer, long length, long capacity, System.IO.FileAccess access);\n    parameters:\n    - id: pointer\n      type: System.Byte*\n      description: A pointer to an unmanaged memory location.\n    - id: length\n      type: System.Int64\n      description: The length of the memory to use.\n    - id: capacity\n      type: System.Int64\n      description: The total amount of memory assigned to the stream.\n    - id: access\n      type: System.IO.FileAccess\n      description: One of the <xref href=\"System.IO.FileAccess\"></xref> values.\n  overload: System.IO.UnmanagedMemoryStream.Initialize*\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: The user does not have the required permission.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>pointer</code> value is `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <code>length</code> value is less than zero.  \\n  \\n \\\\- or -  \\n  \\n The <code>capacity</code> value is less than zero.  \\n  \\n \\\\- or -  \\n  \\n The <code>length</code> value is large enough to cause an overflow.\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.Length\n  commentId: P:System.IO.UnmanagedMemoryStream.Length\n  id: Length\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: Length\n  nameWithType: UnmanagedMemoryStream.Length\n  fullName: UnmanagedMemoryStream.Length\n  type: Property\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Gets the length of the data in a stream.\n  remarks: If unchanged since the stream was initialized, this property returns the length value provided to the constructor. If changes to the stream have occurred, this property reflects any changes to the length of the data.\n  example:\n  - \"The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class. A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class.  \\n  \\n [!code-csharp[System.IO.UnmanagedMemoryStream_Example#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UnmanagedMemoryStream_Example/cs/program.cs#00)]\"\n  syntax:\n    content: public override long Length { get; }\n    return:\n      type: System.Int64\n      description: The length of the data in the stream.\n  overload: System.IO.UnmanagedMemoryStream.Length*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.Position\n  commentId: P:System.IO.UnmanagedMemoryStream.Position\n  id: Position\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: Position\n  nameWithType: UnmanagedMemoryStream.Position\n  fullName: UnmanagedMemoryStream.Position\n  type: Property\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Gets or sets the current position in a stream.\n  remarks: \"When a stream is initialized, this property is set to zero.  \\n  \\n Although you can set the position of the stream beyond the stream's capacity, you will not be able to access that area using the <xref:System.IO.UnmanagedMemoryStream.Read%2A> and <xref:System.IO.UnmanagedMemoryStream.Write%2A> methods. <xref:System.IO.UnmanagedMemoryStream.Read%2A> will return 0 and <xref:System.IO.UnmanagedMemoryStream.Write%2A> will throw a <xref:System.NotSupportedException>. This support is primarily for design and code compatibility with basic stream operations.\"\n  syntax:\n    content: >-\n      [set: System.Security.SecuritySafeCritical]\n\n      public override long Position { get; set; }\n    return:\n      type: System.Int64\n      description: The current position in the stream.\n  overload: System.IO.UnmanagedMemoryStream.Position*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The position is set to a value that is less than zero, or the position is larger than <xref href=\"System.Int32.MaxValue\"></xref> or results in overflow when added to the current pointer.\n  attributes:\n  - type: 'set: System.Security.SecuritySafeCritical'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.PositionPointer\n  commentId: P:System.IO.UnmanagedMemoryStream.PositionPointer\n  id: PositionPointer\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: PositionPointer\n  nameWithType: UnmanagedMemoryStream.PositionPointer\n  fullName: UnmanagedMemoryStream.PositionPointer\n  type: Property\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Gets or sets a byte pointer to a stream based on the current position in the stream.\n  remarks: To return a pointer to the entire stream, set the <xref:System.IO.UnmanagedMemoryStream.Position%2A> property to zero, and then call this property.\n  syntax:\n    content: >-\n      [System.CLSCompliant(false)]\n\n      [get: System.Security.SecurityCritical]\n\n      [set: System.Security.SecurityCritical]\n\n      public byte* PositionPointer { get; set; }\n    return:\n      type: System.Byte*\n      description: A byte pointer.\n  overload: System.IO.UnmanagedMemoryStream.PositionPointer*\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: The current position is larger than the capacity of the stream.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The position is being set is not a valid position in the current stream.\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The pointer is being set to a lower value than the starting position of the stream.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: The stream was initialized for use with a <xref href=\"System.Runtime.InteropServices.SafeBuffer\"></xref>. The <xref href=\"System.IO.UnmanagedMemoryStream.PositionPointer\"></xref> property is valid only for streams that are initialized with a <xref href=\"System.Byte\"></xref> pointer.\n  attributes:\n  - type: System.CLSCompliantAttribute\n  - type: 'get: System.Security.SecurityCritical'\n  - type: 'set: System.Security.SecurityCritical'\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)\n  id: Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: Read(Byte[], Int32, Int32)\n  nameWithType: UnmanagedMemoryStream.Read(Byte[], Int32, Int32)\n  fullName: UnmanagedMemoryStream.Read(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Reads the specified number of bytes into the specified array.\n  remarks: \"The `offset` parameter gives the offset of the byte in the `array` parameter (the buffer index) at which to begin reading, and the `count` parameter gives the maximum number of bytes to be read from this stream. The returned value is the actual number of bytes read, or zero if the end of the stream is reached. If the read operation is successful, the current position of the stream is advanced by the number of bytes read. If an exception occurs, the current position of the stream is unchanged.  \\n  \\n The <xref:System.IO.UnmanagedMemoryStream.Read%2A> method returns zero only after reaching the end of the stream. Otherwise, <xref:System.IO.UnmanagedMemoryStream.Read%2A> always reads at least one byte from the stream before returning. If no data is available from the stream upon a call to <xref:System.IO.UnmanagedMemoryStream.Read%2A>, the method will block until at least one byte of data can be returned. An implementation is free to return fewer bytes than requested even if the end of the stream has not been reached.\"\n  example:\n  - \"The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class.  A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class.  \\n  \\n [!code-csharp[System.IO.UnmanagedMemoryStream#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UnmanagedMemoryStream/cs/sample.cs#1)]\"\n  syntax:\n    content: public override int Read (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: When this method returns, contains the specified byte array with the values between <code>offset</code> and (<code>offset</code> + <code>count</code> - 1) replaced by the bytes read from the current source. This parameter is passed uninitialized.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in <code>buffer</code> at which to begin storing the data read from the current stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to read from the current stream.\n    return:\n      type: System.Int32\n      description: The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.\n  overload: System.IO.UnmanagedMemoryStream.Read*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The underlying memory does not support reading.  \\n  \\n \\\\- or -  \\n  \\n The <xref href=\\\"System.IO.UnmanagedMemoryStream.CanRead\\\"></xref> property is set to `false`.\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>buffer</code> parameter is set to `null`.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The <code>offset</code> parameter is less than zero.  \\n  \\n \\\\- or -  \\n  \\n The <code>count</code> parameter is less than zero.\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The length of the buffer array minus the <code>offset</code> parameter is less than the <code>count</code> parameter.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: UnmanagedMemoryStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: UnmanagedMemoryStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: \"Asynchronously reads the specified number of bytes into the specified array.  \\n  \\n Available starting in [!INCLUDE[net_2015](~/includes/net-2015-md.md)]\"\n  remarks: If an exception occurs during the read operation, it will be set as the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName> of the property of the returned task.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write the data into.\n    - id: offset\n      type: System.Int32\n      description: The byte offset in <code>buffer</code> at which to begin writing data from the stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to read.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task{System.Int32}\n      description: A task that represents the asynchronous read operation. The value of the <code>TResult</code> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.\n  overload: System.IO.UnmanagedMemoryStream.ReadAsync*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.ReadByte\n  commentId: M:System.IO.UnmanagedMemoryStream.ReadByte\n  id: ReadByte\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: ReadByte()\n  nameWithType: UnmanagedMemoryStream.ReadByte()\n  fullName: UnmanagedMemoryStream.ReadByte()\n  type: Method\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Reads a byte from a stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.\n  remarks: Use this method to return integer values from the stream.\n  example:\n  - \"The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class. A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class. In this example, an <xref:System.IO.UnmanagedMemoryStream> object is passed to a method which checks the <xref:System.IO.UnmanagedMemoryStream.CanRead%2A> property before attempting to read and display the contents to the console.  \\n  \\n [!code-csharp[System.IO.UnmanagedMemoryStream_Example#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UnmanagedMemoryStream_Example/cs/program.cs#00)]\"\n  syntax:\n    content: public override int ReadByte ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The unsigned byte cast to an <xref href=\"System.Int32\"></xref> object, or -1 if at the end of the stream.\n  overload: System.IO.UnmanagedMemoryStream.ReadByte*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The underlying memory does not support reading.  \\n  \\n \\\\- or -  \\n  \\n The current position is at the end of the stream.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)\n  commentId: M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)\n  id: Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: Seek(Int64, SeekOrigin)\n  nameWithType: UnmanagedMemoryStream.Seek(Int64, SeekOrigin)\n  fullName: UnmanagedMemoryStream.Seek(Int64, SeekOrigin)\n  type: Method\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Sets the current position of the current stream to the given value.\n  remarks: For more information about seeking, see <xref:System.IO.FileStream.Seek%2A>.\n  syntax:\n    content: public override long Seek (long offset, System.IO.SeekOrigin loc);\n    parameters:\n    - id: offset\n      type: System.Int64\n      description: The point relative to <code>origin</code> to begin seeking from.\n    - id: loc\n      type: System.IO.SeekOrigin\n      description: Specifies the beginning, the end, or the current position as a reference point for <code>origin</code>, using a value of type <xref href=\"System.IO.SeekOrigin\"></xref>.\n    return:\n      type: System.Int64\n      description: The new position in the stream.\n  overload: System.IO.UnmanagedMemoryStream.Seek*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An attempt was made to seek before the beginning of the stream.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: The <code>offset</code> value is larger than the maximum size of the stream.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>loc</code> is invalid.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.SetLength(System.Int64)\n  commentId: M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)\n  id: SetLength(System.Int64)\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: SetLength(Int64)\n  nameWithType: UnmanagedMemoryStream.SetLength(Int64)\n  fullName: UnmanagedMemoryStream.SetLength(Int64)\n  type: Method\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Sets the length of a stream to a specified value.\n  remarks: \"If the given value is less than the current length of the stream, the stream is truncated. If the given value is larger than the current length of the stream, the stream is expanded. If the stream is expanded, the contents of the stream between the old and the new lengths are undefined.  \\n  \\n A stream must support both writing and seeking for <xref:System.IO.UnmanagedMemoryStream.SetLength%2A> to work.\"\n  syntax:\n    content: public override void SetLength (long value);\n    parameters:\n    - id: value\n      type: System.Int64\n      description: The length of the stream.\n  overload: System.IO.UnmanagedMemoryStream.SetLength*\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error has occurred.\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The underlying memory does not support writing.  \\n  \\n \\\\- or -  \\n  \\n An attempt is made to write to the stream and the <xref href=\\\"System.IO.UnmanagedMemoryStream.CanWrite\\\"></xref> property is `false`.\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"The specified <code>value</code> exceeds the capacity of the stream.  \\n  \\n \\\\- or -  \\n  \\n The specified <code>value</code> is negative.\"\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)\n  id: Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: Write(Byte[], Int32, Int32)\n  nameWithType: UnmanagedMemoryStream.Write(Byte[], Int32, Int32)\n  fullName: UnmanagedMemoryStream.Write(Byte[], Int32, Int32)\n  type: Method\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Writes a block of bytes to the current stream using data from a buffer.\n  remarks: Writing occurs at the current position in the stream.\n  example:\n  - \"The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class.  A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class.  \\n  \\n [!code-csharp[System.IO.UnmanagedMemoryStream#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UnmanagedMemoryStream/cs/sample.cs#1)]\"\n  syntax:\n    content: public override void Write (byte[] buffer, int offset, int count);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The byte array from which to copy bytes to the current stream.\n    - id: offset\n      type: System.Int32\n      description: The offset in the buffer at which to begin copying bytes to the current stream.\n    - id: count\n      type: System.Int32\n      description: The number of bytes to write to the current stream.\n  overload: System.IO.UnmanagedMemoryStream.Write*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The underlying memory does not support writing.  \\n  \\n \\\\- or -  \\n  \\n An attempt is made to write to the stream and the <xref href=\\\"System.IO.UnmanagedMemoryStream.CanWrite\\\"></xref> property is `false`.  \\n  \\n \\\\- or -  \\n  \\n The <code>count</code> value is greater than the capacity of the stream.  \\n  \\n \\\\- or -  \\n  \\n The position is at the end of the stream capacity.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: An I/O error occurs.\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: One of the specified parameters is less than zero.\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: The <code>offset</code> parameter minus the length of the <code>buffer</code> parameter is less than the <code>count</code> parameter.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>buffer</code> parameter is `null`.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: UnmanagedMemoryStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: UnmanagedMemoryStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  type: Method\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: \"Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.  \\n  \\n Available starting in [!INCLUDE[net_2015](~/includes/net-2015-md.md)]\"\n  remarks: If an exception occurs during the write operation, it will be set as the <xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName> of the property of the returned task.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(false)]\n\n      public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: The buffer to write data from.\n    - id: offset\n      type: System.Int32\n      description: The zero-based byte offset in <code>buffer</code> from which to begin copying bytes to the stream.\n    - id: count\n      type: System.Int32\n      description: The maximum number of bytes to write.\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\"></xref>.\n    return:\n      type: System.Threading.Tasks.Task\n      description: A task that represents the asynchronous write operation.\n  overload: System.IO.UnmanagedMemoryStream.WriteAsync*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)\n  commentId: M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)\n  id: WriteByte(System.Byte)\n  parent: System.IO.UnmanagedMemoryStream\n  langs:\n  - csharp\n  name: WriteByte(Byte)\n  nameWithType: UnmanagedMemoryStream.WriteByte(Byte)\n  fullName: UnmanagedMemoryStream.WriteByte(Byte)\n  type: Method\n  assemblies:\n  - System.IO.UnmanagedMemoryStream\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.IO\n  summary: Writes a byte to the current position in the file stream.\n  remarks: ''\n  example:\n  - \"The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class. A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class. In this example, an <xref:System.IO.UnmanagedMemoryStream> object is passed to a method which checks the <xref:System.IO.UnmanagedMemoryStream.CanWrite%2A> property before attempting to write the data to the stream.  \\n  \\n [!code-csharp[System.IO.UnmanagedMemoryStream_Example#00](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.UnmanagedMemoryStream_Example/cs/program.cs#00)]\"\n  syntax:\n    content: public override void WriteByte (byte value);\n    parameters:\n    - id: value\n      type: System.Byte\n      description: A byte value written to the stream.\n  overload: System.IO.UnmanagedMemoryStream.WriteByte*\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: The stream is closed.\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"The underlying memory does not support writing.  \\n  \\n \\\\- or -  \\n  \\n An attempt is made to write to the stream and the <xref href=\\\"System.IO.UnmanagedMemoryStream.CanWrite\\\"></xref> property is `false`.  \\n  \\n \\\\- or -  \\n  \\n The current position is at the end of the capacity of the stream.\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: The supplied <code>value</code> causes the stream exceed its maximum capacity.\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.Security.SecurityException\n  parent: System.Security\n  isExternal: false\n  name: SecurityException\n  nameWithType: SecurityException\n  fullName: System.Security.SecurityException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  parent: System\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  parent: System\n  isExternal: false\n  name: ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n- uid: System.IndexOutOfRangeException\n  parent: System\n  isExternal: false\n  name: IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  nameWithType: IOException\n  fullName: System.IO.IOException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  nameWithType: NotSupportedException\n  fullName: System.NotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.IO.UnmanagedMemoryStream.#ctor\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: UnmanagedMemoryStream()\n  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream()\n  fullName: UnmanagedMemoryStream.UnmanagedMemoryStream()\n- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: UnmanagedMemoryStream(Byte*, Int64)\n  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*, Int64)\n  fullName: UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*, Int64)\n- uid: System.Byte\n  name: Byte\n  nameWithType: Byte\n  fullName: System.Byte\n- uid: System.Byte*\n  parent: System\n  isExternal: false\n  name: Byte*\n  nameWithType: Byte*\n  fullName: System.Byte*\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  nameWithType: Int64\n  fullName: System.Int64\n- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: UnmanagedMemoryStream(SafeBuffer, Int64, Int64)\n  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer, Int64, Int64)\n  fullName: UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer, Int64, Int64)\n- uid: System.Runtime.InteropServices.SafeBuffer\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: SafeBuffer\n  nameWithType: SafeBuffer\n  fullName: System.Runtime.InteropServices.SafeBuffer\n- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: UnmanagedMemoryStream(Byte*, Int64, Int64, FileAccess)\n  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*, Int64, Int64, FileAccess)\n  fullName: UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*, Int64, Int64, FileAccess)\n- uid: System.IO.FileAccess\n  parent: System.IO\n  isExternal: false\n  name: FileAccess\n  nameWithType: FileAccess\n  fullName: System.IO.FileAccess\n- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: UnmanagedMemoryStream(SafeBuffer, Int64, Int64, FileAccess)\n  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer, Int64, Int64, FileAccess)\n  fullName: UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer, Int64, Int64, FileAccess)\n- uid: System.IO.UnmanagedMemoryStream.CanRead\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: CanRead\n  nameWithType: UnmanagedMemoryStream.CanRead\n  fullName: UnmanagedMemoryStream.CanRead\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.IO.UnmanagedMemoryStream.CanSeek\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: UnmanagedMemoryStream.CanSeek\n  fullName: UnmanagedMemoryStream.CanSeek\n- uid: System.IO.UnmanagedMemoryStream.CanWrite\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: UnmanagedMemoryStream.CanWrite\n  fullName: UnmanagedMemoryStream.CanWrite\n- uid: System.IO.UnmanagedMemoryStream.Capacity\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Capacity\n  nameWithType: UnmanagedMemoryStream.Capacity\n  fullName: UnmanagedMemoryStream.Capacity\n- uid: System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Dispose(Boolean)\n  nameWithType: UnmanagedMemoryStream.Dispose(Boolean)\n  fullName: UnmanagedMemoryStream.Dispose(Boolean)\n- uid: System.IO.UnmanagedMemoryStream.Flush\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Flush()\n  nameWithType: UnmanagedMemoryStream.Flush()\n  fullName: UnmanagedMemoryStream.Flush()\n- uid: System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: FlushAsync(CancellationToken)\n  nameWithType: UnmanagedMemoryStream.FlushAsync(CancellationToken)\n  fullName: UnmanagedMemoryStream.FlushAsync(CancellationToken)\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  nameWithType: Task\n  fullName: System.Threading.Tasks.Task\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  nameWithType: CancellationToken\n  fullName: System.Threading.CancellationToken\n- uid: System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Initialize(SafeBuffer, Int64, Int64, FileAccess)\n  nameWithType: UnmanagedMemoryStream.Initialize(SafeBuffer, Int64, Int64, FileAccess)\n  fullName: UnmanagedMemoryStream.Initialize(SafeBuffer, Int64, Int64, FileAccess)\n- uid: System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Initialize(Byte*, Int64, Int64, FileAccess)\n  nameWithType: UnmanagedMemoryStream.Initialize(Byte*, Int64, Int64, FileAccess)\n  fullName: UnmanagedMemoryStream.Initialize(Byte*, Int64, Int64, FileAccess)\n- uid: System.IO.UnmanagedMemoryStream.Length\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Length\n  nameWithType: UnmanagedMemoryStream.Length\n  fullName: UnmanagedMemoryStream.Length\n- uid: System.IO.UnmanagedMemoryStream.Position\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Position\n  nameWithType: UnmanagedMemoryStream.Position\n  fullName: UnmanagedMemoryStream.Position\n- uid: System.IO.UnmanagedMemoryStream.PositionPointer\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: PositionPointer\n  nameWithType: UnmanagedMemoryStream.PositionPointer\n  fullName: UnmanagedMemoryStream.PositionPointer\n- uid: System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Read(Byte[], Int32, Int32)\n  nameWithType: UnmanagedMemoryStream.Read(Byte[], Int32, Int32)\n  fullName: UnmanagedMemoryStream.Read(Byte[], Int32, Int32)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Byte[]\n  parent: System\n  isExternal: false\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: UnmanagedMemoryStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: UnmanagedMemoryStream.ReadAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n- uid: System.Threading.Tasks.Task{System.Int32}\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task<Int32>\n  nameWithType: Task<Int32>\n  fullName: System.Threading.Tasks.Task<System.Int32>\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    nameWithType: Int32\n    fullName: System.Int32\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.IO.UnmanagedMemoryStream.ReadByte\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: ReadByte()\n  nameWithType: UnmanagedMemoryStream.ReadByte()\n  fullName: UnmanagedMemoryStream.ReadByte()\n- uid: System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Seek(Int64, SeekOrigin)\n  nameWithType: UnmanagedMemoryStream.Seek(Int64, SeekOrigin)\n  fullName: UnmanagedMemoryStream.Seek(Int64, SeekOrigin)\n- uid: System.IO.SeekOrigin\n  parent: System.IO\n  isExternal: false\n  name: SeekOrigin\n  nameWithType: SeekOrigin\n  fullName: System.IO.SeekOrigin\n- uid: System.IO.UnmanagedMemoryStream.SetLength(System.Int64)\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: SetLength(Int64)\n  nameWithType: UnmanagedMemoryStream.SetLength(Int64)\n  fullName: UnmanagedMemoryStream.SetLength(Int64)\n- uid: System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Write(Byte[], Int32, Int32)\n  nameWithType: UnmanagedMemoryStream.Write(Byte[], Int32, Int32)\n  fullName: UnmanagedMemoryStream.Write(Byte[], Int32, Int32)\n- uid: System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  nameWithType: UnmanagedMemoryStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n  fullName: UnmanagedMemoryStream.WriteAsync(Byte[], Int32, Int32, CancellationToken)\n- uid: System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: WriteByte(Byte)\n  nameWithType: UnmanagedMemoryStream.WriteByte(Byte)\n  fullName: UnmanagedMemoryStream.WriteByte(Byte)\n- uid: System.IO.UnmanagedMemoryStream.#ctor*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: UnmanagedMemoryStream\n  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream\n  fullName: UnmanagedMemoryStream.UnmanagedMemoryStream\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.CanRead*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: CanRead\n  nameWithType: UnmanagedMemoryStream.CanRead\n  fullName: UnmanagedMemoryStream.CanRead\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.CanSeek*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: CanSeek\n  nameWithType: UnmanagedMemoryStream.CanSeek\n  fullName: UnmanagedMemoryStream.CanSeek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.CanWrite*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: CanWrite\n  nameWithType: UnmanagedMemoryStream.CanWrite\n  fullName: UnmanagedMemoryStream.CanWrite\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.Capacity*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Capacity\n  nameWithType: UnmanagedMemoryStream.Capacity\n  fullName: UnmanagedMemoryStream.Capacity\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.Dispose*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Dispose\n  nameWithType: UnmanagedMemoryStream.Dispose\n  fullName: UnmanagedMemoryStream.Dispose\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.Flush*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Flush\n  nameWithType: UnmanagedMemoryStream.Flush\n  fullName: UnmanagedMemoryStream.Flush\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.FlushAsync*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: FlushAsync\n  nameWithType: UnmanagedMemoryStream.FlushAsync\n  fullName: UnmanagedMemoryStream.FlushAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.Initialize*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Initialize\n  nameWithType: UnmanagedMemoryStream.Initialize\n  fullName: UnmanagedMemoryStream.Initialize\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.Length*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Length\n  nameWithType: UnmanagedMemoryStream.Length\n  fullName: UnmanagedMemoryStream.Length\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.Position*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Position\n  nameWithType: UnmanagedMemoryStream.Position\n  fullName: UnmanagedMemoryStream.Position\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.PositionPointer*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: PositionPointer\n  nameWithType: UnmanagedMemoryStream.PositionPointer\n  fullName: UnmanagedMemoryStream.PositionPointer\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.Read*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Read\n  nameWithType: UnmanagedMemoryStream.Read\n  fullName: UnmanagedMemoryStream.Read\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.ReadAsync*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: ReadAsync\n  nameWithType: UnmanagedMemoryStream.ReadAsync\n  fullName: UnmanagedMemoryStream.ReadAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.ReadByte*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: ReadByte\n  nameWithType: UnmanagedMemoryStream.ReadByte\n  fullName: UnmanagedMemoryStream.ReadByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.Seek*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Seek\n  nameWithType: UnmanagedMemoryStream.Seek\n  fullName: UnmanagedMemoryStream.Seek\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.SetLength*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: SetLength\n  nameWithType: UnmanagedMemoryStream.SetLength\n  fullName: UnmanagedMemoryStream.SetLength\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.Write*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: Write\n  nameWithType: UnmanagedMemoryStream.Write\n  fullName: UnmanagedMemoryStream.Write\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.WriteAsync*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: WriteAsync\n  nameWithType: UnmanagedMemoryStream.WriteAsync\n  fullName: UnmanagedMemoryStream.WriteAsync\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.2\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.IO.UnmanagedMemoryStream.WriteByte*\n  parent: System.IO.UnmanagedMemoryStream\n  isExternal: false\n  name: WriteByte\n  nameWithType: UnmanagedMemoryStream.WriteByte\n  fullName: UnmanagedMemoryStream.WriteByte\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.IO/UnmanagedMemoryStream.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.Stream\n  isExternal: false\n  name: BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: Stream.BeginRead(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)\n  parent: System.IO.Stream\n  isExternal: false\n  name: BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  nameWithType: Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n  fullName: Stream.BeginWrite(Byte[], Int32, Int32, AsyncCallback, Object)\n- uid: System.IO.Stream.CanTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: CanTimeout\n  nameWithType: Stream.CanTimeout\n  fullName: Stream.CanTimeout\n- uid: System.IO.Stream.Close\n  parent: System.IO.Stream\n  isExternal: false\n  name: Close()\n  nameWithType: Stream.Close()\n  fullName: Stream.Close()\n- uid: System.IO.Stream.CopyTo(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream, Int32)\n  nameWithType: Stream.CopyTo(Stream, Int32)\n  fullName: Stream.CopyTo(Stream, Int32)\n- uid: System.IO.Stream.CopyTo(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyTo(Stream)\n  nameWithType: Stream.CopyTo(Stream)\n  fullName: Stream.CopyTo(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream)\n  nameWithType: Stream.CopyToAsync(Stream)\n  fullName: Stream.CopyToAsync(Stream)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32)\n  nameWithType: Stream.CopyToAsync(Stream, Int32)\n  fullName: Stream.CopyToAsync(Stream, Int32)\n- uid: System.IO.Stream.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)\n  parent: System.IO.Stream\n  isExternal: false\n  name: CopyToAsync(Stream, Int32, CancellationToken)\n  nameWithType: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n  fullName: Stream.CopyToAsync(Stream, Int32, CancellationToken)\n- uid: System.IO.Stream.CreateWaitHandle\n  parent: System.IO.Stream\n  isExternal: false\n  name: CreateWaitHandle()\n  nameWithType: Stream.CreateWaitHandle()\n  fullName: Stream.CreateWaitHandle()\n- uid: System.IO.Stream.Dispose\n  parent: System.IO.Stream\n  isExternal: false\n  name: Dispose()\n  nameWithType: Stream.Dispose()\n  fullName: Stream.Dispose()\n- uid: System.IO.Stream.EndRead(System.IAsyncResult)\n  parent: System.IO.Stream\n  isExternal: false\n  name: EndRead(IAsyncResult)\n  nameWithType: Stream.EndRead(IAsyncResult)\n  fullName: Stream.EndRead(IAsyncResult)\n- uid: System.IO.Stream.EndWrite(System.IAsyncResult)\n  parent: System.IO.Stream\n  isExternal: false\n  name: EndWrite(IAsyncResult)\n  nameWithType: Stream.EndWrite(IAsyncResult)\n  fullName: Stream.EndWrite(IAsyncResult)\n- uid: System.IO.Stream.FlushAsync\n  parent: System.IO.Stream\n  isExternal: false\n  name: FlushAsync()\n  nameWithType: Stream.FlushAsync()\n  fullName: Stream.FlushAsync()\n- uid: System.IO.Stream.Null\n  parent: System.IO.Stream\n  isExternal: false\n  name: \"Null\"\n  nameWithType: Stream.Null\n  fullName: Stream.Null\n- uid: System.IO.Stream.ObjectInvariant\n  parent: System.IO.Stream\n  isExternal: false\n  name: ObjectInvariant()\n  nameWithType: Stream.ObjectInvariant()\n  fullName: Stream.ObjectInvariant()\n- uid: System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.ReadAsync(Byte[], Int32, Int32)\n  fullName: Stream.ReadAsync(Byte[], Int32, Int32)\n- uid: System.IO.Stream.ReadTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: ReadTimeout\n  nameWithType: Stream.ReadTimeout\n  fullName: Stream.ReadTimeout\n- uid: System.IO.Stream.Synchronized(System.IO.Stream)\n  parent: System.IO.Stream\n  isExternal: false\n  name: Synchronized(Stream)\n  nameWithType: Stream.Synchronized(Stream)\n  fullName: Stream.Synchronized(Stream)\n- uid: System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteAsync(Byte[], Int32, Int32)\n  nameWithType: Stream.WriteAsync(Byte[], Int32, Int32)\n  fullName: Stream.WriteAsync(Byte[], Int32, Int32)\n- uid: System.IO.Stream.WriteTimeout\n  parent: System.IO.Stream\n  isExternal: false\n  name: WriteTimeout\n  nameWithType: Stream.WriteTimeout\n  fullName: Stream.WriteTimeout\n"}