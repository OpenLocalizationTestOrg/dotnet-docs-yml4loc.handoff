{"nodes":[{"content":"Represents a workflow instance.","nodes":[{"pos":[0,31],"content":"Represents a workflow instance.","nodes":[{"content":"Represents a workflow instance.","pos":[0,31]}]}],"pos":[1781,1813],"yaml":true},{"content":"> [!NOTE]\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \n  \n The <xref:System.Workflow.Runtime.WorkflowInstance> class exposes methods and properties that can be used to control the execution of a workflow instance; it is essentially a proxy to the actual workflow instance used by the workflow runtime engine. A host or a service can instruct the workflow runtime engine to perform actions on a workflow instance by calling the appropriate methods that are contained in the <xref:System.Workflow.Runtime.WorkflowInstance> class.  If the requested action is not valid, for example, if the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> on a workflow instance that has already completed, the workflow runtime engine will raise an appropriate exception.  \n  \n> [!NOTE]\n>  If a workflow instance becomes unresponsive because a call on the host application does not return, the only way to recover the instance is to restart the runtime. However, if the instance has been forcibly unloaded, aborted, or suspended, it can be continued by calling the <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName> method.","nodes":[{"pos":[2,78],"content":"[!NOTE]\n [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]","leadings":["","> "],"nodes":[]},{"pos":[85,795],"content":"The <xref:System.Workflow.Runtime.WorkflowInstance> class exposes methods and properties that can be used to control the execution of a workflow instance; it is essentially a proxy to the actual workflow instance used by the workflow runtime engine. A host or a service can instruct the workflow runtime engine to perform actions on a workflow instance by calling the appropriate methods that are contained in the <xref:System.Workflow.Runtime.WorkflowInstance> class.  If the requested action is not valid, for example, if the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> on a workflow instance that has already completed, the workflow runtime engine will raise an appropriate exception.","nodes":[{"content":"The <xref:System.Workflow.Runtime.WorkflowInstance> class exposes methods and properties that can be used to control the execution of a workflow instance; it is essentially a proxy to the actual workflow instance used by the workflow runtime engine. A host or a service can instruct the workflow runtime engine to perform actions on a workflow instance by calling the appropriate methods that are contained in the <xref:System.Workflow.Runtime.WorkflowInstance> class.  If the requested action is not valid, for example, if the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> on a workflow instance that has already completed, the workflow runtime engine will raise an appropriate exception.","pos":[0,710],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> class exposes methods and properties that can be used to control the execution of a workflow instance; it is essentially a proxy to the actual workflow instance used by the workflow runtime engine.","pos":[0,249],"source":"The <xref:System.Workflow.Runtime.WorkflowInstance> class exposes methods and properties that can be used to control the execution of a workflow instance; it is essentially a proxy to the actual workflow instance used by the workflow runtime engine."},{"content":"A host or a service can instruct the workflow runtime engine to perform actions on a workflow instance by calling the appropriate methods that are contained in the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> class.","pos":[250,468],"source":" A host or a service can instruct the workflow runtime engine to perform actions on a workflow instance by calling the appropriate methods that are contained in the <xref:System.Workflow.Runtime.WorkflowInstance> class."},{"content":"If the requested action is not valid, for example, if the host calls <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Load%2A&gt;</ph> on a workflow instance that has already completed, the workflow runtime engine will raise an appropriate exception.","pos":[470,710],"source":"  If the requested action is not valid, for example, if the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> on a workflow instance that has already completed, the workflow runtime engine will raise an appropriate exception."}]}]},{"pos":[803,1179],"content":"[!NOTE]\n If a workflow instance becomes unresponsive because a call on the host application does not return, the only way to recover the instance is to restart the runtime. However, if the instance has been forcibly unloaded, aborted, or suspended, it can be continued by calling the <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName> method.","leadings":["","> "],"nodes":[{"content":" If a workflow instance becomes unresponsive because a call on the host application does not return, the only way to recover the instance is to restart the runtime. However, if the instance has been forcibly unloaded, aborted, or suspended, it can be continued by calling the <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName> method.","pos":[8,374],"nodes":[{"content":"If a workflow instance becomes unresponsive because a call on the host application does not return, the only way to recover the instance is to restart the runtime.","pos":[1,164]},{"content":"However, if the instance has been forcibly unloaded, aborted, or suspended, it can be continued by calling the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName&gt;</ph> method.","pos":[165,366],"source":" However, if the instance has been forcibly unloaded, aborted, or suspended, it can be continued by calling the <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName> method."}]}]}],"pos":[1824,3012],"yaml":true,"extradata":"MT"},{"content":"Aborts the workflow instance.","nodes":[{"pos":[0,29],"content":"Aborts the workflow instance.","nodes":[{"content":"Aborts the workflow instance.","pos":[0,29]}]}],"pos":[5600,5630],"yaml":true},{"content":"The workflow instance is aborted in a synchronous manner; that is, the method returns after the workflow instance has been aborted. The workflow runtime engine invalidates the workflow instance in memory and clears the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>. If a persistence service was used by your workflow instance, all work performed since the last persistence point is thrown away. After it aborts the workflow instance, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> event. You can call <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> to reload the workflow instance and start from its last persistence point.  \n  \n `Abort` is different from <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> in that while `Abort` simply clears the in-memory workflow instance and can be restarted from the last persistence point, Terminate clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory. For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination. You will not be able to reload the workflow instance from a previously stored persistence point.","nodes":[{"pos":[0,710],"content":"The workflow instance is aborted in a synchronous manner; that is, the method returns after the workflow instance has been aborted. The workflow runtime engine invalidates the workflow instance in memory and clears the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>. If a persistence service was used by your workflow instance, all work performed since the last persistence point is thrown away. After it aborts the workflow instance, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> event. You can call <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> to reload the workflow instance and start from its last persistence point.","nodes":[{"content":"The workflow instance is aborted in a synchronous manner; that is, the method returns after the workflow instance has been aborted. The workflow runtime engine invalidates the workflow instance in memory and clears the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>. If a persistence service was used by your workflow instance, all work performed since the last persistence point is thrown away. After it aborts the workflow instance, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> event. You can call <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> to reload the workflow instance and start from its last persistence point.","pos":[0,710],"nodes":[{"content":"The workflow instance is aborted in a synchronous manner; that is, the method returns after the workflow instance has been aborted.","pos":[0,131]},{"content":"The workflow runtime engine invalidates the workflow instance in memory and clears the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A&gt;</ph>.","pos":[132,283],"source":" The workflow runtime engine invalidates the workflow instance in memory and clears the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>."},{"content":"If a persistence service was used by your workflow instance, all work performed since the last persistence point is thrown away.","pos":[284,412]},{"content":"After it aborts the workflow instance, the workflow runtime engine raises the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted&gt;</ph> event.","pos":[413,560],"source":" After it aborts the workflow instance, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> event."},{"content":"You can call <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A&gt;</ph> to reload the workflow instance and start from its last persistence point.","pos":[561,710],"source":" You can call <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> to reload the workflow instance and start from its last persistence point."}]}]},{"pos":[717,1345],"content":"`Abort` is different from <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> in that while `Abort` simply clears the in-memory workflow instance and can be restarted from the last persistence point, Terminate clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory. For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination. You will not be able to reload the workflow instance from a previously stored persistence point.","nodes":[{"content":"<ph id=\"ph1\">`Abort`</ph> is different from <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A&gt;</ph> in that while <ph id=\"ph3\">`Abort`</ph> simply clears the in-memory workflow instance and can be restarted from the last persistence point, Terminate clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory.","pos":[0,341],"source":"`Abort` is different from <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> in that while `Abort` simply clears the in-memory workflow instance and can be restarted from the last persistence point, Terminate clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory."},{"content":"For the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService&gt;</ph>, this means that all state information for that workflow instance is deleted from the database upon termination.","pos":[342,531],"source":" For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination."},{"content":"You will not be able to reload the workflow instance from a previously stored persistence point.","pos":[532,628]}]}],"pos":[5641,6991],"yaml":true,"extradata":"MT"},{"content":"The workflow runtime engine is not running.","nodes":[{"pos":[0,43],"content":"The workflow runtime engine is not running.","nodes":[{"content":"The workflow runtime engine is not running.","pos":[0,43]}]}],"pos":[7562,7606],"yaml":true},{"content":"Applies changes to the workflow instance specified by the <xref href=\"System.Workflow.ComponentModel.WorkflowChanges\"></xref> object.","nodes":[{"pos":[0,133],"content":"Applies changes to the workflow instance specified by the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.WorkflowChanges\"&gt;&lt;/xref&gt;</ph> object.","source":"Applies changes to the workflow instance specified by the <xref href=\"System.Workflow.ComponentModel.WorkflowChanges\"></xref> object."}],"pos":[8782,8916],"yaml":true},{"content":"If the workflow instance is not already suspended, the workflow runtime engine temporarily suspends the instance before applying the changes.","nodes":[{"pos":[0,141],"content":"If the workflow instance is not already suspended, the workflow runtime engine temporarily suspends the instance before applying the changes.","nodes":[{"content":"If the workflow instance is not already suspended, the workflow runtime engine temporarily suspends the instance before applying the changes.","pos":[0,141]}]}],"pos":[8927,9069],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Workflow.ComponentModel.WorkflowChanges\"></xref> specifying dynamic updates for the workflow instance.","nodes":[{"pos":[0,123],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.WorkflowChanges\"&gt;&lt;/xref&gt;</ph> specifying dynamic updates for the workflow instance.","source":"A <xref href=\"System.Workflow.ComponentModel.WorkflowChanges\"></xref> specifying dynamic updates for the workflow instance."}],"pos":[9892,10016],"yaml":true},{"content":"The workflow runtime engine is not running.","nodes":[{"pos":[0,43],"content":"The workflow runtime engine is not running.","nodes":[{"content":"The workflow runtime engine is not running.","pos":[0,43]}]}],"pos":[10215,10259],"yaml":true},{"content":"Posts a message to the specified workflow queue synchronously.","nodes":[{"pos":[0,62],"content":"Posts a message to the specified workflow queue synchronously.","nodes":[{"content":"Posts a message to the specified workflow queue synchronously.","pos":[0,62]}]}],"pos":[11570,11633],"yaml":true},{"content":"Sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>. If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>. If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`.  \n  \n When using this method with a state machine workflow, you might get an exception with the message \"Queue '{0}' is not enabled.\" This happens when the current state of the state machine does not know how to handle a specific event. For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'.  \n  \n> [!NOTE]\n>  Messages are not guaranteed to be received by the workflow instance in the order that they were sent. For example, if receiving a message in an existing queue (Queue A) causes a workflow to create another queue (Queue B), which then listens for another message sent after the first message, it is possible that the second message will arrive first, and will not be received due to its queue not being created yet. To prevent this issue, the second message should not be sent until the presence of the second queue is verified (using <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>.)","nodes":[{"pos":[0,492],"content":"Sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>. If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>. If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`.","nodes":[{"content":"Sends the <ph id=\"ph1\">`item`</ph> to the specified <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowQueue&gt;</ph>.","pos":[0,79],"source":"Sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>."},{"content":"If you want to be notified when the message is delivered, you can implement <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> in your service and pass a <ph id=\"ph2\">`workItem`</ph> and an <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> object to <ph id=\"ph4\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A&gt;</ph>.","pos":[80,362],"source":" If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>."},{"content":"If you do not want such notification, you can pass a null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic) for <ph id=\"ph2\">`pendingWork`</ph> and <ph id=\"ph3\">`workItem`</ph>.","pos":[363,492],"source":" If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`."}]},{"pos":[499,974],"content":"When using this method with a state machine workflow, you might get an exception with the message \"Queue '{0}' is not enabled.\" This happens when the current state of the state machine does not know how to handle a specific event. For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'.","nodes":[{"content":"When using this method with a state machine workflow, you might get an exception with the message \"Queue '{0}' is not enabled.\" This happens when the current state of the state machine does not know how to handle a specific event. For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'.","pos":[0,475],"nodes":[{"content":"When using this method with a state machine workflow, you might get an exception with the message \"Queue '{0}' is not enabled.\"","pos":[0,127]},{"content":"This happens when the current state of the state machine does not know how to handle a specific event.","pos":[128,230]},{"content":"For example, when some state other than the current state contains the <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.EventDrivenActivity&gt;</ph> that contains the <ph id=\"ph2\">&lt;xref:System.Workflow.Activities.HandleExternalEventActivity&gt;</ph> that is represented by the queue '{0}'.","pos":[231,475],"source":" For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'."}]}]},{"pos":[982,1599],"content":"[!NOTE]\n Messages are not guaranteed to be received by the workflow instance in the order that they were sent. For example, if receiving a message in an existing queue (Queue A) causes a workflow to create another queue (Queue B), which then listens for another message sent after the first message, it is possible that the second message will arrive first, and will not be received due to its queue not being created yet. To prevent this issue, the second message should not be sent until the presence of the second queue is verified (using <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>.)","leadings":["","> "],"nodes":[{"content":" Messages are not guaranteed to be received by the workflow instance in the order that they were sent. For example, if receiving a message in an existing queue (Queue A) causes a workflow to create another queue (Queue B), which then listens for another message sent after the first message, it is possible that the second message will arrive first, and will not be received due to its queue not being created yet. To prevent this issue, the second message should not be sent until the presence of the second queue is verified (using <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>.)","pos":[8,615],"nodes":[{"content":"Messages are not guaranteed to be received by the workflow instance in the order that they were sent.","pos":[1,102]},{"content":"For example, if receiving a message in an existing queue (Queue A) causes a workflow to create another queue (Queue B), which then listens for another message sent after the first message, it is possible that the second message will arrive first, and will not be received due to its queue not being created yet.","pos":[103,414]},{"content":"To prevent this issue, the second message should not be sent until the presence of the second queue is verified (using <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A&gt;</ph>.)","pos":[415,607],"source":" To prevent this issue, the second message should not be sent until the presence of the second queue is verified (using <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>.)"}]}]}],"pos":[11644,13253],"yaml":true,"extradata":"MT"},{"content":"The name of the <xref href=\"System.Workflow.Runtime.WorkflowQueue\"></xref>.","nodes":[{"pos":[0,75],"content":"The name of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowQueue\"&gt;&lt;/xref&gt;</ph>.","source":"The name of the <xref href=\"System.Workflow.Runtime.WorkflowQueue\"></xref>."}],"pos":[14793,14869],"yaml":true},{"content":"The object to enqueue.","nodes":[{"pos":[0,22],"content":"The object to enqueue.","nodes":[{"content":"The object to enqueue.","pos":[0,22]}]}],"pos":[14929,14952],"yaml":true},{"content":"An <xref href=\"System.Workflow.Runtime.IPendingWork\"></xref> that allows the sender to be notified when <code>item</code> is delivered.","nodes":[{"pos":[0,135],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.IPendingWork\"&gt;&lt;/xref&gt;</ph> that allows the sender to be notified when <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> is delivered.","source":"An <xref href=\"System.Workflow.Runtime.IPendingWork\"></xref> that allows the sender to be notified when <code>item</code> is delivered."}],"pos":[15042,15178],"yaml":true},{"content":"An object to be passed to the <xref href=\"System.Workflow.Runtime.IPendingWork\"></xref> methods.","nodes":[{"pos":[0,96],"content":"An object to be passed to the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.IPendingWork\"&gt;&lt;/xref&gt;</ph> methods.","source":"An object to be passed to the <xref href=\"System.Workflow.Runtime.IPendingWork\"></xref> methods."}],"pos":[15242,15339],"yaml":true},{"content":"<code>queueName</code> is a null reference (`Nothing` in Visual Basic).","nodes":[{"pos":[0,71],"content":"<ph id=\"ph1\">&lt;code&gt;queueName&lt;/code&gt;</ph> is a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic).","source":"<code>queueName</code> is a null reference (`Nothing` in Visual Basic)."}],"pos":[15521,15593],"yaml":true},{"content":"The workflow runtime engine is not running.  \n  \n -or-  \n  \n The <xref href=\"System.Workflow.Runtime.WorkflowQueue\"></xref> specified by <code>queueName</code> does not exist.  \n  \n -or-  \n  \n The <xref href=\"System.Workflow.Runtime.WorkflowQueue\"></xref> specified by <code>queueName</code> is not enabled.","nodes":[{"pos":[0,43],"content":"The workflow runtime engine is not running.","nodes":[{"content":"The workflow runtime engine is not running.","pos":[0,43]}]},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,175],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowQueue\"&gt;&lt;/xref&gt;</ph> specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">queueName</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist.","source":"The <xref href=\"System.Workflow.Runtime.WorkflowQueue\"></xref> specified by <code>queueName</code> does not exist."},{"pos":[182,186],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[193,307],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowQueue\"&gt;&lt;/xref&gt;</ph> specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">queueName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not enabled.","source":"The <xref href=\"System.Workflow.Runtime.WorkflowQueue\"></xref> specified by <code>queueName</code> is not enabled."}],"pos":[15703,16025],"yaml":true},{"content":"Posts a message to the specified workflow queue when the workflow is idle. <xref href=\"System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)\"></xref> waits until the workflow reaches an idle point and enqueues after verifying that the workflow scheduler is idle (that is, no active operation is being executed).","nodes":[{"pos":[0,401],"content":"Posts a message to the specified workflow queue when the workflow is idle. <xref href=\"System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)\"></xref> waits until the workflow reaches an idle point and enqueues after verifying that the workflow scheduler is idle (that is, no active operation is being executed).","nodes":[{"content":"Posts a message to the specified workflow queue when the workflow is idle.","pos":[0,74]},{"content":"<ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)\"&gt;&lt;/xref&gt;</ph> waits until the workflow reaches an idle point and enqueues after verifying that the workflow scheduler is idle (that is, no active operation is being executed).","pos":[75,401],"source":"<xref href=\"System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)\"></xref> waits until the workflow reaches an idle point and enqueues after verifying that the workflow scheduler is idle (that is, no active operation is being executed)."}]}],"pos":[17372,17774],"yaml":true},{"content":"Waits for the workflow instance to become idle and then sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>. If you call <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A> while the workflow instance is suspended, the workflow runtime engine will throw an <xref:System.InvalidOperationException>. If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>. If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`.  \n  \n When you are using this method with a state machine workflow, you might get an exception that contains the message \"Queue '{0}' is not enabled.\" This occurs when the current state of the state machine does not know how to handle a specific event. For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'.","nodes":[{"pos":[0,754],"content":"Waits for the workflow instance to become idle and then sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>. If you call <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A> while the workflow instance is suspended, the workflow runtime engine will throw an <xref:System.InvalidOperationException>. If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>. If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`.","nodes":[{"content":"Waits for the workflow instance to become idle and then sends the <ph id=\"ph1\">`item`</ph> to the specified <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowQueue&gt;</ph>.","pos":[0,135],"source":"Waits for the workflow instance to become idle and then sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>."},{"content":"If you call <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A&gt;</ph> while the workflow instance is suspended, the workflow runtime engine will throw an <ph id=\"ph2\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[136,341],"source":" If you call <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A> while the workflow instance is suspended, the workflow runtime engine will throw an <xref:System.InvalidOperationException>."},{"content":"If you want to be notified when the message is delivered, you can implement <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> in your service and pass a <ph id=\"ph2\">`workItem`</ph> and an <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.IPendingWork&gt;</ph> object to <ph id=\"ph4\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A&gt;</ph>.","pos":[342,624],"source":" If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>."},{"content":"If you do not want such notification, you can pass a null reference (<ph id=\"ph1\">`Nothing`</ph> in Visual Basic) for <ph id=\"ph2\">`pendingWork`</ph> and <ph id=\"ph3\">`workItem`</ph>.","pos":[625,754],"source":" If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`."}]},{"pos":[761,1252],"content":"When you are using this method with a state machine workflow, you might get an exception that contains the message \"Queue '{0}' is not enabled.\" This occurs when the current state of the state machine does not know how to handle a specific event. For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'.","nodes":[{"content":"When you are using this method with a state machine workflow, you might get an exception that contains the message \"Queue '{0}' is not enabled.\" This occurs when the current state of the state machine does not know how to handle a specific event. For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'.","pos":[0,491],"nodes":[{"content":"When you are using this method with a state machine workflow, you might get an exception that contains the message \"Queue '{0}' is not enabled.\"","pos":[0,144]},{"content":"This occurs when the current state of the state machine does not know how to handle a specific event.","pos":[145,246]},{"content":"For example, when some state other than the current state contains the <ph id=\"ph1\">&lt;xref:System.Workflow.Activities.EventDrivenActivity&gt;</ph> that contains the <ph id=\"ph2\">&lt;xref:System.Workflow.Activities.HandleExternalEventActivity&gt;</ph> that is represented by the queue '{0}'.","pos":[247,491],"source":" For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'."}]}]}],"pos":[17785,19044],"yaml":true,"extradata":"MT"},{"content":"The name of the <xref href=\"System.Workflow.Runtime.WorkflowQueue\"></xref>.","nodes":[{"pos":[0,75],"content":"The name of the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowQueue\"&gt;&lt;/xref&gt;</ph>.","source":"The name of the <xref href=\"System.Workflow.Runtime.WorkflowQueue\"></xref>."}],"pos":[19968,20044],"yaml":true},{"content":"The object to enqueue.","nodes":[{"pos":[0,22],"content":"The object to enqueue.","nodes":[{"content":"The object to enqueue.","pos":[0,22]}]}],"pos":[20104,20127],"yaml":true},{"content":"An <xref href=\"System.Workflow.Runtime.IPendingWork\"></xref> that allows the sender to be notified when <code>item</code> is delivered.","nodes":[{"pos":[0,135],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.IPendingWork\"&gt;&lt;/xref&gt;</ph> that allows the sender to be notified when <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">item</ph><ept id=\"p1\">&lt;/code&gt;</ept> is delivered.","source":"An <xref href=\"System.Workflow.Runtime.IPendingWork\"></xref> that allows the sender to be notified when <code>item</code> is delivered."}],"pos":[20217,20353],"yaml":true},{"content":"An object to be passed to the <xref href=\"System.Workflow.Runtime.IPendingWork\"></xref> methods.","nodes":[{"pos":[0,96],"content":"An object to be passed to the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.IPendingWork\"&gt;&lt;/xref&gt;</ph> methods.","source":"An object to be passed to the <xref href=\"System.Workflow.Runtime.IPendingWork\"></xref> methods."}],"pos":[20417,20514],"yaml":true},{"content":"<code>queueName</code> is a null reference (`Nothing` in Visual Basic).","nodes":[{"pos":[0,71],"content":"<ph id=\"ph1\">&lt;code&gt;queueName&lt;/code&gt;</ph> is a null reference (<ph id=\"ph2\">`Nothing`</ph> in Visual Basic).","source":"<code>queueName</code> is a null reference (`Nothing` in Visual Basic)."}],"pos":[20702,20774],"yaml":true},{"content":"The workflow runtime engine is not running.  \n  \n -or-  \n  \n The workflow instance is suspended.  \n  \n -or-  \n  \n The <xref href=\"System.Workflow.Runtime.WorkflowQueue\"></xref> specified by <code>queueName</code> does not exist.  \n  \n -or-  \n  \n The <xref href=\"System.Workflow.Runtime.WorkflowQueue\"></xref> specified by <code>queueName</code> is not enabled.","nodes":[{"pos":[0,43],"content":"The workflow runtime engine is not running.","nodes":[{"content":"The workflow runtime engine is not running.","pos":[0,43]}]},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,96],"content":"The workflow instance is suspended.","nodes":[{"content":"The workflow instance is suspended.","pos":[0,35]}]},{"pos":[103,107],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[114,228],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowQueue\"&gt;&lt;/xref&gt;</ph> specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">queueName</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not exist.","source":"The <xref href=\"System.Workflow.Runtime.WorkflowQueue\"></xref> specified by <code>queueName</code> does not exist."},{"pos":[235,239],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[246,360],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowQueue\"&gt;&lt;/xref&gt;</ph> specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">queueName</ph><ept id=\"p1\">&lt;/code&gt;</ept> is not enabled.","source":"The <xref href=\"System.Workflow.Runtime.WorkflowQueue\"></xref> specified by <code>queueName</code> is not enabled."}],"pos":[20884,21263],"yaml":true},{"content":"Returns a value that indicates whether the specified object is equal to the <xref href=\"System.Workflow.Runtime.WorkflowInstance\"></xref>.","nodes":[{"pos":[0,138],"content":"Returns a value that indicates whether the specified object is equal to the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowInstance\"&gt;&lt;/xref&gt;</ph>.","source":"Returns a value that indicates whether the specified object is equal to the <xref href=\"System.Workflow.Runtime.WorkflowInstance\"></xref>."}],"pos":[22229,22368],"yaml":true},{"content":"The object must be an instance of the <xref:System.Workflow.Runtime.WorkflowInstance> class and have the same <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> as this <xref:System.Workflow.Runtime.WorkflowInstance>.","nodes":[{"pos":[0,228],"content":"The object must be an instance of the <xref:System.Workflow.Runtime.WorkflowInstance> class and have the same <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> as this <xref:System.Workflow.Runtime.WorkflowInstance>.","nodes":[{"content":"The object must be an instance of the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph> class and have the same <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt;</ph> as this <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.WorkflowInstance&gt;</ph>.","pos":[0,228],"source":"The object must be an instance of the <xref:System.Workflow.Runtime.WorkflowInstance> class and have the same <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> as this <xref:System.Workflow.Runtime.WorkflowInstance>."}]}],"pos":[22379,22608],"yaml":true,"extradata":"MT"},{"content":"The object to compare.","nodes":[{"pos":[0,22],"content":"The object to compare.","nodes":[{"content":"The object to compare.","pos":[0,22]}]}],"pos":[22748,22771],"yaml":true},{"content":"`true` if the specified object is equal to this <xref href=\"System.Workflow.Runtime.WorkflowInstance\"></xref>; otherwise, `false`.","nodes":[{"pos":[0,130],"content":"<ph id=\"ph1\">`true`</ph> if the specified object is equal to this <ph id=\"ph2\">&lt;xref href=\"System.Workflow.Runtime.WorkflowInstance\"&gt;&lt;/xref&gt;</ph>; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the specified object is equal to this <xref href=\"System.Workflow.Runtime.WorkflowInstance\"></xref>; otherwise, `false`."}],"pos":[22829,22962],"yaml":true},{"content":"Returns the hash code for this workflow instance.","nodes":[{"pos":[0,49],"content":"Returns the hash code for this workflow instance.","nodes":[{"content":"Returns the hash code for this workflow instance.","pos":[0,49]}]}],"pos":[23973,24023],"yaml":true},{"content":"<xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A> returns a hash code based on the value of <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>.","nodes":[{"pos":[0,167],"content":"<xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A> returns a hash code based on the value of <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A&gt;</ph> returns a hash code based on the value of <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt;</ph>.","pos":[0,167],"source":"<xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A> returns a hash code based on the value of <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>."}]}],"pos":[24034,24202],"yaml":true,"extradata":"MT"},{"content":"The hash code for this <xref href=\"System.Workflow.Runtime.WorkflowInstance\"></xref>.","nodes":[{"pos":[0,85],"content":"The hash code for this <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowInstance\"&gt;&lt;/xref&gt;</ph>.","source":"The hash code for this <xref href=\"System.Workflow.Runtime.WorkflowInstance\"></xref>."}],"pos":[24336,24422],"yaml":true},{"content":"Retrieves the root activity for this workflow instance.","nodes":[{"pos":[0,55],"content":"Retrieves the root activity for this workflow instance.","nodes":[{"content":"Retrieves the root activity for this workflow instance.","pos":[0,55]}]}],"pos":[25498,25554],"yaml":true},{"content":"You can use the root activity to navigate the activity hierarchy of the workflow.  \n  \n This method is not thread safe, so the host should synchronize its calls to this method.","nodes":[{"pos":[0,81],"content":"You can use the root activity to navigate the activity hierarchy of the workflow.","nodes":[{"content":"You can use the root activity to navigate the activity hierarchy of the workflow.","pos":[0,81]}]},{"pos":[88,176],"content":"This method is not thread safe, so the host should synchronize its calls to this method.","nodes":[{"content":"This method is not thread safe, so the host should synchronize its calls to this method.","pos":[0,88]}]}],"pos":[25565,25746],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> object.","nodes":[{"pos":[0,71],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Workflow.ComponentModel.Activity\"&gt;&lt;/xref&gt;</ph> object.","source":"An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> object."}],"pos":[26496,26568],"yaml":true},{"content":"Returns the next point in time that this <xref href=\"System.Workflow.Runtime.WorkflowInstance\"></xref> is scheduled to be delivered a timer message.","nodes":[{"pos":[0,148],"content":"Returns the next point in time that this <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowInstance\"&gt;&lt;/xref&gt;</ph> is scheduled to be delivered a timer message.","source":"Returns the next point in time that this <xref href=\"System.Workflow.Runtime.WorkflowInstance\"></xref> is scheduled to be delivered a timer message."}],"pos":[27708,27857],"yaml":true},{"content":"A DateTime value that represents the next <xref href=\"System.Workflow.Runtime.TimerEventSubscription.ExpiresAt\"></xref> time this <xref href=\"System.Workflow.Runtime.WorkflowInstance\"></xref> will be delivered a timer message.","nodes":[{"pos":[0,226],"content":"A DateTime value that represents the next <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.TimerEventSubscription.ExpiresAt\"&gt;&lt;/xref&gt;</ph> time this <ph id=\"ph2\">&lt;xref href=\"System.Workflow.Runtime.WorkflowInstance\"&gt;&lt;/xref&gt;</ph> will be delivered a timer message.","source":"A DateTime value that represents the next <xref href=\"System.Workflow.Runtime.TimerEventSubscription.ExpiresAt\"></xref> time this <xref href=\"System.Workflow.Runtime.WorkflowInstance\"></xref> will be delivered a timer message."}],"pos":[28662,28889],"yaml":true},{"content":"Gets a collection of <xref href=\"System.Workflow.Runtime.WorkflowQueueInfo\"></xref> objects that contains the pending items and subscribed activities for the workflow queues associated with this workflow instance.","nodes":[{"pos":[0,213],"content":"Gets a collection of <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowQueueInfo\"&gt;&lt;/xref&gt;</ph> objects that contains the pending items and subscribed activities for the workflow queues associated with this workflow instance.","source":"Gets a collection of <xref href=\"System.Workflow.Runtime.WorkflowQueueInfo\"></xref> objects that contains the pending items and subscribed activities for the workflow queues associated with this workflow instance."}],"pos":[29978,30192],"yaml":true},{"content":"<xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> returns a collection of <xref:System.Workflow.Runtime.WorkflowQueueInfo> objects, each of which contains information about the state of one of the workflow queues associated with this workflow instance. <xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName> contains the pending items for a <xref:System.Workflow.Runtime.WorkflowQueue> and <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName> contains a list of the activities that are subscribed for item delivery on a <xref:System.Workflow.Runtime.WorkflowQueue>.","nodes":[{"pos":[0,663],"content":"<xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> returns a collection of <xref:System.Workflow.Runtime.WorkflowQueueInfo> objects, each of which contains information about the state of one of the workflow queues associated with this workflow instance. <xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName> contains the pending items for a <xref:System.Workflow.Runtime.WorkflowQueue> and <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName> contains a list of the activities that are subscribed for item delivery on a <xref:System.Workflow.Runtime.WorkflowQueue>.","nodes":[{"content":"<xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> returns a collection of <xref:System.Workflow.Runtime.WorkflowQueueInfo> objects, each of which contains information about the state of one of the workflow queues associated with this workflow instance. <xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName> contains the pending items for a <xref:System.Workflow.Runtime.WorkflowQueue> and <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName> contains a list of the activities that are subscribed for item delivery on a <xref:System.Workflow.Runtime.WorkflowQueue>.","pos":[0,663],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A&gt;</ph> returns a collection of <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowQueueInfo&gt;</ph> objects, each of which contains information about the state of one of the workflow queues associated with this workflow instance.","pos":[0,274],"source":"<xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> returns a collection of <xref:System.Workflow.Runtime.WorkflowQueueInfo> objects, each of which contains information about the state of one of the workflow queues associated with this workflow instance."},{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName&gt;</ph> contains the pending items for a <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowQueue&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName&gt;</ph> contains a list of the activities that are subscribed for item delivery on a <ph id=\"ph4\">&lt;xref:System.Workflow.Runtime.WorkflowQueue&gt;</ph>.","pos":[275,663],"source":" <xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName> contains the pending items for a <xref:System.Workflow.Runtime.WorkflowQueue> and <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName> contains a list of the activities that are subscribed for item delivery on a <xref:System.Workflow.Runtime.WorkflowQueue>."}]}]}],"pos":[30203,30867],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> of <xref href=\"System.Workflow.Runtime.WorkflowQueueInfo\"></xref> objects.","nodes":[{"pos":[0,149],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"&gt;&lt;/xref&gt;</ph> of <ph id=\"ph2\">&lt;xref href=\"System.Workflow.Runtime.WorkflowQueueInfo\"&gt;&lt;/xref&gt;</ph> objects.","source":"A <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> of <xref href=\"System.Workflow.Runtime.WorkflowQueueInfo\"></xref> objects."}],"pos":[32631,32781],"yaml":true},{"content":"The workflow runtime engine is not running.","nodes":[{"pos":[0,43],"content":"The workflow runtime engine is not running.","nodes":[{"content":"The workflow runtime engine is not running.","pos":[0,43]}]}],"pos":[32980,33024],"yaml":true},{"content":"Gets the unique identifier for the workflow instance.","nodes":[{"pos":[0,53],"content":"Gets the unique identifier for the workflow instance.","nodes":[{"content":"Gets the unique identifier for the workflow instance.","pos":[0,53]}]}],"pos":[33947,34001],"yaml":true},{"content":"You can use <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> to reference the workflow instance.","nodes":[{"pos":[0,109],"content":"You can use <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> to reference the workflow instance.","nodes":[{"content":"You can use <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A&gt;</ph> to reference the workflow instance.","pos":[0,109],"source":"You can use <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> to reference the workflow instance."}]}],"pos":[34012,34122],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Guid\"></xref> of the workflow instance.","nodes":[{"pos":[0,62],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Guid\"&gt;&lt;/xref&gt;</ph> of the workflow instance.","source":"The <xref href=\"System.Guid\"></xref> of the workflow instance."}],"pos":[35446,35509],"yaml":true},{"content":"Loads a previously unloaded workflow instance.","nodes":[{"pos":[0,46],"content":"Loads a previously unloaded workflow instance.","nodes":[{"content":"Loads a previously unloaded workflow instance.","pos":[0,46]}]}],"pos":[36482,36529],"yaml":true},{"content":"<xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> is synchronous; if the workflow instance can be loaded, <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> will return after the workflow instance has been loaded into memory and scheduled by the workflow runtime engine. The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> event after the persistence service has restored the workflow instance in memory, but before the workflow runtime engine schedules the instance.","nodes":[{"pos":[0,511],"content":"<xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> is synchronous; if the workflow instance can be loaded, <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> will return after the workflow instance has been loaded into memory and scheduled by the workflow runtime engine. The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> event after the persistence service has restored the workflow instance in memory, but before the workflow runtime engine schedules the instance.","nodes":[{"content":"<xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> is synchronous; if the workflow instance can be loaded, <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> will return after the workflow instance has been loaded into memory and scheduled by the workflow runtime engine. The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> event after the persistence service has restored the workflow instance in memory, but before the workflow runtime engine schedules the instance.","pos":[0,511],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Load%2A&gt;</ph> is synchronous; if the workflow instance can be loaded, <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Load%2A&gt;</ph> will return after the workflow instance has been loaded into memory and scheduled by the workflow runtime engine.","pos":[0,281],"source":"<xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> is synchronous; if the workflow instance can be loaded, <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> will return after the workflow instance has been loaded into memory and scheduled by the workflow runtime engine."},{"content":"The runtime raises the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded&gt;</ph> event after the persistence service has restored the workflow instance in memory, but before the workflow runtime engine schedules the instance.","pos":[282,511],"source":" The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> event after the persistence service has restored the workflow instance in memory, but before the workflow runtime engine schedules the instance."}]}]}],"pos":[36540,37052],"yaml":true,"extradata":"MT"},{"content":"The workflow runtime engine is not running.","nodes":[{"pos":[0,43],"content":"The workflow runtime engine is not running.","nodes":[{"content":"The workflow runtime engine is not running.","pos":[0,43]}]}],"pos":[37655,37699],"yaml":true},{"content":"Reload the tracking profiles for this workflow instance.","nodes":[{"pos":[0,56],"content":"Reload the tracking profiles for this workflow instance.","nodes":[{"content":"Reload the tracking profiles for this workflow instance.","pos":[0,56]}]}],"pos":[38698,38755],"yaml":true},{"content":"The runtime tracking infrastructure will reload each <xref:System.Workflow.Runtime.Tracking.TrackingProfile> for this workflow instance associated with its tracking channels. If it is not already in a suspended state, the workflow is temporarily suspended by the runtime tracking infrastructure while the tracking profiles are reloaded.","nodes":[{"pos":[0,336],"content":"The runtime tracking infrastructure will reload each <xref:System.Workflow.Runtime.Tracking.TrackingProfile> for this workflow instance associated with its tracking channels. If it is not already in a suspended state, the workflow is temporarily suspended by the runtime tracking infrastructure while the tracking profiles are reloaded.","nodes":[{"content":"The runtime tracking infrastructure will reload each <xref:System.Workflow.Runtime.Tracking.TrackingProfile> for this workflow instance associated with its tracking channels. If it is not already in a suspended state, the workflow is temporarily suspended by the runtime tracking infrastructure while the tracking profiles are reloaded.","pos":[0,336],"nodes":[{"content":"The runtime tracking infrastructure will reload each <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Tracking.TrackingProfile&gt;</ph> for this workflow instance associated with its tracking channels.","pos":[0,174],"source":"The runtime tracking infrastructure will reload each <xref:System.Workflow.Runtime.Tracking.TrackingProfile> for this workflow instance associated with its tracking channels."},{"content":"If it is not already in a suspended state, the workflow is temporarily suspended by the runtime tracking infrastructure while the tracking profiles are reloaded.","pos":[175,336]}]}]}],"pos":[38766,39103],"yaml":true,"extradata":"MT"},{"content":"The workflow runtime engine is not running.","nodes":[{"pos":[0,43],"content":"The workflow runtime engine is not running.","nodes":[{"content":"The workflow runtime engine is not running.","pos":[0,43]}]}],"pos":[39385,39429],"yaml":true},{"content":"Resumes execution of a previously suspended workflow instance.","nodes":[{"pos":[0,62],"content":"Resumes execution of a previously suspended workflow instance.","nodes":[{"content":"Resumes execution of a previously suspended workflow instance.","pos":[0,62]}]}],"pos":[40332,40395],"yaml":true},{"content":"The host can call <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A> to resume execution of a workflow instance that has been previously suspended. If the workflow instance is not in the suspended state, no action is taken. The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> event just before execution of the workflow instance is resumed.","nodes":[{"pos":[0,381],"content":"The host can call <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A> to resume execution of a workflow instance that has been previously suspended. If the workflow instance is not in the suspended state, no action is taken. The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> event just before execution of the workflow instance is resumed.","nodes":[{"content":"The host can call <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A> to resume execution of a workflow instance that has been previously suspended. If the workflow instance is not in the suspended state, no action is taken. The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> event just before execution of the workflow instance is resumed.","pos":[0,381],"nodes":[{"content":"The host can call <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A&gt;</ph> to resume execution of a workflow instance that has been previously suspended.","pos":[0,154],"source":"The host can call <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A> to resume execution of a workflow instance that has been previously suspended."},{"content":"If the workflow instance is not in the suspended state, no action is taken.","pos":[155,230]},{"content":"The runtime raises the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed&gt;</ph> event just before execution of the workflow instance is resumed.","pos":[231,381],"source":" The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> event just before execution of the workflow instance is resumed."}]}]}],"pos":[40406,40788],"yaml":true,"extradata":"MT"},{"content":"The workflow runtime engine is not running.","nodes":[{"pos":[0,43],"content":"The workflow runtime engine is not running.","nodes":[{"content":"The workflow runtime engine is not running.","pos":[0,43]}]}],"pos":[41562,41606],"yaml":true},{"content":"Starts the execution of the workflow instance.","nodes":[{"pos":[0,46],"content":"Starts the execution of the workflow instance.","nodes":[{"content":"Starts the execution of the workflow instance.","pos":[0,46]}]}],"pos":[42503,42550],"yaml":true},{"content":"<xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> calls <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> on the root activity of this workflow instance. If <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> encounters an exception, it terminates the workflow instance by calling <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> with the <xref:System.Exception.Message%2A> property of the exception passed as the reason for the termination.","nodes":[{"pos":[0,497],"content":"<xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> calls <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> on the root activity of this workflow instance. If <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> encounters an exception, it terminates the workflow instance by calling <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> with the <xref:System.Exception.Message%2A> property of the exception passed as the reason for the termination.","nodes":[{"content":"<xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> calls <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> on the root activity of this workflow instance. If <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> encounters an exception, it terminates the workflow instance by calling <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> with the <xref:System.Exception.Message%2A> property of the exception passed as the reason for the termination.","pos":[0,497],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Start%2A&gt;</ph> calls <ph id=\"ph2\">&lt;xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A&gt;</ph> on the root activity of this workflow instance.","pos":[0,192],"source":"<xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> calls <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> on the root activity of this workflow instance."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Start%2A&gt;</ph> encounters an exception, it terminates the workflow instance by calling <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A&gt;</ph> with the <ph id=\"ph3\">&lt;xref:System.Exception.Message%2A&gt;</ph> property of the exception passed as the reason for the termination.","pos":[193,497],"source":" If <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> encounters an exception, it terminates the workflow instance by calling <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> with the <xref:System.Exception.Message%2A> property of the exception passed as the reason for the termination."}]}]}],"pos":[42561,43059],"yaml":true,"extradata":"MT"},{"content":"The workflow runtime engine is not running.  \n  \n -or-  \n  \n The workflow instance has already been started.","nodes":[{"pos":[0,43],"content":"The workflow runtime engine is not running.","nodes":[{"content":"The workflow runtime engine is not running.","pos":[0,43]}]},{"pos":[50,54],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[61,108],"content":"The workflow instance has already been started.","nodes":[{"content":"The workflow instance has already been started.","pos":[0,47]}]}],"pos":[44661,44776],"yaml":true},{"content":"Suspends the workflow instance.","nodes":[{"pos":[0,31],"content":"Suspends the workflow instance.","nodes":[{"content":"Suspends the workflow instance.","pos":[0,31]}]}],"pos":[45748,45780],"yaml":true},{"content":"The workflow instance is suspended in a synchronous manner. If the workflow instance is already suspended, no action is taken; otherwise, the workflow runtime engine suspends the workflow instance, raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> event and passes `reason` in a <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>.  \n  \n> [!NOTE]\n>  <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> does not unload the workflow instance.","nodes":[{"pos":[0,363],"content":"The workflow instance is suspended in a synchronous manner. If the workflow instance is already suspended, no action is taken; otherwise, the workflow runtime engine suspends the workflow instance, raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> event and passes `reason` in a <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>.","nodes":[{"content":"The workflow instance is suspended in a synchronous manner.","pos":[0,59]},{"content":"If the workflow instance is already suspended, no action is taken; otherwise, the workflow runtime engine suspends the workflow instance, raises the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended&gt;</ph> event and passes <ph id=\"ph2\">`reason`</ph> in a <ph id=\"ph3\">&lt;xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs&gt;</ph>.","pos":[60,363],"source":" If the workflow instance is already suspended, no action is taken; otherwise, the workflow runtime engine suspends the workflow instance, raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> event and passes `reason` in a <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>."}]},{"pos":[371,479],"content":"[!NOTE]\n <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> does not unload the workflow instance.","leadings":["","> "],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A&gt;</ph> does not unload the workflow instance.","pos":[9,106],"source":" <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> does not unload the workflow instance."}]}],"pos":[45791,46276],"yaml":true,"extradata":"MT"},{"content":"A description of the reason for suspending the workflow instance.","nodes":[{"pos":[0,65],"content":"A description of the reason for suspending the workflow instance.","nodes":[{"content":"A description of the reason for suspending the workflow instance.","pos":[0,65]}]}],"pos":[46757,46823],"yaml":true},{"content":"The workflow runtime engine is not running.","nodes":[{"pos":[0,43],"content":"The workflow runtime engine is not running.","nodes":[{"content":"The workflow runtime engine is not running.","pos":[0,43]}]}],"pos":[47009,47053],"yaml":true},{"content":"Terminates the workflow instance in a synchronous manner.","nodes":[{"pos":[0,57],"content":"Terminates the workflow instance in a synchronous manner.","nodes":[{"content":"Terminates the workflow instance in a synchronous manner.","pos":[0,57]}]}],"pos":[48037,48095],"yaml":true},{"content":"The workflow instance is terminated in a synchronous manner. The host calls <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> to terminate the workflow instance. The workflow runtime engine clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory. For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination. You will not be able to reload the workflow instance from a previously stored persistence point.  \n  \n After the in-memory workflow instance is cleared and the persistence service is informed of the termination, the `Terminate` method raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> event and passes `reason` in the <xref:System.Exception.Message%2A> property of a <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> contained in the <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>.  \n  \n `Terminate` is different from <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A> in that while Terminate clears the in-memory workflow instance and informs the persistence service of the termination, `Abort` simply clears the in-memory workflow instance, which can then be restarted from the last persistence point.","nodes":[{"pos":[0,610],"content":"The workflow instance is terminated in a synchronous manner. The host calls <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> to terminate the workflow instance. The workflow runtime engine clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory. For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination. You will not be able to reload the workflow instance from a previously stored persistence point.","nodes":[{"content":"The workflow instance is terminated in a synchronous manner. The host calls <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> to terminate the workflow instance. The workflow runtime engine clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory. For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination. You will not be able to reload the workflow instance from a previously stored persistence point.","pos":[0,610],"nodes":[{"content":"The workflow instance is terminated in a synchronous manner.","pos":[0,60]},{"content":"The host calls <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A&gt;</ph> to terminate the workflow instance.","pos":[61,172],"source":" The host calls <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> to terminate the workflow instance."},{"content":"The workflow runtime engine clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory.","pos":[173,323]},{"content":"For the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService&gt;</ph>, this means that all state information for that workflow instance is deleted from the database upon termination.","pos":[324,513],"source":" For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination."},{"content":"You will not be able to reload the workflow instance from a previously stored persistence point.","pos":[514,610]}]}]},{"pos":[617,1050],"content":"After the in-memory workflow instance is cleared and the persistence service is informed of the termination, the <ph id=\"ph1\">`Terminate`</ph> method raises the <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated&gt;</ph> event and passes <ph id=\"ph3\">`reason`</ph> in the <ph id=\"ph4\">&lt;xref:System.Exception.Message%2A&gt;</ph> property of a <ph id=\"ph5\">&lt;xref:System.Workflow.ComponentModel.WorkflowTerminatedException&gt;</ph> contained in the <ph id=\"ph6\">&lt;xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs&gt;</ph>.","source":"After the in-memory workflow instance is cleared and the persistence service is informed of the termination, the `Terminate` method raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> event and passes `reason` in the <xref:System.Exception.Message%2A> property of a <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> contained in the <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>."},{"pos":[1057,1378],"content":"<ph id=\"ph1\">`Terminate`</ph> is different from <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A&gt;</ph> in that while Terminate clears the in-memory workflow instance and informs the persistence service of the termination, <ph id=\"ph3\">`Abort`</ph> simply clears the in-memory workflow instance, which can then be restarted from the last persistence point.","source":"`Terminate` is different from <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A> in that while Terminate clears the in-memory workflow instance and informs the persistence service of the termination, `Abort` simply clears the in-memory workflow instance, which can then be restarted from the last persistence point."}],"pos":[48106,49491],"yaml":true,"extradata":"MT"},{"content":"A description of the reason for terminating the workflow instance.","nodes":[{"pos":[0,66],"content":"A description of the reason for terminating the workflow instance.","nodes":[{"content":"A description of the reason for terminating the workflow instance.","pos":[0,66]}]}],"pos":[49976,50043],"yaml":true},{"content":"The workflow runtime engine is not running.","nodes":[{"pos":[0,43],"content":"The workflow runtime engine is not running.","nodes":[{"content":"The workflow runtime engine is not running.","pos":[0,43]}]}],"pos":[50231,50275],"yaml":true},{"content":"Unloads the workflow instance from memory to the persistence store when the instance is suspended or idle.","nodes":[{"pos":[0,106],"content":"Unloads the workflow instance from memory to the persistence store when the instance is suspended or idle.","nodes":[{"content":"Unloads the workflow instance from memory to the persistence store when the instance is suspended or idle.","pos":[0,106]}]}],"pos":[51196,51303],"yaml":true},{"content":"If the workflow instance is idle or suspended, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> uses the persistence service to remove the workflow instance from memory and persist it to a data store. If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> throws an <xref:System.InvalidOperationException>. If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event, and returns `true`. <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> returns `false` if the workflow instance has already been unloaded, has been terminated, has been aborted, or has already completed.  \n  \n The host can use <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> to reclaim system resources from an idle workflow.","nodes":[{"pos":[0,784],"content":"If the workflow instance is idle or suspended, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> uses the persistence service to remove the workflow instance from memory and persist it to a data store. If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> throws an <xref:System.InvalidOperationException>. If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event, and returns `true`. <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> returns `false` if the workflow instance has already been unloaded, has been terminated, has been aborted, or has already completed.","nodes":[{"content":"If the workflow instance is idle or suspended, <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A&gt;</ph> uses the persistence service to remove the workflow instance from memory and persist it to a data store.","pos":[0,212],"source":"If the workflow instance is idle or suspended, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> uses the persistence service to remove the workflow instance from memory and persist it to a data store."},{"content":"If there is no persistence service registered with the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A&gt;</ph> throws an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[213,427],"source":" If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> throws an <xref:System.InvalidOperationException>."},{"content":"If the workflow instance is successfully persisted, the runtime raises the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded&gt;</ph> event, and returns <ph id=\"ph2\">`true`</ph>.","pos":[428,593],"source":" If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event, and returns `true`."},{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A&gt;</ph> returns <ph id=\"ph2\">`false`</ph> if the workflow instance has already been unloaded, has been terminated, has been aborted, or has already completed.","pos":[594,784],"source":" <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> returns `false` if the workflow instance has already been unloaded, has been terminated, has been aborted, or has already completed."}]},{"pos":[791,919],"content":"The host can use <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> to reclaim system resources from an idle workflow.","nodes":[{"content":"The host can use <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A&gt;</ph> to reclaim system resources from an idle workflow.","pos":[0,128],"source":"The host can use <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> to reclaim system resources from an idle workflow."}]}],"pos":[51314,52238],"yaml":true,"extradata":"MT"},{"content":"`true` if the workflow instance was unloaded; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if the workflow instance was unloaded; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the workflow instance was unloaded; otherwise, `false`."}],"pos":[52993,53061],"yaml":true},{"content":"There is no persistence service registered with the workflow runtime engine.","nodes":[{"pos":[0,76],"content":"There is no persistence service registered with the workflow runtime engine.","nodes":[{"content":"There is no persistence service registered with the workflow runtime engine.","pos":[0,76]}]}],"pos":[53249,53326],"yaml":true},{"content":"Unloads the workflow instance from memory to the persistence store. This call blocks until after the currently scheduled work is finished, or the end of a transaction scope.","nodes":[{"pos":[0,173],"content":"Unloads the workflow instance from memory to the persistence store. This call blocks until after the currently scheduled work is finished, or the end of a transaction scope.","nodes":[{"content":"Unloads the workflow instance from memory to the persistence store. This call blocks until after the currently scheduled work is finished, or the end of a transaction scope.","pos":[0,173],"nodes":[{"content":"Unloads the workflow instance from memory to the persistence store.","pos":[0,67]},{"content":"This call blocks until after the currently scheduled work is finished, or the end of a transaction scope.","pos":[68,173]}]}]}],"pos":[54229,54403],"yaml":true},{"content":"<xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> is synchronous; that is, it returns after completing any action that it performs. If the workflow instance is not idle, the runtime waits until the instance can be interrupted. An instance can only be interrupted after the currently scheduled work item completes; this is typically when the currently running Activity returns from its <xref:System.Workflow.ComponentModel.Activity.Execute%2A> method. However, if the instance is executing a <xref:System.Workflow.ComponentModel.TransactionScopeActivity>, the transaction scope must complete execution before the instance can be interrupted. Unload then uses the persistence service to remove the workflow instance from memory and persists it to a data store. If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> throws an <xref:System.InvalidOperationException>. If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event.  \n  \n The host can use <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> to reclaim system resources from an idle workflow.","nodes":[{"pos":[0,1124],"content":"<xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> is synchronous; that is, it returns after completing any action that it performs. If the workflow instance is not idle, the runtime waits until the instance can be interrupted. An instance can only be interrupted after the currently scheduled work item completes; this is typically when the currently running Activity returns from its <xref:System.Workflow.ComponentModel.Activity.Execute%2A> method. However, if the instance is executing a <xref:System.Workflow.ComponentModel.TransactionScopeActivity>, the transaction scope must complete execution before the instance can be interrupted. Unload then uses the persistence service to remove the workflow instance from memory and persists it to a data store. If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> throws an <xref:System.InvalidOperationException>. If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event.","nodes":[{"content":"<xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> is synchronous; that is, it returns after completing any action that it performs. If the workflow instance is not idle, the runtime waits until the instance can be interrupted. An instance can only be interrupted after the currently scheduled work item completes; this is typically when the currently running Activity returns from its <xref:System.Workflow.ComponentModel.Activity.Execute%2A> method. However, if the instance is executing a <xref:System.Workflow.ComponentModel.TransactionScopeActivity>, the transaction scope must complete execution before the instance can be interrupted. Unload then uses the persistence service to remove the workflow instance from memory and persists it to a data store. If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> throws an <xref:System.InvalidOperationException>. If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event.","pos":[0,1124],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A&gt;</ph> is synchronous; that is, it returns after completing any action that it performs.","pos":[0,139],"source":"<xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> is synchronous; that is, it returns after completing any action that it performs."},{"content":"If the workflow instance is not idle, the runtime waits until the instance can be interrupted.","pos":[140,234]},{"content":"An instance can only be interrupted after the currently scheduled work item completes; this is typically when the currently running Activity returns from its <ph id=\"ph1\">&lt;xref:System.Workflow.ComponentModel.Activity.Execute%2A&gt;</ph> method.","pos":[235,458],"source":" An instance can only be interrupted after the currently scheduled work item completes; this is typically when the currently running Activity returns from its <xref:System.Workflow.ComponentModel.Activity.Execute%2A> method."},{"content":"However, if the instance is executing a <ph id=\"ph1\">&lt;xref:System.Workflow.ComponentModel.TransactionScopeActivity&gt;</ph>, the transaction scope must complete execution before the instance can be interrupted.","pos":[459,648],"source":" However, if the instance is executing a <xref:System.Workflow.ComponentModel.TransactionScopeActivity>, the transaction scope must complete execution before the instance can be interrupted."},{"content":"Unload then uses the persistence service to remove the workflow instance from memory and persists it to a data store.","pos":[649,766]},{"content":"If there is no persistence service registered with the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A&gt;</ph> throws an <ph id=\"ph3\">&lt;xref:System.InvalidOperationException&gt;</ph>.","pos":[767,978],"source":" If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> throws an <xref:System.InvalidOperationException>."},{"content":"If the workflow instance is successfully persisted, the runtime raises the <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded&gt;</ph> event.","pos":[979,1124],"source":" If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event."}]}]},{"pos":[1131,1256],"content":"The host can use <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> to reclaim system resources from an idle workflow.","nodes":[{"content":"The host can use <ph id=\"ph1\">&lt;xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A&gt;</ph> to reclaim system resources from an idle workflow.","pos":[0,125],"source":"The host can use <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> to reclaim system resources from an idle workflow."}]}],"pos":[54414,55675],"yaml":true,"extradata":"MT"},{"content":"There is no persistence service registered with the workflow runtime engine.","nodes":[{"pos":[0,76],"content":"There is no persistence service registered with the workflow runtime engine.","nodes":[{"content":"There is no persistence service registered with the workflow runtime engine.","pos":[0,76]}]}],"pos":[56319,56396],"yaml":true},{"content":"Gets the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> for this workflow instance.","nodes":[{"pos":[0,97],"content":"Gets the <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowRuntime\"&gt;&lt;/xref&gt;</ph> for this workflow instance.","source":"Gets the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> for this workflow instance."}],"pos":[57349,57447],"yaml":true},{"content":"A <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> that represents the execution environment in which this workflow instance is running.","nodes":[{"pos":[0,148],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Workflow.Runtime.WorkflowRuntime\"&gt;&lt;/xref&gt;</ph> that represents the execution environment in which this workflow instance is running.","source":"A <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> that represents the execution environment in which this workflow instance is running."}],"pos":[58034,58183],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Workflow.Runtime.WorkflowInstance\n  commentId: T:System.Workflow.Runtime.WorkflowInstance\n  id: WorkflowInstance\n  children:\n  - System.Workflow.Runtime.WorkflowInstance.Abort\n  - System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)\n  - System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)\n  - System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)\n  - System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)\n  - System.Workflow.Runtime.WorkflowInstance.GetHashCode\n  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition\n  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration\n  - System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData\n  - System.Workflow.Runtime.WorkflowInstance.InstanceId\n  - System.Workflow.Runtime.WorkflowInstance.Load\n  - System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles\n  - System.Workflow.Runtime.WorkflowInstance.Resume\n  - System.Workflow.Runtime.WorkflowInstance.Start\n  - System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)\n  - System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)\n  - System.Workflow.Runtime.WorkflowInstance.TryUnload\n  - System.Workflow.Runtime.WorkflowInstance.Unload\n  - System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime\n  langs:\n  - csharp\n  name: WorkflowInstance\n  nameWithType: WorkflowInstance\n  fullName: System.Workflow.Runtime.WorkflowInstance\n  type: Class\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Represents a workflow instance.\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[DeprecatedContent](~/includes/deprecatedcontent-md.md)]  \\n  \\n The <xref:System.Workflow.Runtime.WorkflowInstance> class exposes methods and properties that can be used to control the execution of a workflow instance; it is essentially a proxy to the actual workflow instance used by the workflow runtime engine. A host or a service can instruct the workflow runtime engine to perform actions on a workflow instance by calling the appropriate methods that are contained in the <xref:System.Workflow.Runtime.WorkflowInstance> class.  If the requested action is not valid, for example, if the host calls <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> on a workflow instance that has already completed, the workflow runtime engine will raise an appropriate exception.  \\n  \\n> [!NOTE]\\n>  If a workflow instance becomes unresponsive because a call on the host application does not return, the only way to recover the instance is to restart the runtime. However, if the instance has been forcibly unloaded, aborted, or suspended, it can be continued by calling the <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A?displayProperty=fullName> method.\"\n  example:\n  - \"The following code example demonstrates how you can create and start a <xref:System.Workflow.Runtime.WorkflowInstance> in a workflow host. The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object. The code initializes <xref:System.Workflow.Runtime.WorkflowInstance> by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it. The <xref:System.Workflow.Runtime.WorkflowInstance> is started with the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method call.  \\n  \\n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \\n  \\n [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]\\n [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"The System.Workflow.* types are deprecated.  Instead, please use the new types from System.Activities.*\")]\n\n      public sealed class WorkflowInstance\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.Abort\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.Abort\n  id: Abort\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: Abort()\n  nameWithType: WorkflowInstance.Abort()\n  fullName: WorkflowInstance.Abort()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Aborts the workflow instance.\n  remarks: \"The workflow instance is aborted in a synchronous manner; that is, the method returns after the workflow instance has been aborted. The workflow runtime engine invalidates the workflow instance in memory and clears the <xref:System.Workflow.Runtime.WorkflowEnvironment.WorkBatch%2A>. If a persistence service was used by your workflow instance, all work performed since the last persistence point is thrown away. After it aborts the workflow instance, the workflow runtime engine raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowAborted> event. You can call <xref:System.Workflow.Runtime.WorkflowRuntime.GetWorkflow%2A> to reload the workflow instance and start from its last persistence point.  \\n  \\n `Abort` is different from <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> in that while `Abort` simply clears the in-memory workflow instance and can be restarted from the last persistence point, Terminate clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory. For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination. You will not be able to reload the workflow instance from a previously stored persistence point.\"\n  example:\n  - \"The following example demonstrates calling Abort on a workflow instance of type Workflow1.  \\n  \\n [!code-csharp[WF_Samples#13](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#13)]\\n [!code-vb[WF_Samples#13](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#13)]\"\n  syntax:\n    content: public void Abort ();\n    parameters: []\n  overload: System.Workflow.Runtime.WorkflowInstance.Abort*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The workflow runtime engine is not running.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)\n  id: ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: ApplyWorkflowChanges(WorkflowChanges)\n  nameWithType: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)\n  fullName: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Applies changes to the workflow instance specified by the <xref href=\"System.Workflow.ComponentModel.WorkflowChanges\"></xref> object.\n  remarks: If the workflow instance is not already suspended, the workflow runtime engine temporarily suspends the instance before applying the changes.\n  example:\n  - \"The following example demonstrates calling ApplyWorkflowChanges to a <xref:System.Workflow.Runtime.WorkflowInstance> object.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c).  \\n  \\n [!code-csharp[WF_Samples#89](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#89)]\\n [!code-vb[WF_Samples#89](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#89)]\"\n  syntax:\n    content: public void ApplyWorkflowChanges (System.Workflow.ComponentModel.WorkflowChanges workflowChanges);\n    parameters:\n    - id: workflowChanges\n      type: System.Workflow.ComponentModel.WorkflowChanges\n      description: A <xref href=\"System.Workflow.ComponentModel.WorkflowChanges\"></xref> specifying dynamic updates for the workflow instance.\n  overload: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The workflow runtime engine is not running.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)\n  id: EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: EnqueueItem(IComparable, Object, IPendingWork, Object)\n  nameWithType: WorkflowInstance.EnqueueItem(IComparable, Object, IPendingWork, Object)\n  fullName: WorkflowInstance.EnqueueItem(IComparable, Object, IPendingWork, Object)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Posts a message to the specified workflow queue synchronously.\n  remarks: \"Sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>. If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>. If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`.  \\n  \\n When using this method with a state machine workflow, you might get an exception with the message \\\"Queue '{0}' is not enabled.\\\" This happens when the current state of the state machine does not know how to handle a specific event. For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'.  \\n  \\n> [!NOTE]\\n>  Messages are not guaranteed to be received by the workflow instance in the order that they were sent. For example, if receiving a message in an existing queue (Queue A) causes a workflow to create another queue (Queue B), which then listens for another message sent after the first message, it is possible that the second message will arrive first, and will not be received due to its queue not being created yet. To prevent this issue, the second message should not be sent until the presence of the second queue is verified (using <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A>.)\"\n  example:\n  - \"The following code example demonstrates how to use <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>. When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called. It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> method along with the name of the event queue item.  \\n  \\n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \\n  \\n [!code-csharp[WF_Samples#261](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#261)]\\n [!code-vb[WF_Samples#261](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#261)]\"\n  syntax:\n    content: public void EnqueueItem (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);\n    parameters:\n    - id: queueName\n      type: System.IComparable\n      description: The name of the <xref href=\"System.Workflow.Runtime.WorkflowQueue\"></xref>.\n    - id: item\n      type: System.Object\n      description: The object to enqueue.\n    - id: pendingWork\n      type: System.Workflow.Runtime.IPendingWork\n      description: An <xref href=\"System.Workflow.Runtime.IPendingWork\"></xref> that allows the sender to be notified when <code>item</code> is delivered.\n    - id: workItem\n      type: System.Object\n      description: An object to be passed to the <xref href=\"System.Workflow.Runtime.IPendingWork\"></xref> methods.\n  overload: System.Workflow.Runtime.WorkflowInstance.EnqueueItem*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>queueName</code> is a null reference (`Nothing` in Visual Basic).\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The workflow runtime engine is not running.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Workflow.Runtime.WorkflowQueue\\\"></xref> specified by <code>queueName</code> does not exist.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Workflow.Runtime.WorkflowQueue\\\"></xref> specified by <code>queueName</code> is not enabled.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)\n  id: EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: EnqueueItemOnIdle(IComparable, Object, IPendingWork, Object)\n  nameWithType: WorkflowInstance.EnqueueItemOnIdle(IComparable, Object, IPendingWork, Object)\n  fullName: WorkflowInstance.EnqueueItemOnIdle(IComparable, Object, IPendingWork, Object)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Posts a message to the specified workflow queue when the workflow is idle. <xref href=\"System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)\"></xref> waits until the workflow reaches an idle point and enqueues after verifying that the workflow scheduler is idle (that is, no active operation is being executed).\n  remarks: \"Waits for the workflow instance to become idle and then sends the `item` to the specified <xref:System.Workflow.Runtime.WorkflowQueue>. If you call <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle%2A> while the workflow instance is suspended, the workflow runtime engine will throw an <xref:System.InvalidOperationException>. If you want to be notified when the message is delivered, you can implement <xref:System.Workflow.Runtime.IPendingWork> in your service and pass a `workItem` and an <xref:System.Workflow.Runtime.IPendingWork> object to <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A>. If you do not want such notification, you can pass a null reference (`Nothing` in Visual Basic) for `pendingWork` and `workItem`.  \\n  \\n When you are using this method with a state machine workflow, you might get an exception that contains the message \\\"Queue '{0}' is not enabled.\\\" This occurs when the current state of the state machine does not know how to handle a specific event. For example, when some state other than the current state contains the <xref:System.Workflow.Activities.EventDrivenActivity> that contains the <xref:System.Workflow.Activities.HandleExternalEventActivity> that is represented by the queue '{0}'.\"\n  example:\n  - \"The following example demonstrates sending information to a workflow instance using the `EnqueueItemOnIdle` method. First, a WorkflowInstance object is created and started; next, an object that implements the <xref:System.Workflow.Runtime.IPendingWork> interface is created. `EnqueueItemOnIdle` is then called, passing in string values for the queue name, the enqueued item, and the work item to be passed to the methods of the pendingWork object.  \\n  \\n [!code-csharp[WF_Samples#12](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#12)]\\n [!code-vb[WF_Samples#12](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#12)]\"\n  syntax:\n    content: public void EnqueueItemOnIdle (IComparable queueName, object item, System.Workflow.Runtime.IPendingWork pendingWork, object workItem);\n    parameters:\n    - id: queueName\n      type: System.IComparable\n      description: The name of the <xref href=\"System.Workflow.Runtime.WorkflowQueue\"></xref>.\n    - id: item\n      type: System.Object\n      description: The object to enqueue.\n    - id: pendingWork\n      type: System.Workflow.Runtime.IPendingWork\n      description: An <xref href=\"System.Workflow.Runtime.IPendingWork\"></xref> that allows the sender to be notified when <code>item</code> is delivered.\n    - id: workItem\n      type: System.Object\n      description: An object to be passed to the <xref href=\"System.Workflow.Runtime.IPendingWork\"></xref> methods.\n  overload: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>queueName</code> is a null reference (`Nothing` in Visual Basic).\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The workflow runtime engine is not running.  \\n  \\n -or-  \\n  \\n The workflow instance is suspended.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Workflow.Runtime.WorkflowQueue\\\"></xref> specified by <code>queueName</code> does not exist.  \\n  \\n -or-  \\n  \\n The <xref href=\\\"System.Workflow.Runtime.WorkflowQueue\\\"></xref> specified by <code>queueName</code> is not enabled.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: WorkflowInstance.Equals(Object)\n  fullName: WorkflowInstance.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Returns a value that indicates whether the specified object is equal to the <xref href=\"System.Workflow.Runtime.WorkflowInstance\"></xref>.\n  remarks: The object must be an instance of the <xref:System.Workflow.Runtime.WorkflowInstance> class and have the same <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> as this <xref:System.Workflow.Runtime.WorkflowInstance>.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified object is equal to this <xref href=\"System.Workflow.Runtime.WorkflowInstance\"></xref>; otherwise, `false`.'\n  overload: System.Workflow.Runtime.WorkflowInstance.Equals*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.GetHashCode\n  id: GetHashCode\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: WorkflowInstance.GetHashCode()\n  fullName: WorkflowInstance.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Returns the hash code for this workflow instance.\n  remarks: <xref:System.Workflow.Runtime.WorkflowInstance.GetHashCode%2A> returns a hash code based on the value of <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A>.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The hash code for this <xref href=\"System.Workflow.Runtime.WorkflowInstance\"></xref>.\n  overload: System.Workflow.Runtime.WorkflowInstance.GetHashCode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition\n  id: GetWorkflowDefinition\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: GetWorkflowDefinition()\n  nameWithType: WorkflowInstance.GetWorkflowDefinition()\n  fullName: WorkflowInstance.GetWorkflowDefinition()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Retrieves the root activity for this workflow instance.\n  remarks: \"You can use the root activity to navigate the activity hierarchy of the workflow.  \\n  \\n This method is not thread safe, so the host should synchronize its calls to this method.\"\n  example:\n  - \"The following example demonstrates retrieving the workflow definition from a workflow instance.  This example is from the Ordering State Machine SDK sample, from the Mainform.cs file.  For more information, see the [Ordering State Machine Sample](http://msdn.microsoft.com/en-us/59272cf4-bc98-439c-bcfa-b66999ebce5c).  \\n  \\n [!code-csharp[WF_Samples#86](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets1.cs#86)]\\n [!code-vb[WF_Samples#86](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets1.vb#86)]\"\n  syntax:\n    content: public System.Workflow.ComponentModel.Activity GetWorkflowDefinition ();\n    parameters: []\n    return:\n      type: System.Workflow.ComponentModel.Activity\n      description: An <xref href=\"System.Workflow.ComponentModel.Activity\"></xref> object.\n  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration\n  id: GetWorkflowNextTimerExpiration\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: GetWorkflowNextTimerExpiration()\n  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration()\n  fullName: WorkflowInstance.GetWorkflowNextTimerExpiration()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Returns the next point in time that this <xref href=\"System.Workflow.Runtime.WorkflowInstance\"></xref> is scheduled to be delivered a timer message.\n  remarks: ''\n  example:\n  - \"The following example demonstrates using the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration%2A> method to determine if more workflow timer messages are enqueued. This example is from the WorkflowThreading SDK sample, from the Program.cs file. For more information, see [Workflow Threading Sample](http://msdn.microsoft.com/en-us/5b650be7-09fa-47db-a2f6-523dc8ea5ee9).  \\n  \\n [!code-csharp[WF_Samples#284](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#284)]\\n [!code-vb[WF_Samples#284](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#284)]\"\n  syntax:\n    content: public DateTime GetWorkflowNextTimerExpiration ();\n    parameters: []\n    return:\n      type: System.DateTime\n      description: A DateTime value that represents the next <xref href=\"System.Workflow.Runtime.TimerEventSubscription.ExpiresAt\"></xref> time this <xref href=\"System.Workflow.Runtime.WorkflowInstance\"></xref> will be delivered a timer message.\n  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData\n  id: GetWorkflowQueueData\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: GetWorkflowQueueData()\n  nameWithType: WorkflowInstance.GetWorkflowQueueData()\n  fullName: WorkflowInstance.GetWorkflowQueueData()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Gets a collection of <xref href=\"System.Workflow.Runtime.WorkflowQueueInfo\"></xref> objects that contains the pending items and subscribed activities for the workflow queues associated with this workflow instance.\n  remarks: <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> returns a collection of <xref:System.Workflow.Runtime.WorkflowQueueInfo> objects, each of which contains information about the state of one of the workflow queues associated with this workflow instance. <xref:System.Workflow.Runtime.WorkflowQueueInfo.Items%2A?displayProperty=fullName> contains the pending items for a <xref:System.Workflow.Runtime.WorkflowQueue> and <xref:System.Workflow.Runtime.WorkflowQueueInfo.SubscribedActivityNames%2A?displayProperty=fullName> contains a list of the activities that are subscribed for item delivery on a <xref:System.Workflow.Runtime.WorkflowQueue>.\n  example:\n  - \"The following code example demonstrates how you can use the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method to obtain information about the state of all workflow queues associated with a <xref:System.Workflow.Runtime.WorkflowInstance> object. When the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event occurs, the `OnWorkflowIdled` method defined in this example is called. It determines which workflow is idled using the <xref:System.Workflow.Runtime.WorkflowEventArgs.WorkflowInstance%2A> property and then gets a collection of queued items for the workflow instance by calling the <xref:System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData%2A> method. The code iterates over the collection to determine which activity is waiting for the event that idled the workflow. It then sends an exception to the workflow queue using the <xref:System.Workflow.Runtime.WorkflowInstance.EnqueueItem%2A> method along with the name of the event queue item.  \\n  \\n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \\n  \\n [!code-csharp[WF_Samples#261](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#261)]\\n [!code-vb[WF_Samples#261](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#261)]\"\n  syntax:\n    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo> GetWorkflowQueueData ();\n    parameters: []\n    return:\n      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.Runtime.WorkflowQueueInfo}\n      description: A <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\"></xref> of <xref href=\"System.Workflow.Runtime.WorkflowQueueInfo\"></xref> objects.\n  overload: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The workflow runtime engine is not running.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId\n  commentId: P:System.Workflow.Runtime.WorkflowInstance.InstanceId\n  id: InstanceId\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: InstanceId\n  nameWithType: WorkflowInstance.InstanceId\n  fullName: WorkflowInstance.InstanceId\n  type: Property\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Gets the unique identifier for the workflow instance.\n  remarks: You can use <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> to reference the workflow instance.\n  example:\n  - \"The following code example demonstrates how you can use the <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> property to obtain information about a <xref:System.Workflow.Runtime.WorkflowInstance> object. The first code snippet creates a <xref:System.Workflow.Runtime.WorkflowInstance> variable named `instanceId`.  \\n  \\n [!code-csharp[WF_Samples#210](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#210)]\\n [!code-vb[WF_Samples#210](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#210)]  \\n  \\n The second snippet uses the <xref:System.Workflow.Runtime.WorkflowInstance.InstanceId%2A> property as the first object in an `OrderEventArgs` constructor call when the `CallBackForApproval` method is called.  \\n  \\n This code example is part of the Listen SDK Sample from the OrderServiceImple.cs file. For more information, see [Listen Sample](http://msdn.microsoft.com/en-us/1cec0e82-7544-429f-b717-0fc25eb42b7f).  \\n  \\n [!code-csharp[WF_Samples#211](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets19.cs#211)]\\n [!code-vb[WF_Samples#211](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets19.vb#211)]\"\n  syntax:\n    content: public Guid InstanceId { get; }\n    return:\n      type: System.Guid\n      description: The <xref href=\"System.Guid\"></xref> of the workflow instance.\n  overload: System.Workflow.Runtime.WorkflowInstance.InstanceId*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.Load\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.Load\n  id: Load\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: Load()\n  nameWithType: WorkflowInstance.Load()\n  fullName: WorkflowInstance.Load()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Loads a previously unloaded workflow instance.\n  remarks: <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> is synchronous; if the workflow instance can be loaded, <xref:System.Workflow.Runtime.WorkflowInstance.Load%2A> will return after the workflow instance has been loaded into memory and scheduled by the workflow runtime engine. The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowLoaded> event after the persistence service has restored the workflow instance in memory, but before the workflow runtime engine schedules the instance.\n  example:\n  - \"The following example demonstrates how to load a previously unloaded <xref:System.Workflow.Runtime.WorkflowInstance> object.  \\n  \\n [!code-csharp[WF_Samples#10](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#10)]\\n [!code-vb[WF_Samples#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#10)]\"\n  syntax:\n    content: public void Load ();\n    parameters: []\n  overload: System.Workflow.Runtime.WorkflowInstance.Load*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The workflow runtime engine is not running.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles\n  id: ReloadTrackingProfiles\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: ReloadTrackingProfiles()\n  nameWithType: WorkflowInstance.ReloadTrackingProfiles()\n  fullName: WorkflowInstance.ReloadTrackingProfiles()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Reload the tracking profiles for this workflow instance.\n  remarks: The runtime tracking infrastructure will reload each <xref:System.Workflow.Runtime.Tracking.TrackingProfile> for this workflow instance associated with its tracking channels. If it is not already in a suspended state, the workflow is temporarily suspended by the runtime tracking infrastructure while the tracking profiles are reloaded.\n  syntax:\n    content: public void ReloadTrackingProfiles ();\n    parameters: []\n  overload: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The workflow runtime engine is not running.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.Resume\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.Resume\n  id: Resume\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: Resume()\n  nameWithType: WorkflowInstance.Resume()\n  fullName: WorkflowInstance.Resume()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Resumes execution of a previously suspended workflow instance.\n  remarks: The host can call <xref:System.Workflow.Runtime.WorkflowInstance.Resume%2A> to resume execution of a workflow instance that has been previously suspended. If the workflow instance is not in the suspended state, no action is taken. The runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowResumed> event just before execution of the workflow instance is resumed.\n  example:\n  - \"The following example demonstrates calling Resume on a previously suspended workflow instance.  This example is from the Suspend and Terminate SDK sample.  For more information, see [Suspend and Terminate Sample](http://msdn.microsoft.com/en-us/f4dffa58-d01e-44fb-b5a1-3b283d2c4517).  \\n  \\n [!code-csharp[WF_Samples#172](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets11.cs#172)]\\n [!code-vb[WF_Samples#172](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets11.vb#172)]\"\n  syntax:\n    content: public void Resume ();\n    parameters: []\n  overload: System.Workflow.Runtime.WorkflowInstance.Resume*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The workflow runtime engine is not running.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.Start\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.Start\n  id: Start\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: Start()\n  nameWithType: WorkflowInstance.Start()\n  fullName: WorkflowInstance.Start()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Starts the execution of the workflow instance.\n  remarks: <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> calls <xref:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity%2A> on the root activity of this workflow instance. If <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> encounters an exception, it terminates the workflow instance by calling <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> with the <xref:System.Exception.Message%2A> property of the exception passed as the reason for the termination.\n  example:\n  - \"The following code example demonstrates how you can use the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method to start a <xref:System.Workflow.Runtime.WorkflowInstance> in a workflow host. The code creates an instance of the <xref:System.Workflow.Runtime.WorkflowRuntime>, adds services to the runtime, and then demonstrates the recommended way to create a <xref:System.Workflow.Runtime.WorkflowInstance> object. It creates a <xref:System.Type> object and casts it to one of the workflow objects with which the host is associated. The code next initializes <xref:System.Workflow.Runtime.WorkflowInstance> by calling the <xref:System.Workflow.Runtime.WorkflowRuntime.CreateWorkflow%2A> method and passing the previously created type to it. The <xref:System.Workflow.Runtime.WorkflowInstance> is started with the <xref:System.Workflow.Runtime.WorkflowInstance.Start%2A> method call.  \\n  \\n This code example is part of the Canceling a Workflow SDK sample from the Program.cs file. For more information, see [Canceling a Workflow](http://msdn.microsoft.com/en-us/d5077f56-a78b-48e7-825c-f6c77c8e54fb).  \\n  \\n [!code-csharp[WF_Samples#260](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#260)]\\n [!code-vb[WF_Samples#260](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#260)]\"\n  syntax:\n    content: public void Start ();\n    parameters: []\n  overload: System.Workflow.Runtime.WorkflowInstance.Start*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"The workflow runtime engine is not running.  \\n  \\n -or-  \\n  \\n The workflow instance has already been started.\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)\n  id: Suspend(System.String)\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: Suspend(String)\n  nameWithType: WorkflowInstance.Suspend(String)\n  fullName: WorkflowInstance.Suspend(String)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Suspends the workflow instance.\n  remarks: \"The workflow instance is suspended in a synchronous manner. If the workflow instance is already suspended, no action is taken; otherwise, the workflow runtime engine suspends the workflow instance, raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowSuspended> event and passes `reason` in a <xref:System.Workflow.Runtime.WorkflowSuspendedEventArgs>.  \\n  \\n> [!NOTE]\\n>  <xref:System.Workflow.Runtime.WorkflowInstance.Suspend%2A> does not unload the workflow instance.\"\n  example:\n  - \"The following code example demonstrates calling Suspend on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \\n  \\n [!code-csharp[WF_Samples#9](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#9)]\\n [!code-vb[WF_Samples#9](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#9)]\"\n  syntax:\n    content: public void Suspend (string error);\n    parameters:\n    - id: error\n      type: System.String\n      description: A description of the reason for suspending the workflow instance.\n  overload: System.Workflow.Runtime.WorkflowInstance.Suspend*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The workflow runtime engine is not running.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)\n  id: Terminate(System.String)\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: Terminate(String)\n  nameWithType: WorkflowInstance.Terminate(String)\n  fullName: WorkflowInstance.Terminate(String)\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Terminates the workflow instance in a synchronous manner.\n  remarks: \"The workflow instance is terminated in a synchronous manner. The host calls <xref:System.Workflow.Runtime.WorkflowInstance.Terminate%2A> to terminate the workflow instance. The workflow runtime engine clears the in-memory workflow instance and informs the persistence service that the instance has been cleared from memory. For the <xref:System.Workflow.Runtime.Hosting.SqlWorkflowPersistenceService>, this means that all state information for that workflow instance is deleted from the database upon termination. You will not be able to reload the workflow instance from a previously stored persistence point.  \\n  \\n After the in-memory workflow instance is cleared and the persistence service is informed of the termination, the `Terminate` method raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowTerminated> event and passes `reason` in the <xref:System.Exception.Message%2A> property of a <xref:System.Workflow.ComponentModel.WorkflowTerminatedException> contained in the <xref:System.Workflow.Runtime.WorkflowTerminatedEventArgs>.  \\n  \\n `Terminate` is different from <xref:System.Workflow.Runtime.WorkflowInstance.Abort%2A> in that while Terminate clears the in-memory workflow instance and informs the persistence service of the termination, `Abort` simply clears the in-memory workflow instance, which can then be restarted from the last persistence point.\"\n  example:\n  - \"The following code example demonstrates calling Terminate on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \\n  \\n [!code-csharp[WF_Samples#8](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#8)]\\n [!code-vb[WF_Samples#8](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#8)]\"\n  syntax:\n    content: public void Terminate (string error);\n    parameters:\n    - id: error\n      type: System.String\n      description: A description of the reason for terminating the workflow instance.\n  overload: System.Workflow.Runtime.WorkflowInstance.Terminate*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The workflow runtime engine is not running.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.TryUnload\n  id: TryUnload\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: TryUnload()\n  nameWithType: WorkflowInstance.TryUnload()\n  fullName: WorkflowInstance.TryUnload()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Unloads the workflow instance from memory to the persistence store when the instance is suspended or idle.\n  remarks: \"If the workflow instance is idle or suspended, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> uses the persistence service to remove the workflow instance from memory and persist it to a data store. If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> throws an <xref:System.InvalidOperationException>. If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event, and returns `true`. <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> returns `false` if the workflow instance has already been unloaded, has been terminated, has been aborted, or has already completed.  \\n  \\n The host can use <xref:System.Workflow.Runtime.WorkflowInstance.TryUnload%2A> to reclaim system resources from an idle workflow.\"\n  example:\n  - \"The following example demonstrates using the TryUnload method to unload a workflow when the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowIdled> event fires. This example is from the Using Persistence Services SDK sample, from the Program.cs file. For more information, see [Using Persistence Services Sample](http://msdn.microsoft.com/en-us/3176b7e7-ae49-4d5c-802b-85032d6ebde6).  \\n  \\n [!code-csharp[WF_Samples#280](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets24.cs#280)]\\n [!code-vb[WF_Samples#280](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets24.vb#280)]\"\n  syntax:\n    content: public bool TryUnload ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the workflow instance was unloaded; otherwise, `false`.'\n  overload: System.Workflow.Runtime.WorkflowInstance.TryUnload*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: There is no persistence service registered with the workflow runtime engine.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.Unload\n  commentId: M:System.Workflow.Runtime.WorkflowInstance.Unload\n  id: Unload\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: Unload()\n  nameWithType: WorkflowInstance.Unload()\n  fullName: WorkflowInstance.Unload()\n  type: Method\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Unloads the workflow instance from memory to the persistence store. This call blocks until after the currently scheduled work is finished, or the end of a transaction scope.\n  remarks: \"<xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> is synchronous; that is, it returns after completing any action that it performs. If the workflow instance is not idle, the runtime waits until the instance can be interrupted. An instance can only be interrupted after the currently scheduled work item completes; this is typically when the currently running Activity returns from its <xref:System.Workflow.ComponentModel.Activity.Execute%2A> method. However, if the instance is executing a <xref:System.Workflow.ComponentModel.TransactionScopeActivity>, the transaction scope must complete execution before the instance can be interrupted. Unload then uses the persistence service to remove the workflow instance from memory and persists it to a data store. If there is no persistence service registered with the <xref:System.Workflow.Runtime.WorkflowRuntime>, <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> throws an <xref:System.InvalidOperationException>. If the workflow instance is successfully persisted, the runtime raises the <xref:System.Workflow.Runtime.WorkflowRuntime.WorkflowUnloaded> event.  \\n  \\n The host can use <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> to reclaim system resources from an idle workflow.\"\n  example:\n  - \"The following example demonstrates calling <xref:System.Workflow.Runtime.WorkflowInstance.Unload%2A> on a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \\n  \\n [!code-csharp[WF_Samples#11](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#11)]\\n [!code-vb[WF_Samples#11](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#11)]\"\n  syntax:\n    content: public void Unload ();\n    parameters: []\n  overload: System.Workflow.Runtime.WorkflowInstance.Unload*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: There is no persistence service registered with the workflow runtime engine.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime\n  commentId: P:System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime\n  id: WorkflowRuntime\n  parent: System.Workflow.Runtime.WorkflowInstance\n  langs:\n  - csharp\n  name: WorkflowRuntime\n  nameWithType: WorkflowInstance.WorkflowRuntime\n  fullName: WorkflowInstance.WorkflowRuntime\n  type: Property\n  assemblies:\n  - System.Workflow.Runtime\n  namespace: System.Workflow.Runtime\n  summary: Gets the <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> for this workflow instance.\n  remarks: ''\n  example:\n  - \"The following example demonstrates accessing the executing <xref:System.Workflow.Runtime.WorkflowRuntime> of a <xref:System.Workflow.Runtime.WorkflowInstance> object.  \\n  \\n [!code-csharp[WF_Samples#7](~/samples/snippets/csharp/VS_Snippets_CFX/wf_samples/cs/snippets.cs#7)]\\n [!code-vb[WF_Samples#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/wf_samples/vb/snippets.vb#7)]\"\n  syntax:\n    content: public System.Workflow.Runtime.WorkflowRuntime WorkflowRuntime { get; }\n    return:\n      type: System.Workflow.Runtime.WorkflowRuntime\n      description: A <xref href=\"System.Workflow.Runtime.WorkflowRuntime\"></xref> that represents the execution environment in which this workflow instance is running.\n  overload: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Workflow.Runtime.WorkflowInstance.Abort\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Abort()\n  nameWithType: WorkflowInstance.Abort()\n  fullName: WorkflowInstance.Abort()\n- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: ApplyWorkflowChanges(WorkflowChanges)\n  nameWithType: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)\n  fullName: WorkflowInstance.ApplyWorkflowChanges(WorkflowChanges)\n- uid: System.Workflow.ComponentModel.WorkflowChanges\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: WorkflowChanges\n  nameWithType: WorkflowChanges\n  fullName: System.Workflow.ComponentModel.WorkflowChanges\n- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: EnqueueItem(IComparable, Object, IPendingWork, Object)\n  nameWithType: WorkflowInstance.EnqueueItem(IComparable, Object, IPendingWork, Object)\n  fullName: WorkflowInstance.EnqueueItem(IComparable, Object, IPendingWork, Object)\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  nameWithType: IComparable\n  fullName: System.IComparable\n- uid: System.Workflow.Runtime.IPendingWork\n  parent: System.Workflow.Runtime\n  isExternal: false\n  name: IPendingWork\n  nameWithType: IPendingWork\n  fullName: System.Workflow.Runtime.IPendingWork\n- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle(System.IComparable,System.Object,System.Workflow.Runtime.IPendingWork,System.Object)\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: EnqueueItemOnIdle(IComparable, Object, IPendingWork, Object)\n  nameWithType: WorkflowInstance.EnqueueItemOnIdle(IComparable, Object, IPendingWork, Object)\n  fullName: WorkflowInstance.EnqueueItemOnIdle(IComparable, Object, IPendingWork, Object)\n- uid: System.Workflow.Runtime.WorkflowInstance.Equals(System.Object)\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: WorkflowInstance.Equals(Object)\n  fullName: WorkflowInstance.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: WorkflowInstance.GetHashCode()\n  fullName: WorkflowInstance.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: GetWorkflowDefinition()\n  nameWithType: WorkflowInstance.GetWorkflowDefinition()\n  fullName: WorkflowInstance.GetWorkflowDefinition()\n- uid: System.Workflow.ComponentModel.Activity\n  parent: System.Workflow.ComponentModel\n  isExternal: false\n  name: Activity\n  nameWithType: Activity\n  fullName: System.Workflow.ComponentModel.Activity\n- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: GetWorkflowNextTimerExpiration()\n  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration()\n  fullName: WorkflowInstance.GetWorkflowNextTimerExpiration()\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  nameWithType: DateTime\n  fullName: System.DateTime\n- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: GetWorkflowQueueData()\n  nameWithType: WorkflowInstance.GetWorkflowQueueData()\n  fullName: WorkflowInstance.GetWorkflowQueueData()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  name: ReadOnlyCollection<T>\n  nameWithType: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n- uid: System.Workflow.Runtime.WorkflowQueueInfo\n  name: WorkflowQueueInfo\n  nameWithType: WorkflowQueueInfo\n  fullName: System.Workflow.Runtime.WorkflowQueueInfo\n- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.Runtime.WorkflowQueueInfo}\n  parent: System.Collections.ObjectModel\n  isExternal: false\n  name: ReadOnlyCollection<WorkflowQueueInfo>\n  nameWithType: ReadOnlyCollection<WorkflowQueueInfo>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Workflow.Runtime.WorkflowQueueInfo>\n  spec.csharp:\n  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n    name: ReadOnlyCollection\n    nameWithType: ReadOnlyCollection\n    fullName: System.Collections.ObjectModel.ReadOnlyCollection\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Workflow.Runtime.WorkflowQueueInfo\n    name: WorkflowQueueInfo\n    nameWithType: WorkflowQueueInfo\n    fullName: System.Workflow.Runtime.WorkflowQueueInfo\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: InstanceId\n  nameWithType: WorkflowInstance.InstanceId\n  fullName: WorkflowInstance.InstanceId\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Workflow.Runtime.WorkflowInstance.Load\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Load()\n  nameWithType: WorkflowInstance.Load()\n  fullName: WorkflowInstance.Load()\n- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: ReloadTrackingProfiles()\n  nameWithType: WorkflowInstance.ReloadTrackingProfiles()\n  fullName: WorkflowInstance.ReloadTrackingProfiles()\n- uid: System.Workflow.Runtime.WorkflowInstance.Resume\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Resume()\n  nameWithType: WorkflowInstance.Resume()\n  fullName: WorkflowInstance.Resume()\n- uid: System.Workflow.Runtime.WorkflowInstance.Start\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Start()\n  nameWithType: WorkflowInstance.Start()\n  fullName: WorkflowInstance.Start()\n- uid: System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Suspend(String)\n  nameWithType: WorkflowInstance.Suspend(String)\n  fullName: WorkflowInstance.Suspend(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Workflow.Runtime.WorkflowInstance.Terminate(System.String)\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Terminate(String)\n  nameWithType: WorkflowInstance.Terminate(String)\n  fullName: WorkflowInstance.Terminate(String)\n- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: TryUnload()\n  nameWithType: WorkflowInstance.TryUnload()\n  fullName: WorkflowInstance.TryUnload()\n- uid: System.Workflow.Runtime.WorkflowInstance.Unload\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Unload()\n  nameWithType: WorkflowInstance.Unload()\n  fullName: WorkflowInstance.Unload()\n- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: WorkflowRuntime\n  nameWithType: WorkflowInstance.WorkflowRuntime\n  fullName: WorkflowInstance.WorkflowRuntime\n- uid: System.Workflow.Runtime.WorkflowRuntime\n  parent: System.Workflow.Runtime\n  isExternal: false\n  name: WorkflowRuntime\n  nameWithType: WorkflowRuntime\n  fullName: System.Workflow.Runtime.WorkflowRuntime\n- uid: System.Workflow.Runtime.WorkflowInstance.Abort*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Abort\n  nameWithType: WorkflowInstance.Abort\n  fullName: WorkflowInstance.Abort\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.ApplyWorkflowChanges*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: ApplyWorkflowChanges\n  nameWithType: WorkflowInstance.ApplyWorkflowChanges\n  fullName: WorkflowInstance.ApplyWorkflowChanges\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItem*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: EnqueueItem\n  nameWithType: WorkflowInstance.EnqueueItem\n  fullName: WorkflowInstance.EnqueueItem\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.EnqueueItemOnIdle*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: EnqueueItemOnIdle\n  nameWithType: WorkflowInstance.EnqueueItemOnIdle\n  fullName: WorkflowInstance.EnqueueItemOnIdle\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.Equals*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Equals\n  nameWithType: WorkflowInstance.Equals\n  fullName: WorkflowInstance.Equals\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.GetHashCode*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: GetHashCode\n  nameWithType: WorkflowInstance.GetHashCode\n  fullName: WorkflowInstance.GetHashCode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowDefinition*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: GetWorkflowDefinition\n  nameWithType: WorkflowInstance.GetWorkflowDefinition\n  fullName: WorkflowInstance.GetWorkflowDefinition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowNextTimerExpiration*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: GetWorkflowNextTimerExpiration\n  nameWithType: WorkflowInstance.GetWorkflowNextTimerExpiration\n  fullName: WorkflowInstance.GetWorkflowNextTimerExpiration\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.GetWorkflowQueueData*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: GetWorkflowQueueData\n  nameWithType: WorkflowInstance.GetWorkflowQueueData\n  fullName: WorkflowInstance.GetWorkflowQueueData\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.InstanceId*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: InstanceId\n  nameWithType: WorkflowInstance.InstanceId\n  fullName: WorkflowInstance.InstanceId\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.Load*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Load\n  nameWithType: WorkflowInstance.Load\n  fullName: WorkflowInstance.Load\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.ReloadTrackingProfiles*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: ReloadTrackingProfiles\n  nameWithType: WorkflowInstance.ReloadTrackingProfiles\n  fullName: WorkflowInstance.ReloadTrackingProfiles\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.Resume*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Resume\n  nameWithType: WorkflowInstance.Resume\n  fullName: WorkflowInstance.Resume\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.Start*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Start\n  nameWithType: WorkflowInstance.Start\n  fullName: WorkflowInstance.Start\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.Suspend*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Suspend\n  nameWithType: WorkflowInstance.Suspend\n  fullName: WorkflowInstance.Suspend\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.Terminate*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Terminate\n  nameWithType: WorkflowInstance.Terminate\n  fullName: WorkflowInstance.Terminate\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.TryUnload*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: TryUnload\n  nameWithType: WorkflowInstance.TryUnload\n  fullName: WorkflowInstance.TryUnload\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.Unload*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: Unload\n  nameWithType: WorkflowInstance.Unload\n  fullName: WorkflowInstance.Unload\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Workflow.Runtime.WorkflowInstance.WorkflowRuntime*\n  parent: System.Workflow.Runtime.WorkflowInstance\n  isExternal: false\n  name: WorkflowRuntime\n  nameWithType: WorkflowInstance.WorkflowRuntime\n  fullName: WorkflowInstance.WorkflowRuntime\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Workflow.Runtime/WorkflowInstance.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}