### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlBulkCopy
  commentId: T:System.Data.SqlClient.SqlBulkCopy
  id: SqlBulkCopy
  children:
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  - System.Data.SqlClient.SqlBulkCopy.BatchSize
  - System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  - System.Data.SqlClient.SqlBulkCopy.Close
  - System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  - System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  - System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  - System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  - System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  langs:
  - csharp
  name: SqlBulkCopy
  nameWithType: SqlBulkCopy
  fullName: System.Data.SqlClient.SqlBulkCopy
  type: Class
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: Lets you efficiently bulk load a SQL Server table with data from another source.
  remarks: "Microsoft SQL Server includes a popular command-prompt utility named **bcp** for moving data from one table to another, whether on a single server or between servers. The <xref:System.Data.SqlClient.SqlBulkCopy> class lets you write managed code solutions that provide similar functionality. There are other ways to load data into a SQL Server table (INSERT statements, for example), but <xref:System.Data.SqlClient.SqlBulkCopy> offers a significant performance advantage over them.  \n  \n The <xref:System.Data.SqlClient.SqlBulkCopy> class can be used to write data only to SQL Server tables. However, the data source is not limited to SQL Server; any data source can be used, as long as the data can be loaded to a <xref:System.Data.DataTable> instance or read with a <xref:System.Data.IDataReader> instance.  \n  \n <xref:System.Data.SqlClient.SqlBulkCopy> will fail when bulk loading a <xref:System.Data.DataTable> column of type <xref:System.Data.SqlTypes.SqlDateTime> into a SQL Server column whose type is one of the date/time types added in SQL Server 2008."
  example:
  - "The following console application demonstrates how to load data using the <xref:System.Data.SqlClient.SqlBulkCopy> class. In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]**AdventureWorks** database to a similar table in the same database.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]\n [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]"
  syntax:
    content: 'public sealed class SqlBulkCopy : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  id: '#ctor(System.Data.SqlClient.SqlConnection)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(SqlConnection)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection)
  fullName: SqlBulkCopy.SqlBulkCopy(SqlConnection)
  type: Constructor
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: Initializes a new instance of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> class using the specified open instance of <xref href="System.Data.SqlClient.SqlConnection"></xref>.
  remarks: "Because the connection is already open when the <xref:System.Data.SqlClient.SqlBulkCopy> instance is initialized, the connection remains open after the <xref:System.Data.SqlClient.SqlBulkCopy> instance is closed.  \n  \n If the `connection` argument is null, an <xref:System.ArgumentNullException> is thrown."
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]**AdventureWorks** database to a similar table in the same database. This example is for demonstration purposes only. You would not use `SqlBulkCopy` to move data from one table to another in the same database in a production application. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-csharp[DataWorks BulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/CS/source.cs#1)]\n [!code-vb[DataWorks BulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks BulkCopy.Single/VB/source.vb#1)]"
  syntax:
    content: public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: The already open <xref href="System.Data.SqlClient.SqlConnection"></xref> instance that will be used to perform the bulk copy operation. If your connection string does not use `Integrated Security = true`, you can use <xref href="System.Data.SqlClient.SqlCredential"></xref> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(String)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String)
  fullName: SqlBulkCopy.SqlBulkCopy(String)
  type: Constructor
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: Initializes and opens a new instance of <xref href="System.Data.SqlClient.SqlConnection"></xref> based on the supplied <code>connectionString</code>. The constructor uses the <xref href="System.Data.SqlClient.SqlConnection"></xref> to initialize a new instance of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> class.
  remarks: "The connection is automatically closed at the end of the bulk copy operation.  \n  \n If `connectionString` is null, an <xref:System.ArgumentNullException> is thrown. If `connectionString` is an empty string, an <xref:System.ArgumentException> is thrown."
  example:
  - "The following console application demonstrates how to bulk load data by using a connection specified as a string. The connection is automatically closed when the <xref:System.Data.SqlClient.SqlBulkCopy> instance is closed.  \n  \n In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]\n [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]"
  syntax:
    content: public SqlBulkCopy (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: The string defining the connection that will be opened for use by the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> instance. If your connection string does not use `Integrated Security = true`, you can use <xref href="System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)"></xref> or <xref href="System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)"></xref> and <xref href="System.Data.SqlClient.SqlCredential"></xref> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  id: '#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(String, SqlBulkCopyOptions)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String, SqlBulkCopyOptions)
  fullName: SqlBulkCopy.SqlBulkCopy(String, SqlBulkCopyOptions)
  type: Constructor
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: Initializes and opens a new instance of <xref href="System.Data.SqlClient.SqlConnection"></xref> based on the supplied <code>connectionString</code>. The constructor uses that <xref href="System.Data.SqlClient.SqlConnection"></xref> to initialize a new instance of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> class. The <xref href="System.Data.SqlClient.SqlConnection"></xref> instance behaves according to options supplied in the <code>copyOptions</code> parameter.
  remarks: You can obtain detailed information about all the bulk copy options in the <xref:System.Data.SqlClient.SqlBulkCopyOptions> topic.
  example:
  - "The following console application demonstrates how to perform a bulk load by using a connection specified as a string. An option is set to use the value in the identity column of the source table when you load the destination table. In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source table and destination table each include an Identity column. By default, a new value for the **Identity** column is generated in the destination table for each row added. In this example, an option is set when the connection is opened that forces the bulk load process to use the **Identity** values from the source table instead. To see how the option changes the way the bulk load works, run the sample with the **dbo.BulkCopyDemoMatchingColumns** table empty. All rows load from the source. Then run the sample again without emptying the table. An exception is thrown and the code writes a message to the console notifying you that rows weren't added because of primary key constraint violations.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-csharp[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/CS/source.cs#1)]\n [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.KeepIdentity/VB/source.vb#1)]"
  syntax:
    content: public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);
    parameters:
    - id: connectionString
      type: System.String
      description: The string defining the connection that will be opened for use by the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> instance. If your connection string does not use `Integrated Security = true`, you can use <xref href="System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)"></xref> or <xref href="System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)"></xref> and <xref href="System.Data.SqlClient.SqlCredential"></xref> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: A combination of values from the <xref href="System.Data.SqlClient.SqlBulkCopyOptions"></xref> enumeration that determines which data source rows are copied to the destination table.
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  id: '#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(SqlConnection, SqlBulkCopyOptions, SqlTransaction)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection, SqlBulkCopyOptions, SqlTransaction)
  fullName: SqlBulkCopy.SqlBulkCopy(SqlConnection, SqlBulkCopyOptions, SqlTransaction)
  type: Constructor
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: Initializes a new instance of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> class using the supplied existing open instance of <xref href="System.Data.SqlClient.SqlConnection"></xref>. The <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> instance behaves according to options supplied in the <code>copyOptions</code> parameter. If a non-null <xref href="System.Data.SqlClient.SqlTransaction"></xref> is supplied, the copy operations will be performed within that transaction.
  remarks: "If options include `UseInternalTransaction` and the `externalTransaction` argument is not null, an **InvalidArgumentException** is thrown.  \n  \n For examples demonstrating how to use `SqlBulkCopy` in a transaction, see [Transaction and Bulk Copy Operations](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md)."
  syntax:
    content: public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: The already open <xref href="System.Data.SqlClient.SqlConnection"></xref> instance that will be used to perform the bulk copy. If your connection string does not use `Integrated Security = true`, you can use <xref href="System.Data.SqlClient.SqlCredential"></xref> to pass the user ID and password more securely than by specifying the user ID and password as text in the connection string.
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: A combination of values from the <xref href="System.Data.SqlClient.SqlBulkCopyOptions"></xref> enumeration that determines which data source rows are copied to the destination table.
    - id: externalTransaction
      type: System.Data.SqlClient.SqlTransaction
      description: An existing <xref href="System.Data.SqlClient.SqlTransaction"></xref> instance under which the bulk copy will occur.
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize
  commentId: P:System.Data.SqlClient.SqlBulkCopy.BatchSize
  id: BatchSize
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
  fullName: SqlBulkCopy.BatchSize
  type: Property
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: Number of rows in each batch. At the end of each batch, the rows in the batch are sent to the server.
  remarks: "A batch is complete when <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> rows have been processed or there are no more rows to send to the destination data source.  \n  \n Zero (the default) indicates that each <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operation is a single batch.  \n  \n If the <xref:System.Data.SqlClient.SqlBulkCopy> instance has been declared without the <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> option in effect, rows are sent to the server <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> rows at a time, but no transaction-related action is taken. If <xref:System.Data.SqlClient.SqlBulkCopyOptions.UseInternalTransaction> is in effect, each batch of rows is inserted as a separate transaction.  \n  \n The <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> property can be set at any time. If a bulk copy is already in progress, the current batch is sized according to the previous batch size. Subsequent batches use the new size. If the <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> is initially zero and changed while a <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operation is already in progress, that operation loads the data as a single batch. Any subsequent <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operations on the same <xref:System.Data.SqlClient.SqlBulkCopy> instance use the new <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>."
  example:
  - "The following console application demonstrates how to bulk load data in batches of 50 rows. For an example illustrating how <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> works with a transaction, see [Transaction and Bulk Copy Operations](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md).  \n  \n In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-csharp[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/CS/source.cs#1)]\n [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.BatchSize/VB/source.vb#1)]"
  syntax:
    content: public int BatchSize { get; set; }
    return:
      type: System.Int32
      description: The integer value of the <xref href="System.Data.SqlClient.SqlBulkCopy.BatchSize"></xref> property, or zero if no value has been set.
  overload: System.Data.SqlClient.SqlBulkCopy.BatchSize*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  commentId: P:System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  id: BulkCopyTimeout
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
  fullName: SqlBulkCopy.BulkCopyTimeout
  type: Property
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: Number of seconds for the operation to complete before it times out.
  remarks: If the operation does time out, the transaction is not committed and all copied rows are removed from the destination table.
  example:
  - "The following console application demonstrates how to modify the time-out to 60 seconds when bulk loading data.  \n  \n In this example, the source data is first read from a [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)]; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] instance, it is easier and faster to use a [!INCLUDE[tsql](~/includes/tsql-md.md)]`INSERT … SELECT` statement to copy the data.  \n  \n [!code-csharp[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/CS/source.cs#1)]\n [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Timeout/VB/source.vb#1)]"
  syntax:
    content: public int BulkCopyTimeout { get; set; }
    return:
      type: System.Int32
      description: The integer value of the <xref href="System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout"></xref> property. The default is 30 seconds. A value of 0 indicates no limit; the bulk copy will wait indefinitely.
  overload: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.Close
  commentId: M:System.Data.SqlClient.SqlBulkCopy.Close
  id: Close
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: Close()
  nameWithType: SqlBulkCopy.Close()
  fullName: SqlBulkCopy.Close()
  type: Method
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: Closes the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> instance.
  remarks: "After you call a <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> on the <xref:System.Data.SqlClient.SqlBulkCopy> object, no other operation will succeed. Calls to the <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> method will throw an <xref:System.InvalidOperationException>.  \n  \n Calling the <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> method from the <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> event causes an <xref:System.InvalidOperationException> to be thrown.  \n  \n Note that open <xref:System.Data.SqlClient.SqlBulkCopy> instances are closed implicitly at the end of a `using` block."
  example:
  - "The following example uses the same <xref:System.Data.SqlClient.SqlBulkCopy> instance to add sales orders and their associated details to two destination tables. Because the **AdventureWorks** sales order tables are large, the sample reads only orders placed by a certain account number and bulk copies those orders and details to the destination tables. The <xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> method is used only after both bulk copy operations are complete.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-csharp[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/CS/source.cs#1)]\n [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.OrdersDetails/VB/source.vb#1)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Data.SqlClient.SqlBulkCopy.Close*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  commentId: P:System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  id: ColumnMappings
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
  fullName: SqlBulkCopy.ColumnMappings
  type: Property
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: Returns a collection of <xref href="System.Data.SqlClient.SqlBulkCopyColumnMapping"></xref> items. Column mappings define the relationships between columns in the data source and columns in the destination.
  remarks: "If the data source and the destination table have the same number of columns, and the ordinal position of each source column within the data source matches the ordinal position of the corresponding destination column, the <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection is unnecessary. However, if the column counts differ, or the ordinal positions are not consistent, you must use <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> to make sure that data is copied into the correct columns.  \n  \n During the execution of a bulk copy operation, this collection can be accessed, but it cannot be changed. Any attempt to change it will throw an <xref:System.InvalidOperationException>."
  syntax:
    content: public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }
    return:
      type: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
      description: A collection of column mappings. By default, it is an empty collection.
  overload: System.Data.SqlClient.SqlBulkCopy.ColumnMappings*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  commentId: P:System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  id: DestinationTableName
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
  fullName: SqlBulkCopy.DestinationTableName
  type: Property
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: Name of the destination table on the server.
  remarks: "If <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> has not been set when <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> is called, an <xref:System.ArgumentNullException> is thrown.  \n  \n If <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> is modified while a <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operation is running, the change does not affect the current operation. The new <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> value is used the next time a <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> method is called.  \n  \n <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> is a three-part name (`<database>.<owningschema>.<name>`). You can qualify the table name with its database and owning schema if you choose. However, if the table name uses an underscore (\"_\") or any other special characters, you must escape the name using surrounding brackets as in (`[<database>.<owningschema>.<name_01>]`). For more information, see \"Identifiers\" in SQL Server Books Online.  \n  \n You can bulk-copy data to a temporary table by using a value such as `tempdb..#table` or `tempdb.<owner>.#table` for the <xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName%2A> property."
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-csharp[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/CS/source.cs#1)]\n [!code-vb[DataWorks SqlBulkCopy.Single#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.Single/VB/source.vb#1)]"
  syntax:
    content: public string DestinationTableName { get; set; }
    return:
      type: System.String
      description: The string value of the <xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"></xref> property, or null if none as been supplied.
  overload: System.Data.SqlClient.SqlBulkCopy.DestinationTableName*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  commentId: P:System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  id: EnableStreaming
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
  fullName: SqlBulkCopy.EnableStreaming
  type: Property
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: Enables or disables a <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> object to stream data from an <xref href="System.Data.IDataReader"></xref> object
  remarks: When <xref:System.Data.SqlClient.SqlBulkCopy.EnableStreaming%2A> is `true`, <xref:System.Data.SqlClient.SqlBulkCopy> reads from an <xref:System.Data.IDataReader> object using <xref:System.Data.CommandBehavior.SequentialAccess>, optimizing memory usage by using the <xref:System.Data.IDataReader> streaming capabilities. When it’s set to false, the <xref:System.Data.SqlClient.SqlBulkCopy> class loads all the data returned by the <xref:System.Data.IDataReader> object into memory before sending it to [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] or SQL Azure.
  syntax:
    content: public bool EnableStreaming { get; set; }
    return:
      type: System.Boolean
      description: '`true` if a <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> object can stream data from an <xref href="System.Data.IDataReader"></xref> object; otherwise, false. The default is `false`.'
  overload: System.Data.SqlClient.SqlBulkCopy.EnableStreaming*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  commentId: P:System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  id: NotifyAfter
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
  fullName: SqlBulkCopy.NotifyAfter
  type: Property
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: Defines the number of rows to be processed before generating a notification event.
  remarks: "This property is designed for user interface components that illustrate the progress of a bulk copy operation. It indicates the number of rows to be processed before generating a notification event. The <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> property can be set at any time, even while a bulk copy operation is underway. Changes made during a bulk copy operation take effect after the next notification. The new setting applies to all subsequent operations on the same instance.  \n  \n If <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> is set to a number less than zero, an <xref:System.ArgumentOutOfRangeException> is thrown."
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> property is set so that the event handler is called after every 50 rows copied to the table.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. Then a second connection is opened to bulk copy the data. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]\n [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]"
  syntax:
    content: public int NotifyAfter { get; set; }
    return:
      type: System.Int32
      description: The integer value of the <xref href="System.Data.SqlClient.SqlBulkCopy.NotifyAfter"></xref> property, or zero if the property has not been set.
  overload: System.Data.SqlClient.SqlBulkCopy.NotifyAfter*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  commentId: E:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  id: SqlRowsCopied
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlRowsCopied
  nameWithType: SqlBulkCopy.SqlRowsCopied
  fullName: SqlBulkCopy.SqlRowsCopied
  type: Event
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: Occurs every time that the number of rows specified by the <xref href="System.Data.SqlClient.SqlBulkCopy.NotifyAfter"></xref> property have been processed.
  remarks: "Note that the settings of <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> and <xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> are independent. Receipt of a <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> event does not imply that any rows have been sent to the server or committed.  \n  \n You cannot call SqlBulkCopy.Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) or SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) from this event. Doing this will cause an <xref:System.InvalidOperationException> being thrown, and the <xref:System.Data.SqlClient.SqlBulkCopy> object state will not change. If the user wants to cancel the operation from the event, the <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> property of the <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> can be used. (See [Transaction and Bulk Copy Operations](~/docs/framework/data/adonet/sql/transaction-and-bulk-copy-operations.md) for examples that use the <xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> property.)  \n  \n No action, such as transaction activity, is supported in the connection during the execution of the bulk copy operation, and it is recommended that you not use the same connection used during the <xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied> event. However, you can open a different connection."
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> property is set so that the event handler is called after every 50 rows copied to the table.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-csharp[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/CS/source.cs#1)]\n [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.NotifyAfter/VB/source.vb#1)]"
  syntax:
    content: public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;
    return:
      type: System.Data.SqlClient.SqlRowsCopiedEventHandler
      description: ''
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  id: WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataTable, DataRowState)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable, DataRowState)
  fullName: SqlBulkCopy.WriteToServer(DataTable, DataRowState)
  type: Method
  assemblies:
  - System.Data
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: Copies only rows that match the supplied row state in the supplied <xref href="System.Data.DataTable"></xref> to a destination table specified by the <xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"></xref> property of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> object.
  remarks: "Only rows in the <xref:System.Data.DataTable> that are in the states indicated in the `rowState` argument and have not been deleted are copied to the destination table.  \n  \n> [!NOTE]\n>  If <xref:System.Data.DataRowState.Deleted> is specified, any <xref:System.Data.DataRowState.Unchanged>, <xref:System.Data.DataRowState.Added>, and <xref:System.Data.DataRowState.Modified> rows will also be copied to the server. No exception will be raised.  \n  \n While the bulk copy operation is in progress, the associated destination <xref:System.Data.SqlClient.SqlConnection> is busy serving it, and no other operations can be performed on the connection.  \n  \n The <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection maps from the <xref:System.Data.DataTable> columns to the destination database table."
  example:
  - "The following Console application demonstrates how to bulk load only the rows in a <xref:System.Data.DataTable> that match a specified state. In this case, only unchanged rows are added. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time and three rows are added to it. Before the <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> method is executed, one of the rows is edited. The <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> method is called with a `DataRowState.Unchanged` `rowState` argument, so only the two unchanged rows are bulk copied to the destination.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-csharp[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/CS/source.cs#1)]\n [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataRowState/VB/source.vb#1)]"
  syntax:
    content: public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: A <xref href="System.Data.DataTable"></xref> whose rows will be copied to the destination table.
    - id: rowState
      type: System.Data.DataRowState
      description: A value from the <xref href="System.Data.DataRowState"></xref> enumeration. Only rows matching the row state are copied to the destination.
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  id: WriteToServer(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(IDataReader)
  fullName: SqlBulkCopy.WriteToServer(IDataReader)
  type: Method
  assemblies:
  - System.Data
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: Copies all rows in the supplied <xref href="System.Data.IDataReader"></xref> to a destination table specified by the <xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"></xref> property of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> object.
  remarks: "The copy operation starts at the next available row in the reader. Most of the time, the reader was just returned by <xref:System.Data.IDbCommand.ExecuteReader%2A> or a similar call, so the next available row is the first row. To process multiple results, call <xref:System.Data.IDataReader.NextResult%2A> on the data reader and call <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> again.  \n  \n Note that using <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> modifies the state of the reader. The method will call <xref:System.Data.IDataReader.Read%2A> until it returns false, the operation is aborted, or an error occurs. This means that the data reader will be in a different state, probably at the end of the result set, when the <xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> operation is complete.  \n  \n While the bulk copy operation is in progress, the associated destination <xref:System.Data.SqlClient.SqlConnection> is busy serving it, and no other operations can be performed on the connection.  \n  \n The <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection maps from the data reader columns to the destination database table."
  example:
  - "The following console application demonstrates how to bulk load data from a <xref:System.Data.SqlClient.SqlDataReader>. The destination table is a table in the **AdventureWorks** database.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-csharp[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/CS/source.cs#1)]\n [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.ConnectionString/VB/source.vb#1)]"
  syntax:
    content: public void WriteToServer (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: A <xref href="System.Data.IDataReader"></xref> whose rows will be copied to the destination table.
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  id: WriteToServer(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataTable)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable)
  fullName: SqlBulkCopy.WriteToServer(DataTable)
  type: Method
  assemblies:
  - System.Data
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: Copies all rows in the supplied <xref href="System.Data.DataTable"></xref> to a destination table specified by the <xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"></xref> property of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> object.
  remarks: "All rows in the <xref:System.Data.DataTable> are copied to the destination table except those that have been deleted.  \n  \n While the bulk copy operation is in progress, the associated destination <xref:System.Data.SqlClient.SqlConnection> is busy serving it, and no other operations can be performed on the connection.  \n  \n The <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection maps from the <xref:System.Data.DataTable> columns to the destination database table."
  example:
  - "The following Console application demonstrates how to bulk load data from a <xref:System.Data.DataTable>. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time and is the source of the `SqlBulkCopy` operation.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-csharp[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/CS/source.cs#1)]\n [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.DataTable/VB/source.vb#1)]"
  syntax:
    content: public void WriteToServer (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: A <xref href="System.Data.DataTable"></xref> whose rows will be copied to the destination table.
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  id: WriteToServer(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(DbDataReader)
  fullName: SqlBulkCopy.WriteToServer(DbDataReader)
  type: Method
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: Copies all rows from the supplied <xref href="System.Data.Common.DbDataReader"></xref> array to a destination table specified by the <xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"></xref> property of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> object.
  syntax:
    content: public void WriteToServer (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: A <xref href="System.Data.Common.DbDataReader"></xref> whose rows will be copied to the destination table.
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  id: WriteToServer(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServer(DataRow[])
  fullName: SqlBulkCopy.WriteToServer(DataRow[])
  type: Method
  assemblies:
  - System.Data
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: Copies all rows from the supplied <xref href="System.Data.DataRow"></xref> array to a destination table specified by the <xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"></xref> property of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> object.
  remarks: "While the bulk copy operation is in progress, the associated destination <xref:System.Data.SqlClient.SqlConnection> is busy serving it, and no other operations can be performed on the connection.  \n  \n The <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A> collection maps from the <xref:System.Data.DataRow> columns to the destination database table."
  example:
  - "The following console application demonstrates how to bulk load data from a <xref:System.Data.DataRow> array. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time. A single row is selected from the <xref:System.Data.DataTable> to copy to the destination table.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/docs/framework/data/adonet/sql/bulk-copy-example-setup.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-csharp[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/CS/source.cs#1)]\n [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlBulkCopy.RowArray/VB/source.vb#1)]"
  syntax:
    content: public void WriteToServer (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: An array of <xref href="System.Data.DataRow"></xref> objects that will be copied to the destination table.
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(IDataReader, CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader, CancellationToken)
  fullName: SqlBulkCopy.WriteToServerAsync(IDataReader, CancellationToken)
  type: Method
  assemblies:
  - System.Data
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "The asynchronous version of <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)\"></xref>, which copies all rows in the supplied <xref href=\"System.Data.IDataReader\"></xref> to a destination table specified by the <xref href=\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\"></xref> property of the <xref href=\"System.Data.SqlClient.SqlBulkCopy\"></xref> object.  \n  \n The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object."
  remarks: For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: A <xref href="System.Data.IDataReader"></xref> whose rows will be copied to the destination table.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation instruction. A <xref href="System.Threading.CancellationToken.None"></xref> value in this parameter makes this method equivalent to <xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)\"></xref> multiple times for the same instance before task completion.  \n  \n Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)\"></xref> and <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)\"></xref> for the same instance before task completion.  \n  \n The connection drops or is closed during <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)\"></xref> execution.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlBulkCopy\"></xref> object was closed during the method execution.  \n  \n Returned in the task object, there was a connection pool timeout.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object is closed before method execution.  \n  \n The <xref href=\"System.Data.IDataReader\"></xref> was closed before the completed <xref href=\"System.Threading.Tasks.Task\"></xref> returned.  \n  \n The <xref href=\"System.Data.IDataReader\"></xref>'s associated connection was closed before the completed <xref href=\"System.Threading.Tasks.Task\"></xref> returned.  \n  \n `Context Connection=true` is specified in the connection string."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: Returned in the task object, any error returned by [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] that occurred while opening the connection.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  id: WriteToServerAsync(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader)
  fullName: SqlBulkCopy.WriteToServerAsync(DbDataReader)
  type: Method
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: The asynchronous version of <xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)"></xref>, which copies all rows from the supplied <xref href="System.Data.Common.DbDataReader"></xref> array to a destination table specified by the <xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"></xref> property of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> object.
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: A <xref href="System.Data.Common.DbDataReader"></xref> whose rows will be copied to the destination table.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  id: WriteToServerAsync(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[])
  fullName: SqlBulkCopy.WriteToServerAsync(DataRow[])
  type: Method
  assemblies:
  - System.Data
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: The asynchronous version of <xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])"></xref>, which copies all rows from the supplied <xref href="System.Data.DataRow"></xref> array to a destination table specified by the <xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"></xref> property of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> object.
  remarks: For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: An array of <xref href="System.Data.DataRow"></xref> objects that will be copied to the destination table.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])\"></xref> multiple times for the same instance before task completion.  \n  \n Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])\"></xref> and <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])\"></xref> for the same instance before task completion.  \n  \n The connection drops or is closed during <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])\"></xref> execution.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlBulkCopy\"></xref> object was closed during the method execution.  \n  \n Returned in the task object, there was a connection pool timeout.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object is closed before method execution.  \n  \n `Context Connection=true` is specified in the connection string."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: Returned in the task object, any error returned by [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] that occurred while opening the connection.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  id: WriteToServerAsync(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable)
  fullName: SqlBulkCopy.WriteToServerAsync(DataTable)
  type: Method
  assemblies:
  - System.Data
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: The asynchronous version of <xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)"></xref>, which copies all rows in the supplied <xref href="System.Data.DataTable"></xref> to a destination table specified by the <xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"></xref> property of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> object.
  remarks: For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: A <xref href="System.Data.DataTable"></xref> whose rows will be copied to the destination table.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)\"></xref> multiple times for the same instance before task completion.  \n  \n Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)\"></xref> and <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)\"></xref> for the same instance before task completion.  \n  \n The connection drops or is closed during <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)\"></xref> execution.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlBulkCopy\"></xref> object was closed during the method execution.  \n  \n Returned in the task object, there was a connection pool timeout.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object is closed before method execution.  \n  \n `Context Connection=true` is specified in the connection string."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: Returned in the task object, any error returned by [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] that occurred while opening the connection.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  id: WriteToServerAsync(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader)
  fullName: SqlBulkCopy.WriteToServerAsync(IDataReader)
  type: Method
  assemblies:
  - System.Data
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: The asynchronous version of <xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)"></xref>, which copies all rows in the supplied <xref href="System.Data.IDataReader"></xref> to a destination table specified by the <xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"></xref> property of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> object.
  remarks: For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: A <xref href="System.Data.IDataReader"></xref> whose rows will be copied to the destination table.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)\"></xref> multiple times for the same instance before task completion.  \n  \n Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)\"></xref> and <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)\"></xref> for the same instance before task completion.  \n  \n The connection drops or is closed during <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)\"></xref> execution.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlBulkCopy\"></xref> object was closed during the method execution.  \n  \n Returned in the task object, there was a connection pool timeout.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object is closed before method execution.  \n  \n The <xref href=\"System.Data.IDataReader\"></xref> was closed before the completed <xref href=\"System.Threading.Tasks.Task\"></xref> returned.  \n  \n The <xref href=\"System.Data.IDataReader\"></xref>'s associated connection was closed before the completed <xref href=\"System.Threading.Tasks.Task\"></xref> returned.  \n  \n `Context Connection=true` is specified in the connection string."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: Returned in the task object, any error returned by [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] that occurred while opening the connection.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DbDataReader, CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader, CancellationToken)
  fullName: SqlBulkCopy.WriteToServerAsync(DbDataReader, CancellationToken)
  type: Method
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: The asynchronous version of <xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)"></xref>, which copies all rows from the supplied <xref href="System.Data.Common.DbDataReader"></xref> array to a destination table specified by the <xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"></xref> property of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> object.
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: A <xref href="System.Data.Common.DbDataReader"></xref> whose rows will be copied to the destination table.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation instruction. A <xref href="System.Threading.CancellationToken.None"></xref> value in this parameter makes this method equivalent to <xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: Returns <xref href="System.Threading.Tasks.Task"></xref>.
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataRow[], CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[], CancellationToken)
  fullName: SqlBulkCopy.WriteToServerAsync(DataRow[], CancellationToken)
  type: Method
  assemblies:
  - System.Data
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "The asynchronous version of <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])\"></xref>, which copies all rows from the supplied <xref href=\"System.Data.DataRow\"></xref> array to a destination table specified by the <xref href=\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\"></xref> property of the <xref href=\"System.Data.SqlClient.SqlBulkCopy\"></xref> object.  \n  \n The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object."
  remarks: For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: An array of <xref href="System.Data.DataRow"></xref> objects that will be copied to the destination table.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation instruction. A <xref href="System.Threading.CancellationToken.None"></xref> value in this parameter makes this method equivalent to <xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])\"></xref> multiple times for the same instance before task completion.  \n  \n Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])\"></xref> and <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])\"></xref> for the same instance before task completion.  \n  \n The connection drops or is closed during <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])\"></xref> execution.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlBulkCopy\"></xref> object was closed during the method execution.  \n  \n Returned in the task object, there was a connection pool timeout.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object is closed before method execution.  \n  \n `Context Connection=true` is specified in the connection string."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: Returned in the task object, any error returned by [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] that occurred while opening the connection.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  id: WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable, DataRowState)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable, DataRowState)
  fullName: SqlBulkCopy.WriteToServerAsync(DataTable, DataRowState)
  type: Method
  assemblies:
  - System.Data
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: The asynchronous version of <xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)"></xref>, which copies only rows that match the supplied row state in the supplied <xref href="System.Data.DataTable"></xref> to a destination table specified by the <xref href="System.Data.SqlClient.SqlBulkCopy.DestinationTableName"></xref> property of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> object.
  remarks: For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: A <xref href="System.Data.DataTable"></xref> whose rows will be copied to the destination table.
    - id: rowState
      type: System.Data.DataRowState
      description: A value from the <xref href="System.Data.DataRowState"></xref> enumeration. Only rows matching the row state are copied to the destination.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)\"></xref> multiple times for the same instance before task completion.  \n  \n Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)\"></xref> and <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)\"></xref> for the same instance before task completion.  \n  \n The connection drops or is closed during <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)\"></xref> execution.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlBulkCopy\"></xref> object was closed during the method execution.  \n  \n Returned in the task object, there was a connection pool timeout.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object is closed before method execution.  \n  \n `Context Connection=true` is specified in the connection string."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: Returned in the task object, any error returned by [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] that occurred while opening the connection.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable, CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable, CancellationToken)
  fullName: SqlBulkCopy.WriteToServerAsync(DataTable, CancellationToken)
  type: Method
  assemblies:
  - System.Data
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "The asynchronous version of <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)\"></xref>, which copies all rows in the supplied <xref href=\"System.Data.DataTable\"></xref> to a destination table specified by the <xref href=\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\"></xref> property of the <xref href=\"System.Data.SqlClient.SqlBulkCopy\"></xref> object.  \n  \n The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object."
  remarks: For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: A <xref href="System.Data.DataTable"></xref> whose rows will be copied to the destination table.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation instruction. A <xref href="System.Threading.CancellationToken.None"></xref> value in this parameter makes this method equivalent to <xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)\"></xref> multiple times for the same instance before task completion.  \n  \n Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)\"></xref> and <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)\"></xref> for the same instance before task completion.  \n  \n The connection drops or is closed during <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)\"></xref> execution.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlBulkCopy\"></xref> object was closed during the method execution.  \n  \n Returned in the task object, there was a connection pool timeout.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object is closed before method execution.  \n  \n `Context Connection=true` is specified in the connection string."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: Returned in the task object, any error returned by [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] that occurred while opening the connection.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable, DataRowState, CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable, DataRowState, CancellationToken)
  fullName: SqlBulkCopy.WriteToServerAsync(DataTable, DataRowState, CancellationToken)
  type: Method
  assemblies:
  - System.Data
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "The asynchronous version of <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)\"></xref>, which copies only rows that match the supplied row state in the supplied <xref href=\"System.Data.DataTable\"></xref> to a destination table specified by the <xref href=\"System.Data.SqlClient.SqlBulkCopy.DestinationTableName\"></xref> property of the <xref href=\"System.Data.SqlClient.SqlBulkCopy\"></xref> object.  \n  \n The cancellation token can be used to request that the operation be abandoned before the command timeout elapses.  Exceptions will be reported via the returned Task object."
  remarks: For more information about asynchronous programming in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)], see [Asynchronous Programming](~/docs/framework/data/adonet/asynchronous-programming.md).
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: A <xref href="System.Data.DataTable"></xref> whose rows will be copied to the destination table.
    - id: rowState
      type: System.Data.DataRowState
      description: A value from the <xref href="System.Data.DataRowState"></xref> enumeration. Only rows matching the row state are copied to the destination.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation instruction. A <xref href="System.Threading.CancellationToken.None"></xref> value in this parameter makes this method equivalent to <xref href="System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A task representing the asynchronous operation.
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)\"></xref> multiple times for the same instance before task completion.  \n  \n Calling <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)\"></xref> and <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)\"></xref> for the same instance before task completion.  \n  \n The connection drops or is closed during <xref href=\"System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)\"></xref> execution.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlBulkCopy\"></xref> object was closed during the method execution.  \n  \n Returned in the task object, there was a connection pool timeout.  \n  \n Returned in the task object, the <xref href=\"System.Data.SqlClient.SqlConnection\"></xref> object is closed before method execution.  \n  \n `Context Connection=true` is specified in the connection string."
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: Returned in the task object, any error returned by [!INCLUDE[ssNoVersion](~/includes/ssnoversion-md.md)] that occurred while opening the connection.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  commentId: M:System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: IDisposable.Dispose()
  nameWithType: SqlBulkCopy.IDisposable.Dispose()
  fullName: SqlBulkCopy.IDisposable.Dispose()
  type: Method
  assemblies:
  - System.Data.SqlClient
  - System.Data
  - netstandard
  namespace: System.Data.SqlClient
  summary: Releases all resources used by the current instance of the <xref href="System.Data.SqlClient.SqlBulkCopy"></xref> class.
  remarks: "Call `Dispose` when you are finished using the <xref:System.Data.SqlClient.SqlBulkCopy>. The `Dispose` method leaves the <xref:System.Data.SqlClient.SqlBulkCopy> in an unusable state. After calling `Dispose`, you must release all references to the <xref:System.Data.SqlClient.SqlBulkCopy> so the garbage collector can reclaim the memory that the <xref:System.Data.SqlClient.SqlBulkCopy> was occupying.  \n  \n For more information, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  \n  \n> [!NOTE]\n>  Always call `Dispose` before you release your last reference to the <xref:System.Data.SqlClient.SqlBulkCopy>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Data.SqlClient.SqlBulkCopy> object's `Finalize` method."
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
  ms.technology:
  - dotnet-ado
  author: JennieHubbard
  ms.author: jhubbard
  manager: jhubbard
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(SqlConnection)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection)
  fullName: SqlBulkCopy.SqlBulkCopy(SqlConnection)
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(String)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String)
  fullName: SqlBulkCopy.SqlBulkCopy(String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(String, SqlBulkCopyOptions)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String, SqlBulkCopyOptions)
  fullName: SqlBulkCopy.SqlBulkCopy(String, SqlBulkCopyOptions)
- uid: System.Data.SqlClient.SqlBulkCopyOptions
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyOptions
  nameWithType: SqlBulkCopyOptions
  fullName: System.Data.SqlClient.SqlBulkCopyOptions
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(SqlConnection, SqlBulkCopyOptions, SqlTransaction)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection, SqlBulkCopyOptions, SqlTransaction)
  fullName: SqlBulkCopy.SqlBulkCopy(SqlConnection, SqlBulkCopyOptions, SqlTransaction)
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
  fullName: SqlBulkCopy.BatchSize
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
  fullName: SqlBulkCopy.BulkCopyTimeout
- uid: System.Data.SqlClient.SqlBulkCopy.Close
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: Close()
  nameWithType: SqlBulkCopy.Close()
  fullName: SqlBulkCopy.Close()
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
  fullName: SqlBulkCopy.ColumnMappings
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyColumnMappingCollection
  nameWithType: SqlBulkCopyColumnMappingCollection
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
  fullName: SqlBulkCopy.DestinationTableName
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
  fullName: SqlBulkCopy.EnableStreaming
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
  fullName: SqlBulkCopy.NotifyAfter
- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlRowsCopied
  nameWithType: SqlBulkCopy.SqlRowsCopied
  fullName: SqlBulkCopy.SqlRowsCopied
- uid: System.Data.SqlClient.SqlRowsCopiedEventHandler
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlRowsCopiedEventHandler
  nameWithType: SqlRowsCopiedEventHandler
  fullName: System.Data.SqlClient.SqlRowsCopiedEventHandler
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataTable, DataRowState)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable, DataRowState)
  fullName: SqlBulkCopy.WriteToServer(DataTable, DataRowState)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(IDataReader)
  fullName: SqlBulkCopy.WriteToServer(IDataReader)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataTable)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable)
  fullName: SqlBulkCopy.WriteToServer(DataTable)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(DbDataReader)
  fullName: SqlBulkCopy.WriteToServer(DbDataReader)
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServer(DataRow[])
  fullName: SqlBulkCopy.WriteToServer(DataRow[])
- uid: System.Data.DataRow
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow[]
  nameWithType: DataRow[]
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: System.Data.DataRow
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(IDataReader, CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader, CancellationToken)
  fullName: SqlBulkCopy.WriteToServerAsync(IDataReader, CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader)
  fullName: SqlBulkCopy.WriteToServerAsync(DbDataReader)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[])
  fullName: SqlBulkCopy.WriteToServerAsync(DataRow[])
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable)
  fullName: SqlBulkCopy.WriteToServerAsync(DataTable)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader)
  fullName: SqlBulkCopy.WriteToServerAsync(IDataReader)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DbDataReader, CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader, CancellationToken)
  fullName: SqlBulkCopy.WriteToServerAsync(DbDataReader, CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataRow[], CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[], CancellationToken)
  fullName: SqlBulkCopy.WriteToServerAsync(DataRow[], CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable, DataRowState)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable, DataRowState)
  fullName: SqlBulkCopy.WriteToServerAsync(DataTable, DataRowState)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable, CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable, CancellationToken)
  fullName: SqlBulkCopy.WriteToServerAsync(DataTable, CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable, DataRowState, CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable, DataRowState, CancellationToken)
  fullName: SqlBulkCopy.WriteToServerAsync(DataTable, DataRowState, CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: IDisposable.Dispose()
  nameWithType: SqlBulkCopy.IDisposable.Dispose()
  fullName: SqlBulkCopy.IDisposable.Dispose()
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer
  nameWithType: SqlBulkCopy.WriteToServer
  fullName: SqlBulkCopy.WriteToServer
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  - netcore-1.0
  - netcore-1.1
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync
  nameWithType: SqlBulkCopy.WriteToServerAsync
  fullName: SqlBulkCopy.WriteToServerAsync
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netcore-1.0
  - netcore-1.1
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy
  nameWithType: SqlBulkCopy.SqlBulkCopy
  fullName: SqlBulkCopy.SqlBulkCopy
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
  fullName: SqlBulkCopy.BatchSize
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
  fullName: SqlBulkCopy.BulkCopyTimeout
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
- uid: System.Data.SqlClient.SqlBulkCopy.Close*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: Close
  nameWithType: SqlBulkCopy.Close
  fullName: SqlBulkCopy.Close
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
  fullName: SqlBulkCopy.ColumnMappings
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
  fullName: SqlBulkCopy.DestinationTableName
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
  fullName: SqlBulkCopy.EnableStreaming
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
  fullName: SqlBulkCopy.NotifyAfter
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose
  fullName: SqlBulkCopy.System.IDisposable.Dispose
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.SqlClient/SqlBulkCopy.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
