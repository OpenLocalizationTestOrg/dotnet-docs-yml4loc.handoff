### YamlMime:ManagedReference
items:
- uid: System.Numerics.BigInteger
  commentId: T:System.Numerics.BigInteger
  id: BigInteger
  children:
  - System.Numerics.BigInteger.#ctor(System.Byte[])
  - System.Numerics.BigInteger.#ctor(System.Decimal)
  - System.Numerics.BigInteger.#ctor(System.Double)
  - System.Numerics.BigInteger.#ctor(System.Int32)
  - System.Numerics.BigInteger.#ctor(System.Int64)
  - System.Numerics.BigInteger.#ctor(System.Single)
  - System.Numerics.BigInteger.#ctor(System.UInt32)
  - System.Numerics.BigInteger.#ctor(System.UInt64)
  - System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.CompareTo(System.UInt64)
  - System.Numerics.BigInteger.CompareTo(System.Object)
  - System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.CompareTo(System.Int64)
  - System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  - System.Numerics.BigInteger.Equals(System.Int64)
  - System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Equals(System.Object)
  - System.Numerics.BigInteger.Equals(System.UInt64)
  - System.Numerics.BigInteger.GetHashCode
  - System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.IsEven
  - System.Numerics.BigInteger.IsOne
  - System.Numerics.BigInteger.IsPowerOfTwo
  - System.Numerics.BigInteger.IsZero
  - System.Numerics.BigInteger.Log(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)
  - System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.MinusOne
  - System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.One
  - System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Explicit(System.Single to System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt32)
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt16)
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Single)
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.SByte)
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int64)
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt64)
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int16)
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Double)
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Decimal)
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Byte)
  - System.Numerics.BigInteger.op_Explicit(System.Double to System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int32)
  - System.Numerics.BigInteger.op_Explicit(System.Decimal to System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_Implicit(System.UInt32 to System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Implicit(System.UInt16 to System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Implicit(System.SByte to System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Implicit(System.UInt64 to System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Implicit(System.Int32 to System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Implicit(System.Int16 to System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Implicit(System.Byte to System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Implicit(System.Int64 to System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)
  - System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)
  - System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)
  - System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)
  - System.Numerics.BigInteger.Parse(System.String)
  - System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)
  - System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Sign
  - System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.ToByteArray
  - System.Numerics.BigInteger.ToString
  - System.Numerics.BigInteger.ToString(System.IFormatProvider)
  - System.Numerics.BigInteger.ToString(System.String)
  - System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)
  - System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)
  - System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)
  - System.Numerics.BigInteger.Zero
  - System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)
  langs:
  - csharp
  name: BigInteger
  nameWithType: BigInteger
  fullName: System.Numerics.BigInteger
  type: Struct
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Represents an arbitrarily large signed integer.
  remarks: "The <xref:System.Numerics.BigInteger> type is an immutable type that represents an arbitrarily large integer whose value in theory has no upper or lower bounds. The members of the <xref:System.Numerics.BigInteger> type closely parallel those of other integral types (the <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, and <xref:System.UInt64> types). This type differs from the other integral types in the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], which have a range indicated by their `MinValue` and `MaxValue` properties.  \n  \n> [!NOTE]\n>  Because the <xref:System.Numerics.BigInteger> type is immutable (see [Mutability and the BigInteger Structure](#mutability)) and because it has no upper or lower bounds, an <xref:System.OutOfMemoryException> can be thrown for any operation that causes a <xref:System.Numerics.BigInteger> value to grow too large.  \n  \n## Instantiating a BigInteger Object  \n You can instantiate a <xref:System.Numerics.BigInteger> object in several ways:  \n  \n-   You can use the `new` keyword and provide any integral or floating-point value as a parameter to the <xref:System.Numerics.BigInteger> constructor. (Floating-point values are truncated before they are assigned to the <xref:System.Numerics.BigInteger>.) The following example illustrates how to use the `new` keyword to instantiate <xref:System.Numerics.BigInteger> values.  \n  \n     [!code-csharp[System.Numerics.BigInteger.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#1)]\n     [!code-vb[System.Numerics.BigInteger.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#1)]  \n  \n-   You can declare a <xref:System.Numerics.BigInteger> variable and assign it a value just as you would any numeric type, as long as that value is an integral type. The following example uses assignment to create a <xref:System.Numerics.BigInteger> value from an <xref:System.Int64>.  \n  \n     [!code-csharp[System.Numerics.BigInteger.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#2)]\n     [!code-vb[System.Numerics.BigInteger.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#2)]  \n  \n-   You can assign a decimal or floating-point value to a <xref:System.Numerics.BigInteger> object if you cast the value or convert it first. The following example explicitly casts (in C#) or converts (in Visual Basic) a <xref:System.Double> and a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger>.  \n  \n     [!code-csharp[System.Numerics.BigInteger.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#3)]\n     [!code-vb[System.Numerics.BigInteger.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#3)]  \n  \n These methods enable you to instantiate a <xref:System.Numerics.BigInteger> object whose value is in the range of one of the existing numeric types only. You can instantiate a <xref:System.Numerics.BigInteger> object whose value can exceed the range of the existing numeric types in one of three ways:  \n  \n-   You can use the `new` keyword and provide a byte array of any size to the <xref:System.Numerics.BigInteger.%23ctor%2A?displayProperty=fullName> constructor. For example:  \n  \n     [!code-csharp[System.Numerics.BigInteger.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#4)]\n     [!code-vb[System.Numerics.BigInteger.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#4)]  \n  \n-   You can call the <xref:System.Numerics.BigInteger.Parse%2A> or <xref:System.Numerics.BigInteger.TryParse%2A> methods to convert the string representation of a number to a <xref:System.Numerics.BigInteger>. For example:  \n  \n     [!code-csharp[System.Numerics.BigInteger.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#5)]\n     [!code-vb[System.Numerics.BigInteger.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#5)]  \n  \n-   You can call a `static` (`Shared` in Visual Basic) <xref:System.Numerics.BigInteger> method that performs some operation on a numeric expression and returns a calculated <xref:System.Numerics.BigInteger> result. The following example does this by cubing <xref:System.UInt64.MaxValue?displayProperty=fullName> and assigning the result to a <xref:System.Numerics.BigInteger>.  \n  \n     [!code-csharp[System.Numerics.BigInteger.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/cs/BigInteger_Examples.cs#6)]\n     [!code-vb[System.Numerics.BigInteger.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class/vb/BigInteger_Examples.vb#6)]  \n  \n The uninitialized value of a <xref:System.Numerics.BigInteger> is <xref:System.Numerics.BigInteger.Zero%2A>.  \n  \n## Performing Operations on BigInteger Values  \n You can use a <xref:System.Numerics.BigInteger> instance as you would use any other integral type. <xref:System.Numerics.BigInteger> overloads the standard numeric operators to enable you to perform basic mathematical operations such as addition, subtraction, division, multiplication, subtraction, negation, and unary negation. You can also use the standard numeric operators to compare two <xref:System.Numerics.BigInteger> values with each other. Like the other integral types, <xref:System.Numerics.BigInteger> also supports the bitwise `And`, `Or`, `XOr`, left shift, and right shift operators. For languages that do not support custom operators, the <xref:System.Numerics.BigInteger> structure also provides equivalent methods for performing mathematical operations. These include <xref:System.Numerics.BigInteger.Add%2A>, <xref:System.Numerics.BigInteger.Divide%2A>, <xref:System.Numerics.BigInteger.Multiply%2A>, <xref:System.Numerics.BigInteger.Negate%2A>, <xref:System.Numerics.BigInteger.Subtract%2A>, and several others.  \n  \n Many members of the <xref:System.Numerics.BigInteger> structure correspond directly to members of the other integral types. In addition, <xref:System.Numerics.BigInteger> adds members such as the following:  \n  \n-   <xref:System.Numerics.BigInteger.Sign%2A>, which returns a value that indicates the sign of a <xref:System.Numerics.BigInteger> value.  \n  \n-   <xref:System.Numerics.BigInteger.Abs%2A>, which returns the absolute value of a <xref:System.Numerics.BigInteger> value.  \n  \n-   <xref:System.Numerics.BigInteger.DivRem%2A>, which returns both the quotient and remainder of a division operation.  \n  \n-   <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A>, which returns the greatest common divisor of two <xref:System.Numerics.BigInteger> values.  \n  \n Many of these additional members correspond to the members of the <xref:System.Math> class, which provides the functionality to work with the primitive numeric types.  \n  \n<a name=\"mutability\"></a>   \n## Mutability and the BigInteger Structure  \n The following example instantiates a <xref:System.Numerics.BigInteger> object and then increments its value by one.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Class.Mutability#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#1)]  \n  \n Although this example appears to modify the value of the existing object, this is not the case. <xref:System.Numerics.BigInteger> objects are immutable, which means that internally, the common language runtime actually creates a new <xref:System.Numerics.BigInteger> object and assigns it a value one greater than its previous value. This new object is then returned to the caller.  \n  \n> [!NOTE]\n>  The other numeric types in the .NET Framework are also immutable. However, because the <xref:System.Numerics.BigInteger> type has no upper or lower bounds, its values can grow extremely large and have a measurable impact on performance.  \n  \n Although this process is transparent to the caller, it does incur a performance penalty. In some cases, especially when repeated operations are performed in a loop on very large <xref:System.Numerics.BigInteger> values, that performance penalty can be significant. For example, in the following example, an operation is performed repetitively up to a million times, and a <xref:System.Numerics.BigInteger> value is incremented by one every time the operation succeeds.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#12)]\n [!code-vb[System.Numerics.BigInteger.Class.Mutability#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#12)]  \n  \n In such a case, you can improve performance by performing all intermediate assignments to an <xref:System.Int32> variable. The final value of the variable can then be assigned to the <xref:System.Numerics.BigInteger> object when the loop exits. The following example provides an illustration.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/cs/Mutability_Examples.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Class.Mutability#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.Mutability/vb/Mutability_Examples.vb#3)]  \n  \n## Working with Byte Arrays and Hexadecimal Strings  \n If you convert <xref:System.Numerics.BigInteger> values to byte arrays, or if you convert byte arrays to <xref:System.Numerics.BigInteger> values, you must consider the order of bytes. The <xref:System.Numerics.BigInteger> structure expects the individual bytes in a byte array to appear in little-endian order (that is, the lower-order bytes of the value precede the higher-order bytes). You can round-trip a <xref:System.Numerics.BigInteger> value by calling the <xref:System.Numerics.BigInteger.ToByteArray%2A> method and then passing the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor, as the following example shows.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#1)]  \n  \n To instantiate a <xref:System.Numerics.BigInteger> value from a byte array that represents a value of some other integral type, you can pass the integral value to the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method, and then pass the resulting byte array to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor. The following example instantiates a <xref:System.Numerics.BigInteger> value from a byte array that represents an <xref:System.Int16> value.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#2)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#2)]  \n  \n The <xref:System.Numerics.BigInteger> structure assumes that negative values are stored by using two's complement representation. Because the <xref:System.Numerics.BigInteger> structure represents a numeric value with no fixed length, the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor always interprets the most significant bit of the last byte in the array as a sign bit. To prevent the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor from confusing the two's complement representation of a negative value with the sign and magnitude representation of a positive value, positive values in which the most significant bit of the last byte in the byte array would ordinarily be set should include an additional byte whose value is 0. For example, 0xC0 0xBD 0xF0 0xFF is the little-endian hexadecimal representation of either -1,000,000 or 4,293,967,296. Because the most significant bit of the last byte in this array is on, the value of the byte array would be interpreted by the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor as -1,000,000. To instantiate a <xref:System.Numerics.BigInteger> whose value is positive, a byte array whose elements are 0xC0 0xBD 0xF0 0xFF 0x00 must be passed to the constructor. The following example illustrates this.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#3)]  \n  \n Byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method from positive values include this extra zero-value byte. Therefore, the <xref:System.Numerics.BigInteger> structure can successfully round-trip values by assigning them to, and then restoring them from, byte arrays, as the following example shows.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#4)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#4)]  \n  \n However, you may need to add this additional zero-value byte to byte arrays that are created dynamically by the developer or that are returned by methods that convert unsigned integers to byte arrays (such as <xref:System.BitConverter.GetBytes%28System.UInt16%29?displayProperty=fullName>, <xref:System.BitConverter.GetBytes%28System.UInt32%29?displayProperty=fullName>, and <xref:System.BitConverter.GetBytes%28System.UInt64%29?displayProperty=fullName>).  \n  \n When parsing a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName> and <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName> methods assume that if the most significant bit of the first byte in the string is set, or if the first hexadecimal digit of the string represents the lower four bits of a byte value, the value is represented by using two's complement representation. For example, both \"FF01\" and \"F01\" represent the decimal value -255. To differentiate positive from negative values, positive values should include a leading zero. The relevant overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, when they are passed the \"X\" format string, add a leading zero to the returned hexadecimal string for positive values. This makes it possible to round-trip <xref:System.Numerics.BigInteger> values by using the <xref:System.Numerics.BigInteger.ToString%2A> and <xref:System.Numerics.BigInteger.Parse%2A> methods, as the following example shows.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples.cs#5)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples.vb#5)]  \n  \n However, the hexadecimal strings created by calling the `ToString` methods of the other integral types or the overloads of the <xref:System.Convert.ToString%2A> method that include a `toBase` parameter do not indicate the sign of the value or the source data type from which the hexadecimal string was derived. Successfully instantiating a <xref:System.Numerics.BigInteger> value from such a string requires some additional logic. The following example provides one possible implementation.  \n  \n [!code-csharp[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/cs/ByteAndHex_Examples2.cs#6)]\n [!code-vb[System.Numerics.BigInteger.Class.ByteAndHex#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Class.ByteAndHex/vb/ByteAndHex_Examples2.vb#6)]"
  syntax:
    content: 'public struct BigInteger : IComparable, IComparable<System.Numerics.BigInteger>, IEquatable<System.Numerics.BigInteger>, IFormattable'
  inheritance:
  - System.Object
  - System.ValueType
  implements:
  - System.IComparable
  - System.IComparable{System.Numerics.BigInteger}
  - System.IEquatable{System.Numerics.BigInteger}
  - System.IFormattable
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.#ctor(System.Byte[])
  commentId: M:System.Numerics.BigInteger.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: BigInteger(Byte[])
  nameWithType: BigInteger.BigInteger(Byte[])
  fullName: BigInteger.BigInteger(Byte[])
  type: Constructor
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger"></xref> structure using the values in a byte array.
  remarks: "The individual bytes in the `value` array should be in little-endian order, from lowest-order byte to highest-order byte. For example, the numeric value 1,000,000,000,000 is represented as shown in the following table:  \n  \n|||  \n|-|-|  \n|Hexadecimal string|E8D4A51000|  \n|Byte array (lowest index first)|00 10 A5 D4 E8 00|  \n  \n Most methods that convert numeric values to byte arrays, such as <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=fullName> and <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName>, return byte arrays in little-endian order.  \n  \n The constructor expects positive values in the byte array to use sign-and-magnitude representation, and negative values to use two's complement representation. In other words, if the highest-order bit of the highest-order byte in `value` is set, the resulting <xref:System.Numerics.BigInteger> value is negative. Depending on the source of the byte array, this may cause a positive value to be misinterpreted as a negative value. Byte arrays are typically generated in the following ways:  \n  \n-   By calling the <xref:System.Numerics.BigInteger.ToByteArray%2A?displayProperty=fullName> method. Because this method returns a byte array with the highest-order bit of the highest-order byte in the array set to zero for positive values, there is no chance of misinterpreting a positive value as negative. Unmodified byte arrays created by the <xref:System.Numerics.BigInteger.ToByteArray%2A> method always successfully round-trip when they are passed to the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.  \n  \n-   By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method and passing it a signed integer as a parameter. Because signed integers handle both sign-and-magnitude representation and two's complement representation, there is no chance of misinterpreting a positive value as negative.  \n  \n-   By calling the <xref:System.BitConverter.GetBytes%2A?displayProperty=fullName> method and passing it an unsigned integer as a parameter. Because unsigned integers are represented by their magnitude only, positive values can be misinterpreted as negative values. To prevent this misinterpretation, you can add a zero-byte value to the end of the array. The example in the next section provides an illustration.  \n  \n-   By creating a byte array either dynamically or statically without necessarily calling any of the previous methods, or by modifying an existing byte array. To prevent positive values from being misinterpreted as negative values, you can add a zero-byte value to the end of the array.  \n  \n If `value` is an empty <xref:System.Byte> array, the new <xref:System.Numerics.BigInteger> object is initialized to a value of <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>. If `value` is `null`, the constructor throws an <xref:System.ArgumentNullException>."
  example:
  - "The following example instantiates a <xref:System.Numerics.BigInteger> object from a 5-element byte array whose value is {5, 4, 3, 2, 1}. It then displays the <xref:System.Numerics.BigInteger> value, represented as both decimal and hexadecimal numbers, to the console. A comparison of the input array with the text output makes it clear why this overload of the <xref:System.Numerics.BigInteger> class constructor creates a <xref:System.Numerics.BigInteger> object whose value is 4328719365 (or 0x102030405). The first element of the byte array, whose value is 5, defines the value of the lowest-order byte of the <xref:System.Numerics.BigInteger> object, which is 0x05. The second element of the byte array, whose value is 4, defines the value of the second byte of the <xref:System.Numerics.BigInteger> object, which is 0x04, and so on.  \n  \n [!code-csharp[System.Numerics.BigInteger.ctors#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.ctors#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#1)]  \n  \n The following example instantiates a positive and a negative <xref:System.Numerics.BigInteger> value, passes them to the <xref:System.Numerics.BigInteger.ToByteArray%2A> method, and then restores the original <xref:System.Numerics.BigInteger> values from the resulting byte array. Note that the two values are represented by identical byte arrays. The only difference between them is in the most significant bit of the last element in the byte array. This bit is set (the value of the byte is 0xFF) if the array is created from a negative <xref:System.Numerics.BigInteger> value. The bit is not set (the value of the byte is zero), if the array is created from a positive <xref:System.Numerics.BigInteger> value.  \n  \n [!code-csharp[System.Numerics.BigInteger.ctors#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#2)]\n [!code-vb[System.Numerics.BigInteger.ctors#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#2)]  \n  \n The following example illustrates how to make sure that a positive value is not incorrectly instantiated as a negative value by adding a byte whose value is zero to the end of the array.  \n  \n [!code-csharp[System.Numerics.BigInteger.ctors#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.ctors#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example1.vb#3)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public BigInteger (byte[] value);
    parameters:
    - id: value
      type: System.Byte[]
      description: An array of byte values in little-endian order.
  overload: System.Numerics.BigInteger.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>value</code> is `null`.
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.#ctor(System.Decimal)
  commentId: M:System.Numerics.BigInteger.#ctor(System.Decimal)
  id: '#ctor(System.Decimal)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: BigInteger(Decimal)
  nameWithType: BigInteger.BigInteger(Decimal)
  fullName: BigInteger.BigInteger(Decimal)
  type: Constructor
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger"></xref> structure using a <xref href="System.Decimal"></xref> value.
  remarks: "The result of calling this constructor is identical to explicitly assigning a <xref:System.Decimal> value to a <xref:System.Numerics.BigInteger> variable.  \n  \n Calling this constructor can cause data loss; any fractional part of `value` is truncated when instantiating a <xref:System.Numerics.BigInteger> object."
  example:
  - "The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object. It defines an array of <xref:System.Decimal> values, and then passes each value to the <xref:System.Numerics.BigInteger.%23ctor%28System.Decimal%29> constructor. Note that the <xref:System.Decimal> value is truncated instead of rounded when it is assigned to the <xref:System.Numerics.BigInteger> object.  \n  \n [!code-csharp[System.Numerics.BigInteger.ctors#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#4)]\n [!code-vb[System.Numerics.BigInteger.ctors#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#4)]"
  syntax:
    content: public BigInteger (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: A decimal number.
  overload: System.Numerics.BigInteger.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.#ctor(System.Double)
  commentId: M:System.Numerics.BigInteger.#ctor(System.Double)
  id: '#ctor(System.Double)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: BigInteger(Double)
  nameWithType: BigInteger.BigInteger(Double)
  fullName: BigInteger.BigInteger(Double)
  type: Constructor
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger"></xref> structure using a double-precision floating-point value.
  remarks: "Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.  \n  \n Because of the lack of precision of the <xref:System.Double> data type, calling this constructor can cause data loss.  \n  \n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Double> value to a <xref:System.Numerics.BigInteger>."
  example:
  - "The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Double%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object. It also illustrates the loss of precision that may occur when you use the <xref:System.Double> data type. A <xref:System.Double> is assigned a large value, which is then assigned to a <xref:System.Numerics.BigInteger> object. As the output shows, this assignment involves a loss of precision. Both values are then incremented by one. The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Double> object does not.  \n  \n [!code-csharp[System.Numerics.BigInteger.ctors#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#5)]\n [!code-vb[System.Numerics.BigInteger.ctors#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#5)]"
  syntax:
    content: public BigInteger (double value);
    parameters:
    - id: value
      type: System.Double
      description: A double-precision floating-point value.
  overload: System.Numerics.BigInteger.#ctor*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "The value of <code>value</code> is <xref href=\"System.Double.NaN\"></xref>.  \n  \n -or-  \n  \n The value of <code>value</code> is <xref href=\"System.Double.NegativeInfinity\"></xref>.  \n  \n -or-  \n  \n The value of <code>value</code> is <xref href=\"System.Double.PositiveInfinity\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.#ctor(System.Int32)
  commentId: M:System.Numerics.BigInteger.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: BigInteger(Int32)
  nameWithType: BigInteger.BigInteger(Int32)
  fullName: BigInteger.BigInteger(Int32)
  type: Constructor
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger"></xref> structure using a 32-bit signed integer value.
  remarks: "There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.  \n  \n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int32> value to a <xref:System.Numerics.BigInteger>.  \n  \n The <xref:System.Numerics.BigInteger> structure does not include constructors with a parameter of type <xref:System.Byte>, <xref:System.Int16>, <xref:System.SByte>, or <xref:System.UInt16>. However, the <xref:System.Int32> type supports the implicit conversion of 8-bit and 16-bit signed and unsigned integers to signed 32-bit integers. As a result, this constructor is called if `value` is any one of these four integral types."
  example:
  - "The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int32%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 32-bit integers. It also uses implicit conversion to assign each 32-bit integer value to a <xref:System.Numerics.BigInteger> variable. It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.  \n  \n [!code-csharp[System.Numerics.BigInteger.ctors#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#6)]\n [!code-vb[System.Numerics.BigInteger.ctors#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#6)]"
  syntax:
    content: public BigInteger (int value);
    parameters:
    - id: value
      type: System.Int32
      description: A 32-bit signed integer.
  overload: System.Numerics.BigInteger.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.#ctor(System.Int64)
  commentId: M:System.Numerics.BigInteger.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: BigInteger(Int64)
  nameWithType: BigInteger.BigInteger(Int64)
  fullName: BigInteger.BigInteger(Int64)
  type: Constructor
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger"></xref> structure using a 64-bit signed integer value.
  remarks: "There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> object by using this constructor.  \n  \n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning an <xref:System.Int64> value to a <xref:System.Numerics.BigInteger>."
  example:
  - "The following example calls the <xref:System.Numerics.BigInteger.%23ctor%28System.Int64%29> constructor to instantiate <xref:System.Numerics.BigInteger> values from an array of 64-bit integers. It also uses implicit conversion to assign each 64-bit integer value to a <xref:System.Numerics.BigInteger> variable. It then compares the two values to establish that the resulting <xref:System.Numerics.BigInteger> values are the same.  \n  \n [!code-csharp[System.Numerics.BigInteger.ctors#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#7)]\n [!code-vb[System.Numerics.BigInteger.ctors#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#7)]"
  syntax:
    content: public BigInteger (long value);
    parameters:
    - id: value
      type: System.Int64
      description: A 64-bit signed integer.
  overload: System.Numerics.BigInteger.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.#ctor(System.Single)
  commentId: M:System.Numerics.BigInteger.#ctor(System.Single)
  id: '#ctor(System.Single)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: BigInteger(Single)
  nameWithType: BigInteger.BigInteger(Single)
  fullName: BigInteger.BigInteger(Single)
  type: Constructor
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger"></xref> structure using a single-precision floating-point value.
  remarks: "Any fractional part of the `value` parameter is truncated when instantiating a <xref:System.Numerics.BigInteger> object.  \n  \n Because of the lack of precision of the <xref:System.Single> data type, calling this constructor can result in data loss.  \n  \n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from explicitly assigning a <xref:System.Single> value to a <xref:System.Numerics.BigInteger>."
  example:
  - "The following example illustrates the use of the <xref:System.Numerics.BigInteger.%23ctor%28System.Single%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object. It also illustrates the loss of precision that may occur when you use the <xref:System.Single> data type. A <xref:System.Single> is assigned a large negative value, which is then assigned to a <xref:System.Numerics.BigInteger> object. As the output shows, this assignment involves a loss of precision. Both values are then incremented by one. The output shows that the <xref:System.Numerics.BigInteger> object reflects the changed value, whereas the <xref:System.Single> object does not.  \n  \n [!code-csharp[System.Numerics.BigInteger.ctors#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#8)]\n [!code-vb[System.Numerics.BigInteger.ctors#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#8)]"
  syntax:
    content: public BigInteger (float value);
    parameters:
    - id: value
      type: System.Single
      description: A single-precision floating-point value.
  overload: System.Numerics.BigInteger.#ctor*
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "The value of <code>value</code> is <xref href=\"System.Single.NaN\"></xref>.  \n  \n -or-  \n  \n The value of <code>value</code> is <xref href=\"System.Single.NegativeInfinity\"></xref>.  \n  \n -or-  \n  \n The value of <code>value</code> is <xref href=\"System.Single.PositiveInfinity\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.#ctor(System.UInt32)
  commentId: M:System.Numerics.BigInteger.#ctor(System.UInt32)
  id: '#ctor(System.UInt32)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: BigInteger(UInt32)
  nameWithType: BigInteger.BigInteger(UInt32)
  fullName: BigInteger.BigInteger(UInt32)
  type: Constructor
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger"></xref> structure using an unsigned 32-bit integer value.
  remarks: "There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.  \n  \n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt32> value to a <xref:System.Numerics.BigInteger>."
  example:
  - "The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt32%29> constructor and an assignment statement to initialize <xref:System.Numerics.BigInteger> values from an array of unsigned 32-bit integers. It then compares the two values to demonstrate that the two methods of initializing a <xref:System.Numerics.BigInteger> value produce identical results.  \n  \n [!code-csharp[System.Numerics.BigInteger.ctors#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#9)]\n [!code-vb[System.Numerics.BigInteger.ctors#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#9)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public BigInteger (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: An unsigned 32-bit integer value.
  overload: System.Numerics.BigInteger.#ctor*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Numerics.BigInteger.#ctor(System.Int64)
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.#ctor(System.UInt64)
  commentId: M:System.Numerics.BigInteger.#ctor(System.UInt64)
  id: '#ctor(System.UInt64)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: BigInteger(UInt64)
  nameWithType: BigInteger.BigInteger(UInt64)
  fullName: BigInteger.BigInteger(UInt64)
  type: Constructor
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger"></xref> structure with an unsigned 64-bit integer value.
  remarks: "There is no loss of precision when instantiating a <xref:System.Numerics.BigInteger> using this constructor.  \n  \n The <xref:System.Numerics.BigInteger> value that results from calling this constructor is identical to the value that results from assigning a <xref:System.UInt64> value to a <xref:System.Numerics.BigInteger>."
  example:
  - "The following example uses the <xref:System.Numerics.BigInteger.%23ctor%28System.UInt64%29> constructor to instantiate a <xref:System.Numerics.BigInteger> object whose value is equal to <xref:System.UInt64.MaxValue>.  \n  \n [!code-csharp[System.Numerics.BigInteger.ctors#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/cs/Example2.cs#10)]\n [!code-vb[System.Numerics.BigInteger.ctors#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ctors/vb/Example2.vb#10)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public BigInteger (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: An unsigned 64-bit integer.
  overload: System.Numerics.BigInteger.#ctor*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Numerics.BigInteger.#ctor(System.Double)
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)
  id: Abs(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Abs(BigInteger)
  nameWithType: BigInteger.Abs(BigInteger)
  fullName: BigInteger.Abs(BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Gets the absolute value of a <xref href="System.Numerics.BigInteger"></xref> object.
  remarks: "The absolute value of a number is that number without its sign, as shown in the following table.  \n  \n|`value` parameter|Return value|  \n|-----------------------|------------------|  \n|`value` >= 0|`value`|  \n|`value` < 0|`value` * -1|  \n  \n The <xref:System.Numerics.BigInteger.Abs%2A> method is equivalent to the <xref:System.Math.Abs%2A?displayProperty=fullName> method for the primitive numeric types."
  example:
  - "The following example uses the <xref:System.Numerics.BigInteger.Abs%2A> method to convert a <xref:System.Numerics.BigInteger> value from two's complement representation to sign-and-magnitude representation before serializing it to a file. Data in the file is then deserialized and assigned to a new <xref:System.Numerics.BigInteger> object.  \n  \n [!code-csharp[System.Numerics.BigInteger.Abs#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/cs/Abs1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Abs#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Abs/vb/Abs1.vb#1)]"
  syntax:
    content: public static System.Numerics.BigInteger Abs (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: A number.
    return:
      type: System.Numerics.BigInteger
      description: The absolute value of <code>value</code>.
  overload: System.Numerics.BigInteger.Abs*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Add(BigInteger, BigInteger)
  nameWithType: BigInteger.Add(BigInteger, BigInteger)
  fullName: BigInteger.Add(BigInteger, BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Adds two <xref href="System.Numerics.BigInteger"></xref> values and returns the result.
  remarks: "Languages that do not support operator overloading or custom operators can use the <xref:System.Numerics.BigInteger.Add%2A> method to perform addition using <xref:System.Numerics.BigInteger> values.  \n  \n The <xref:System.Numerics.BigInteger.Add%2A> method is a useful substitute for the addition operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a sum that results from addition, as shown in the following example.  \n  \n [!code-csharp[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#2)]\n [!code-vb[System.Numerics.BigInteger.OperationMethods#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#2)]"
  syntax:
    content: public static System.Numerics.BigInteger Add (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to add.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to add.
    return:
      type: System.Numerics.BigInteger
      description: The sum of <code>left</code> and <code>right</code>.
  overload: System.Numerics.BigInteger.Add*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Compare(BigInteger, BigInteger)
  nameWithType: BigInteger.Compare(BigInteger, BigInteger)
  fullName: BigInteger.Compare(BigInteger, BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Compares two <xref href="System.Numerics.BigInteger"></xref> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.
  remarks: "Although the <xref:System.Numerics.BigInteger> type has no fixed range, comparisons of <xref:System.Numerics.BigInteger> values are not characterized by the lack of precision that characterizes the comparison of floating-point numbers. The following example compares two <xref:System.Numerics.BigInteger> values that differ by one and that each have 1,896 digits. The <xref:System.Numerics.BigInteger.Compare%2A> method correctly reports that the two values are not equal.  \n  \n [!code-csharp[System.Numerics.BigInteger.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/cs/Compare1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Compare/vb/Compare1.vb#1)]"
  syntax:
    content: public static int Compare (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Int32
      description: "A signed integer that indicates the relative values of <code>left</code> and <code>right</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Condition  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>left</code> is less than <code>right</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>left</code> equals <code>right</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>left</code> is greater than <code>right</code>.  \n  \n </td></tr></tbody></table>"
  overload: System.Numerics.BigInteger.Compare*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.CompareTo(System.UInt64)
  commentId: M:System.Numerics.BigInteger.CompareTo(System.UInt64)
  id: CompareTo(System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: CompareTo(UInt64)
  nameWithType: BigInteger.CompareTo(UInt64)
  fullName: BigInteger.CompareTo(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public int CompareTo (ulong other);
    parameters:
    - id: other
      type: System.UInt64
      description: The unsigned 64-bit integer to compare.
    return:
      type: System.Int32
      description: "A signed integer that indicates the relative value of this instance and <code>other</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The current instance is less than <code>other</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The current instance equals <code>other</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The current instance is greater than <code>other</code>.  \n  \n </td></tr></tbody></table>"
  overload: System.Numerics.BigInteger.CompareTo*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.CompareTo(System.Object)
  commentId: M:System.Numerics.BigInteger.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: CompareTo(Object)
  nameWithType: BigInteger.CompareTo(Object)
  fullName: BigInteger.CompareTo(Object)
  type: Method
  assemblies:
  - System.Numerics
  - netstandard
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Compares this instance to a specified object and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.
  remarks: "This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable.CompareTo%2A?displayProperty=fullName> method. It is used by non-generic collection objects to order the items in the collection.  \n  \n The `obj` parameter must be one of the following:  \n  \n-   An object whose run-time type is <xref:System.Numerics.BigInteger>.  \n  \n-   An <xref:System.Object> variable whose value is `null`. If the value of the `obj` parameter is `null`, the method returns 1, which indicates that that the current instance is greater than `obj`."
  example:
  - "The following example calls the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method to compare a <xref:System.Numerics.BigInteger> value with each element in an object array  \n  \n [!code-csharp[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#4)]\n [!code-vb[System.Numerics.BigInteger.CompareTo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#4)]"
  syntax:
    content: public int CompareTo (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare.
    return:
      type: System.Int32
      description: "A signed integer that indicates the relationship of the current instance to the <code>obj</code> parameter, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The current instance is less than <code>obj</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The current instance equals <code>obj</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The current instance is greater than <code>obj</code>, or the <code>obj</code> parameter is `null`.  \n  \n </td></tr></tbody></table>"
  overload: System.Numerics.BigInteger.CompareTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <code>obj</code> is not a <xref href="System.Numerics.BigInteger"></xref>.
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)
  id: CompareTo(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: CompareTo(BigInteger)
  nameWithType: BigInteger.CompareTo(BigInteger)
  fullName: BigInteger.CompareTo(BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Compares this instance to a second <xref href="System.Numerics.BigInteger"></xref> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.
  remarks: This overload of the <xref:System.Numerics.BigInteger.CompareTo%2A> method implements the <xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName> method. It is used by generic collection objects to order the items in the collection.
  example:
  - "The following example illustrates the use of the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29> method to order a list of `StarInfo` objects. Each `StarInfo` object provides information about a star's name and its distance from the Earth in miles. `StarInfo` implements the <xref:System.IComparable%601> interface, which enables `StarInfo` objects to be sorted by generic collection classes. Its <xref:System.IComparable%601.CompareTo%2A?displayProperty=fullName> implementation just wraps a call to <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29>.  \n  \n [!code-csharp[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#1)]  \n  \n The following code then instantiates four `StarInfo` objects and stores them in a generic <xref:System.Collections.Generic.List%601> object. After the <xref:System.Collections.Generic.List%601.Sort%2A?displayProperty=fullName> method is called, `StarInfo` objects are displayed in order of their distance from the Earth.  \n  \n [!code-csharp[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example1.cs#2)]\n [!code-vb[System.Numerics.BigInteger.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example1.vb#2)]"
  syntax:
    content: public int CompareTo (System.Numerics.BigInteger other);
    parameters:
    - id: other
      type: System.Numerics.BigInteger
      description: The object to compare.
    return:
      type: System.Int32
      description: "A signed integer value that indicates the relationship of this instance to <code>other</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The current instance is less than <code>other</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The current instance equals <code>other</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The current instance is greater than <code>other</code>.  \n  \n </td></tr></tbody></table>"
  overload: System.Numerics.BigInteger.CompareTo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.CompareTo(System.Int64)
  commentId: M:System.Numerics.BigInteger.CompareTo(System.Int64)
  id: CompareTo(System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: CompareTo(Int64)
  nameWithType: BigInteger.CompareTo(Int64)
  fullName: BigInteger.CompareTo(Int64)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.
  remarks: If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method is called.
  example:
  - "The following example illustrates the result of calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29> method with integral values.  \n  \n [!code-csharp[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/cs/Example2.cs#3)]\n [!code-vb[System.Numerics.BigInteger.CompareTo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.CompareTo/vb/Example2.vb#3)]"
  syntax:
    content: public int CompareTo (long other);
    parameters:
    - id: other
      type: System.Int64
      description: The signed 64-bit integer to compare.
    return:
      type: System.Int32
      description: "A signed integer value that indicates the relationship of this instance to <code>other</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Return value  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td> The current instance is less than <code>other</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td> The current instance equals <code>other</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td> The current instance is greater than <code>other</code>.  \n  \n </td></tr></tbody></table>"
  overload: System.Numerics.BigInteger.CompareTo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Divide(BigInteger, BigInteger)
  nameWithType: BigInteger.Divide(BigInteger, BigInteger)
  fullName: BigInteger.Divide(BigInteger, BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Divides one <xref href="System.Numerics.BigInteger"></xref> value by another and returns the result.
  remarks: "The <xref:System.Numerics.BigInteger.Divide%2A> method performs integer division; any remainder that results from the division is discarded. To perform integer division while preserving the remainder, call the <xref:System.Numerics.BigInteger.DivRem%2A> method. To retrieve only the remainder, call the <xref:System.Numerics.BigInteger.Remainder%2A> method.  \n  \n The <xref:System.Numerics.BigInteger.Divide%2A> method can be used by languages that do not support operator overloading. Its behavior is identical to division using the division operator."
  example:
  - "The following example creates an array of <xref:System.Numerics.BigInteger> values. It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.  \n  \n [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]"
  syntax:
    content: public static System.Numerics.BigInteger Divide (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);
    parameters:
    - id: dividend
      type: System.Numerics.BigInteger
      description: The value to be divided.
    - id: divisor
      type: System.Numerics.BigInteger
      description: The value to divide by.
    return:
      type: System.Numerics.BigInteger
      description: The quotient of the division.
  overload: System.Numerics.BigInteger.Divide*
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: <code>divisor</code> is 0 (zero).
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  commentId: M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  id: DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: DivRem(BigInteger, BigInteger, BigInteger)
  nameWithType: BigInteger.DivRem(BigInteger, BigInteger, BigInteger)
  fullName: BigInteger.DivRem(BigInteger, BigInteger, BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Divides one <xref href="System.Numerics.BigInteger"></xref> value by another, returns the result, and returns the remainder in an output parameter.
  remarks: "This method preserves both the quotient and the remainder that results from integer division. If you are not interested in the remainder, use the <xref:System.Numerics.BigInteger.Divide%2A> method or the division operator; if you are only interested in the remainder, use the <xref:System.Numerics.BigInteger.Remainder%2A> method.  \n  \n The sign of the returned `remainder` value is the same as the sign of the `dividend` parameter.  \n  \n The behavior of the <xref:System.Numerics.BigInteger.DivRem%2A> method is identical to that of the <xref:System.Math.DivRem%2A?displayProperty=fullName> method."
  example:
  - "The following example creates an array of <xref:System.Numerics.BigInteger> values. It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.  \n  \n [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]"
  syntax:
    content: public static System.Numerics.BigInteger DivRem (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor, out System.Numerics.BigInteger remainder);
    parameters:
    - id: dividend
      type: System.Numerics.BigInteger
      description: The value to be divided.
    - id: divisor
      type: System.Numerics.BigInteger
      description: The value to divide by.
    - id: remainder
      type: System.Numerics.BigInteger
      description: When this method returns, contains a <xref href="System.Numerics.BigInteger"></xref> value that represents the remainder from the division. This parameter is passed uninitialized.
    return:
      type: System.Numerics.BigInteger
      description: The quotient of the division.
  overload: System.Numerics.BigInteger.DivRem*
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: <code>divisor</code> is 0 (zero).
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Equals(System.Int64)
  commentId: M:System.Numerics.BigInteger.Equals(System.Int64)
  id: Equals(System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Equals(Int64)
  nameWithType: BigInteger.Equals(Int64)
  fullName: BigInteger.Equals(Int64)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.
  remarks: "If `other` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the method is called.  \n  \n To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method."
  example:
  - "The following example instantiates a <xref:System.Numerics.BigInteger> object from each integral type except <xref:System.UInt64>. It then calls the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29> method to compare the <xref:System.Numerics.BigInteger> value with the original integer value that was passed to the <xref:System.Numerics.BigInteger> constructor. As the output shows, the values are equal in each case.  \n  \n [!code-cpp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals.cpp#1)]\n [!code-csharp[System.Numerics.BigInteger.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#1)]"
  syntax:
    content: public bool Equals (long other);
    parameters:
    - id: other
      type: System.Int64
      description: The signed 64-bit integer value to compare.
    return:
      type: System.Boolean
      description: '`true` if the signed 64-bit integer and the current instance have the same value; otherwise, `false`.'
  overload: System.Numerics.BigInteger.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
  id: Equals(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Equals(BigInteger)
  nameWithType: BigInteger.Equals(BigInteger)
  fullName: BigInteger.Equals(BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether the current instance and a specified <xref href="System.Numerics.BigInteger"></xref> object have the same value.
  remarks: "This method implements the <xref:System.IEquatable%601> interface and performs slightly better than <xref:System.Numerics.BigInteger.Equals%28System.Object%29> because it does not have to convert the `other` parameter to a <xref:System.Numerics.BigInteger> object.  \n  \n To determine the relationship between the two <xref:System.Numerics.BigInteger> objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Numerics.BigInteger%29?displayProperty=fullName> method."
  example:
  - "The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal. The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.  \n  \n [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]\n [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]\n [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]"
  syntax:
    content: public bool Equals (System.Numerics.BigInteger other);
    parameters:
    - id: other
      type: System.Numerics.BigInteger
      description: The object to compare.
    return:
      type: System.Boolean
      description: '`true` if this <xref href="System.Numerics.BigInteger"></xref> object and <code>other</code> have the same value; otherwise, `false`.'
  overload: System.Numerics.BigInteger.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Equals(System.Object)
  commentId: M:System.Numerics.BigInteger.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: BigInteger.Equals(Object)
  fullName: BigInteger.Equals(Object)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Returns a value that indicates whether the current instance and a specified object have the same value.
  remarks: "If the `obj` argument is not a <xref:System.Numerics.BigInteger> value, the method returns `false`. The method returns `true` only if `obj` is a <xref:System.Numerics.BigInteger> instance whose value is equal to the current instance.  \n  \n To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.Object%29> method."
  example:
  - "The following example defines parallel <xref:System.Object> and <xref:System.Numerics.BigInteger> arrays. Each element of one array has the same value as the corresponding element of the second array. As the output from the example shows, the instance in the <xref:System.Numerics.BigInteger> array is considered to be equal to the instance in the <xref:System.Object> array only if the latter is a <xref:System.Numerics.BigInteger> and their values are equal.  \n  \n [!code-csharp[System.Numerics.BigInteger.Equals#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/Equals_Obj1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Equals#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/Equals_Obj1.vb#3)]"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare.
    return:
      type: System.Boolean
      description: '`true` if the <code>obj</code> argument is a <xref href="System.Numerics.BigInteger"></xref> object, and its value is equal to the value of the current <xref href="System.Numerics.BigInteger"></xref> instance; otherwise, `false`.'
  overload: System.Numerics.BigInteger.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Equals(System.UInt64)
  commentId: M:System.Numerics.BigInteger.Equals(System.UInt64)
  id: Equals(System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Equals(UInt64)
  nameWithType: BigInteger.Equals(UInt64)
  fullName: BigInteger.Equals(UInt64)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.
  remarks: To determine the relationship between the two objects instead of just testing for equality, call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method.
  example:
  - "The following example compares the approximate distance of several stars from Earth with the distance of Epsilon Indi from Earth to determine whether they are equal. The example uses each overload of the <xref:System.Numerics.BigInteger.Equals%2A> method to test for equality.  \n  \n [!code-cpp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cpp/equals2.cpp#2)]\n [!code-csharp[System.Numerics.BigInteger.Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/cs/EqualsExample1.cs#2)]\n [!code-vb[System.Numerics.BigInteger.Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Equals/vb/EqualsExample1.vb#2)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public bool Equals (ulong other);
    parameters:
    - id: other
      type: System.UInt64
      description: The unsigned 64-bit integer to compare.
    return:
      type: System.Boolean
      description: '`true` if the current instance and the unsigned 64-bit integer have the same value; otherwise, `false`.'
  overload: System.Numerics.BigInteger.Equals*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.GetHashCode
  commentId: M:System.Numerics.BigInteger.GetHashCode
  id: GetHashCode
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: BigInteger.GetHashCode()
  fullName: BigInteger.GetHashCode()
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Returns the hash code for the current <xref href="System.Numerics.BigInteger"></xref> object.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overload: System.Numerics.BigInteger.GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: GreatestCommonDivisor(BigInteger, BigInteger)
  nameWithType: BigInteger.GreatestCommonDivisor(BigInteger, BigInteger)
  fullName: BigInteger.GreatestCommonDivisor(BigInteger, BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Finds the greatest common divisor of two <xref href="System.Numerics.BigInteger"></xref> values.
  remarks: "The greatest common divisor is the largest number into which the two <xref:System.Numerics.BigInteger> values can be divided without returning a remainder.  \n  \n If the `left` and `right` parameters are non-zero numbers, the method always returns at least a value of 1 because all numbers can be divided by 1. If either parameter is zero, the method returns the absolute value of the non-zero parameter. If both values are zero, the method returns zero.  \n  \n> [!NOTE]\n>  Computing the greatest common divisor of very large values of `left` and `right` can be a very time-consuming operation.  \n  \n The value returned by the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method is always positive regardless of the sign of the `left` and `right` parameters."
  example:
  - "The following example illustrates a call to the <xref:System.Numerics.BigInteger.GreatestCommonDivisor%2A> method and the exception handling necessary to provide useful information about an <xref:System.ArgumentOutOfRangeException>. The result indicates that the greatest common divisor of these two numbers is 1.  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#10)]\n [!code-vb[System.Numeric.BigInteger.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#10)]"
  syntax:
    content: public static System.Numerics.BigInteger GreatestCommonDivisor (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value.
    return:
      type: System.Numerics.BigInteger
      description: The greatest common divisor of <code>left</code> and <code>right</code>.
  overload: System.Numerics.BigInteger.GreatestCommonDivisor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.IsEven
  commentId: P:System.Numerics.BigInteger.IsEven
  id: IsEven
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: IsEven
  nameWithType: BigInteger.IsEven
  fullName: BigInteger.IsEven
  type: Property
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Indicates whether the value of the current <xref href="System.Numerics.BigInteger"></xref> object is an even number.
  remarks: "This property is a convenience feature that indicates whether a <xref:System.Numerics.BigInteger> value is evenly divisible by two. It is equivalent to the following expression:  \n  \n```csharp  \nvalue % 2 == 0;  \n```  \n  \n```vb  \nvalue Mod 2 = 0  \n```  \n  \n If the value of the current <xref:System.Numerics.BigInteger> object is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>, the property returns `true`."
  syntax:
    content: public bool IsEven { get; }
    return:
      type: System.Boolean
      description: '`true` if the value of the <xref href="System.Numerics.BigInteger"></xref> object is an even number; otherwise, `false`.'
  overload: System.Numerics.BigInteger.IsEven*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.IsOne
  commentId: P:System.Numerics.BigInteger.IsOne
  id: IsOne
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: IsOne
  nameWithType: BigInteger.IsOne
  fullName: BigInteger.IsOne
  type: Property
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Indicates whether the value of the current <xref href="System.Numerics.BigInteger"></xref> object is <xref href="System.Numerics.BigInteger.One"></xref>.
  remarks: This property offers significantly better performance than other comparisons with one, such as `thisBigInteger.Equals(BigInteger.One)`.
  syntax:
    content: public bool IsOne { get; }
    return:
      type: System.Boolean
      description: '`true` if the value of the <xref href="System.Numerics.BigInteger"></xref> object is <xref href="System.Numerics.BigInteger.One"></xref>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.IsOne*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.IsPowerOfTwo
  commentId: P:System.Numerics.BigInteger.IsPowerOfTwo
  id: IsPowerOfTwo
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: IsPowerOfTwo
  nameWithType: BigInteger.IsPowerOfTwo
  fullName: BigInteger.IsPowerOfTwo
  type: Property
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Indicates whether the value of the current <xref href="System.Numerics.BigInteger"></xref> object is a power of two.
  remarks: This property determines whether a <xref:System.Numerics.BigInteger> value has a single non-zero bit set. This means that it returns `true` if the value of the current <xref:System.Numerics.BigInteger> object is 1 (that is, 2<sup>0</sup>) or any greater power of two. It returns `false` if the value of the current <xref:System.Numerics.BigInteger> object is 0.
  syntax:
    content: public bool IsPowerOfTwo { get; }
    return:
      type: System.Boolean
      description: '`true` if the value of the <xref href="System.Numerics.BigInteger"></xref> object is a power of two; otherwise, `false`.'
  overload: System.Numerics.BigInteger.IsPowerOfTwo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.IsZero
  commentId: P:System.Numerics.BigInteger.IsZero
  id: IsZero
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: IsZero
  nameWithType: BigInteger.IsZero
  fullName: BigInteger.IsZero
  type: Property
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Indicates whether the value of the current <xref href="System.Numerics.BigInteger"></xref> object is <xref href="System.Numerics.BigInteger.Zero"></xref>.
  remarks: This property offers significantly better performance than `BigInteger.Equals(BigInteger.Zero)`.
  syntax:
    content: public bool IsZero { get; }
    return:
      type: System.Boolean
      description: '`true` if the value of the <xref href="System.Numerics.BigInteger"></xref> object is <xref href="System.Numerics.BigInteger.Zero"></xref>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.IsZero*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Log(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)
  id: Log(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Log(BigInteger)
  nameWithType: BigInteger.Log(BigInteger)
  fullName: BigInteger.Log(BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the natural (base `e`) logarithm of a specified number.
  remarks: "The `value` parameter is specified as a base 10 number.  \n  \n The precise return value of this method depends on the sign of `value`, as the following table shows.  \n  \n|Sign of `value` parameter|Return value|  \n|-------------------------------|------------------|  \n|Positive|The natural logarithm of `value`; that is, ln `value`, or log e`value`.|  \n|Zero|<xref:System.Double.NegativeInfinity>.|  \n|Negative|<xref:System.Double.NaN>.|  \n  \n To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method. To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29> method.  \n  \n You can find the square root of a number by calling the <xref:System.Numerics.BigInteger.Log%2A> method along with the <xref:System.Math.Exp%2A?displayProperty=fullName> method. Note that the result is <xref:System.Double.PositiveInfinity?displayProperty=fullName> if the result is greater than <xref:System.Double.MaxValue?displayProperty=fullName>. The following example calculates the square root of each element in an array of <xref:System.Numerics.BigInteger> values.  \n  \n [!code-csharp[System.Numerics.BigInteger.Log#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.numerics.biginteger.log/cs/log1.cs#1)] \n [!code-vb[System.Numerics.BigInteger.Log#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.numerics.biginteger.log/vb/log1.vb#1)]   \n  \n This method corresponds to the <xref:System.Math.Log%28System.Double%29?displayProperty=fullName> method for the primitive numeric types."
  syntax:
    content: public static double Log (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The number whose logarithm is to be found.
    return:
      type: System.Double
      description: The natural (base `e`) logarithm of <code>value</code>, as shown in the table in the Remarks section.
  overload: System.Numerics.BigInteger.Log*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The natural log of <code>value</code> is out of range of the <xref href="System.Double"></xref> data type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)
  commentId: M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)
  id: Log(System.Numerics.BigInteger,System.Double)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Log(BigInteger, Double)
  nameWithType: BigInteger.Log(BigInteger, Double)
  fullName: BigInteger.Log(BigInteger, Double)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the logarithm of a specified number in a specified base.
  remarks: "The `value` and `baseValue` parameters are specified as base 10 numbers.  \n  \n The precise return value of the method depends on the sign of `value` and on the sign and value of `baseValue`, as the following table shows.  \n  \n|`value` parameter|`baseValue` parameter|Return value|  \n|-----------------------|---------------------------|------------------|  \n|`value` > 0|(0 < `baseValue` < 1) -or-(`baseValue` > 1)|logbaseValue(`value`)|  \n|`value` < 0|(any value)|<xref:System.Double?displayProperty=fullName>|  \n|(any value)|`baseValue` < 0|<xref:System.Double?displayProperty=fullName>|  \n|`value` != 1|`baseValue` = 0|<xref:System.Double?displayProperty=fullName>|  \n|`value` != 1|`baseValue` = <xref:System.Double?displayProperty=fullName>|<xref:System.Double?displayProperty=fullName>|  \n|(any value)|`baseValue` = <xref:System.Double?displayProperty=fullName>|<xref:System.Double?displayProperty=fullName>|  \n|(any value)|`baseValue` = 1|<xref:System.Double?displayProperty=fullName>|  \n|`value` = 0|0 < `baseValue` < 1|<xref:System.Double?displayProperty=fullName>|  \n|`value` = 0|`baseValue` > 1|<xref:System.Double.PositiveInfinity?displayProperty=fullName>|  \n|`value` = 1|`baseValue` = 0|0|  \n|`value` = 1|`baseValue` = <xref:System.Double.PositiveInfinity?displayProperty=fullName>|0|  \n  \n To calculate the base 10 logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log10%2A> method. To calculate the natural logarithm of a number, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29> method.  \n  \n This method corresponds to the <xref:System.Math.Log%2A?displayProperty=fullName> method for the primitive numeric types."
  syntax:
    content: public static double Log (System.Numerics.BigInteger value, double baseValue);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: A number whose logarithm is to be found.
    - id: baseValue
      type: System.Double
      description: The base of the logarithm.
    return:
      type: System.Double
      description: The base <code>baseValue</code> logarithm of <code>value</code>, as shown in the table in the Remarks section.
  overload: System.Numerics.BigInteger.Log*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The log of <code>value</code> is out of range of the <xref href="System.Double"></xref> data type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  id: Log10(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Log10(BigInteger)
  nameWithType: BigInteger.Log10(BigInteger)
  fullName: BigInteger.Log10(BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the base 10 logarithm of a specified number.
  remarks: "The `value` parameter is specified as a base 10 number.  \n  \n The precise return value of the method depends on the sign of `value`, as the following table shows.  \n  \n|Sign of value parameter|Return value|  \n|-----------------------------|------------------|  \n|Positive|The base 10 log of `value`; that is, log10`value`.|  \n|Zero|<xref:System.Double?displayProperty=fullName>.|  \n|Negative|<xref:System.Double?displayProperty=fullName>.|  \n  \n To calculate the natural logarithm of a <xref:System.Numerics.BigInteger> value, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%29?displayProperty=fullName> method. To calculate the logarithm of a number in another base, call the <xref:System.Numerics.BigInteger.Log%28System.Numerics.BigInteger%2CSystem.Double%29?displayProperty=fullName> method.  \n  \n This method corresponds to the <xref:System.Math.Log10%2A?displayProperty=fullName> method for the primitive numeric types."
  syntax:
    content: public static double Log10 (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: A number whose logarithm is to be found.
    return:
      type: System.Double
      description: The base 10 logarithm of <code>value</code>, as shown in the table in the Remarks section.
  overload: System.Numerics.BigInteger.Log10*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The base 10 log of <code>value</code> is out of range of the <xref href="System.Double"></xref> data type.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Max(BigInteger, BigInteger)
  nameWithType: BigInteger.Max(BigInteger, BigInteger)
  fullName: BigInteger.Max(BigInteger, BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the larger of two <xref href="System.Numerics.BigInteger"></xref> values.
  remarks: This method corresponds to the <xref:System.Math.Max%2A?displayProperty=fullName> method for primitive numeric types.
  example:
  - "The following example uses the <xref:System.Numerics.BigInteger.Max%2A> method to select the largest number in an array of <xref:System.Numerics.BigInteger> values.  \n  \n [!code-csharp[System.Numerics.BigInteger.Max#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/cs/Max1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Max#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Max/vb/Max1.vb#1)]"
  syntax:
    content: public static System.Numerics.BigInteger Max (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Numerics.BigInteger
      description: The <code>left</code> or <code>right</code> parameter, whichever is larger.
  overload: System.Numerics.BigInteger.Max*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Min(BigInteger, BigInteger)
  nameWithType: BigInteger.Min(BigInteger, BigInteger)
  fullName: BigInteger.Min(BigInteger, BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the smaller of two <xref href="System.Numerics.BigInteger"></xref> values.
  remarks: This method corresponds to the <xref:System.Math.Min%2A?displayProperty=fullName> method for primitive numeric types.
  example:
  - "The following example uses the <xref:System.Numerics.BigInteger.Min%2A> method to select the smallest number in an array of <xref:System.Numerics.BigInteger> values.  \n  \n [!code-csharp[System.Numerics.BigInteger.Min#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/cs/Min1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Min#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Min/vb/Min1.vb#1)]"
  syntax:
    content: public static System.Numerics.BigInteger Min (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Numerics.BigInteger
      description: The <code>left</code> or <code>right</code> parameter, whichever is smaller.
  overload: System.Numerics.BigInteger.Min*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.MinusOne
  commentId: P:System.Numerics.BigInteger.MinusOne
  id: MinusOne
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: MinusOne
  nameWithType: BigInteger.MinusOne
  fullName: BigInteger.MinusOne
  type: Property
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Gets a value that represents the number negative one (-1).
  remarks: The <xref:System.Numerics.BigInteger.MinusOne%2A> property is used to compare a <xref:System.Numerics.BigInteger> value to -1 or to assign -1 to a <xref:System.Numerics.BigInteger> object.
  syntax:
    content: public static System.Numerics.BigInteger MinusOne { get; }
    return:
      type: System.Numerics.BigInteger
      description: An integer whose value is negative one (-1).
  overload: System.Numerics.BigInteger.MinusOne*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: ModPow(BigInteger, BigInteger, BigInteger)
  nameWithType: BigInteger.ModPow(BigInteger, BigInteger, BigInteger)
  fullName: BigInteger.ModPow(BigInteger, BigInteger, BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Performs modulus division on a number raised to the power of another number.
  remarks: "The <xref:System.Numerics.BigInteger.ModPow%2A> method evaluates the following expression:  \n  \n (baseValue ^ exponent) Mod modulus  \n  \n To perform exponentiation on <xref:System.Numerics.BigInteger> values without modulus division, use the <xref:System.Numerics.BigInteger.Pow%2A> method."
  example:
  - "The following example provides a simple illustration of calling the <xref:System.Numerics.BigInteger.ModPow%2A> method.  \n  \n [!code-csharp[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/cs/ModPow1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.ModPow#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ModPow/vb/ModPow1.vb#1)]"
  syntax:
    content: public static System.Numerics.BigInteger ModPow (System.Numerics.BigInteger value, System.Numerics.BigInteger exponent, System.Numerics.BigInteger modulus);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The number to raise to the <code>exponent</code> power.
    - id: exponent
      type: System.Numerics.BigInteger
      description: The exponent to raise <code>value</code> by.
    - id: modulus
      type: System.Numerics.BigInteger
      description: The number by which to divide <code>value</code> raised to the <code>exponent</code> power.
    return:
      type: System.Numerics.BigInteger
      description: The remainder after dividing <code>value</code><sup>exponent</sup> by <code>modulus</code>.
  overload: System.Numerics.BigInteger.ModPow*
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: <code>modulus</code> is zero.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>exponent</code> is negative.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Multiply(BigInteger, BigInteger)
  nameWithType: BigInteger.Multiply(BigInteger, BigInteger)
  fullName: BigInteger.Multiply(BigInteger, BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the product of two <xref href="System.Numerics.BigInteger"></xref> values.
  remarks: "The <xref:System.Numerics.BigInteger.Multiply%2A> method is implemented for languages that do not support operator overloading. Its behavior is identical to multiplication using the multiplication operator. In addition, the <xref:System.Numerics.BigInteger.Multiply%2A> method is a useful substitute for the multiplication operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it a product that results from multiplication, as shown in the following example.  \n  \n [!code-csharp[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.OperationMethods#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#1)]  \n  \n If necessary, this method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects. This is illustrated in the example in the next section, where the <xref:System.Numerics.BigInteger.Multiply%2A> method is passed two <xref:System.Int64> values."
  example:
  - "The following example tries to perform multiplication with two long integers. Because the result exceeds the range of a long integer, an <xref:System.OverflowException> is thrown, and the <xref:System.Numerics.BigInteger.Multiply%2A> method is called to handle the multiplication. Note that C# requires that you use either the `checked` keyword (as in this example) or the `/checked+` compiler option to make sure an exception is thrown on a numeric overflow.  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#7)]\n [!code-vb[System.Numeric.BigInteger.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#7)]"
  syntax:
    content: public static System.Numerics.BigInteger Multiply (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first number to multiply.
    - id: right
      type: System.Numerics.BigInteger
      description: The second number to multiply.
    return:
      type: System.Numerics.BigInteger
      description: The product of the <code>left</code> and <code>right</code> parameters.
  overload: System.Numerics.BigInteger.Multiply*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)
  id: Negate(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Negate(BigInteger)
  nameWithType: BigInteger.Negate(BigInteger)
  fullName: BigInteger.Negate(BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Negates a specified <xref href="System.Numerics.BigInteger"></xref> value.
  remarks: "Negation obtains the additive inverse of a number. The additive inverse of a number is a number that produces a value of zero when it is added to the original number.  \n  \n The <xref:System.Numerics.BigInteger.Negate%2A> method is implemented for languages that do not support custom operators. Its behavior is identical to negation using the unary negation operator. In addition, the <xref:System.Numerics.BigInteger.Negate%2A> method is a useful substitute for the negation operator when instantiating a <xref:System.Numerics.BigInteger> variable, as shown in the following example.  \n  \n [!code-csharp[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#4)]\n [!code-vb[System.Numerics.BigInteger.OperationMethods#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#4)]"
  example:
  - "The following example illustrates three ways to negate the value of a <xref:System.Numerics.BigInteger> object.  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]\n [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]"
  syntax:
    content: public static System.Numerics.BigInteger Negate (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to negate.
    return:
      type: System.Numerics.BigInteger
      description: The result of the <code>value</code> parameter multiplied by negative one (-1).
  overload: System.Numerics.BigInteger.Negate*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.One
  commentId: P:System.Numerics.BigInteger.One
  id: One
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: One
  nameWithType: BigInteger.One
  fullName: BigInteger.One
  type: Property
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Gets a value that represents the number one (1).
  remarks: The <xref:System.Numerics.BigInteger.One%2A> property is usually used to compare a <xref:System.Numerics.BigInteger> value to 1 or to assign 1 to a <xref:System.Numerics.BigInteger> object.
  syntax:
    content: public static System.Numerics.BigInteger One { get; }
    return:
      type: System.Numerics.BigInteger
      description: An object whose value is one (1).
  overload: System.Numerics.BigInteger.One*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Addition(BigInteger, BigInteger)
  nameWithType: BigInteger.op_Addition(BigInteger, BigInteger)
  fullName: BigInteger.op_Addition(BigInteger, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Adds the values of two specified <xref href="System.Numerics.BigInteger"></xref> objects.
  remarks: "The <xref:System.Numerics.BigInteger.op_Addition%2A> method defines the addition operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#12)]\n [!code-vb[System.Numeric.BigInteger.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#12)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Add%2A> method instead."
  syntax:
    content: public static System.Numerics.BigInteger op_Addition (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to add.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to add.
    return:
      type: System.Numerics.BigInteger
      description: The sum of <code>left</code> and <code>right</code>.
  overload: System.Numerics.BigInteger.op_Addition*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_BitwiseAnd(BigInteger, BigInteger)
  nameWithType: BigInteger.op_BitwiseAnd(BigInteger, BigInteger)
  fullName: BigInteger.op_BitwiseAnd(BigInteger, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Performs a bitwise `And` operation on two <xref href="System.Numerics.BigInteger"></xref> values.
  remarks: "The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method defines the bitwise `And` operation for <xref:System.Numerics.BigInteger> values. The bitwise `And` operation sets a result bit only if the corresponding bits in `left` and `right` are also set, as shown in the following table.  \n  \n|Bit in `left`|Bit in `right`|Bit in result|  \n|-------------------|--------------------|-------------------|  \n|0|0|0|  \n|1|0|0|  \n|1|1|1|  \n|0|1|0|  \n  \n The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#1)]  \n  \n The <xref:System.Numerics.BigInteger.op_BitwiseAnd%2A> method performs the bitwise `And` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension."
  syntax:
    content: public static System.Numerics.BigInteger op_BitwiseAnd (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value.
    return:
      type: System.Numerics.BigInteger
      description: The result of the bitwise `And` operation.
  overload: System.Numerics.BigInteger.op_BitwiseAnd*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_BitwiseOr(BigInteger, BigInteger)
  nameWithType: BigInteger.op_BitwiseOr(BigInteger, BigInteger)
  fullName: BigInteger.op_BitwiseOr(BigInteger, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Performs a bitwise `Or` operation on two <xref href="System.Numerics.BigInteger"></xref> values.
  remarks: "The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method defines the bitwise `Or` operation for <xref:System.Numerics.BigInteger> values. The bitwise `Or` operation sets a result bit only if either or both of the corresponding bits in `left` and `right` are set, as shown in the following table.  \n  \n|Bit in `left`|Bit in `right`|Bit in result|  \n|-------------------|--------------------|-------------------|  \n|0|0|0|  \n|1|0|1|  \n|1|1|1|  \n|0|1|1|  \n  \n The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#2)]\n [!code-vb[System.Numerics.BigInteger.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#2)]  \n  \n The <xref:System.Numerics.BigInteger.op_BitwiseOr%2A> method performs the bitwise `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension."
  syntax:
    content: public static System.Numerics.BigInteger op_BitwiseOr (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value.
    return:
      type: System.Numerics.BigInteger
      description: The result of the bitwise `Or` operation.
  overload: System.Numerics.BigInteger.op_BitwiseOr*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)
  id: op_Decrement(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Decrement(BigInteger)
  nameWithType: BigInteger.op_Decrement(BigInteger)
  fullName: BigInteger.op_Decrement(BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Decrements a <xref href="System.Numerics.BigInteger"></xref> value by 1.
  remarks: "The <xref:System.Numerics.BigInteger.op_Decrement%2A> method defines the decrement operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#17)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A> method instead. For example:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Operators#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#3)]  \n  \n Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Decrement%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one less than the <xref:System.Numerics.BigInteger> object represented by `value`. This means that repeated calls to <xref:System.Numerics.BigInteger.op_Decrement%2A> may be expensive.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"
  syntax:
    content: public static System.Numerics.BigInteger op_Decrement (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to decrement.
    return:
      type: System.Numerics.BigInteger
      description: The value of the <code>value</code> parameter decremented by 1.
  overload: System.Numerics.BigInteger.op_Decrement*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Division(BigInteger, BigInteger)
  nameWithType: BigInteger.op_Division(BigInteger, BigInteger)
  fullName: BigInteger.op_Division(BigInteger, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Divides a specified <xref href="System.Numerics.BigInteger"></xref> value by another specified <xref href="System.Numerics.BigInteger"></xref> value by using integer division.
  remarks: "The <xref:System.Numerics.BigInteger.op_Division%2A> method defines the division operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#13)]\n [!code-vb[System.Numeric.BigInteger.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#13)]  \n  \n Languages that do not support custom operators and operator overloading can call the <xref:System.Numerics.BigInteger.Divide%2A> method instead.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Divide%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"
  example:
  - "The following example creates an array of <xref:System.Numerics.BigInteger> values. It then uses each element as the quotient in a division operation that uses the <xref:System.Numerics.BigInteger.Divide%2A> method, the division operator (/), and the <xref:System.Numerics.BigInteger.DivRem%2A> method.  \n  \n [!code-csharp[System.Numerics.BigInteger.Divide#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/cs/Divide1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Divide#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Divide/vb/Divide1.vb#1)]"
  syntax:
    content: public static System.Numerics.BigInteger op_Division (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);
    parameters:
    - id: dividend
      type: System.Numerics.BigInteger
      description: The value to be divided.
    - id: divisor
      type: System.Numerics.BigInteger
      description: The value to divide by.
    return:
      type: System.Numerics.BigInteger
      description: The integral result of the division.
  overload: System.Numerics.BigInteger.op_Division*
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: <code>divisor</code> is 0 (zero).
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)
  id: op_Equality(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Equality(Int64, BigInteger)
  nameWithType: BigInteger.op_Equality(Int64, BigInteger)
  fullName: BigInteger.op_Equality(Int64, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a signed long integer value and a <xref href="System.Numerics.BigInteger"></xref> value are equal.
  remarks: "The <xref:System.Numerics.BigInteger.op_Equality%28System.Int64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#4)]\n [!code-vb[System.Numerics.BigInteger.Operators#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#4)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> instance method instead.  \n  \n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName>"
  syntax:
    content: public static bool op_Equality (long left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Int64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_Equality*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)
  id: op_Equality(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Equality(BigInteger, Int64)
  nameWithType: BigInteger.op_Equality(BigInteger, Int64)
  fullName: BigInteger.op_Equality(BigInteger, Int64)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value and a signed long integer value are equal.
  remarks: "The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Int64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#5)]\n [!code-vb[System.Numerics.BigInteger.Operators#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#5)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> instance method instead.  \n  \n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName>"
  syntax:
    content: public static bool op_Equality (System.Numerics.BigInteger left, long right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Int64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_Equality*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Equality(BigInteger, BigInteger)
  nameWithType: BigInteger.op_Equality(BigInteger, BigInteger)
  fullName: BigInteger.op_Equality(BigInteger, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Returns a value that indicates whether the values of two <xref href="System.Numerics.BigInteger"></xref> objects are equal.
  remarks: "The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method defines the operation of the equality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#19)]\n [!code-vb[System.Numeric.BigInteger.Class#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#19)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName> instance method instead.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName>"
  syntax:
    content: public static bool op_Equality (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_Equality*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)
  id: op_Equality(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Equality(BigInteger, UInt64)
  nameWithType: BigInteger.op_Equality(BigInteger, UInt64)
  fullName: BigInteger.op_Equality(BigInteger, UInt64)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value and an unsigned long integer value are equal.
  remarks: "The <xref:System.Numerics.BigInteger.op_Equality%28System.Numerics.BigInteger%2CSystem.UInt64%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#6)]\n [!code-vb[System.Numerics.BigInteger.Operators#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#6)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> instance method instead."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool op_Equality (System.Numerics.BigInteger left, ulong right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.UInt64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_Equality*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)
  id: op_Equality(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Equality(UInt64, BigInteger)
  nameWithType: BigInteger.op_Equality(UInt64, BigInteger)
  fullName: BigInteger.op_Equality(UInt64, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether an unsigned long integer value and a <xref href="System.Numerics.BigInteger"></xref> value are equal.
  remarks: "The <xref:System.Numerics.BigInteger.op_Equality%28System.UInt64%2CSystem.Numerics.BigInteger%29> method defines the equality comparison operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#7)]\n [!code-vb[System.Numerics.BigInteger.Operators#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#7)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> instance method instead."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool op_Equality (ulong left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.UInt64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if the <code>left</code> and <code>right</code> parameters have the same value; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_Equality*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_ExclusiveOr(BigInteger, BigInteger)
  nameWithType: BigInteger.op_ExclusiveOr(BigInteger, BigInteger)
  fullName: BigInteger.op_ExclusiveOr(BigInteger, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Performs a bitwise exclusive `Or` (`XOr`) operation on two <xref href="System.Numerics.BigInteger"></xref> values.
  remarks: "The result of a bitwise exclusive `Or` operation is `true` if the values of the two bits are different; otherwise, it is `false`. The following table illustrates the exclusive `Or` operation.  \n  \n|Bit x in `left`|Bit x in `right`|Return value|  \n|---------------------|----------------------|------------------|  \n|0|0|0|  \n|0|1|1|  \n|1|0|1|  \n|1|1|0|  \n  \n The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#8)]\n [!code-vb[System.Numerics.BigInteger.Operators#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#8)]  \n  \n The <xref:System.Numerics.BigInteger.op_ExclusiveOr%2A> method performs the bitwise exclusive `Or` operation on two <xref:System.Numerics.BigInteger> values as if they were both in two's complement representation with virtual sign extension."
  syntax:
    content: public static System.Numerics.BigInteger op_ExclusiveOr (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value.
    return:
      type: System.Numerics.BigInteger
      description: The result of the bitwise `Or` operation.
  overload: System.Numerics.BigInteger.op_ExclusiveOr*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Explicit(System.Single to System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger
  id: op_Explicit(System.Single to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Explicit(Single to BigInteger)
  nameWithType: BigInteger.op_Explicit(Single to BigInteger)
  fullName: BigInteger.op_Explicit(Single to BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.BigInteger op_Explicit (float value);
    parameters:
    - id: value
      type: System.Single
      description: ''
    return:
      type: System.Numerics.BigInteger
      description: ''
  overload: System.Numerics.BigInteger.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt32)
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32
  id: op_Explicit(System.Numerics.BigInteger to System.UInt32)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Explicit(BigInteger to UInt32)
  nameWithType: BigInteger.op_Explicit(BigInteger to UInt32)
  fullName: BigInteger.op_Explicit(BigInteger to UInt32)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static uint op_Explicit (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: ''
    return:
      type: System.UInt32
      description: ''
  overload: System.Numerics.BigInteger.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt16)
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16
  id: op_Explicit(System.Numerics.BigInteger to System.UInt16)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Explicit(BigInteger to UInt16)
  nameWithType: BigInteger.op_Explicit(BigInteger to UInt16)
  fullName: BigInteger.op_Explicit(BigInteger to UInt16)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ushort op_Explicit (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: ''
    return:
      type: System.UInt16
      description: ''
  overload: System.Numerics.BigInteger.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Single)
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single
  id: op_Explicit(System.Numerics.BigInteger to System.Single)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Explicit(BigInteger to Single)
  nameWithType: BigInteger.op_Explicit(BigInteger to Single)
  fullName: BigInteger.op_Explicit(BigInteger to Single)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static float op_Explicit (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: ''
    return:
      type: System.Single
      description: ''
  overload: System.Numerics.BigInteger.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.SByte)
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte
  id: op_Explicit(System.Numerics.BigInteger to System.SByte)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Explicit(BigInteger to SByte)
  nameWithType: BigInteger.op_Explicit(BigInteger to SByte)
  fullName: BigInteger.op_Explicit(BigInteger to SByte)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static sbyte op_Explicit (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: ''
    return:
      type: System.SByte
      description: ''
  overload: System.Numerics.BigInteger.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int64)
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64
  id: op_Explicit(System.Numerics.BigInteger to System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Explicit(BigInteger to Int64)
  nameWithType: BigInteger.op_Explicit(BigInteger to Int64)
  fullName: BigInteger.op_Explicit(BigInteger to Int64)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  syntax:
    content: public static long op_Explicit (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: ''
    return:
      type: System.Int64
      description: ''
  overload: System.Numerics.BigInteger.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64
  id: op_Explicit(System.Numerics.BigInteger to System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Explicit(BigInteger to UInt64)
  nameWithType: BigInteger.op_Explicit(BigInteger to UInt64)
  fullName: BigInteger.op_Explicit(BigInteger to UInt64)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static ulong op_Explicit (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: ''
    return:
      type: System.UInt64
      description: ''
  overload: System.Numerics.BigInteger.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int16)
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16
  id: op_Explicit(System.Numerics.BigInteger to System.Int16)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Explicit(BigInteger to Int16)
  nameWithType: BigInteger.op_Explicit(BigInteger to Int16)
  fullName: BigInteger.op_Explicit(BigInteger to Int16)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static short op_Explicit (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: ''
    return:
      type: System.Int16
      description: ''
  overload: System.Numerics.BigInteger.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Double)
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double
  id: op_Explicit(System.Numerics.BigInteger to System.Double)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Explicit(BigInteger to Double)
  nameWithType: BigInteger.op_Explicit(BigInteger to Double)
  fullName: BigInteger.op_Explicit(BigInteger to Double)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  syntax:
    content: public static double op_Explicit (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: ''
    return:
      type: System.Double
      description: ''
  overload: System.Numerics.BigInteger.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Decimal)
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal
  id: op_Explicit(System.Numerics.BigInteger to System.Decimal)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Explicit(BigInteger to Decimal)
  nameWithType: BigInteger.op_Explicit(BigInteger to Decimal)
  fullName: BigInteger.op_Explicit(BigInteger to Decimal)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static decimal op_Explicit (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: ''
    return:
      type: System.Decimal
      description: ''
  overload: System.Numerics.BigInteger.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Byte)
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte
  id: op_Explicit(System.Numerics.BigInteger to System.Byte)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Explicit(BigInteger to Byte)
  nameWithType: BigInteger.op_Explicit(BigInteger to Byte)
  fullName: BigInteger.op_Explicit(BigInteger to Byte)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static byte op_Explicit (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: ''
    return:
      type: System.Byte
      description: ''
  overload: System.Numerics.BigInteger.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Explicit(System.Double to System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger
  id: op_Explicit(System.Double to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Explicit(Double to BigInteger)
  nameWithType: BigInteger.op_Explicit(Double to BigInteger)
  fullName: BigInteger.op_Explicit(Double to BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.BigInteger op_Explicit (double value);
    parameters:
    - id: value
      type: System.Double
      description: ''
    return:
      type: System.Numerics.BigInteger
      description: ''
  overload: System.Numerics.BigInteger.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int32)
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32
  id: op_Explicit(System.Numerics.BigInteger to System.Int32)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Explicit(BigInteger to Int32)
  nameWithType: BigInteger.op_Explicit(BigInteger to Int32)
  fullName: BigInteger.op_Explicit(BigInteger to Int32)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  syntax:
    content: public static int op_Explicit (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Numerics.BigInteger.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Explicit(System.Decimal to System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger
  id: op_Explicit(System.Decimal to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Explicit(Decimal to BigInteger)
  nameWithType: BigInteger.op_Explicit(Decimal to BigInteger)
  fullName: BigInteger.op_Explicit(Decimal to BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.BigInteger op_Explicit (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: ''
    return:
      type: System.Numerics.BigInteger
      description: ''
  overload: System.Numerics.BigInteger.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)
  id: op_GreaterThan(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_GreaterThan(Int64, BigInteger)
  nameWithType: BigInteger.op_GreaterThan(Int64, BigInteger)
  fullName: BigInteger.op_GreaterThan(Int64, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit signed integer is greater than a <xref href="System.Numerics.BigInteger"></xref> value.
  remarks: "The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#9)]\n [!code-vb[System.Numerics.BigInteger.Operators#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#9)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> instance method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#10)]  \n  \n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"
  syntax:
    content: public static bool op_GreaterThan (long left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Int64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_GreaterThan*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)
  id: op_GreaterThan(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_GreaterThan(BigInteger, Int64)
  nameWithType: BigInteger.op_GreaterThan(BigInteger, Int64)
  fullName: BigInteger.op_GreaterThan(BigInteger, Int64)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> is greater than a 64-bit signed integer value.
  remarks: "The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#11)]\n [!code-vb[System.Numerics.BigInteger.Operators#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#11)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#12)]  \n  \n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"
  syntax:
    content: public static bool op_GreaterThan (System.Numerics.BigInteger left, long right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Int64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_GreaterThan*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_GreaterThan(BigInteger, BigInteger)
  nameWithType: BigInteger.op_GreaterThan(BigInteger, BigInteger)
  fullName: BigInteger.op_GreaterThan(BigInteger, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value is greater than another <xref href="System.Numerics.BigInteger"></xref> value.
  remarks: "The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#20)]\n [!code-vb[System.Numeric.BigInteger.Class#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#20)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numeric.BigInteger.Class#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#21)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.%2A> Compare(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False"
  syntax:
    content: public static bool op_GreaterThan (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_GreaterThan*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)
  id: op_GreaterThan(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_GreaterThan(BigInteger, UInt64)
  nameWithType: BigInteger.op_GreaterThan(BigInteger, UInt64)
  fullName: BigInteger.op_GreaterThan(BigInteger, UInt64)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value is greater than a 64-bit unsigned integer.
  remarks: "The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#13)]\n [!code-vb[System.Numerics.BigInteger.Operators#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#13)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#14)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool op_GreaterThan (System.Numerics.BigInteger left, ulong right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.UInt64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_GreaterThan*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)
  id: op_GreaterThan(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_GreaterThan(UInt64, BigInteger)
  nameWithType: BigInteger.op_GreaterThan(UInt64, BigInteger)
  fullName: BigInteger.op_GreaterThan(UInt64, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value is greater than a 64-bit unsigned integer.
  remarks: "The <xref:System.Numerics.BigInteger.op_GreaterThan%2A> method defines the operation of the greater than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#15)]\n [!code-vb[System.Numerics.BigInteger.Operators#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#15)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#16)]"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool op_GreaterThan (ulong left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.UInt64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_GreaterThan*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  id: op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_GreaterThanOrEqual(BigInteger, UInt64)
  nameWithType: BigInteger.op_GreaterThanOrEqual(BigInteger, UInt64)
  fullName: BigInteger.op_GreaterThanOrEqual(BigInteger, UInt64)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value is greater than or equal to a 64-bit unsigned integer value.
  remarks: "The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#21)]\n [!code-vb[System.Numerics.BigInteger.Operators#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#21)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#22)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool op_GreaterThanOrEqual (System.Numerics.BigInteger left, ulong right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.UInt64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_GreaterThanOrEqual*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_GreaterThanOrEqual(BigInteger, BigInteger)
  nameWithType: BigInteger.op_GreaterThanOrEqual(BigInteger, BigInteger)
  fullName: BigInteger.op_GreaterThanOrEqual(BigInteger, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value is greater than or equal to another <xref href="System.Numerics.BigInteger"></xref> value.
  remarks: "The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#22)]\n [!code-vb[System.Numeric.BigInteger.Class#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#22)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numeric.BigInteger.Class#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#23)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.%2A> Compare(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False"
  syntax:
    content: public static bool op_GreaterThanOrEqual (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_GreaterThanOrEqual*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  id: op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_GreaterThanOrEqual(UInt64, BigInteger)
  nameWithType: BigInteger.op_GreaterThanOrEqual(UInt64, BigInteger)
  fullName: BigInteger.op_GreaterThanOrEqual(UInt64, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <xref href="System.Numerics.BigInteger"></xref> value.
  remarks: "The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#23)]\n [!code-vb[System.Numerics.BigInteger.Operators#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#23)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#24)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool op_GreaterThanOrEqual (ulong left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.UInt64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_GreaterThanOrEqual*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)
  id: op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_GreaterThanOrEqual(Int64, BigInteger)
  nameWithType: BigInteger.op_GreaterThanOrEqual(Int64, BigInteger)
  fullName: BigInteger.op_GreaterThanOrEqual(Int64, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <xref href="System.Numerics.BigInteger"></xref> value.
  remarks: "The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#17)]\n [!code-vb[System.Numerics.BigInteger.Operators#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#17)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#18)]  \n  \n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"
  syntax:
    content: public static bool op_GreaterThanOrEqual (long left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Int64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_GreaterThanOrEqual*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)
  id: op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_GreaterThanOrEqual(BigInteger, Int64)
  nameWithType: BigInteger.op_GreaterThanOrEqual(BigInteger, Int64)
  fullName: BigInteger.op_GreaterThanOrEqual(BigInteger, Int64)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value is greater than or equal to a 64-bit signed integer value.
  remarks: "The <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%2A> method defines the operation of the greater than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#19)]\n [!code-vb[System.Numerics.BigInteger.Operators#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#19)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_GreaterThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#20)]  \n  \n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"
  syntax:
    content: public static bool op_GreaterThanOrEqual (System.Numerics.BigInteger left, long right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Int64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is greater than <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_GreaterThanOrEqual*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Implicit(System.UInt32 to System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger
  id: op_Implicit(System.UInt32 to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Implicit(UInt32 to BigInteger)
  nameWithType: BigInteger.op_Implicit(UInt32 to BigInteger)
  fullName: BigInteger.op_Implicit(UInt32 to BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static System.Numerics.BigInteger op_Implicit (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: ''
    return:
      type: System.Numerics.BigInteger
      description: ''
  overload: System.Numerics.BigInteger.op_Implicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Implicit(System.UInt16 to System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger
  id: op_Implicit(System.UInt16 to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Implicit(UInt16 to BigInteger)
  nameWithType: BigInteger.op_Implicit(UInt16 to BigInteger)
  fullName: BigInteger.op_Implicit(UInt16 to BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static System.Numerics.BigInteger op_Implicit (ushort value);
    parameters:
    - id: value
      type: System.UInt16
      description: ''
    return:
      type: System.Numerics.BigInteger
      description: ''
  overload: System.Numerics.BigInteger.op_Implicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Implicit(System.SByte to System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger
  id: op_Implicit(System.SByte to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Implicit(SByte to BigInteger)
  nameWithType: BigInteger.op_Implicit(SByte to BigInteger)
  fullName: BigInteger.op_Implicit(SByte to BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static System.Numerics.BigInteger op_Implicit (sbyte value);
    parameters:
    - id: value
      type: System.SByte
      description: ''
    return:
      type: System.Numerics.BigInteger
      description: ''
  overload: System.Numerics.BigInteger.op_Implicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Implicit(System.UInt64 to System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger
  id: op_Implicit(System.UInt64 to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Implicit(UInt64 to BigInteger)
  nameWithType: BigInteger.op_Implicit(UInt64 to BigInteger)
  fullName: BigInteger.op_Implicit(UInt64 to BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static System.Numerics.BigInteger op_Implicit (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: ''
    return:
      type: System.Numerics.BigInteger
      description: ''
  overload: System.Numerics.BigInteger.op_Implicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Implicit(System.Int32 to System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger
  id: op_Implicit(System.Int32 to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Implicit(Int32 to BigInteger)
  nameWithType: BigInteger.op_Implicit(Int32 to BigInteger)
  fullName: BigInteger.op_Implicit(Int32 to BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.BigInteger op_Implicit (int value);
    parameters:
    - id: value
      type: System.Int32
      description: ''
    return:
      type: System.Numerics.BigInteger
      description: ''
  overload: System.Numerics.BigInteger.op_Implicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Implicit(System.Int16 to System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger
  id: op_Implicit(System.Int16 to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Implicit(Int16 to BigInteger)
  nameWithType: BigInteger.op_Implicit(Int16 to BigInteger)
  fullName: BigInteger.op_Implicit(Int16 to BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.BigInteger op_Implicit (short value);
    parameters:
    - id: value
      type: System.Int16
      description: ''
    return:
      type: System.Numerics.BigInteger
      description: ''
  overload: System.Numerics.BigInteger.op_Implicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Implicit(System.Byte to System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger
  id: op_Implicit(System.Byte to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Implicit(Byte to BigInteger)
  nameWithType: BigInteger.op_Implicit(Byte to BigInteger)
  fullName: BigInteger.op_Implicit(Byte to BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.BigInteger op_Implicit (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: ''
    return:
      type: System.Numerics.BigInteger
      description: ''
  overload: System.Numerics.BigInteger.op_Implicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Implicit(System.Int64 to System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger
  id: op_Implicit(System.Int64 to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Implicit(Int64 to BigInteger)
  nameWithType: BigInteger.op_Implicit(Int64 to BigInteger)
  fullName: BigInteger.op_Implicit(Int64 to BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  syntax:
    content: public static System.Numerics.BigInteger op_Implicit (long value);
    parameters:
    - id: value
      type: System.Int64
      description: ''
    return:
      type: System.Numerics.BigInteger
      description: ''
  overload: System.Numerics.BigInteger.op_Implicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)
  id: op_Increment(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Increment(BigInteger)
  nameWithType: BigInteger.op_Increment(BigInteger)
  fullName: BigInteger.op_Increment(BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Increments a <xref href="System.Numerics.BigInteger"></xref> value by 1.
  remarks: "The <xref:System.Numerics.BigInteger.op_Increment%2A> method defines the increment operation for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#24)]  \n  \n Some languages (such as Visual Basic) that lack an increment operator or do not support operator overloading can call the <xref:System.Numerics.BigInteger.op_Increment%2A> method directly, as the following example shows.  \n  \n [!code-vb[System.Numeric.BigInteger.Class#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#25)]  \n  \n Because <xref:System.Numerics.BigInteger> objects are immutable, the <xref:System.Numerics.BigInteger.op_Increment%2A> operator creates a new <xref:System.Numerics.BigInteger> object whose value is one more than the <xref:System.Numerics.BigInteger> object represented by `value`. Therefore, repeated calls to <xref:System.Numerics.BigInteger.op_Increment%2A> may be expensive.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Add%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"
  syntax:
    content: public static System.Numerics.BigInteger op_Increment (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to increment.
    return:
      type: System.Numerics.BigInteger
      description: The value of the <code>value</code> parameter incremented by 1.
  overload: System.Numerics.BigInteger.op_Increment*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)
  id: op_Inequality(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Inequality(Int64, BigInteger)
  nameWithType: BigInteger.op_Inequality(Int64, BigInteger)
  fullName: BigInteger.op_Inequality(Int64, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit signed integer and a <xref href="System.Numerics.BigInteger"></xref> value are not equal.
  remarks: "The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#25)]\n [!code-vb[System.Numerics.BigInteger.Operators#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#25)]  \n  \n Languages that do not support custom operators can test for inequality by using one of the following techniques:  \n  \n-   Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> instance method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.  \n  \n-   Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> instance method and reversing its value.  \n  \n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed."
  syntax:
    content: public static bool op_Inequality (long left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Int64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_Inequality*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)
  id: op_Inequality(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Inequality(BigInteger, Int64)
  nameWithType: BigInteger.op_Inequality(BigInteger, Int64)
  fullName: BigInteger.op_Inequality(BigInteger, Int64)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value and a 64-bit signed integer are not equal.
  remarks: "The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#26)]\n [!code-vb[System.Numerics.BigInteger.Operators#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#26)]  \n  \n Languages that do not support custom operators can test for inequality by using one of the following techniques:  \n  \n-   Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and a signed long integer value.  \n  \n-   Calling the <xref:System.Numerics.BigInteger.Equals%28System.Int64%29?displayProperty=fullName> method and reversing its value.  \n  \n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"
  syntax:
    content: public static bool op_Inequality (System.Numerics.BigInteger left, long right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Int64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_Inequality*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Inequality(BigInteger, BigInteger)
  nameWithType: BigInteger.op_Inequality(BigInteger, BigInteger)
  fullName: BigInteger.op_Inequality(BigInteger, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Returns a value that indicates whether two <xref href="System.Numerics.BigInteger"></xref> objects have different values.
  remarks: "The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#26)]\n [!code-vb[System.Numeric.BigInteger.Class#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#26)]  \n  \n Languages that do not support custom operators can test for inequality by using one of the following techniques:  \n  \n-   Calling the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method, which indicates the relationship between two <xref:System.Numerics.BigInteger> objects.  \n  \n-   Calling the <xref:System.Numerics.BigInteger.Equals%28System.Numerics.BigInteger%29?displayProperty=fullName> method and reversing its value.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"
  syntax:
    content: public static bool op_Inequality (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_Inequality*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)
  id: op_Inequality(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Inequality(BigInteger, UInt64)
  nameWithType: BigInteger.op_Inequality(BigInteger, UInt64)
  fullName: BigInteger.op_Inequality(BigInteger, UInt64)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value and a 64-bit unsigned integer are not equal.
  remarks: "The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#27)]\n [!code-vb[System.Numerics.BigInteger.Operators#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#27)]  \n  \n Languages that do not support custom operators can test for inequality by using one of the following techniques:  \n  \n-   Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.  \n  \n-   Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> method and reversing its value."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool op_Inequality (System.Numerics.BigInteger left, ulong right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.UInt64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_Inequality*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)
  id: op_Inequality(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Inequality(UInt64, BigInteger)
  nameWithType: BigInteger.op_Inequality(UInt64, BigInteger)
  fullName: BigInteger.op_Inequality(UInt64, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit unsigned integer and a <xref href="System.Numerics.BigInteger"></xref> value are not equal.
  remarks: "The <xref:System.Numerics.BigInteger.op_Inequality%2A> method defines the operation of the inequality operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#28)]\n [!code-vb[System.Numerics.BigInteger.Operators#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#28)]  \n  \n Languages that do not support custom operators can test for inequality by using one of the following techniques:  \n  \n-   Calling the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method, which indicates the relationship between a <xref:System.Numerics.BigInteger> and an unsigned long integer value.  \n  \n-   Calling the <xref:System.Numerics.BigInteger.Equals%28System.UInt64%29?displayProperty=fullName> method and reversing its value."
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool op_Inequality (ulong left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.UInt64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> and <code>right</code> are not equal; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_Inequality*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)
  commentId: M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)
  id: op_LeftShift(System.Numerics.BigInteger,System.Int32)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_LeftShift(BigInteger, Int32)
  nameWithType: BigInteger.op_LeftShift(BigInteger, Int32)
  fullName: BigInteger.op_LeftShift(BigInteger, Int32)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Shifts a <xref href="System.Numerics.BigInteger"></xref> value a specified number of bits to the left.
  remarks: "The <xref:System.Numerics.BigInteger.op_LeftShift%2A> method defines the operation of the bitwise left-shift operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#29)]\n [!code-vb[System.Numerics.BigInteger.Operators#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#29)]  \n  \n> [!NOTE]\n>  Unlike the bitwise left-shift operation with integer primitives, the <xref:System.Numerics.BigInteger.op_LeftShift%2A> method preserves the sign of the original <xref:System.Numerics.BigInteger> value.  \n  \n Languages that do not support custom operators can perform a bitwise left-shift operation by multiplying `value` by `BigInteger.Pow(2, shift)`. The following example shows that the results are identical to the results of using this operator.  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#30)]\n [!code-vb[System.Numerics.BigInteger.Operators#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#30)]"
  syntax:
    content: public static System.Numerics.BigInteger op_LeftShift (System.Numerics.BigInteger value, int shift);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value whose bits are to be shifted.
    - id: shift
      type: System.Int32
      description: The number of bits to shift <code>value</code> to the left.
    return:
      type: System.Numerics.BigInteger
      description: A value that has been shifted to the left by the specified number of bits.
  overload: System.Numerics.BigInteger.op_LeftShift*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)
  id: op_LessThan(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_LessThan(UInt64, BigInteger)
  nameWithType: BigInteger.op_LessThan(UInt64, BigInteger)
  fullName: BigInteger.op_LessThan(UInt64, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit unsigned integer is less than a <xref href="System.Numerics.BigInteger"></xref> value.
  remarks: "The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#37)]\n [!code-vb[System.Numerics.BigInteger.Operators#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#37)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#38)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool op_LessThan (ulong left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.UInt64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_LessThan*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)
  id: op_LessThan(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_LessThan(BigInteger, UInt64)
  nameWithType: BigInteger.op_LessThan(BigInteger, UInt64)
  fullName: BigInteger.op_LessThan(BigInteger, UInt64)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value is less than a 64-bit unsigned integer.
  remarks: "The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#35)]\n [!code-vb[System.Numerics.BigInteger.Operators#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#35)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#36)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool op_LessThan (System.Numerics.BigInteger left, ulong right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.UInt64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_LessThan*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)
  id: op_LessThan(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_LessThan(Int64, BigInteger)
  nameWithType: BigInteger.op_LessThan(Int64, BigInteger)
  fullName: BigInteger.op_LessThan(Int64, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit signed integer is less than a <xref href="System.Numerics.BigInteger"></xref> value.
  remarks: "The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#31)]\n [!code-vb[System.Numerics.BigInteger.Operators#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#31)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#32)]  \n  \n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"
  syntax:
    content: public static bool op_LessThan (long left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Int64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_LessThan*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)
  id: op_LessThan(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_LessThan(BigInteger, Int64)
  nameWithType: BigInteger.op_LessThan(BigInteger, Int64)
  fullName: BigInteger.op_LessThan(BigInteger, Int64)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value is less than a 64-bit signed integer.
  remarks: "The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#33)]\n [!code-vb[System.Numerics.BigInteger.Operators#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#33)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#34)]  \n  \n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"
  syntax:
    content: public static bool op_LessThan (System.Numerics.BigInteger left, long right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Int64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_LessThan*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_LessThan(BigInteger, BigInteger)
  nameWithType: BigInteger.op_LessThan(BigInteger, BigInteger)
  fullName: BigInteger.op_LessThan(BigInteger, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value is less than another <xref href="System.Numerics.BigInteger"></xref> value.
  remarks: "The <xref:System.Numerics.BigInteger.op_LessThan%2A> method defines the operation of the less than operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#27)]\n [!code-vb[System.Numeric.BigInteger.Class#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#27)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A?displayProperty=fullName> method instead. Some languages can also call the <xref:System.Numerics.BigInteger.op_LessThan%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numeric.BigInteger.Class#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#28)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"
  syntax:
    content: public static bool op_LessThan (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is less than <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_LessThan*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)
  id: op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_LessThanOrEqual(Int64, BigInteger)
  nameWithType: BigInteger.op_LessThanOrEqual(Int64, BigInteger)
  fullName: BigInteger.op_LessThanOrEqual(Int64, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <xref href="System.Numerics.BigInteger"></xref> value.
  remarks: "The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#39)]\n [!code-vb[System.Numerics.BigInteger.Operators#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#39)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Int64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#40)]  \n  \n If `left` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"
  syntax:
    content: public static bool op_LessThanOrEqual (long left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Int64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_LessThanOrEqual*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)
  id: op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_LessThanOrEqual(BigInteger, Int64)
  nameWithType: BigInteger.op_LessThanOrEqual(BigInteger, Int64)
  fullName: BigInteger.op_LessThanOrEqual(BigInteger, Int64)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value is less than or equal to a 64-bit signed integer.
  remarks: "The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#41)]\n [!code-vb[System.Numerics.BigInteger.Operators#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#41)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Int64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#42)]  \n  \n If `right` is a <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.SByte>, <xref:System.UInt16>, or <xref:System.UInt32> value, it is implicitly converted to an <xref:System.Int64> value when the operation is performed.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.Int64%29?displayProperty=fullName>"
  syntax:
    content: public static bool op_LessThanOrEqual (System.Numerics.BigInteger left, long right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Int64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_LessThanOrEqual*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_LessThanOrEqual(BigInteger, BigInteger)
  nameWithType: BigInteger.op_LessThanOrEqual(BigInteger, BigInteger)
  fullName: BigInteger.op_LessThanOrEqual(BigInteger, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value is less than or equal to another <xref href="System.Numerics.BigInteger"></xref> value.
  remarks: "The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#29)]\n [!code-vb[System.Numeric.BigInteger.Class#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#29)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Compare%2A> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numeric.BigInteger.Class#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#30)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Compare%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"
  syntax:
    content: public static bool op_LessThanOrEqual (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_LessThanOrEqual*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  id: op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_LessThanOrEqual(BigInteger, UInt64)
  nameWithType: BigInteger.op_LessThanOrEqual(BigInteger, UInt64)
  fullName: BigInteger.op_LessThanOrEqual(BigInteger, UInt64)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger"></xref> value is less than or equal to a 64-bit unsigned integer.
  remarks: "The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#43)]\n [!code-vb[System.Numerics.BigInteger.Operators#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#43)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.Numerics.BigInteger%2CSystem.UInt64%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#44)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool op_LessThanOrEqual (System.Numerics.BigInteger left, ulong right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.UInt64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_LessThanOrEqual*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  id: op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_LessThanOrEqual(UInt64, BigInteger)
  nameWithType: BigInteger.op_LessThanOrEqual(UInt64, BigInteger)
  fullName: BigInteger.op_LessThanOrEqual(UInt64, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <xref href="System.Numerics.BigInteger"></xref> value.
  remarks: "The <xref:System.Numerics.BigInteger.op_LessThanOrEqual%2A> method defines the operation of the less than or equal to operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/Operator1.cs#45)]\n [!code-vb[System.Numerics.BigInteger.Operators#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#45)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName> method instead. They can also call the <xref:System.Numerics.BigInteger.op_LessThanOrEqual%28System.UInt64%2CSystem.Numerics.BigInteger%29> method directly, as the following example shows.  \n  \n [!code-vb[System.Numerics.BigInteger.Operators#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#46)]  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.CompareTo%28System.UInt64%29?displayProperty=fullName>"
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static bool op_LessThanOrEqual (ulong left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.UInt64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> is less than or equal to <code>right</code>; otherwise, `false`.'
  overload: System.Numerics.BigInteger.op_LessThanOrEqual*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Modulus(BigInteger, BigInteger)
  nameWithType: BigInteger.op_Modulus(BigInteger, BigInteger)
  fullName: BigInteger.op_Modulus(BigInteger, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Returns the remainder that results from division with two specified <xref href="System.Numerics.BigInteger"></xref> values.
  remarks: "The <xref:System.Numerics.BigInteger.op_Modulus%2A> method defines the operation of the modulus operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#31)]\n [!code-vb[System.Numeric.BigInteger.Class#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#31)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Remainder%2A?displayProperty=fullName> method instead.  \n  \n The sign of the value returned by the modulus operation depends on the sign of `dividend`: If `dividend` is positive, the modulus operation returns a positive result; if it is negative, the modulus operation returns a negative result. The behavior of the modulus operation with <xref:System.Numerics.BigInteger> values is identical to the modulus operation with other integral types.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Remainder%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"
  syntax:
    content: public static System.Numerics.BigInteger op_Modulus (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);
    parameters:
    - id: dividend
      type: System.Numerics.BigInteger
      description: The value to be divided.
    - id: divisor
      type: System.Numerics.BigInteger
      description: The value to divide by.
    return:
      type: System.Numerics.BigInteger
      description: The remainder that results from the division.
  overload: System.Numerics.BigInteger.op_Modulus*
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: <code>divisor</code> is 0 (zero).
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Multiply(BigInteger, BigInteger)
  nameWithType: BigInteger.op_Multiply(BigInteger, BigInteger)
  fullName: BigInteger.op_Multiply(BigInteger, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Multiplies two specified <xref href="System.Numerics.BigInteger"></xref> values.
  remarks: "The <xref:System.Numerics.BigInteger.op_Multiply%2A> method defines the operation of the multiplication operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#11)]\n [!code-vb[System.Numeric.BigInteger.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#11)]  \n  \n The equivalent method for this operator is <xref:System.Numeric%2A> s .BigInteger.Multiply(System.Numeric s .BigInteger,System.Numeric s .BigInteger)?qualifyHint=True&autoUpgrade=False"
  syntax:
    content: public static System.Numerics.BigInteger op_Multiply (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to multiply.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to multiply.
    return:
      type: System.Numerics.BigInteger
      description: The product of <code>left</code> and <code>right</code>.
  overload: System.Numerics.BigInteger.op_Multiply*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)
  id: op_OnesComplement(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_OnesComplement(BigInteger)
  nameWithType: BigInteger.op_OnesComplement(BigInteger)
  fullName: BigInteger.op_OnesComplement(BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Returns the bitwise one's complement of a <xref href="System.Numerics.BigInteger"></xref> value.
  remarks: "The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method defines the operation of the bitwise one's complement operator for <xref:System.Numerics.BigInteger> values. The bitwise one's complement operator reverses each bit in a numeric value. That is, bits in `value` that are 0 are set to 1 in the result, and bits that are 1 are set to 0 in the result. The <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/cs/OnesComplement1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.OnesComplement#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/OnesComplement1.vb#1)]  \n  \n Languages that do not support custom operators may be able to call the <xref:System.Numerics.BigInteger.op_OnesComplement%2A> method directly to perform a bitwise one's complement operation. For example:  \n  \n [!code-vb[System.Numerics.BigInteger.OnesComplement#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OnesComplement/vb/onescomplement2.vb#2)]"
  syntax:
    content: public static System.Numerics.BigInteger op_OnesComplement (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: An integer value.
    return:
      type: System.Numerics.BigInteger
      description: The bitwise one's complement of <code>value</code>.
  overload: System.Numerics.BigInteger.op_OnesComplement*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)
  commentId: M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)
  id: op_RightShift(System.Numerics.BigInteger,System.Int32)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_RightShift(BigInteger, Int32)
  nameWithType: BigInteger.op_RightShift(BigInteger, Int32)
  fullName: BigInteger.op_RightShift(BigInteger, Int32)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Shifts a <xref href="System.Numerics.BigInteger"></xref> value a specified number of bits to the right.
  remarks: "The <xref:System.Numerics.BigInteger.op_RightShift%2A> method defines the operation of the bitwise right-shift operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#47)]\n [!code-vb[System.Numerics.BigInteger.Operators#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#47)]  \n  \n Languages that do not support custom operators can perform a bitwise right-shift operation by dividing `value` by `BigInteger.Pow(2, shift)` and subtracting 1 times `shift` for negative values. The following example shows that the results are identical to the results of using this operator.  \n  \n [!code-csharp[System.Numerics.BigInteger.Operators#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/cs/RightShift1.cs#48)]\n [!code-vb[System.Numerics.BigInteger.Operators#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Operators/vb/Operator1.vb#48)]  \n  \n If `shift` is greater than or equal to the number of bits in a positive <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.Zero%2A?displayProperty=fullName>. If `shift` is greater than the number of bits in a negative <xref:System.Numerics.BigInteger> value, the result of the right-shift operation is <xref:System.Numerics.BigInteger.MinusOne%2A?displayProperty=fullName>."
  syntax:
    content: public static System.Numerics.BigInteger op_RightShift (System.Numerics.BigInteger value, int shift);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value whose bits are to be shifted.
    - id: shift
      type: System.Int32
      description: The number of bits to shift <code>value</code> to the right.
    return:
      type: System.Numerics.BigInteger
      description: A value that has been shifted to the right by the specified number of bits.
  overload: System.Numerics.BigInteger.op_RightShift*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_Subtraction(BigInteger, BigInteger)
  nameWithType: BigInteger.op_Subtraction(BigInteger, BigInteger)
  fullName: BigInteger.op_Subtraction(BigInteger, BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Subtracts a <xref href="System.Numerics.BigInteger"></xref> value from another <xref href="System.Numerics.BigInteger"></xref> value.
  remarks: "The <xref:System.Numerics.BigInteger.op_Subtraction%2A> method defines the operation of the subtraction operator for <xref:System.Numerics.BigInteger> values. It enables code such as the following:  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#14)]\n [!code-vb[System.Numeric.BigInteger.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#14)]  \n  \n Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Subtract%2A?displayProperty=fullName> method instead.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Subtract%28System.Numerics.BigInteger%2CSystem.Numerics.BigInteger%29?displayProperty=fullName>"
  syntax:
    content: public static System.Numerics.BigInteger op_Subtraction (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The value to subtract from (the minuend).
    - id: right
      type: System.Numerics.BigInteger
      description: The value to subtract (the subtrahend).
    return:
      type: System.Numerics.BigInteger
      description: The result of subtracting <code>right</code> from <code>left</code>.
  overload: System.Numerics.BigInteger.op_Subtraction*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)
  id: op_UnaryNegation(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_UnaryNegation(BigInteger)
  nameWithType: BigInteger.op_UnaryNegation(BigInteger)
  fullName: BigInteger.op_UnaryNegation(BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Negates a specified BigInteger value.
  remarks: "The <xref:System.Numerics.BigInteger.op_UnaryNegation%2A> method defines the operation of the unary negation operator (or the additive inverse operator) for <xref:System.Numerics.BigInteger> values. The operation produces a value that results in 0 (zero) when it is added to the original number. Languages that do not support custom operators can call the <xref:System.Numerics.BigInteger.Negate%2A> method instead.  \n  \n The equivalent method for this operator is <xref:System.Numerics.BigInteger.Negate%28System.Numerics.BigInteger%29?displayProperty=fullName>"
  example:
  - "The following example illustrates three different ways to negate the value of a <xref:System.Numerics.BigInteger> object.  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#16)]\n [!code-vb[System.Numeric.BigInteger.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#16)]"
  syntax:
    content: public static System.Numerics.BigInteger op_UnaryNegation (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to negate.
    return:
      type: System.Numerics.BigInteger
      description: The result of the <code>value</code> parameter multiplied by negative one (-1).
  overload: System.Numerics.BigInteger.op_UnaryNegation*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)
  id: op_UnaryPlus(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: op_UnaryPlus(BigInteger)
  nameWithType: BigInteger.op_UnaryPlus(BigInteger)
  fullName: BigInteger.op_UnaryPlus(BigInteger)
  type: Operator
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Returns the value of the <xref href="System.Numerics.BigInteger"></xref> operand. (The sign of the operand is unchanged.)
  remarks: The <xref:System.Numerics.BigInteger.op_UnaryPlus%2A> method defines the operation of the unary positive operator for <xref:System.Numerics.BigInteger> values.
  syntax:
    content: public static System.Numerics.BigInteger op_UnaryPlus (System.Numerics.BigInteger value);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: An integer value.
    return:
      type: System.Numerics.BigInteger
      description: The value of the <code>value</code> operand.
  overload: System.Numerics.BigInteger.op_UnaryPlus*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Parse(String, NumberStyles, IFormatProvider)
  nameWithType: BigInteger.Parse(String, NumberStyles, IFormatProvider)
  fullName: BigInteger.Parse(String, NumberStyles, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Converts the string representation of a number in a specified style and culture-specific format to its <xref href="System.Numerics.BigInteger"></xref> equivalent.
  remarks: "The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed. `styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.  \n  \n Depending on the value of `style`, the `value` parameter may include the following elements:  \n  \n [*ws*][*$*][*sign*][*digits*,]*digits*[*.fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  \n  \n If `style` includes <xref:System.Globalization.NumberStyles?displayProperty=fullName>, the `value` parameter may include the following elements:  \n  \n [*ws*]*hexdigits*[*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space. White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> properties of the culture indicated by the `provider` parameter. The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*sign*|An optional sign. The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*digits*<br /><br /> *fractional_digits*<br /><br /> *exponential_digits*|A sequence of digits from 0 through 9. For *fractional_digits*, only the digit 0 is valid.|  \n|*,*|A culture-specific group separator symbol. The group separator symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*.*|A culture-specific decimal point symbol. The decimal point symbol of the culture designated by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.|  \n|E|The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  \n  \n A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.  \n  \n|NumberStyles value|Elements permitted in value in addition to digits|  \n|------------------------|-------------------------------------------------------|  \n|<xref:System.Globalization.NumberStyles.None>|The *digits* element only.|  \n|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|The decimal point (.) and *fractional-digits* elements.|  \n|<xref:System.Globalization.NumberStyles.AllowExponent>|The \"e\" or \"E\" character, which indicates exponential notation. along with *exponential_digits*.|  \n|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|The *ws* element at the start of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|The *ws* element at the end of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|The *sign* element at the start of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|The *sign* element at the end of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowParentheses>|The *sign* element in the form of parentheses enclosing the numeric value.|  \n|<xref:System.Globalization.NumberStyles.AllowThousands>|The group separator (,) element.|  \n|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|The currency ($) element.|  \n|<xref:System.Globalization.NumberStyles.Currency>|All elements. However, `value` cannot represent a hexadecimal number or a number in exponential notation.|  \n|<xref:System.Globalization.NumberStyles.Float>|The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (.) symbol. The `value` parameter can also use exponential notation.|  \n|<xref:System.Globalization.NumberStyles.Number>|The `ws`, `sign`, group separator (,), and decimal point (.) elements.|  \n|<xref:System.Globalization.NumberStyles.Any>|All elements. However, `value` cannot represent a hexadecimal number.|  \n  \n> [!IMPORTANT]\n>  If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.  \n  \n Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for but do not require the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters. Valid hexadecimal characters are 0-9, A-F, and a-f. The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)  \n  \n> [!NOTE]\n>  If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.  \n  \n If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`. In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero. For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.  \n  \n [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`. Typically, `provider` can be any one of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that represents the culture that provides numeric formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information.  \n  \n-   A <xref:System.Globalization.NumberFormatInfo> object that provides formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  \n  \n-   A custom object that implements <xref:System.IFormatProvider> and uses the <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> method to instantiate and return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used."
  example:
  - "The following example makes several calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method using various combinations of values for the `style` and `provider` parameters.  \n  \n [!code-csharp[System.Numerics.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#2)]\n [!code-vb[System.Numerics.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#2)]  \n  \n A number of the individual calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.  \n  \n [!code-csharp[System.Numerics.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#4)]\n [!code-vb[System.Numerics.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#4)]"
  syntax:
    content: public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string that contains a number to convert.
    - id: style
      type: System.Globalization.NumberStyles
      description: A bitwise combination of the enumeration values that specify the permitted format of <code>value</code>.
    - id: provider
      type: System.IFormatProvider
      description: An object that provides culture-specific formatting information about <code>value</code>.
    return:
      type: System.Numerics.BigInteger
      description: A value that is equivalent to the number specified in the <code>value</code> parameter.
  overload: System.Numerics.BigInteger.Parse*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>style</code> is not a <xref href=\"System.Globalization.NumberStyles\"></xref> value.  \n  \n -or-  \n  \n <code>style</code> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\"></xref> or <xref href=\"System.Globalization.NumberStyles.HexNumber\"></xref> flag along with another value."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>value</code> is `null`.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not comply with the input pattern specified by <code>style</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)
  commentId: M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)
  id: Parse(System.String,System.IFormatProvider)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Parse(String, IFormatProvider)
  nameWithType: BigInteger.Parse(String, IFormatProvider)
  fullName: BigInteger.Parse(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Converts the string representation of a number in a specified culture-specific format to its <xref href="System.Numerics.BigInteger"></xref> equivalent.
  remarks: "The `value` parameter should be the string representation of a number in the following form:  \n  \n [*ws*][*sign*]*digits*[*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space.|  \n|*sign*|An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the <xref:System.Globalization.NumberFormatInfo> object that is returned by the `provider` object's <xref:System.IFormatProvider.GetFormat%2A> method.|  \n|*digits*|A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.|  \n  \n> [!NOTE]\n>  The string specified by the `value` parameter is interpreted using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.  \n  \n> [!IMPORTANT]\n>  If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific formatting information. When the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type. The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information about the format of the `value` parameter. There are three ways to use the `provider` parameter to supply custom formatting information to the parse operation:  \n  \n-   You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.  \n  \n-   You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  \n  \n-   You can pass a custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n If `provider` is `null`, the formatting of `value` is interpreted based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture."
  example:
  - "The following examples show two ways to define the tilde (~) as a negative sign for formatting <xref:System.Numerics.BigInteger> values. Note that to display the <xref:System.Numerics.BigInteger> values in the same format as the original strings, your code must call the <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29?displayProperty=fullName> method and pass it the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n The first example defines a class that implements <xref:System.IFormatProvider> and uses the <xref:System.IFormatProvider.GetFormat%2A> method to return the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n [!code-csharp[System.Numeric.BigInteger.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#2)]\n [!code-vb[System.Numeric.BigInteger.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#2)]  \n  \n A <xref:System.Numerics.BigInteger> object can then be instantiated with the following code:  \n  \n [!code-csharp[System.Numeric.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#3)]\n [!code-vb[System.Numeric.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#3)]  \n  \n The second example is more straightforward. It passes the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information to the `provider` parameter.  \n  \n [!code-csharp[System.Numeric.BigInteger.Parse#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#4)]\n [!code-vb[System.Numeric.BigInteger.Parse#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#4)]"
  syntax:
    content: public static System.Numerics.BigInteger Parse (string value, IFormatProvider provider);
    parameters:
    - id: value
      type: System.String
      description: A string that contains a number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that provides culture-specific formatting information about <code>value</code>.
    return:
      type: System.Numerics.BigInteger
      description: A value that is equivalent to the number specified in the <code>value</code> parameter.
  overload: System.Numerics.BigInteger.Parse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>value</code> is `null`.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in the correct format.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)
  commentId: M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)
  id: Parse(System.String,System.Globalization.NumberStyles)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Parse(String, NumberStyles)
  nameWithType: BigInteger.Parse(String, NumberStyles)
  fullName: BigInteger.Parse(String, NumberStyles)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Converts the string representation of a number in a specified style to its <xref href="System.Numerics.BigInteger"></xref> equivalent.
  remarks: "The `style` parameter defines the style elements (such as white space, the positive or negative sign symbol, the group separator symbol, or the decimal point symbol) that are allowed in the `value` parameter for the parse operation to succeed. `styles` must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. The `style` parameter makes this method overload useful when `value` contains the string representation of a hexadecimal value, when the number system (decimal or hexadecimal) represented by `value` is known only at run time, or when you want to disallow white space or a sign symbol in `value`.  \n  \n Depending on the value of `style`, the `value` parameter may include the following elements:  \n  \n [*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  \n  \n If `style` includes <xref:System.Globalization.NumberStyles?displayProperty=fullName>, the `value` parameter may contain the following elements:  \n  \n [*ws*]*hexdigits*[*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space. White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A?displayProperty=fullName> properties of the current culture. The current culture's currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*sign*|An optional sign. The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*digits*<br /><br /> *fractional_digits*<br /><br /> *exponential_digits*|A sequence of digits from 0 through 9. For *fractional_digits*, only the digit 0 is valid.|  \n|*,*|A culture-specific group separator symbol. The current culture's group separator can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*.*|A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Only the digit 0 can appear as a fractional digit for the parse operation to succeed; if *fractional_digits* includes any other digit, a <xref:System.FormatException> is thrown.|  \n|E|The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  \n  \n A string with digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.  \n  \n|`NumberStyles` value|Elements permitted in `value` in addition to digits|  \n|--------------------------|---------------------------------------------------------|  \n|<xref:System.Globalization.NumberStyles.None>|The *digits* element only.|  \n|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|The decimal point (.) and *fractional-digits* elements.|  \n|<xref:System.Globalization.NumberStyles.AllowExponent>|The \"e\" or \"E\" character, which indicates exponential notation, along with *exponential_digits*.|  \n|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|The *ws* element at the start of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|The *ws* element at the end of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|The *sign* element at the start of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|The *sign* element at the end of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowParentheses>|The *sign* element in the form of parentheses enclosing the numeric value.|  \n|<xref:System.Globalization.NumberStyles.AllowThousands>|The group separator (,) element.|  \n|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|The currency ($) element.|  \n|<xref:System.Globalization.NumberStyles.Currency>|All elements. However, `value` cannot represent a hexadecimal number or a number in exponential notation.|  \n|<xref:System.Globalization.NumberStyles.Float>|The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol. The `value` parameter can also use exponential notation.|  \n|<xref:System.Globalization.NumberStyles.Number>|The `ws`, `sign`, group separator (*,*), and decimal point (*.*) elements.|  \n|<xref:System.Globalization.NumberStyles.Any>|All elements. However, `value` cannot represent a hexadecimal number.|  \n  \n> [!IMPORTANT]\n>  If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value.  \n  \n Unlike the other <xref:System.Globalization.NumberStyles> values, which allow for, but do not require, the presence of particular style elements in `value`, the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style value means that the individual numeric characters in `value` are always interpreted as hexadecimal characters. Valid hexadecimal characters are 0-9, A-F, and a-f. The only other flags that can be combined with the `style` parameter are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration includes a composite number style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)  \n  \n> [!NOTE]\n>  If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.  \n  \n If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`. In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero. For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.  \n  \n [!code-csharp[System.Numerics.BigInteger.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/ParseHex1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/ParseHex1.vb#3)]  \n  \n The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object that is initialized for the current system culture. To specify the culture whose formatting information is used for the parse operation, call the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> overload."
  example:
  - "The following example illustrates calls to the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%29> method with several possible values for the `style` parameter. It illustrates how to interpret a string as a hexadecimal value, and how to disallow spaces and sign symbols.  \n  \n [!code-csharp[System.Numeric.BigInteger.Parse#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/cs/System.Numeric.BigInteger.Parse.cs#5)]\n [!code-vb[System.Numeric.BigInteger.Parse#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Parse/vb/System.Numeric.BigInteger.Parse.vb#5)]"
  syntax:
    content: public static System.Numerics.BigInteger Parse (string value, System.Globalization.NumberStyles style);
    parameters:
    - id: value
      type: System.String
      description: A string that contains a number to convert.
    - id: style
      type: System.Globalization.NumberStyles
      description: A bitwise combination of the enumeration values that specify the permitted format of <code>value</code>.
    return:
      type: System.Numerics.BigInteger
      description: A value that is equivalent to the number specified in the <code>value</code> parameter.
  overload: System.Numerics.BigInteger.Parse*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>style</code> is not a <xref href=\"System.Globalization.NumberStyles\"></xref> value.  \n  \n -or-  \n  \n <code>style</code> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\"></xref> or <xref href=\"System.Globalization.NumberStyles.HexNumber\"></xref> flag along with another value."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>value</code> is `null`.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> does not comply with the input pattern specified by <xref href="System.Globalization.NumberStyles"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Parse(System.String)
  commentId: M:System.Numerics.BigInteger.Parse(System.String)
  id: Parse(System.String)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Parse(String)
  nameWithType: BigInteger.Parse(String)
  fullName: BigInteger.Parse(String)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Converts the string representation of a number to its <xref href="System.Numerics.BigInteger"></xref> equivalent.
  remarks: "The `value` parameter should be the string representation of a number in the following form.  \n  \n [*ws*][*sign*]*digits*[*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space.|  \n|*sign*|An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the current culture.|  \n|*digits*|A sequence of digits ranging from 0 to 9. Any leading zeros are ignored.|  \n  \n> [!NOTE]\n>  The string specified by the `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. It cannot contain any group separators or decimal separator, and it cannot have a decimal portion.  \n  \n The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo?displayProperty=fullName> object that is initialized for the current system culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>. To parse a string by using the formatting information of a specific culture, use the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.IFormatProvider%29> method.  \n  \n> [!IMPORTANT]\n>  If you use the <xref:System.Numerics.BigInteger.Parse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.Parse%2A> method to restore the <xref:System.Numerics.BigInteger> value."
  example:
  - "The following example uses the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method to instantiate two <xref:System.Numerics.BigInteger> objects. It multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two values.  \n  \n [!code-csharp[System.Numerics.BigInteger.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/cs/Parse1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Parse/vb/Parse1.vb#1)]"
  syntax:
    content: public static System.Numerics.BigInteger Parse (string value);
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    return:
      type: System.Numerics.BigInteger
      description: A value that is equivalent to the number specified in the <code>value</code> parameter.
  overload: System.Numerics.BigInteger.Parse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>value</code> is `null`.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>value</code> is not in the correct format.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)
  commentId: M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)
  id: Pow(System.Numerics.BigInteger,System.Int32)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Pow(BigInteger, Int32)
  nameWithType: BigInteger.Pow(BigInteger, Int32)
  fullName: BigInteger.Pow(BigInteger, Int32)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Raises a <xref href="System.Numerics.BigInteger"></xref> value to the power of a specified value.
  remarks: "The <xref:System.Numerics.BigInteger.Pow%2A> method returns 1 if the value of the exponent parameter is 0, or if the values of both the `value` and `exponent` parameters are 0. If `exponent` is 1, the <xref:System.Numerics.BigInteger.Pow%2A> method returns `value`. If `value` is negative, the method returns a negative result.  \n  \n This method corresponds to the <xref:System.Math.Pow%2A?displayProperty=fullName> method for primitive numeric types."
  example:
  - "The following example illustrates exponentiation using a <xref:System.Numerics.BigInteger> value and an exponent whose value ranges from 0 to 10.  \n  \n [!code-csharp[System.Numeric.BigInteger.Class#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/cs/BigInteger_Examples.cs#32)]\n [!code-vb[System.Numeric.BigInteger.Class#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.Class/vb/BigInteger_Examples.vb#32)]"
  syntax:
    content: public static System.Numerics.BigInteger Pow (System.Numerics.BigInteger value, int exponent);
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The number to raise to the <code>exponent</code> power.
    - id: exponent
      type: System.Int32
      description: The exponent to raise <code>value</code> by.
    return:
      type: System.Numerics.BigInteger
      description: The result of raising <code>value</code> to the <code>exponent</code> power.
  overload: System.Numerics.BigInteger.Pow*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value of the <code>exponent</code> parameter is negative.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Remainder(BigInteger, BigInteger)
  nameWithType: BigInteger.Remainder(BigInteger, BigInteger)
  fullName: BigInteger.Remainder(BigInteger, BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Performs integer division on two <xref href="System.Numerics.BigInteger"></xref> values and returns the remainder.
  remarks: "The sign of the remainder is the sign of the `dividend` parameter.  \n  \n The <xref:System.Numerics.BigInteger.Remainder%2A> method is implemented for languages that do not support custom operators. Its behavior is identical to division using the modulus operator.  \n  \n If necessary, the method automatically performs implicit conversion of other integral types to <xref:System.Numerics.BigInteger> objects before it performs the modulus operation."
  example:
  - "The following example compares the remainder from the <xref:System.Numerics.BigInteger.DivRem%2A> method with the remainder returned by the <xref:System.Numerics.BigInteger.Remainder%2A> method to establish that the two methods calculate identical remainders.  \n  \n [!code-csharp[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/cs/Remainder1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.Remainder#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.Remainder/vb/Remainder1.vb#1)]"
  syntax:
    content: public static System.Numerics.BigInteger Remainder (System.Numerics.BigInteger dividend, System.Numerics.BigInteger divisor);
    parameters:
    - id: dividend
      type: System.Numerics.BigInteger
      description: The value to be divided.
    - id: divisor
      type: System.Numerics.BigInteger
      description: The value to divide by.
    return:
      type: System.Numerics.BigInteger
      description: The remainder after dividing <code>dividend</code> by <code>divisor</code>.
  overload: System.Numerics.BigInteger.Remainder*
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: <code>divisor</code> is 0 (zero).
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Sign
  commentId: P:System.Numerics.BigInteger.Sign
  id: Sign
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Sign
  nameWithType: BigInteger.Sign
  fullName: BigInteger.Sign
  type: Property
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Gets a number that indicates the sign (negative, positive, or zero) of the current <xref href="System.Numerics.BigInteger"></xref> object.
  remarks: The <xref:System.Numerics.BigInteger.Sign%2A> property is equivalent to the <xref:System.Math.Sign%2A?displayProperty=fullName> method for the primitive numeric types.
  syntax:
    content: public int Sign { get; }
    return:
      type: System.Int32
      description: "A number that indicates the sign of the <xref href=\"System.Numerics.BigInteger\"></xref> object, as shown in the following table.  \n  \n <table><thead><tr><th> Number  \n  \n </th><th> Description  \n  \n </th></tr></thead><tbody><tr><td> -1  \n  \n </td><td> The value of this object is negative.  \n  \n </td></tr><tr><td> 0  \n  \n </td><td> The value of this object is 0 (zero).  \n  \n </td></tr><tr><td> 1  \n  \n </td><td> The value of this object is positive.  \n  \n </td></tr></tbody></table>"
  overload: System.Numerics.BigInteger.Sign*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Subtract(BigInteger, BigInteger)
  nameWithType: BigInteger.Subtract(BigInteger, BigInteger)
  fullName: BigInteger.Subtract(BigInteger, BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Subtracts one <xref href="System.Numerics.BigInteger"></xref> value from another and returns the result.
  remarks: "Languages that do not support custom operators can use the <xref:System.Numerics.BigInteger.Subtract%2A> method to perform subtraction using <xref:System.Numerics.BigInteger> values.  \n  \n The <xref:System.Numerics.BigInteger.Subtract%2A> method is a useful substitute for the subtraction operator when instantiating a <xref:System.Numerics.BigInteger> variable by assigning it the difference that results from subtraction, as shown in the following example.  \n  \n [!code-csharp[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/cs/Multiply1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.OperationMethods#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.OperationMethods/vb/Multiply1.vb#3)]"
  syntax:
    content: public static System.Numerics.BigInteger Subtract (System.Numerics.BigInteger left, System.Numerics.BigInteger right);
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The value to subtract from (the minuend).
    - id: right
      type: System.Numerics.BigInteger
      description: The value to subtract (the subtrahend).
    return:
      type: System.Numerics.BigInteger
      description: The result of subtracting <code>right</code> from <code>left</code>.
  overload: System.Numerics.BigInteger.Subtract*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.ToByteArray
  commentId: M:System.Numerics.BigInteger.ToByteArray
  id: ToByteArray
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: ToByteArray()
  nameWithType: BigInteger.ToByteArray()
  fullName: BigInteger.ToByteArray()
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Converts a <xref href="System.Numerics.BigInteger"></xref> value to a byte array.
  remarks: "The individual bytes in the array returned by this method appear in little-endian order. That is, the lower-order bytes of the value precede the higher-order bytes. The first byte of the array reflects the first eight bits of the <xref:System.Numerics.BigInteger> value, the second byte reflects the next eight bits, and so on. For example, the value 1024, or 0x0400, is stored as the following array of two bytes:  \n  \n|Element|Byte value|  \n|-------------|----------------|  \n|0|0x00|  \n|1|0x04|  \n  \n Negative values are written to the array using two's complement representation in the most compact form possible. For example, -1 is represented as a single byte whose value is `0xFF` instead of as an array with multiple elements, such as `0xFF`, `0xFF` or `0xFF`, `0xFF`, `0xFF`, `0xFF`.  \n  \n Because two's complement representation always interprets the highest-order bit of the last byte in the array (the byte at position <xref:System.Array.Length%2A?displayProperty=fullName>`- 1`) as the sign bit, the method returns a byte array with an extra element whose value is zero to disambiguate positive values that could otherwise be interpreted as having their sign bits set. For example, the value 120 or `0x78` is represented as a single-byte array: `0x78`. However, 128, or `0x80`, is represented as a two-byte array: `0x80`, `0x00`.  \n  \n You can round-trip a <xref:System.Numerics.BigInteger> value by storing it to a byte array and then restoring it using the <xref:System.Numerics.BigInteger.%23ctor%28System.Byte%5B%5D%29> constructor.  \n  \n> [!CAUTION]\n>  If your code modifies the value of individual bytes in the array returned by this method before it restores the value, you must make sure that you do not unintentionally change the sign bit. For example, if your modifications increase a positive value so that the highest-order bit in the last element of the byte array becomes set, you can add a new byte whose value is zero to the end of the array."
  example:
  - "The following example illustrates how some <xref:System.Numerics.BigInteger> values are represented in byte arrays.  \n  \n [!code-csharp[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/cs/ToByteArray1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.ToByteArray#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToByteArray/vb/ToByteArray1.vb#1)]"
  syntax:
    content: public byte[] ToByteArray ();
    parameters: []
    return:
      type: System.Byte[]
      description: The value of the current <xref href="System.Numerics.BigInteger"></xref> object converted to an array of bytes.
  overload: System.Numerics.BigInteger.ToByteArray*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.ToString
  commentId: M:System.Numerics.BigInteger.ToString
  id: ToString
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: ToString()
  nameWithType: BigInteger.ToString()
  fullName: BigInteger.ToString()
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Converts the numeric value of the current <xref href="System.Numerics.BigInteger"></xref> object to its equivalent string representation.
  remarks: "The <xref:System.Numerics.BigInteger.ToString> method formats a <xref:System.Numerics.BigInteger> value in the \"R\", or round-trip, format of the current culture. If you want to specify a different format or culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Round-trip (\"R\") format|A specific culture|<xref:System.Numerics.BigInteger.ToString%2A>|  \n|A specific format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  \n|A specific format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  \n  \n The string representation of the <xref:System.Numerics.BigInteger> value includes a negative sign if its value is negative, and a sequence of digits ranging from 0 to 9 without leading zeros. The negative sign is defined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture."
  example:
  - "The following example displays a <xref:System.Numerics.BigInteger> value by using the default <xref:System.Numerics.BigInteger.ToString> method. It also displays the string representations of the <xref:System.Numerics.BigInteger> value that results from using some standard format specifiers. The examples are displayed using the formatting conventions of the en-US culture.  \n  \n [!code-csharp[System.Numerics.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#1)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The string representation of the current <xref href="System.Numerics.BigInteger"></xref> value.
  overload: System.Numerics.BigInteger.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.ToString(System.IFormatProvider)
  commentId: M:System.Numerics.BigInteger.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: ToString(IFormatProvider)
  nameWithType: BigInteger.ToString(IFormatProvider)
  fullName: BigInteger.ToString(IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Converts the numeric value of the current <xref href="System.Numerics.BigInteger"></xref> object to its equivalent string representation by using the specified culture-specific formatting information.
  remarks: "The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in the \"R\", or round-trip, format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Round-trip (\"R\") format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString>|  \n|A specific format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  \n|A specific format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method. If `provider` is `null`, the <xref:System.Numerics.BigInteger> value is formatted using the <xref:System.Globalization.NumberFormatInfo> object of the current culture. The only property of the <xref:System.Globalization.NumberFormatInfo> object that controls the string representation of the <xref:System.Numerics.BigInteger> value using the general format specifier is <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName>, which defines the character that represents the negative sign.  \n  \n The `provider` parameter can be one of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information.  \n  \n-   The <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information.  \n  \n-   A custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that supplies formatting information."
  example:
  - "The following example instantiates a custom <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign. The <xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29> method then uses the custom <xref:System.Globalization.NumberFormatInfo> object to display a negative <xref:System.Numerics.BigInteger> value.  \n  \n [!code-csharp[System.Numeric.BigInteger.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/cs/System.Numeric.BigInteger.ToString.cs#1)]\n [!code-vb[System.Numeric.BigInteger.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.ToString/vb/System.Numeric.BigInteger.ToString.vb#1)]"
  syntax:
    content: public string ToString (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of the current <xref href="System.Numerics.BigInteger"></xref> value in the format specified by the <code>provider</code> parameter.
  overload: System.Numerics.BigInteger.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.ToString(System.String)
  commentId: M:System.Numerics.BigInteger.ToString(System.String)
  id: ToString(System.String)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: ToString(String)
  nameWithType: BigInteger.ToString(String)
  fullName: BigInteger.ToString(String)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Converts the numeric value of the current <xref href="System.Numerics.BigInteger"></xref> object to its equivalent string representation by using the specified format.
  remarks: "The <xref:System.Numerics.BigInteger.ToString%28System.String%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using a <xref:System.Globalization.NumberFormatInfo> object that represents the conventions of the current culture. If you want to use the \"R\", or round-trip, format or specify a different culture, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Round-trip (\"R\") format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString>|  \n|Round-trip (\"R\") format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  \n|A specific format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29>|  \n  \n The `format` parameter can be any valid [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md). If `format` is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier (\"R\"). If `format` is any other value, the method throws a <xref:System.FormatException>.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \n  \n-   For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \n  \n The format of the returned string is determined by the <xref:System.Globalization.NumberFormatInfo> object for the current culture. Depending on the `format` parameter, this object controls symbols such as the negative sign, the group separator, and the decimal point symbol in the output string. To provide formatting information for cultures other than the current culture, call the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> overload."
  example:
  - "The following example initializes a <xref:System.Numerics.BigInteger> value and displays it by using each standard format string and some custom format strings.  \n  \n [!code-csharp[System.Numerics.BigInteger.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#3)]"
  syntax:
    content: public string ToString (string format);
    parameters:
    - id: format
      type: System.String
      description: A standard or custom numeric format string.
    return:
      type: System.String
      description: The string representation of the current <xref href="System.Numerics.BigInteger"></xref> value in the format specified by the <code>format</code> parameter.
  overload: System.Numerics.BigInteger.ToString*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>format</code> is not a valid format string.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)
  commentId: M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: ToString(String, IFormatProvider)
  nameWithType: BigInteger.ToString(String, IFormatProvider)
  fullName: BigInteger.ToString(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Converts the numeric value of the current <xref href="System.Numerics.BigInteger"></xref> object to its equivalent string representation by using the specified format and culture-specific format information.
  remarks: "The <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method formats a <xref:System.Numerics.BigInteger> value in a specified format by using the <xref:System.Globalization.NumberFormatInfo> object of a specified culture. If you want to use the round-trip format or default culture settings, use the other overloads of the <xref:System.Numerics.BigInteger.ToString%2A> method, as follows:  \n  \n|To use format|For culture|Use the overload|  \n|-------------------|-----------------|----------------------|  \n|Round-trip (\"R\") format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString>|  \n|Round-trip (\"R\") format|A specific culture|<xref:System.Numerics.BigInteger.ToString%28System.IFormatProvider%29>|  \n|A specific format|Default (current) culture|<xref:System.Numerics.BigInteger.ToString%28System.String%29>|  \n  \n The `format` parameter can be any valid  [standard numeric string](~/docs/standard/base-types/standard-numeric-format-strings.md), or any combination of [custom numeric format strings](~/docs/standard/base-types/custom-numeric-format-strings.md). If `format` is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.Numerics.BigInteger> object is formatted with the round-trip format specifier (\"R\"). If `format` is any other value, the method throws a <xref:System.FormatException>.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/docs/standard/base-types/standard-numeric-format-strings.md) and [Custom Numeric Format Strings](~/docs/standard/base-types/custom-numeric-format-strings.md).  \n  \n-   For more information about support for formatting in the .NET Framework, see [Formatting Types](~/docs/standard/base-types/formatting-types.md).  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of the string returned by this method. When the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method is invoked, it calls the `provider` parameter's <xref:System.IFormatProvider.GetFormat%2A> method and passes it a <xref:System.Type> object that represents the <xref:System.Globalization.NumberFormatInfo> type. The <xref:System.IFormatProvider.GetFormat%2A> method then returns the <xref:System.Globalization.NumberFormatInfo> object that provides information for formatting the `value` parameter, such as the negative sign symbol, the group separator symbol, or the decimal point symbol. There are three ways to use the `provider` parameter to supply formatting information to the <xref:System.Numerics.BigInteger.ToString%28System.String%2CSystem.IFormatProvider%29> method:  \n  \n-   You can pass a <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.  \n  \n-   You can pass the actual <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  \n  \n-   You can pass a custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n If `provider` is `null`, the formatting of the returned string is based on the <xref:System.Globalization.NumberFormatInfo> object of the current culture."
  example:
  - "The following example initializes a <xref:System.Numerics.BigInteger> value, and displays it to the console using a standard format string and a <xref:System.Globalization.NumberFormatInfo> object that defines the tilde (~) as a negative sign.  \n  \n [!code-csharp[System.Numerics.BigInteger.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/cs/ToString1.cs#4)]\n [!code-vb[System.Numerics.BigInteger.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.ToString/vb/ToString1.vb#4)]"
  syntax:
    content: public string ToString (string format, IFormatProvider provider);
    parameters:
    - id: format
      type: System.String
      description: A standard or custom numeric format string.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of the current <xref href="System.Numerics.BigInteger"></xref> value as specified by the <code>format</code> and <code>provider</code> parameters.
  overload: System.Numerics.BigInteger.ToString*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: <code>format</code> is not a valid format string.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)
  commentId: M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)
  id: TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: TryParse(String, NumberStyles, IFormatProvider, BigInteger)
  nameWithType: BigInteger.TryParse(String, NumberStyles, IFormatProvider, BigInteger)
  fullName: BigInteger.TryParse(String, NumberStyles, IFormatProvider, BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Tries to convert the string representation of a number in a specified style and culture-specific format to its <xref href="System.Numerics.BigInteger"></xref> equivalent, and returns a value that indicates whether the conversion succeeded.
  remarks: "The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be parsed successfully.  \n  \n The `style` parameter defines the style elements (such as white space or a positive or negative sign) that are allowed in the `value` parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref:System.Globalization.NumberStyles> enumeration. Depending on the value of `style`, the `value` parameter may include the following elements:  \n  \n [*ws*][*$*][*sign*][*digits*,]*digits*[.*fractional_digits*][E[*sign*]*exponential_digits*][*ws*]  \n  \n If the `style` parameter includes <xref:System.Globalization.NumberStyles.AllowHexSpecifier>, the `value` parameter may include the following elements:  \n  \n [*ws*]*hexdigits*[*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space. White space can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, or at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*$*|A culture-specific currency symbol. Its position in the string is defined by the <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property of the <xref:System.Globalization.NumberFormatInfo> object returned by the <xref:System.IFormatProvider.GetFormat%2A> method of the `provider` parameter. The currency symbol can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*sign*|An optional sign. The sign can appear at the start of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag, and it can appear at the end of `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag. Parentheses can be used in `value` to indicate a negative value if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*digits*|A sequence of digits from 0 through 9.|  \n|*,*|A culture-specific group separator. The group separator of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*.*|A culture-specific decimal point symbol. The decimal point symbol of the culture specified by `provider` can appear in `value` if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*fractional_digits*|One or more occurrences of the digit 0. Fractional digits can appear in `value` only if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|E|The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*exponential_digits*|A sequence of digits from 0 through 9. The `value` parameter can represent a number in exponential notation if `style` includes the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag.|  \n|*hexdigits*|A sequence of hexadecimal digits from 0 through f, or 0 through F.|  \n  \n A string with decimal digits only (which corresponds to the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag) always parses successfully. Most of the remaining <xref:System.Globalization.NumberStyles> members control elements that may be present, but are not required to be present, in this input string. The following table indicates how individual <xref:System.Globalization.NumberStyles> members affect the elements that may be present in `value`.  \n  \n|Non-composite `NumberStyles` values|Elements permitted in value in addition to digits|  \n|------------------------------------------|-------------------------------------------------------|  \n|<xref:System.Globalization.NumberStyles.None>|Decimal digits only.|  \n|<xref:System.Globalization.NumberStyles.AllowDecimalPoint>|The decimal point (*.*) and *fractional_digits* elements. However, *fractional_digits* must consist of only one or more 0 digits, or the method returns `false`.|  \n|<xref:System.Globalization.NumberStyles.AllowExponent>|The \"e\" or \"E\" character, which indicates exponential notation, along with *exponential_digits*. If `value` represents a number in exponential notation, it cannot have a non-zero, fractional component.|  \n|<xref:System.Globalization.NumberStyles.AllowLeadingWhite>|The *ws* element at the start of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowTrailingWhite>|The *ws* element at the end of `value`.|  \n|<xref:System.Globalization.NumberStyles.AllowLeadingSign>|The *sign* element before *digits*.|  \n|<xref:System.Globalization.NumberStyles.AllowTrailingSign>|The *sign* element after *digits*.|  \n|<xref:System.Globalization.NumberStyles.AllowParentheses>|The *sign* element in the form of parentheses enclosing the numeric value.|  \n|<xref:System.Globalization.NumberStyles.AllowThousands>|The group separator (*,*) element.|  \n|<xref:System.Globalization.NumberStyles.AllowCurrencySymbol>|The currency (*$*) element.|  \n|<xref:System.Globalization.NumberStyles.Currency>|All elements. However, `value` cannot represent a hexadecimal number or a number in exponential notation.|  \n|<xref:System.Globalization.NumberStyles.Float>|The *ws* element at the start or end of `value`, *sign* at the start of `value`, and the decimal point (*.*) symbol. The `value` parameter can also use exponential notation.|  \n|<xref:System.Globalization.NumberStyles.Number>|The *ws*, *sign*, group separator (*,*), and decimal point (*.*) elements.|  \n|<xref:System.Globalization.NumberStyles.Any>|All elements. However, `value` cannot represent a hexadecimal number.|  \n  \n> [!IMPORTANT]\n>  If you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to round-trip the string representation of a <xref:System.Numerics.BigInteger> value that was output by the <xref:System.Numerics.BigInteger.ToString%2A> method, you should use the <xref:System.Numerics.BigInteger.ToString%28System.String%29?displayProperty=fullName> method with the \"R\" format specifier to generate the string representation of the <xref:System.Numerics.BigInteger> value. Otherwise, the string representation of the <xref:System.Numerics.BigInteger> preserves only the 50 most significant digits of the original value, and data may be lost when you use the <xref:System.Numerics.BigInteger.TryParse%2A> method to restore the <xref:System.Numerics.BigInteger> value.  \n  \n If the <xref:System.Globalization.NumberStyles?displayProperty=fullName> flag is used, `value` must be a hexadecimal value. The only other flags that can be present in `style` are <xref:System.Globalization.NumberStyles?displayProperty=fullName> and <xref:System.Globalization.NumberStyles?displayProperty=fullName>. (The <xref:System.Globalization.NumberStyles> enumeration has a composite style, <xref:System.Globalization.NumberStyles.HexNumber>, that includes both white-space flags.)  \n  \n> [!NOTE]\n>  If `value` is the string representation of a hexadecimal number, it cannot be preceded by any decoration (such as `0x` or `&h`) that differentiates it as a hexadecimal number. This causes the conversion to fail.  \n  \n If `value` is a hexadecimal string, the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method interprets `value` as a negative number stored by using two's complement representation if its first two hexadecimal digits are greater than or equal to `0x80`. In other words, the method interprets the highest-order bit of the first byte in `value` as the sign bit. To make sure that a hexadecimal string is correctly interpreted as a positive number, the first digit in `value` must have a value of zero. For example, the method interprets `0x80` as a negative value, but it interprets either `0x080` or `0x0080` as a positive value. The following example illustrates the difference between hexadecimal strings that represent negative and positive values.  \n  \n [!code-csharp[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParseHex1.cs#1)]\n [!code-vb[System.Numerics.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParseHex1.vb#1)]  \n  \n The `provider` parameter is an <xref:System.IFormatProvider> implementation. Its <xref:System.IFormatProvider.GetFormat%2A> method returns a <xref:System.Globalization.NumberFormatInfo> object that provides culture-specific information about the format of `value`. The `provider` parameter can be any one of the following:  \n  \n-   A <xref:System.Globalization.CultureInfo> object that represents the culture that supplies formatting information. Its <xref:System.Globalization.CultureInfo.GetFormat%2A> method returns the <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information for that culture.  \n  \n-   A <xref:System.Globalization.NumberFormatInfo> object that provides numeric formatting information. (Its implementation of <xref:System.Globalization.NumberFormatInfo.GetFormat%2A> just returns itself.)  \n  \n-   A custom object that implements <xref:System.IFormatProvider>. Its <xref:System.IFormatProvider.GetFormat%2A> method instantiates and returns the <xref:System.Globalization.NumberFormatInfo> object that provides formatting information.  \n  \n If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used."
  example:
  - "The following example makes some calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method using various combinations of values for the `style` and `provider` parameters.  \n  \n [!code-csharp[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#2)]\n [!code-vb[System.Numerics.BigInteger.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#2)]  \n  \n A number of the individual calls to the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method pass an instance of the following `BigIntegerFormatProvider` class, which defines a tilde (~) as the negative sign.  \n  \n [!code-csharp[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/cs/TryParse1.cs#3)]\n [!code-vb[System.Numerics.BigInteger.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numerics.BigInteger.TryParse/vb/TryParse1.vb#3)]"
  syntax:
    content: public static bool TryParse (string value, System.Globalization.NumberStyles style, IFormatProvider provider, out System.Numerics.BigInteger result);
    parameters:
    - id: value
      type: System.String
      description: The string representation of a number. The string is interpreted using the style specified by <code>style</code>.
    - id: style
      type: System.Globalization.NumberStyles
      description: A bitwise combination of enumeration values that indicates the style elements that can be present in <code>value</code>. A typical value to specify is <xref href="System.Globalization.NumberStyles.Integer"></xref>.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information about <code>value</code>.
    - id: result
      type: System.Numerics.BigInteger
      description: When this method returns, contains the <xref href="System.Numerics.BigInteger"></xref> equivalent to the number that is contained in <code>value</code>, or <xref href="System.Numerics.BigInteger.Zero"></xref> if the conversion failed. The conversion fails if the <code>value</code> parameter is `null` or is not in a format that is compliant with <code>style</code>. This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: '`true` if the <code>value</code> parameter was converted successfully; otherwise, `false`.'
  overload: System.Numerics.BigInteger.TryParse*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>style</code> is not a <xref href=\"System.Globalization.NumberStyles\"></xref> value.  \n  \n -or-  \n  \n <code>style</code> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\"></xref> or <xref href=\"System.Globalization.NumberStyles.HexNumber\"></xref> flag along with another value."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)
  commentId: M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)
  id: TryParse(System.String,System.Numerics.BigInteger@)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: TryParse(String, BigInteger)
  nameWithType: BigInteger.TryParse(String, BigInteger)
  fullName: BigInteger.TryParse(String, BigInteger)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  namespace: System.Numerics
  summary: Tries to convert the string representation of a number to its <xref href="System.Numerics.BigInteger"></xref> equivalent, and returns a value that indicates whether the conversion succeeded.
  remarks: "The <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method is like the <xref:System.Numerics.BigInteger.Parse%28System.String%29> method, except that it does not throw an exception if the conversion fails. This method eliminates the need to use exception handling to test for a <xref:System.FormatException> if `value` is invalid and cannot be successfully parsed.  \n  \n The `value` parameter should be the string representation of a decimal number in the following form:  \n  \n [*ws*][*sign*]*digits*[*ws*]  \n  \n Elements in square brackets ([ and ]) are optional. The following table describes each element.  \n  \n|Element|Description|  \n|-------------|-----------------|  \n|*ws*|Optional white space.|  \n|*sign*|An optional sign. Valid sign characters are determined by the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A?displayProperty=fullName> and <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A?displayProperty=fullName> properties of the current culture.|  \n|*digits*|A sequence of decimal digits ranging from 0 to 9.|  \n  \n> [!NOTE]\n>  The string specified by the `value` parameter cannot contain any group separators or decimal separator, and it cannot have a decimal portion.  \n  \n The `value` parameter is interpreted by using the <xref:System.Globalization.NumberStyles?displayProperty=fullName> style. In addition to the decimal digits, only leading and trailing spaces with a leading sign are allowed. To explicitly define the style elements with the culture-specific formatting information that can be present in `value`, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> method.  \n  \n The `value` parameter is parsed by using the formatting information in a <xref:System.Globalization.NumberFormatInfo> object for the current culture. For more information, see <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName>.  \n  \n This overload interprets all digits in the `value` parameter as decimal digits. To parse the string representation of a hexadecimal number, call the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29> overload instead."
  example:
  - "The following example uses the <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Numerics.BigInteger%40%29> method to instantiate two <xref:System.Numerics.BigInteger> objects. If the conversions succeed, it multiplies each object by another number and then calls the <xref:System.Numerics.BigInteger.Compare%2A> method to determine the relationship between the two objects.  \n  \n [!code-csharp[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/cs/System.Numeric.BigInteger.TryParse.cs#1)]\n [!code-vb[System.Numeric.BigInteger.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Numeric.BigInteger.TryParse/vb/System.Numeric.BigInteger.TryParse.vb#1)]"
  syntax:
    content: public static bool TryParse (string value, out System.Numerics.BigInteger result);
    parameters:
    - id: value
      type: System.String
      description: The string representation of a number.
    - id: result
      type: System.Numerics.BigInteger
      description: When this method returns, contains the <xref href="System.Numerics.BigInteger"></xref> equivalent to the number that is contained in <code>value</code>, or zero (0) if the conversion fails. The conversion fails if the <code>value</code> parameter is `null` or is not of the correct format. This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: '`true` if <code>value</code> was converted successfully; otherwise, `false`.'
  overload: System.Numerics.BigInteger.TryParse*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>value</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.Zero
  commentId: P:System.Numerics.BigInteger.Zero
  id: Zero
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: Zero
  nameWithType: BigInteger.Zero
  fullName: BigInteger.Zero
  type: Property
  assemblies:
  - System.Runtime.Numerics
  - System.Numerics
  - netstandard
  - FSharp.Core
  namespace: System.Numerics
  summary: Gets a value that represents the number 0 (zero).
  remarks: The <xref:System.Numerics.BigInteger> object returned by this property provides a convenient source of a zero value for use in assignments and comparisons.
  syntax:
    content: public static System.Numerics.BigInteger Zero { get; }
    return:
      type: System.Numerics.BigInteger
      description: An integer whose value is 0 (zero).
  overload: System.Numerics.BigInteger.Zero*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)
  commentId: M:System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  name: IComparable.CompareTo(Object)
  nameWithType: BigInteger.IComparable.CompareTo(Object)
  fullName: BigInteger.IComparable.CompareTo(Object)
  type: Method
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  syntax:
    content: int IComparable.CompareTo (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: ''
    return:
      type: System.Int32
      description: ''
  overload: System.Numerics.BigInteger.System#IComparable#CompareTo*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
references:
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.OverflowException
  parent: System
  isExternal: false
  name: OverflowException
  nameWithType: OverflowException
  fullName: System.OverflowException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.DivideByZeroException
  parent: System
  isExternal: false
  name: DivideByZeroException
  nameWithType: DivideByZeroException
  fullName: System.DivideByZeroException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
- uid: System.Numerics.BigInteger.#ctor(System.Byte[])
  parent: System.Numerics.BigInteger
  isExternal: false
  name: BigInteger(Byte[])
  nameWithType: BigInteger.BigInteger(Byte[])
  fullName: BigInteger.BigInteger(Byte[])
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Byte[]
  parent: System
  isExternal: false
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Numerics.BigInteger.#ctor(System.Decimal)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: BigInteger(Decimal)
  nameWithType: BigInteger.BigInteger(Decimal)
  fullName: BigInteger.BigInteger(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Numerics.BigInteger.#ctor(System.Double)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: BigInteger(Double)
  nameWithType: BigInteger.BigInteger(Double)
  fullName: BigInteger.BigInteger(Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Numerics.BigInteger.#ctor(System.Int32)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: BigInteger(Int32)
  nameWithType: BigInteger.BigInteger(Int32)
  fullName: BigInteger.BigInteger(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Numerics.BigInteger.#ctor(System.Int64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: BigInteger(Int64)
  nameWithType: BigInteger.BigInteger(Int64)
  fullName: BigInteger.BigInteger(Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Numerics.BigInteger.#ctor(System.Single)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: BigInteger(Single)
  nameWithType: BigInteger.BigInteger(Single)
  fullName: BigInteger.BigInteger(Single)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Numerics.BigInteger.#ctor(System.UInt32)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: BigInteger(UInt32)
  nameWithType: BigInteger.BigInteger(UInt32)
  fullName: BigInteger.BigInteger(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Numerics.BigInteger.#ctor(System.UInt64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: BigInteger(UInt64)
  nameWithType: BigInteger.BigInteger(UInt64)
  fullName: BigInteger.BigInteger(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Abs(BigInteger)
  nameWithType: BigInteger.Abs(BigInteger)
  fullName: BigInteger.Abs(BigInteger)
- uid: System.Numerics.BigInteger
  parent: System.Numerics
  isExternal: false
  name: BigInteger
  nameWithType: BigInteger
  fullName: System.Numerics.BigInteger
- uid: System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Add(BigInteger, BigInteger)
  nameWithType: BigInteger.Add(BigInteger, BigInteger)
  fullName: BigInteger.Add(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Compare(BigInteger, BigInteger)
  nameWithType: BigInteger.Compare(BigInteger, BigInteger)
  fullName: BigInteger.Compare(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.CompareTo(System.UInt64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: CompareTo(UInt64)
  nameWithType: BigInteger.CompareTo(UInt64)
  fullName: BigInteger.CompareTo(UInt64)
- uid: System.Numerics.BigInteger.CompareTo(System.Object)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: CompareTo(Object)
  nameWithType: BigInteger.CompareTo(Object)
  fullName: BigInteger.CompareTo(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: CompareTo(BigInteger)
  nameWithType: BigInteger.CompareTo(BigInteger)
  fullName: BigInteger.CompareTo(BigInteger)
- uid: System.Numerics.BigInteger.CompareTo(System.Int64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: CompareTo(Int64)
  nameWithType: BigInteger.CompareTo(Int64)
  fullName: BigInteger.CompareTo(Int64)
- uid: System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Divide(BigInteger, BigInteger)
  nameWithType: BigInteger.Divide(BigInteger, BigInteger)
  fullName: BigInteger.Divide(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: DivRem(BigInteger, BigInteger, BigInteger)
  nameWithType: BigInteger.DivRem(BigInteger, BigInteger, BigInteger)
  fullName: BigInteger.DivRem(BigInteger, BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.Equals(System.Int64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Equals(Int64)
  nameWithType: BigInteger.Equals(Int64)
  fullName: BigInteger.Equals(Int64)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Equals(BigInteger)
  nameWithType: BigInteger.Equals(BigInteger)
  fullName: BigInteger.Equals(BigInteger)
- uid: System.Numerics.BigInteger.Equals(System.Object)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Equals(Object)
  nameWithType: BigInteger.Equals(Object)
  fullName: BigInteger.Equals(Object)
- uid: System.Numerics.BigInteger.Equals(System.UInt64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Equals(UInt64)
  nameWithType: BigInteger.Equals(UInt64)
  fullName: BigInteger.Equals(UInt64)
- uid: System.Numerics.BigInteger.GetHashCode
  parent: System.Numerics.BigInteger
  isExternal: false
  name: GetHashCode()
  nameWithType: BigInteger.GetHashCode()
  fullName: BigInteger.GetHashCode()
- uid: System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: GreatestCommonDivisor(BigInteger, BigInteger)
  nameWithType: BigInteger.GreatestCommonDivisor(BigInteger, BigInteger)
  fullName: BigInteger.GreatestCommonDivisor(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.IsEven
  parent: System.Numerics.BigInteger
  isExternal: false
  name: IsEven
  nameWithType: BigInteger.IsEven
  fullName: BigInteger.IsEven
- uid: System.Numerics.BigInteger.IsOne
  parent: System.Numerics.BigInteger
  isExternal: false
  name: IsOne
  nameWithType: BigInteger.IsOne
  fullName: BigInteger.IsOne
- uid: System.Numerics.BigInteger.IsPowerOfTwo
  parent: System.Numerics.BigInteger
  isExternal: false
  name: IsPowerOfTwo
  nameWithType: BigInteger.IsPowerOfTwo
  fullName: BigInteger.IsPowerOfTwo
- uid: System.Numerics.BigInteger.IsZero
  parent: System.Numerics.BigInteger
  isExternal: false
  name: IsZero
  nameWithType: BigInteger.IsZero
  fullName: BigInteger.IsZero
- uid: System.Numerics.BigInteger.Log(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Log(BigInteger)
  nameWithType: BigInteger.Log(BigInteger)
  fullName: BigInteger.Log(BigInteger)
- uid: System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Log(BigInteger, Double)
  nameWithType: BigInteger.Log(BigInteger, Double)
  fullName: BigInteger.Log(BigInteger, Double)
- uid: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Log10(BigInteger)
  nameWithType: BigInteger.Log10(BigInteger)
  fullName: BigInteger.Log10(BigInteger)
- uid: System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Max(BigInteger, BigInteger)
  nameWithType: BigInteger.Max(BigInteger, BigInteger)
  fullName: BigInteger.Max(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Min(BigInteger, BigInteger)
  nameWithType: BigInteger.Min(BigInteger, BigInteger)
  fullName: BigInteger.Min(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.MinusOne
  parent: System.Numerics.BigInteger
  isExternal: false
  name: MinusOne
  nameWithType: BigInteger.MinusOne
  fullName: BigInteger.MinusOne
- uid: System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: ModPow(BigInteger, BigInteger, BigInteger)
  nameWithType: BigInteger.ModPow(BigInteger, BigInteger, BigInteger)
  fullName: BigInteger.ModPow(BigInteger, BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Multiply(BigInteger, BigInteger)
  nameWithType: BigInteger.Multiply(BigInteger, BigInteger)
  fullName: BigInteger.Multiply(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Negate(BigInteger)
  nameWithType: BigInteger.Negate(BigInteger)
  fullName: BigInteger.Negate(BigInteger)
- uid: System.Numerics.BigInteger.One
  parent: System.Numerics.BigInteger
  isExternal: false
  name: One
  nameWithType: BigInteger.One
  fullName: BigInteger.One
- uid: System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Addition(BigInteger, BigInteger)
  nameWithType: BigInteger.op_Addition(BigInteger, BigInteger)
  fullName: BigInteger.op_Addition(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_BitwiseAnd(BigInteger, BigInteger)
  nameWithType: BigInteger.op_BitwiseAnd(BigInteger, BigInteger)
  fullName: BigInteger.op_BitwiseAnd(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_BitwiseOr(BigInteger, BigInteger)
  nameWithType: BigInteger.op_BitwiseOr(BigInteger, BigInteger)
  fullName: BigInteger.op_BitwiseOr(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Decrement(BigInteger)
  nameWithType: BigInteger.op_Decrement(BigInteger)
  fullName: BigInteger.op_Decrement(BigInteger)
- uid: System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Division(BigInteger, BigInteger)
  nameWithType: BigInteger.op_Division(BigInteger, BigInteger)
  fullName: BigInteger.op_Division(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Equality(Int64, BigInteger)
  nameWithType: BigInteger.op_Equality(Int64, BigInteger)
  fullName: BigInteger.op_Equality(Int64, BigInteger)
- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Equality(BigInteger, Int64)
  nameWithType: BigInteger.op_Equality(BigInteger, Int64)
  fullName: BigInteger.op_Equality(BigInteger, Int64)
- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Equality(BigInteger, BigInteger)
  nameWithType: BigInteger.op_Equality(BigInteger, BigInteger)
  fullName: BigInteger.op_Equality(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Equality(BigInteger, UInt64)
  nameWithType: BigInteger.op_Equality(BigInteger, UInt64)
  fullName: BigInteger.op_Equality(BigInteger, UInt64)
- uid: System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Equality(UInt64, BigInteger)
  nameWithType: BigInteger.op_Equality(UInt64, BigInteger)
  fullName: BigInteger.op_Equality(UInt64, BigInteger)
- uid: System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_ExclusiveOr(BigInteger, BigInteger)
  nameWithType: BigInteger.op_ExclusiveOr(BigInteger, BigInteger)
  fullName: BigInteger.op_ExclusiveOr(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.op_Explicit(System.Single to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Explicit(Single to BigInteger)
  nameWithType: BigInteger.op_Explicit(Single to BigInteger)
  fullName: BigInteger.op_Explicit(Single to BigInteger)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt32)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Explicit(BigInteger to UInt32)
  nameWithType: BigInteger.op_Explicit(BigInteger to UInt32)
  fullName: BigInteger.op_Explicit(BigInteger to UInt32)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt16)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Explicit(BigInteger to UInt16)
  nameWithType: BigInteger.op_Explicit(BigInteger to UInt16)
  fullName: BigInteger.op_Explicit(BigInteger to UInt16)
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Single)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Explicit(BigInteger to Single)
  nameWithType: BigInteger.op_Explicit(BigInteger to Single)
  fullName: BigInteger.op_Explicit(BigInteger to Single)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.SByte)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Explicit(BigInteger to SByte)
  nameWithType: BigInteger.op_Explicit(BigInteger to SByte)
  fullName: BigInteger.op_Explicit(BigInteger to SByte)
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Explicit(BigInteger to Int64)
  nameWithType: BigInteger.op_Explicit(BigInteger to Int64)
  fullName: BigInteger.op_Explicit(BigInteger to Int64)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.UInt64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Explicit(BigInteger to UInt64)
  nameWithType: BigInteger.op_Explicit(BigInteger to UInt64)
  fullName: BigInteger.op_Explicit(BigInteger to UInt64)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int16)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Explicit(BigInteger to Int16)
  nameWithType: BigInteger.op_Explicit(BigInteger to Int16)
  fullName: BigInteger.op_Explicit(BigInteger to Int16)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Double)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Explicit(BigInteger to Double)
  nameWithType: BigInteger.op_Explicit(BigInteger to Double)
  fullName: BigInteger.op_Explicit(BigInteger to Double)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Decimal)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Explicit(BigInteger to Decimal)
  nameWithType: BigInteger.op_Explicit(BigInteger to Decimal)
  fullName: BigInteger.op_Explicit(BigInteger to Decimal)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Byte)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Explicit(BigInteger to Byte)
  nameWithType: BigInteger.op_Explicit(BigInteger to Byte)
  fullName: BigInteger.op_Explicit(BigInteger to Byte)
- uid: System.Numerics.BigInteger.op_Explicit(System.Double to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Explicit(Double to BigInteger)
  nameWithType: BigInteger.op_Explicit(Double to BigInteger)
  fullName: BigInteger.op_Explicit(Double to BigInteger)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger to System.Int32)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Explicit(BigInteger to Int32)
  nameWithType: BigInteger.op_Explicit(BigInteger to Int32)
  fullName: BigInteger.op_Explicit(BigInteger to Int32)
- uid: System.Numerics.BigInteger.op_Explicit(System.Decimal to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Explicit(Decimal to BigInteger)
  nameWithType: BigInteger.op_Explicit(Decimal to BigInteger)
  fullName: BigInteger.op_Explicit(Decimal to BigInteger)
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_GreaterThan(Int64, BigInteger)
  nameWithType: BigInteger.op_GreaterThan(Int64, BigInteger)
  fullName: BigInteger.op_GreaterThan(Int64, BigInteger)
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_GreaterThan(BigInteger, Int64)
  nameWithType: BigInteger.op_GreaterThan(BigInteger, Int64)
  fullName: BigInteger.op_GreaterThan(BigInteger, Int64)
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_GreaterThan(BigInteger, BigInteger)
  nameWithType: BigInteger.op_GreaterThan(BigInteger, BigInteger)
  fullName: BigInteger.op_GreaterThan(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_GreaterThan(BigInteger, UInt64)
  nameWithType: BigInteger.op_GreaterThan(BigInteger, UInt64)
  fullName: BigInteger.op_GreaterThan(BigInteger, UInt64)
- uid: System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_GreaterThan(UInt64, BigInteger)
  nameWithType: BigInteger.op_GreaterThan(UInt64, BigInteger)
  fullName: BigInteger.op_GreaterThan(UInt64, BigInteger)
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_GreaterThanOrEqual(BigInteger, UInt64)
  nameWithType: BigInteger.op_GreaterThanOrEqual(BigInteger, UInt64)
  fullName: BigInteger.op_GreaterThanOrEqual(BigInteger, UInt64)
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_GreaterThanOrEqual(BigInteger, BigInteger)
  nameWithType: BigInteger.op_GreaterThanOrEqual(BigInteger, BigInteger)
  fullName: BigInteger.op_GreaterThanOrEqual(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_GreaterThanOrEqual(UInt64, BigInteger)
  nameWithType: BigInteger.op_GreaterThanOrEqual(UInt64, BigInteger)
  fullName: BigInteger.op_GreaterThanOrEqual(UInt64, BigInteger)
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_GreaterThanOrEqual(Int64, BigInteger)
  nameWithType: BigInteger.op_GreaterThanOrEqual(Int64, BigInteger)
  fullName: BigInteger.op_GreaterThanOrEqual(Int64, BigInteger)
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_GreaterThanOrEqual(BigInteger, Int64)
  nameWithType: BigInteger.op_GreaterThanOrEqual(BigInteger, Int64)
  fullName: BigInteger.op_GreaterThanOrEqual(BigInteger, Int64)
- uid: System.Numerics.BigInteger.op_Implicit(System.UInt32 to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Implicit(UInt32 to BigInteger)
  nameWithType: BigInteger.op_Implicit(UInt32 to BigInteger)
  fullName: BigInteger.op_Implicit(UInt32 to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.UInt16 to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Implicit(UInt16 to BigInteger)
  nameWithType: BigInteger.op_Implicit(UInt16 to BigInteger)
  fullName: BigInteger.op_Implicit(UInt16 to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.SByte to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Implicit(SByte to BigInteger)
  nameWithType: BigInteger.op_Implicit(SByte to BigInteger)
  fullName: BigInteger.op_Implicit(SByte to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.UInt64 to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Implicit(UInt64 to BigInteger)
  nameWithType: BigInteger.op_Implicit(UInt64 to BigInteger)
  fullName: BigInteger.op_Implicit(UInt64 to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.Int32 to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Implicit(Int32 to BigInteger)
  nameWithType: BigInteger.op_Implicit(Int32 to BigInteger)
  fullName: BigInteger.op_Implicit(Int32 to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.Int16 to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Implicit(Int16 to BigInteger)
  nameWithType: BigInteger.op_Implicit(Int16 to BigInteger)
  fullName: BigInteger.op_Implicit(Int16 to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.Byte to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Implicit(Byte to BigInteger)
  nameWithType: BigInteger.op_Implicit(Byte to BigInteger)
  fullName: BigInteger.op_Implicit(Byte to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.Int64 to System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Implicit(Int64 to BigInteger)
  nameWithType: BigInteger.op_Implicit(Int64 to BigInteger)
  fullName: BigInteger.op_Implicit(Int64 to BigInteger)
- uid: System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Increment(BigInteger)
  nameWithType: BigInteger.op_Increment(BigInteger)
  fullName: BigInteger.op_Increment(BigInteger)
- uid: System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Inequality(Int64, BigInteger)
  nameWithType: BigInteger.op_Inequality(Int64, BigInteger)
  fullName: BigInteger.op_Inequality(Int64, BigInteger)
- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Inequality(BigInteger, Int64)
  nameWithType: BigInteger.op_Inequality(BigInteger, Int64)
  fullName: BigInteger.op_Inequality(BigInteger, Int64)
- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Inequality(BigInteger, BigInteger)
  nameWithType: BigInteger.op_Inequality(BigInteger, BigInteger)
  fullName: BigInteger.op_Inequality(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Inequality(BigInteger, UInt64)
  nameWithType: BigInteger.op_Inequality(BigInteger, UInt64)
  fullName: BigInteger.op_Inequality(BigInteger, UInt64)
- uid: System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Inequality(UInt64, BigInteger)
  nameWithType: BigInteger.op_Inequality(UInt64, BigInteger)
  fullName: BigInteger.op_Inequality(UInt64, BigInteger)
- uid: System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_LeftShift(BigInteger, Int32)
  nameWithType: BigInteger.op_LeftShift(BigInteger, Int32)
  fullName: BigInteger.op_LeftShift(BigInteger, Int32)
- uid: System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_LessThan(UInt64, BigInteger)
  nameWithType: BigInteger.op_LessThan(UInt64, BigInteger)
  fullName: BigInteger.op_LessThan(UInt64, BigInteger)
- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_LessThan(BigInteger, UInt64)
  nameWithType: BigInteger.op_LessThan(BigInteger, UInt64)
  fullName: BigInteger.op_LessThan(BigInteger, UInt64)
- uid: System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_LessThan(Int64, BigInteger)
  nameWithType: BigInteger.op_LessThan(Int64, BigInteger)
  fullName: BigInteger.op_LessThan(Int64, BigInteger)
- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_LessThan(BigInteger, Int64)
  nameWithType: BigInteger.op_LessThan(BigInteger, Int64)
  fullName: BigInteger.op_LessThan(BigInteger, Int64)
- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_LessThan(BigInteger, BigInteger)
  nameWithType: BigInteger.op_LessThan(BigInteger, BigInteger)
  fullName: BigInteger.op_LessThan(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_LessThanOrEqual(Int64, BigInteger)
  nameWithType: BigInteger.op_LessThanOrEqual(Int64, BigInteger)
  fullName: BigInteger.op_LessThanOrEqual(Int64, BigInteger)
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_LessThanOrEqual(BigInteger, Int64)
  nameWithType: BigInteger.op_LessThanOrEqual(BigInteger, Int64)
  fullName: BigInteger.op_LessThanOrEqual(BigInteger, Int64)
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_LessThanOrEqual(BigInteger, BigInteger)
  nameWithType: BigInteger.op_LessThanOrEqual(BigInteger, BigInteger)
  fullName: BigInteger.op_LessThanOrEqual(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_LessThanOrEqual(BigInteger, UInt64)
  nameWithType: BigInteger.op_LessThanOrEqual(BigInteger, UInt64)
  fullName: BigInteger.op_LessThanOrEqual(BigInteger, UInt64)
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_LessThanOrEqual(UInt64, BigInteger)
  nameWithType: BigInteger.op_LessThanOrEqual(UInt64, BigInteger)
  fullName: BigInteger.op_LessThanOrEqual(UInt64, BigInteger)
- uid: System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Modulus(BigInteger, BigInteger)
  nameWithType: BigInteger.op_Modulus(BigInteger, BigInteger)
  fullName: BigInteger.op_Modulus(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Multiply(BigInteger, BigInteger)
  nameWithType: BigInteger.op_Multiply(BigInteger, BigInteger)
  fullName: BigInteger.op_Multiply(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_OnesComplement(BigInteger)
  nameWithType: BigInteger.op_OnesComplement(BigInteger)
  fullName: BigInteger.op_OnesComplement(BigInteger)
- uid: System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_RightShift(BigInteger, Int32)
  nameWithType: BigInteger.op_RightShift(BigInteger, Int32)
  fullName: BigInteger.op_RightShift(BigInteger, Int32)
- uid: System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Subtraction(BigInteger, BigInteger)
  nameWithType: BigInteger.op_Subtraction(BigInteger, BigInteger)
  fullName: BigInteger.op_Subtraction(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_UnaryNegation(BigInteger)
  nameWithType: BigInteger.op_UnaryNegation(BigInteger)
  fullName: BigInteger.op_UnaryNegation(BigInteger)
- uid: System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_UnaryPlus(BigInteger)
  nameWithType: BigInteger.op_UnaryPlus(BigInteger)
  fullName: BigInteger.op_UnaryPlus(BigInteger)
- uid: System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Parse(String, NumberStyles, IFormatProvider)
  nameWithType: BigInteger.Parse(String, NumberStyles, IFormatProvider)
  fullName: BigInteger.Parse(String, NumberStyles, IFormatProvider)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Globalization.NumberStyles
  parent: System.Globalization
  isExternal: false
  name: NumberStyles
  nameWithType: NumberStyles
  fullName: System.Globalization.NumberStyles
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Parse(String, IFormatProvider)
  nameWithType: BigInteger.Parse(String, IFormatProvider)
  fullName: BigInteger.Parse(String, IFormatProvider)
- uid: System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Parse(String, NumberStyles)
  nameWithType: BigInteger.Parse(String, NumberStyles)
  fullName: BigInteger.Parse(String, NumberStyles)
- uid: System.Numerics.BigInteger.Parse(System.String)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Parse(String)
  nameWithType: BigInteger.Parse(String)
  fullName: BigInteger.Parse(String)
- uid: System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Pow(BigInteger, Int32)
  nameWithType: BigInteger.Pow(BigInteger, Int32)
  fullName: BigInteger.Pow(BigInteger, Int32)
- uid: System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Remainder(BigInteger, BigInteger)
  nameWithType: BigInteger.Remainder(BigInteger, BigInteger)
  fullName: BigInteger.Remainder(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.Sign
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Sign
  nameWithType: BigInteger.Sign
  fullName: BigInteger.Sign
- uid: System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Subtract(BigInteger, BigInteger)
  nameWithType: BigInteger.Subtract(BigInteger, BigInteger)
  fullName: BigInteger.Subtract(BigInteger, BigInteger)
- uid: System.Numerics.BigInteger.ToByteArray
  parent: System.Numerics.BigInteger
  isExternal: false
  name: ToByteArray()
  nameWithType: BigInteger.ToByteArray()
  fullName: BigInteger.ToByteArray()
- uid: System.Numerics.BigInteger.ToString
  parent: System.Numerics.BigInteger
  isExternal: false
  name: ToString()
  nameWithType: BigInteger.ToString()
  fullName: BigInteger.ToString()
- uid: System.Numerics.BigInteger.ToString(System.IFormatProvider)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: ToString(IFormatProvider)
  nameWithType: BigInteger.ToString(IFormatProvider)
  fullName: BigInteger.ToString(IFormatProvider)
- uid: System.Numerics.BigInteger.ToString(System.String)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: ToString(String)
  nameWithType: BigInteger.ToString(String)
  fullName: BigInteger.ToString(String)
- uid: System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: ToString(String, IFormatProvider)
  nameWithType: BigInteger.ToString(String, IFormatProvider)
  fullName: BigInteger.ToString(String, IFormatProvider)
- uid: System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: TryParse(String, NumberStyles, IFormatProvider, BigInteger)
  nameWithType: BigInteger.TryParse(String, NumberStyles, IFormatProvider, BigInteger)
  fullName: BigInteger.TryParse(String, NumberStyles, IFormatProvider, BigInteger)
- uid: System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: TryParse(String, BigInteger)
  nameWithType: BigInteger.TryParse(String, BigInteger)
  fullName: BigInteger.TryParse(String, BigInteger)
- uid: System.Numerics.BigInteger.Zero
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Zero
  nameWithType: BigInteger.Zero
  fullName: BigInteger.Zero
- uid: System.Numerics.BigInteger.System#IComparable#CompareTo(System.Object)
  parent: System.Numerics.BigInteger
  isExternal: false
  name: IComparable.CompareTo(Object)
  nameWithType: BigInteger.IComparable.CompareTo(Object)
  fullName: BigInteger.IComparable.CompareTo(Object)
- uid: System.Numerics.BigInteger.#ctor*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: BigInteger
  nameWithType: BigInteger.BigInteger
  fullName: BigInteger.BigInteger
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Abs*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Abs
  nameWithType: BigInteger.Abs
  fullName: BigInteger.Abs
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Add*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Add
  nameWithType: BigInteger.Add
  fullName: BigInteger.Add
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Compare*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Compare
  nameWithType: BigInteger.Compare
  fullName: BigInteger.Compare
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.CompareTo*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: CompareTo
  nameWithType: BigInteger.CompareTo
  fullName: BigInteger.CompareTo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Divide*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Divide
  nameWithType: BigInteger.Divide
  fullName: BigInteger.Divide
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.DivRem*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: DivRem
  nameWithType: BigInteger.DivRem
  fullName: BigInteger.DivRem
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Equals*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Equals
  nameWithType: BigInteger.Equals
  fullName: BigInteger.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.GetHashCode*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: GetHashCode
  nameWithType: BigInteger.GetHashCode
  fullName: BigInteger.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.GreatestCommonDivisor*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: GreatestCommonDivisor
  nameWithType: BigInteger.GreatestCommonDivisor
  fullName: BigInteger.GreatestCommonDivisor
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.IsEven*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: IsEven
  nameWithType: BigInteger.IsEven
  fullName: BigInteger.IsEven
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.IsOne*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: IsOne
  nameWithType: BigInteger.IsOne
  fullName: BigInteger.IsOne
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.IsPowerOfTwo*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: IsPowerOfTwo
  nameWithType: BigInteger.IsPowerOfTwo
  fullName: BigInteger.IsPowerOfTwo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.IsZero*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: IsZero
  nameWithType: BigInteger.IsZero
  fullName: BigInteger.IsZero
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Log*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Log
  nameWithType: BigInteger.Log
  fullName: BigInteger.Log
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Log10*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Log10
  nameWithType: BigInteger.Log10
  fullName: BigInteger.Log10
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Max*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Max
  nameWithType: BigInteger.Max
  fullName: BigInteger.Max
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Min*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Min
  nameWithType: BigInteger.Min
  fullName: BigInteger.Min
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.MinusOne*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: MinusOne
  nameWithType: BigInteger.MinusOne
  fullName: BigInteger.MinusOne
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.ModPow*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: ModPow
  nameWithType: BigInteger.ModPow
  fullName: BigInteger.ModPow
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Multiply*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Multiply
  nameWithType: BigInteger.Multiply
  fullName: BigInteger.Multiply
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Negate*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Negate
  nameWithType: BigInteger.Negate
  fullName: BigInteger.Negate
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.One*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: One
  nameWithType: BigInteger.One
  fullName: BigInteger.One
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Addition*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Addition
  nameWithType: BigInteger.op_Addition
  fullName: BigInteger.op_Addition
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_BitwiseAnd*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_BitwiseAnd
  nameWithType: BigInteger.op_BitwiseAnd
  fullName: BigInteger.op_BitwiseAnd
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_BitwiseOr*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_BitwiseOr
  nameWithType: BigInteger.op_BitwiseOr
  fullName: BigInteger.op_BitwiseOr
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Decrement*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Decrement
  nameWithType: BigInteger.op_Decrement
  fullName: BigInteger.op_Decrement
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Division*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Division
  nameWithType: BigInteger.op_Division
  fullName: BigInteger.op_Division
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Equality*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Equality
  nameWithType: BigInteger.op_Equality
  fullName: BigInteger.op_Equality
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_ExclusiveOr*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_ExclusiveOr
  nameWithType: BigInteger.op_ExclusiveOr
  fullName: BigInteger.op_ExclusiveOr
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Explicit*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Explicit
  nameWithType: BigInteger.op_Explicit
  fullName: BigInteger.op_Explicit
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_GreaterThan*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_GreaterThan
  nameWithType: BigInteger.op_GreaterThan
  fullName: BigInteger.op_GreaterThan
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_GreaterThanOrEqual
  nameWithType: BigInteger.op_GreaterThanOrEqual
  fullName: BigInteger.op_GreaterThanOrEqual
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Implicit*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Implicit
  nameWithType: BigInteger.op_Implicit
  fullName: BigInteger.op_Implicit
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Increment*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Increment
  nameWithType: BigInteger.op_Increment
  fullName: BigInteger.op_Increment
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Inequality*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Inequality
  nameWithType: BigInteger.op_Inequality
  fullName: BigInteger.op_Inequality
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_LeftShift*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_LeftShift
  nameWithType: BigInteger.op_LeftShift
  fullName: BigInteger.op_LeftShift
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_LessThan*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_LessThan
  nameWithType: BigInteger.op_LessThan
  fullName: BigInteger.op_LessThan
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_LessThanOrEqual*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_LessThanOrEqual
  nameWithType: BigInteger.op_LessThanOrEqual
  fullName: BigInteger.op_LessThanOrEqual
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Modulus*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Modulus
  nameWithType: BigInteger.op_Modulus
  fullName: BigInteger.op_Modulus
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Multiply*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Multiply
  nameWithType: BigInteger.op_Multiply
  fullName: BigInteger.op_Multiply
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_OnesComplement*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_OnesComplement
  nameWithType: BigInteger.op_OnesComplement
  fullName: BigInteger.op_OnesComplement
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_RightShift*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_RightShift
  nameWithType: BigInteger.op_RightShift
  fullName: BigInteger.op_RightShift
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_Subtraction*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_Subtraction
  nameWithType: BigInteger.op_Subtraction
  fullName: BigInteger.op_Subtraction
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_UnaryNegation*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_UnaryNegation
  nameWithType: BigInteger.op_UnaryNegation
  fullName: BigInteger.op_UnaryNegation
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.op_UnaryPlus*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: op_UnaryPlus
  nameWithType: BigInteger.op_UnaryPlus
  fullName: BigInteger.op_UnaryPlus
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Parse*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Parse
  nameWithType: BigInteger.Parse
  fullName: BigInteger.Parse
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Pow*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Pow
  nameWithType: BigInteger.Pow
  fullName: BigInteger.Pow
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Remainder*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Remainder
  nameWithType: BigInteger.Remainder
  fullName: BigInteger.Remainder
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Sign*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Sign
  nameWithType: BigInteger.Sign
  fullName: BigInteger.Sign
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Subtract*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Subtract
  nameWithType: BigInteger.Subtract
  fullName: BigInteger.Subtract
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.ToByteArray*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: ToByteArray
  nameWithType: BigInteger.ToByteArray
  fullName: BigInteger.ToByteArray
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.ToString*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: ToString
  nameWithType: BigInteger.ToString
  fullName: BigInteger.ToString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.TryParse*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: TryParse
  nameWithType: BigInteger.TryParse
  fullName: BigInteger.TryParse
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.Zero*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: Zero
  nameWithType: BigInteger.Zero
  fullName: BigInteger.Zero
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.Numerics.BigInteger.System#IComparable#CompareTo*
  parent: System.Numerics.BigInteger
  isExternal: false
  name: System.IComparable.CompareTo
  nameWithType: BigInteger.System.IComparable.CompareTo
  fullName: BigInteger.System.IComparable.CompareTo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/BigInteger.xml
- uid: System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.IComparable`1
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
- uid: System.IComparable{System.Numerics.BigInteger}
  parent: System
  isExternal: false
  name: IComparable<BigInteger>
  nameWithType: IComparable<BigInteger>
  fullName: System.IComparable<System.Numerics.BigInteger>
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Numerics.BigInteger
    name: BigInteger
    nameWithType: BigInteger
    fullName: System.Numerics.BigInteger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IEquatable`1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
- uid: System.IEquatable{System.Numerics.BigInteger}
  parent: System
  isExternal: false
  name: IEquatable<BigInteger>
  nameWithType: IEquatable<BigInteger>
  fullName: System.IEquatable<System.Numerics.BigInteger>
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Numerics.BigInteger
    name: BigInteger
    nameWithType: BigInteger
    fullName: System.Numerics.BigInteger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IFormattable
  parent: System
  isExternal: false
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
