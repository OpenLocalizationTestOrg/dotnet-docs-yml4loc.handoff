{"nodes":[{"content":"**Note: This API is now obsolete.** The non-obsolete alternative is <xref href=\"System.Windows.Media.Effects.Effect\"></xref>.  \n  \n Defines a bitmap effect. Derived classes define effects that can be applied to a <xref href=\"System.Windows.Media.Visual\"></xref> object, such as a <xref href=\"System.Windows.Controls.Button\"></xref> or an <xref href=\"System.Windows.Controls.Image\"></xref>.","nodes":[{"pos":[0,125],"content":"**Note: This API is now obsolete.** The non-obsolete alternative is <xref href=\"System.Windows.Media.Effects.Effect\"></xref>.","nodes":[{"content":"<bpt id=\"p1\">**</bpt>Note: This API is now obsolete.<ept id=\"p1\">**</ept>","pos":[0,35],"source":"**Note: This API is now obsolete.**"},{"content":"The non-obsolete alternative is <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Effects.Effect\"&gt;&lt;/xref&gt;</ph>.","pos":[36,125],"source":" The non-obsolete alternative is <xref href=\"System.Windows.Media.Effects.Effect\"></xref>."}]},{"pos":[132,389],"content":"Defines a bitmap effect. Derived classes define effects that can be applied to a <xref href=\"System.Windows.Media.Visual\"></xref> object, such as a <xref href=\"System.Windows.Controls.Button\"></xref> or an <xref href=\"System.Windows.Controls.Image\"></xref>.","nodes":[{"content":"Defines a bitmap effect.","pos":[0,24]},{"content":"Derived classes define effects that can be applied to a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Visual\"&gt;&lt;/xref&gt;</ph> object, such as a <ph id=\"ph2\">&lt;xref href=\"System.Windows.Controls.Button\"&gt;&lt;/xref&gt;</ph> or an <ph id=\"ph3\">&lt;xref href=\"System.Windows.Controls.Image\"&gt;&lt;/xref&gt;</ph>.","pos":[25,257],"source":" Derived classes define effects that can be applied to a <xref href=\"System.Windows.Media.Visual\"></xref> object, such as a <xref href=\"System.Windows.Controls.Button\"></xref> or an <xref href=\"System.Windows.Controls.Image\"></xref>."}]}],"pos":[1207,1609],"yaml":true},{"content":"> [!NOTE]\n>  [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] bitmap effects are software rendered. Any object that applies an effect will also be rendered in software. Bitmap effects should not be applied to large visuals or animations, because this can degrade performance.  \n  \n> [!CAUTION]\n>  Bitmap effects do not support partial trust execution. An application must have full trust permissions to use bitmap effects.  \n  \n Scale transforms are applied to a visual before an effect is applied. In the event of a non-uniform scale transform, the effect will use the larger of the scale values.  \n  \n Updates to the visual tree of a <xref:System.Windows.Media.VisualBrush> will not propagate if a <xref:System.Windows.Media.Effects.BitmapEffect> is in the brush's parent chain. You can work around this limitation by forcing an update of the scene on the parent object of the effect. You can call <xref:System.Windows.UIElement.InvalidateVisual%2A> or include an animation to force a scene update.  \n  \n Custom effects inherit this class to create a managed interface to the unmanaged effect. For more information, see the [Unmanaged BitmapEffect](https://msdn.microsoft.com/library/ms735092.aspx) API.","nodes":[{"pos":[2,286],"content":"[!NOTE]\n [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] bitmap effects are software rendered. Any object that applies an effect will also be rendered in software. Bitmap effects should not be applied to large visuals or animations, because this can degrade performance.","leadings":["","> "],"nodes":[{"content":" [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] bitmap effects are software rendered. Any object that applies an effect will also be rendered in software. Bitmap effects should not be applied to large visuals or animations, because this can degrade performance.","pos":[8,282],"nodes":[{"content":"<ph id=\"ph1\"> [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)]</ph> bitmap effects are software rendered.","pos":[0,98],"source":" [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] bitmap effects are software rendered."},{"content":"Any object that applies an effect will also be rendered in software.","pos":[99,167]},{"content":"Bitmap effects should not be applied to large visuals or animations, because this can degrade performance.","pos":[168,274]}]}]},{"pos":[294,433],"content":"[!CAUTION]\n Bitmap effects do not support partial trust execution. An application must have full trust permissions to use bitmap effects.","leadings":["","> "],"nodes":[{"content":" Bitmap effects do not support partial trust execution. An application must have full trust permissions to use bitmap effects.","pos":[11,137],"nodes":[{"content":"Bitmap effects do not support partial trust execution.","pos":[1,55]},{"content":"An application must have full trust permissions to use bitmap effects.","pos":[56,126]}]}]},{"pos":[440,608],"content":"Scale transforms are applied to a visual before an effect is applied. In the event of a non-uniform scale transform, the effect will use the larger of the scale values.","nodes":[{"content":"Scale transforms are applied to a visual before an effect is applied. In the event of a non-uniform scale transform, the effect will use the larger of the scale values.","pos":[0,168],"nodes":[{"content":"Scale transforms are applied to a visual before an effect is applied.","pos":[0,69]},{"content":"In the event of a non-uniform scale transform, the effect will use the larger of the scale values.","pos":[70,168]}]}]},{"pos":[615,1011],"content":"Updates to the visual tree of a <xref:System.Windows.Media.VisualBrush> will not propagate if a <xref:System.Windows.Media.Effects.BitmapEffect> is in the brush's parent chain. You can work around this limitation by forcing an update of the scene on the parent object of the effect. You can call <xref:System.Windows.UIElement.InvalidateVisual%2A> or include an animation to force a scene update.","nodes":[{"content":"Updates to the visual tree of a <xref:System.Windows.Media.VisualBrush> will not propagate if a <xref:System.Windows.Media.Effects.BitmapEffect> is in the brush's parent chain. You can work around this limitation by forcing an update of the scene on the parent object of the effect. You can call <xref:System.Windows.UIElement.InvalidateVisual%2A> or include an animation to force a scene update.","pos":[0,396],"nodes":[{"content":"Updates to the visual tree of a <ph id=\"ph1\">&lt;xref:System.Windows.Media.VisualBrush&gt;</ph> will not propagate if a <ph id=\"ph2\">&lt;xref:System.Windows.Media.Effects.BitmapEffect&gt;</ph> is in the brush's parent chain.","pos":[0,176],"source":"Updates to the visual tree of a <xref:System.Windows.Media.VisualBrush> will not propagate if a <xref:System.Windows.Media.Effects.BitmapEffect> is in the brush's parent chain."},{"content":"You can work around this limitation by forcing an update of the scene on the parent object of the effect.","pos":[177,282]},{"content":"You can call <ph id=\"ph1\">&lt;xref:System.Windows.UIElement.InvalidateVisual%2A&gt;</ph> or include an animation to force a scene update.","pos":[283,396],"source":" You can call <xref:System.Windows.UIElement.InvalidateVisual%2A> or include an animation to force a scene update."}]}]},{"pos":[1018,1216],"content":"Custom effects inherit this class to create a managed interface to the unmanaged effect. For more information, see the [Unmanaged BitmapEffect](https://msdn.microsoft.com/library/ms735092.aspx) API.","nodes":[{"content":"Custom effects inherit this class to create a managed interface to the unmanaged effect.","pos":[0,88]},{"content":"For more information, see the <bpt id=\"p1\">[</bpt>Unmanaged BitmapEffect<ept id=\"p1\">](https://msdn.microsoft.com/library/ms735092.aspx)</ept> API.","pos":[89,198],"source":" For more information, see the [Unmanaged BitmapEffect](https://msdn.microsoft.com/library/ms735092.aspx) API."}]}],"pos":[1620,2849],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.Media.Effects.BitmapEffect\"></xref> class.","nodes":[{"pos":[0,103],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Effects.BitmapEffect\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Windows.Media.Effects.BitmapEffect\"></xref> class."}],"pos":[8273,8377],"yaml":true},{"content":"Creates a modifiable clone of this <xref href=\"System.Windows.Media.Effects.BitmapEffect\"></xref>, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.","nodes":[{"pos":[0,314],"content":"Creates a modifiable clone of this <xref href=\"System.Windows.Media.Effects.BitmapEffect\"></xref>, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.","nodes":[{"content":"Creates a modifiable clone of this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Effects.BitmapEffect\"&gt;&lt;/xref&gt;</ph>, making deep copies of this object's values.","pos":[0,142],"source":"Creates a modifiable clone of this <xref href=\"System.Windows.Media.Effects.BitmapEffect\"></xref>, making deep copies of this object's values."},{"content":"When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.","pos":[143,314]}]}],"pos":[9468,9783],"yaml":true},{"content":"This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version.  \n  \n For more information, see <xref:System.Windows.Freezable.Clone%2A?displayProperty=fullName>.","nodes":[{"pos":[0,207],"content":"This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version.","nodes":[{"content":"This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version.","pos":[0,207],"nodes":[{"content":"This method is used to produce modifiable copies of frozen <ph id=\"ph1\">&lt;xref:System.Windows.Freezable&gt;</ph> objects (or any <ph id=\"ph2\">&lt;xref:System.Windows.Freezable&gt;</ph> object).","pos":[0,147],"source":"This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object)."},{"content":"For convenience, this method shadows the inherited version.","pos":[148,207]}]}]},{"pos":[214,306],"content":"For more information, see <xref:System.Windows.Freezable.Clone%2A?displayProperty=fullName>.","nodes":[{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Windows.Freezable.Clone%2A?displayProperty=fullName&gt;</ph>.","pos":[0,92],"source":"For more information, see <xref:System.Windows.Freezable.Clone%2A?displayProperty=fullName>."}]}],"pos":[9794,10105],"yaml":true,"extradata":"MT"},{"content":"A modifiable clone of the current object. The cloned object's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property will be `false` even if the source's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property was `true.`","nodes":[{"pos":[0,238],"content":"A modifiable clone of the current object. The cloned object's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property will be `false` even if the source's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property was `true.`","nodes":[{"content":"A modifiable clone of the current object.","pos":[0,41]},{"content":"The cloned object's <ph id=\"ph1\">&lt;xref href=\"System.Windows.Freezable.IsFrozen\"&gt;&lt;/xref&gt;</ph> property will be <ph id=\"ph2\">`false`</ph> even if the source's <ph id=\"ph3\">&lt;xref href=\"System.Windows.Freezable.IsFrozen\"&gt;&lt;/xref&gt;</ph> property was <ph id=\"ph4\">`true.`</ph>","pos":[42,238],"source":" The cloned object's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property will be `false` even if the source's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property was `true.`"}]}],"pos":[10291,10530],"yaml":true},{"content":"Creates a modifiable clone of this <xref href=\"System.Windows.Media.Effects.BitmapEffect\"></xref> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.","nodes":[{"pos":[0,254],"content":"Creates a modifiable clone of this <xref href=\"System.Windows.Media.Effects.BitmapEffect\"></xref> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.","nodes":[{"content":"Creates a modifiable clone of this <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Effects.BitmapEffect\"&gt;&lt;/xref&gt;</ph> object, making deep copies of this object's current values.","pos":[0,157],"source":"Creates a modifiable clone of this <xref href=\"System.Windows.Media.Effects.BitmapEffect\"></xref> object, making deep copies of this object's current values."},{"content":"Resource references, data bindings, and animations are not copied, but their current values are.","pos":[158,254]}]}],"pos":[11607,11862],"yaml":true},{"content":"This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version.  \n  \n For more information, see <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName>.","nodes":[{"pos":[0,207],"content":"This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version.","nodes":[{"content":"This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version.","pos":[0,207],"nodes":[{"content":"This method is used to produce modifiable copies of frozen <ph id=\"ph1\">&lt;xref:System.Windows.Freezable&gt;</ph> objects (or any <ph id=\"ph2\">&lt;xref:System.Windows.Freezable&gt;</ph> object).","pos":[0,147],"source":"This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object)."},{"content":"For convenience, this method shadows the inherited version.","pos":[148,207]}]}]},{"pos":[214,318],"content":"For more information, see <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName>.","nodes":[{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName&gt;</ph>.","pos":[0,104],"source":"For more information, see <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName>."}]}],"pos":[11873,12196],"yaml":true,"extradata":"MT"},{"content":"A modifiable clone of the current object. The cloned object's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property will be `false` even if the source's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property was `true`.","nodes":[{"pos":[0,238],"content":"A modifiable clone of the current object. The cloned object's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property will be `false` even if the source's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property was `true`.","nodes":[{"content":"A modifiable clone of the current object.","pos":[0,41]},{"content":"The cloned object's <ph id=\"ph1\">&lt;xref href=\"System.Windows.Freezable.IsFrozen\"&gt;&lt;/xref&gt;</ph> property will be <ph id=\"ph2\">`false`</ph> even if the source's <ph id=\"ph3\">&lt;xref href=\"System.Windows.Freezable.IsFrozen\"&gt;&lt;/xref&gt;</ph> property was <ph id=\"ph4\">`true`</ph>.","pos":[42,238],"source":" The cloned object's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property will be `false` even if the source's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property was `true`."}]}],"pos":[12394,12633],"yaml":true},{"content":"Creates a handle to an [IMILBitmapEffect](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16) object that is used to initialize a custom effect.","nodes":[{"pos":[0,162],"content":"Creates a handle to an <bpt id=\"p1\">[</bpt>IMILBitmapEffect<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16)</ept> object that is used to initialize a custom effect.","source":"Creates a handle to an [IMILBitmapEffect](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16) object that is used to initialize a custom effect."}],"pos":[13758,13921],"yaml":true},{"content":"Framework interaction with custom effects is handled through an [IMILBitmapEffect](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16) object. The outer effect is initialized with the custom effect through the <xref:System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect%2A> method.","nodes":[{"pos":[0,310],"content":"Framework interaction with custom effects is handled through an [IMILBitmapEffect](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16) object. The outer effect is initialized with the custom effect through the <xref:System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect%2A> method.","nodes":[{"content":"Framework interaction with custom effects is handled through an <bpt id=\"p1\">[</bpt>IMILBitmapEffect<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16)</ept> object.","pos":[0,160],"source":"Framework interaction with custom effects is handled through an [IMILBitmapEffect](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16) object."},{"content":"The outer effect is initialized with the custom effect through the <ph id=\"ph1\">&lt;xref:System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect%2A&gt;</ph> method.","pos":[161,310],"source":" The outer effect is initialized with the custom effect through the <xref:System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect%2A> method."}]}],"pos":[13932,14243],"yaml":true,"extradata":"MT"},{"content":"A handle to an [IMILBitmapEffect](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16) object.","nodes":[{"pos":[0,111],"content":"A handle to an <bpt id=\"p1\">[</bpt>IMILBitmapEffect<ept id=\"p1\">](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16)</ept> object.","source":"A handle to an [IMILBitmapEffect](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16) object."}],"pos":[15361,15473],"yaml":true},{"content":"When overridden in a derived class, creates a clone of the unmanaged effect.","nodes":[{"pos":[0,76],"content":"When overridden in a derived class, creates a clone of the unmanaged effect.","nodes":[{"content":"When overridden in a derived class, creates a clone of the unmanaged effect.","pos":[0,76]}]}],"pos":[16748,16825],"yaml":true},{"content":"A handle to the unmanaged effect clone.","nodes":[{"pos":[0,39],"content":"A handle to the unmanaged effect clone.","nodes":[{"content":"A handle to the unmanaged effect clone.","pos":[0,39]}]}],"pos":[17791,17831],"yaml":true},{"content":"Returns the <xref href=\"System.Windows.Media.Imaging.BitmapSource\"></xref> that results when the effect is applied to the specified <xref href=\"System.Windows.Media.Effects.BitmapEffectInput\"></xref>.","nodes":[{"pos":[0,200],"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Imaging.BitmapSource\"&gt;&lt;/xref&gt;</ph> that results when the effect is applied to the specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.Media.Effects.BitmapEffectInput\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the <xref href=\"System.Windows.Media.Imaging.BitmapSource\"></xref> that results when the effect is applied to the specified <xref href=\"System.Windows.Media.Effects.BitmapEffectInput\"></xref>."}],"pos":[19150,19351],"yaml":true},{"content":"The input to apply the effect to.","nodes":[{"pos":[0,33],"content":"The input to apply the effect to.","nodes":[{"content":"The input to apply the effect to.","pos":[0,33]}]}],"pos":[19740,19774],"yaml":true},{"content":"The <xref href=\"System.Windows.Media.Imaging.BitmapSource\"></xref> with the effect applied to the input.","nodes":[{"pos":[0,104],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Imaging.BitmapSource\"&gt;&lt;/xref&gt;</ph> with the effect applied to the input.","source":"The <xref href=\"System.Windows.Media.Imaging.BitmapSource\"></xref> with the effect applied to the input."}],"pos":[19859,19964],"yaml":true},{"content":"Initializes an [IMILBitmapEffect](https://msdn.microsoft.com/library/ms735317.aspx) handle obtained from <xref href=\"System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter\"></xref> with the given [IMILBitmapEffectPrimitive](https://msdn.microsoft.com/library/ms735258.aspx).","nodes":[{"pos":[0,285],"content":"Initializes an <bpt id=\"p1\">[</bpt>IMILBitmapEffect<ept id=\"p1\">](https://msdn.microsoft.com/library/ms735317.aspx)</ept> handle obtained from <ph id=\"ph1\">&lt;xref href=\"System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter\"&gt;&lt;/xref&gt;</ph> with the given <bpt id=\"p2\">[</bpt>IMILBitmapEffectPrimitive<ept id=\"p2\">](https://msdn.microsoft.com/library/ms735258.aspx)</ept>.","source":"Initializes an [IMILBitmapEffect](https://msdn.microsoft.com/library/ms735317.aspx) handle obtained from <xref href=\"System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter\"></xref> with the given [IMILBitmapEffectPrimitive](https://msdn.microsoft.com/library/ms735258.aspx)."}],"pos":[21445,21731],"yaml":true},{"content":"The outer IMILBitmapEffect wrapper to initialize.","nodes":[{"pos":[0,49],"content":"The outer IMILBitmapEffect wrapper to initialize.","nodes":[{"content":"The outer IMILBitmapEffect wrapper to initialize.","pos":[0,49]}]}],"pos":[22959,23009],"yaml":true},{"content":"The inner IMILBitmapEffectPrimitive.","nodes":[{"pos":[0,36],"content":"The inner IMILBitmapEffectPrimitive.","nodes":[{"content":"The inner IMILBitmapEffectPrimitive.","pos":[0,36]}]}],"pos":[23104,23141],"yaml":true},{"content":"Sets the specified property to the given value.","nodes":[{"pos":[0,47],"content":"Sets the specified property to the given value.","nodes":[{"content":"Sets the specified property to the given value.","pos":[0,47]}]}],"pos":[24606,24654],"yaml":true},{"content":"This method is intended as a helper method for <xref:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState%2A>. When you override <xref:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState%2A>, use <xref:System.Windows.Media.Effects.BitmapEffect.SetValue%2A> to update unmanaged property values.","nodes":[{"pos":[0,330],"content":"This method is intended as a helper method for <xref:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState%2A>. When you override <xref:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState%2A>, use <xref:System.Windows.Media.Effects.BitmapEffect.SetValue%2A> to update unmanaged property values.","nodes":[{"content":"This method is intended as a helper method for <xref:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState%2A>. When you override <xref:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState%2A>, use <xref:System.Windows.Media.Effects.BitmapEffect.SetValue%2A> to update unmanaged property values.","pos":[0,330],"nodes":[{"content":"This method is intended as a helper method for <ph id=\"ph1\">&lt;xref:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState%2A&gt;</ph>.","pos":[0,128],"source":"This method is intended as a helper method for <xref:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState%2A>."},{"content":"When you override <ph id=\"ph1\">&lt;xref:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState%2A&gt;</ph>, use <ph id=\"ph2\">&lt;xref:System.Windows.Media.Effects.BitmapEffect.SetValue%2A&gt;</ph> to update unmanaged property values.","pos":[129,330],"source":" When you override <xref:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState%2A>, use <xref:System.Windows.Media.Effects.BitmapEffect.SetValue%2A> to update unmanaged property values."}]}]}],"pos":[24665,24996],"yaml":true,"extradata":"MT"},{"content":"The handle to the effect that contains the property to change.","nodes":[{"pos":[0,62],"content":"The handle to the effect that contains the property to change.","nodes":[{"content":"The handle to the effect that contains the property to change.","pos":[0,62]}]}],"pos":[25471,25534],"yaml":true},{"content":"The name of the property to change.","nodes":[{"pos":[0,35],"content":"The name of the property to change.","nodes":[{"content":"The name of the property to change.","pos":[0,35]}]}],"pos":[25602,25638],"yaml":true},{"content":"The value to use to set the property.","nodes":[{"pos":[0,37],"content":"The value to use to set the property.","nodes":[{"content":"The value to use to set the property.","pos":[0,37]}]}],"pos":[25699,25737],"yaml":true},{"content":"When overridden in a derived class, updates the property states of the unmanaged properties of the effect.","nodes":[{"pos":[0,106],"content":"When overridden in a derived class, updates the property states of the unmanaged properties of the effect.","nodes":[{"content":"When overridden in a derived class, updates the property states of the unmanaged properties of the effect.","pos":[0,106]}]}],"pos":[27198,27305],"yaml":true},{"content":"When setting unmanaged properties within an override of this method, use the helper method <xref:System.Windows.Media.Effects.BitmapEffect.SetValue%2A>.","nodes":[{"pos":[0,152],"content":"When setting unmanaged properties within an override of this method, use the helper method <xref:System.Windows.Media.Effects.BitmapEffect.SetValue%2A>.","nodes":[{"content":"When setting unmanaged properties within an override of this method, use the helper method <ph id=\"ph1\">&lt;xref:System.Windows.Media.Effects.BitmapEffect.SetValue%2A&gt;</ph>.","pos":[0,152],"source":"When setting unmanaged properties within an override of this method, use the helper method <xref:System.Windows.Media.Effects.BitmapEffect.SetValue%2A>."}]}],"pos":[27316,27469],"yaml":true,"extradata":"MT"},{"content":"The handle to the effect that contains the properties to update.","nodes":[{"pos":[0,64],"content":"The handle to the effect that contains the properties to update.","nodes":[{"content":"The handle to the effect that contains the properties to update.","pos":[0,64]}]}],"pos":[27904,27969],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Media.Effects.BitmapEffect\n  commentId: T:System.Windows.Media.Effects.BitmapEffect\n  id: BitmapEffect\n  children:\n  - System.Windows.Media.Effects.BitmapEffect.#ctor\n  - System.Windows.Media.Effects.BitmapEffect.Clone\n  - System.Windows.Media.Effects.BitmapEffect.CloneCurrentValue\n  - System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter\n  - System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect\n  - System.Windows.Media.Effects.BitmapEffect.GetOutput(System.Windows.Media.Effects.BitmapEffectInput)\n  - System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect(System.Runtime.InteropServices.SafeHandle,System.Runtime.InteropServices.SafeHandle)\n  - System.Windows.Media.Effects.BitmapEffect.SetValue(System.Runtime.InteropServices.SafeHandle,System.String,System.Object)\n  - System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle)\n  langs:\n  - csharp\n  name: BitmapEffect\n  nameWithType: BitmapEffect\n  fullName: System.Windows.Media.Effects.BitmapEffect\n  type: Class\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: \"**Note: This API is now obsolete.** The non-obsolete alternative is <xref href=\\\"System.Windows.Media.Effects.Effect\\\"></xref>.  \\n  \\n Defines a bitmap effect. Derived classes define effects that can be applied to a <xref href=\\\"System.Windows.Media.Visual\\\"></xref> object, such as a <xref href=\\\"System.Windows.Controls.Button\\\"></xref> or an <xref href=\\\"System.Windows.Controls.Image\\\"></xref>.\"\n  remarks: \"> [!NOTE]\\n>  [!INCLUDE[TLA2#tla_wpf](~/includes/tla2sharptla-wpf-md.md)] bitmap effects are software rendered. Any object that applies an effect will also be rendered in software. Bitmap effects should not be applied to large visuals or animations, because this can degrade performance.  \\n  \\n> [!CAUTION]\\n>  Bitmap effects do not support partial trust execution. An application must have full trust permissions to use bitmap effects.  \\n  \\n Scale transforms are applied to a visual before an effect is applied. In the event of a non-uniform scale transform, the effect will use the larger of the scale values.  \\n  \\n Updates to the visual tree of a <xref:System.Windows.Media.VisualBrush> will not propagate if a <xref:System.Windows.Media.Effects.BitmapEffect> is in the brush's parent chain. You can work around this limitation by forcing an update of the scene on the parent object of the effect. You can call <xref:System.Windows.UIElement.InvalidateVisual%2A> or include an animation to force a scene update.  \\n  \\n Custom effects inherit this class to create a managed interface to the unmanaged effect. For more information, see the [Unmanaged BitmapEffect](https://msdn.microsoft.com/library/ms735092.aspx) API.\"\n  syntax:\n    content: 'public abstract class BitmapEffect : System.Windows.Media.Animation.Animatable'\n  inheritance:\n  - System.Object\n  - System.Windows.Threading.DispatcherObject\n  - System.Windows.DependencyObject\n  - System.Windows.Freezable\n  - System.Windows.Media.Animation.Animatable\n  derivedClasses:\n  - System.Windows.Media.Effects.BevelBitmapEffect\n  - System.Windows.Media.Effects.BitmapEffectGroup\n  - System.Windows.Media.Effects.BlurBitmapEffect\n  - System.Windows.Media.Effects.DropShadowBitmapEffect\n  - System.Windows.Media.Effects.EmbossBitmapEffect\n  - System.Windows.Media.Effects.OuterGlowBitmapEffect\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.DependencyObjectType\n  - System.Windows.DependencyObject.Equals(System.Object)\n  - System.Windows.DependencyObject.GetHashCode\n  - System.Windows.DependencyObject.GetLocalValueEnumerator\n  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.IsSealed\n  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  - System.Windows.Freezable.CanFreeze\n  - System.Windows.Freezable.Changed\n  - System.Windows.Freezable.CloneCore(System.Windows.Freezable)\n  - System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)\n  - System.Windows.Freezable.CreateInstance\n  - System.Windows.Freezable.CreateInstanceCore\n  - System.Windows.Freezable.Freeze\n  - System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)\n  - System.Windows.Freezable.GetAsFrozen\n  - System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Freezable.GetCurrentValueAsFrozen\n  - System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  - System.Windows.Freezable.IsFrozen\n  - System.Windows.Freezable.OnChanged\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  - System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)\n  - System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  - System.Windows.Freezable.ReadPreamble\n  - System.Windows.Freezable.WritePostscript\n  - System.Windows.Freezable.WritePreamble\n  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  - System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  - System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  - System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)\n  - System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  - System.Windows.Media.Animation.Animatable.HasAnimatedProperties\n  - System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)\n  - System.Windows.Threading.DispatcherObject.CheckAccess\n  - System.Windows.Threading.DispatcherObject.Dispatcher\n  - System.Windows.Threading.DispatcherObject.VerifyAccess\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Media.Effects.BitmapEffect.#ctor\n  commentId: M:System.Windows.Media.Effects.BitmapEffect.#ctor\n  id: '#ctor'\n  parent: System.Windows.Media.Effects.BitmapEffect\n  langs:\n  - csharp\n  name: BitmapEffect()\n  nameWithType: BitmapEffect.BitmapEffect()\n  fullName: BitmapEffect.BitmapEffect()\n  type: Constructor\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Initializes a new instance of the <xref href=\"System.Windows.Media.Effects.BitmapEffect\"></xref> class.\n  syntax:\n    content: protected BitmapEffect ();\n    parameters: []\n  overload: System.Windows.Media.Effects.BitmapEffect.#ctor*\n  exceptions: []\n  attributes: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Media.Effects.BitmapEffect.Clone\n  commentId: M:System.Windows.Media.Effects.BitmapEffect.Clone\n  id: Clone\n  parent: System.Windows.Media.Effects.BitmapEffect\n  langs:\n  - csharp\n  name: Clone()\n  nameWithType: BitmapEffect.Clone()\n  fullName: BitmapEffect.Clone()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Creates a modifiable clone of this <xref href=\"System.Windows.Media.Effects.BitmapEffect\"></xref>, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.\n  remarks: \"This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version.  \\n  \\n For more information, see <xref:System.Windows.Freezable.Clone%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public System.Windows.Media.Effects.BitmapEffect Clone ();\n    parameters: []\n    return:\n      type: System.Windows.Media.Effects.BitmapEffect\n      description: A modifiable clone of the current object. The cloned object's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property will be `false` even if the source's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property was `true.`\n  overload: System.Windows.Media.Effects.BitmapEffect.Clone*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Media.Effects.BitmapEffect.CloneCurrentValue\n  commentId: M:System.Windows.Media.Effects.BitmapEffect.CloneCurrentValue\n  id: CloneCurrentValue\n  parent: System.Windows.Media.Effects.BitmapEffect\n  langs:\n  - csharp\n  name: CloneCurrentValue()\n  nameWithType: BitmapEffect.CloneCurrentValue()\n  fullName: BitmapEffect.CloneCurrentValue()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Creates a modifiable clone of this <xref href=\"System.Windows.Media.Effects.BitmapEffect\"></xref> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.\n  remarks: \"This method is used to produce modifiable copies of frozen <xref:System.Windows.Freezable> objects (or any <xref:System.Windows.Freezable> object). For convenience, this method shadows the inherited version.  \\n  \\n For more information, see <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=fullName>.\"\n  syntax:\n    content: public System.Windows.Media.Effects.BitmapEffect CloneCurrentValue ();\n    parameters: []\n    return:\n      type: System.Windows.Media.Effects.BitmapEffect\n      description: A modifiable clone of the current object. The cloned object's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property will be `false` even if the source's <xref href=\"System.Windows.Freezable.IsFrozen\"></xref> property was `true`.\n  overload: System.Windows.Media.Effects.BitmapEffect.CloneCurrentValue*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter\n  commentId: M:System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter\n  id: CreateBitmapEffectOuter\n  parent: System.Windows.Media.Effects.BitmapEffect\n  langs:\n  - csharp\n  name: CreateBitmapEffectOuter()\n  nameWithType: BitmapEffect.CreateBitmapEffectOuter()\n  fullName: BitmapEffect.CreateBitmapEffectOuter()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Creates a handle to an [IMILBitmapEffect](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16) object that is used to initialize a custom effect.\n  remarks: Framework interaction with custom effects is handled through an [IMILBitmapEffect](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16) object. The outer effect is initialized with the custom effect through the <xref:System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect%2A> method.\n  example:\n  - \"The following example shows an implementation of <xref:System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect%2A> that uses the <xref:System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter%2A> method to retrieve a wrapper effect object.  \\n  \\n [!code-csharp[RGBFilterEffectAssembly_snip#CreateUnmanagedEffect](~/samples/snippets/csharp/VS_Snippets_Wpf/RGBFilterEffectAssembly_snip/CSharp/RGBFilterBitmapEffect.cs#createunmanagedeffect)]\\n [!code-vb[RGBFilterEffectAssembly_snip#CreateUnmanagedEffect](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RGBFilterEffectAssembly_snip/visualbasic/rgbfilterbitmapeffect.vb#createunmanagedeffect)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.\")]\n\n      [System.Security.SecurityCritical]\n\n      [System.Security.SecurityTreatAsSafe]\n\n      protected static System.Runtime.InteropServices.SafeHandle CreateBitmapEffectOuter ();\n    parameters: []\n    return:\n      type: System.Runtime.InteropServices.SafeHandle\n      description: A handle to an [IMILBitmapEffect](http://msdn.microsoft.com/en-us/4bd5697d-bdde-4485-a05b-b3fea1403e16) object.\n  overload: System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  - type: System.Security.SecurityTreatAsSafeAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect\n  commentId: M:System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect\n  id: CreateUnmanagedEffect\n  parent: System.Windows.Media.Effects.BitmapEffect\n  langs:\n  - csharp\n  name: CreateUnmanagedEffect()\n  nameWithType: BitmapEffect.CreateUnmanagedEffect()\n  fullName: BitmapEffect.CreateUnmanagedEffect()\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: When overridden in a derived class, creates a clone of the unmanaged effect.\n  remarks: ''\n  example:\n  - \"The following example demonstrates an override of the <xref:System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect%2A> method.  \\n  \\n [!code-csharp[RGBFilterEffectAssembly_snip#CreateUnmanagedEffect](~/samples/snippets/csharp/VS_Snippets_Wpf/RGBFilterEffectAssembly_snip/CSharp/RGBFilterBitmapEffect.cs#createunmanagedeffect)]\\n [!code-vb[RGBFilterEffectAssembly_snip#CreateUnmanagedEffect](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RGBFilterEffectAssembly_snip/visualbasic/rgbfilterbitmapeffect.vb#createunmanagedeffect)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.\")]\n\n      [System.Security.SecurityCritical]\n\n      protected abstract System.Runtime.InteropServices.SafeHandle CreateUnmanagedEffect ();\n    parameters: []\n    return:\n      type: System.Runtime.InteropServices.SafeHandle\n      description: A handle to the unmanaged effect clone.\n  overload: System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Media.Effects.BitmapEffect.GetOutput(System.Windows.Media.Effects.BitmapEffectInput)\n  commentId: M:System.Windows.Media.Effects.BitmapEffect.GetOutput(System.Windows.Media.Effects.BitmapEffectInput)\n  id: GetOutput(System.Windows.Media.Effects.BitmapEffectInput)\n  parent: System.Windows.Media.Effects.BitmapEffect\n  langs:\n  - csharp\n  name: GetOutput(BitmapEffectInput)\n  nameWithType: BitmapEffect.GetOutput(BitmapEffectInput)\n  fullName: BitmapEffect.GetOutput(BitmapEffectInput)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Returns the <xref href=\"System.Windows.Media.Imaging.BitmapSource\"></xref> that results when the effect is applied to the specified <xref href=\"System.Windows.Media.Effects.BitmapEffectInput\"></xref>.\n  syntax:\n    content: >-\n      [System.Obsolete(\"BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.\")]\n\n      public System.Windows.Media.Imaging.BitmapSource GetOutput (System.Windows.Media.Effects.BitmapEffectInput input);\n    parameters:\n    - id: input\n      type: System.Windows.Media.Effects.BitmapEffectInput\n      description: The input to apply the effect to.\n    return:\n      type: System.Windows.Media.Imaging.BitmapSource\n      description: The <xref href=\"System.Windows.Media.Imaging.BitmapSource\"></xref> with the effect applied to the input.\n  overload: System.Windows.Media.Effects.BitmapEffect.GetOutput*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect(System.Runtime.InteropServices.SafeHandle,System.Runtime.InteropServices.SafeHandle)\n  commentId: M:System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect(System.Runtime.InteropServices.SafeHandle,System.Runtime.InteropServices.SafeHandle)\n  id: InitializeBitmapEffect(System.Runtime.InteropServices.SafeHandle,System.Runtime.InteropServices.SafeHandle)\n  parent: System.Windows.Media.Effects.BitmapEffect\n  langs:\n  - csharp\n  name: InitializeBitmapEffect(SafeHandle, SafeHandle)\n  nameWithType: BitmapEffect.InitializeBitmapEffect(SafeHandle, SafeHandle)\n  fullName: BitmapEffect.InitializeBitmapEffect(SafeHandle, SafeHandle)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Initializes an [IMILBitmapEffect](https://msdn.microsoft.com/library/ms735317.aspx) handle obtained from <xref href=\"System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter\"></xref> with the given [IMILBitmapEffectPrimitive](https://msdn.microsoft.com/library/ms735258.aspx).\n  remarks: ''\n  example:\n  - \"The following example shows an implementation of <xref:System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect%2A> that uses the <xref:System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect%2A> method to initialize the wrapper object with the custom effect.  \\n  \\n [!code-csharp[RGBFilterEffectAssembly_snip#CreateUnmanagedEffect](~/samples/snippets/csharp/VS_Snippets_Wpf/RGBFilterEffectAssembly_snip/CSharp/RGBFilterBitmapEffect.cs#createunmanagedeffect)]\\n [!code-vb[RGBFilterEffectAssembly_snip#CreateUnmanagedEffect](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RGBFilterEffectAssembly_snip/visualbasic/rgbfilterbitmapeffect.vb#createunmanagedeffect)]\"\n  syntax:\n    content: >-\n      [System.Obsolete(\"BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.\")]\n\n      [System.Security.SecurityCritical]\n\n      [System.Security.SecurityTreatAsSafe]\n\n      protected static void InitializeBitmapEffect (System.Runtime.InteropServices.SafeHandle outerObject, System.Runtime.InteropServices.SafeHandle innerObject);\n    parameters:\n    - id: outerObject\n      type: System.Runtime.InteropServices.SafeHandle\n      description: The outer IMILBitmapEffect wrapper to initialize.\n    - id: innerObject\n      type: System.Runtime.InteropServices.SafeHandle\n      description: The inner IMILBitmapEffectPrimitive.\n  overload: System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  - type: System.Security.SecurityTreatAsSafeAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Media.Effects.BitmapEffect.SetValue(System.Runtime.InteropServices.SafeHandle,System.String,System.Object)\n  commentId: M:System.Windows.Media.Effects.BitmapEffect.SetValue(System.Runtime.InteropServices.SafeHandle,System.String,System.Object)\n  id: SetValue(System.Runtime.InteropServices.SafeHandle,System.String,System.Object)\n  parent: System.Windows.Media.Effects.BitmapEffect\n  langs:\n  - csharp\n  name: SetValue(SafeHandle, String, Object)\n  nameWithType: BitmapEffect.SetValue(SafeHandle, String, Object)\n  fullName: BitmapEffect.SetValue(SafeHandle, String, Object)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: Sets the specified property to the given value.\n  remarks: This method is intended as a helper method for <xref:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState%2A>. When you override <xref:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState%2A>, use <xref:System.Windows.Media.Effects.BitmapEffect.SetValue%2A> to update unmanaged property values.\n  syntax:\n    content: >-\n      [System.Obsolete(\"BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.\")]\n\n      [System.Security.SecurityCritical]\n\n      [System.Security.SecurityTreatAsSafe]\n\n      protected static void SetValue (System.Runtime.InteropServices.SafeHandle effect, string propertyName, object value);\n    parameters:\n    - id: effect\n      type: System.Runtime.InteropServices.SafeHandle\n      description: The handle to the effect that contains the property to change.\n    - id: propertyName\n      type: System.String\n      description: The name of the property to change.\n    - id: value\n      type: System.Object\n      description: The value to use to set the property.\n  overload: System.Windows.Media.Effects.BitmapEffect.SetValue*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  - type: System.Security.SecurityTreatAsSafeAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle)\n  commentId: M:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle)\n  id: UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle)\n  parent: System.Windows.Media.Effects.BitmapEffect\n  langs:\n  - csharp\n  name: UpdateUnmanagedPropertyState(SafeHandle)\n  nameWithType: BitmapEffect.UpdateUnmanagedPropertyState(SafeHandle)\n  fullName: BitmapEffect.UpdateUnmanagedPropertyState(SafeHandle)\n  type: Method\n  assemblies:\n  - PresentationCore\n  namespace: System.Windows.Media.Effects\n  summary: When overridden in a derived class, updates the property states of the unmanaged properties of the effect.\n  remarks: When setting unmanaged properties within an override of this method, use the helper method <xref:System.Windows.Media.Effects.BitmapEffect.SetValue%2A>.\n  syntax:\n    content: >-\n      [System.Obsolete(\"BitmapEffects are deprecated and no longer function.  Consider using Effects where appropriate instead.\")]\n\n      [System.Security.SecurityCritical]\n\n      protected abstract void UpdateUnmanagedPropertyState (System.Runtime.InteropServices.SafeHandle unmanagedEffect);\n    parameters:\n    - id: unmanagedEffect\n      type: System.Runtime.InteropServices.SafeHandle\n      description: The handle to the effect that contains the properties to update.\n  overload: System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState*\n  exceptions: []\n  attributes:\n  - type: System.ObsoleteAttribute\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\nreferences:\n- uid: System.Windows.Media.Animation.Animatable\n  parent: System.Windows.Media.Animation\n  isExternal: false\n  name: Animatable\n  nameWithType: Animatable\n  fullName: System.Windows.Media.Animation.Animatable\n- uid: System.Windows.Media.Effects.BitmapEffect.#ctor\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: BitmapEffect()\n  nameWithType: BitmapEffect.BitmapEffect()\n  fullName: BitmapEffect.BitmapEffect()\n- uid: System.Windows.Media.Effects.BitmapEffect.Clone\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: Clone()\n  nameWithType: BitmapEffect.Clone()\n  fullName: BitmapEffect.Clone()\n- uid: System.Windows.Media.Effects.BitmapEffect\n  parent: System.Windows.Media.Effects\n  isExternal: false\n  name: BitmapEffect\n  nameWithType: BitmapEffect\n  fullName: System.Windows.Media.Effects.BitmapEffect\n- uid: System.Windows.Media.Effects.BitmapEffect.CloneCurrentValue\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: CloneCurrentValue()\n  nameWithType: BitmapEffect.CloneCurrentValue()\n  fullName: BitmapEffect.CloneCurrentValue()\n- uid: System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: CreateBitmapEffectOuter()\n  nameWithType: BitmapEffect.CreateBitmapEffectOuter()\n  fullName: BitmapEffect.CreateBitmapEffectOuter()\n- uid: System.Runtime.InteropServices.SafeHandle\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: SafeHandle\n  nameWithType: SafeHandle\n  fullName: System.Runtime.InteropServices.SafeHandle\n- uid: System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: CreateUnmanagedEffect()\n  nameWithType: BitmapEffect.CreateUnmanagedEffect()\n  fullName: BitmapEffect.CreateUnmanagedEffect()\n- uid: System.Windows.Media.Effects.BitmapEffect.GetOutput(System.Windows.Media.Effects.BitmapEffectInput)\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: GetOutput(BitmapEffectInput)\n  nameWithType: BitmapEffect.GetOutput(BitmapEffectInput)\n  fullName: BitmapEffect.GetOutput(BitmapEffectInput)\n- uid: System.Windows.Media.Imaging.BitmapSource\n  parent: System.Windows.Media.Imaging\n  isExternal: false\n  name: BitmapSource\n  nameWithType: BitmapSource\n  fullName: System.Windows.Media.Imaging.BitmapSource\n- uid: System.Windows.Media.Effects.BitmapEffectInput\n  parent: System.Windows.Media.Effects\n  isExternal: false\n  name: BitmapEffectInput\n  nameWithType: BitmapEffectInput\n  fullName: System.Windows.Media.Effects.BitmapEffectInput\n- uid: System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect(System.Runtime.InteropServices.SafeHandle,System.Runtime.InteropServices.SafeHandle)\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: InitializeBitmapEffect(SafeHandle, SafeHandle)\n  nameWithType: BitmapEffect.InitializeBitmapEffect(SafeHandle, SafeHandle)\n  fullName: BitmapEffect.InitializeBitmapEffect(SafeHandle, SafeHandle)\n- uid: System.Windows.Media.Effects.BitmapEffect.SetValue(System.Runtime.InteropServices.SafeHandle,System.String,System.Object)\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: SetValue(SafeHandle, String, Object)\n  nameWithType: BitmapEffect.SetValue(SafeHandle, String, Object)\n  fullName: BitmapEffect.SetValue(SafeHandle, String, Object)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle)\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: UpdateUnmanagedPropertyState(SafeHandle)\n  nameWithType: BitmapEffect.UpdateUnmanagedPropertyState(SafeHandle)\n  fullName: BitmapEffect.UpdateUnmanagedPropertyState(SafeHandle)\n- uid: System.Windows.Media.Effects.BitmapEffect.#ctor*\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: BitmapEffect\n  nameWithType: BitmapEffect.BitmapEffect\n  fullName: BitmapEffect.BitmapEffect\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n- uid: System.Windows.Media.Effects.BitmapEffect.Clone*\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: Clone\n  nameWithType: BitmapEffect.Clone\n  fullName: BitmapEffect.Clone\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n- uid: System.Windows.Media.Effects.BitmapEffect.CloneCurrentValue*\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: CloneCurrentValue\n  nameWithType: BitmapEffect.CloneCurrentValue\n  fullName: BitmapEffect.CloneCurrentValue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n- uid: System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter*\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: CreateBitmapEffectOuter\n  nameWithType: BitmapEffect.CreateBitmapEffectOuter\n  fullName: BitmapEffect.CreateBitmapEffectOuter\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n- uid: System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect*\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: CreateUnmanagedEffect\n  nameWithType: BitmapEffect.CreateUnmanagedEffect\n  fullName: BitmapEffect.CreateUnmanagedEffect\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n- uid: System.Windows.Media.Effects.BitmapEffect.GetOutput*\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: GetOutput\n  nameWithType: BitmapEffect.GetOutput\n  fullName: BitmapEffect.GetOutput\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n- uid: System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect*\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: InitializeBitmapEffect\n  nameWithType: BitmapEffect.InitializeBitmapEffect\n  fullName: BitmapEffect.InitializeBitmapEffect\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n- uid: System.Windows.Media.Effects.BitmapEffect.SetValue*\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: SetValue\n  nameWithType: BitmapEffect.SetValue\n  fullName: BitmapEffect.SetValue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n- uid: System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState*\n  parent: System.Windows.Media.Effects.BitmapEffect\n  isExternal: false\n  name: UpdateUnmanagedPropertyState\n  nameWithType: BitmapEffect.UpdateUnmanagedPropertyState\n  fullName: BitmapEffect.UpdateUnmanagedPropertyState\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Media.Effects/BitmapEffect.xml\n- uid: System.Windows.DependencyObject.Equals(System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: DependencyObject.Equals(Object)\n  fullName: DependencyObject.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Windows.DependencyObject.GetHashCode\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: DependencyObject.GetHashCode()\n  fullName: DependencyObject.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Windows.Threading.DispatcherObject.CheckAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: CheckAccess()\n  nameWithType: DispatcherObject.CheckAccess()\n  fullName: DispatcherObject.CheckAccess()\n- uid: System.Windows.Threading.DispatcherObject.Dispatcher\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: Dispatcher\n  nameWithType: DispatcherObject.Dispatcher\n  fullName: DispatcherObject.Dispatcher\n- uid: System.Windows.Threading.DispatcherObject.VerifyAccess\n  parent: System.Windows.Threading.DispatcherObject\n  isExternal: false\n  name: VerifyAccess()\n  nameWithType: DispatcherObject.VerifyAccess()\n  fullName: DispatcherObject.VerifyAccess()\n- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ClearValue(DependencyProperty)\n  nameWithType: DependencyObject.ClearValue(DependencyProperty)\n  fullName: DependencyObject.ClearValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ClearValue(DependencyPropertyKey)\n  nameWithType: DependencyObject.ClearValue(DependencyPropertyKey)\n  fullName: DependencyObject.ClearValue(DependencyPropertyKey)\n- uid: System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: CoerceValue(DependencyProperty)\n  nameWithType: DependencyObject.CoerceValue(DependencyProperty)\n  fullName: DependencyObject.CoerceValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.DependencyObjectType\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: DependencyObjectType\n  nameWithType: DependencyObject.DependencyObjectType\n  fullName: DependencyObject.DependencyObjectType\n- uid: System.Windows.DependencyObject.GetLocalValueEnumerator\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetLocalValueEnumerator()\n  nameWithType: DependencyObject.GetLocalValueEnumerator()\n  fullName: DependencyObject.GetLocalValueEnumerator()\n- uid: System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: GetValue(DependencyProperty)\n  nameWithType: DependencyObject.GetValue(DependencyProperty)\n  fullName: DependencyObject.GetValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: InvalidateProperty(DependencyProperty)\n  nameWithType: DependencyObject.InvalidateProperty(DependencyProperty)\n  fullName: DependencyObject.InvalidateProperty(DependencyProperty)\n- uid: System.Windows.DependencyObject.IsSealed\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: IsSealed\n  nameWithType: DependencyObject.IsSealed\n  fullName: DependencyObject.IsSealed\n- uid: System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  nameWithType: Freezable.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n  fullName: Freezable.OnPropertyChanged(DependencyPropertyChangedEventArgs)\n- uid: System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ReadLocalValue(DependencyProperty)\n  nameWithType: DependencyObject.ReadLocalValue(DependencyProperty)\n  fullName: DependencyObject.ReadLocalValue(DependencyProperty)\n- uid: System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetCurrentValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetCurrentValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetCurrentValue(DependencyProperty, Object)\n- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetValue(DependencyProperty, Object)\n  nameWithType: DependencyObject.SetValue(DependencyProperty, Object)\n  fullName: DependencyObject.SetValue(DependencyProperty, Object)\n- uid: System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: SetValue(DependencyPropertyKey, Object)\n  nameWithType: DependencyObject.SetValue(DependencyPropertyKey, Object)\n  fullName: DependencyObject.SetValue(DependencyPropertyKey, Object)\n- uid: System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)\n  parent: System.Windows.DependencyObject\n  isExternal: false\n  name: ShouldSerializeProperty(DependencyProperty)\n  nameWithType: DependencyObject.ShouldSerializeProperty(DependencyProperty)\n  fullName: DependencyObject.ShouldSerializeProperty(DependencyProperty)\n- uid: System.Windows.Freezable.CanFreeze\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: CanFreeze\n  nameWithType: Freezable.CanFreeze\n  fullName: Freezable.CanFreeze\n- uid: System.Windows.Freezable.Changed\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: Changed\n  nameWithType: Freezable.Changed\n  fullName: Freezable.Changed\n- uid: System.Windows.Freezable.CloneCore(System.Windows.Freezable)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: CloneCore(Freezable)\n  nameWithType: Freezable.CloneCore(Freezable)\n  fullName: Freezable.CloneCore(Freezable)\n- uid: System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: CloneCurrentValueCore(Freezable)\n  nameWithType: Freezable.CloneCurrentValueCore(Freezable)\n  fullName: Freezable.CloneCurrentValueCore(Freezable)\n- uid: System.Windows.Freezable.CreateInstance\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: CreateInstance()\n  nameWithType: Freezable.CreateInstance()\n  fullName: Freezable.CreateInstance()\n- uid: System.Windows.Freezable.CreateInstanceCore\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: CreateInstanceCore()\n  nameWithType: Freezable.CreateInstanceCore()\n  fullName: Freezable.CreateInstanceCore()\n- uid: System.Windows.Freezable.Freeze\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: Freeze()\n  nameWithType: Freezable.Freeze()\n  fullName: Freezable.Freeze()\n- uid: System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: Freeze(Freezable, Boolean)\n  nameWithType: Freezable.Freeze(Freezable, Boolean)\n  fullName: Freezable.Freeze(Freezable, Boolean)\n- uid: System.Windows.Media.Animation.Animatable.FreezeCore(System.Boolean)\n  parent: System.Windows.Media.Animation.Animatable\n  isExternal: false\n  name: FreezeCore(Boolean)\n  nameWithType: Animatable.FreezeCore(Boolean)\n  fullName: Animatable.FreezeCore(Boolean)\n- uid: System.Windows.Freezable.GetAsFrozen\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: GetAsFrozen()\n  nameWithType: Freezable.GetAsFrozen()\n  fullName: Freezable.GetAsFrozen()\n- uid: System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: GetAsFrozenCore(Freezable)\n  nameWithType: Freezable.GetAsFrozenCore(Freezable)\n  fullName: Freezable.GetAsFrozenCore(Freezable)\n- uid: System.Windows.Freezable.GetCurrentValueAsFrozen\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: GetCurrentValueAsFrozen()\n  nameWithType: Freezable.GetCurrentValueAsFrozen()\n  fullName: Freezable.GetCurrentValueAsFrozen()\n- uid: System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: GetCurrentValueAsFrozenCore(Freezable)\n  nameWithType: Freezable.GetCurrentValueAsFrozenCore(Freezable)\n  fullName: Freezable.GetCurrentValueAsFrozenCore(Freezable)\n- uid: System.Windows.Freezable.IsFrozen\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: IsFrozen\n  nameWithType: Freezable.IsFrozen\n  fullName: Freezable.IsFrozen\n- uid: System.Windows.Freezable.OnChanged\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: OnChanged()\n  nameWithType: Freezable.OnChanged()\n  fullName: Freezable.OnChanged()\n- uid: System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: OnFreezablePropertyChanged(DependencyObject, DependencyObject)\n  nameWithType: Freezable.OnFreezablePropertyChanged(DependencyObject, DependencyObject)\n  fullName: Freezable.OnFreezablePropertyChanged(DependencyObject, DependencyObject)\n- uid: System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: OnFreezablePropertyChanged(DependencyObject, DependencyObject, DependencyProperty)\n  nameWithType: Freezable.OnFreezablePropertyChanged(DependencyObject, DependencyObject, DependencyProperty)\n  fullName: Freezable.OnFreezablePropertyChanged(DependencyObject, DependencyObject, DependencyProperty)\n- uid: System.Windows.Freezable.ReadPreamble\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: ReadPreamble()\n  nameWithType: Freezable.ReadPreamble()\n  fullName: Freezable.ReadPreamble()\n- uid: System.Windows.Freezable.WritePostscript\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: WritePostscript()\n  nameWithType: Freezable.WritePostscript()\n  fullName: Freezable.WritePostscript()\n- uid: System.Windows.Freezable.WritePreamble\n  parent: System.Windows.Freezable\n  isExternal: false\n  name: WritePreamble()\n  nameWithType: Freezable.WritePreamble()\n  fullName: Freezable.WritePreamble()\n- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)\n  parent: System.Windows.Media.Animation.Animatable\n  isExternal: false\n  name: ApplyAnimationClock(DependencyProperty, AnimationClock)\n  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty, AnimationClock)\n  fullName: Animatable.ApplyAnimationClock(DependencyProperty, AnimationClock)\n- uid: System.Windows.Media.Animation.Animatable.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)\n  parent: System.Windows.Media.Animation.Animatable\n  isExternal: false\n  name: ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n  nameWithType: Animatable.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n  fullName: Animatable.ApplyAnimationClock(DependencyProperty, AnimationClock, HandoffBehavior)\n- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)\n  parent: System.Windows.Media.Animation.Animatable\n  isExternal: false\n  name: BeginAnimation(DependencyProperty, AnimationTimeline)\n  nameWithType: Animatable.BeginAnimation(DependencyProperty, AnimationTimeline)\n  fullName: Animatable.BeginAnimation(DependencyProperty, AnimationTimeline)\n- uid: System.Windows.Media.Animation.Animatable.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)\n  parent: System.Windows.Media.Animation.Animatable\n  isExternal: false\n  name: BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n  nameWithType: Animatable.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n  fullName: Animatable.BeginAnimation(DependencyProperty, AnimationTimeline, HandoffBehavior)\n- uid: System.Windows.Media.Animation.Animatable.GetAnimationBaseValue(System.Windows.DependencyProperty)\n  parent: System.Windows.Media.Animation.Animatable\n  isExternal: false\n  name: GetAnimationBaseValue(DependencyProperty)\n  nameWithType: Animatable.GetAnimationBaseValue(DependencyProperty)\n  fullName: Animatable.GetAnimationBaseValue(DependencyProperty)\n- uid: System.Windows.Media.Animation.Animatable.HasAnimatedProperties\n  parent: System.Windows.Media.Animation.Animatable\n  isExternal: false\n  name: HasAnimatedProperties\n  nameWithType: Animatable.HasAnimatedProperties\n  fullName: Animatable.HasAnimatedProperties\n- uid: System.Windows.Media.Animation.Animatable.ShouldSerializeStoredWeakReference(System.Windows.DependencyObject)\n  parent: System.Windows.Media.Animation.Animatable\n  isExternal: false\n  name: ShouldSerializeStoredWeakReference(DependencyObject)\n  nameWithType: Animatable.ShouldSerializeStoredWeakReference(DependencyObject)\n  fullName: Animatable.ShouldSerializeStoredWeakReference(DependencyObject)\n"}