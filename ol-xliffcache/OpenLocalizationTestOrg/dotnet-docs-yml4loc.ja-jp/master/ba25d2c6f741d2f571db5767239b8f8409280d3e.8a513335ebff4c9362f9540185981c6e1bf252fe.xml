{"nodes":[{"content":"Represents a position within a <xref href=\"System.Windows.Documents.FlowDocument\"></xref> or <xref href=\"System.Windows.Controls.TextBlock\"></xref>.","nodes":[{"pos":[0,148],"content":"Represents a position within a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.FlowDocument\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Windows.Controls.TextBlock\"&gt;&lt;/xref&gt;</ph>.","source":"Represents a position within a <xref href=\"System.Windows.Documents.FlowDocument\"></xref> or <xref href=\"System.Windows.Controls.TextBlock\"></xref>."}],"pos":[2745,2894],"yaml":true},{"content":"The <xref:System.Windows.Documents.TextPointer> class introduces the following terminology:  \n  \n-   Position - Inherently, a <xref:System.Windows.Documents.TextPointer> always points to a *position* in content.  Such positions either fall between characters in the content, or between flow content element tags that define structure for the content.  \n  \n-   Current Position - Because a <xref:System.Windows.Documents.TextPointer> always indicates a position, and because many of the operations that can be performed through a <xref:System.Windows.Documents.TextPointer> are relative to the position currently pointed to by the <xref:System.Windows.Documents.TextPointer>, it makes sense to simply refer to the position indicated by a <xref:System.Windows.Documents.TextPointer> as the *current position*.  \n  \n-   Insertion Position - An *insertion position* is a position where new content may be added without breaking any semantic rules for the associated content.  In practice, an insertion position is anywhere in content where a caret may be positioned.  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).  \n  \n-   Symbol - For the purposes of <xref:System.Windows.Documents.TextPointer> operations that involve symbols, any of the following is considered to be a *symbol*:  \n  \n    -   An opening or closing tag for a <xref:System.Windows.Documents.TextElement> element.  \n  \n    -   A <xref:System.Windows.UIElement> element contained within an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.  \n  \n    -   Each 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element.  \n  \n-   Text Container - A *text container* is the element that forms the ultimate border for the flow content at hand; the position indicated by a <xref:System.Windows.Documents.TextPointer> always falls within a text container.  Currently, a text container must be either a <xref:System.Windows.Documents.FlowDocument> or a <xref:System.Windows.Controls.TextBlock>.  Generally speaking, operations between <xref:System.Windows.Documents.TextPointer> instances in different text containers are not supported.  \n  \n-   Document - The content in a text container is referred to as a *document*, as in the <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A> method and the <xref:System.Windows.Documents.TextPointer.DocumentStart%2A> and <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> properties.  \n  \n The <xref:System.Windows.Documents.TextPointer> class is intended to facilitate traversal and manipulation of content that is represented by [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] flow content elements; in general, such elements derive from <xref:System.Windows.Documents.TextElement>.  Some of the operations that <xref:System.Windows.Documents.TextPointer> facilitates include the following:  \n  \n-   Perform an ordinal comparison of the current position with a second specified position.  See the <xref:System.Windows.Documents.TextPointer.CompareTo%2A> method.  \n  \n-   Determine the type of content adjacent to the current position in a specified direction.  See the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method and <xref:System.Windows.Documents.TextPointerContext> enumeration.  \n  \n-   Get the <xref:System.Windows.Documents.TextElement> that scopes or is adjacent to the current position.  See <xref:System.Windows.Documents.Paragraph> and the <xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A> method.  \n  \n-   Get the text container that scopes the current document.  See the <xref:System.Windows.Documents.TextPointer.Parent%2A> property.  \n  \n-   Get a specified number of characters preceding or following the current position.  See the <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A> method.  \n  \n-   Insert a string of characters at the current position.  See the <xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A> method.  \n  \n-   Find line boundaries in content.  See the <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A> method and <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> property.  \n  \n-   Translate between <xref:System.Windows.Documents.TextPointer> positions and symbol offsets into content.  See the <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> and <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> methods.  \n  \n-   Perform visual hit testing by translating between a <xref:System.Windows.Documents.TextPointer> position and a <xref:System.Windows.Point> representing relative coordinates.  \n  \n-   Find a nearby insertion position, or check whether the current position is an insertion position.  See the <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> and <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> methods and the <xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A> property.  \n  \n The position and <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> indicated by a <xref:System.Windows.Documents.TextPointer> object are immutable.  When content is edited or modified, the position indicated by a <xref:System.Windows.Documents.TextPointer> does not change relative to the surrounding text; rather the offset of that position from the beginning of content is adjusted correspondingly to reflect the new relative position in content.  For example, a <xref:System.Windows.Documents.TextPointer> that indicates a position at the beginning of a given paragraph continues to point to the beginning of that paragraph even when content is inserted or deleted before or after the paragraph.  \n  \n The <xref:System.Windows.Documents.TextPointer> class does not provide any public constructors.  An instance of <xref:System.Windows.Documents.TextPointer> is created by using properties or methods of other objects (including other <xref:System.Windows.Documents.TextPointer> objects). The following list provides a few examples of methods and properties that create and return a <xref:System.Windows.Documents.TextPointer>.  This list is not exhaustive:  \n  \n-   From a <xref:System.Windows.Documents.TextRange>: <xref:System.Windows.Documents.TextRange.Start%2A> and <xref:System.Windows.Documents.TextRange.End%2A>.  \n  \n-   From a <xref:System.Windows.Documents.TextElement>:  <xref:System.Windows.Documents.TextElement.ContentStart%2A>, <xref:System.Windows.Documents.TextElement.ContentEnd%2A>, <xref:System.Windows.Documents.TextElement.ElementStart%2A>, and <xref:System.Windows.Documents.TextElement.ElementEnd%2A>.  \n  \n-   From a <xref:System.Windows.Controls.TextBlock> (text container): <xref:System.Windows.Controls.TextBlock.ContentStart%2A>, <xref:System.Windows.Controls.TextBlock.ContentEnd%2A>, and <xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A>.  \n  \n-   From a <xref:System.Windows.Documents.FlowDocument> (text container): <xref:System.Windows.Documents.FlowDocument.ContentStart%2A>, and <xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>  \n  \n-   From an existing <xref:System.Windows.Documents.TextPointer>: <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>, <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>, <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>, and <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>.","nodes":[{"pos":[0,91],"content":"The <xref:System.Windows.Documents.TextPointer> class introduces the following terminology:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> class introduces the following terminology:","pos":[0,91],"source":"The <xref:System.Windows.Documents.TextPointer> class introduces the following terminology:"}]},{"pos":[101,350],"content":"Position - Inherently, a <xref:System.Windows.Documents.TextPointer> always points to a *position* in content.  Such positions either fall between characters in the content, or between flow content element tags that define structure for the content.","nodes":[{"content":"Position - Inherently, a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> always points to a <bpt id=\"p1\">*</bpt>position<ept id=\"p1\">*</ept> in content.","pos":[0,110],"source":"Position - Inherently, a <xref:System.Windows.Documents.TextPointer> always points to a *position* in content."},{"content":"Such positions either fall between characters in the content, or between flow content element tags that define structure for the content.","pos":[112,249]}]},{"pos":[360,807],"content":"Current Position - Because a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> always indicates a position, and because many of the operations that can be performed through a <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> are relative to the position currently pointed to by the <ph id=\"ph3\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>, it makes sense to simply refer to the position indicated by a <ph id=\"ph4\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> as the <bpt id=\"p1\">*</bpt>current position<ept id=\"p1\">*</ept>.","source":"Current Position - Because a <xref:System.Windows.Documents.TextPointer> always indicates a position, and because many of the operations that can be performed through a <xref:System.Windows.Documents.TextPointer> are relative to the position currently pointed to by the <xref:System.Windows.Documents.TextPointer>, it makes sense to simply refer to the position indicated by a <xref:System.Windows.Documents.TextPointer> as the *current position*."},{"pos":[817,1361],"content":"Insertion Position - An *insertion position* is a position where new content may be added without breaking any semantic rules for the associated content.  In practice, an insertion position is anywhere in content where a caret may be positioned.  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).","nodes":[{"content":"Insertion Position - An <bpt id=\"p1\">*</bpt>insertion position<ept id=\"p1\">*</ept> is a position where new content may be added without breaking any semantic rules for the associated content.","pos":[0,153],"source":"Insertion Position - An *insertion position* is a position where new content may be added without breaking any semantic rules for the associated content."},{"content":"In practice, an insertion position is anywhere in content where a caret may be positioned.","pos":[155,245]},{"content":"An example of a valid <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> position that is not an insertion position is the position between two adjacent <ph id=\"ph2\">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).","pos":[247,544],"source":"  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph)."}]},{"pos":[1371,1529],"content":"Symbol - For the purposes of <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> operations that involve symbols, any of the following is considered to be a <bpt id=\"p1\">*</bpt>symbol<ept id=\"p1\">*</ept>:","source":"Symbol - For the purposes of <xref:System.Windows.Documents.TextPointer> operations that involve symbols, any of the following is considered to be a *symbol*:"},{"pos":[1543,1627],"content":"An opening or closing tag for a <xref:System.Windows.Documents.TextElement> element.","nodes":[{"content":"An opening or closing tag for a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> element.","pos":[0,84],"source":"An opening or closing tag for a <xref:System.Windows.Documents.TextElement> element."}]},{"pos":[1641,2008],"content":"A <xref:System.Windows.UIElement> element contained within an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.","nodes":[{"content":"A <xref:System.Windows.UIElement> element contained within an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.","pos":[0,367],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> element contained within an <ph id=\"ph2\">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>.","pos":[0,164],"source":"A <xref:System.Windows.UIElement> element contained within an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>."},{"content":"Note that such a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> is always counted as exactly one symbol; any additional content or elements contained by the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> are not counted as symbols.","pos":[166,367],"source":"  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols."}]}]},{"pos":[2022,2171],"content":"Each 16-bit <ph id=\"ph1\">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> character inside of a text <ph id=\"ph2\">&lt;xref:System.Windows.Documents.Run&gt;</ph> element.","source":"Each 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element."},{"pos":[2181,2682],"content":"Text Container - A *text container* is the element that forms the ultimate border for the flow content at hand; the position indicated by a <xref:System.Windows.Documents.TextPointer> always falls within a text container.  Currently, a text container must be either a <xref:System.Windows.Documents.FlowDocument> or a <xref:System.Windows.Controls.TextBlock>.  Generally speaking, operations between <xref:System.Windows.Documents.TextPointer> instances in different text containers are not supported.","nodes":[{"content":"Text Container - A <bpt id=\"p1\">*</bpt>text container<ept id=\"p1\">*</ept> is the element that forms the ultimate border for the flow content at hand; the position indicated by a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> always falls within a text container.","pos":[0,221],"source":"Text Container - A *text container* is the element that forms the ultimate border for the flow content at hand; the position indicated by a <xref:System.Windows.Documents.TextPointer> always falls within a text container."},{"content":"Currently, a text container must be either a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph> or a <ph id=\"ph2\">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph>.","pos":[223,359],"source":"  Currently, a text container must be either a <xref:System.Windows.Documents.FlowDocument> or a <xref:System.Windows.Controls.TextBlock>."},{"content":"Generally speaking, operations between <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> instances in different text containers are not supported.","pos":[361,501],"source":"  Generally speaking, operations between <xref:System.Windows.Documents.TextPointer> instances in different text containers are not supported."}]},{"pos":[2692,2991],"content":"Document - The content in a text container is referred to as a <bpt id=\"p1\">*</bpt>document<ept id=\"p1\">*</ept>, as in the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A&gt;</ph> method and the <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer.DocumentStart%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Documents.TextPointer.DocumentEnd%2A&gt;</ph> properties.","source":"Document - The content in a text container is referred to as a *document*, as in the <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A> method and the <xref:System.Windows.Documents.TextPointer.DocumentStart%2A> and <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> properties."},{"pos":[2998,3422],"content":"The <xref:System.Windows.Documents.TextPointer> class is intended to facilitate traversal and manipulation of content that is represented by [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] flow content elements; in general, such elements derive from <xref:System.Windows.Documents.TextElement>.  Some of the operations that <xref:System.Windows.Documents.TextPointer> facilitates include the following:","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> class is intended to facilitate traversal and manipulation of content that is represented by <ph id=\"ph2\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> flow content elements; in general, such elements derive from <ph id=\"ph3\">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>.","pos":[0,316],"source":"The <xref:System.Windows.Documents.TextPointer> class is intended to facilitate traversal and manipulation of content that is represented by [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] flow content elements; in general, such elements derive from <xref:System.Windows.Documents.TextElement>."},{"content":"Some of the operations that <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> facilitates include the following:","pos":[318,424],"source":"  Some of the operations that <xref:System.Windows.Documents.TextPointer> facilitates include the following:"}]},{"pos":[3432,3593],"content":"Perform an ordinal comparison of the current position with a second specified position.  See the <xref:System.Windows.Documents.TextPointer.CompareTo%2A> method.","nodes":[{"content":"Perform an ordinal comparison of the current position with a second specified position.  See the <xref:System.Windows.Documents.TextPointer.CompareTo%2A> method.","pos":[0,161],"nodes":[{"content":"Perform an ordinal comparison of the current position with a second specified position.","pos":[0,87]},{"content":"See the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.CompareTo%2A&gt;</ph> method.","pos":[89,161],"source":"  See the <xref:System.Windows.Documents.TextPointer.CompareTo%2A> method."}]}]},{"pos":[3603,3840],"content":"Determine the type of content adjacent to the current position in a specified direction.  See the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method and <xref:System.Windows.Documents.TextPointerContext> enumeration.","nodes":[{"content":"Determine the type of content adjacent to the current position in a specified direction.  See the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method and <xref:System.Windows.Documents.TextPointerContext> enumeration.","pos":[0,237],"nodes":[{"content":"Determine the type of content adjacent to the current position in a specified direction.","pos":[0,88]},{"content":"See the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.GetPointerContext%2A&gt;</ph> method and <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointerContext&gt;</ph> enumeration.","pos":[90,237],"source":"  See the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method and <xref:System.Windows.Documents.TextPointerContext> enumeration."}]}]},{"pos":[3850,4082],"content":"Get the <xref:System.Windows.Documents.TextElement> that scopes or is adjacent to the current position.  See <xref:System.Windows.Documents.Paragraph> and the <xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A> method.","nodes":[{"content":"Get the <xref:System.Windows.Documents.TextElement> that scopes or is adjacent to the current position.  See <xref:System.Windows.Documents.Paragraph> and the <xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A> method.","pos":[0,232],"nodes":[{"content":"Get the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> that scopes or is adjacent to the current position.","pos":[0,103],"source":"Get the <xref:System.Windows.Documents.TextElement> that scopes or is adjacent to the current position."},{"content":"See <ph id=\"ph1\">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> and the <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A&gt;</ph> method.","pos":[105,232],"source":"  See <xref:System.Windows.Documents.Paragraph> and the <xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A> method."}]}]},{"pos":[4092,4221],"content":"Get the text container that scopes the current document.  See the <xref:System.Windows.Documents.TextPointer.Parent%2A> property.","nodes":[{"content":"Get the text container that scopes the current document.  See the <xref:System.Windows.Documents.TextPointer.Parent%2A> property.","pos":[0,129],"nodes":[{"content":"Get the text container that scopes the current document.","pos":[0,56]},{"content":"See the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.Parent%2A&gt;</ph> property.","pos":[58,129],"source":"  See the <xref:System.Windows.Documents.TextPointer.Parent%2A> property."}]}]},{"pos":[4231,4389],"content":"Get a specified number of characters preceding or following the current position.  See the <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A> method.","nodes":[{"content":"Get a specified number of characters preceding or following the current position.  See the <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A> method.","pos":[0,158],"nodes":[{"content":"Get a specified number of characters preceding or following the current position.","pos":[0,81]},{"content":"See the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.GetTextInRun%2A&gt;</ph> method.","pos":[83,158],"source":"  See the <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A> method."}]}]},{"pos":[4399,4533],"content":"Insert a string of characters at the current position.  See the <xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A> method.","nodes":[{"content":"Insert a string of characters at the current position.  See the <xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A> method.","pos":[0,134],"nodes":[{"content":"Insert a string of characters at the current position.","pos":[0,54]},{"content":"See the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A&gt;</ph> method.","pos":[56,134],"source":"  See the <xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A> method."}]}]},{"pos":[4543,4742],"content":"Find line boundaries in content.  See the <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A> method and <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> property.","nodes":[{"content":"Find line boundaries in content.  See the <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A> method and <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> property.","pos":[0,199],"nodes":[{"content":"Find line boundaries in content.","pos":[0,32]},{"content":"See the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A&gt;</ph> method and <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A&gt;</ph> property.","pos":[34,199],"source":"  See the <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A> method and <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> property."}]}]},{"pos":[4752,5012],"content":"Translate between <xref:System.Windows.Documents.TextPointer> positions and symbol offsets into content.  See the <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> and <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> methods.","nodes":[{"content":"Translate between <xref:System.Windows.Documents.TextPointer> positions and symbol offsets into content.  See the <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> and <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> methods.","pos":[0,260],"nodes":[{"content":"Translate between <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> positions and symbol offsets into content.","pos":[0,104],"source":"Translate between <xref:System.Windows.Documents.TextPointer> positions and symbol offsets into content."},{"content":"See the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A&gt;</ph> methods.","pos":[106,260],"source":"  See the <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> and <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> methods."}]}]},{"pos":[5022,5195],"content":"Perform visual hit testing by translating between a <xref:System.Windows.Documents.TextPointer> position and a <xref:System.Windows.Point> representing relative coordinates.","nodes":[{"content":"Perform visual hit testing by translating between a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> position and a <ph id=\"ph2\">&lt;xref:System.Windows.Point&gt;</ph> representing relative coordinates.","pos":[0,173],"source":"Perform visual hit testing by translating between a <xref:System.Windows.Documents.TextPointer> position and a <xref:System.Windows.Point> representing relative coordinates."}]},{"pos":[5205,5550],"content":"Find a nearby insertion position, or check whether the current position is an insertion position.  See the <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> and <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> methods and the <xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A> property.","nodes":[{"content":"Find a nearby insertion position, or check whether the current position is an insertion position.  See the <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> and <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> methods and the <xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A> property.","pos":[0,345],"nodes":[{"content":"Find a nearby insertion position, or check whether the current position is an insertion position.","pos":[0,97]},{"content":"See the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A&gt;</ph> methods and the <ph id=\"ph3\">&lt;xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A&gt;</ph> property.","pos":[99,345],"source":"  See the <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> and <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> methods and the <xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A> property."}]}]},{"pos":[5557,6269],"content":"The position and <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> indicated by a <xref:System.Windows.Documents.TextPointer> object are immutable.  When content is edited or modified, the position indicated by a <xref:System.Windows.Documents.TextPointer> does not change relative to the surrounding text; rather the offset of that position from the beginning of content is adjusted correspondingly to reflect the new relative position in content.  For example, a <xref:System.Windows.Documents.TextPointer> that indicates a position at the beginning of a given paragraph continues to point to the beginning of that paragraph even when content is inserted or deleted before or after the paragraph.","nodes":[{"content":"The position and <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> indicated by a <xref:System.Windows.Documents.TextPointer> object are immutable.  When content is edited or modified, the position indicated by a <xref:System.Windows.Documents.TextPointer> does not change relative to the surrounding text; rather the offset of that position from the beginning of content is adjusted correspondingly to reflect the new relative position in content.  For example, a <xref:System.Windows.Documents.TextPointer> that indicates a position at the beginning of a given paragraph continues to point to the beginning of that paragraph even when content is inserted or deleted before or after the paragraph.","pos":[0,712],"nodes":[{"content":"The position and <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.LogicalDirection%2A&gt;</ph> indicated by a <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> object are immutable.","pos":[0,161],"source":"The position and <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> indicated by a <xref:System.Windows.Documents.TextPointer> object are immutable."},{"content":"When content is edited or modified, the position indicated by a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> does not change relative to the surrounding text; rather the offset of that position from the beginning of content is adjusted correspondingly to reflect the new relative position in content.","pos":[163,462],"source":"  When content is edited or modified, the position indicated by a <xref:System.Windows.Documents.TextPointer> does not change relative to the surrounding text; rather the offset of that position from the beginning of content is adjusted correspondingly to reflect the new relative position in content."},{"content":"For example, a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> that indicates a position at the beginning of a given paragraph continues to point to the beginning of that paragraph even when content is inserted or deleted before or after the paragraph.","pos":[464,712],"source":"  For example, a <xref:System.Windows.Documents.TextPointer> that indicates a position at the beginning of a given paragraph continues to point to the beginning of that paragraph even when content is inserted or deleted before or after the paragraph."}]}]},{"pos":[6276,6730],"content":"The <xref:System.Windows.Documents.TextPointer> class does not provide any public constructors.  An instance of <xref:System.Windows.Documents.TextPointer> is created by using properties or methods of other objects (including other <xref:System.Windows.Documents.TextPointer> objects). The following list provides a few examples of methods and properties that create and return a <xref:System.Windows.Documents.TextPointer>.  This list is not exhaustive:","nodes":[{"content":"The <xref:System.Windows.Documents.TextPointer> class does not provide any public constructors.  An instance of <xref:System.Windows.Documents.TextPointer> is created by using properties or methods of other objects (including other <xref:System.Windows.Documents.TextPointer> objects). The following list provides a few examples of methods and properties that create and return a <xref:System.Windows.Documents.TextPointer>.  This list is not exhaustive:","pos":[0,454],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> class does not provide any public constructors.","pos":[0,95],"source":"The <xref:System.Windows.Documents.TextPointer> class does not provide any public constructors."},{"content":"An instance of <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> is created by using properties or methods of other objects (including other <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> objects).","pos":[97,285],"source":"  An instance of <xref:System.Windows.Documents.TextPointer> is created by using properties or methods of other objects (including other <xref:System.Windows.Documents.TextPointer> objects)."},{"content":"The following list provides a few examples of methods and properties that create and return a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>.","pos":[286,424],"source":" The following list provides a few examples of methods and properties that create and return a <xref:System.Windows.Documents.TextPointer>."},{"content":"This list is not exhaustive:","pos":[426,454]}]}]},{"pos":[6740,6894],"content":"From a <xref:System.Windows.Documents.TextRange>: <xref:System.Windows.Documents.TextRange.Start%2A> and <xref:System.Windows.Documents.TextRange.End%2A>.","nodes":[{"content":"From a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextRange&gt;</ph>: <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextRange.Start%2A&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Windows.Documents.TextRange.End%2A&gt;</ph>.","pos":[0,154],"source":"From a <xref:System.Windows.Documents.TextRange>: <xref:System.Windows.Documents.TextRange.Start%2A> and <xref:System.Windows.Documents.TextRange.End%2A>."}]},{"pos":[6904,7200],"content":"From a <xref:System.Windows.Documents.TextElement>:  <xref:System.Windows.Documents.TextElement.ContentStart%2A>, <xref:System.Windows.Documents.TextElement.ContentEnd%2A>, <xref:System.Windows.Documents.TextElement.ElementStart%2A>, and <xref:System.Windows.Documents.TextElement.ElementEnd%2A>.","nodes":[{"content":"From a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>:  <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextElement.ContentStart%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Documents.TextElement.ContentEnd%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Documents.TextElement.ElementStart%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Windows.Documents.TextElement.ElementEnd%2A&gt;</ph>.","pos":[0,296],"source":"From a <xref:System.Windows.Documents.TextElement>:  <xref:System.Windows.Documents.TextElement.ContentStart%2A>, <xref:System.Windows.Documents.TextElement.ContentEnd%2A>, <xref:System.Windows.Documents.TextElement.ElementStart%2A>, and <xref:System.Windows.Documents.TextElement.ElementEnd%2A>."}]},{"pos":[7210,7459],"content":"From a <xref:System.Windows.Controls.TextBlock> (text container): <xref:System.Windows.Controls.TextBlock.ContentStart%2A>, <xref:System.Windows.Controls.TextBlock.ContentEnd%2A>, and <xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A>.","nodes":[{"content":"From a <ph id=\"ph1\">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> (text container): <ph id=\"ph2\">&lt;xref:System.Windows.Controls.TextBlock.ContentStart%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Controls.TextBlock.ContentEnd%2A&gt;</ph>, and <ph id=\"ph4\">&lt;xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A&gt;</ph>.","pos":[0,249],"source":"From a <xref:System.Windows.Controls.TextBlock> (text container): <xref:System.Windows.Controls.TextBlock.ContentStart%2A>, <xref:System.Windows.Controls.TextBlock.ContentEnd%2A>, and <xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A>."}]},{"pos":[7469,7663],"content":"From a <xref:System.Windows.Documents.FlowDocument> (text container): <xref:System.Windows.Documents.FlowDocument.ContentStart%2A>, and <xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>","nodes":[{"content":"From a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph> (text container): <ph id=\"ph2\">&lt;xref:System.Windows.Documents.FlowDocument.ContentStart%2A&gt;</ph>, and <ph id=\"ph3\">&lt;xref:System.Windows.Documents.FlowDocument.ContentEnd%2A&gt;</ph>","pos":[0,194],"source":"From a <xref:System.Windows.Documents.FlowDocument> (text container): <xref:System.Windows.Documents.FlowDocument.ContentStart%2A>, and <xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>"}]},{"pos":[7673,8001],"content":"From an existing <xref:System.Windows.Documents.TextPointer>: <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>, <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>, <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>, and <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>.","nodes":[{"content":"From an existing <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>: <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer.DocumentStart%2A&gt;</ph>, <ph id=\"ph3\">&lt;xref:System.Windows.Documents.TextPointer.DocumentEnd%2A&gt;</ph>, <ph id=\"ph4\">&lt;xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A&gt;</ph>, and <ph id=\"ph5\">&lt;xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A&gt;</ph>.","pos":[0,328],"source":"From an existing <xref:System.Windows.Documents.TextPointer>: <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>, <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>, <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>, and <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>."}]}],"pos":[2905,10963],"yaml":true,"extradata":"MT"},{"content":"Performs an ordinal comparison between the positions specified by the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and a second specified <xref href=\"System.Windows.Documents.TextPointer\"></xref>.","nodes":[{"pos":[0,217],"content":"Performs an ordinal comparison between the positions specified by the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> and a second specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph>.","source":"Performs an ordinal comparison between the positions specified by the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and a second specified <xref href=\"System.Windows.Documents.TextPointer\"></xref>."}],"pos":[13621,13839],"yaml":true},{"content":"A value of –1 indicates that the position specified by the current <xref:System.Windows.Documents.TextPointer> precedes the position specified by `position`.  A value of 0 indicates that the indicated positions are equal.  A value of positive +1 indicates that the position specified by the current <xref:System.Windows.Documents.TextPointer> follows the position specified by `position`.","nodes":[{"pos":[0,388],"content":"A value of –1 indicates that the position specified by the current <xref:System.Windows.Documents.TextPointer> precedes the position specified by `position`.  A value of 0 indicates that the indicated positions are equal.  A value of positive +1 indicates that the position specified by the current <xref:System.Windows.Documents.TextPointer> follows the position specified by `position`.","nodes":[{"content":"A value of –1 indicates that the position specified by the current <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> precedes the position specified by <ph id=\"ph2\">`position`</ph>.","pos":[0,157],"source":"A value of –1 indicates that the position specified by the current <xref:System.Windows.Documents.TextPointer> precedes the position specified by `position`."},{"content":"A value of 0 indicates that the indicated positions are equal.","pos":[159,221]},{"content":"A value of positive +1 indicates that the position specified by the current <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> follows the position specified by <ph id=\"ph2\">`position`</ph>.","pos":[223,388],"source":"  A value of positive +1 indicates that the position specified by the current <xref:System.Windows.Documents.TextPointer> follows the position specified by `position`."}]}],"pos":[13850,14239],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> that specifies a position to compare to the current position.","nodes":[{"pos":[0,121],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> that specifies a position to compare to the current position.","source":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> that specifies a position to compare to the current position."}],"pos":[15184,15306],"yaml":true},{"content":"–1 if the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> precedes <code>position</code>; 0 if the locations are the same; +1 if the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> follows <code>position</code>.","nodes":[{"pos":[0,247],"content":"–1 if the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> precedes <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept>; 0 if the locations are the same; +1 if the current <ph id=\"ph3\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> follows <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">position</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","source":"–1 if the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> precedes <code>position</code>; 0 if the locations are the same; +1 if the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> follows <code>position</code>."}],"pos":[15362,15610],"yaml":true},{"content":"<code>position</code> specifies a position outside of the text container associated with the current position.","nodes":[{"pos":[0,110],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> specifies a position outside of the text container associated with the current position.","source":"<code>position</code> specifies a position outside of the text container associated with the current position."}],"pos":[15778,15889],"yaml":true},{"content":"Deletes the specified number of characters from the position indicated by the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>.","nodes":[{"pos":[0,144],"content":"Deletes the specified number of characters from the position indicated by the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph>.","source":"Deletes the specified number of characters from the position indicated by the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>."}],"pos":[16912,17057],"yaml":true},{"content":"Specify a positive value to delete characters that follow the current position (as in <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>); specify a negative value to delete characters that precede the current position (as in <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).  \n  \n The number of characters actually deleted may be less than the number specified by `count`.  This happens in cases where `count` specifies more characters than exist to be deleted.","nodes":[{"pos":[0,324],"content":"Specify a positive value to delete characters that follow the current position (as in <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>); specify a negative value to delete characters that precede the current position (as in <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).","nodes":[{"content":"Specify a positive value to delete characters that follow the current position (as in <ph id=\"ph1\">&lt;xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName&gt;</ph>); specify a negative value to delete characters that precede the current position (as in <ph id=\"ph2\">&lt;xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName&gt;</ph>).","pos":[0,324],"source":"Specify a positive value to delete characters that follow the current position (as in <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>); specify a negative value to delete characters that precede the current position (as in <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>)."}]},{"pos":[331,511],"content":"The number of characters actually deleted may be less than the number specified by `count`.  This happens in cases where `count` specifies more characters than exist to be deleted.","nodes":[{"content":"The number of characters actually deleted may be less than the number specified by <ph id=\"ph1\">`count`</ph>.","pos":[0,91],"source":"The number of characters actually deleted may be less than the number specified by `count`."},{"content":"This happens in cases where <ph id=\"ph1\">`count`</ph> specifies more characters than exist to be deleted.","pos":[93,180],"source":"  This happens in cases where `count` specifies more characters than exist to be deleted."}]}],"pos":[17068,17584],"yaml":true,"extradata":"MT"},{"content":"The number of characters to delete, starting at the current position. Specify a positive value to delete characters that follow the current position; specify a negative value to delete characters that precede the current position.","nodes":[{"pos":[0,230],"content":"The number of characters to delete, starting at the current position. Specify a positive value to delete characters that follow the current position; specify a negative value to delete characters that precede the current position.","nodes":[{"content":"The number of characters to delete, starting at the current position. Specify a positive value to delete characters that follow the current position; specify a negative value to delete characters that precede the current position.","pos":[0,230],"nodes":[{"content":"The number of characters to delete, starting at the current position.","pos":[0,69]},{"content":"Specify a positive value to delete characters that follow the current position; specify a negative value to delete characters that precede the current position.","pos":[70,230]}]}]}],"pos":[17723,17954],"yaml":true},{"content":"The number of characters actually deleted.","nodes":[{"pos":[0,42],"content":"The number of characters actually deleted.","nodes":[{"content":"The number of characters actually deleted.","pos":[0,42]}]}],"pos":[18010,18053],"yaml":true},{"content":"The method is called at a position where text is not allowed.","nodes":[{"pos":[0,61],"content":"The method is called at a position where text is not allowed.","nodes":[{"content":"The method is called at a position where text is not allowed.","pos":[0,61]}]}],"pos":[18243,18305],"yaml":true},{"content":"Gets a <xref href=\"System.Windows.Documents.TextPointer\"></xref> at the end of content in the text container associated with the current position.","nodes":[{"pos":[0,146],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> at the end of content in the text container associated with the current position.","source":"Gets a <xref href=\"System.Windows.Documents.TextPointer\"></xref> at the end of content in the text container associated with the current position."}],"pos":[19243,19390],"yaml":true},{"content":"The <xref:System.Windows.Documents.TextPointer.Parent%2A> for the returned <xref:System.Windows.Documents.TextPointer> is always a text container (<xref:System.Windows.Controls.TextBlock> or <xref:System.Windows.Documents.FlowDocument>), rather than a <xref:System.Windows.Documents.TextElement>.","nodes":[{"pos":[0,296],"content":"The <xref:System.Windows.Documents.TextPointer.Parent%2A> for the returned <xref:System.Windows.Documents.TextPointer> is always a text container (<xref:System.Windows.Controls.TextBlock> or <xref:System.Windows.Documents.FlowDocument>), rather than a <xref:System.Windows.Documents.TextElement>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.Parent%2A&gt;</ph> for the returned <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> is always a text container (<ph id=\"ph3\">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph>), rather than a <ph id=\"ph5\">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>.","pos":[0,296],"source":"The <xref:System.Windows.Documents.TextPointer.Parent%2A> for the returned <xref:System.Windows.Documents.TextPointer> is always a text container (<xref:System.Windows.Controls.TextBlock> or <xref:System.Windows.Documents.FlowDocument>), rather than a <xref:System.Windows.Documents.TextElement>."}]}],"pos":[19401,19698],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> at the end of content in the text container associated with the current position.","nodes":[{"pos":[0,141],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> at the end of content in the text container associated with the current position.","source":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> at the end of content in the text container associated with the current position."}],"pos":[19866,20008],"yaml":true},{"content":"Gets a <xref href=\"System.Windows.Documents.TextPointer\"></xref> at the beginning of content in the text container associated with the current position.","nodes":[{"pos":[0,152],"content":"Gets a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> at the beginning of content in the text container associated with the current position.","source":"Gets a <xref href=\"System.Windows.Documents.TextPointer\"></xref> at the beginning of content in the text container associated with the current position."}],"pos":[21037,21190],"yaml":true},{"content":"Use the position returned by this property as a baseline position from which to work with relative offsets to other positions.  The <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> and <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> methods provide a way to translate between positions and position offsets.  \n  \n The <xref:System.Windows.Documents.TextPointer.Parent%2A> for the returned <xref:System.Windows.Documents.TextPointer> is always a text container (<xref:System.Windows.Controls.TextBlock> or <xref:System.Windows.Documents.FlowDocument>), rather than a <xref:System.Windows.Documents.TextElement>.","nodes":[{"pos":[0,344],"content":"Use the position returned by this property as a baseline position from which to work with relative offsets to other positions.  The <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> and <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> methods provide a way to translate between positions and position offsets.","nodes":[{"content":"Use the position returned by this property as a baseline position from which to work with relative offsets to other positions.  The <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> and <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> methods provide a way to translate between positions and position offsets.","pos":[0,344],"nodes":[{"content":"Use the position returned by this property as a baseline position from which to work with relative offsets to other positions.","pos":[0,126]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A&gt;</ph> methods provide a way to translate between positions and position offsets.","pos":[128,344],"source":"  The <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> and <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> methods provide a way to translate between positions and position offsets."}]}]},{"pos":[351,647],"content":"The <xref:System.Windows.Documents.TextPointer.Parent%2A> for the returned <xref:System.Windows.Documents.TextPointer> is always a text container (<xref:System.Windows.Controls.TextBlock> or <xref:System.Windows.Documents.FlowDocument>), rather than a <xref:System.Windows.Documents.TextElement>.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.Parent%2A&gt;</ph> for the returned <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> is always a text container (<ph id=\"ph3\">&lt;xref:System.Windows.Controls.TextBlock&gt;</ph> or <ph id=\"ph4\">&lt;xref:System.Windows.Documents.FlowDocument&gt;</ph>), rather than a <ph id=\"ph5\">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>.","pos":[0,296],"source":"The <xref:System.Windows.Documents.TextPointer.Parent%2A> for the returned <xref:System.Windows.Documents.TextPointer> is always a text container (<xref:System.Windows.Controls.TextBlock> or <xref:System.Windows.Documents.FlowDocument>), rather than a <xref:System.Windows.Documents.TextElement>."}]}],"pos":[21201,21853],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> at the beginning of content in the text container associated with the current position.","nodes":[{"pos":[0,147],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> at the beginning of content in the text container associated with the current position.","source":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> at the beginning of content in the text container associated with the current position."}],"pos":[22023,22171],"yaml":true},{"content":"Returns the element, if any, that borders the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> in the specified logical direction.","nodes":[{"pos":[0,147],"content":"Returns the element, if any, that borders the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> in the specified logical direction.","source":"Returns the element, if any, that borders the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> in the specified logical direction."}],"pos":[23413,23561],"yaml":true},{"content":"The returned element is typically a <xref:System.Windows.Documents.TextElement>.  A <xref:System.Windows.UIElement> can be returned when the <xref:System.Windows.Documents.TextPointer> indicates a position inside a <xref:System.Windows.Documents.BlockUIContainer> element or an <xref:System.Windows.Documents.InlineUIContainer> element.","nodes":[{"pos":[0,336],"content":"The returned element is typically a <xref:System.Windows.Documents.TextElement>.  A <xref:System.Windows.UIElement> can be returned when the <xref:System.Windows.Documents.TextPointer> indicates a position inside a <xref:System.Windows.Documents.BlockUIContainer> element or an <xref:System.Windows.Documents.InlineUIContainer> element.","nodes":[{"content":"The returned element is typically a <xref:System.Windows.Documents.TextElement>.  A <xref:System.Windows.UIElement> can be returned when the <xref:System.Windows.Documents.TextPointer> indicates a position inside a <xref:System.Windows.Documents.BlockUIContainer> element or an <xref:System.Windows.Documents.InlineUIContainer> element.","pos":[0,336],"nodes":[{"content":"The returned element is typically a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextElement&gt;</ph>.","pos":[0,80],"source":"The returned element is typically a <xref:System.Windows.Documents.TextElement>."},{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> can be returned when the <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> indicates a position inside a <ph id=\"ph3\">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph> element or an <ph id=\"ph4\">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> element.","pos":[82,336],"source":"  A <xref:System.Windows.UIElement> can be returned when the <xref:System.Windows.Documents.TextPointer> indicates a position inside a <xref:System.Windows.Documents.BlockUIContainer> element or an <xref:System.Windows.Documents.InlineUIContainer> element."}]}]}],"pos":[23572,23909],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to search for an adjacent element.","nodes":[{"pos":[0,161],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.LogicalDirection\"&gt;&lt;/xref&gt;</ph> values that specifies the logical direction in which to search for an adjacent element.","source":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to search for an adjacent element."}],"pos":[24154,24316],"yaml":true},{"content":"The adjacent element in the specified <code>direction</code>, or `null` if no adjacent element exists.","nodes":[{"pos":[0,102],"content":"The adjacent element in the specified <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">direction</ph><ept id=\"p1\">&lt;/code&gt;</ept>, or <ph id=\"ph2\">`null`</ph> if no adjacent element exists.","source":"The adjacent element in the specified <code>direction</code>, or `null` if no adjacent element exists."}],"pos":[24391,24494],"yaml":true},{"content":"Returns a bounding box (<xref href=\"System.Windows.Rect\"></xref>) for content that borders the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> in the specified logical direction.","nodes":[{"pos":[0,196],"content":"Returns a bounding box (<ph id=\"ph1\">&lt;xref href=\"System.Windows.Rect\"&gt;&lt;/xref&gt;</ph>) for content that borders the current <ph id=\"ph2\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> in the specified logical direction.","source":"Returns a bounding box (<xref href=\"System.Windows.Rect\"></xref>) for content that borders the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> in the specified logical direction."}],"pos":[25729,25926],"yaml":true},{"content":"<xref:System.Windows.Documents.TextElement> edges are not considered content for the purposes of this method.  If the <xref:System.Windows.Documents.TextPointer> is positioned before a <xref:System.Windows.Documents.TextElement> edge, the return value is a bounding box for the next non-<xref:System.Windows.Documents.TextElement> content in the specified direction.  If there is no content in the specified direction, a zero-width <xref:System.Windows.Rect> is returned with a height matching the height of any preceding content.  \n  \n The operation performed by this method depends on a valid layout.  When necessary, this method attempts to automatically regenerate a valid layout before proceeding with the operation.  Regenerating a layout can be a relatively expensive operation.  Use the <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> property to check for a valid layout before performing operations that may regenerate the layout.  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).","nodes":[{"pos":[0,530],"content":"<xref:System.Windows.Documents.TextElement> edges are not considered content for the purposes of this method.  If the <xref:System.Windows.Documents.TextPointer> is positioned before a <xref:System.Windows.Documents.TextElement> edge, the return value is a bounding box for the next non-<xref:System.Windows.Documents.TextElement> content in the specified direction.  If there is no content in the specified direction, a zero-width <xref:System.Windows.Rect> is returned with a height matching the height of any preceding content.","nodes":[{"content":"<xref:System.Windows.Documents.TextElement> edges are not considered content for the purposes of this method.  If the <xref:System.Windows.Documents.TextPointer> is positioned before a <xref:System.Windows.Documents.TextElement> edge, the return value is a bounding box for the next non-<xref:System.Windows.Documents.TextElement> content in the specified direction.  If there is no content in the specified direction, a zero-width <xref:System.Windows.Rect> is returned with a height matching the height of any preceding content.","pos":[0,530],"nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> edges are not considered content for the purposes of this method.","pos":[0,109],"source":"<xref:System.Windows.Documents.TextElement> edges are not considered content for the purposes of this method."},{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> is positioned before a <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> edge, the return value is a bounding box for the next non-<ph id=\"ph3\">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> content in the specified direction.","pos":[111,366],"source":"  If the <xref:System.Windows.Documents.TextPointer> is positioned before a <xref:System.Windows.Documents.TextElement> edge, the return value is a bounding box for the next non-<xref:System.Windows.Documents.TextElement> content in the specified direction."},{"content":"If there is no content in the specified direction, a zero-width <ph id=\"ph1\">&lt;xref:System.Windows.Rect&gt;</ph> is returned with a height matching the height of any preceding content.","pos":[368,530],"source":"  If there is no content in the specified direction, a zero-width <xref:System.Windows.Rect> is returned with a height matching the height of any preceding content."}]}]},{"pos":[537,1032],"content":"The operation performed by this method depends on a valid layout.  When necessary, this method attempts to automatically regenerate a valid layout before proceeding with the operation.  Regenerating a layout can be a relatively expensive operation.  Use the <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> property to check for a valid layout before performing operations that may regenerate the layout.  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).","nodes":[{"content":"The operation performed by this method depends on a valid layout.","pos":[0,65]},{"content":"When necessary, this method attempts to automatically regenerate a valid layout before proceeding with the operation.","pos":[67,184]},{"content":"Regenerating a layout can be a relatively expensive operation.","pos":[186,248]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.HasValidLayout%2A&gt;</ph> property to check for a valid layout before performing operations that may regenerate the layout.","pos":[250,417],"source":"  Use the <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> property to check for a valid layout before performing operations that may regenerate the layout."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Layout<ept id=\"p1\">](~/docs/framework/wpf/advanced/layout.md)</ept>.","pos":[419,495],"source":"  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md)."}]}],"pos":[25937,26974],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to find a content bounding box.","nodes":[{"pos":[0,158],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.LogicalDirection\"&gt;&lt;/xref&gt;</ph> values that specifies the logical direction in which to find a content bounding box.","source":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to find a content bounding box."}],"pos":[27205,27364],"yaml":true},{"content":"A bounding box for content that borders the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> in the specified direction, or <xref href=\"System.Windows.Rect.Empty\"></xref> if current, valid layout information is unavailable.","nodes":[{"pos":[0,240],"content":"A bounding box for content that borders the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> in the specified direction, or <ph id=\"ph2\">&lt;xref href=\"System.Windows.Rect.Empty\"&gt;&lt;/xref&gt;</ph> if current, valid layout information is unavailable.","source":"A bounding box for content that borders the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> in the specified direction, or <xref href=\"System.Windows.Rect.Empty\"></xref> if current, valid layout information is unavailable."}],"pos":[27427,27668],"yaml":true},{"content":"Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the closest insertion position in the specified logical direction.","nodes":[{"pos":[0,137],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> to the closest insertion position in the specified logical direction.","source":"Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the closest insertion position in the specified logical direction."}],"pos":[28925,29063],"yaml":true},{"content":"An insertion position is a position where new content may be added without breaking any semantic rules for the associated content.  In practice, an insertion position is anywhere in content where a caret may be positioned.  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).  \n  \n If the <xref:System.Windows.Documents.TextPointer> already points to a valid insertion position, but the closing tag for a non-empty formatting sequence directly follows that position in the given direction, then the <xref:System.Windows.Documents.TextPointer> returned by this method is adjusted to point to the insertion position just after the close of the formatting sequence. For example, consider the markup sequence `<Bold>a</Bold>b`. Note that there are two insertion positions between the letters `a` and `b` — one that precedes the closing `Bold` tag, and one directly following the closing `Bold` tag. If <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> is called on a <xref:System.Windows.Documents.TextPointer> to the position directly after the letter `a` and before of the closing `Bold` tag, and with a `direction` of <xref:System.Windows.Documents.LogicalDirection.Forward>, the returned <xref:System.Windows.Documents.TextPointer> is adjusted to point to the position just before the letter `b`, after the closing `Bold` tag. A similar adjustment is made for opening formatting tags when working in the opposite logical direction. This method is intended to provide a means of disambiguation between insertion positions in similar cases.  \n  \n This method can also be used to be selective about insertion points when a sequence of structural tags is involved. For example, when at a position between closing and opening paragraph tags, the direction parameter can be used to select the closest insertion point at the beginning of the following paragraph (by specifying <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>) or at the end of the preceding paragraph (by specifying <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).  \n  \n If the pointer is already at insertion position, and there are no adjacent formatting tags in the specified `direction`, the returned <xref:System.Windows.Documents.TextPointer> points to the same position as the calling <xref:System.Windows.Documents.TextPointer>.  \n  \n It is possible that no valid insertion position exists relative to the position pointed to by a <xref:System.Windows.Documents.TextPointer>.  This can happen if the referenced content is structurally incomplete, as in an empty table or list.  In such cases, this method simply returns a <xref:System.Windows.Documents.TextPointer> to the same position as the <xref:System.Windows.Documents.TextPointer> from which this method was called.  This method always returns a valid <xref:System.Windows.Documents.TextPointer>.","nodes":[{"pos":[0,521],"content":"An insertion position is a position where new content may be added without breaking any semantic rules for the associated content.  In practice, an insertion position is anywhere in content where a caret may be positioned.  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).","nodes":[{"content":"An insertion position is a position where new content may be added without breaking any semantic rules for the associated content.  In practice, an insertion position is anywhere in content where a caret may be positioned.  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).","pos":[0,521],"nodes":[{"content":"An insertion position is a position where new content may be added without breaking any semantic rules for the associated content.","pos":[0,130]},{"content":"In practice, an insertion position is anywhere in content where a caret may be positioned.","pos":[132,222]},{"content":"An example of a valid <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> position that is not an insertion position is the position between two adjacent <ph id=\"ph2\">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).","pos":[224,521],"source":"  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph)."}]}]},{"pos":[528,1802],"content":"If the <xref:System.Windows.Documents.TextPointer> already points to a valid insertion position, but the closing tag for a non-empty formatting sequence directly follows that position in the given direction, then the <xref:System.Windows.Documents.TextPointer> returned by this method is adjusted to point to the insertion position just after the close of the formatting sequence. For example, consider the markup sequence `<Bold>a</Bold>b`. Note that there are two insertion positions between the letters `a` and `b` — one that precedes the closing `Bold` tag, and one directly following the closing `Bold` tag. If <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> is called on a <xref:System.Windows.Documents.TextPointer> to the position directly after the letter `a` and before of the closing `Bold` tag, and with a `direction` of <xref:System.Windows.Documents.LogicalDirection.Forward>, the returned <xref:System.Windows.Documents.TextPointer> is adjusted to point to the position just before the letter `b`, after the closing `Bold` tag. A similar adjustment is made for opening formatting tags when working in the opposite logical direction. This method is intended to provide a means of disambiguation between insertion positions in similar cases.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> already points to a valid insertion position, but the closing tag for a non-empty formatting sequence directly follows that position in the given direction, then the <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> returned by this method is adjusted to point to the insertion position just after the close of the formatting sequence.","pos":[0,380],"source":"If the <xref:System.Windows.Documents.TextPointer> already points to a valid insertion position, but the closing tag for a non-empty formatting sequence directly follows that position in the given direction, then the <xref:System.Windows.Documents.TextPointer> returned by this method is adjusted to point to the insertion position just after the close of the formatting sequence."},{"content":"For example, consider the markup sequence <ph id=\"ph1\">`&lt;Bold&gt;a&lt;/Bold&gt;b`</ph>.","pos":[381,441],"source":" For example, consider the markup sequence `<Bold>a</Bold>b`."},{"content":"Note that there are two insertion positions between the letters <ph id=\"ph1\">`a`</ph> and <ph id=\"ph2\">`b`</ph> — one that precedes the closing <ph id=\"ph3\">`Bold`</ph> tag, and one directly following the closing <ph id=\"ph4\">`Bold`</ph> tag.","pos":[442,612],"source":" Note that there are two insertion positions between the letters `a` and `b` — one that precedes the closing `Bold` tag, and one directly following the closing `Bold` tag."},{"content":"If <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A&gt;</ph> is called on a <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> to the position directly after the letter <ph id=\"ph3\">`a`</ph> and before of the closing <ph id=\"ph4\">`Bold`</ph> tag, and with a <ph id=\"ph5\">`direction`</ph> of <ph id=\"ph6\">&lt;xref:System.Windows.Documents.LogicalDirection.Forward&gt;</ph>, the returned <ph id=\"ph7\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> is adjusted to point to the position just before the letter <ph id=\"ph8\">`b`</ph>, after the closing <ph id=\"ph9\">`Bold`</ph> tag.","pos":[613,1062],"source":" If <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> is called on a <xref:System.Windows.Documents.TextPointer> to the position directly after the letter `a` and before of the closing `Bold` tag, and with a `direction` of <xref:System.Windows.Documents.LogicalDirection.Forward>, the returned <xref:System.Windows.Documents.TextPointer> is adjusted to point to the position just before the letter `b`, after the closing `Bold` tag."},{"content":"A similar adjustment is made for opening formatting tags when working in the opposite logical direction.","pos":[1063,1167]},{"content":"This method is intended to provide a means of disambiguation between insertion positions in similar cases.","pos":[1168,1274]}]},{"pos":[1809,2340],"content":"This method can also be used to be selective about insertion points when a sequence of structural tags is involved. For example, when at a position between closing and opening paragraph tags, the direction parameter can be used to select the closest insertion point at the beginning of the following paragraph (by specifying <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>) or at the end of the preceding paragraph (by specifying <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).","nodes":[{"content":"This method can also be used to be selective about insertion points when a sequence of structural tags is involved. For example, when at a position between closing and opening paragraph tags, the direction parameter can be used to select the closest insertion point at the beginning of the following paragraph (by specifying <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>) or at the end of the preceding paragraph (by specifying <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).","pos":[0,531],"nodes":[{"content":"This method can also be used to be selective about insertion points when a sequence of structural tags is involved.","pos":[0,115]},{"content":"For example, when at a position between closing and opening paragraph tags, the direction parameter can be used to select the closest insertion point at the beginning of the following paragraph (by specifying <ph id=\"ph1\">&lt;xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName&gt;</ph>) or at the end of the preceding paragraph (by specifying <ph id=\"ph2\">&lt;xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName&gt;</ph>).","pos":[116,531],"source":" For example, when at a position between closing and opening paragraph tags, the direction parameter can be used to select the closest insertion point at the beginning of the following paragraph (by specifying <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>) or at the end of the preceding paragraph (by specifying <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>)."}]}]},{"pos":[2347,2612],"content":"If the pointer is already at insertion position, and there are no adjacent formatting tags in the specified <ph id=\"ph1\">`direction`</ph>, the returned <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> points to the same position as the calling <ph id=\"ph3\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>.","source":"If the pointer is already at insertion position, and there are no adjacent formatting tags in the specified `direction`, the returned <xref:System.Windows.Documents.TextPointer> points to the same position as the calling <xref:System.Windows.Documents.TextPointer>."},{"pos":[2619,3137],"content":"It is possible that no valid insertion position exists relative to the position pointed to by a <xref:System.Windows.Documents.TextPointer>.  This can happen if the referenced content is structurally incomplete, as in an empty table or list.  In such cases, this method simply returns a <xref:System.Windows.Documents.TextPointer> to the same position as the <xref:System.Windows.Documents.TextPointer> from which this method was called.  This method always returns a valid <xref:System.Windows.Documents.TextPointer>.","nodes":[{"content":"It is possible that no valid insertion position exists relative to the position pointed to by a <xref:System.Windows.Documents.TextPointer>.  This can happen if the referenced content is structurally incomplete, as in an empty table or list.  In such cases, this method simply returns a <xref:System.Windows.Documents.TextPointer> to the same position as the <xref:System.Windows.Documents.TextPointer> from which this method was called.  This method always returns a valid <xref:System.Windows.Documents.TextPointer>.","pos":[0,518],"nodes":[{"content":"It is possible that no valid insertion position exists relative to the position pointed to by a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>.","pos":[0,140],"source":"It is possible that no valid insertion position exists relative to the position pointed to by a <xref:System.Windows.Documents.TextPointer>."},{"content":"This can happen if the referenced content is structurally incomplete, as in an empty table or list.","pos":[142,241]},{"content":"In such cases, this method simply returns a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> to the same position as the <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> from which this method was called.","pos":[243,437],"source":"  In such cases, this method simply returns a <xref:System.Windows.Documents.TextPointer> to the same position as the <xref:System.Windows.Documents.TextPointer> from which this method was called."},{"content":"This method always returns a valid <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph>.","pos":[439,518],"source":"  This method always returns a valid <xref:System.Windows.Documents.TextPointer>."}]}]}],"pos":[29074,32222],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to search for the closest insertion position.","nodes":[{"pos":[0,172],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.LogicalDirection\"&gt;&lt;/xref&gt;</ph> values that specifies the logical direction in which to search for the closest insertion position.","source":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to search for the closest insertion position."}],"pos":[33104,33277],"yaml":true},{"content":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the closest insertion position in the specified direction.","nodes":[{"pos":[0,121],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> to the closest insertion position in the specified direction.","source":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the closest insertion position in the specified direction."}],"pos":[33357,33479],"yaml":true},{"content":"Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the beginning of a line that is specified relative to the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>.","nodes":[{"pos":[0,195],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> to the beginning of a line that is specified relative to the current <ph id=\"ph2\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph>.","source":"Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the beginning of a line that is specified relative to the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>."}],"pos":[34620,34816],"yaml":true},{"content":"If the <xref:System.Windows.Documents.TextPointer> points to an ambiguous position, for example, between two lines, the line in the direction specified by <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> is selected as the relative starting line.  \n  \n The operation performed by this method depends on a valid layout.  When necessary, this method attempts to automatically regenerate a valid layout before proceeding with the operation.  Regenerating a layout can be a relatively expensive operation.  Use <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> to check for a valid layout before performing operations that may regenerate the layout.  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).","nodes":[{"pos":[0,261],"content":"If the <xref:System.Windows.Documents.TextPointer> points to an ambiguous position, for example, between two lines, the line in the direction specified by <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> is selected as the relative starting line.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> points to an ambiguous position, for example, between two lines, the line in the direction specified by <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer.LogicalDirection%2A&gt;</ph> is selected as the relative starting line.","pos":[0,261],"source":"If the <xref:System.Windows.Documents.TextPointer> points to an ambiguous position, for example, between two lines, the line in the direction specified by <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> is selected as the relative starting line."}]},{"pos":[268,750],"content":"The operation performed by this method depends on a valid layout.  When necessary, this method attempts to automatically regenerate a valid layout before proceeding with the operation.  Regenerating a layout can be a relatively expensive operation.  Use <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> to check for a valid layout before performing operations that may regenerate the layout.  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).","nodes":[{"content":"The operation performed by this method depends on a valid layout.","pos":[0,65]},{"content":"When necessary, this method attempts to automatically regenerate a valid layout before proceeding with the operation.","pos":[67,184]},{"content":"Regenerating a layout can be a relatively expensive operation.","pos":[186,248]},{"content":"Use <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.HasValidLayout%2A&gt;</ph> to check for a valid layout before performing operations that may regenerate the layout.","pos":[250,404],"source":"  Use <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> to check for a valid layout before performing operations that may regenerate the layout."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Layout<ept id=\"p1\">](~/docs/framework/wpf/advanced/layout.md)</ept>.","pos":[406,482],"source":"  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md)."}]}],"pos":[34827,35582],"yaml":true,"extradata":"MT"},{"content":"The number of start-of-line markers to skip when determining the line for which to return the starting position. Negative values specify preceding lines, 0 specifies the current line, and positive values specify following lines.","nodes":[{"pos":[0,228],"content":"The number of start-of-line markers to skip when determining the line for which to return the starting position. Negative values specify preceding lines, 0 specifies the current line, and positive values specify following lines.","nodes":[{"content":"The number of start-of-line markers to skip when determining the line for which to return the starting position. Negative values specify preceding lines, 0 specifies the current line, and positive values specify following lines.","pos":[0,228],"nodes":[{"content":"The number of start-of-line markers to skip when determining the line for which to return the starting position.","pos":[0,112]},{"content":"Negative values specify preceding lines, 0 specifies the current line, and positive values specify following lines.","pos":[113,228]}]}]}],"pos":[35759,35988],"yaml":true},{"content":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> pointing to the beginning of the specified line (with the <xref href=\"System.Windows.Documents.TextPointer.LogicalDirection\"></xref> set to <xref href=\"System.Windows.Documents.LogicalDirection.Forward\"></xref>), or `null` if the specified line is out of range or otherwise cannot be located.","nodes":[{"pos":[0,352],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> pointing to the beginning of the specified line (with the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Documents.TextPointer.LogicalDirection\"&gt;&lt;/xref&gt;</ph> set to <ph id=\"ph3\">&lt;xref href=\"System.Windows.Documents.LogicalDirection.Forward\"&gt;&lt;/xref&gt;</ph>), or <ph id=\"ph4\">`null`</ph> if the specified line is out of range or otherwise cannot be located.","source":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> pointing to the beginning of the specified line (with the <xref href=\"System.Windows.Documents.TextPointer.LogicalDirection\"></xref> set to <xref href=\"System.Windows.Documents.LogicalDirection.Forward\"></xref>), or `null` if the specified line is out of range or otherwise cannot be located."}],"pos":[36068,36421],"yaml":true},{"content":"Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the beginning of a line that is specified relative to the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>, and reports how many lines were skipped.","nodes":[{"pos":[0,236],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> to the beginning of a line that is specified relative to the current <ph id=\"ph2\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph>, and reports how many lines were skipped.","source":"Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the beginning of a line that is specified relative to the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>, and reports how many lines were skipped."}],"pos":[37625,37862],"yaml":true},{"content":"If the <xref:System.Windows.Documents.TextPointer> points to an ambiguous position, for example, between two lines, the line in the direction specified by the <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> property is selected as the relative starting line.","nodes":[{"pos":[0,274],"content":"If the <xref:System.Windows.Documents.TextPointer> points to an ambiguous position, for example, between two lines, the line in the direction specified by the <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> property is selected as the relative starting line.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> points to an ambiguous position, for example, between two lines, the line in the direction specified by the <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer.LogicalDirection%2A&gt;</ph> property is selected as the relative starting line.","pos":[0,274],"source":"If the <xref:System.Windows.Documents.TextPointer> points to an ambiguous position, for example, between two lines, the line in the direction specified by the <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> property is selected as the relative starting line."}]}],"pos":[37873,38148],"yaml":true,"extradata":"MT"},{"content":"The number of start-of-line markers to skip when determining the line for which to return the starting position. Negative values specify preceding lines, 0 specifies the current line, and positive values specify following lines.","nodes":[{"pos":[0,228],"content":"The number of start-of-line markers to skip when determining the line for which to return the starting position. Negative values specify preceding lines, 0 specifies the current line, and positive values specify following lines.","nodes":[{"content":"The number of start-of-line markers to skip when determining the line for which to return the starting position. Negative values specify preceding lines, 0 specifies the current line, and positive values specify following lines.","pos":[0,228],"nodes":[{"content":"The number of start-of-line markers to skip when determining the line for which to return the starting position.","pos":[0,112]},{"content":"Negative values specify preceding lines, 0 specifies the current line, and positive values specify following lines.","pos":[113,228]}]}]}],"pos":[38346,38575],"yaml":true},{"content":"When this method returns, contains the actual number of start-of-line markers that were skipped when determining the line for which to return the starting position.  This value may be less than <code>count</code> if the beginning or end of content is encountered before the specified number of lines are skipped. This parameter is passed uninitialized.","nodes":[{"pos":[0,352],"content":"When this method returns, contains the actual number of start-of-line markers that were skipped when determining the line for which to return the starting position.  This value may be less than <code>count</code> if the beginning or end of content is encountered before the specified number of lines are skipped. This parameter is passed uninitialized.","nodes":[{"content":"When this method returns, contains the actual number of start-of-line markers that were skipped when determining the line for which to return the starting position.","pos":[0,164]},{"content":"This value may be less than <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">count</ph><ept id=\"p1\">&lt;/code&gt;</ept> if the beginning or end of content is encountered before the specified number of lines are skipped.","pos":[166,312],"source":"  This value may be less than <code>count</code> if the beginning or end of content is encountered before the specified number of lines are skipped."},{"content":"This parameter is passed uninitialized.","pos":[313,352]}]}],"pos":[38641,38994],"yaml":true},{"content":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> pointing to the beginning of the specified line (with the <xref href=\"System.Windows.Documents.TextPointer.LogicalDirection\"></xref> set to <xref href=\"System.Windows.Documents.LogicalDirection.Forward\"></xref>), or to the beginning of the line closest to the specified line if the specified line is out of range.","nodes":[{"pos":[0,373],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> pointing to the beginning of the specified line (with the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Documents.TextPointer.LogicalDirection\"&gt;&lt;/xref&gt;</ph> set to <ph id=\"ph3\">&lt;xref href=\"System.Windows.Documents.LogicalDirection.Forward\"&gt;&lt;/xref&gt;</ph>), or to the beginning of the line closest to the specified line if the specified line is out of range.","source":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> pointing to the beginning of the specified line (with the <xref href=\"System.Windows.Documents.TextPointer.LogicalDirection\"></xref> set to <xref href=\"System.Windows.Documents.LogicalDirection.Forward\"></xref>), or to the beginning of the line closest to the specified line if the specified line is out of range."}],"pos":[39074,39448],"yaml":true},{"content":"Returns a pointer to the next symbol in the specified logical direction.","nodes":[{"pos":[0,72],"content":"Returns a pointer to the next symbol in the specified logical direction.","nodes":[{"content":"Returns a pointer to the next symbol in the specified logical direction.","pos":[0,72]}]}],"pos":[40699,40772],"yaml":true},{"content":"Any of the following is considered to be a symbol:  \n  \n-   An opening or closing tag for a <xref:System.Windows.Documents.TextElement> element.  \n  \n-   A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.  \n  \n-   A 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element.  \n  \n If the next symbol is categorized as <xref:System.Windows.Documents.TextPointerContext.EmbeddedElement>, <xref:System.Windows.Documents.TextPointerContext.ElementStart>, or <xref:System.Windows.Documents.TextPointerContext.ElementEnd> (as identified by the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method), then the <xref:System.Windows.Documents.TextPointer> returned by this method is advanced by exactly one symbol from the current position.  \n  \n If the next symbol is categorized as <xref:System.Windows.Documents.TextPointerContext.Text>, then the <xref:System.Windows.Documents.TextPointer> returned by this method is advanced past the text to the next non-text symbol (that is, the next position where the <xref:System.Windows.Documents.TextPointerContext> is not <xref:System.Windows.Documents.TextPointerContext.Text>).  The exact symbol count crossed can be calculated in advance by calling the <xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A> method.","nodes":[{"pos":[0,50],"content":"Any of the following is considered to be a symbol:","nodes":[{"content":"Any of the following is considered to be a symbol:","pos":[0,50]}]},{"pos":[60,144],"content":"An opening or closing tag for a <xref:System.Windows.Documents.TextElement> element.","nodes":[{"content":"An opening or closing tag for a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> element.","pos":[0,84],"source":"An opening or closing tag for a <xref:System.Windows.Documents.TextElement> element."}]},{"pos":[154,517],"content":"A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.","nodes":[{"content":"A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.","pos":[0,363],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> element contained in an <ph id=\"ph2\">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>.","pos":[0,160],"source":"A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>."},{"content":"Note that such a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> is always counted as exactly one symbol; any additional content or elements contained by the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> are not counted as symbols.","pos":[162,363],"source":"  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols."}]}]},{"pos":[527,673],"content":"A 16-bit <ph id=\"ph1\">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> character inside of a text <ph id=\"ph2\">&lt;xref:System.Windows.Documents.Run&gt;</ph> element.","source":"A 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element."},{"pos":[680,1148],"content":"If the next symbol is categorized as <xref:System.Windows.Documents.TextPointerContext.EmbeddedElement>, <xref:System.Windows.Documents.TextPointerContext.ElementStart>, or <xref:System.Windows.Documents.TextPointerContext.ElementEnd> (as identified by the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method), then the <xref:System.Windows.Documents.TextPointer> returned by this method is advanced by exactly one symbol from the current position.","nodes":[{"content":"If the next symbol is categorized as <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointerContext.EmbeddedElement&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointerContext.ElementStart&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Windows.Documents.TextPointerContext.ElementEnd&gt;</ph> (as identified by the <ph id=\"ph4\">&lt;xref:System.Windows.Documents.TextPointer.GetPointerContext%2A&gt;</ph> method), then the <ph id=\"ph5\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> returned by this method is advanced by exactly one symbol from the current position.","pos":[0,468],"source":"If the next symbol is categorized as <xref:System.Windows.Documents.TextPointerContext.EmbeddedElement>, <xref:System.Windows.Documents.TextPointerContext.ElementStart>, or <xref:System.Windows.Documents.TextPointerContext.ElementEnd> (as identified by the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method), then the <xref:System.Windows.Documents.TextPointer> returned by this method is advanced by exactly one symbol from the current position."}]},{"pos":[1155,1681],"content":"If the next symbol is categorized as <xref:System.Windows.Documents.TextPointerContext.Text>, then the <xref:System.Windows.Documents.TextPointer> returned by this method is advanced past the text to the next non-text symbol (that is, the next position where the <xref:System.Windows.Documents.TextPointerContext> is not <xref:System.Windows.Documents.TextPointerContext.Text>).  The exact symbol count crossed can be calculated in advance by calling the <xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A> method.","nodes":[{"content":"If the next symbol is categorized as <xref:System.Windows.Documents.TextPointerContext.Text>, then the <xref:System.Windows.Documents.TextPointer> returned by this method is advanced past the text to the next non-text symbol (that is, the next position where the <xref:System.Windows.Documents.TextPointerContext> is not <xref:System.Windows.Documents.TextPointerContext.Text>).  The exact symbol count crossed can be calculated in advance by calling the <xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A> method.","pos":[0,526],"nodes":[{"content":"If the next symbol is categorized as <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointerContext.Text&gt;</ph>, then the <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> returned by this method is advanced past the text to the next non-text symbol (that is, the next position where the <ph id=\"ph3\">&lt;xref:System.Windows.Documents.TextPointerContext&gt;</ph> is not <ph id=\"ph4\">&lt;xref:System.Windows.Documents.TextPointerContext.Text&gt;</ph>).","pos":[0,378],"source":"If the next symbol is categorized as <xref:System.Windows.Documents.TextPointerContext.Text>, then the <xref:System.Windows.Documents.TextPointer> returned by this method is advanced past the text to the next non-text symbol (that is, the next position where the <xref:System.Windows.Documents.TextPointerContext> is not <xref:System.Windows.Documents.TextPointerContext.Text>)."},{"content":"The exact symbol count crossed can be calculated in advance by calling the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A&gt;</ph> method.","pos":[380,526],"source":"  The exact symbol count crossed can be calculated in advance by calling the <xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A> method."}]}]}],"pos":[40783,42477],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to search for the next symbol.","nodes":[{"pos":[0,157],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.LogicalDirection\"&gt;&lt;/xref&gt;</ph> values that specifies the logical direction in which to search for the next symbol.","source":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to search for the next symbol."}],"pos":[43906,44064],"yaml":true},{"content":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the next symbol in the requested direction, or `null` if the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> borders the start or end of content.","nodes":[{"pos":[0,226],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> to the next symbol in the requested direction, or <ph id=\"ph2\">`null`</ph> if the current <ph id=\"ph3\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> borders the start or end of content.","source":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the next symbol in the requested direction, or `null` if the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> borders the start or end of content."}],"pos":[44144,44371],"yaml":true},{"content":"Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the next insertion position in the specified logical direction.","nodes":[{"pos":[0,134],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> to the next insertion position in the specified logical direction.","source":"Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the next insertion position in the specified logical direction."}],"pos":[45636,45771],"yaml":true},{"content":"An *insertion position* is a position where new content may be added without breaking any semantic rules for the associated content.  In practice, an insertion position is anywhere in content where a caret may be positioned.  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).","nodes":[{"pos":[0,523],"content":"An *insertion position* is a position where new content may be added without breaking any semantic rules for the associated content.  In practice, an insertion position is anywhere in content where a caret may be positioned.  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).","nodes":[{"content":"An <bpt id=\"p1\">*</bpt>insertion position<ept id=\"p1\">*</ept> is a position where new content may be added without breaking any semantic rules for the associated content.","pos":[0,132],"source":"An *insertion position* is a position where new content may be added without breaking any semantic rules for the associated content."},{"content":"In practice, an insertion position is anywhere in content where a caret may be positioned.","pos":[134,224]},{"content":"An example of a valid <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> position that is not an insertion position is the position between two adjacent <ph id=\"ph2\">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).","pos":[226,523],"source":"  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph)."}]}],"pos":[45782,46306],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to search for the next insertion position.","nodes":[{"pos":[0,169],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.LogicalDirection\"&gt;&lt;/xref&gt;</ph> values that specifies the logical direction in which to search for the next insertion position.","source":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to search for the next insertion position."}],"pos":[47360,47530],"yaml":true},{"content":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> that identifies the next insertion position in the requested direction, or `null` if no next insertion position can be found.","nodes":[{"pos":[0,185],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> that identifies the next insertion position in the requested direction, or <ph id=\"ph2\">`null`</ph> if no next insertion position can be found.","source":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> that identifies the next insertion position in the requested direction, or `null` if no next insertion position can be found."}],"pos":[47610,47796],"yaml":true},{"content":"Returns the count of symbols between the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and a second specified <xref href=\"System.Windows.Documents.TextPointer\"></xref>.","nodes":[{"pos":[0,188],"content":"Returns the count of symbols between the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> and a second specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the count of symbols between the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and a second specified <xref href=\"System.Windows.Documents.TextPointer\"></xref>."}],"pos":[49025,49214],"yaml":true},{"content":"Any of the following is considered to be a symbol:  \n  \n-   An opening or closing tag for a <xref:System.Windows.Documents.TextElement> element.  \n  \n-   A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.  \n  \n-   A 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element.","nodes":[{"pos":[0,50],"content":"Any of the following is considered to be a symbol:","nodes":[{"content":"Any of the following is considered to be a symbol:","pos":[0,50]}]},{"pos":[60,144],"content":"An opening or closing tag for a <xref:System.Windows.Documents.TextElement> element.","nodes":[{"content":"An opening or closing tag for a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> element.","pos":[0,84],"source":"An opening or closing tag for a <xref:System.Windows.Documents.TextElement> element."}]},{"pos":[154,517],"content":"A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.","nodes":[{"content":"A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.","pos":[0,363],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> element contained in an <ph id=\"ph2\">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>.","pos":[0,160],"source":"A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>."},{"content":"Note that such a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> is always counted as exactly one symbol; any additional content or elements contained by the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> are not counted as symbols.","pos":[162,363],"source":"  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols."}]}]},{"pos":[527,673],"content":"A 16-bit <ph id=\"ph1\">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> character inside of a text <ph id=\"ph2\">&lt;xref:System.Windows.Documents.Run&gt;</ph> element.","source":"A 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element."}],"pos":[49225,49907],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> that specifies a position to find the distance (in symbols) to.","nodes":[{"pos":[0,123],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> that specifies a position to find the distance (in symbols) to.","source":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> that specifies a position to find the distance (in symbols) to."}],"pos":[51032,51156],"yaml":true},{"content":"The relative number of symbols between the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and <code>position</code>.  A negative value indicates that the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> follows the position specified by <code>position</code>, 0 indicates that the positions are equal, and a positive value indicates that the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> precedes the position specified by <code>position</code>.","nodes":[{"pos":[0,501],"content":"The relative number of symbols between the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and <code>position</code>.  A negative value indicates that the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> follows the position specified by <code>position</code>, 0 indicates that the positions are equal, and a positive value indicates that the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> precedes the position specified by <code>position</code>.","nodes":[{"content":"The relative number of symbols between the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> and <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,135],"source":"The relative number of symbols between the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and <code>position</code>."},{"content":"A negative value indicates that the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> follows the position specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">position</ph><ept id=\"p1\">&lt;/code&gt;</ept>, 0 indicates that the positions are equal, and a positive value indicates that the current <ph id=\"ph3\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> precedes the position specified by <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph4\">position</ph><ept id=\"p2\">&lt;/code&gt;</ept>.","pos":[137,501],"source":"  A negative value indicates that the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> follows the position specified by <code>position</code>, 0 indicates that the positions are equal, and a positive value indicates that the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> precedes the position specified by <code>position</code>."}]}],"pos":[51212,51714],"yaml":true},{"content":"<code>position</code> specifies a position outside of the text container associated with the current position.","nodes":[{"pos":[0,110],"content":"<ph id=\"ph1\">&lt;code&gt;position&lt;/code&gt;</ph> specifies a position outside of the text container associated with the current position.","source":"<code>position</code> specifies a position outside of the text container associated with the current position."}],"pos":[51892,52003],"yaml":true},{"content":"Returns a category indicator for the content adjacent to the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> in the specified logical direction.","nodes":[{"pos":[0,162],"content":"Returns a category indicator for the content adjacent to the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> in the specified logical direction.","source":"Returns a category indicator for the content adjacent to the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> in the specified logical direction."}],"pos":[53158,53321],"yaml":true},{"content":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to determine the category for adjacent content.","nodes":[{"pos":[0,174],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.LogicalDirection\"&gt;&lt;/xref&gt;</ph> values that specifies the logical direction in which to determine the category for adjacent content.","source":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to determine the category for adjacent content."}],"pos":[54417,54592],"yaml":true},{"content":"One of the <xref href=\"System.Windows.Documents.TextPointerContext\"></xref> values that indicates the category for adjacent content in the specified logical direction.","nodes":[{"pos":[0,167],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointerContext\"&gt;&lt;/xref&gt;</ph> values that indicates the category for adjacent content in the specified logical direction.","source":"One of the <xref href=\"System.Windows.Documents.TextPointerContext\"></xref> values that indicates the category for adjacent content in the specified logical direction."}],"pos":[54679,54847],"yaml":true},{"content":"Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the position indicated by the specified offset, in symbols, from the beginning of the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and in the specified direction.","nodes":[{"pos":[0,254],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> to the position indicated by the specified offset, in symbols, from the beginning of the current <ph id=\"ph2\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> and in the specified direction.","source":"Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the position indicated by the specified offset, in symbols, from the beginning of the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and in the specified direction."}],"pos":[56159,56414],"yaml":true},{"content":"Any of the following is considered to be a symbol:  \n  \n-   An opening or closing tag for the <xref:System.Windows.Documents.TextElement> element.  \n  \n-   A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.  \n  \n-   A 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element.","nodes":[{"pos":[0,50],"content":"Any of the following is considered to be a symbol:","nodes":[{"content":"Any of the following is considered to be a symbol:","pos":[0,50]}]},{"pos":[60,146],"content":"An opening or closing tag for the <xref:System.Windows.Documents.TextElement> element.","nodes":[{"content":"An opening or closing tag for the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> element.","pos":[0,86],"source":"An opening or closing tag for the <xref:System.Windows.Documents.TextElement> element."}]},{"pos":[156,519],"content":"A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.","nodes":[{"content":"A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.","pos":[0,363],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> element contained in an <ph id=\"ph2\">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>.","pos":[0,160],"source":"A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>."},{"content":"Note that such a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> is always counted as exactly one symbol; any additional content or elements contained by the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> are not counted as symbols.","pos":[162,363],"source":"  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols."}]}]},{"pos":[529,675],"content":"A 16-bit <ph id=\"ph1\">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> character inside of a text <ph id=\"ph2\">&lt;xref:System.Windows.Documents.Run&gt;</ph> element.","source":"A 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element."}],"pos":[56425,57109],"yaml":true,"extradata":"MT"},{"content":"An offset, in symbols, for which to calculate and return the position.  If the offset is negative, the returned <xref href=\"System.Windows.Documents.TextPointer\"></xref> precedes the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>; otherwise, it follows.","nodes":[{"pos":[0,272],"content":"An offset, in symbols, for which to calculate and return the position.  If the offset is negative, the returned <xref href=\"System.Windows.Documents.TextPointer\"></xref> precedes the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>; otherwise, it follows.","nodes":[{"content":"An offset, in symbols, for which to calculate and return the position.","pos":[0,70]},{"content":"If the offset is negative, the returned <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> precedes the current <ph id=\"ph2\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph>; otherwise, it follows.","pos":[72,272],"source":"  If the offset is negative, the returned <xref href=\"System.Windows.Documents.TextPointer\"></xref> precedes the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>; otherwise, it follows."}]}],"pos":[57340,57613],"yaml":true},{"content":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction of the returned <xref href=\"System.Windows.Documents.TextPointer\"></xref>.","nodes":[{"pos":[0,192],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.LogicalDirection\"&gt;&lt;/xref&gt;</ph> values that specifies the logical direction of the returned <ph id=\"ph2\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph>.","source":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction of the returned <xref href=\"System.Windows.Documents.TextPointer\"></xref>."}],"pos":[57706,57899],"yaml":true},{"content":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the position indicated by the specified offset, or `null` if the offset extends past the end of the content.","nodes":[{"pos":[0,171],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> to the position indicated by the specified offset, or <ph id=\"ph2\">`null`</ph> if the offset extends past the end of the content.","source":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the position indicated by the specified offset, or `null` if the offset extends past the end of the content."}],"pos":[57979,58151],"yaml":true},{"content":"Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the position indicated by the specified offset, in symbols, from the beginning of the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>.","nodes":[{"pos":[0,223],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> to the position indicated by the specified offset, in symbols, from the beginning of the current <ph id=\"ph2\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph>.","source":"Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the position indicated by the specified offset, in symbols, from the beginning of the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>."}],"pos":[59263,59487],"yaml":true},{"content":"Any of the following is considered to be a symbol:  \n  \n-   An opening or closing tag for the <xref:System.Windows.Documents.TextElement> element.  \n  \n-   A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.  \n  \n-   A 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element.","nodes":[{"pos":[0,50],"content":"Any of the following is considered to be a symbol:","nodes":[{"content":"Any of the following is considered to be a symbol:","pos":[0,50]}]},{"pos":[60,146],"content":"An opening or closing tag for the <xref:System.Windows.Documents.TextElement> element.","nodes":[{"content":"An opening or closing tag for the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> element.","pos":[0,86],"source":"An opening or closing tag for the <xref:System.Windows.Documents.TextElement> element."}]},{"pos":[156,519],"content":"A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.","nodes":[{"content":"A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.","pos":[0,363],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> element contained in an <ph id=\"ph2\">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>.","pos":[0,160],"source":"A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>."},{"content":"Note that such a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> is always counted as exactly one symbol; any additional content or elements contained by the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> are not counted as symbols.","pos":[162,363],"source":"  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols."}]}]},{"pos":[529,675],"content":"A 16-bit <ph id=\"ph1\">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> character inside of a text <ph id=\"ph2\">&lt;xref:System.Windows.Documents.Run&gt;</ph> element.","source":"A 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element."}],"pos":[59498,60182],"yaml":true,"extradata":"MT"},{"content":"An offset, in symbols, for which to calculate and return the position.  If the offset is negative, the position is calculated in the logical direction opposite of that indicated by the <xref href=\"System.Windows.Documents.TextPointer.LogicalDirection\"></xref> property.","nodes":[{"pos":[0,269],"content":"An offset, in symbols, for which to calculate and return the position.  If the offset is negative, the position is calculated in the logical direction opposite of that indicated by the <xref href=\"System.Windows.Documents.TextPointer.LogicalDirection\"></xref> property.","nodes":[{"content":"An offset, in symbols, for which to calculate and return the position.","pos":[0,70]},{"content":"If the offset is negative, the position is calculated in the logical direction opposite of that indicated by the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer.LogicalDirection\"&gt;&lt;/xref&gt;</ph> property.","pos":[72,269],"source":"  If the offset is negative, the position is calculated in the logical direction opposite of that indicated by the <xref href=\"System.Windows.Documents.TextPointer.LogicalDirection\"></xref> property."}]}],"pos":[61163,61433],"yaml":true},{"content":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the position indicated by the specified offset, or `null` if no corresponding position can be found.","nodes":[{"pos":[0,163],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> to the position indicated by the specified offset, or <ph id=\"ph2\">`null`</ph> if no corresponding position can be found.","source":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the position indicated by the specified offset, or `null` if no corresponding position can be found."}],"pos":[61513,61677],"yaml":true},{"content":"Returns a string containing any text adjacent to the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> in the specified logical direction.","nodes":[{"pos":[0,154],"content":"Returns a string containing any text adjacent to the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> in the specified logical direction.","source":"Returns a string containing any text adjacent to the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> in the specified logical direction."}],"pos":[62889,63044],"yaml":true},{"content":"This method returns only uninterrupted runs of text.  Nothing is returned if any symbol type other than <xref:System.Windows.Documents.TextPointerContext.Text> is adjacent to the current <xref:System.Windows.Documents.TextPointer> in the specified direction.  Similarly, text is returned only up to the next non-text symbol.","nodes":[{"pos":[0,324],"content":"This method returns only uninterrupted runs of text.  Nothing is returned if any symbol type other than <xref:System.Windows.Documents.TextPointerContext.Text> is adjacent to the current <xref:System.Windows.Documents.TextPointer> in the specified direction.  Similarly, text is returned only up to the next non-text symbol.","nodes":[{"content":"This method returns only uninterrupted runs of text.  Nothing is returned if any symbol type other than <xref:System.Windows.Documents.TextPointerContext.Text> is adjacent to the current <xref:System.Windows.Documents.TextPointer> in the specified direction.  Similarly, text is returned only up to the next non-text symbol.","pos":[0,324],"nodes":[{"content":"This method returns only uninterrupted runs of text.","pos":[0,52]},{"content":"Nothing is returned if any symbol type other than <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointerContext.Text&gt;</ph> is adjacent to the current <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> in the specified direction.","pos":[54,258],"source":"  Nothing is returned if any symbol type other than <xref:System.Windows.Documents.TextPointerContext.Text> is adjacent to the current <xref:System.Windows.Documents.TextPointer> in the specified direction."},{"content":"Similarly, text is returned only up to the next non-text symbol.","pos":[260,324]}]}]}],"pos":[63055,63380],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to find and return any adjacent text.","nodes":[{"pos":[0,164],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.LogicalDirection\"&gt;&lt;/xref&gt;</ph> values that specifies the logical direction in which to find and return any adjacent text.","source":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to find and return any adjacent text."}],"pos":[64612,64777],"yaml":true},{"content":"A string containing any adjacent text in the specified logical direction, or <xref href=\"System.String.Empty\"></xref> if no adjacent text can be found.","nodes":[{"pos":[0,151],"content":"A string containing any adjacent text in the specified logical direction, or <ph id=\"ph1\">&lt;xref href=\"System.String.Empty\"&gt;&lt;/xref&gt;</ph> if no adjacent text can be found.","source":"A string containing any adjacent text in the specified logical direction, or <xref href=\"System.String.Empty\"></xref> if no adjacent text can be found."}],"pos":[64834,64986],"yaml":true},{"content":"Copies the specified maximum number of characters from any adjacent text in the specified direction into a caller-supplied character array.","nodes":[{"pos":[0,139],"content":"Copies the specified maximum number of characters from any adjacent text in the specified direction into a caller-supplied character array.","nodes":[{"content":"Copies the specified maximum number of characters from any adjacent text in the specified direction into a caller-supplied character array.","pos":[0,139]}]}],"pos":[66377,66517],"yaml":true},{"content":"This method returns only uninterrupted runs of text.  Nothing is returned if any symbol type other than <xref:System.Windows.Documents.TextPointerContext.Text> is adjacent to the current <xref:System.Windows.Documents.TextPointer> in the specified direction.  Similarly, text is returned only up to the next non-text symbol.","nodes":[{"pos":[0,324],"content":"This method returns only uninterrupted runs of text.  Nothing is returned if any symbol type other than <xref:System.Windows.Documents.TextPointerContext.Text> is adjacent to the current <xref:System.Windows.Documents.TextPointer> in the specified direction.  Similarly, text is returned only up to the next non-text symbol.","nodes":[{"content":"This method returns only uninterrupted runs of text.  Nothing is returned if any symbol type other than <xref:System.Windows.Documents.TextPointerContext.Text> is adjacent to the current <xref:System.Windows.Documents.TextPointer> in the specified direction.  Similarly, text is returned only up to the next non-text symbol.","pos":[0,324],"nodes":[{"content":"This method returns only uninterrupted runs of text.","pos":[0,52]},{"content":"Nothing is returned if any symbol type other than <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointerContext.Text&gt;</ph> is adjacent to the current <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> in the specified direction.","pos":[54,258],"source":"  Nothing is returned if any symbol type other than <xref:System.Windows.Documents.TextPointerContext.Text> is adjacent to the current <xref:System.Windows.Documents.TextPointer> in the specified direction."},{"content":"Similarly, text is returned only up to the next non-text symbol.","pos":[260,324]}]}]}],"pos":[66528,66853],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to find and copy any adjacent text.","nodes":[{"pos":[0,162],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.LogicalDirection\"&gt;&lt;/xref&gt;</ph> values that specifies the logical direction in which to find and copy any adjacent text.","source":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to find and copy any adjacent text."}],"pos":[67110,67273],"yaml":true},{"content":"A buffer into which any text is copied.","nodes":[{"pos":[0,39],"content":"A buffer into which any text is copied.","nodes":[{"content":"A buffer into which any text is copied.","pos":[0,39]}]}],"pos":[67339,67379],"yaml":true},{"content":"An index into <code>textBuffer</code> at which to begin writing copied text.","nodes":[{"pos":[0,76],"content":"An index into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">textBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept> at which to begin writing copied text.","source":"An index into <code>textBuffer</code> at which to begin writing copied text."}],"pos":[67444,67521],"yaml":true},{"content":"The maximum number of characters to copy.","nodes":[{"pos":[0,41],"content":"The maximum number of characters to copy.","nodes":[{"content":"The maximum number of characters to copy.","pos":[0,41]}]}],"pos":[67581,67623],"yaml":true},{"content":"The number of characters actually copied into <code>textBuffer</code>.","nodes":[{"pos":[0,70],"content":"The number of characters actually copied into <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">textBuffer</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"The number of characters actually copied into <code>textBuffer</code>."}],"pos":[67679,67750],"yaml":true},{"content":"<code>startIndex</code> is less than 0 or greater than the <xref href=\"System.Array.Length\"></xref> property of <code>textBuffer</code>.  \n  \n -or-  \n  \n <code>count</code> is less than 0 or greater than the remaining space in <code>textBuffer</code> (<code>textBuffer</code>.<xref href=\"System.Array.Length\"></xref> minus <code>startIndex</code>).","nodes":[{"pos":[0,136],"content":"<ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph> is less than 0 or greater than the <ph id=\"ph2\">&lt;xref href=\"System.Array.Length\"&gt;&lt;/xref&gt;</ph> property of <ph id=\"ph3\">&lt;code&gt;textBuffer&lt;/code&gt;</ph>.","source":"<code>startIndex</code> is less than 0 or greater than the <xref href=\"System.Array.Length\"></xref> property of <code>textBuffer</code>."},{"pos":[143,147],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[154,348],"content":"<code>count</code> is less than 0 or greater than the remaining space in <code>textBuffer</code> (<code>textBuffer</code>.<xref href=\"System.Array.Length\"></xref> minus <code>startIndex</code>).","nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;count&lt;/code&gt;</ph> is less than 0 or greater than the remaining space in <ph id=\"ph2\">&lt;code&gt;textBuffer&lt;/code&gt;</ph> (<ph id=\"ph3\">&lt;code&gt;textBuffer&lt;/code&gt;</ph>.<ph id=\"ph4\">&lt;xref href=\"System.Array.Length\"&gt;&lt;/xref&gt;</ph>","pos":[0,162],"source":"<code>count</code> is less than 0 or greater than the remaining space in <code>textBuffer</code> (<code>textBuffer</code>.<xref href=\"System.Array.Length\"></xref>"},{"content":"minus <ph id=\"ph1\">&lt;code&gt;startIndex&lt;/code&gt;</ph>).","pos":[163,194],"source":" minus <code>startIndex</code>)."}]}],"pos":[67921,68280],"yaml":true},{"content":"Returns the number of Unicode characters between the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and the next non-text symbol, in the specified logical direction.","nodes":[{"pos":[0,184],"content":"Returns the number of Unicode characters between the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> and the next non-text symbol, in the specified logical direction.","source":"Returns the number of Unicode characters between the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and the next non-text symbol, in the specified logical direction."}],"pos":[69429,69614],"yaml":true},{"content":"Any of the following is considered to be a symbol:  \n  \n-   An opening or closing tag for the <xref:System.Windows.Documents.TextElement> element.  \n  \n-   A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.  \n  \n-   A 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element.","nodes":[{"pos":[0,50],"content":"Any of the following is considered to be a symbol:","nodes":[{"content":"Any of the following is considered to be a symbol:","pos":[0,50]}]},{"pos":[60,146],"content":"An opening or closing tag for the <xref:System.Windows.Documents.TextElement> element.","nodes":[{"content":"An opening or closing tag for the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextElement&gt;</ph> element.","pos":[0,86],"source":"An opening or closing tag for the <xref:System.Windows.Documents.TextElement> element."}]},{"pos":[156,519],"content":"A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.","nodes":[{"content":"A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.","pos":[0,363],"nodes":[{"content":"A <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> element contained in an <ph id=\"ph2\">&lt;xref:System.Windows.Documents.InlineUIContainer&gt;</ph> or <ph id=\"ph3\">&lt;xref:System.Windows.Documents.BlockUIContainer&gt;</ph>.","pos":[0,160],"source":"A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>."},{"content":"Note that such a <ph id=\"ph1\">&lt;xref:System.Windows.UIElement&gt;</ph> is always counted as exactly one symbol; any additional content or elements contained by the <ph id=\"ph2\">&lt;xref:System.Windows.UIElement&gt;</ph> are not counted as symbols.","pos":[162,363],"source":"  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols."}]}]},{"pos":[529,675],"content":"A 16-bit <ph id=\"ph1\">[!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]</ph> character inside of a text <ph id=\"ph2\">&lt;xref:System.Windows.Documents.Run&gt;</ph> element.","source":"A 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element."}],"pos":[69625,70309],"yaml":true,"extradata":"MT"},{"content":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to count the number of characters.","nodes":[{"pos":[0,161],"content":"One of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.LogicalDirection\"&gt;&lt;/xref&gt;</ph> values that specifies the logical direction in which to count the number of characters.","source":"One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to count the number of characters."}],"pos":[70524,70686],"yaml":true},{"content":"The number of Unicode characters between the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and the next non-text symbol.  This number may be 0 if there is no adjacent text.","nodes":[{"pos":[0,192],"content":"The number of Unicode characters between the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and the next non-text symbol.  This number may be 0 if there is no adjacent text.","nodes":[{"content":"The number of Unicode characters between the current <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> and the next non-text symbol.","pos":[0,140],"source":"The number of Unicode characters between the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and the next non-text symbol."},{"content":"This number may be 0 if there is no adjacent text.","pos":[142,192]}]}],"pos":[70742,70935],"yaml":true},{"content":"Gets a value that indicates whether the text container associated with the current position has a valid (up-to-date) layout.","nodes":[{"pos":[0,124],"content":"Gets a value that indicates whether the text container associated with the current position has a valid (up-to-date) layout.","nodes":[{"content":"Gets a value that indicates whether the text container associated with the current position has a valid (up-to-date) layout.","pos":[0,124]}]}],"pos":[71975,72100],"yaml":true},{"content":"When necessary, operations that depend on a valid layout (such as the <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A> method, <xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A> method, and <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> property) attempt to automatically regenerate a valid layout before proceeding with the operation.  Regenerating a layout can be a relatively expensive operation.  Use this property to check for a valid layout before performing operations that may regenerate the layout.  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).","nodes":[{"pos":[0,639],"content":"When necessary, operations that depend on a valid layout (such as the <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A> method, <xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A> method, and <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> property) attempt to automatically regenerate a valid layout before proceeding with the operation.  Regenerating a layout can be a relatively expensive operation.  Use this property to check for a valid layout before performing operations that may regenerate the layout.  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).","nodes":[{"content":"When necessary, operations that depend on a valid layout (such as the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A&gt;</ph> method, <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A&gt;</ph> method, and <ph id=\"ph3\">&lt;xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A&gt;</ph> property) attempt to automatically regenerate a valid layout before proceeding with the operation.","pos":[0,389],"source":"When necessary, operations that depend on a valid layout (such as the <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A> method, <xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A> method, and <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> property) attempt to automatically regenerate a valid layout before proceeding with the operation."},{"content":"Regenerating a layout can be a relatively expensive operation.","pos":[391,453]},{"content":"Use this property to check for a valid layout before performing operations that may regenerate the layout.","pos":[455,561]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Layout<ept id=\"p1\">](~/docs/framework/wpf/advanced/layout.md)</ept>.","pos":[563,639],"source":"  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md)."}]}],"pos":[72111,72751],"yaml":true,"extradata":"MT"},{"content":"`true` if the layout is current and valid; otherwise, `false`.","nodes":[{"pos":[0,62],"content":"<ph id=\"ph1\">`true`</ph> if the layout is current and valid; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the layout is current and valid; otherwise, `false`."}],"pos":[72868,72933],"yaml":true},{"content":"Inserts a line break at the current position.","nodes":[{"pos":[0,45],"content":"Inserts a line break at the current position.","nodes":[{"content":"Inserts a line break at the current position.","pos":[0,45]}]}],"pos":[73981,74027],"yaml":true},{"content":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> positioned immediately after the <xref href=\"System.Windows.Documents.LineBreak\"></xref> element inserted by this method.","nodes":[{"pos":[0,181],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> positioned immediately after the <ph id=\"ph2\">&lt;xref href=\"System.Windows.Documents.LineBreak\"&gt;&lt;/xref&gt;</ph> element inserted by this method.","source":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> positioned immediately after the <xref href=\"System.Windows.Documents.LineBreak\"></xref> element inserted by this method."}],"pos":[74213,74395],"yaml":true},{"content":"Inserts a paragraph break at the current position.","nodes":[{"pos":[0,50],"content":"Inserts a paragraph break at the current position.","nodes":[{"content":"Inserts a paragraph break at the current position.","pos":[0,50]}]}],"pos":[75474,75525],"yaml":true},{"content":"If this method is called when the current position is inside of an existing <xref:System.Windows.Documents.Paragraph> element, the existing paragraph and any content it contains are split into two paragraphs at the current position.  If this method is called when the current position is not inside of an existing paragraph, a new, empty paragraph is inserted.  If this method is called at a position unsuitable for splitting or inserting a paragraph (for example, if the current position is inside of a <xref:System.Windows.Documents.Hyperlink> element), an exception is thrown.","nodes":[{"pos":[0,579],"content":"If this method is called when the current position is inside of an existing <xref:System.Windows.Documents.Paragraph> element, the existing paragraph and any content it contains are split into two paragraphs at the current position.  If this method is called when the current position is not inside of an existing paragraph, a new, empty paragraph is inserted.  If this method is called at a position unsuitable for splitting or inserting a paragraph (for example, if the current position is inside of a <xref:System.Windows.Documents.Hyperlink> element), an exception is thrown.","nodes":[{"content":"If this method is called when the current position is inside of an existing <xref:System.Windows.Documents.Paragraph> element, the existing paragraph and any content it contains are split into two paragraphs at the current position.  If this method is called when the current position is not inside of an existing paragraph, a new, empty paragraph is inserted.  If this method is called at a position unsuitable for splitting or inserting a paragraph (for example, if the current position is inside of a <xref:System.Windows.Documents.Hyperlink> element), an exception is thrown.","pos":[0,579],"nodes":[{"content":"If this method is called when the current position is inside of an existing <ph id=\"ph1\">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> element, the existing paragraph and any content it contains are split into two paragraphs at the current position.","pos":[0,232],"source":"If this method is called when the current position is inside of an existing <xref:System.Windows.Documents.Paragraph> element, the existing paragraph and any content it contains are split into two paragraphs at the current position."},{"content":"If this method is called when the current position is not inside of an existing paragraph, a new, empty paragraph is inserted.","pos":[234,360]},{"content":"If this method is called at a position unsuitable for splitting or inserting a paragraph (for example, if the current position is inside of a <ph id=\"ph1\">&lt;xref:System.Windows.Documents.Hyperlink&gt;</ph> element), an exception is thrown.","pos":[362,579],"source":"  If this method is called at a position unsuitable for splitting or inserting a paragraph (for example, if the current position is inside of a <xref:System.Windows.Documents.Hyperlink> element), an exception is thrown."}]}]}],"pos":[75536,76116],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the beginning (<xref href=\"System.Windows.Documents.TextElement.ContentStart\"></xref>) of the new paragraph.","nodes":[{"pos":[0,171],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> to the beginning (<ph id=\"ph2\">&lt;xref href=\"System.Windows.Documents.TextElement.ContentStart\"&gt;&lt;/xref&gt;</ph>) of the new paragraph.","source":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the beginning (<xref href=\"System.Windows.Documents.TextElement.ContentStart\"></xref>) of the new paragraph."}],"pos":[76307,76479],"yaml":true},{"content":"This method is called on a position that cannot be split to accommodate a new paragraph, such as in the scope of a <xref href=\"System.Windows.Documents.Hyperlink\"></xref> or <xref href=\"System.Windows.Documents.InlineUIContainer\"></xref>.","nodes":[{"pos":[0,238],"content":"This method is called on a position that cannot be split to accommodate a new paragraph, such as in the scope of a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.Hyperlink\"&gt;&lt;/xref&gt;</ph> or <ph id=\"ph2\">&lt;xref href=\"System.Windows.Documents.InlineUIContainer\"&gt;&lt;/xref&gt;</ph>.","source":"This method is called on a position that cannot be split to accommodate a new paragraph, such as in the scope of a <xref href=\"System.Windows.Documents.Hyperlink\"></xref> or <xref href=\"System.Windows.Documents.InlineUIContainer\"></xref>."}],"pos":[76674,76913],"yaml":true},{"content":"Inserts the specified text into the text <xref href=\"System.Windows.Documents.Run\"></xref> at the current position.","nodes":[{"pos":[0,115],"content":"Inserts the specified text into the text <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.Run\"&gt;&lt;/xref&gt;</ph> at the current position.","source":"Inserts the specified text into the text <xref href=\"System.Windows.Documents.Run\"></xref> at the current position."}],"pos":[77920,78036],"yaml":true},{"content":"If the <xref:System.Windows.Documents.TextPointer> is not scoped by a <xref:System.Windows.Documents.Run> element, a <xref:System.Windows.Documents.Run> is inserted along with the `textData`.","nodes":[{"pos":[0,191],"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> is not scoped by a <ph id=\"ph2\">&lt;xref:System.Windows.Documents.Run&gt;</ph> element, a <ph id=\"ph3\">&lt;xref:System.Windows.Documents.Run&gt;</ph> is inserted along with the <ph id=\"ph4\">`textData`</ph>.","source":"If the <xref:System.Windows.Documents.TextPointer> is not scoped by a <xref:System.Windows.Documents.Run> element, a <xref:System.Windows.Documents.Run> is inserted along with the `textData`."}],"pos":[78047,78239],"yaml":true,"extradata":"MT"},{"content":"The text to insert.","nodes":[{"pos":[0,19],"content":"The text to insert.","nodes":[{"content":"The text to insert.","pos":[0,19]}]}],"pos":[78389,78409],"yaml":true},{"content":"The current position is not within a <xref href=\"System.Windows.Documents.Run\"></xref> element.","nodes":[{"pos":[0,95],"content":"The current position is not within a <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.Run\"&gt;&lt;/xref&gt;</ph> element.","source":"The current position is not within a <xref href=\"System.Windows.Documents.Run\"></xref> element."}],"pos":[78599,78695],"yaml":true},{"content":"<code>textData</code> is `null`.","nodes":[{"pos":[0,32],"content":"<ph id=\"ph1\">&lt;code&gt;textData&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>textData</code> is `null`."}],"pos":[78797,78830],"yaml":true},{"content":"Gets a value that indicates whether the current position is an insertion position.","nodes":[{"pos":[0,82],"content":"Gets a value that indicates whether the current position is an insertion position.","nodes":[{"content":"Gets a value that indicates whether the current position is an insertion position.","pos":[0,82]}]}],"pos":[79806,79889],"yaml":true},{"content":"An insertion position is a position where new content may be added without breaking any semantic rules for the associated content.  In practice, an insertion position is anywhere in content where a caret may be positioned.  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).","nodes":[{"pos":[0,521],"content":"An insertion position is a position where new content may be added without breaking any semantic rules for the associated content.  In practice, an insertion position is anywhere in content where a caret may be positioned.  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).","nodes":[{"content":"An insertion position is a position where new content may be added without breaking any semantic rules for the associated content.  In practice, an insertion position is anywhere in content where a caret may be positioned.  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).","pos":[0,521],"nodes":[{"content":"An insertion position is a position where new content may be added without breaking any semantic rules for the associated content.","pos":[0,130]},{"content":"In practice, an insertion position is anywhere in content where a caret may be positioned.","pos":[132,222]},{"content":"An example of a valid <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> position that is not an insertion position is the position between two adjacent <ph id=\"ph2\">&lt;xref:System.Windows.Documents.Paragraph&gt;</ph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).","pos":[224,521],"source":"  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph)."}]}]}],"pos":[79900,80422],"yaml":true,"extradata":"MT"},{"content":"`true` if the current position is an insertion position; otherwise, `false`.","nodes":[{"pos":[0,76],"content":"<ph id=\"ph1\">`true`</ph> if the current position is an insertion position; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current position is an insertion position; otherwise, `false`."}],"pos":[80546,80625],"yaml":true},{"content":"Gets a value that indicates whether the current position is at the beginning of a line.","nodes":[{"pos":[0,87],"content":"Gets a value that indicates whether the current position is at the beginning of a line.","nodes":[{"content":"Gets a value that indicates whether the current position is at the beginning of a line.","pos":[0,87]}]}],"pos":[81712,81800],"yaml":true},{"content":"If the <xref:System.Windows.Documents.TextPointer> points to an ambiguous position, for example, between two lines, the line in the direction specified by the <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> property is selected as the relative starting line.  \n  \n The operation performed by this property depends on a valid layout.  When necessary, this method attempts to automatically regenerate a valid layout before proceeding with the operation.  Regenerating a layout can be a relatively expensive operation.  Use the <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> property to check for a valid layout before performing operations that may regenerate the layout.  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).","nodes":[{"pos":[0,274],"content":"If the <xref:System.Windows.Documents.TextPointer> points to an ambiguous position, for example, between two lines, the line in the direction specified by the <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> property is selected as the relative starting line.","nodes":[{"content":"If the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> points to an ambiguous position, for example, between two lines, the line in the direction specified by the <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer.LogicalDirection%2A&gt;</ph> property is selected as the relative starting line.","pos":[0,274],"source":"If the <xref:System.Windows.Documents.TextPointer> points to an ambiguous position, for example, between two lines, the line in the direction specified by the <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> property is selected as the relative starting line."}]},{"pos":[281,778],"content":"The operation performed by this property depends on a valid layout.  When necessary, this method attempts to automatically regenerate a valid layout before proceeding with the operation.  Regenerating a layout can be a relatively expensive operation.  Use the <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> property to check for a valid layout before performing operations that may regenerate the layout.  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).","nodes":[{"content":"The operation performed by this property depends on a valid layout.","pos":[0,67]},{"content":"When necessary, this method attempts to automatically regenerate a valid layout before proceeding with the operation.","pos":[69,186]},{"content":"Regenerating a layout can be a relatively expensive operation.","pos":[188,250]},{"content":"Use the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.HasValidLayout%2A&gt;</ph> property to check for a valid layout before performing operations that may regenerate the layout.","pos":[252,419],"source":"  Use the <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> property to check for a valid layout before performing operations that may regenerate the layout."},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Layout<ept id=\"p1\">](~/docs/framework/wpf/advanced/layout.md)</ept>.","pos":[421,497],"source":"  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md)."}]}],"pos":[81811,82594],"yaml":true,"extradata":"MT"},{"content":"`true` if the current position is at the beginning of a line; otherwise, `false`.","nodes":[{"pos":[0,81],"content":"<ph id=\"ph1\">`true`</ph> if the current position is at the beginning of a line; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the current position is at the beginning of a line; otherwise, `false`."}],"pos":[82718,82802],"yaml":true},{"content":"Indicates whether the specified position is in the same text container as the current position.","nodes":[{"pos":[0,95],"content":"Indicates whether the specified position is in the same text container as the current position.","nodes":[{"content":"Indicates whether the specified position is in the same text container as the current position.","pos":[0,95]}]}],"pos":[84010,84106],"yaml":true},{"content":"Most operations that involve multiple <xref:System.Windows.Documents.TextPointer> instances are only valid if the instances in question indicate positions that are in the same text container scope.  For example the <xref:System.Windows.Documents.TextPointer.CompareTo%2A> and <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> methods cannot be used with a <xref:System.Windows.Documents.TextPointer> to a position outside of the text container associated with the current position.  Use this method to verify that a specified <xref:System.Windows.Documents.TextPointer> is compatible with the current position for such operations.","nodes":[{"pos":[0,647],"content":"Most operations that involve multiple <xref:System.Windows.Documents.TextPointer> instances are only valid if the instances in question indicate positions that are in the same text container scope.  For example the <xref:System.Windows.Documents.TextPointer.CompareTo%2A> and <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> methods cannot be used with a <xref:System.Windows.Documents.TextPointer> to a position outside of the text container associated with the current position.  Use this method to verify that a specified <xref:System.Windows.Documents.TextPointer> is compatible with the current position for such operations.","nodes":[{"content":"Most operations that involve multiple <xref:System.Windows.Documents.TextPointer> instances are only valid if the instances in question indicate positions that are in the same text container scope.  For example the <xref:System.Windows.Documents.TextPointer.CompareTo%2A> and <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> methods cannot be used with a <xref:System.Windows.Documents.TextPointer> to a position outside of the text container associated with the current position.  Use this method to verify that a specified <xref:System.Windows.Documents.TextPointer> is compatible with the current position for such operations.","pos":[0,647],"nodes":[{"content":"Most operations that involve multiple <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> instances are only valid if the instances in question indicate positions that are in the same text container scope.","pos":[0,197],"source":"Most operations that involve multiple <xref:System.Windows.Documents.TextPointer> instances are only valid if the instances in question indicate positions that are in the same text container scope."},{"content":"For example the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer.CompareTo%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A&gt;</ph> methods cannot be used with a <ph id=\"ph3\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> to a position outside of the text container associated with the current position.","pos":[199,498],"source":"  For example the <xref:System.Windows.Documents.TextPointer.CompareTo%2A> and <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> methods cannot be used with a <xref:System.Windows.Documents.TextPointer> to a position outside of the text container associated with the current position."},{"content":"Use this method to verify that a specified <ph id=\"ph1\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> is compatible with the current position for such operations.","pos":[500,647],"source":"  Use this method to verify that a specified <xref:System.Windows.Documents.TextPointer> is compatible with the current position for such operations."}]}]}],"pos":[84117,84765],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> that specifies a position to compare to the current position.","nodes":[{"pos":[0,121],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.TextPointer\"&gt;&lt;/xref&gt;</ph> that specifies a position to compare to the current position.","source":"A <xref href=\"System.Windows.Documents.TextPointer\"></xref> that specifies a position to compare to the current position."}],"pos":[85800,85922],"yaml":true},{"content":"`true` if <code>textPosition</code> indicates a position that is in the same text container as the current position; otherwise, `false`.","nodes":[{"pos":[0,136],"content":"<ph id=\"ph1\">`true`</ph> if <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">textPosition</ph><ept id=\"p1\">&lt;/code&gt;</ept> indicates a position that is in the same text container as the current position; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if <code>textPosition</code> indicates a position that is in the same text container as the current position; otherwise, `false`."}],"pos":[85980,86119],"yaml":true},{"content":"<code>textPosition</code> is `null`.","nodes":[{"pos":[0,36],"content":"<ph id=\"ph1\">&lt;code&gt;textPosition&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>textPosition</code> is `null`."}],"pos":[86302,86339],"yaml":true},{"content":"Gets the logical direction associated with the current position which is used to disambiguate content associated with the current position.","nodes":[{"pos":[0,139],"content":"Gets the logical direction associated with the current position which is used to disambiguate content associated with the current position.","nodes":[{"content":"Gets the logical direction associated with the current position which is used to disambiguate content associated with the current position.","pos":[0,139]}]}],"pos":[87307,87447],"yaml":true},{"content":"As an example of how this property is used, the <xref:System.Windows.Documents.LogicalDirection> of the <xref:System.Windows.Documents.TextPointer> returned by a hit test method gives a hit that is between two characters of text. The logical direction specifies which of the two characters was actually hit—the left or the right.","nodes":[{"pos":[0,329],"content":"As an example of how this property is used, the <xref:System.Windows.Documents.LogicalDirection> of the <xref:System.Windows.Documents.TextPointer> returned by a hit test method gives a hit that is between two characters of text. The logical direction specifies which of the two characters was actually hit—the left or the right.","nodes":[{"content":"As an example of how this property is used, the <xref:System.Windows.Documents.LogicalDirection> of the <xref:System.Windows.Documents.TextPointer> returned by a hit test method gives a hit that is between two characters of text. The logical direction specifies which of the two characters was actually hit—the left or the right.","pos":[0,329],"nodes":[{"content":"As an example of how this property is used, the <ph id=\"ph1\">&lt;xref:System.Windows.Documents.LogicalDirection&gt;</ph> of the <ph id=\"ph2\">&lt;xref:System.Windows.Documents.TextPointer&gt;</ph> returned by a hit test method gives a hit that is between two characters of text.","pos":[0,229],"source":"As an example of how this property is used, the <xref:System.Windows.Documents.LogicalDirection> of the <xref:System.Windows.Documents.TextPointer> returned by a hit test method gives a hit that is between two characters of text."},{"content":"The logical direction specifies which of the two characters was actually hit—the left or the right.","pos":[230,329]}]}]}],"pos":[87458,87788],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> value that is associated with the current position.","nodes":[{"pos":[0,118],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.LogicalDirection\"&gt;&lt;/xref&gt;</ph> value that is associated with the current position.","source":"The <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> value that is associated with the current position."}],"pos":[87971,88090],"yaml":true},{"content":"Gets the paragraph that scopes the current position, if any.","nodes":[{"pos":[0,60],"content":"Gets the paragraph that scopes the current position, if any.","nodes":[{"content":"Gets the paragraph that scopes the current position, if any.","pos":[0,60]}]}],"pos":[89078,89139],"yaml":true},{"content":"The <xref href=\"System.Windows.Documents.Paragraph\"></xref> that scopes the current position, or `null` if no such paragraph exists.","nodes":[{"pos":[0,132],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Windows.Documents.Paragraph\"&gt;&lt;/xref&gt;</ph> that scopes the current position, or <ph id=\"ph2\">`null`</ph> if no such paragraph exists.","source":"The <xref href=\"System.Windows.Documents.Paragraph\"></xref> that scopes the current position, or `null` if no such paragraph exists."}],"pos":[89301,89434],"yaml":true},{"content":"Gets the logical parent that scopes the current position.","nodes":[{"pos":[0,57],"content":"Gets the logical parent that scopes the current position.","nodes":[{"content":"Gets the logical parent that scopes the current position.","pos":[0,57]}]}],"pos":[90397,90455],"yaml":true},{"content":"The logical parent that scopes the current position.","nodes":[{"pos":[0,52],"content":"The logical parent that scopes the current position.","nodes":[{"content":"The logical parent that scopes the current position.","pos":[0,52]}]}],"pos":[90608,90661],"yaml":true},{"content":"This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.","nodes":[{"pos":[0,173],"content":"This type or member supports the <ph id=\"ph1\">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]</ph> infrastructure and is not intended to be used directly from your code.","source":"This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code."}],"pos":[91659,91833],"yaml":true},{"content":"The string that represents the object.","nodes":[{"pos":[0,38],"content":"The string that represents the object.","nodes":[{"content":"The string that represents the object.","pos":[0,38]}]}],"pos":[91968,92007],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.Documents.TextPointer\n  commentId: T:System.Windows.Documents.TextPointer\n  id: TextPointer\n  children:\n  - System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)\n  - System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)\n  - System.Windows.Documents.TextPointer.DocumentEnd\n  - System.Windows.Documents.TextPointer.DocumentStart\n  - System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)\n  - System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)\n  - System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)\n  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)\n  - System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)\n  - System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)\n  - System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)\n  - System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)\n  - System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)\n  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)\n  - System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)\n  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)\n  - System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)\n  - System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)\n  - System.Windows.Documents.TextPointer.HasValidLayout\n  - System.Windows.Documents.TextPointer.InsertLineBreak\n  - System.Windows.Documents.TextPointer.InsertParagraphBreak\n  - System.Windows.Documents.TextPointer.InsertTextInRun(System.String)\n  - System.Windows.Documents.TextPointer.IsAtInsertionPosition\n  - System.Windows.Documents.TextPointer.IsAtLineStartPosition\n  - System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)\n  - System.Windows.Documents.TextPointer.LogicalDirection\n  - System.Windows.Documents.TextPointer.Paragraph\n  - System.Windows.Documents.TextPointer.Parent\n  - System.Windows.Documents.TextPointer.ToString\n  langs:\n  - csharp\n  name: TextPointer\n  nameWithType: TextPointer\n  fullName: System.Windows.Documents.TextPointer\n  type: Class\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Represents a position within a <xref href=\"System.Windows.Documents.FlowDocument\"></xref> or <xref href=\"System.Windows.Controls.TextBlock\"></xref>.\n  remarks: \"The <xref:System.Windows.Documents.TextPointer> class introduces the following terminology:  \\n  \\n-   Position - Inherently, a <xref:System.Windows.Documents.TextPointer> always points to a *position* in content.  Such positions either fall between characters in the content, or between flow content element tags that define structure for the content.  \\n  \\n-   Current Position - Because a <xref:System.Windows.Documents.TextPointer> always indicates a position, and because many of the operations that can be performed through a <xref:System.Windows.Documents.TextPointer> are relative to the position currently pointed to by the <xref:System.Windows.Documents.TextPointer>, it makes sense to simply refer to the position indicated by a <xref:System.Windows.Documents.TextPointer> as the *current position*.  \\n  \\n-   Insertion Position - An *insertion position* is a position where new content may be added without breaking any semantic rules for the associated content.  In practice, an insertion position is anywhere in content where a caret may be positioned.  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).  \\n  \\n-   Symbol - For the purposes of <xref:System.Windows.Documents.TextPointer> operations that involve symbols, any of the following is considered to be a *symbol*:  \\n  \\n    -   An opening or closing tag for a <xref:System.Windows.Documents.TextElement> element.  \\n  \\n    -   A <xref:System.Windows.UIElement> element contained within an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.  \\n  \\n    -   Each 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element.  \\n  \\n-   Text Container - A *text container* is the element that forms the ultimate border for the flow content at hand; the position indicated by a <xref:System.Windows.Documents.TextPointer> always falls within a text container.  Currently, a text container must be either a <xref:System.Windows.Documents.FlowDocument> or a <xref:System.Windows.Controls.TextBlock>.  Generally speaking, operations between <xref:System.Windows.Documents.TextPointer> instances in different text containers are not supported.  \\n  \\n-   Document - The content in a text container is referred to as a *document*, as in the <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A> method and the <xref:System.Windows.Documents.TextPointer.DocumentStart%2A> and <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> properties.  \\n  \\n The <xref:System.Windows.Documents.TextPointer> class is intended to facilitate traversal and manipulation of content that is represented by [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] flow content elements; in general, such elements derive from <xref:System.Windows.Documents.TextElement>.  Some of the operations that <xref:System.Windows.Documents.TextPointer> facilitates include the following:  \\n  \\n-   Perform an ordinal comparison of the current position with a second specified position.  See the <xref:System.Windows.Documents.TextPointer.CompareTo%2A> method.  \\n  \\n-   Determine the type of content adjacent to the current position in a specified direction.  See the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method and <xref:System.Windows.Documents.TextPointerContext> enumeration.  \\n  \\n-   Get the <xref:System.Windows.Documents.TextElement> that scopes or is adjacent to the current position.  See <xref:System.Windows.Documents.Paragraph> and the <xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A> method.  \\n  \\n-   Get the text container that scopes the current document.  See the <xref:System.Windows.Documents.TextPointer.Parent%2A> property.  \\n  \\n-   Get a specified number of characters preceding or following the current position.  See the <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A> method.  \\n  \\n-   Insert a string of characters at the current position.  See the <xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A> method.  \\n  \\n-   Find line boundaries in content.  See the <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A> method and <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> property.  \\n  \\n-   Translate between <xref:System.Windows.Documents.TextPointer> positions and symbol offsets into content.  See the <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> and <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> methods.  \\n  \\n-   Perform visual hit testing by translating between a <xref:System.Windows.Documents.TextPointer> position and a <xref:System.Windows.Point> representing relative coordinates.  \\n  \\n-   Find a nearby insertion position, or check whether the current position is an insertion position.  See the <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> and <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> methods and the <xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A> property.  \\n  \\n The position and <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> indicated by a <xref:System.Windows.Documents.TextPointer> object are immutable.  When content is edited or modified, the position indicated by a <xref:System.Windows.Documents.TextPointer> does not change relative to the surrounding text; rather the offset of that position from the beginning of content is adjusted correspondingly to reflect the new relative position in content.  For example, a <xref:System.Windows.Documents.TextPointer> that indicates a position at the beginning of a given paragraph continues to point to the beginning of that paragraph even when content is inserted or deleted before or after the paragraph.  \\n  \\n The <xref:System.Windows.Documents.TextPointer> class does not provide any public constructors.  An instance of <xref:System.Windows.Documents.TextPointer> is created by using properties or methods of other objects (including other <xref:System.Windows.Documents.TextPointer> objects). The following list provides a few examples of methods and properties that create and return a <xref:System.Windows.Documents.TextPointer>.  This list is not exhaustive:  \\n  \\n-   From a <xref:System.Windows.Documents.TextRange>: <xref:System.Windows.Documents.TextRange.Start%2A> and <xref:System.Windows.Documents.TextRange.End%2A>.  \\n  \\n-   From a <xref:System.Windows.Documents.TextElement>:  <xref:System.Windows.Documents.TextElement.ContentStart%2A>, <xref:System.Windows.Documents.TextElement.ContentEnd%2A>, <xref:System.Windows.Documents.TextElement.ElementStart%2A>, and <xref:System.Windows.Documents.TextElement.ElementEnd%2A>.  \\n  \\n-   From a <xref:System.Windows.Controls.TextBlock> (text container): <xref:System.Windows.Controls.TextBlock.ContentStart%2A>, <xref:System.Windows.Controls.TextBlock.ContentEnd%2A>, and <xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A>.  \\n  \\n-   From a <xref:System.Windows.Documents.FlowDocument> (text container): <xref:System.Windows.Documents.FlowDocument.ContentStart%2A>, and <xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>  \\n  \\n-   From an existing <xref:System.Windows.Documents.TextPointer>: <xref:System.Windows.Documents.TextPointer.DocumentStart%2A>, <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A>, <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A>, and <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A>.\"\n  example:\n  - \"The following example demonstrates how to use a <xref:System.Windows.Documents.TextPointer> to find a position just inside of the first <xref:System.Windows.Documents.Run> element in a specified text container.  \\n  \\n [!code-csharp[TextPointer_Snippets#_TextPointer_TextPointer1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_textpointer1)]\\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_textpointer1)]  \\n  \\n The following example implements a simplistic find algorithm using <xref:System.Windows.Documents.TextPointer> facilities.  \\n  \\n [!code-csharp[TextPointer_Snippets#_TextPointer_TextPointer2](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_textpointer2)]\\n [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_textpointer2)]\"\n  syntax:\n    content: 'public class TextPointer : System.Windows.Documents.ContentPosition'\n  inheritance:\n  - System.Object\n  - System.Windows.Documents.ContentPosition\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Windows.Documents.ContentPosition.Missing\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)\n  commentId: M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)\n  id: CompareTo(System.Windows.Documents.TextPointer)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: CompareTo(TextPointer)\n  nameWithType: TextPointer.CompareTo(TextPointer)\n  fullName: TextPointer.CompareTo(TextPointer)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Performs an ordinal comparison between the positions specified by the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and a second specified <xref href=\"System.Windows.Documents.TextPointer\"></xref>.\n  remarks: A value of –1 indicates that the position specified by the current <xref:System.Windows.Documents.TextPointer> precedes the position specified by `position`.  A value of 0 indicates that the indicated positions are equal.  A value of positive +1 indicates that the position specified by the current <xref:System.Windows.Documents.TextPointer> follows the position specified by `position`.\n  example:\n  - \"The following example demonstrates a use for this method.  In the example, the <xref:System.Windows.Documents.TextPointer.CompareTo%2A> method is used in conjunction with the <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> method to test whether a specified <xref:System.Windows.Documents.TextElement> is empty.  \\n  \\n [!code-csharp[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getinsertionposition)]\\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getinsertionposition)]\"\n  syntax:\n    content: public int CompareTo (System.Windows.Documents.TextPointer position);\n    parameters:\n    - id: position\n      type: System.Windows.Documents.TextPointer\n      description: A <xref href=\"System.Windows.Documents.TextPointer\"></xref> that specifies a position to compare to the current position.\n    return:\n      type: System.Int32\n      description: –1 if the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> precedes <code>position</code>; 0 if the locations are the same; +1 if the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> follows <code>position</code>.\n  overload: System.Windows.Documents.TextPointer.CompareTo*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>position</code> specifies a position outside of the text container associated with the current position.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)\n  commentId: M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)\n  id: DeleteTextInRun(System.Int32)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: DeleteTextInRun(Int32)\n  nameWithType: TextPointer.DeleteTextInRun(Int32)\n  fullName: TextPointer.DeleteTextInRun(Int32)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Deletes the specified number of characters from the position indicated by the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>.\n  remarks: \"Specify a positive value to delete characters that follow the current position (as in <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>); specify a negative value to delete characters that precede the current position (as in <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).  \\n  \\n The number of characters actually deleted may be less than the number specified by `count`.  This happens in cases where `count` specifies more characters than exist to be deleted.\"\n  syntax:\n    content: public int DeleteTextInRun (int count);\n    parameters:\n    - id: count\n      type: System.Int32\n      description: The number of characters to delete, starting at the current position. Specify a positive value to delete characters that follow the current position; specify a negative value to delete characters that precede the current position.\n    return:\n      type: System.Int32\n      description: The number of characters actually deleted.\n  overload: System.Windows.Documents.TextPointer.DeleteTextInRun*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The method is called at a position where text is not allowed.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.DocumentEnd\n  commentId: P:System.Windows.Documents.TextPointer.DocumentEnd\n  id: DocumentEnd\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: DocumentEnd\n  nameWithType: TextPointer.DocumentEnd\n  fullName: TextPointer.DocumentEnd\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Gets a <xref href=\"System.Windows.Documents.TextPointer\"></xref> at the end of content in the text container associated with the current position.\n  remarks: The <xref:System.Windows.Documents.TextPointer.Parent%2A> for the returned <xref:System.Windows.Documents.TextPointer> is always a text container (<xref:System.Windows.Controls.TextBlock> or <xref:System.Windows.Documents.FlowDocument>), rather than a <xref:System.Windows.Documents.TextElement>.\n  syntax:\n    content: public System.Windows.Documents.TextPointer DocumentEnd { get; }\n    return:\n      type: System.Windows.Documents.TextPointer\n      description: A <xref href=\"System.Windows.Documents.TextPointer\"></xref> at the end of content in the text container associated with the current position.\n  overload: System.Windows.Documents.TextPointer.DocumentEnd*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.DocumentStart\n  commentId: P:System.Windows.Documents.TextPointer.DocumentStart\n  id: DocumentStart\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: DocumentStart\n  nameWithType: TextPointer.DocumentStart\n  fullName: TextPointer.DocumentStart\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Gets a <xref href=\"System.Windows.Documents.TextPointer\"></xref> at the beginning of content in the text container associated with the current position.\n  remarks: \"Use the position returned by this property as a baseline position from which to work with relative offsets to other positions.  The <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> and <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> methods provide a way to translate between positions and position offsets.  \\n  \\n The <xref:System.Windows.Documents.TextPointer.Parent%2A> for the returned <xref:System.Windows.Documents.TextPointer> is always a text container (<xref:System.Windows.Controls.TextBlock> or <xref:System.Windows.Documents.FlowDocument>), rather than a <xref:System.Windows.Documents.TextElement>.\"\n  syntax:\n    content: public System.Windows.Documents.TextPointer DocumentStart { get; }\n    return:\n      type: System.Windows.Documents.TextPointer\n      description: A <xref href=\"System.Windows.Documents.TextPointer\"></xref> at the beginning of content in the text container associated with the current position.\n  overload: System.Windows.Documents.TextPointer.DocumentStart*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)\n  commentId: M:System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)\n  id: GetAdjacentElement(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: GetAdjacentElement(LogicalDirection)\n  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)\n  fullName: TextPointer.GetAdjacentElement(LogicalDirection)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Returns the element, if any, that borders the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> in the specified logical direction.\n  remarks: The returned element is typically a <xref:System.Windows.Documents.TextElement>.  A <xref:System.Windows.UIElement> can be returned when the <xref:System.Windows.Documents.TextPointer> indicates a position inside a <xref:System.Windows.Documents.BlockUIContainer> element or an <xref:System.Windows.Documents.InlineUIContainer> element.\n  syntax:\n    content: public System.Windows.DependencyObject GetAdjacentElement (System.Windows.Documents.LogicalDirection direction);\n    parameters:\n    - id: direction\n      type: System.Windows.Documents.LogicalDirection\n      description: One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to search for an adjacent element.\n    return:\n      type: System.Windows.DependencyObject\n      description: The adjacent element in the specified <code>direction</code>, or `null` if no adjacent element exists.\n  overload: System.Windows.Documents.TextPointer.GetAdjacentElement*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)\n  commentId: M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)\n  id: GetCharacterRect(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: GetCharacterRect(LogicalDirection)\n  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)\n  fullName: TextPointer.GetCharacterRect(LogicalDirection)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Returns a bounding box (<xref href=\"System.Windows.Rect\"></xref>) for content that borders the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> in the specified logical direction.\n  remarks: \"<xref:System.Windows.Documents.TextElement> edges are not considered content for the purposes of this method.  If the <xref:System.Windows.Documents.TextPointer> is positioned before a <xref:System.Windows.Documents.TextElement> edge, the return value is a bounding box for the next non-<xref:System.Windows.Documents.TextElement> content in the specified direction.  If there is no content in the specified direction, a zero-width <xref:System.Windows.Rect> is returned with a height matching the height of any preceding content.  \\n  \\n The operation performed by this method depends on a valid layout.  When necessary, this method attempts to automatically regenerate a valid layout before proceeding with the operation.  Regenerating a layout can be a relatively expensive operation.  Use the <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> property to check for a valid layout before performing operations that may regenerate the layout.  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).\"\n  syntax:\n    content: public System.Windows.Rect GetCharacterRect (System.Windows.Documents.LogicalDirection direction);\n    parameters:\n    - id: direction\n      type: System.Windows.Documents.LogicalDirection\n      description: One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to find a content bounding box.\n    return:\n      type: System.Windows.Rect\n      description: A bounding box for content that borders the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> in the specified direction, or <xref href=\"System.Windows.Rect.Empty\"></xref> if current, valid layout information is unavailable.\n  overload: System.Windows.Documents.TextPointer.GetCharacterRect*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)\n  commentId: M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)\n  id: GetInsertionPosition(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: GetInsertionPosition(LogicalDirection)\n  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)\n  fullName: TextPointer.GetInsertionPosition(LogicalDirection)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the closest insertion position in the specified logical direction.\n  remarks: \"An insertion position is a position where new content may be added without breaking any semantic rules for the associated content.  In practice, an insertion position is anywhere in content where a caret may be positioned.  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).  \\n  \\n If the <xref:System.Windows.Documents.TextPointer> already points to a valid insertion position, but the closing tag for a non-empty formatting sequence directly follows that position in the given direction, then the <xref:System.Windows.Documents.TextPointer> returned by this method is adjusted to point to the insertion position just after the close of the formatting sequence. For example, consider the markup sequence `<Bold>a</Bold>b`. Note that there are two insertion positions between the letters `a` and `b` — one that precedes the closing `Bold` tag, and one directly following the closing `Bold` tag. If <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> is called on a <xref:System.Windows.Documents.TextPointer> to the position directly after the letter `a` and before of the closing `Bold` tag, and with a `direction` of <xref:System.Windows.Documents.LogicalDirection.Forward>, the returned <xref:System.Windows.Documents.TextPointer> is adjusted to point to the position just before the letter `b`, after the closing `Bold` tag. A similar adjustment is made for opening formatting tags when working in the opposite logical direction. This method is intended to provide a means of disambiguation between insertion positions in similar cases.  \\n  \\n This method can also be used to be selective about insertion points when a sequence of structural tags is involved. For example, when at a position between closing and opening paragraph tags, the direction parameter can be used to select the closest insertion point at the beginning of the following paragraph (by specifying <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>) or at the end of the preceding paragraph (by specifying <xref:System.Windows.Documents.LogicalDirection?displayProperty=fullName>).  \\n  \\n If the pointer is already at insertion position, and there are no adjacent formatting tags in the specified `direction`, the returned <xref:System.Windows.Documents.TextPointer> points to the same position as the calling <xref:System.Windows.Documents.TextPointer>.  \\n  \\n It is possible that no valid insertion position exists relative to the position pointed to by a <xref:System.Windows.Documents.TextPointer>.  This can happen if the referenced content is structurally incomplete, as in an empty table or list.  In such cases, this method simply returns a <xref:System.Windows.Documents.TextPointer> to the same position as the <xref:System.Windows.Documents.TextPointer> from which this method was called.  This method always returns a valid <xref:System.Windows.Documents.TextPointer>.\"\n  example:\n  - \"This example shows how to use the <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> method to check whether a specified <xref:System.Windows.Documents.TextElement> is empty of printable content.  \\n  \\n [!code-csharp[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getinsertionposition)]\\n [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getinsertionposition)]\"\n  syntax:\n    content: public System.Windows.Documents.TextPointer GetInsertionPosition (System.Windows.Documents.LogicalDirection direction);\n    parameters:\n    - id: direction\n      type: System.Windows.Documents.LogicalDirection\n      description: One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to search for the closest insertion position.\n    return:\n      type: System.Windows.Documents.TextPointer\n      description: A <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the closest insertion position in the specified direction.\n  overload: System.Windows.Documents.TextPointer.GetInsertionPosition*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)\n  commentId: M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)\n  id: GetLineStartPosition(System.Int32)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: GetLineStartPosition(Int32)\n  nameWithType: TextPointer.GetLineStartPosition(Int32)\n  fullName: TextPointer.GetLineStartPosition(Int32)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the beginning of a line that is specified relative to the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>.\n  remarks: \"If the <xref:System.Windows.Documents.TextPointer> points to an ambiguous position, for example, between two lines, the line in the direction specified by <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> is selected as the relative starting line.  \\n  \\n The operation performed by this method depends on a valid layout.  When necessary, this method attempts to automatically regenerate a valid layout before proceeding with the operation.  Regenerating a layout can be a relatively expensive operation.  Use <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> to check for a valid layout before performing operations that may regenerate the layout.  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).\"\n  syntax:\n    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count);\n    parameters:\n    - id: count\n      type: System.Int32\n      description: The number of start-of-line markers to skip when determining the line for which to return the starting position. Negative values specify preceding lines, 0 specifies the current line, and positive values specify following lines.\n    return:\n      type: System.Windows.Documents.TextPointer\n      description: A <xref href=\"System.Windows.Documents.TextPointer\"></xref> pointing to the beginning of the specified line (with the <xref href=\"System.Windows.Documents.TextPointer.LogicalDirection\"></xref> set to <xref href=\"System.Windows.Documents.LogicalDirection.Forward\"></xref>), or `null` if the specified line is out of range or otherwise cannot be located.\n  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)\n  commentId: M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)\n  id: GetLineStartPosition(System.Int32,System.Int32@)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: GetLineStartPosition(Int32, Int32)\n  nameWithType: TextPointer.GetLineStartPosition(Int32, Int32)\n  fullName: TextPointer.GetLineStartPosition(Int32, Int32)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the beginning of a line that is specified relative to the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>, and reports how many lines were skipped.\n  remarks: If the <xref:System.Windows.Documents.TextPointer> points to an ambiguous position, for example, between two lines, the line in the direction specified by the <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> property is selected as the relative starting line.\n  syntax:\n    content: public System.Windows.Documents.TextPointer GetLineStartPosition (int count, out int actualCount);\n    parameters:\n    - id: count\n      type: System.Int32\n      description: The number of start-of-line markers to skip when determining the line for which to return the starting position. Negative values specify preceding lines, 0 specifies the current line, and positive values specify following lines.\n    - id: actualCount\n      type: System.Int32\n      description: When this method returns, contains the actual number of start-of-line markers that were skipped when determining the line for which to return the starting position.  This value may be less than <code>count</code> if the beginning or end of content is encountered before the specified number of lines are skipped. This parameter is passed uninitialized.\n    return:\n      type: System.Windows.Documents.TextPointer\n      description: A <xref href=\"System.Windows.Documents.TextPointer\"></xref> pointing to the beginning of the specified line (with the <xref href=\"System.Windows.Documents.TextPointer.LogicalDirection\"></xref> set to <xref href=\"System.Windows.Documents.LogicalDirection.Forward\"></xref>), or to the beginning of the line closest to the specified line if the specified line is out of range.\n  overload: System.Windows.Documents.TextPointer.GetLineStartPosition*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)\n  commentId: M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)\n  id: GetNextContextPosition(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: GetNextContextPosition(LogicalDirection)\n  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)\n  fullName: TextPointer.GetNextContextPosition(LogicalDirection)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Returns a pointer to the next symbol in the specified logical direction.\n  remarks: \"Any of the following is considered to be a symbol:  \\n  \\n-   An opening or closing tag for a <xref:System.Windows.Documents.TextElement> element.  \\n  \\n-   A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.  \\n  \\n-   A 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element.  \\n  \\n If the next symbol is categorized as <xref:System.Windows.Documents.TextPointerContext.EmbeddedElement>, <xref:System.Windows.Documents.TextPointerContext.ElementStart>, or <xref:System.Windows.Documents.TextPointerContext.ElementEnd> (as identified by the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method), then the <xref:System.Windows.Documents.TextPointer> returned by this method is advanced by exactly one symbol from the current position.  \\n  \\n If the next symbol is categorized as <xref:System.Windows.Documents.TextPointerContext.Text>, then the <xref:System.Windows.Documents.TextPointer> returned by this method is advanced past the text to the next non-text symbol (that is, the next position where the <xref:System.Windows.Documents.TextPointerContext> is not <xref:System.Windows.Documents.TextPointerContext.Text>).  The exact symbol count crossed can be calculated in advance by calling the <xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A> method.\"\n  example:\n  - \"The following example demonstrates a use for this method.  The example uses the <xref:System.Windows.Documents.TextPointer.GetNextContextPosition%2A> method in conjunction with the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method to traverse and extract the symbols in a specified <xref:System.Windows.Documents.TextElement>.  \\n  \\n While the example can be used to extract a [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] structure for the contents of a given <xref:System.Windows.Documents.TextElement>, it is intended for illustrative purposes only, and should not be used in production code.  See the <xref:System.Xml> namespace for a rich set of types designed for working with and processing XML.  \\n  \\n [!code-csharp[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getnextcontextposition)]\\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getnextcontextposition)]\"\n  syntax:\n    content: public System.Windows.Documents.TextPointer GetNextContextPosition (System.Windows.Documents.LogicalDirection direction);\n    parameters:\n    - id: direction\n      type: System.Windows.Documents.LogicalDirection\n      description: One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to search for the next symbol.\n    return:\n      type: System.Windows.Documents.TextPointer\n      description: A <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the next symbol in the requested direction, or `null` if the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> borders the start or end of content.\n  overload: System.Windows.Documents.TextPointer.GetNextContextPosition*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)\n  commentId: M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)\n  id: GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: GetNextInsertionPosition(LogicalDirection)\n  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)\n  fullName: TextPointer.GetNextInsertionPosition(LogicalDirection)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the next insertion position in the specified logical direction.\n  remarks: An *insertion position* is a position where new content may be added without breaking any semantic rules for the associated content.  In practice, an insertion position is anywhere in content where a caret may be positioned.  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).\n  example:\n  - \"The following example demonstrates a use for this method. The example uses the <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> method to traverse content element boundaries in order to count the number of <xref:System.Windows.Documents.Paragraph> elements present between two specified <xref:System.Windows.Documents.TextPointer> instances.  \\n  \\n [!code-csharp[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getnextinsertionposition)]\\n [!code-vb[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getnextinsertionposition)]\"\n  syntax:\n    content: public System.Windows.Documents.TextPointer GetNextInsertionPosition (System.Windows.Documents.LogicalDirection direction);\n    parameters:\n    - id: direction\n      type: System.Windows.Documents.LogicalDirection\n      description: One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to search for the next insertion position.\n    return:\n      type: System.Windows.Documents.TextPointer\n      description: A <xref href=\"System.Windows.Documents.TextPointer\"></xref> that identifies the next insertion position in the requested direction, or `null` if no next insertion position can be found.\n  overload: System.Windows.Documents.TextPointer.GetNextInsertionPosition*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)\n  commentId: M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)\n  id: GetOffsetToPosition(System.Windows.Documents.TextPointer)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: GetOffsetToPosition(TextPointer)\n  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)\n  fullName: TextPointer.GetOffsetToPosition(TextPointer)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Returns the count of symbols between the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and a second specified <xref href=\"System.Windows.Documents.TextPointer\"></xref>.\n  remarks: \"Any of the following is considered to be a symbol:  \\n  \\n-   An opening or closing tag for a <xref:System.Windows.Documents.TextElement> element.  \\n  \\n-   A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.  \\n  \\n-   A 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element.\"\n  example:\n  - \"The following example demonstrates a use for this method. The example uses the <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> method to find the offsets for two <xref:System.Windows.Documents.TextPointer> instances, and then uses this information to save and restore the selection in a <xref:System.Windows.Controls.RichTextBox>.  The example assumes that the contents of the <xref:System.Windows.Controls.RichTextBox> have not changed between a selection save and a selection restore.  \\n  \\n [!code-csharp[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getoffsettoposition)]\\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getoffsettoposition)]\"\n  syntax:\n    content: public int GetOffsetToPosition (System.Windows.Documents.TextPointer position);\n    parameters:\n    - id: position\n      type: System.Windows.Documents.TextPointer\n      description: A <xref href=\"System.Windows.Documents.TextPointer\"></xref> that specifies a position to find the distance (in symbols) to.\n    return:\n      type: System.Int32\n      description: The relative number of symbols between the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and <code>position</code>.  A negative value indicates that the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> follows the position specified by <code>position</code>, 0 indicates that the positions are equal, and a positive value indicates that the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> precedes the position specified by <code>position</code>.\n  overload: System.Windows.Documents.TextPointer.GetOffsetToPosition*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>position</code> specifies a position outside of the text container associated with the current position.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)\n  commentId: M:System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)\n  id: GetPointerContext(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: GetPointerContext(LogicalDirection)\n  nameWithType: TextPointer.GetPointerContext(LogicalDirection)\n  fullName: TextPointer.GetPointerContext(LogicalDirection)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Returns a category indicator for the content adjacent to the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> in the specified logical direction.\n  remarks: ''\n  example:\n  - \"The following example demonstrates a use for this method. The example uses the <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> method to implement an algorithm for calculating the balance of opening and closing element tags between two specified <xref:System.Windows.Documents.TextPointer> positions.  Each opening element tag is counted as +1, and each closing element tag is counted as –1.  \\n  \\n [!code-csharp[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getoffsettoposition2)]\\n [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getoffsettoposition2)]\"\n  syntax:\n    content: public System.Windows.Documents.TextPointerContext GetPointerContext (System.Windows.Documents.LogicalDirection direction);\n    parameters:\n    - id: direction\n      type: System.Windows.Documents.LogicalDirection\n      description: One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to determine the category for adjacent content.\n    return:\n      type: System.Windows.Documents.TextPointerContext\n      description: One of the <xref href=\"System.Windows.Documents.TextPointerContext\"></xref> values that indicates the category for adjacent content in the specified logical direction.\n  overload: System.Windows.Documents.TextPointer.GetPointerContext*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)\n  commentId: M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)\n  id: GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: GetPositionAtOffset(Int32, LogicalDirection)\n  nameWithType: TextPointer.GetPositionAtOffset(Int32, LogicalDirection)\n  fullName: TextPointer.GetPositionAtOffset(Int32, LogicalDirection)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the position indicated by the specified offset, in symbols, from the beginning of the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and in the specified direction.\n  remarks: \"Any of the following is considered to be a symbol:  \\n  \\n-   An opening or closing tag for the <xref:System.Windows.Documents.TextElement> element.  \\n  \\n-   A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.  \\n  \\n-   A 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element.\"\n  syntax:\n    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset, System.Windows.Documents.LogicalDirection direction);\n    parameters:\n    - id: offset\n      type: System.Int32\n      description: An offset, in symbols, for which to calculate and return the position.  If the offset is negative, the returned <xref href=\"System.Windows.Documents.TextPointer\"></xref> precedes the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>; otherwise, it follows.\n    - id: direction\n      type: System.Windows.Documents.LogicalDirection\n      description: One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction of the returned <xref href=\"System.Windows.Documents.TextPointer\"></xref>.\n    return:\n      type: System.Windows.Documents.TextPointer\n      description: A <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the position indicated by the specified offset, or `null` if the offset extends past the end of the content.\n  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)\n  commentId: M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)\n  id: GetPositionAtOffset(System.Int32)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: GetPositionAtOffset(Int32)\n  nameWithType: TextPointer.GetPositionAtOffset(Int32)\n  fullName: TextPointer.GetPositionAtOffset(Int32)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Returns a <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the position indicated by the specified offset, in symbols, from the beginning of the current <xref href=\"System.Windows.Documents.TextPointer\"></xref>.\n  remarks: \"Any of the following is considered to be a symbol:  \\n  \\n-   An opening or closing tag for the <xref:System.Windows.Documents.TextElement> element.  \\n  \\n-   A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.  \\n  \\n-   A 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element.\"\n  example:\n  - \"The following example demonstrates a use for this method. The example uses the <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> method to implement a pair of methods, one to calculate the offset to a specified position relative to any hosting paragraph, and the other to return a <xref:System.Windows.Documents.TextPointer> to a specified offset in a specified paragraph.  \\n  \\n [!code-csharp[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getpositionatoffset)]\\n [!code-vb[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getpositionatoffset)]\"\n  syntax:\n    content: public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset);\n    parameters:\n    - id: offset\n      type: System.Int32\n      description: An offset, in symbols, for which to calculate and return the position.  If the offset is negative, the position is calculated in the logical direction opposite of that indicated by the <xref href=\"System.Windows.Documents.TextPointer.LogicalDirection\"></xref> property.\n    return:\n      type: System.Windows.Documents.TextPointer\n      description: A <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the position indicated by the specified offset, or `null` if no corresponding position can be found.\n  overload: System.Windows.Documents.TextPointer.GetPositionAtOffset*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)\n  commentId: M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)\n  id: GetTextInRun(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: GetTextInRun(LogicalDirection)\n  nameWithType: TextPointer.GetTextInRun(LogicalDirection)\n  fullName: TextPointer.GetTextInRun(LogicalDirection)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Returns a string containing any text adjacent to the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> in the specified logical direction.\n  remarks: This method returns only uninterrupted runs of text.  Nothing is returned if any symbol type other than <xref:System.Windows.Documents.TextPointerContext.Text> is adjacent to the current <xref:System.Windows.Documents.TextPointer> in the specified direction.  Similarly, text is returned only up to the next non-text symbol.\n  example:\n  - \"The following example demonstrates a use for this method. The example uses the <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A> method to implement a simple text extractor.  The method returns a string concatenation of all text between two specified <xref:System.Windows.Documents.TextPointer> instances.  \\n  \\n While the example can be used to extract any text between two <xref:System.Windows.Documents.TextPointer> instances, it is intended for illustrative purposes only, and should not be used in production code.  Use the <xref:System.Windows.Documents.TextRange.Text%2A?displayProperty=fullName> property instead.  \\n  \\n [!code-csharp[TextPointer_Snippets#_TextPointer_GetTextInRun](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_gettextinrun)]\\n [!code-vb[TextPointer_Snippets#_TextPointer_GetTextInRun](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_gettextinrun)]\"\n  syntax:\n    content: public string GetTextInRun (System.Windows.Documents.LogicalDirection direction);\n    parameters:\n    - id: direction\n      type: System.Windows.Documents.LogicalDirection\n      description: One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to find and return any adjacent text.\n    return:\n      type: System.String\n      description: A string containing any adjacent text in the specified logical direction, or <xref href=\"System.String.Empty\"></xref> if no adjacent text can be found.\n  overload: System.Windows.Documents.TextPointer.GetTextInRun*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)\n  id: GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: GetTextInRun(LogicalDirection, Char[], Int32, Int32)\n  nameWithType: TextPointer.GetTextInRun(LogicalDirection, Char[], Int32, Int32)\n  fullName: TextPointer.GetTextInRun(LogicalDirection, Char[], Int32, Int32)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Copies the specified maximum number of characters from any adjacent text in the specified direction into a caller-supplied character array.\n  remarks: This method returns only uninterrupted runs of text.  Nothing is returned if any symbol type other than <xref:System.Windows.Documents.TextPointerContext.Text> is adjacent to the current <xref:System.Windows.Documents.TextPointer> in the specified direction.  Similarly, text is returned only up to the next non-text symbol.\n  syntax:\n    content: public int GetTextInRun (System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int startIndex, int count);\n    parameters:\n    - id: direction\n      type: System.Windows.Documents.LogicalDirection\n      description: One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to find and copy any adjacent text.\n    - id: textBuffer\n      type: System.Char[]\n      description: A buffer into which any text is copied.\n    - id: startIndex\n      type: System.Int32\n      description: An index into <code>textBuffer</code> at which to begin writing copied text.\n    - id: count\n      type: System.Int32\n      description: The maximum number of characters to copy.\n    return:\n      type: System.Int32\n      description: The number of characters actually copied into <code>textBuffer</code>.\n  overload: System.Windows.Documents.TextPointer.GetTextInRun*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>startIndex</code> is less than 0 or greater than the <xref href=\\\"System.Array.Length\\\"></xref> property of <code>textBuffer</code>.  \\n  \\n -or-  \\n  \\n <code>count</code> is less than 0 or greater than the remaining space in <code>textBuffer</code> (<code>textBuffer</code>.<xref href=\\\"System.Array.Length\\\"></xref> minus <code>startIndex</code>).\"\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)\n  commentId: M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)\n  id: GetTextRunLength(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: GetTextRunLength(LogicalDirection)\n  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)\n  fullName: TextPointer.GetTextRunLength(LogicalDirection)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Returns the number of Unicode characters between the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and the next non-text symbol, in the specified logical direction.\n  remarks: \"Any of the following is considered to be a symbol:  \\n  \\n-   An opening or closing tag for the <xref:System.Windows.Documents.TextElement> element.  \\n  \\n-   A <xref:System.Windows.UIElement> element contained in an <xref:System.Windows.Documents.InlineUIContainer> or <xref:System.Windows.Documents.BlockUIContainer>.  Note that such a <xref:System.Windows.UIElement> is always counted as exactly one symbol; any additional content or elements contained by the <xref:System.Windows.UIElement> are not counted as symbols.  \\n  \\n-   A 16-bit [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)] character inside of a text <xref:System.Windows.Documents.Run> element.\"\n  syntax:\n    content: public int GetTextRunLength (System.Windows.Documents.LogicalDirection direction);\n    parameters:\n    - id: direction\n      type: System.Windows.Documents.LogicalDirection\n      description: One of the <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> values that specifies the logical direction in which to count the number of characters.\n    return:\n      type: System.Int32\n      description: The number of Unicode characters between the current <xref href=\"System.Windows.Documents.TextPointer\"></xref> and the next non-text symbol.  This number may be 0 if there is no adjacent text.\n  overload: System.Windows.Documents.TextPointer.GetTextRunLength*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.HasValidLayout\n  commentId: P:System.Windows.Documents.TextPointer.HasValidLayout\n  id: HasValidLayout\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: HasValidLayout\n  nameWithType: TextPointer.HasValidLayout\n  fullName: TextPointer.HasValidLayout\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Gets a value that indicates whether the text container associated with the current position has a valid (up-to-date) layout.\n  remarks: When necessary, operations that depend on a valid layout (such as the <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A> method, <xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A> method, and <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> property) attempt to automatically regenerate a valid layout before proceeding with the operation.  Regenerating a layout can be a relatively expensive operation.  Use this property to check for a valid layout before performing operations that may regenerate the layout.  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).\n  syntax:\n    content: public bool HasValidLayout { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the layout is current and valid; otherwise, `false`.'\n  overload: System.Windows.Documents.TextPointer.HasValidLayout*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.InsertLineBreak\n  commentId: M:System.Windows.Documents.TextPointer.InsertLineBreak\n  id: InsertLineBreak\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: InsertLineBreak()\n  nameWithType: TextPointer.InsertLineBreak()\n  fullName: TextPointer.InsertLineBreak()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Inserts a line break at the current position.\n  syntax:\n    content: public System.Windows.Documents.TextPointer InsertLineBreak ();\n    parameters: []\n    return:\n      type: System.Windows.Documents.TextPointer\n      description: A <xref href=\"System.Windows.Documents.TextPointer\"></xref> positioned immediately after the <xref href=\"System.Windows.Documents.LineBreak\"></xref> element inserted by this method.\n  overload: System.Windows.Documents.TextPointer.InsertLineBreak*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak\n  commentId: M:System.Windows.Documents.TextPointer.InsertParagraphBreak\n  id: InsertParagraphBreak\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: InsertParagraphBreak()\n  nameWithType: TextPointer.InsertParagraphBreak()\n  fullName: TextPointer.InsertParagraphBreak()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Inserts a paragraph break at the current position.\n  remarks: If this method is called when the current position is inside of an existing <xref:System.Windows.Documents.Paragraph> element, the existing paragraph and any content it contains are split into two paragraphs at the current position.  If this method is called when the current position is not inside of an existing paragraph, a new, empty paragraph is inserted.  If this method is called at a position unsuitable for splitting or inserting a paragraph (for example, if the current position is inside of a <xref:System.Windows.Documents.Hyperlink> element), an exception is thrown.\n  syntax:\n    content: public System.Windows.Documents.TextPointer InsertParagraphBreak ();\n    parameters: []\n    return:\n      type: System.Windows.Documents.TextPointer\n      description: A <xref href=\"System.Windows.Documents.TextPointer\"></xref> to the beginning (<xref href=\"System.Windows.Documents.TextElement.ContentStart\"></xref>) of the new paragraph.\n  overload: System.Windows.Documents.TextPointer.InsertParagraphBreak*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: This method is called on a position that cannot be split to accommodate a new paragraph, such as in the scope of a <xref href=\"System.Windows.Documents.Hyperlink\"></xref> or <xref href=\"System.Windows.Documents.InlineUIContainer\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)\n  commentId: M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)\n  id: InsertTextInRun(System.String)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: InsertTextInRun(String)\n  nameWithType: TextPointer.InsertTextInRun(String)\n  fullName: TextPointer.InsertTextInRun(String)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Inserts the specified text into the text <xref href=\"System.Windows.Documents.Run\"></xref> at the current position.\n  remarks: If the <xref:System.Windows.Documents.TextPointer> is not scoped by a <xref:System.Windows.Documents.Run> element, a <xref:System.Windows.Documents.Run> is inserted along with the `textData`.\n  syntax:\n    content: public void InsertTextInRun (string textData);\n    parameters:\n    - id: textData\n      type: System.String\n      description: The text to insert.\n  overload: System.Windows.Documents.TextPointer.InsertTextInRun*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: The current position is not within a <xref href=\"System.Windows.Documents.Run\"></xref> element.\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>textData</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition\n  commentId: P:System.Windows.Documents.TextPointer.IsAtInsertionPosition\n  id: IsAtInsertionPosition\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: IsAtInsertionPosition\n  nameWithType: TextPointer.IsAtInsertionPosition\n  fullName: TextPointer.IsAtInsertionPosition\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Gets a value that indicates whether the current position is an insertion position.\n  remarks: An insertion position is a position where new content may be added without breaking any semantic rules for the associated content.  In practice, an insertion position is anywhere in content where a caret may be positioned.  An example of a valid <xref:System.Windows.Documents.TextPointer> position that is not an insertion position is the position between two adjacent <xref:System.Windows.Documents.Paragraph> tags (that is, between the closing tag of the preceding paragraph and the opening tag of the next paragraph).\n  syntax:\n    content: public bool IsAtInsertionPosition { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current position is an insertion position; otherwise, `false`.'\n  overload: System.Windows.Documents.TextPointer.IsAtInsertionPosition*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition\n  commentId: P:System.Windows.Documents.TextPointer.IsAtLineStartPosition\n  id: IsAtLineStartPosition\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: IsAtLineStartPosition\n  nameWithType: TextPointer.IsAtLineStartPosition\n  fullName: TextPointer.IsAtLineStartPosition\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Gets a value that indicates whether the current position is at the beginning of a line.\n  remarks: \"If the <xref:System.Windows.Documents.TextPointer> points to an ambiguous position, for example, between two lines, the line in the direction specified by the <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> property is selected as the relative starting line.  \\n  \\n The operation performed by this property depends on a valid layout.  When necessary, this method attempts to automatically regenerate a valid layout before proceeding with the operation.  Regenerating a layout can be a relatively expensive operation.  Use the <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> property to check for a valid layout before performing operations that may regenerate the layout.  For more information, see [Layout](~/docs/framework/wpf/advanced/layout.md).\"\n  syntax:\n    content: public bool IsAtLineStartPosition { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the current position is at the beginning of a line; otherwise, `false`.'\n  overload: System.Windows.Documents.TextPointer.IsAtLineStartPosition*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)\n  commentId: M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)\n  id: IsInSameDocument(System.Windows.Documents.TextPointer)\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: IsInSameDocument(TextPointer)\n  nameWithType: TextPointer.IsInSameDocument(TextPointer)\n  fullName: TextPointer.IsInSameDocument(TextPointer)\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Indicates whether the specified position is in the same text container as the current position.\n  remarks: Most operations that involve multiple <xref:System.Windows.Documents.TextPointer> instances are only valid if the instances in question indicate positions that are in the same text container scope.  For example the <xref:System.Windows.Documents.TextPointer.CompareTo%2A> and <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> methods cannot be used with a <xref:System.Windows.Documents.TextPointer> to a position outside of the text container associated with the current position.  Use this method to verify that a specified <xref:System.Windows.Documents.TextPointer> is compatible with the current position for such operations.\n  example:\n  - \"The following example demonstrates a use for this method.  The example uses the <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A> method to check whether a specified <xref:System.Windows.Documents.TextPointer> is positioned between two other specified <xref:System.Windows.Documents.TextPointer> instances in a situation when there is no guarantee that all three positions belong to the same text container.  \\n  \\n [!code-csharp[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_isinsamedocument)]\\n [!code-vb[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_isinsamedocument)]\"\n  syntax:\n    content: public bool IsInSameDocument (System.Windows.Documents.TextPointer textPosition);\n    parameters:\n    - id: textPosition\n      type: System.Windows.Documents.TextPointer\n      description: A <xref href=\"System.Windows.Documents.TextPointer\"></xref> that specifies a position to compare to the current position.\n    return:\n      type: System.Boolean\n      description: '`true` if <code>textPosition</code> indicates a position that is in the same text container as the current position; otherwise, `false`.'\n  overload: System.Windows.Documents.TextPointer.IsInSameDocument*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>textPosition</code> is `null`.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.LogicalDirection\n  commentId: P:System.Windows.Documents.TextPointer.LogicalDirection\n  id: LogicalDirection\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: LogicalDirection\n  nameWithType: TextPointer.LogicalDirection\n  fullName: TextPointer.LogicalDirection\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Gets the logical direction associated with the current position which is used to disambiguate content associated with the current position.\n  remarks: As an example of how this property is used, the <xref:System.Windows.Documents.LogicalDirection> of the <xref:System.Windows.Documents.TextPointer> returned by a hit test method gives a hit that is between two characters of text. The logical direction specifies which of the two characters was actually hit—the left or the right.\n  syntax:\n    content: public System.Windows.Documents.LogicalDirection LogicalDirection { get; }\n    return:\n      type: System.Windows.Documents.LogicalDirection\n      description: The <xref href=\"System.Windows.Documents.LogicalDirection\"></xref> value that is associated with the current position.\n  overload: System.Windows.Documents.TextPointer.LogicalDirection*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Documents.TextPointer.Paragraph\n  commentId: P:System.Windows.Documents.TextPointer.Paragraph\n  id: Paragraph\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: Paragraph\n  nameWithType: TextPointer.Paragraph\n  fullName: TextPointer.Paragraph\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Gets the paragraph that scopes the current position, if any.\n  syntax:\n    content: public System.Windows.Documents.Paragraph Paragraph { get; }\n    return:\n      type: System.Windows.Documents.Paragraph\n      description: The <xref href=\"System.Windows.Documents.Paragraph\"></xref> that scopes the current position, or `null` if no such paragraph exists.\n  overload: System.Windows.Documents.TextPointer.Paragraph*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.Documents.TextPointer.Parent\n  commentId: P:System.Windows.Documents.TextPointer.Parent\n  id: Parent\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: Parent\n  nameWithType: TextPointer.Parent\n  fullName: TextPointer.Parent\n  type: Property\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: Gets the logical parent that scopes the current position.\n  syntax:\n    content: public System.Windows.DependencyObject Parent { get; }\n    return:\n      type: System.Windows.DependencyObject\n      description: The logical parent that scopes the current position.\n  overload: System.Windows.Documents.TextPointer.Parent*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.Documents.TextPointer.ToString\n  commentId: M:System.Windows.Documents.TextPointer.ToString\n  id: ToString\n  parent: System.Windows.Documents.TextPointer\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: TextPointer.ToString()\n  fullName: TextPointer.ToString()\n  type: Method\n  assemblies:\n  - PresentationFramework\n  namespace: System.Windows.Documents\n  summary: This type or member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The string that represents the object.\n  overload: System.Windows.Documents.TextPointer.ToString*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\nreferences:\n- uid: System.Windows.Documents.ContentPosition\n  parent: System.Windows.Documents\n  isExternal: false\n  name: ContentPosition\n  nameWithType: ContentPosition\n  fullName: System.Windows.Documents.ContentPosition\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: CompareTo(TextPointer)\n  nameWithType: TextPointer.CompareTo(TextPointer)\n  fullName: TextPointer.CompareTo(TextPointer)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Windows.Documents.TextPointer\n  parent: System.Windows.Documents\n  isExternal: false\n  name: TextPointer\n  nameWithType: TextPointer\n  fullName: System.Windows.Documents.TextPointer\n- uid: System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: DeleteTextInRun(Int32)\n  nameWithType: TextPointer.DeleteTextInRun(Int32)\n  fullName: TextPointer.DeleteTextInRun(Int32)\n- uid: System.Windows.Documents.TextPointer.DocumentEnd\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: DocumentEnd\n  nameWithType: TextPointer.DocumentEnd\n  fullName: TextPointer.DocumentEnd\n- uid: System.Windows.Documents.TextPointer.DocumentStart\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: DocumentStart\n  nameWithType: TextPointer.DocumentStart\n  fullName: TextPointer.DocumentStart\n- uid: System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetAdjacentElement(LogicalDirection)\n  nameWithType: TextPointer.GetAdjacentElement(LogicalDirection)\n  fullName: TextPointer.GetAdjacentElement(LogicalDirection)\n- uid: System.Windows.DependencyObject\n  parent: System.Windows\n  isExternal: false\n  name: DependencyObject\n  nameWithType: DependencyObject\n  fullName: System.Windows.DependencyObject\n- uid: System.Windows.Documents.LogicalDirection\n  parent: System.Windows.Documents\n  isExternal: false\n  name: LogicalDirection\n  nameWithType: LogicalDirection\n  fullName: System.Windows.Documents.LogicalDirection\n- uid: System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetCharacterRect(LogicalDirection)\n  nameWithType: TextPointer.GetCharacterRect(LogicalDirection)\n  fullName: TextPointer.GetCharacterRect(LogicalDirection)\n- uid: System.Windows.Rect\n  parent: System.Windows\n  isExternal: false\n  name: Rect\n  nameWithType: Rect\n  fullName: System.Windows.Rect\n- uid: System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetInsertionPosition(LogicalDirection)\n  nameWithType: TextPointer.GetInsertionPosition(LogicalDirection)\n  fullName: TextPointer.GetInsertionPosition(LogicalDirection)\n- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetLineStartPosition(Int32)\n  nameWithType: TextPointer.GetLineStartPosition(Int32)\n  fullName: TextPointer.GetLineStartPosition(Int32)\n- uid: System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetLineStartPosition(Int32, Int32)\n  nameWithType: TextPointer.GetLineStartPosition(Int32, Int32)\n  fullName: TextPointer.GetLineStartPosition(Int32, Int32)\n- uid: System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetNextContextPosition(LogicalDirection)\n  nameWithType: TextPointer.GetNextContextPosition(LogicalDirection)\n  fullName: TextPointer.GetNextContextPosition(LogicalDirection)\n- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetNextInsertionPosition(LogicalDirection)\n  nameWithType: TextPointer.GetNextInsertionPosition(LogicalDirection)\n  fullName: TextPointer.GetNextInsertionPosition(LogicalDirection)\n- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetOffsetToPosition(TextPointer)\n  nameWithType: TextPointer.GetOffsetToPosition(TextPointer)\n  fullName: TextPointer.GetOffsetToPosition(TextPointer)\n- uid: System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetPointerContext(LogicalDirection)\n  nameWithType: TextPointer.GetPointerContext(LogicalDirection)\n  fullName: TextPointer.GetPointerContext(LogicalDirection)\n- uid: System.Windows.Documents.TextPointerContext\n  parent: System.Windows.Documents\n  isExternal: false\n  name: TextPointerContext\n  nameWithType: TextPointerContext\n  fullName: System.Windows.Documents.TextPointerContext\n- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetPositionAtOffset(Int32, LogicalDirection)\n  nameWithType: TextPointer.GetPositionAtOffset(Int32, LogicalDirection)\n  fullName: TextPointer.GetPositionAtOffset(Int32, LogicalDirection)\n- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetPositionAtOffset(Int32)\n  nameWithType: TextPointer.GetPositionAtOffset(Int32)\n  fullName: TextPointer.GetPositionAtOffset(Int32)\n- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetTextInRun(LogicalDirection)\n  nameWithType: TextPointer.GetTextInRun(LogicalDirection)\n  fullName: TextPointer.GetTextInRun(LogicalDirection)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetTextInRun(LogicalDirection, Char[], Int32, Int32)\n  nameWithType: TextPointer.GetTextInRun(LogicalDirection, Char[], Int32, Int32)\n  fullName: TextPointer.GetTextInRun(LogicalDirection, Char[], Int32, Int32)\n- uid: System.Char\n  name: Char\n  nameWithType: Char\n  fullName: System.Char\n- uid: System.Char[]\n  parent: System\n  isExternal: false\n  name: Char[]\n  nameWithType: Char[]\n  fullName: System.Char[]\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    nameWithType: Char\n    fullName: System.Char\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetTextRunLength(LogicalDirection)\n  nameWithType: TextPointer.GetTextRunLength(LogicalDirection)\n  fullName: TextPointer.GetTextRunLength(LogicalDirection)\n- uid: System.Windows.Documents.TextPointer.HasValidLayout\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: HasValidLayout\n  nameWithType: TextPointer.HasValidLayout\n  fullName: TextPointer.HasValidLayout\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.Documents.TextPointer.InsertLineBreak\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: InsertLineBreak()\n  nameWithType: TextPointer.InsertLineBreak()\n  fullName: TextPointer.InsertLineBreak()\n- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: InsertParagraphBreak()\n  nameWithType: TextPointer.InsertParagraphBreak()\n  fullName: TextPointer.InsertParagraphBreak()\n- uid: System.Windows.Documents.TextPointer.InsertTextInRun(System.String)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: InsertTextInRun(String)\n  nameWithType: TextPointer.InsertTextInRun(String)\n  fullName: TextPointer.InsertTextInRun(String)\n- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: IsAtInsertionPosition\n  nameWithType: TextPointer.IsAtInsertionPosition\n  fullName: TextPointer.IsAtInsertionPosition\n- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: IsAtLineStartPosition\n  nameWithType: TextPointer.IsAtLineStartPosition\n  fullName: TextPointer.IsAtLineStartPosition\n- uid: System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: IsInSameDocument(TextPointer)\n  nameWithType: TextPointer.IsInSameDocument(TextPointer)\n  fullName: TextPointer.IsInSameDocument(TextPointer)\n- uid: System.Windows.Documents.TextPointer.LogicalDirection\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: LogicalDirection\n  nameWithType: TextPointer.LogicalDirection\n  fullName: TextPointer.LogicalDirection\n- uid: System.Windows.Documents.TextPointer.Paragraph\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: Paragraph\n  nameWithType: TextPointer.Paragraph\n  fullName: TextPointer.Paragraph\n- uid: System.Windows.Documents.Paragraph\n  parent: System.Windows.Documents\n  isExternal: false\n  name: Paragraph\n  nameWithType: Paragraph\n  fullName: System.Windows.Documents.Paragraph\n- uid: System.Windows.Documents.TextPointer.Parent\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: Parent\n  nameWithType: TextPointer.Parent\n  fullName: TextPointer.Parent\n- uid: System.Windows.Documents.TextPointer.ToString\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: ToString()\n  nameWithType: TextPointer.ToString()\n  fullName: TextPointer.ToString()\n- uid: System.Windows.Documents.TextPointer.CompareTo*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: CompareTo\n  nameWithType: TextPointer.CompareTo\n  fullName: TextPointer.CompareTo\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.DeleteTextInRun*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: DeleteTextInRun\n  nameWithType: TextPointer.DeleteTextInRun\n  fullName: TextPointer.DeleteTextInRun\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.DocumentEnd*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: DocumentEnd\n  nameWithType: TextPointer.DocumentEnd\n  fullName: TextPointer.DocumentEnd\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.DocumentStart*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: DocumentStart\n  nameWithType: TextPointer.DocumentStart\n  fullName: TextPointer.DocumentStart\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.GetAdjacentElement*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetAdjacentElement\n  nameWithType: TextPointer.GetAdjacentElement\n  fullName: TextPointer.GetAdjacentElement\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.GetCharacterRect*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetCharacterRect\n  nameWithType: TextPointer.GetCharacterRect\n  fullName: TextPointer.GetCharacterRect\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.GetInsertionPosition*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetInsertionPosition\n  nameWithType: TextPointer.GetInsertionPosition\n  fullName: TextPointer.GetInsertionPosition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.GetLineStartPosition*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetLineStartPosition\n  nameWithType: TextPointer.GetLineStartPosition\n  fullName: TextPointer.GetLineStartPosition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.GetNextContextPosition*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetNextContextPosition\n  nameWithType: TextPointer.GetNextContextPosition\n  fullName: TextPointer.GetNextContextPosition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.GetNextInsertionPosition*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetNextInsertionPosition\n  nameWithType: TextPointer.GetNextInsertionPosition\n  fullName: TextPointer.GetNextInsertionPosition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.GetOffsetToPosition*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetOffsetToPosition\n  nameWithType: TextPointer.GetOffsetToPosition\n  fullName: TextPointer.GetOffsetToPosition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.GetPointerContext*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetPointerContext\n  nameWithType: TextPointer.GetPointerContext\n  fullName: TextPointer.GetPointerContext\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.GetPositionAtOffset*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetPositionAtOffset\n  nameWithType: TextPointer.GetPositionAtOffset\n  fullName: TextPointer.GetPositionAtOffset\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.GetTextInRun*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetTextInRun\n  nameWithType: TextPointer.GetTextInRun\n  fullName: TextPointer.GetTextInRun\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.GetTextRunLength*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: GetTextRunLength\n  nameWithType: TextPointer.GetTextRunLength\n  fullName: TextPointer.GetTextRunLength\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.HasValidLayout*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: HasValidLayout\n  nameWithType: TextPointer.HasValidLayout\n  fullName: TextPointer.HasValidLayout\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.InsertLineBreak*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: InsertLineBreak\n  nameWithType: TextPointer.InsertLineBreak\n  fullName: TextPointer.InsertLineBreak\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.InsertParagraphBreak*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: InsertParagraphBreak\n  nameWithType: TextPointer.InsertParagraphBreak\n  fullName: TextPointer.InsertParagraphBreak\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.InsertTextInRun*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: InsertTextInRun\n  nameWithType: TextPointer.InsertTextInRun\n  fullName: TextPointer.InsertTextInRun\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.IsAtInsertionPosition*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: IsAtInsertionPosition\n  nameWithType: TextPointer.IsAtInsertionPosition\n  fullName: TextPointer.IsAtInsertionPosition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.IsAtLineStartPosition*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: IsAtLineStartPosition\n  nameWithType: TextPointer.IsAtLineStartPosition\n  fullName: TextPointer.IsAtLineStartPosition\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.IsInSameDocument*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: IsInSameDocument\n  nameWithType: TextPointer.IsInSameDocument\n  fullName: TextPointer.IsInSameDocument\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.LogicalDirection*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: LogicalDirection\n  nameWithType: TextPointer.LogicalDirection\n  fullName: TextPointer.LogicalDirection\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.Paragraph*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: Paragraph\n  nameWithType: TextPointer.Paragraph\n  fullName: TextPointer.Paragraph\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.Parent*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: Parent\n  nameWithType: TextPointer.Parent\n  fullName: TextPointer.Parent\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Windows.Documents.TextPointer.ToString*\n  parent: System.Windows.Documents.TextPointer\n  isExternal: false\n  name: ToString\n  nameWithType: TextPointer.ToString\n  fullName: TextPointer.ToString\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows.Documents/TextPointer.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Windows.Documents.ContentPosition.Missing\n  parent: System.Windows.Documents.ContentPosition\n  isExternal: false\n  name: Missing\n  nameWithType: ContentPosition.Missing\n  fullName: ContentPosition.Missing\n"}