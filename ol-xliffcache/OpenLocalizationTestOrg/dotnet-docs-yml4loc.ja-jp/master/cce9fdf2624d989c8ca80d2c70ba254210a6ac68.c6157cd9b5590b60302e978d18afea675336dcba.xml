{"nodes":[{"content":"Specifies the calling convention required to call methods implemented in unmanaged code.","nodes":[{"pos":[0,88],"content":"Specifies the calling convention required to call methods implemented in unmanaged code.","nodes":[{"content":"Specifies the calling convention required to call methods implemented in unmanaged code.","pos":[0,88]}]}],"pos":[783,872],"yaml":true},{"content":"Always use the <xref:System.Runtime.InteropServices.CallingConvention> enumeration rather than the <xref:System.Runtime.InteropServices.CALLCONV> enumeration to specify a calling convention in managed code. The latter exists only for the sake of COM definitions. The <xref:System.Runtime.InteropServices.CallingConvention> enumeration is used by <xref:System.Runtime.InteropServices.DllImportAttribute> and several classes in <xref:System.Reflection.Emit> to dynamically emit platform invoke signatures.","nodes":[{"pos":[0,503],"content":"Always use the <xref:System.Runtime.InteropServices.CallingConvention> enumeration rather than the <xref:System.Runtime.InteropServices.CALLCONV> enumeration to specify a calling convention in managed code. The latter exists only for the sake of COM definitions. The <xref:System.Runtime.InteropServices.CallingConvention> enumeration is used by <xref:System.Runtime.InteropServices.DllImportAttribute> and several classes in <xref:System.Reflection.Emit> to dynamically emit platform invoke signatures.","nodes":[{"content":"Always use the <xref:System.Runtime.InteropServices.CallingConvention> enumeration rather than the <xref:System.Runtime.InteropServices.CALLCONV> enumeration to specify a calling convention in managed code. The latter exists only for the sake of COM definitions. The <xref:System.Runtime.InteropServices.CallingConvention> enumeration is used by <xref:System.Runtime.InteropServices.DllImportAttribute> and several classes in <xref:System.Reflection.Emit> to dynamically emit platform invoke signatures.","pos":[0,503],"nodes":[{"content":"Always use the <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.CallingConvention&gt;</ph> enumeration rather than the <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.CALLCONV&gt;</ph> enumeration to specify a calling convention in managed code.","pos":[0,206],"source":"Always use the <xref:System.Runtime.InteropServices.CallingConvention> enumeration rather than the <xref:System.Runtime.InteropServices.CALLCONV> enumeration to specify a calling convention in managed code."},{"content":"The latter exists only for the sake of COM definitions.","pos":[207,262]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Runtime.InteropServices.CallingConvention&gt;</ph> enumeration is used by <ph id=\"ph2\">&lt;xref:System.Runtime.InteropServices.DllImportAttribute&gt;</ph> and several classes in <ph id=\"ph3\">&lt;xref:System.Reflection.Emit&gt;</ph> to dynamically emit platform invoke signatures.","pos":[263,503],"source":" The <xref:System.Runtime.InteropServices.CallingConvention> enumeration is used by <xref:System.Runtime.InteropServices.DllImportAttribute> and several classes in <xref:System.Reflection.Emit> to dynamically emit platform invoke signatures."}]}]}],"pos":[883,1387],"yaml":true,"extradata":"MT"},{"content":"The caller cleans the stack. This enables calling functions with `varargs`, which makes it appropriate to use for methods that accept a variable number of parameters, such as `Printf`.","nodes":[{"pos":[0,184],"content":"The caller cleans the stack. This enables calling functions with `varargs`, which makes it appropriate to use for methods that accept a variable number of parameters, such as `Printf`.","nodes":[{"content":"The caller cleans the stack.","pos":[0,28]},{"content":"This enables calling functions with <ph id=\"ph1\">`varargs`</ph>, which makes it appropriate to use for methods that accept a variable number of parameters, such as <ph id=\"ph2\">`Printf`</ph>.","pos":[29,184],"source":" This enables calling functions with `varargs`, which makes it appropriate to use for methods that accept a variable number of parameters, such as `Printf`."}]}],"pos":[3731,3916],"yaml":true},{"content":"This calling convention is not supported.","nodes":[{"pos":[0,41],"content":"This calling convention is not supported.","nodes":[{"content":"This calling convention is not supported.","pos":[0,41]}]}],"pos":[5487,5529],"yaml":true},{"content":"The callee cleans the stack. This is the default convention for calling unmanaged functions with platform invoke.","nodes":[{"pos":[0,113],"content":"The callee cleans the stack. This is the default convention for calling unmanaged functions with platform invoke.","nodes":[{"content":"The callee cleans the stack. This is the default convention for calling unmanaged functions with platform invoke.","pos":[0,113],"nodes":[{"content":"The callee cleans the stack.","pos":[0,28]},{"content":"This is the default convention for calling unmanaged functions with platform invoke.","pos":[29,113]}]}]}],"pos":[6793,6907],"yaml":true},{"content":"The first parameter is the `this` pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.","nodes":[{"pos":[0,205],"content":"The first parameter is the `this` pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.","nodes":[{"content":"The first parameter is the <ph id=\"ph1\">`this`</ph> pointer and is stored in register ECX.","pos":[0,72],"source":"The first parameter is the `this` pointer and is stored in register ECX."},{"content":"Other parameters are pushed on the stack.","pos":[73,114]},{"content":"This calling convention is used to call methods on classes exported from an unmanaged DLL.","pos":[115,205]}]}],"pos":[8480,8686],"yaml":true},{"content":"This member is not actually a calling convention, but instead uses the default platform calling convention. For example, on Windows the default is <xref href=\"System.Runtime.InteropServices.CallingConvention.StdCall\"></xref> and on Windows CE.NET it is <xref href=\"System.Runtime.InteropServices.CallingConvention.Cdecl\"></xref>.","nodes":[{"pos":[0,329],"content":"This member is not actually a calling convention, but instead uses the default platform calling convention. For example, on Windows the default is <xref href=\"System.Runtime.InteropServices.CallingConvention.StdCall\"></xref> and on Windows CE.NET it is <xref href=\"System.Runtime.InteropServices.CallingConvention.Cdecl\"></xref>.","nodes":[{"content":"This member is not actually a calling convention, but instead uses the default platform calling convention.","pos":[0,107]},{"content":"For example, on Windows the default is <ph id=\"ph1\">&lt;xref href=\"System.Runtime.InteropServices.CallingConvention.StdCall\"&gt;&lt;/xref&gt;</ph> and on Windows CE.NET it is <ph id=\"ph2\">&lt;xref href=\"System.Runtime.InteropServices.CallingConvention.Cdecl\"&gt;&lt;/xref&gt;</ph>.","pos":[108,329],"source":" For example, on Windows the default is <xref href=\"System.Runtime.InteropServices.CallingConvention.StdCall\"></xref> and on Windows CE.NET it is <xref href=\"System.Runtime.InteropServices.CallingConvention.Cdecl\"></xref>."}]}],"pos":[10248,10578],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Runtime.InteropServices.CallingConvention\n  commentId: T:System.Runtime.InteropServices.CallingConvention\n  id: CallingConvention\n  children:\n  - System.Runtime.InteropServices.CallingConvention.Cdecl\n  - System.Runtime.InteropServices.CallingConvention.FastCall\n  - System.Runtime.InteropServices.CallingConvention.StdCall\n  - System.Runtime.InteropServices.CallingConvention.ThisCall\n  - System.Runtime.InteropServices.CallingConvention.Winapi\n  langs:\n  - csharp\n  name: CallingConvention\n  nameWithType: CallingConvention\n  fullName: System.Runtime.InteropServices.CallingConvention\n  type: Enum\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: Specifies the calling convention required to call methods implemented in unmanaged code.\n  remarks: Always use the <xref:System.Runtime.InteropServices.CallingConvention> enumeration rather than the <xref:System.Runtime.InteropServices.CALLCONV> enumeration to specify a calling convention in managed code. The latter exists only for the sake of COM definitions. The <xref:System.Runtime.InteropServices.CallingConvention> enumeration is used by <xref:System.Runtime.InteropServices.DllImportAttribute> and several classes in <xref:System.Reflection.Emit> to dynamically emit platform invoke signatures.\n  example:\n  - \"The following example demonstrates how to apply the `Cdecl` calling convention, which you must use because the stack is cleaned up by the caller.  \\n  \\n [!code-cpp[Interop CallingConvention#1](~/samples/snippets/cpp/VS_Snippets_CLR/Interop CallingConvention/CPP/callingconv.cpp#1)]\\n [!code-csharp[Interop CallingConvention#1](~/samples/snippets/csharp/VS_Snippets_CLR/Interop CallingConvention/CS/callingconv.cs#1)]\\n [!code-vb[Interop CallingConvention#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Interop CallingConvention/VB/callingconv.vb#1)]\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public enum CallingConvention\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/CallingConvention.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Runtime.InteropServices.CallingConvention.Cdecl\n  commentId: F:System.Runtime.InteropServices.CallingConvention.Cdecl\n  id: Cdecl\n  parent: System.Runtime.InteropServices.CallingConvention\n  langs:\n  - csharp\n  name: Cdecl\n  nameWithType: CallingConvention.Cdecl\n  fullName: CallingConvention.Cdecl\n  type: Field\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: The caller cleans the stack. This enables calling functions with `varargs`, which makes it appropriate to use for methods that accept a variable number of parameters, such as `Printf`.\n  syntax:\n    content: Cdecl\n    return:\n      type: System.Runtime.InteropServices.CallingConvention\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/CallingConvention.xml\n- uid: System.Runtime.InteropServices.CallingConvention.FastCall\n  commentId: F:System.Runtime.InteropServices.CallingConvention.FastCall\n  id: FastCall\n  parent: System.Runtime.InteropServices.CallingConvention\n  langs:\n  - csharp\n  name: FastCall\n  nameWithType: CallingConvention.FastCall\n  fullName: CallingConvention.FastCall\n  type: Field\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: This calling convention is not supported.\n  syntax:\n    content: FastCall\n    return:\n      type: System.Runtime.InteropServices.CallingConvention\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/CallingConvention.xml\n- uid: System.Runtime.InteropServices.CallingConvention.StdCall\n  commentId: F:System.Runtime.InteropServices.CallingConvention.StdCall\n  id: StdCall\n  parent: System.Runtime.InteropServices.CallingConvention\n  langs:\n  - csharp\n  name: StdCall\n  nameWithType: CallingConvention.StdCall\n  fullName: CallingConvention.StdCall\n  type: Field\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: The callee cleans the stack. This is the default convention for calling unmanaged functions with platform invoke.\n  syntax:\n    content: StdCall\n    return:\n      type: System.Runtime.InteropServices.CallingConvention\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/CallingConvention.xml\n- uid: System.Runtime.InteropServices.CallingConvention.ThisCall\n  commentId: F:System.Runtime.InteropServices.CallingConvention.ThisCall\n  id: ThisCall\n  parent: System.Runtime.InteropServices.CallingConvention\n  langs:\n  - csharp\n  name: ThisCall\n  nameWithType: CallingConvention.ThisCall\n  fullName: CallingConvention.ThisCall\n  type: Field\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: The first parameter is the `this` pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.\n  syntax:\n    content: ThisCall\n    return:\n      type: System.Runtime.InteropServices.CallingConvention\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/CallingConvention.xml\n- uid: System.Runtime.InteropServices.CallingConvention.Winapi\n  commentId: F:System.Runtime.InteropServices.CallingConvention.Winapi\n  id: Winapi\n  parent: System.Runtime.InteropServices.CallingConvention\n  langs:\n  - csharp\n  name: Winapi\n  nameWithType: CallingConvention.Winapi\n  fullName: CallingConvention.Winapi\n  type: Field\n  assemblies:\n  - System.Runtime.InteropServices\n  - mscorlib\n  - netstandard\n  namespace: System.Runtime.InteropServices\n  summary: This member is not actually a calling convention, but instead uses the default platform calling convention. For example, on Windows the default is <xref href=\"System.Runtime.InteropServices.CallingConvention.StdCall\"></xref> and on Windows CE.NET it is <xref href=\"System.Runtime.InteropServices.CallingConvention.Cdecl\"></xref>.\n  syntax:\n    content: Winapi\n    return:\n      type: System.Runtime.InteropServices.CallingConvention\n      description: ''\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Runtime.InteropServices/CallingConvention.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.Runtime.InteropServices.CallingConvention.Cdecl\n  parent: System.Runtime.InteropServices.CallingConvention\n  isExternal: false\n  name: Cdecl\n  nameWithType: CallingConvention.Cdecl\n  fullName: CallingConvention.Cdecl\n- uid: System.Runtime.InteropServices.CallingConvention\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: CallingConvention\n  nameWithType: CallingConvention\n  fullName: System.Runtime.InteropServices.CallingConvention\n- uid: System.Runtime.InteropServices.CallingConvention.FastCall\n  parent: System.Runtime.InteropServices.CallingConvention\n  isExternal: false\n  name: FastCall\n  nameWithType: CallingConvention.FastCall\n  fullName: CallingConvention.FastCall\n- uid: System.Runtime.InteropServices.CallingConvention.StdCall\n  parent: System.Runtime.InteropServices.CallingConvention\n  isExternal: false\n  name: StdCall\n  nameWithType: CallingConvention.StdCall\n  fullName: CallingConvention.StdCall\n- uid: System.Runtime.InteropServices.CallingConvention.ThisCall\n  parent: System.Runtime.InteropServices.CallingConvention\n  isExternal: false\n  name: ThisCall\n  nameWithType: CallingConvention.ThisCall\n  fullName: CallingConvention.ThisCall\n- uid: System.Runtime.InteropServices.CallingConvention.Winapi\n  parent: System.Runtime.InteropServices.CallingConvention\n  isExternal: false\n  name: Winapi\n  nameWithType: CallingConvention.Winapi\n  fullName: CallingConvention.Winapi\n"}