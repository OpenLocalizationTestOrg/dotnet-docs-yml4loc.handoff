{"nodes":[{"content":"Encapsulates a method that has six parameters and returns a value of the type specified by the <code>TResult</code> parameter.","nodes":[{"pos":[0,126],"content":"Encapsulates a method that has six parameters and returns a value of the type specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"Encapsulates a method that has six parameters and returns a value of the type specified by the <code>TResult</code> parameter."}],"pos":[368,495],"yaml":true},{"content":"You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have six parameters, each of which is passed to it by value, and that it must return a value.  \n  \n> [!NOTE]\n>  To reference a method that has six parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%606> delegate instead.  \n  \n You can also use the <xref:System.Func%607> delegate with anonymous methods and lambda expressions.  \n  \n The underlying type of a lambda expression is one of the generic `Func` delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.","nodes":[{"pos":[0,366],"content":"You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have six parameters, each of which is passed to it by value, and that it must return a value.","nodes":[{"content":"You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have six parameters, each of which is passed to it by value, and that it must return a value.","pos":[0,366],"nodes":[{"content":"You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.","pos":[0,129]},{"content":"The encapsulated method must correspond to the method signature that is defined by this delegate.","pos":[130,227]},{"content":"This means that the encapsulated method must have six parameters, each of which is passed to it by value, and that it must return a value.","pos":[228,366]}]}]},{"pos":[374,587],"content":"[!NOTE]\n To reference a method that has six parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%606> delegate instead.","leadings":["","> "],"nodes":[{"content":"To reference a method that has six parameters and returns <ph id=\"ph1\">`void`</ph> (or in Visual Basic, that is declared as a <ph id=\"ph2\">`Sub`</ph> rather than as a <ph id=\"ph3\">`Function`</ph>), use the generic <ph id=\"ph4\">&lt;xref:System.Action%606&gt;</ph> delegate instead.","pos":[9,211],"source":" To reference a method that has six parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%606> delegate instead."}]},{"pos":[594,693],"content":"You can also use the <xref:System.Func%607> delegate with anonymous methods and lambda expressions.","nodes":[{"content":"You can also use the <ph id=\"ph1\">&lt;xref:System.Func%607&gt;</ph> delegate with anonymous methods and lambda expressions.","pos":[0,99],"source":"You can also use the <xref:System.Func%607> delegate with anonymous methods and lambda expressions."}]},{"pos":[700,895],"content":"The underlying type of a lambda expression is one of the generic `Func` delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.","nodes":[{"content":"The underlying type of a lambda expression is one of the generic <ph id=\"ph1\">`Func`</ph> delegates.","pos":[0,82],"source":"The underlying type of a lambda expression is one of the generic `Func` delegates."},{"content":"This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.","pos":[83,195]}]}],"pos":[506,1411],"yaml":true,"extradata":"MT"},{"content":"The type of the first parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,78],"content":"The type of the first parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the first parameter of the method that this delegate encapsulates.","pos":[0,78]}]}],"pos":[1619,1698],"yaml":true},{"content":"The type of the second parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,79],"content":"The type of the second parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the second parameter of the method that this delegate encapsulates.","pos":[0,79]}]}],"pos":[1730,1810],"yaml":true},{"content":"The type of the third parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,78],"content":"The type of the third parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the third parameter of the method that this delegate encapsulates.","pos":[0,78]}]}],"pos":[1842,1921],"yaml":true},{"content":"The type of the fourth parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,79],"content":"The type of the fourth parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the fourth parameter of the method that this delegate encapsulates.","pos":[0,79]}]}],"pos":[1953,2033],"yaml":true},{"content":"The type of the fifth parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,78],"content":"The type of the fifth parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the fifth parameter of the method that this delegate encapsulates.","pos":[0,78]}]}],"pos":[2065,2144],"yaml":true},{"content":"The type of the sixth parameter of the method that this delegate encapsulates.","nodes":[{"pos":[0,78],"content":"The type of the sixth parameter of the method that this delegate encapsulates.","nodes":[{"content":"The type of the sixth parameter of the method that this delegate encapsulates.","pos":[0,78]}]}],"pos":[2176,2255],"yaml":true},{"content":"The type of the return value of the method that this delegate encapsulates.","nodes":[{"pos":[0,75],"content":"The type of the return value of the method that this delegate encapsulates.","nodes":[{"content":"The type of the return value of the method that this delegate encapsulates.","pos":[0,75]}]}],"pos":[2292,2368],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Func`7\n  commentId: T:System.Func`7\n  id: Func`7\n  langs:\n  - csharp\n  name: Func<T1,T2,T3,T4,T5,T6,TResult>\n  nameWithType: Func<T1,T2,T3,T4,T5,T6,TResult>\n  fullName: System.Func<T1,T2,T3,T4,T5,T6,TResult>\n  type: Delegate\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Encapsulates a method that has six parameters and returns a value of the type specified by the <code>TResult</code> parameter.\n  remarks: \"You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have six parameters, each of which is passed to it by value, and that it must return a value.  \\n  \\n> [!NOTE]\\n>  To reference a method that has six parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%606> delegate instead.  \\n  \\n You can also use the <xref:System.Func%607> delegate with anonymous methods and lambda expressions.  \\n  \\n The underlying type of a lambda expression is one of the generic `Func` delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.\"\n  syntax:\n    content: public delegate TResult Func<in T1,in T2,in T3,in T4,in T5,in T6,out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6);\n    typeParameters:\n    - id: T1\n      description: The type of the first parameter of the method that this delegate encapsulates.\n    - id: T2\n      description: The type of the second parameter of the method that this delegate encapsulates.\n    - id: T3\n      description: The type of the third parameter of the method that this delegate encapsulates.\n    - id: T4\n      description: The type of the fourth parameter of the method that this delegate encapsulates.\n    - id: T5\n      description: The type of the fifth parameter of the method that this delegate encapsulates.\n    - id: T6\n      description: The type of the sixth parameter of the method that this delegate encapsulates.\n    - id: TResult\n      description: The type of the return value of the method that this delegate encapsulates.\n  inheritance:\n  - System.Object\n  - System.Delegate\n  extensionMethods:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Func`7.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetMethodInfo(Delegate)\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n"}