{"nodes":[{"content":"Encapsulates a method that has no parameters and returns a value of the type specified by the <code>TResult</code> parameter.","nodes":[{"pos":[0,125],"content":"Encapsulates a method that has no parameters and returns a value of the type specified by the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">TResult</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter.","source":"Encapsulates a method that has no parameters and returns a value of the type specified by the <code>TResult</code> parameter."}],"pos":[314,440],"yaml":true},{"content":"You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have no parameters and must return a value.  \n  \n> [!NOTE]\n>  To reference a method that has no parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the <xref:System.Action> delegate instead.  \n  \n When you use the <xref:System.Func%601> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method. For example, the following code explicitly declares a delegate named `WriteMethod` and assigns a reference to the `OutputTarget.SendToFile` instance method to its delegate instance.  \n  \n [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]\n [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  \n  \n The following example simplifies this code by instantiating the <xref:System.Func%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.  \n  \n [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]\n [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  \n  \n You can use the <xref:System.Func%601> delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  \n  \n [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  \n  \n You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates. (For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  \n  \n [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]\n [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  \n  \n The underlying type of a lambda expression is one of the generic `Func` delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate. In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.  \n  \n If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref:System.Func%601> delegate. The execution of the function can then be delayed until a property that accesses the value is used in an expression. The example in the next section demonstrates how to do this.","nodes":[{"pos":[0,316],"content":"You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have no parameters and must return a value.","nodes":[{"content":"You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have no parameters and must return a value.","pos":[0,316],"nodes":[{"content":"You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate.","pos":[0,129]},{"content":"The encapsulated method must correspond to the method signature that is defined by this delegate.","pos":[130,227]},{"content":"This means that the encapsulated method must have no parameters and must return a value.","pos":[228,316]}]}]},{"pos":[324,524],"content":"[!NOTE]\n To reference a method that has no parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the <xref:System.Action> delegate instead.","leadings":["","> "],"nodes":[{"content":"To reference a method that has no parameters and returns <ph id=\"ph1\">`void`</ph> (or in Visual Basic, that is declared as a <ph id=\"ph2\">`Sub`</ph> rather than as a <ph id=\"ph3\">`Function`</ph>), use the <ph id=\"ph4\">&lt;xref:System.Action&gt;</ph> delegate instead.","pos":[9,198],"source":" To reference a method that has no parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the <xref:System.Action> delegate instead."}]},{"pos":[531,852],"content":"When you use the <xref:System.Func%601> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method. For example, the following code explicitly declares a delegate named `WriteMethod` and assigns a reference to the `OutputTarget.SendToFile` instance method to its delegate instance.","nodes":[{"content":"When you use the <ph id=\"ph1\">&lt;xref:System.Func%601&gt;</ph> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method.","pos":[0,139],"source":"When you use the <xref:System.Func%601> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method."},{"content":"For example, the following code explicitly declares a delegate named <ph id=\"ph1\">`WriteMethod`</ph> and assigns a reference to the <ph id=\"ph2\">`OutputTarget.SendToFile`</ph> instance method to its delegate instance.","pos":[140,321],"source":" For example, the following code explicitly declares a delegate named `WriteMethod` and assigns a reference to the `OutputTarget.SendToFile` instance method to its delegate instance."}]},{"pos":[859,1086],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Func~1#1<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Func~1#1<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]\n [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]"},{"pos":[1093,1270],"content":"The following example simplifies this code by instantiating the <xref:System.Func%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.","nodes":[{"content":"The following example simplifies this code by instantiating the <ph id=\"ph1\">&lt;xref:System.Func%601&gt;</ph> delegate instead of explicitly defining a new delegate and assigning a named method to it.","pos":[0,177],"source":"The following example simplifies this code by instantiating the <xref:System.Func%601> delegate instead of explicitly defining a new delegate and assigning a named method to it."}]},{"pos":[1277,1498],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Func~1#2<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Func~1#2<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]\n [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]"},{"pos":[1505,1776],"content":"You can use the <xref:System.Func%601> delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)","nodes":[{"content":"You can use the <ph id=\"ph1\">&lt;xref:System.Func%601&gt;</ph> delegate with anonymous methods in C#, as the following example illustrates.","pos":[0,115],"source":"You can use the <xref:System.Func%601> delegate with anonymous methods in C#, as the following example illustrates."},{"content":"(For an introduction to anonymous methods, see <bpt id=\"p1\">[</bpt>Anonymous Methods<ept id=\"p1\">](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md)</ept>.)","pos":[116,271],"source":" (For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)"}]},{"pos":[1783,1891],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Func~1#3<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)</ept><ept id=\"p1\">]</ept>","source":"[!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]"},{"pos":[1898,2287],"content":"You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates. (For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)","nodes":[{"content":"You can also assign a lambda expression to a <ph id=\"ph1\">&lt;xref:System.Func%602&gt;</ph> delegate, as the following example illustrates.","pos":[0,115],"source":"You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates."},{"content":"(For an introduction to lambda expressions, see <bpt id=\"p1\">[</bpt>Lambda Expressions<ept id=\"p1\">](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md)</ept> and <bpt id=\"p2\">[</bpt>Lambda Expressions<ept id=\"p2\">](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md)</ept>.)","pos":[116,389],"source":" (For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)"}]},{"pos":[2294,2517],"content":"<bpt id=\"p1\">[!code-csharp</bpt><bpt id=\"p2\">[</bpt>System.Func~1#4<ept id=\"p2\">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)</ept><ept id=\"p1\">]</ept> <bpt id=\"p3\">[!code-vb</bpt><bpt id=\"p4\">[</bpt>System.Func~1#4<ept id=\"p4\">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)</ept><ept id=\"p3\">]</ept>","source":"[!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]\n [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]"},{"pos":[2524,2923],"content":"The underlying type of a lambda expression is one of the generic `Func` delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate. In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.","nodes":[{"content":"The underlying type of a lambda expression is one of the generic <ph id=\"ph1\">`Func`</ph> delegates.","pos":[0,82],"source":"The underlying type of a lambda expression is one of the generic `Func` delegates."},{"content":"This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.","pos":[83,195]},{"content":"In particular, because many methods of types in the <ph id=\"ph1\">&lt;xref:System.Linq&gt;</ph> namespace have <ph id=\"ph2\">`Func`</ph> parameters, you can pass these methods a lambda expression without explicitly instantiating a <ph id=\"ph3\">`Func`</ph> delegate.","pos":[196,399],"source":" In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate."}]},{"pos":[2930,3284],"content":"If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref:System.Func%601> delegate. The execution of the function can then be delayed until a property that accesses the value is used in an expression. The example in the next section demonstrates how to do this.","nodes":[{"content":"If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref:System.Func%601> delegate. The execution of the function can then be delayed until a property that accesses the value is used in an expression. The example in the next section demonstrates how to do this.","pos":[0,354],"nodes":[{"content":"If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <ph id=\"ph1\">&lt;xref:System.Func%601&gt;</ph> delegate.","pos":[0,176],"source":"If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref:System.Func%601> delegate."},{"content":"The execution of the function can then be delayed until a property that accesses the value is used in an expression.","pos":[177,293]},{"content":"The example in the next section demonstrates how to do this.","pos":[294,354]}]}]}],"pos":[451,3764],"yaml":true,"extradata":"MT"},{"content":"The type of the return value of the method that this delegate encapsulates.","nodes":[{"pos":[0,75],"content":"The type of the return value of the method that this delegate encapsulates.","nodes":[{"content":"The type of the return value of the method that this delegate encapsulates.","pos":[0,75]}]}],"pos":[4957,5033],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Func`1\n  commentId: T:System.Func`1\n  id: Func`1\n  langs:\n  - csharp\n  name: Func<TResult>\n  nameWithType: Func<TResult>\n  fullName: System.Func<TResult>\n  type: Delegate\n  assemblies:\n  - System.Runtime\n  - mscorlib\n  - netstandard\n  namespace: System\n  summary: Encapsulates a method that has no parameters and returns a value of the type specified by the <code>TResult</code> parameter.\n  remarks: \"You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have no parameters and must return a value.  \\n  \\n> [!NOTE]\\n>  To reference a method that has no parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the <xref:System.Action> delegate instead.  \\n  \\n When you use the <xref:System.Func%601> delegate, you do not have to explicitly define a delegate that encapsulates a parameterless method. For example, the following code explicitly declares a delegate named `WriteMethod` and assigns a reference to the `OutputTarget.SendToFile` instance method to its delegate instance.  \\n  \\n [!code-csharp[System.Func~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Delegate.cs#1)]\\n [!code-vb[System.Func~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Delegate.vb#1)]  \\n  \\n The following example simplifies this code by instantiating the <xref:System.Func%601> delegate instead of explicitly defining a new delegate and assigning a named method to it.  \\n  \\n [!code-csharp[System.Func~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Func1.cs#2)]\\n [!code-vb[System.Func~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Func1.vb#2)]  \\n  \\n You can use the <xref:System.Func%601> delegate with anonymous methods in C#, as the following example illustrates. (For an introduction to anonymous methods, see [Anonymous Methods](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  \\n  \\n [!code-csharp[System.Func~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Anon.cs#3)]  \\n  \\n You can also assign a lambda expression to a <xref:System.Func%602> delegate, as the following example illustrates. (For an introduction to lambda expressions, see [Lambda Expressions](~/docs/visual-basic/programming-guide/language-features/procedures/lambda-expressions.md) and [Lambda Expressions](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  \\n  \\n [!code-csharp[System.Func~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Lambda.cs#4)]\\n [!code-vb[System.Func~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Lambda.vb#4)]  \\n  \\n The underlying type of a lambda expression is one of the generic `Func` delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate. In particular, because many methods of types in the <xref:System.Linq> namespace have `Func` parameters, you can pass these methods a lambda expression without explicitly instantiating a `Func` delegate.  \\n  \\n If you have an expensive computation that you want to execute only if the result is actually needed, you can assign the expensive function to a <xref:System.Func%601> delegate. The execution of the function can then be delayed until a property that accesses the value is used in an expression. The example in the next section demonstrates how to do this.\"\n  example:\n  - \"The following example demonstrates how to use a delegate that takes no parameters. This code creates a generic class named `LazyValue` that has a field of type <xref:System.Func%601>. This delegate field can store a reference to any function that returns a value of the type that corresponds to the type parameter of the `LazyValue` object. The `LazyValue` type also has a `Value` property that executes the function (if it has not already been executed) and returns the resulting value.  \\n  \\n The example creates two methods and instantiates two `LazyValue` objects with lambda expressions that call these methods. The lambda expressions do not take parameters because they just need to call a method. As the output shows, the two methods are executed only when the value of each `LazyValue` object is retrieved.  \\n  \\n [!code-csharp[System.Func~1#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Func~1/cs/Example.cs#5)]\\n [!code-vb[System.Func~1#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Func~1/vb/Example.vb#5)]\"\n  syntax:\n    content: public delegate TResult Func<out TResult>();\n    typeParameters:\n    - id: TResult\n      description: The type of the return value of the method that this delegate encapsulates.\n  inheritance:\n  - System.Object\n  - System.Delegate\n  extensionMethods:\n  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  attributes: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.5\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System/Func`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  nameWithType: Delegate\n  fullName: System.Delegate\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetMethodInfo(Delegate)\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  fullName: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n"}