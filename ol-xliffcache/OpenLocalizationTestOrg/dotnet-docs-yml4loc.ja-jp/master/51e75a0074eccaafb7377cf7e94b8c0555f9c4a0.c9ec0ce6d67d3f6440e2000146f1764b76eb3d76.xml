{"nodes":[{"content":"Provides a base class for implementations of the <xref href=\"System.Collections.Generic.IComparer`1\"></xref> generic interface.","nodes":[{"pos":[0,127],"content":"Provides a base class for implementations of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.IComparer`1\"&gt;&lt;/xref&gt;</ph> generic interface.","source":"Provides a base class for implementations of the <xref href=\"System.Collections.Generic.IComparer`1\"></xref> generic interface."}],"pos":[748,876],"yaml":true},{"content":"Derive from this class to provide a custom implementation of the <xref:System.Collections.Generic.IComparer%601> interface for use with collection classes such as the <xref:System.Collections.Generic.SortedList%602> and <xref:System.Collections.Generic.SortedDictionary%602> generic classes.  \n  \n The difference between deriving from the <xref:System.Collections.Generic.Comparer%601> class and implementing the <xref:System.IComparable?displayProperty=fullName> interface is as follows:  \n  \n-   To specify how two objects should be compared by default, implement the <xref:System.IComparable?displayProperty=fullName> interface in your class. This ensures that sort operations will use the default comparison code that you provided.  \n  \n-   To define a comparer to use instead of the default comparer, derive from the <xref:System.Collections.Generic.Comparer%601> class. You can then use this comparer in sort operations that take a comparer as a parameter.  \n  \n The object returned by the <xref:System.Collections.Generic.Comparer%601.Default%2A> property uses the <xref:System.IComparable%601?displayProperty=fullName> generic interface (`IComparable<T>` in C#, `IComparable(Of T)` in Visual Basic) to compare two objects. If type `T` does not implement the <xref:System.IComparable%601?displayProperty=fullName> generic interface, the <xref:System.Collections.Generic.Comparer%601.Default%2A> property returns a <xref:System.Collections.Generic.Comparer%601> that uses the <xref:System.IComparable?displayProperty=fullName> interface.","nodes":[{"pos":[0,291],"content":"Derive from this class to provide a custom implementation of the <xref:System.Collections.Generic.IComparer%601> interface for use with collection classes such as the <xref:System.Collections.Generic.SortedList%602> and <xref:System.Collections.Generic.SortedDictionary%602> generic classes.","nodes":[{"content":"Derive from this class to provide a custom implementation of the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.IComparer%601&gt;</ph> interface for use with collection classes such as the <ph id=\"ph2\">&lt;xref:System.Collections.Generic.SortedList%602&gt;</ph> and <ph id=\"ph3\">&lt;xref:System.Collections.Generic.SortedDictionary%602&gt;</ph> generic classes.","pos":[0,291],"source":"Derive from this class to provide a custom implementation of the <xref:System.Collections.Generic.IComparer%601> interface for use with collection classes such as the <xref:System.Collections.Generic.SortedList%602> and <xref:System.Collections.Generic.SortedDictionary%602> generic classes."}]},{"pos":[298,488],"content":"The difference between deriving from the <xref:System.Collections.Generic.Comparer%601> class and implementing the <xref:System.IComparable?displayProperty=fullName> interface is as follows:","nodes":[{"content":"The difference between deriving from the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601&gt;</ph> class and implementing the <ph id=\"ph2\">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph> interface is as follows:","pos":[0,190],"source":"The difference between deriving from the <xref:System.Collections.Generic.Comparer%601> class and implementing the <xref:System.IComparable?displayProperty=fullName> interface is as follows:"}]},{"pos":[498,735],"content":"To specify how two objects should be compared by default, implement the <xref:System.IComparable?displayProperty=fullName> interface in your class. This ensures that sort operations will use the default comparison code that you provided.","nodes":[{"content":"To specify how two objects should be compared by default, implement the <xref:System.IComparable?displayProperty=fullName> interface in your class. This ensures that sort operations will use the default comparison code that you provided.","pos":[0,237],"nodes":[{"content":"To specify how two objects should be compared by default, implement the <ph id=\"ph1\">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph> interface in your class.","pos":[0,147],"source":"To specify how two objects should be compared by default, implement the <xref:System.IComparable?displayProperty=fullName> interface in your class."},{"content":"This ensures that sort operations will use the default comparison code that you provided.","pos":[148,237]}]}]},{"pos":[745,962],"content":"To define a comparer to use instead of the default comparer, derive from the <xref:System.Collections.Generic.Comparer%601> class. You can then use this comparer in sort operations that take a comparer as a parameter.","nodes":[{"content":"To define a comparer to use instead of the default comparer, derive from the <xref:System.Collections.Generic.Comparer%601> class. You can then use this comparer in sort operations that take a comparer as a parameter.","pos":[0,217],"nodes":[{"content":"To define a comparer to use instead of the default comparer, derive from the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601&gt;</ph> class.","pos":[0,130],"source":"To define a comparer to use instead of the default comparer, derive from the <xref:System.Collections.Generic.Comparer%601> class."},{"content":"You can then use this comparer in sort operations that take a comparer as a parameter.","pos":[131,217]}]}]},{"pos":[969,1543],"content":"The object returned by the <xref:System.Collections.Generic.Comparer%601.Default%2A> property uses the <xref:System.IComparable%601?displayProperty=fullName> generic interface (`IComparable<T>` in C#, `IComparable(Of T)` in Visual Basic) to compare two objects. If type `T` does not implement the <xref:System.IComparable%601?displayProperty=fullName> generic interface, the <xref:System.Collections.Generic.Comparer%601.Default%2A> property returns a <xref:System.Collections.Generic.Comparer%601> that uses the <xref:System.IComparable?displayProperty=fullName> interface.","nodes":[{"content":"The object returned by the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> property uses the <ph id=\"ph2\">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> generic interface (<ph id=\"ph3\">`IComparable&lt;T&gt;`</ph> in C#, <ph id=\"ph4\">`IComparable(Of T)`</ph> in Visual Basic) to compare two objects.","pos":[0,261],"source":"The object returned by the <xref:System.Collections.Generic.Comparer%601.Default%2A> property uses the <xref:System.IComparable%601?displayProperty=fullName> generic interface (`IComparable<T>` in C#, `IComparable(Of T)` in Visual Basic) to compare two objects."},{"content":"If type <ph id=\"ph1\">`T`</ph> does not implement the <ph id=\"ph2\">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> generic interface, the <ph id=\"ph3\">&lt;xref:System.Collections.Generic.Comparer%601.Default%2A&gt;</ph> property returns a <ph id=\"ph4\">&lt;xref:System.Collections.Generic.Comparer%601&gt;</ph> that uses the <ph id=\"ph5\">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph> interface.","pos":[262,574],"source":" If type `T` does not implement the <xref:System.IComparable%601?displayProperty=fullName> generic interface, the <xref:System.Collections.Generic.Comparer%601.Default%2A> property returns a <xref:System.Collections.Generic.Comparer%601> that uses the <xref:System.IComparable?displayProperty=fullName> interface."}]}],"pos":[887,2441],"yaml":true,"extradata":"MT"},{"content":"The type of objects to compare.","nodes":[{"pos":[0,31],"content":"The type of objects to compare.","nodes":[{"content":"The type of objects to compare.","pos":[0,31]}]}],"pos":[3607,3639],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Collections.Generic.Comparer`1\"></xref> class.","nodes":[{"pos":[0,99],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Comparer`1\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Collections.Generic.Comparer`1\"></xref> class."}],"pos":[5523,5623],"yaml":true},{"content":"When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.","nodes":[{"pos":[0,190],"content":"When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.","nodes":[{"content":"When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.","pos":[0,190]}]}],"pos":[7248,7439],"yaml":true},{"content":"Implement this method to provide a customized sort order comparison for type `T`.","nodes":[{"pos":[0,81],"content":"Implement this method to provide a customized sort order comparison for type <ph id=\"ph1\">`T`</ph>.","source":"Implement this method to provide a customized sort order comparison for type `T`."}],"pos":[7450,7532],"yaml":true,"extradata":"MT"},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[8224,8253],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[8298,8328],"yaml":true},{"content":"A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>x</code> is less than <code>y</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>x</code> equals <code>y</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>x</code> is greater than <code>y</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,122],"content":"A signed integer that indicates the relative values of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table."},{"pos":[129,517],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>x</code> is less than <code>y</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>x</code> equals <code>y</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>x</code> is greater than <code>y</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Meaning","pos":[45,57],"source":" Meaning  \n  \n "},{"content":"Less than zero","pos":[93,112],"source":" Less than zero  \n  \n "},{"content":"<code>x</code> is less than <code>y</code>.  \n  \n ","pos":[123,173],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph>.","pos":[0,43],"source":"<code>x</code> is less than <code>y</code>."}]},{"content":"Zero","pos":[192,201],"source":" Zero  \n  \n "},{"content":"<code>x</code> equals <code>y</code>.  \n  \n ","pos":[212,256],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> equals <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph>.","pos":[0,37],"source":"<code>x</code> equals <code>y</code>."}]},{"content":"Greater than zero","pos":[275,297],"source":" Greater than zero  \n  \n "},{"content":"<code>x</code> is greater than <code>y</code>.  \n  \n ","pos":[308,361],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph>.","pos":[0,46],"source":"<code>x</code> is greater than <code>y</code>."}]}]}],"pos":[8384,8921],"yaml":true},{"content":"Type <code>T</code> does not implement either the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface.","nodes":[{"pos":[0,167],"content":"Type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept> does not implement either the <ph id=\"ph2\">&lt;xref href=\"System.IComparable`1\"&gt;&lt;/xref&gt;</ph> generic interface or the <ph id=\"ph3\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface.","source":"Type <code>T</code> does not implement either the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface."}],"pos":[9088,9256],"yaml":true},{"content":"Creates a comparer by using the specified comparison.","nodes":[{"pos":[0,53],"content":"Creates a comparer by using the specified comparison.","nodes":[{"content":"Creates a comparer by using the specified comparison.","pos":[0,53]}]}],"pos":[10811,10865],"yaml":true},{"content":"The comparison to use.","nodes":[{"pos":[0,22],"content":"The comparison to use.","nodes":[{"content":"The comparison to use.","pos":[0,22]}]}],"pos":[11064,11087],"yaml":true},{"content":"The new comparer.","nodes":[{"pos":[0,17],"content":"The new comparer.","nodes":[{"content":"The new comparer.","pos":[0,17]}]}],"pos":[11168,11186],"yaml":true},{"content":"Returns a default sort order comparer for the type specified by the generic argument.","nodes":[{"pos":[0,85],"content":"Returns a default sort order comparer for the type specified by the generic argument.","nodes":[{"content":"Returns a default sort order comparer for the type specified by the generic argument.","pos":[0,85]}]}],"pos":[12710,12796],"yaml":true},{"content":"The <xref:System.Collections.Generic.Comparer%601> returned by this property uses the <xref:System.IComparable%601?displayProperty=fullName> generic interface (`IComparable<T>` in C#, `IComparable(Of T)` in Visual Basic) to compare two objects. If type `T` does not implement the <xref:System.IComparable%601?displayProperty=fullName> generic interface, this property returns a <xref:System.Collections.Generic.Comparer%601> that uses the <xref:System.IComparable?displayProperty=fullName> interface.","nodes":[{"pos":[0,500],"content":"The <xref:System.Collections.Generic.Comparer%601> returned by this property uses the <xref:System.IComparable%601?displayProperty=fullName> generic interface (`IComparable<T>` in C#, `IComparable(Of T)` in Visual Basic) to compare two objects. If type `T` does not implement the <xref:System.IComparable%601?displayProperty=fullName> generic interface, this property returns a <xref:System.Collections.Generic.Comparer%601> that uses the <xref:System.IComparable?displayProperty=fullName> interface.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601&gt;</ph> returned by this property uses the <ph id=\"ph2\">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> generic interface (<ph id=\"ph3\">`IComparable&lt;T&gt;`</ph> in C#, <ph id=\"ph4\">`IComparable(Of T)`</ph> in Visual Basic) to compare two objects.","pos":[0,244],"source":"The <xref:System.Collections.Generic.Comparer%601> returned by this property uses the <xref:System.IComparable%601?displayProperty=fullName> generic interface (`IComparable<T>` in C#, `IComparable(Of T)` in Visual Basic) to compare two objects."},{"content":"If type <ph id=\"ph1\">`T`</ph> does not implement the <ph id=\"ph2\">&lt;xref:System.IComparable%601?displayProperty=fullName&gt;</ph> generic interface, this property returns a <ph id=\"ph3\">&lt;xref:System.Collections.Generic.Comparer%601&gt;</ph> that uses the <ph id=\"ph4\">&lt;xref:System.IComparable?displayProperty=fullName&gt;</ph> interface.","pos":[245,500],"source":" If type `T` does not implement the <xref:System.IComparable%601?displayProperty=fullName> generic interface, this property returns a <xref:System.Collections.Generic.Comparer%601> that uses the <xref:System.IComparable?displayProperty=fullName> interface."}]}],"pos":[12807,13308],"yaml":true,"extradata":"MT"},{"content":"An object that inherits <xref href=\"System.Collections.Generic.Comparer`1\"></xref> and serves as a sort order comparer for type <code>T</code>.","nodes":[{"pos":[0,143],"content":"An object that inherits <ph id=\"ph1\">&lt;xref href=\"System.Collections.Generic.Comparer`1\"&gt;&lt;/xref&gt;</ph> and serves as a sort order comparer for type <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">T</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An object that inherits <xref href=\"System.Collections.Generic.Comparer`1\"></xref> and serves as a sort order comparer for type <code>T</code>."}],"pos":[14107,14251],"yaml":true},{"content":"Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.","nodes":[{"pos":[0,114],"content":"Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.","nodes":[{"content":"Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.","pos":[0,114]}]}],"pos":[16040,16155],"yaml":true},{"content":"This method is a wrapper for the <xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29> method, so `obj` must be cast to the type specified by the generic argument `T` of the current instance. If it cannot be cast to `T`, an <xref:System.ArgumentException> is thrown.  \n  \n Comparing `null` with any reference type is allowed and does not generate an exception. When sorting, `null` is considered to be less than any other object.","nodes":[{"pos":[0,284],"content":"This method is a wrapper for the <xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29> method, so `obj` must be cast to the type specified by the generic argument `T` of the current instance. If it cannot be cast to `T`, an <xref:System.ArgumentException> is thrown.","nodes":[{"content":"This method is a wrapper for the <ph id=\"ph1\">&lt;xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29&gt;</ph> method, so <ph id=\"ph2\">`obj`</ph> must be cast to the type specified by the generic argument <ph id=\"ph3\">`T`</ph> of the current instance.","pos":[0,209],"source":"This method is a wrapper for the <xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29> method, so `obj` must be cast to the type specified by the generic argument `T` of the current instance."},{"content":"If it cannot be cast to <ph id=\"ph1\">`T`</ph>, an <ph id=\"ph2\">&lt;xref:System.ArgumentException&gt;</ph> is thrown.","pos":[210,284],"source":" If it cannot be cast to `T`, an <xref:System.ArgumentException> is thrown."}]},{"pos":[291,447],"content":"Comparing `null` with any reference type is allowed and does not generate an exception. When sorting, `null` is considered to be less than any other object.","nodes":[{"content":"Comparing <ph id=\"ph1\">`null`</ph> with any reference type is allowed and does not generate an exception.","pos":[0,87],"source":"Comparing `null` with any reference type is allowed and does not generate an exception."},{"content":"When sorting, <ph id=\"ph1\">`null`</ph> is considered to be less than any other object.","pos":[88,156],"source":" When sorting, `null` is considered to be less than any other object."}]}],"pos":[16166,16618],"yaml":true,"extradata":"MT"},{"content":"The first object to compare.","nodes":[{"pos":[0,28],"content":"The first object to compare.","nodes":[{"content":"The first object to compare.","pos":[0,28]}]}],"pos":[17385,17414],"yaml":true},{"content":"The second object to compare.","nodes":[{"pos":[0,29],"content":"The second object to compare.","nodes":[{"content":"The second object to compare.","pos":[0,29]}]}],"pos":[17471,17501],"yaml":true},{"content":"A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  \n  \n <table><thead><tr><th> Value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>x</code> is less than <code>y</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>x</code> equals <code>y</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>x</code> is greater than <code>y</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"pos":[0,122],"content":"A signed integer that indicates the relative values of <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">x</ph><ept id=\"p1\">&lt;/code&gt;</ept> and <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">y</ph><ept id=\"p2\">&lt;/code&gt;</ept>, as shown in the following table.","source":"A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table."},{"pos":[129,517],"content":"<table><thead><tr><th> Value  \n  \n </th><th> Meaning  \n  \n </th></tr></thead><tbody><tr><td> Less than zero  \n  \n </td><td><code>x</code> is less than <code>y</code>.  \n  \n </td></tr><tr><td> Zero  \n  \n </td><td><code>x</code> equals <code>y</code>.  \n  \n </td></tr><tr><td> Greater than zero  \n  \n </td><td><code>x</code> is greater than <code>y</code>.  \n  \n </td></tr></tbody></table>","nodes":[{"content":"Value","pos":[23,33],"source":" Value  \n  \n "},{"content":"Meaning","pos":[45,57],"source":" Meaning  \n  \n "},{"content":"Less than zero","pos":[93,112],"source":" Less than zero  \n  \n "},{"content":"<code>x</code> is less than <code>y</code>.  \n  \n ","pos":[123,173],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> is less than <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph>.","pos":[0,43],"source":"<code>x</code> is less than <code>y</code>."}]},{"content":"Zero","pos":[192,201],"source":" Zero  \n  \n "},{"content":"<code>x</code> equals <code>y</code>.  \n  \n ","pos":[212,256],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> equals <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph>.","pos":[0,37],"source":"<code>x</code> equals <code>y</code>."}]},{"content":"Greater than zero","pos":[275,297],"source":" Greater than zero  \n  \n "},{"content":"<code>x</code> is greater than <code>y</code>.  \n  \n ","pos":[308,361],"nodes":[{"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> is greater than <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph>.","pos":[0,46],"source":"<code>x</code> is greater than <code>y</code>."}]}]}],"pos":[17557,18094],"yaml":true},{"content":"<code>x</code> or <code>y</code> is of a type that cannot be cast to type <code>T</code>.  \n  \n -or-  \n  \n <code>x</code> and <code>y</code> do not implement either the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface.","nodes":[{"pos":[0,89],"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> or <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph> is of a type that cannot be cast to type <ph id=\"ph3\">&lt;code&gt;T&lt;/code&gt;</ph>.","source":"<code>x</code> or <code>y</code> is of a type that cannot be cast to type <code>T</code>."},{"pos":[96,100],"content":"-or-","nodes":[{"content":"-or-","pos":[0,4]}]},{"pos":[107,286],"content":"<ph id=\"ph1\">&lt;code&gt;x&lt;/code&gt;</ph> and <ph id=\"ph2\">&lt;code&gt;y&lt;/code&gt;</ph> do not implement either the <ph id=\"ph3\">&lt;xref href=\"System.IComparable`1\"&gt;&lt;/xref&gt;</ph> generic interface or the <ph id=\"ph4\">&lt;xref href=\"System.IComparable\"&gt;&lt;/xref&gt;</ph> interface.","source":"<code>x</code> and <code>y</code> do not implement either the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface."}],"pos":[18290,18587],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Collections.Generic.Comparer`1\n  commentId: T:System.Collections.Generic.Comparer`1\n  id: Comparer`1\n  children:\n  - System.Collections.Generic.Comparer`1.#ctor\n  - System.Collections.Generic.Comparer`1.Compare(`0,`0)\n  - System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})\n  - System.Collections.Generic.Comparer`1.Default\n  - System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)\n  langs:\n  - csharp\n  name: Comparer<T>\n  nameWithType: Comparer<T>\n  fullName: System.Collections.Generic.Comparer<T>\n  type: Class\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Provides a base class for implementations of the <xref href=\"System.Collections.Generic.IComparer`1\"></xref> generic interface.\n  remarks: \"Derive from this class to provide a custom implementation of the <xref:System.Collections.Generic.IComparer%601> interface for use with collection classes such as the <xref:System.Collections.Generic.SortedList%602> and <xref:System.Collections.Generic.SortedDictionary%602> generic classes.  \\n  \\n The difference between deriving from the <xref:System.Collections.Generic.Comparer%601> class and implementing the <xref:System.IComparable?displayProperty=fullName> interface is as follows:  \\n  \\n-   To specify how two objects should be compared by default, implement the <xref:System.IComparable?displayProperty=fullName> interface in your class. This ensures that sort operations will use the default comparison code that you provided.  \\n  \\n-   To define a comparer to use instead of the default comparer, derive from the <xref:System.Collections.Generic.Comparer%601> class. You can then use this comparer in sort operations that take a comparer as a parameter.  \\n  \\n The object returned by the <xref:System.Collections.Generic.Comparer%601.Default%2A> property uses the <xref:System.IComparable%601?displayProperty=fullName> generic interface (`IComparable<T>` in C#, `IComparable(Of T)` in Visual Basic) to compare two objects. If type `T` does not implement the <xref:System.IComparable%601?displayProperty=fullName> generic interface, the <xref:System.Collections.Generic.Comparer%601.Default%2A> property returns a <xref:System.Collections.Generic.Comparer%601> that uses the <xref:System.IComparable?displayProperty=fullName> interface.\"\n  example:\n  - \"The following example derives a class, `BoxLengthFirst`, from the <xref:System.Collections.Generic.Comparer%601> class. This comparer compares two objects of type `Box`. It sorts them first by length, then by height, and then by width. The `Box` class implements the <xref:System.IComparable%601> interface to control the default comparison between two `Box` objects. This default implementation sorts first by height, then by length, and then by width. The example shows the differences between the two comparisons by sorting a list of `Box` objects first by using the `BoxLengthFirst` comparer and then by using the default comparer.  \\n  \\n [!code-csharp[System.Collections.Generic.BoxCompare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#1)]\\n [!code-vb[System.Collections.Generic.BoxCompare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#1)]\"\n  syntax:\n    content: 'public abstract class Comparer<T> : System.Collections.Generic.IComparer<T>, System.Collections.IComparer'\n    typeParameters:\n    - id: T\n      description: The type of objects to compare.\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.IComparer{T}\n  - System.Collections.IComparer\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/Comparer`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.Comparer`1.#ctor\n  commentId: M:System.Collections.Generic.Comparer`1.#ctor\n  id: '#ctor'\n  parent: System.Collections.Generic.Comparer`1\n  langs:\n  - csharp\n  name: Comparer<T>()\n  nameWithType: Comparer<T>.Comparer<T>()\n  fullName: Comparer<T>.Comparer<T>()\n  type: Constructor\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Initializes a new instance of the <xref href=\"System.Collections.Generic.Comparer`1\"></xref> class.\n  syntax:\n    content: protected Comparer ();\n    parameters: []\n  overload: System.Collections.Generic.Comparer`1.#ctor*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/Comparer`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.Comparer`1.Compare(`0,`0)\n  commentId: M:System.Collections.Generic.Comparer`1.Compare(`0,`0)\n  id: Compare(`0,`0)\n  parent: System.Collections.Generic.Comparer`1\n  langs:\n  - csharp\n  name: Compare(T, T)\n  nameWithType: Comparer<T>.Compare(T, T)\n  fullName: Comparer<T>.Compare(T, T)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.\n  remarks: Implement this method to provide a customized sort order comparison for type `T`.\n  example:\n  - \"The following example defines a comparer of `Box` objects that can be used instead of the default comparer. This example is part of a larger example provided for the <xref:System.Collections.Generic.Comparer%601> class.  \\n  \\n [!code-csharp[System.Collections.Generic.BoxCompare#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#5)]\\n [!code-vb[System.Collections.Generic.BoxCompare#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#5)]\"\n  syntax:\n    content: public abstract int Compare (T x, T y);\n    parameters:\n    - id: x\n      type: T\n      description: The first object to compare.\n    - id: y\n      type: T\n      description: The second object to compare.\n    return:\n      type: System.Int32\n      description: \"A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Meaning  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td><code>x</code> is less than <code>y</code>.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td><code>x</code> equals <code>y</code>.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td><code>x</code> is greater than <code>y</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Collections.Generic.Comparer`1.Compare*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Type <code>T</code> does not implement either the <xref href=\"System.IComparable`1\"></xref> generic interface or the <xref href=\"System.IComparable\"></xref> interface.\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/Comparer`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})\n  commentId: M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})\n  id: Create(System.Comparison{`0})\n  parent: System.Collections.Generic.Comparer`1\n  langs:\n  - csharp\n  name: Create(Comparison<T>)\n  nameWithType: Comparer<T>.Create(Comparison<T>)\n  fullName: Comparer<T>.Create(Comparison<T>)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Creates a comparer by using the specified comparison.\n  syntax:\n    content: public static System.Collections.Generic.Comparer<T> Create (Comparison<T> comparison);\n    parameters:\n    - id: comparison\n      type: System.Comparison`1\n      description: The comparison to use.\n    return:\n      type: System.Collections.Generic.Comparer`1\n      description: The new comparer.\n  overload: System.Collections.Generic.Comparer`1.Create*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/Comparer`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.Comparer`1.Default\n  commentId: P:System.Collections.Generic.Comparer`1.Default\n  id: Default\n  parent: System.Collections.Generic.Comparer`1\n  langs:\n  - csharp\n  name: Default\n  nameWithType: Comparer<T>.Default\n  fullName: Comparer<T>.Default\n  type: Property\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Returns a default sort order comparer for the type specified by the generic argument.\n  remarks: The <xref:System.Collections.Generic.Comparer%601> returned by this property uses the <xref:System.IComparable%601?displayProperty=fullName> generic interface (`IComparable<T>` in C#, `IComparable(Of T)` in Visual Basic) to compare two objects. If type `T` does not implement the <xref:System.IComparable%601?displayProperty=fullName> generic interface, this property returns a <xref:System.Collections.Generic.Comparer%601> that uses the <xref:System.IComparable?displayProperty=fullName> interface.\n  example:\n  - \"The following example shows how to use the <xref:System.Collections.Generic.Comparer%601.Default%2A> property to get an object that performs the default comparison. This example is part of a larger example provided for the <xref:System.Collections.Generic.Comparer%601> class.  \\n  \\n [!code-csharp[System.Collections.Generic.BoxCompare#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#3)]\\n [!code-vb[System.Collections.Generic.BoxCompare#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#3)]\"\n  syntax:\n    content: public static System.Collections.Generic.Comparer<T> Default { get; }\n    return:\n      type: System.Collections.Generic.Comparer`1\n      description: An object that inherits <xref href=\"System.Collections.Generic.Comparer`1\"></xref> and serves as a sort order comparer for type <code>T</code>.\n  overload: System.Collections.Generic.Comparer`1.Default*\n  exceptions: []\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/Comparer`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\n- uid: System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)\n  commentId: M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)\n  id: System#Collections#IComparer#Compare(System.Object,System.Object)\n  isEii: true\n  parent: System.Collections.Generic.Comparer`1\n  langs:\n  - csharp\n  name: IComparer.Compare(Object, Object)\n  nameWithType: Comparer<T>.IComparer.Compare(Object, Object)\n  fullName: Comparer<T>.IComparer.Compare(Object, Object)\n  type: Method\n  assemblies:\n  - System.Collections\n  - mscorlib\n  - netstandard\n  namespace: System.Collections.Generic\n  summary: Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.\n  remarks: \"This method is a wrapper for the <xref:System.Collections.Generic.Comparer%601.Compare%28%600%2C%600%29> method, so `obj` must be cast to the type specified by the generic argument `T` of the current instance. If it cannot be cast to `T`, an <xref:System.ArgumentException> is thrown.  \\n  \\n Comparing `null` with any reference type is allowed and does not generate an exception. When sorting, `null` is considered to be less than any other object.\"\n  example:\n  - \"The following example shows how to use the <xref:System.Collections.Generic.Comparer%601.System%23Collections%23IComparer%23Compare%2A> method to compare two objects. This example is part of a larger example provided for the <xref:System.Collections.Generic.Comparer%601> class.  \\n  \\n [!code-csharp[System.Collections.Generic.BoxCompare#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.generic.boxcompare/cs/program.cs#4)]\\n [!code-vb[System.Collections.Generic.BoxCompare#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.generic.boxcompare/vb/program.vb#4)]\"\n  syntax:\n    content: int IComparer.Compare (object x, object y);\n    parameters:\n    - id: x\n      type: System.Object\n      description: The first object to compare.\n    - id: y\n      type: System.Object\n      description: The second object to compare.\n    return:\n      type: System.Int32\n      description: \"A signed integer that indicates the relative values of <code>x</code> and <code>y</code>, as shown in the following table.  \\n  \\n <table><thead><tr><th> Value  \\n  \\n </th><th> Meaning  \\n  \\n </th></tr></thead><tbody><tr><td> Less than zero  \\n  \\n </td><td><code>x</code> is less than <code>y</code>.  \\n  \\n </td></tr><tr><td> Zero  \\n  \\n </td><td><code>x</code> equals <code>y</code>.  \\n  \\n </td></tr><tr><td> Greater than zero  \\n  \\n </td><td><code>x</code> is greater than <code>y</code>.  \\n  \\n </td></tr></tbody></table>\"\n  overload: System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"<code>x</code> or <code>y</code> is of a type that cannot be cast to type <code>T</code>.  \\n  \\n -or-  \\n  \\n <code>x</code> and <code>y</code> do not implement either the <xref href=\\\"System.IComparable`1\\\"></xref> generic interface or the <xref href=\\\"System.IComparable\\\"></xref> interface.\"\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/Comparer`1.xml\n  ms.technology:\n  - dotnet-standard\n  author: mairaw\n  ms.author: mairaw\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Collections.Generic.Comparer`1.#ctor\n  parent: System.Collections.Generic.Comparer`1\n  isExternal: false\n  name: Comparer<T>()\n  nameWithType: Comparer<T>.Comparer<T>()\n  fullName: Comparer<T>.Comparer<T>()\n- uid: System.Collections.Generic.Comparer`1.Compare(`0,`0)\n  parent: System.Collections.Generic.Comparer`1\n  isExternal: false\n  name: Compare(T, T)\n  nameWithType: Comparer<T>.Compare(T, T)\n  fullName: Comparer<T>.Compare(T, T)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: T\n  isExternal: true\n  name: T\n  nameWithType: T\n  fullName: T\n- uid: System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})\n  parent: System.Collections.Generic.Comparer`1\n  isExternal: false\n  name: Create(Comparison<T>)\n  nameWithType: Comparer<T>.Create(Comparison<T>)\n  fullName: Comparer<T>.Create(Comparison<T>)\n- uid: System.Collections.Generic.Comparer`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: Comparer<T>\n  nameWithType: Comparer<T>\n  fullName: System.Collections.Generic.Comparer<T>\n- uid: System.Comparison`1\n  parent: System\n  isExternal: false\n  name: Comparison<T>\n  nameWithType: Comparison<T>\n  fullName: System.Comparison<T>\n- uid: System.Collections.Generic.Comparer`1.Default\n  parent: System.Collections.Generic.Comparer`1\n  isExternal: false\n  name: Default\n  nameWithType: Comparer<T>.Default\n  fullName: Comparer<T>.Default\n- uid: System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)\n  parent: System.Collections.Generic.Comparer`1\n  isExternal: false\n  name: IComparer.Compare(Object, Object)\n  nameWithType: Comparer<T>.IComparer.Compare(Object, Object)\n  fullName: Comparer<T>.IComparer.Compare(Object, Object)\n- uid: System.Collections.Generic.Comparer`1.#ctor*\n  parent: System.Collections.Generic.Comparer`1\n  isExternal: false\n  name: Comparer<T>\n  nameWithType: Comparer<T>.Comparer<T>\n  fullName: Comparer<T>.Comparer<T>\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/Comparer`1.xml\n- uid: System.Collections.Generic.Comparer`1.Compare*\n  parent: System.Collections.Generic.Comparer`1\n  isExternal: false\n  name: Compare\n  nameWithType: Comparer<T>.Compare\n  fullName: Comparer<T>.Compare\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/Comparer`1.xml\n- uid: System.Collections.Generic.Comparer`1.Create*\n  parent: System.Collections.Generic.Comparer`1\n  isExternal: false\n  name: Create\n  nameWithType: Comparer<T>.Create\n  fullName: Comparer<T>.Create\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/Comparer`1.xml\n- uid: System.Collections.Generic.Comparer`1.Default*\n  parent: System.Collections.Generic.Comparer`1\n  isExternal: false\n  name: Default\n  nameWithType: Comparer<T>.Default\n  fullName: Comparer<T>.Default\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/Comparer`1.xml\n- uid: System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare*\n  parent: System.Collections.Generic.Comparer`1\n  isExternal: false\n  name: System.Collections.IComparer.Compare\n  nameWithType: Comparer<T>.System.Collections.IComparer.Compare\n  fullName: Comparer<T>.System.Collections.IComparer.Compare\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.0\n  - netstandard-1.1\n  - netstandard-1.2\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Generic/Comparer`1.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Collections.Generic.IComparer`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: IComparer<T>\n  nameWithType: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  nameWithType: IComparer\n  fullName: System.Collections.IComparer\n"}