{"nodes":[{"content":"Contains information about a speech normalization procedure that has been performed on recognition results.","nodes":[{"pos":[0,107],"content":"Contains information about a speech normalization procedure that has been performed on recognition results.","nodes":[{"content":"Contains information about a speech normalization procedure that has been performed on recognition results.","pos":[0,107]}]}],"pos":[637,745],"yaml":true},{"content":"Speech normalization is the use of special constructs or symbols to express speech in writing.  \n  \n For example, suppose that this is recognized text:  \n  \n \"july four at twelve thirty one PM, I bought one point six kilograms of fish for fourteen dollars and six cents, at the pike place market in seattle washington nine eight one two two\"  \n  \n This is the same text after normalization:  \n  \n \"July 4 at 12:31 PM, I bought 1.6 kg of fish for $14.06, at the pike place market in Seattle WA 98122\"  \n  \n In this example there are five substitutions, each of which would be described by an instance of <xref:System.Speech.Recognition.ReplacementText>.  \n  \n Using the <xref:System.Speech.Recognition.ReplacementText> object, an application can determine:  \n  \n-   The location and number of words replaced by normalization. For more information, see <xref:System.Speech.Recognition.ReplacementText.FirstWordIndex%2A> or <xref:System.Speech.Recognition.ReplacementText.CountOfWords%2A>.  \n  \n-   The replaced text and its display attributes. For more information, see <xref:System.Speech.Recognition.ReplacementText.Text%2A>, and  <xref:System.Speech.Recognition.ReplacementText.DisplayAttributes%2A>.  \n  \n Instances of <xref:System.Speech.Recognition.ReplacementText> are typically obtained as members of the <xref:System.Collections.ObjectModel.Collection%601> object returned by the <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A> property on <xref:System.Speech.Recognition.RecognizedPhrase> (or classes that inherit from <xref:System.Speech.Recognition.RecognizedPhrase>, such as <xref:System.Speech.Recognition.RecognitionResult>) when returned text has been normalized.","nodes":[{"pos":[0,94],"content":"Speech normalization is the use of special constructs or symbols to express speech in writing.","nodes":[{"content":"Speech normalization is the use of special constructs or symbols to express speech in writing.","pos":[0,94]}]},{"pos":[101,151],"content":"For example, suppose that this is recognized text:","nodes":[{"content":"For example, suppose that this is recognized text:","pos":[0,50]}]},{"pos":[158,341],"content":"\"july four at twelve thirty one PM, I bought one point six kilograms of fish for fourteen dollars and six cents, at the pike place market in seattle washington nine eight one two two\"","nodes":[{"content":"\"july four at twelve thirty one PM, I bought one point six kilograms of fish for fourteen dollars and six cents, at the pike place market in seattle washington nine eight one two two\"","pos":[0,183]}]},{"pos":[348,390],"content":"This is the same text after normalization:","nodes":[{"content":"This is the same text after normalization:","pos":[0,42]}]},{"pos":[397,499],"content":"\"July 4 at 12:31 PM, I bought 1.6 kg of fish for $14.06, at the pike place market in Seattle WA 98122\"","nodes":[{"content":"\"July 4 at 12:31 PM, I bought 1.6 kg of fish for $14.06, at the pike place market in Seattle WA 98122\"","pos":[0,102]}]},{"pos":[506,652],"content":"In this example there are five substitutions, each of which would be described by an instance of <xref:System.Speech.Recognition.ReplacementText>.","nodes":[{"content":"In this example there are five substitutions, each of which would be described by an instance of <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.ReplacementText&gt;</ph>.","pos":[0,146],"source":"In this example there are five substitutions, each of which would be described by an instance of <xref:System.Speech.Recognition.ReplacementText>."}]},{"pos":[659,755],"content":"Using the <xref:System.Speech.Recognition.ReplacementText> object, an application can determine:","nodes":[{"content":"Using the <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.ReplacementText&gt;</ph> object, an application can determine:","pos":[0,96],"source":"Using the <xref:System.Speech.Recognition.ReplacementText> object, an application can determine:"}]},{"pos":[765,986],"content":"The location and number of words replaced by normalization. For more information, see <xref:System.Speech.Recognition.ReplacementText.FirstWordIndex%2A> or <xref:System.Speech.Recognition.ReplacementText.CountOfWords%2A>.","nodes":[{"content":"The location and number of words replaced by normalization. For more information, see <xref:System.Speech.Recognition.ReplacementText.FirstWordIndex%2A> or <xref:System.Speech.Recognition.ReplacementText.CountOfWords%2A>.","pos":[0,221],"nodes":[{"content":"The location and number of words replaced by normalization.","pos":[0,59]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.ReplacementText.FirstWordIndex%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.ReplacementText.CountOfWords%2A&gt;</ph>.","pos":[60,221],"source":" For more information, see <xref:System.Speech.Recognition.ReplacementText.FirstWordIndex%2A> or <xref:System.Speech.Recognition.ReplacementText.CountOfWords%2A>."}]}]},{"pos":[996,1201],"content":"The replaced text and its display attributes. For more information, see <xref:System.Speech.Recognition.ReplacementText.Text%2A>, and  <xref:System.Speech.Recognition.ReplacementText.DisplayAttributes%2A>.","nodes":[{"content":"The replaced text and its display attributes. For more information, see <xref:System.Speech.Recognition.ReplacementText.Text%2A>, and  <xref:System.Speech.Recognition.ReplacementText.DisplayAttributes%2A>.","pos":[0,205],"nodes":[{"content":"The replaced text and its display attributes.","pos":[0,45]},{"content":"For more information, see <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.ReplacementText.Text%2A&gt;</ph>, and  <ph id=\"ph2\">&lt;xref:System.Speech.Recognition.ReplacementText.DisplayAttributes%2A&gt;</ph>.","pos":[46,205],"source":" For more information, see <xref:System.Speech.Recognition.ReplacementText.Text%2A>, and  <xref:System.Speech.Recognition.ReplacementText.DisplayAttributes%2A>."}]}]},{"pos":[1208,1703],"content":"Instances of <xref:System.Speech.Recognition.ReplacementText> are typically obtained as members of the <xref:System.Collections.ObjectModel.Collection%601> object returned by the <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A> property on <xref:System.Speech.Recognition.RecognizedPhrase> (or classes that inherit from <xref:System.Speech.Recognition.RecognizedPhrase>, such as <xref:System.Speech.Recognition.RecognitionResult>) when returned text has been normalized.","nodes":[{"content":"Instances of <ph id=\"ph1\">&lt;xref:System.Speech.Recognition.ReplacementText&gt;</ph> are typically obtained as members of the <ph id=\"ph2\">&lt;xref:System.Collections.ObjectModel.Collection%601&gt;</ph> object returned by the <ph id=\"ph3\">&lt;xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A&gt;</ph> property on <ph id=\"ph4\">&lt;xref:System.Speech.Recognition.RecognizedPhrase&gt;</ph> (or classes that inherit from <ph id=\"ph5\">&lt;xref:System.Speech.Recognition.RecognizedPhrase&gt;</ph>, such as <ph id=\"ph6\">&lt;xref:System.Speech.Recognition.RecognitionResult&gt;</ph>) when returned text has been normalized.","pos":[0,495],"source":"Instances of <xref:System.Speech.Recognition.ReplacementText> are typically obtained as members of the <xref:System.Collections.ObjectModel.Collection%601> object returned by the <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A> property on <xref:System.Speech.Recognition.RecognizedPhrase> (or classes that inherit from <xref:System.Speech.Recognition.RecognizedPhrase>, such as <xref:System.Speech.Recognition.RecognitionResult>) when returned text has been normalized."}]}],"pos":[756,2484],"yaml":true,"extradata":"MT"},{"content":"Gets the number of recognized words replaced by the speech normalization procedure.","nodes":[{"pos":[0,83],"content":"Gets the number of recognized words replaced by the speech normalization procedure.","nodes":[{"content":"Gets the number of recognized words replaced by the speech normalization procedure.","pos":[0,83]}]}],"pos":[7523,7607],"yaml":true},{"content":"Returns the number of recognized words replaced by the speech normalization procedure.","nodes":[{"pos":[0,86],"content":"Returns the number of recognized words replaced by the speech normalization procedure.","nodes":[{"content":"Returns the number of recognized words replaced by the speech normalization procedure.","pos":[0,86]}]}],"pos":[11426,11513],"yaml":true},{"content":"Gets information about the leading and trailing spaces for the text replaced by the speech normalization procedure.","nodes":[{"pos":[0,115],"content":"Gets information about the leading and trailing spaces for the text replaced by the speech normalization procedure.","nodes":[{"content":"Gets information about the leading and trailing spaces for the text replaced by the speech normalization procedure.","pos":[0,115]}]}],"pos":[12578,12694],"yaml":true},{"content":"Returns a <xref href=\"System.Speech.Recognition.DisplayAttributes\"></xref> object that specifies the use of white space to display text replaced by normalization.","nodes":[{"pos":[0,162],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Speech.Recognition.DisplayAttributes\"&gt;&lt;/xref&gt;</ph> object that specifies the use of white space to display text replaced by normalization.","source":"Returns a <xref href=\"System.Speech.Recognition.DisplayAttributes\"></xref> object that specifies the use of white space to display text replaced by normalization."}],"pos":[16589,16752],"yaml":true},{"content":"Gets the location of the first recognized word replaced by the speech normalization procedure.","nodes":[{"pos":[0,94],"content":"Gets the location of the first recognized word replaced by the speech normalization procedure.","nodes":[{"content":"Gets the location of the first recognized word replaced by the speech normalization procedure.","pos":[0,94]}]}],"pos":[17804,17899],"yaml":true},{"content":"Returns the location of the first recognized word replaced by the speech normalization procedure.","nodes":[{"pos":[0,97],"content":"Returns the location of the first recognized word replaced by the speech normalization procedure.","nodes":[{"content":"Returns the location of the first recognized word replaced by the speech normalization procedure.","pos":[0,97]}]}],"pos":[21732,21830],"yaml":true},{"content":"Gets the recognized text replaced by the speech normalization procedure.","nodes":[{"pos":[0,72],"content":"Gets the recognized text replaced by the speech normalization procedure.","nodes":[{"content":"Gets the recognized text replaced by the speech normalization procedure.","pos":[0,72]}]}],"pos":[22819,22892],"yaml":true},{"content":"Returns the recognized text replaced by the speech normalization procedure.","nodes":[{"pos":[0,75],"content":"Returns the recognized text replaced by the speech normalization procedure.","nodes":[{"content":"Returns the recognized text replaced by the speech normalization procedure.","pos":[0,75]}]}],"pos":[26707,26783],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Speech.Recognition.ReplacementText\n  commentId: T:System.Speech.Recognition.ReplacementText\n  id: ReplacementText\n  children:\n  - System.Speech.Recognition.ReplacementText.CountOfWords\n  - System.Speech.Recognition.ReplacementText.DisplayAttributes\n  - System.Speech.Recognition.ReplacementText.FirstWordIndex\n  - System.Speech.Recognition.ReplacementText.Text\n  langs:\n  - csharp\n  name: ReplacementText\n  nameWithType: ReplacementText\n  fullName: System.Speech.Recognition.ReplacementText\n  type: Class\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Contains information about a speech normalization procedure that has been performed on recognition results.\n  remarks: \"Speech normalization is the use of special constructs or symbols to express speech in writing.  \\n  \\n For example, suppose that this is recognized text:  \\n  \\n \\\"july four at twelve thirty one PM, I bought one point six kilograms of fish for fourteen dollars and six cents, at the pike place market in seattle washington nine eight one two two\\\"  \\n  \\n This is the same text after normalization:  \\n  \\n \\\"July 4 at 12:31 PM, I bought 1.6 kg of fish for $14.06, at the pike place market in Seattle WA 98122\\\"  \\n  \\n In this example there are five substitutions, each of which would be described by an instance of <xref:System.Speech.Recognition.ReplacementText>.  \\n  \\n Using the <xref:System.Speech.Recognition.ReplacementText> object, an application can determine:  \\n  \\n-   The location and number of words replaced by normalization. For more information, see <xref:System.Speech.Recognition.ReplacementText.FirstWordIndex%2A> or <xref:System.Speech.Recognition.ReplacementText.CountOfWords%2A>.  \\n  \\n-   The replaced text and its display attributes. For more information, see <xref:System.Speech.Recognition.ReplacementText.Text%2A>, and  <xref:System.Speech.Recognition.ReplacementText.DisplayAttributes%2A>.  \\n  \\n Instances of <xref:System.Speech.Recognition.ReplacementText> are typically obtained as members of the <xref:System.Collections.ObjectModel.Collection%601> object returned by the <xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A> property on <xref:System.Speech.Recognition.RecognizedPhrase> (or classes that inherit from <xref:System.Speech.Recognition.RecognizedPhrase>, such as <xref:System.Speech.Recognition.RecognitionResult>) when returned text has been normalized.\"\n  example:\n  - \"The example below displays information in a user interface about a <xref:System.Speech.Recognition.RecognizedPhrase> object returned by a recognition engine.  \\n  \\n```csharp  \\ninternal static void DisplayBasicPhraseInfo(  \\n        Label label,   \\n        RecognizedPhrase result,   \\n        SpeechRecognizer rec)   \\n{  \\n  if (result != null && label != null)   \\n  {  \\n    // Blank  \\n    if (rec != null)   \\n    {   \\n      // Clear  \\n      label.Text += String.Format(  \\n                             \\\"  Recognizer currently at:   {0} mSec\\\\n\\\" +  \\n                             \\\"  Audio Device currently at: {1} mSec\\\\n\\\",  \\n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \\n                             rec.AudioPosition.TotalMilliseconds);  \\n    }  \\n  \\n    if (result != null)   \\n    { // Clear  \\n      RecognitionResult recResult = result as RecognitionResult;  \\n      if (recResult != null)   \\n      {  \\n        RecognizedAudio resultAudio = recResult.Audio;  \\n        if (resultAudio == null)   \\n        {  \\n          label.Text += String.Format(\\\"  Emulated input\\\\n\\\");  \\n        }   \\n        else   \\n        {  \\n          label.Text += String.Format(  \\n                               \\\"  Candidate Phrase at:       {0} mSec\\\\n\\\" +  \\n                               \\\"  Phrase Length:             {1} mSec\\\\n\\\" +  \\n                               \\\"  Input State Time:          {2}\\\\n\\\" +  \\n                               \\\"  Input Format:              {3}\\\\n\\\",  \\n                               resultAudio.AudioPosition.TotalMilliseconds,  \\n                               resultAudio.Duration.TotalMilliseconds,  \\n                               resultAudio.StartTime.ToShortTimeString(),  \\n                               resultAudio.Format.EncodingFormat.ToString());  \\n        }  \\n      }  \\n  \\n      label.Text += String.Format(\\\"  Confidence Level:          {0}\\\\n\\\", result.Confidence);  \\n      if (result.Grammar != null)   \\n      {  \\n        label.Text += String.Format(  \\n                            \\\"  Recognizing Grammar:       {0}\\\\n\\\" +  \\n                            \\\"  Recognizing Rule:          {1}\\\\n\\\",  \\n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : \\\"None\\\"),  \\n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : \\\"None\\\"));  \\n      }  \\n  \\n      if  (result.ReplacementWordUnits.Count !=  0)    \\n      {  \\n        label.Text += String.Format(\\\"  Replacement text:\\\\n\\\");  \\n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \\n        {  \\n          string repText = rep.Text;  \\n          // Add trailing spaces  \\n  \\n          if ((rep.DisplayAttributes & DisplayAttributes.OneTrailingSpace) !=  0)    \\n          {  \\n            repText += \\\" \\\";  \\n          }  \\n          if ((rep.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) !=  0)    \\n          {  \\n            repText += \\\"  \\\";  \\n          }  \\n          if ((rep.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)    \\n          {  \\n            repText=repText.TrimStart();  \\n          }  \\n          if ((rep.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \\n          {  \\n            repText = repText.TrimEnd();  \\n          }  \\n          label.Text += String.Format(  \\n                           \\\"      At index {0} for {1} words. Text: \\\\\\\"{2}\\\\\\\"\\\\n\\\",  \\n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \\n  \\n        }  \\n        label.Text += String.Format(\\\"\\\\n\\\\n\\\");  \\n      }  \\n    }  \\n  }    \\n}  \\n```\"\n  syntax:\n    content: public class ReplacementText\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/ReplacementText.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.Recognition.ReplacementText.CountOfWords\n  commentId: P:System.Speech.Recognition.ReplacementText.CountOfWords\n  id: CountOfWords\n  parent: System.Speech.Recognition.ReplacementText\n  langs:\n  - csharp\n  name: CountOfWords\n  nameWithType: ReplacementText.CountOfWords\n  fullName: ReplacementText.CountOfWords\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets the number of recognized words replaced by the speech normalization procedure.\n  remarks: ''\n  example:\n  - \"The example below displays information in a user interface about a <xref:System.Speech.Recognition.RecognizedPhrase> object returned by a recognition engine.  \\n  \\n```csharp  \\ninternal static void DisplayBasicPhraseInfo(  \\n        Label label,   \\n        RecognizedPhrase result,   \\n        SpeechRecognizer rec)   \\n{  \\n  if (result != null && label != null)   \\n  {  \\n    // Blank  \\n    if (rec != null)   \\n    {   \\n      // Clear  \\n      label.Text += String.Format(  \\n                             \\\"  Recognizer currently at:   {0} mSec\\\\n\\\" +  \\n                             \\\"  Audio Device currently at: {1} mSec\\\\n\\\",  \\n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \\n                             rec.AudioPosition.TotalMilliseconds);  \\n    }  \\n  \\n    if (result != null)   \\n    { // Clear  \\n      RecognitionResult recResult = result as RecognitionResult;  \\n      if (recResult != null)   \\n      {  \\n        RecognizedAudio resultAudio = recResult.Audio;  \\n        if (resultAudio == null)   \\n        {  \\n          label.Text += String.Format(\\\"  Emulated input\\\\n\\\");  \\n        }   \\n        else   \\n        {  \\n          label.Text += String.Format(  \\n                               \\\"  Candidate Phrase at:       {0} mSec\\\\n\\\" +  \\n                               \\\"  Phrase Length:             {1} mSec\\\\n\\\" +  \\n                               \\\"  Input State Time:          {2}\\\\n\\\" +  \\n                               \\\"  Input Format:              {3}\\\\n\\\",  \\n                               resultAudio.AudioPosition.TotalMilliseconds,  \\n                               resultAudio.Duration.TotalMilliseconds,  \\n                               resultAudio.StartTime.ToShortTimeString(),  \\n                               resultAudio.Format.EncodingFormat.ToString());  \\n        }  \\n      }  \\n  \\n      label.Text += String.Format(\\\"  Confidence Level:          {0}\\\\n\\\", result.Confidence);  \\n      if (result.Grammar != null)   \\n      {  \\n        label.Text += String.Format(  \\n                            \\\"  Recognizing Grammar:       {0}\\\\n\\\" +  \\n                            \\\"  Recognizing Rule:          {1}\\\\n\\\",  \\n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : \\\"None\\\"),  \\n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : \\\"None\\\"));  \\n      }  \\n  \\n      if  (result.ReplacementWordUnits.Count !=  0)    \\n      {  \\n        label.Text += String.Format(\\\"  Replacement text:\\\\n\\\");  \\n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \\n        {  \\n          string repText = rep.Text;  \\n          // Add trailing spaces  \\n  \\n          if ((rep.DisplayAttributes & DisplayAttributes.OneTrailingSpace) !=  0)    \\n          {  \\n            repText += \\\" \\\";  \\n          }  \\n          if ((rep.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) !=  0)    \\n          {  \\n            repText += \\\"  \\\";  \\n          }  \\n          if ((rep.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)    \\n          {  \\n            repText=repText.TrimStart();  \\n          }  \\n          if ((rep.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \\n          {  \\n            repText = repText.TrimEnd();  \\n          }  \\n          label.Text += String.Format(  \\n                           \\\"      At index {0} for {1} words. Text: \\\\\\\"{2}\\\\\\\"\\\\n\\\",  \\n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \\n  \\n        }  \\n        label.Text += String.Format(\\\"\\\\n\\\\n\\\");  \\n      }  \\n    }  \\n  }    \\n}  \\n```\"\n  syntax:\n    content: public int CountOfWords { get; }\n    return:\n      type: System.Int32\n      description: Returns the number of recognized words replaced by the speech normalization procedure.\n  overload: System.Speech.Recognition.ReplacementText.CountOfWords*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/ReplacementText.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.Recognition.ReplacementText.DisplayAttributes\n  commentId: P:System.Speech.Recognition.ReplacementText.DisplayAttributes\n  id: DisplayAttributes\n  parent: System.Speech.Recognition.ReplacementText\n  langs:\n  - csharp\n  name: DisplayAttributes\n  nameWithType: ReplacementText.DisplayAttributes\n  fullName: ReplacementText.DisplayAttributes\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets information about the leading and trailing spaces for the text replaced by the speech normalization procedure.\n  remarks: ''\n  example:\n  - \"The example below displays information in a user interface about a <xref:System.Speech.Recognition.RecognizedPhrase> object returned by a recognition engine.  \\n  \\n```csharp  \\ninternal static void DisplayBasicPhraseInfo(  \\n        Label label,   \\n        RecognizedPhrase result,   \\n        SpeechRecognizer rec)   \\n{  \\n  if (result != null && label != null)   \\n  {  \\n    // Blank  \\n    if (rec != null)   \\n    {   \\n      // Clear  \\n      label.Text += String.Format(  \\n                             \\\"  Recognizer currently at:   {0} mSec\\\\n\\\" +  \\n                             \\\"  Audio Device currently at: {1} mSec\\\\n\\\",  \\n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \\n                             rec.AudioPosition.TotalMilliseconds);  \\n    }  \\n  \\n    if (result != null)   \\n    { // Clear  \\n      RecognitionResult recResult = result as RecognitionResult;  \\n      if (recResult != null)   \\n      {  \\n        RecognizedAudio resultAudio = recResult.Audio;  \\n        if (resultAudio == null)   \\n        {  \\n          label.Text += String.Format(\\\"  Emulated input\\\\n\\\");  \\n        }   \\n        else   \\n        {  \\n          label.Text += String.Format(  \\n                               \\\"  Candidate Phrase at:       {0} mSec\\\\n\\\" +  \\n                               \\\"  Phrase Length:             {1} mSec\\\\n\\\" +  \\n                               \\\"  Input State Time:          {2}\\\\n\\\" +  \\n                               \\\"  Input Format:              {3}\\\\n\\\",  \\n                               resultAudio.AudioPosition.TotalMilliseconds,  \\n                               resultAudio.Duration.TotalMilliseconds,  \\n                               resultAudio.StartTime.ToShortTimeString(),  \\n                               resultAudio.Format.EncodingFormat.ToString());  \\n        }  \\n      }  \\n  \\n      label.Text += String.Format(\\\"  Confidence Level:          {0}\\\\n\\\", result.Confidence);  \\n      if (result.Grammar != null)   \\n      {  \\n        label.Text += String.Format(  \\n                            \\\"  Recognizing Grammar:       {0}\\\\n\\\" +  \\n                            \\\"  Recognizing Rule:          {1}\\\\n\\\",  \\n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : \\\"None\\\"),  \\n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : \\\"None\\\"));  \\n      }  \\n  \\n      if  (result.ReplacementWordUnits.Count !=  0)    \\n      {  \\n        label.Text += String.Format(\\\"  Replacement text:\\\\n\\\");  \\n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \\n        {  \\n          string repText = rep.Text;  \\n          // Add trailing spaces  \\n  \\n          if ((rep.DisplayAttributes & DisplayAttributes.OneTrailingSpace) !=  0)    \\n          {  \\n            repText += \\\" \\\";  \\n          }  \\n          if ((rep.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) !=  0)    \\n          {  \\n            repText += \\\"  \\\";  \\n          }  \\n          if ((rep.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)    \\n          {  \\n            repText=repText.TrimStart();  \\n          }  \\n          if ((rep.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \\n          {  \\n            repText = repText.TrimEnd();  \\n          }  \\n          label.Text += String.Format(  \\n                           \\\"      At index {0} for {1} words. Text: \\\\\\\"{2}\\\\\\\"\\\\n\\\",  \\n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \\n  \\n        }  \\n        label.Text += String.Format(\\\"\\\\n\\\\n\\\");  \\n      }  \\n    }  \\n  }    \\n}  \\n```\"\n  syntax:\n    content: public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }\n    return:\n      type: System.Speech.Recognition.DisplayAttributes\n      description: Returns a <xref href=\"System.Speech.Recognition.DisplayAttributes\"></xref> object that specifies the use of white space to display text replaced by normalization.\n  overload: System.Speech.Recognition.ReplacementText.DisplayAttributes*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/ReplacementText.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.Recognition.ReplacementText.FirstWordIndex\n  commentId: P:System.Speech.Recognition.ReplacementText.FirstWordIndex\n  id: FirstWordIndex\n  parent: System.Speech.Recognition.ReplacementText\n  langs:\n  - csharp\n  name: FirstWordIndex\n  nameWithType: ReplacementText.FirstWordIndex\n  fullName: ReplacementText.FirstWordIndex\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets the location of the first recognized word replaced by the speech normalization procedure.\n  remarks: ''\n  example:\n  - \"In the following example, information about a <xref:System.Speech.Recognition.RecognizedPhrase> object returned by a recognition engine is displayed to a user interface.  \\n  \\n```csharp  \\ninternal static void DisplayBasicPhraseInfo(  \\n        Label label,   \\n        RecognizedPhrase result,   \\n        SpeechRecognizer rec)   \\n{  \\n  if (result != null && label != null)   \\n  {  \\n    // Blank  \\n    if (rec != null)   \\n    {   \\n      // Clear  \\n      label.Text += String.Format(  \\n                             \\\"  Recognizer currently at:   {0} mSec\\\\n\\\" +  \\n                             \\\"  Audio Device currently at: {1} mSec\\\\n\\\",  \\n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \\n                             rec.AudioPosition.TotalMilliseconds);  \\n    }  \\n  \\n    if (result != null)   \\n    { // Clear  \\n      RecognitionResult recResult = result as RecognitionResult;  \\n      if (recResult != null)   \\n      {  \\n        RecognizedAudio resultAudio = recResult.Audio;  \\n        if (resultAudio == null)   \\n        {  \\n          label.Text += String.Format(\\\"  Emulated input\\\\n\\\");  \\n        }   \\n        else   \\n        {  \\n          label.Text += String.Format(  \\n                               \\\"  Candidate Phrase at:       {0} mSec\\\\n\\\" +  \\n                               \\\"  Phrase Length:             {1} mSec\\\\n\\\" +  \\n                               \\\"  Input State Time:          {2}\\\\n\\\" +  \\n                               \\\"  Input Format:              {3}\\\\n\\\",  \\n                               resultAudio.AudioPosition.TotalMilliseconds,  \\n                               resultAudio.Duration.TotalMilliseconds,  \\n                               resultAudio.StartTime.ToShortTimeString(),  \\n                               resultAudio.Format.EncodingFormat.ToString());  \\n        }  \\n      }  \\n  \\n      label.Text += String.Format(\\\"  Confidence Level:          {0}\\\\n\\\", result.Confidence);  \\n      if (result.Grammar != null)   \\n      {  \\n        label.Text += String.Format(  \\n                            \\\"  Recognizing Grammar:       {0}\\\\n\\\" +  \\n                            \\\"  Recognizing Rule:          {1}\\\\n\\\",  \\n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : \\\"None\\\"),  \\n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : \\\"None\\\"));  \\n      }  \\n  \\n      if  (result.ReplacementWordUnits.Count !=  0)    \\n      {  \\n        label.Text += String.Format(\\\"  Replacement text:\\\\n\\\");  \\n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \\n        {  \\n          string repText = rep.Text;  \\n          // Add trailing spaces  \\n  \\n          if ((rep.DisplayAttributes & DisplayAttributes.OneTrailingSpace) !=  0)    \\n          {  \\n            repText += \\\" \\\";  \\n          }  \\n          if ((rep.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) !=  0)    \\n          {  \\n            repText += \\\"  \\\";  \\n          }  \\n          if ((rep.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)    \\n          {  \\n            repText=repText.TrimStart();  \\n          }  \\n          if ((rep.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \\n          {  \\n            repText = repText.TrimEnd();  \\n          }  \\n          label.Text += String.Format(  \\n                           \\\"      At index {0} for {1} words. Text: \\\\\\\"{2}\\\\\\\"\\\\n\\\",  \\n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \\n  \\n        }  \\n        label.Text += String.Format(\\\"\\\\n\\\\n\\\");  \\n      }  \\n    }  \\n  }    \\n}  \\n```\"\n  syntax:\n    content: public int FirstWordIndex { get; }\n    return:\n      type: System.Int32\n      description: Returns the location of the first recognized word replaced by the speech normalization procedure.\n  overload: System.Speech.Recognition.ReplacementText.FirstWordIndex*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/ReplacementText.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\n- uid: System.Speech.Recognition.ReplacementText.Text\n  commentId: P:System.Speech.Recognition.ReplacementText.Text\n  id: Text\n  parent: System.Speech.Recognition.ReplacementText\n  langs:\n  - csharp\n  name: Text\n  nameWithType: ReplacementText.Text\n  fullName: ReplacementText.Text\n  type: Property\n  assemblies:\n  - System.Speech\n  namespace: System.Speech.Recognition\n  summary: Gets the recognized text replaced by the speech normalization procedure.\n  remarks: ''\n  example:\n  - \"The example below displays information in a user interface about a <xref:System.Speech.Recognition.RecognizedPhrase> object returned by a recognition engine.  \\n  \\n```csharp  \\ninternal static void DisplayBasicPhraseInfo(  \\n        Label label,   \\n        RecognizedPhrase result,   \\n        SpeechRecognizer rec)   \\n{  \\n  if (result != null && label != null)   \\n  {  \\n    // Blank  \\n    if (rec != null)   \\n    {   \\n      // Clear  \\n      label.Text += String.Format(  \\n                             \\\"  Recognizer currently at:   {0} mSec\\\\n\\\" +  \\n                             \\\"  Audio Device currently at: {1} mSec\\\\n\\\",  \\n                             rec.RecognizerAudioPosition.TotalMilliseconds,  \\n                             rec.AudioPosition.TotalMilliseconds);  \\n    }  \\n  \\n    if (result != null)   \\n    { // Clear  \\n      RecognitionResult recResult = result as RecognitionResult;  \\n      if (recResult != null)   \\n      {  \\n        RecognizedAudio resultAudio = recResult.Audio;  \\n        if (resultAudio == null)   \\n        {  \\n          label.Text += String.Format(\\\"  Emulated input\\\\n\\\");  \\n        }   \\n        else   \\n        {  \\n          label.Text += String.Format(  \\n                               \\\"  Candidate Phrase at:       {0} mSec\\\\n\\\" +  \\n                               \\\"  Phrase Length:             {1} mSec\\\\n\\\" +  \\n                               \\\"  Input State Time:          {2}\\\\n\\\" +  \\n                               \\\"  Input Format:              {3}\\\\n\\\",  \\n                               resultAudio.AudioPosition.TotalMilliseconds,  \\n                               resultAudio.Duration.TotalMilliseconds,  \\n                               resultAudio.StartTime.ToShortTimeString(),  \\n                               resultAudio.Format.EncodingFormat.ToString());  \\n        }  \\n      }  \\n  \\n      label.Text += String.Format(\\\"  Confidence Level:          {0}\\\\n\\\", result.Confidence);  \\n      if (result.Grammar != null)   \\n      {  \\n        label.Text += String.Format(  \\n                            \\\"  Recognizing Grammar:       {0}\\\\n\\\" +  \\n                            \\\"  Recognizing Rule:          {1}\\\\n\\\",  \\n                            ((result.Grammar.Name != null) ? (result.Grammar.Name) : \\\"None\\\"),  \\n                            ((result.Grammar.RuleName != null) ? (result.Grammar.RuleName) : \\\"None\\\"));  \\n      }  \\n  \\n      if  (result.ReplacementWordUnits.Count !=  0)    \\n      {  \\n        label.Text += String.Format(\\\"  Replacement text:\\\\n\\\");  \\n        foreach (ReplacementText rep in result.ReplacementWordUnits)    \\n        {  \\n          string repText = rep.Text;  \\n          // Add trailing spaces  \\n  \\n          if ((rep.DisplayAttributes & DisplayAttributes.OneTrailingSpace) !=  0)    \\n          {  \\n            repText += \\\" \\\";  \\n          }  \\n          if ((rep.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) !=  0)    \\n          {  \\n            repText += \\\"  \\\";  \\n          }  \\n          if ((rep.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)    \\n          {  \\n            repText=repText.TrimStart();  \\n          }  \\n          if ((rep.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   \\n          {  \\n            repText = repText.TrimEnd();  \\n          }  \\n          label.Text += String.Format(  \\n                           \\\"      At index {0} for {1} words. Text: \\\\\\\"{2}\\\\\\\"\\\\n\\\",  \\n                           rep.FirstWordIndex,  rep.CountOfWords, repText);  \\n  \\n        }  \\n        label.Text += String.Format(\\\"\\\\n\\\\n\\\");  \\n      }  \\n    }  \\n  }    \\n}  \\n```\"\n  syntax:\n    content: public string Text { get; }\n    return:\n      type: System.String\n      description: Returns the recognized text replaced by the speech normalization procedure.\n  overload: System.Speech.Recognition.ReplacementText.Text*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/ReplacementText.xml\n  ms.technology:\n  - dotnet-standard\n  ms.author: kbridge\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Speech.Recognition.ReplacementText.CountOfWords\n  parent: System.Speech.Recognition.ReplacementText\n  isExternal: false\n  name: CountOfWords\n  nameWithType: ReplacementText.CountOfWords\n  fullName: ReplacementText.CountOfWords\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Speech.Recognition.ReplacementText.DisplayAttributes\n  parent: System.Speech.Recognition.ReplacementText\n  isExternal: false\n  name: DisplayAttributes\n  nameWithType: ReplacementText.DisplayAttributes\n  fullName: ReplacementText.DisplayAttributes\n- uid: System.Speech.Recognition.DisplayAttributes\n  parent: System.Speech.Recognition\n  isExternal: false\n  name: DisplayAttributes\n  nameWithType: DisplayAttributes\n  fullName: System.Speech.Recognition.DisplayAttributes\n- uid: System.Speech.Recognition.ReplacementText.FirstWordIndex\n  parent: System.Speech.Recognition.ReplacementText\n  isExternal: false\n  name: FirstWordIndex\n  nameWithType: ReplacementText.FirstWordIndex\n  fullName: ReplacementText.FirstWordIndex\n- uid: System.Speech.Recognition.ReplacementText.Text\n  parent: System.Speech.Recognition.ReplacementText\n  isExternal: false\n  name: Text\n  nameWithType: ReplacementText.Text\n  fullName: ReplacementText.Text\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Speech.Recognition.ReplacementText.CountOfWords*\n  parent: System.Speech.Recognition.ReplacementText\n  isExternal: false\n  name: CountOfWords\n  nameWithType: ReplacementText.CountOfWords\n  fullName: ReplacementText.CountOfWords\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/ReplacementText.xml\n- uid: System.Speech.Recognition.ReplacementText.DisplayAttributes*\n  parent: System.Speech.Recognition.ReplacementText\n  isExternal: false\n  name: DisplayAttributes\n  nameWithType: ReplacementText.DisplayAttributes\n  fullName: ReplacementText.DisplayAttributes\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/ReplacementText.xml\n- uid: System.Speech.Recognition.ReplacementText.FirstWordIndex*\n  parent: System.Speech.Recognition.ReplacementText\n  isExternal: false\n  name: FirstWordIndex\n  nameWithType: ReplacementText.FirstWordIndex\n  fullName: ReplacementText.FirstWordIndex\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/ReplacementText.xml\n- uid: System.Speech.Recognition.ReplacementText.Text*\n  parent: System.Speech.Recognition.ReplacementText\n  isExternal: false\n  name: Text\n  nameWithType: ReplacementText.Text\n  fullName: ReplacementText.Text\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Speech.Recognition/ReplacementText.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}