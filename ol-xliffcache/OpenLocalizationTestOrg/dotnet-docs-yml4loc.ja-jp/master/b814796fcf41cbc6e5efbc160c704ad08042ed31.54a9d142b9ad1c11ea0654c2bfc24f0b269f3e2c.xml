{"nodes":[{"content":"Wraps a <xref href=\"System.Type\"></xref> object and delegates methods to that `Type`.","nodes":[{"pos":[0,85],"content":"Wraps a <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> object and delegates methods to that <ph id=\"ph2\">`Type`</ph>.","source":"Wraps a <xref href=\"System.Type\"></xref> object and delegates methods to that `Type`."}],"pos":[4080,4166],"yaml":true},{"content":"Derive from this type and override only those members you have to provide customization in, plus any members that are required by your program and not already implemented by <xref:System.Reflection.TypeDelegator>.  \n  \n <xref:System.Reflection.TypeDelegator> derives from <xref:System.Type?displayProperty=fullName> and implements most of the properties and methods of <xref:System.Type>. For each member it implements, <xref:System.Reflection.TypeDelegator> automatically delegates to the corresponding member of an internal <xref:System.Type> object, which is supplied as an argument to the constructor. This internal <xref:System.Type> object is exposed to deriving classes by the `protected`<xref:System.Reflection.TypeDelegator.typeImpl> field.  \n  \n> [!NOTE]\n>  Some members of <xref:System.Reflection.TypeDelegator> have implementations even though the members themselves are simply inherited from <xref:System.Type>. In these cases, the implementation is provided by an overridden `protected` method that has a name that ends in \"Impl\". For example, the implementation for all overloads of the <xref:System.Reflection.TypeDelegator.GetMethod%2A> method is supplied by the overridden <xref:System.Reflection.TypeDelegator.GetMethodImpl%2A> method. The implementation for inherited properties such as <xref:System.Type.IsPublic%2A> and <xref:System.Type.IsNestedAssembly%2A> is provided by the overridden <xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A> method.  \n  \n Deriving classes can provide a public constructor that takes a <xref:System.Type> object as its parameter and simply passes that object to the <xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29> constructor, or can set the internal <xref:System.Type> object in some other way.  \n  \n If a deriving class uses a member that is not implemented by <xref:System.Reflection.TypeDelegator>, it must override that member and provide an implementation. The simplest implementation is to call the corresponding member on the internal <xref:System.Type> object exposed by the <xref:System.Reflection.TypeDelegator.typeImpl> field, but you can provide any implementation your application requires. It is not necessary to override these members if they are not used by your application or by library functions your application calls (for example, by the <xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName> constructor).  \n  \n The following virtual methods (`Overridable` methods in Visual Basic) of <xref:System.Type> are not implemented by <xref:System.Reflection.TypeDelegator>: <xref:System.Type.MakeGenericType%2A>, <xref:System.Type.GetGenericTypeDefinition%2A>, <xref:System.Type.GetGenericArguments%2A>, <xref:System.Type.GetGenericParameterConstraints%2A>, <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakeByRefType%2A>, <xref:System.Type.MakePointerType%2A>, <xref:System.Type.GetEnumNames%2A>, <xref:System.Type.GetEnumValues%2A>, <xref:System.Type.GetEnumUnderlyingType%2A>, <xref:System.Type.GetTypeCodeImpl%2A>, <xref:System.Type.IsEnumDefined%2A>, <xref:System.Type.IsEquivalentTo%2A>.  \n  \n The following virtual properties (`Overridable` properties in Visual Basic) of <xref:System.Type> are not implemented by <xref:System.Reflection.TypeDelegator>: <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, <xref:System.Type.ContainsGenericParameters%2A>, <xref:System.Type.DeclaringMethod%2A>, <xref:System.Type.GenericParameterAttributes%2A>, <xref:System.Type.GenericParameterPosition%2A>, <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, <xref:System.Type.IsSecurityTransparent%2A>.","nodes":[{"pos":[0,213],"content":"Derive from this type and override only those members you have to provide customization in, plus any members that are required by your program and not already implemented by <xref:System.Reflection.TypeDelegator>.","nodes":[{"content":"Derive from this type and override only those members you have to provide customization in, plus any members that are required by your program and not already implemented by <ph id=\"ph1\">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>.","pos":[0,213],"source":"Derive from this type and override only those members you have to provide customization in, plus any members that are required by your program and not already implemented by <xref:System.Reflection.TypeDelegator>."}]},{"pos":[220,749],"content":"<xref:System.Reflection.TypeDelegator> derives from <xref:System.Type?displayProperty=fullName> and implements most of the properties and methods of <xref:System.Type>. For each member it implements, <xref:System.Reflection.TypeDelegator> automatically delegates to the corresponding member of an internal <xref:System.Type> object, which is supplied as an argument to the constructor. This internal <xref:System.Type> object is exposed to deriving classes by the `protected`<xref:System.Reflection.TypeDelegator.typeImpl> field.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> derives from <ph id=\"ph2\">&lt;xref:System.Type?displayProperty=fullName&gt;</ph> and implements most of the properties and methods of <ph id=\"ph3\">&lt;xref:System.Type&gt;</ph>.","pos":[0,168],"source":"<xref:System.Reflection.TypeDelegator> derives from <xref:System.Type?displayProperty=fullName> and implements most of the properties and methods of <xref:System.Type>."},{"content":"For each member it implements, <ph id=\"ph1\">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> automatically delegates to the corresponding member of an internal <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> object, which is supplied as an argument to the constructor.","pos":[169,385],"source":" For each member it implements, <xref:System.Reflection.TypeDelegator> automatically delegates to the corresponding member of an internal <xref:System.Type> object, which is supplied as an argument to the constructor."},{"content":"This internal <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object is exposed to deriving classes by the <ph id=\"ph2\">`protected`</ph><ph id=\"ph3\">&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;</ph> field.","pos":[386,529],"source":" This internal <xref:System.Type> object is exposed to deriving classes by the `protected`<xref:System.Reflection.TypeDelegator.typeImpl> field."}]},{"pos":[757,1482],"content":"[!NOTE]\n Some members of <xref:System.Reflection.TypeDelegator> have implementations even though the members themselves are simply inherited from <xref:System.Type>. In these cases, the implementation is provided by an overridden `protected` method that has a name that ends in \"Impl\". For example, the implementation for all overloads of the <xref:System.Reflection.TypeDelegator.GetMethod%2A> method is supplied by the overridden <xref:System.Reflection.TypeDelegator.GetMethodImpl%2A> method. The implementation for inherited properties such as <xref:System.Type.IsPublic%2A> and <xref:System.Type.IsNestedAssembly%2A> is provided by the overridden <xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A> method.","leadings":["","> "],"nodes":[{"content":" Some members of <xref:System.Reflection.TypeDelegator> have implementations even though the members themselves are simply inherited from <xref:System.Type>. In these cases, the implementation is provided by an overridden `protected` method that has a name that ends in \"Impl\". For example, the implementation for all overloads of the <xref:System.Reflection.TypeDelegator.GetMethod%2A> method is supplied by the overridden <xref:System.Reflection.TypeDelegator.GetMethodImpl%2A> method. The implementation for inherited properties such as <xref:System.Type.IsPublic%2A> and <xref:System.Type.IsNestedAssembly%2A> is provided by the overridden <xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A> method.","pos":[8,723],"nodes":[{"content":"Some members of <ph id=\"ph1\">&lt;xref:System.Reflection.TypeDelegator&gt;</ph> have implementations even though the members themselves are simply inherited from <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph>.","pos":[1,157],"source":" Some members of <xref:System.Reflection.TypeDelegator> have implementations even though the members themselves are simply inherited from <xref:System.Type>."},{"content":"In these cases, the implementation is provided by an overridden <ph id=\"ph1\">`protected`</ph> method that has a name that ends in \"Impl\".","pos":[158,277],"source":" In these cases, the implementation is provided by an overridden `protected` method that has a name that ends in \"Impl\"."},{"content":"For example, the implementation for all overloads of the <ph id=\"ph1\">&lt;xref:System.Reflection.TypeDelegator.GetMethod%2A&gt;</ph> method is supplied by the overridden <ph id=\"ph2\">&lt;xref:System.Reflection.TypeDelegator.GetMethodImpl%2A&gt;</ph> method.","pos":[278,487],"source":" For example, the implementation for all overloads of the <xref:System.Reflection.TypeDelegator.GetMethod%2A> method is supplied by the overridden <xref:System.Reflection.TypeDelegator.GetMethodImpl%2A> method."},{"content":"The implementation for inherited properties such as <ph id=\"ph1\">&lt;xref:System.Type.IsPublic%2A&gt;</ph> and <ph id=\"ph2\">&lt;xref:System.Type.IsNestedAssembly%2A&gt;</ph> is provided by the overridden <ph id=\"ph3\">&lt;xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A&gt;</ph> method.","pos":[488,715],"source":" The implementation for inherited properties such as <xref:System.Type.IsPublic%2A> and <xref:System.Type.IsNestedAssembly%2A> is provided by the overridden <xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A> method."}]}]},{"pos":[1489,1777],"content":"Deriving classes can provide a public constructor that takes a <xref:System.Type> object as its parameter and simply passes that object to the <xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29> constructor, or can set the internal <xref:System.Type> object in some other way.","nodes":[{"content":"Deriving classes can provide a public constructor that takes a <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object as its parameter and simply passes that object to the <ph id=\"ph2\">&lt;xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29&gt;</ph> constructor, or can set the internal <ph id=\"ph3\">&lt;xref:System.Type&gt;</ph> object in some other way.","pos":[0,288],"source":"Deriving classes can provide a public constructor that takes a <xref:System.Type> object as its parameter and simply passes that object to the <xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29> constructor, or can set the internal <xref:System.Type> object in some other way."}]},{"pos":[1784,2445],"content":"If a deriving class uses a member that is not implemented by <xref:System.Reflection.TypeDelegator>, it must override that member and provide an implementation. The simplest implementation is to call the corresponding member on the internal <xref:System.Type> object exposed by the <xref:System.Reflection.TypeDelegator.typeImpl> field, but you can provide any implementation your application requires. It is not necessary to override these members if they are not used by your application or by library functions your application calls (for example, by the <xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName> constructor).","nodes":[{"content":"If a deriving class uses a member that is not implemented by <xref:System.Reflection.TypeDelegator>, it must override that member and provide an implementation. The simplest implementation is to call the corresponding member on the internal <xref:System.Type> object exposed by the <xref:System.Reflection.TypeDelegator.typeImpl> field, but you can provide any implementation your application requires. It is not necessary to override these members if they are not used by your application or by library functions your application calls (for example, by the <xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName> constructor).","pos":[0,661],"nodes":[{"content":"If a deriving class uses a member that is not implemented by <ph id=\"ph1\">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>, it must override that member and provide an implementation.","pos":[0,160],"source":"If a deriving class uses a member that is not implemented by <xref:System.Reflection.TypeDelegator>, it must override that member and provide an implementation."},{"content":"The simplest implementation is to call the corresponding member on the internal <ph id=\"ph1\">&lt;xref:System.Type&gt;</ph> object exposed by the <ph id=\"ph2\">&lt;xref:System.Reflection.TypeDelegator.typeImpl&gt;</ph> field, but you can provide any implementation your application requires.","pos":[161,402],"source":" The simplest implementation is to call the corresponding member on the internal <xref:System.Type> object exposed by the <xref:System.Reflection.TypeDelegator.typeImpl> field, but you can provide any implementation your application requires."},{"content":"It is not necessary to override these members if they are not used by your application or by library functions your application calls (for example, by the <ph id=\"ph1\">&lt;xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName&gt;</ph> constructor).","pos":[403,661],"source":" It is not necessary to override these members if they are not used by your application or by library functions your application calls (for example, by the <xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName> constructor)."}]}]},{"pos":[2452,3135],"content":"The following virtual methods (<ph id=\"ph1\">`Overridable`</ph> methods in Visual Basic) of <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> are not implemented by <ph id=\"ph3\">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>: <ph id=\"ph4\">&lt;xref:System.Type.MakeGenericType%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Type.GetGenericTypeDefinition%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Type.GetGenericArguments%2A&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Type.GetGenericParameterConstraints%2A&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Type.MakeArrayType%2A&gt;</ph>, <ph id=\"ph9\">&lt;xref:System.Type.MakeByRefType%2A&gt;</ph>, <ph id=\"ph10\">&lt;xref:System.Type.MakePointerType%2A&gt;</ph>, <ph id=\"ph11\">&lt;xref:System.Type.GetEnumNames%2A&gt;</ph>, <ph id=\"ph12\">&lt;xref:System.Type.GetEnumValues%2A&gt;</ph>, <ph id=\"ph13\">&lt;xref:System.Type.GetEnumUnderlyingType%2A&gt;</ph>, <ph id=\"ph14\">&lt;xref:System.Type.GetTypeCodeImpl%2A&gt;</ph>, <ph id=\"ph15\">&lt;xref:System.Type.IsEnumDefined%2A&gt;</ph>, <ph id=\"ph16\">&lt;xref:System.Type.IsEquivalentTo%2A&gt;</ph>.","source":"The following virtual methods (`Overridable` methods in Visual Basic) of <xref:System.Type> are not implemented by <xref:System.Reflection.TypeDelegator>: <xref:System.Type.MakeGenericType%2A>, <xref:System.Type.GetGenericTypeDefinition%2A>, <xref:System.Type.GetGenericArguments%2A>, <xref:System.Type.GetGenericParameterConstraints%2A>, <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakeByRefType%2A>, <xref:System.Type.MakePointerType%2A>, <xref:System.Type.GetEnumNames%2A>, <xref:System.Type.GetEnumValues%2A>, <xref:System.Type.GetEnumUnderlyingType%2A>, <xref:System.Type.GetTypeCodeImpl%2A>, <xref:System.Type.IsEnumDefined%2A>, <xref:System.Type.IsEquivalentTo%2A>."},{"pos":[3142,3747],"content":"The following virtual properties (<ph id=\"ph1\">`Overridable`</ph> properties in Visual Basic) of <ph id=\"ph2\">&lt;xref:System.Type&gt;</ph> are not implemented by <ph id=\"ph3\">&lt;xref:System.Reflection.TypeDelegator&gt;</ph>: <ph id=\"ph4\">&lt;xref:System.Type.IsGenericType%2A&gt;</ph>, <ph id=\"ph5\">&lt;xref:System.Type.IsGenericTypeDefinition%2A&gt;</ph>, <ph id=\"ph6\">&lt;xref:System.Type.IsGenericParameter%2A&gt;</ph>, <ph id=\"ph7\">&lt;xref:System.Type.ContainsGenericParameters%2A&gt;</ph>, <ph id=\"ph8\">&lt;xref:System.Type.DeclaringMethod%2A&gt;</ph>, <ph id=\"ph9\">&lt;xref:System.Type.GenericParameterAttributes%2A&gt;</ph>, <ph id=\"ph10\">&lt;xref:System.Type.GenericParameterPosition%2A&gt;</ph>, <ph id=\"ph11\">&lt;xref:System.Type.IsSecurityCritical%2A&gt;</ph>, <ph id=\"ph12\">&lt;xref:System.Type.IsSecuritySafeCritical%2A&gt;</ph>, <ph id=\"ph13\">&lt;xref:System.Type.IsSecurityTransparent%2A&gt;</ph>.","source":"The following virtual properties (`Overridable` properties in Visual Basic) of <xref:System.Type> are not implemented by <xref:System.Reflection.TypeDelegator>: <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, <xref:System.Type.ContainsGenericParameters%2A>, <xref:System.Type.DeclaringMethod%2A>, <xref:System.Type.GenericParameterAttributes%2A>, <xref:System.Type.GenericParameterPosition%2A>, <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, <xref:System.Type.IsSecurityTransparent%2A>."}],"pos":[4177,7942],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Reflection.TypeDelegator\"></xref> class with default properties.","nodes":[{"pos":[0,117],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.TypeDelegator\"&gt;&lt;/xref&gt;</ph> class with default properties.","source":"Initializes a new instance of the <xref href=\"System.Reflection.TypeDelegator\"></xref> class with default properties."}],"pos":[18541,18659],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Reflection.TypeDelegator\"></xref> class specifying the encapsulating instance.","nodes":[{"pos":[0,131],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Reflection.TypeDelegator\"&gt;&lt;/xref&gt;</ph> class specifying the encapsulating instance.","source":"Initializes a new instance of the <xref href=\"System.Reflection.TypeDelegator\"></xref> class specifying the encapsulating instance."}],"pos":[19986,20118],"yaml":true},{"content":"This constructor is called from a class to generate a delegate based upon the `Type` object for the class defining the method.","nodes":[{"pos":[0,126],"content":"This constructor is called from a class to generate a delegate based upon the <ph id=\"ph1\">`Type`</ph> object for the class defining the method.","source":"This constructor is called from a class to generate a delegate based upon the `Type` object for the class defining the method."}],"pos":[20129,20256],"yaml":true,"extradata":"MT"},{"content":"The instance of the class <xref href=\"System.Type\"></xref> that encapsulates the call to the method of an object.","nodes":[{"pos":[0,113],"content":"The instance of the class <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that encapsulates the call to the method of an object.","source":"The instance of the class <xref href=\"System.Type\"></xref> that encapsulates the call to the method of an object."}],"pos":[20407,20521],"yaml":true},{"content":"<code>delegatingType</code> is `null`.","nodes":[{"pos":[0,38],"content":"<ph id=\"ph1\">&lt;code&gt;delegatingType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>delegatingType</code> is `null`."}],"pos":[20688,20727],"yaml":true},{"content":"Gets the assembly of the implemented type.","nodes":[{"pos":[0,42],"content":"Gets the assembly of the implemented type.","nodes":[{"content":"Gets the assembly of the implemented type.","pos":[0,42]}]}],"pos":[21848,21891],"yaml":true},{"content":"Assemblies are the deployment units in the common language runtime. Assemblies establish the namespace for resolving requests and determine which resources are exposed externally and which are accessible from within the assembly. The common language runtime can determine and locate the assembly for any running object.","nodes":[{"pos":[0,319],"content":"Assemblies are the deployment units in the common language runtime. Assemblies establish the namespace for resolving requests and determine which resources are exposed externally and which are accessible from within the assembly. The common language runtime can determine and locate the assembly for any running object.","nodes":[{"content":"Assemblies are the deployment units in the common language runtime. Assemblies establish the namespace for resolving requests and determine which resources are exposed externally and which are accessible from within the assembly. The common language runtime can determine and locate the assembly for any running object.","pos":[0,319],"nodes":[{"content":"Assemblies are the deployment units in the common language runtime.","pos":[0,67]},{"content":"Assemblies establish the namespace for resolving requests and determine which resources are exposed externally and which are accessible from within the assembly.","pos":[68,229]},{"content":"The common language runtime can determine and locate the assembly for any running object.","pos":[230,319]}]}]}],"pos":[21902,22222],"yaml":true,"extradata":"MT"},{"content":"An <xref href=\"System.Reflection.Assembly\"></xref> object representing the assembly of the implemented type.","nodes":[{"pos":[0,108],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Assembly\"&gt;&lt;/xref&gt;</ph> object representing the assembly of the implemented type.","source":"An <xref href=\"System.Reflection.Assembly\"></xref> object representing the assembly of the implemented type."}],"pos":[22376,22485],"yaml":true},{"content":"Gets the assembly's fully qualified name.","nodes":[{"pos":[0,41],"content":"Gets the assembly's fully qualified name.","nodes":[{"content":"Gets the assembly's fully qualified name.","pos":[0,41]}]}],"pos":[23755,23797],"yaml":true},{"content":"A `String` containing the assembly's fully qualified name.","nodes":[{"pos":[0,58],"content":"A <ph id=\"ph1\">`String`</ph> containing the assembly's fully qualified name.","source":"A `String` containing the assembly's fully qualified name."}],"pos":[23931,23990],"yaml":true},{"content":"Gets the base type for the current type.","nodes":[{"pos":[0,40],"content":"Gets the base type for the current type.","nodes":[{"content":"Gets the base type for the current type.","pos":[0,40]}]}],"pos":[25195,25236],"yaml":true},{"content":"The base type is the type from which this type directly inherits. Since the <xref:System.Object> class type is the ultimate base class of all the other types, it is the only type that does not have a base type. In this case, `null` is returned as the base type of the `Object` type.","nodes":[{"pos":[0,282],"content":"The base type is the type from which this type directly inherits. Since the <xref:System.Object> class type is the ultimate base class of all the other types, it is the only type that does not have a base type. In this case, `null` is returned as the base type of the `Object` type.","nodes":[{"content":"The base type is the type from which this type directly inherits.","pos":[0,65]},{"content":"Since the <ph id=\"ph1\">&lt;xref:System.Object&gt;</ph> class type is the ultimate base class of all the other types, it is the only type that does not have a base type.","pos":[66,210],"source":" Since the <xref:System.Object> class type is the ultimate base class of all the other types, it is the only type that does not have a base type."},{"content":"In this case, <ph id=\"ph1\">`null`</ph> is returned as the base type of the <ph id=\"ph2\">`Object`</ph> type.","pos":[211,282],"source":" In this case, `null` is returned as the base type of the `Object` type."}]}],"pos":[25247,25530],"yaml":true,"extradata":"MT"},{"content":"The base type for a type.","nodes":[{"pos":[0,25],"content":"The base type for a type.","nodes":[{"content":"The base type for a type.","pos":[0,25]}]}],"pos":[25647,25673],"yaml":true},{"content":"Gets the fully qualified name of the implemented type.","nodes":[{"pos":[0,54],"content":"Gets the fully qualified name of the implemented type.","nodes":[{"content":"Gets the fully qualified name of the implemented type.","pos":[0,54]}]}],"pos":[26865,26920],"yaml":true},{"content":"A string containing the fully qualified name of the current `TypeDelegator`.","nodes":[{"pos":[0,76],"content":"A string containing the fully qualified name of the current <ph id=\"ph1\">`TypeDelegator`</ph>.","source":"A string containing the fully qualified name of the current `TypeDelegator`."}],"pos":[26931,27008],"yaml":true,"extradata":"MT"},{"content":"A `String` containing the type's fully qualified name.","nodes":[{"pos":[0,54],"content":"A <ph id=\"ph1\">`String`</ph> containing the type's fully qualified name.","source":"A `String` containing the type's fully qualified name."}],"pos":[27129,27184],"yaml":true},{"content":"Gets the attributes assigned to the `TypeDelegator`.","nodes":[{"pos":[0,52],"content":"Gets the attributes assigned to the <ph id=\"ph1\">`TypeDelegator`</ph>.","source":"Gets the attributes assigned to the `TypeDelegator`."}],"pos":[28458,28511],"yaml":true},{"content":"This method can be used to determine if the `TypeDelegator` is abstract, public, and so on.","nodes":[{"pos":[0,91],"content":"This method can be used to determine if the <ph id=\"ph1\">`TypeDelegator`</ph> is abstract, public, and so on.","source":"This method can be used to determine if the `TypeDelegator` is abstract, public, and so on."}],"pos":[28522,28614],"yaml":true,"extradata":"MT"},{"content":"A `TypeAttributes` object representing the implementation attribute flags.","nodes":[{"pos":[0,74],"content":"A <ph id=\"ph1\">`TypeAttributes`</ph> object representing the implementation attribute flags.","source":"A `TypeAttributes` object representing the implementation attribute flags."}],"pos":[28810,28885],"yaml":true},{"content":"Gets the constructor that implemented the `TypeDelegator`.","nodes":[{"pos":[0,58],"content":"Gets the constructor that implemented the <ph id=\"ph1\">`TypeDelegator`</ph>.","source":"Gets the constructor that implemented the `TypeDelegator`."}],"pos":[30799,30858],"yaml":true},{"content":"The `callConvention` parameter indicates the calling convention for the entry point. If no calling convention is specified, a default <xref:System.Reflection.CallingConventions> value of `Standard` is used.","nodes":[{"pos":[0,206],"content":"The `callConvention` parameter indicates the calling convention for the entry point. If no calling convention is specified, a default <xref:System.Reflection.CallingConventions> value of `Standard` is used.","nodes":[{"content":"The <ph id=\"ph1\">`callConvention`</ph> parameter indicates the calling convention for the entry point.","pos":[0,84],"source":"The `callConvention` parameter indicates the calling convention for the entry point."},{"content":"If no calling convention is specified, a default <ph id=\"ph1\">&lt;xref:System.Reflection.CallingConventions&gt;</ph> value of <ph id=\"ph2\">`Standard`</ph> is used.","pos":[85,206],"source":" If no calling convention is specified, a default <xref:System.Reflection.CallingConventions> value of `Standard` is used."}]}],"pos":[30869,31076],"yaml":true,"extradata":"MT"},{"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"pos":[0,175],"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"content":"A bitmask that affects the way in which the search is conducted.","pos":[0,64]},{"content":"The value is a combination of zero or more bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[65,175],"source":" The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."}]}],"pos":[31466,31642],"yaml":true},{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"pos":[0,204],"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id=\"ph1\">`MemberInfo`</ph> objects using reflection.","pos":[0,142],"source":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the default binder is used.","pos":[143,204],"source":" If <code>binder</code> is `null`, the default binder is used."}]}],"pos":[31715,31920],"yaml":true},{"content":"The calling conventions.","nodes":[{"pos":[0,24],"content":"The calling conventions.","nodes":[{"content":"The calling conventions.","pos":[0,24]}]}],"pos":[32013,32038],"yaml":true},{"content":"An array of type `Type` containing a list of the parameter number, order, and types. Types cannot be `null`; use an appropriate `GetMethod` method or an empty array to search for a method without parameters.","nodes":[{"pos":[0,207],"content":"An array of type `Type` containing a list of the parameter number, order, and types. Types cannot be `null`; use an appropriate `GetMethod` method or an empty array to search for a method without parameters.","nodes":[{"content":"An array of type <ph id=\"ph1\">`Type`</ph> containing a list of the parameter number, order, and types.","pos":[0,84],"source":"An array of type `Type` containing a list of the parameter number, order, and types."},{"content":"Types cannot be <ph id=\"ph1\">`null`</ph>; use an appropriate <ph id=\"ph2\">`GetMethod`</ph> method or an empty array to search for a method without parameters.","pos":[85,207],"source":" Types cannot be `null`; use an appropriate `GetMethod` method or an empty array to search for a method without parameters."}]}],"pos":[32099,32307],"yaml":true},{"content":"An array of type `ParameterModifier` having the same length as the <code>types</code> array, whose elements represent the attributes associated with the parameters of the method to get.","nodes":[{"pos":[0,185],"content":"An array of type <ph id=\"ph1\">`ParameterModifier`</ph> having the same length as the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">types</ph><ept id=\"p1\">&lt;/code&gt;</ept> array, whose elements represent the attributes associated with the parameters of the method to get.","source":"An array of type `ParameterModifier` having the same length as the <code>types</code> array, whose elements represent the attributes associated with the parameters of the method to get."}],"pos":[32396,32582],"yaml":true},{"content":"A `ConstructorInfo` object for the method that matches the specified criteria, or `null` if a match cannot be found.","nodes":[{"pos":[0,116],"content":"A <ph id=\"ph1\">`ConstructorInfo`</ph> object for the method that matches the specified criteria, or <ph id=\"ph2\">`null`</ph> if a match cannot be found.","source":"A `ConstructorInfo` object for the method that matches the specified criteria, or `null` if a match cannot be found."}],"pos":[32659,32776],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing constructors defined for the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>.","nodes":[{"pos":[0,206],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.ConstructorInfo\"&gt;&lt;/xref&gt;</ph> objects representing constructors defined for the type wrapped by the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.TypeDelegator\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing constructors defined for the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>."}],"pos":[34156,34363],"yaml":true},{"content":"Class initializers are available only through `GetMember`, `GetMembers`, `FindMembers`, and `GetConstructors`.","nodes":[{"pos":[0,110],"content":"Class initializers are available only through <ph id=\"ph1\">`GetMember`</ph>, <ph id=\"ph2\">`GetMembers`</ph>, <ph id=\"ph3\">`FindMembers`</ph>, and <ph id=\"ph4\">`GetConstructors`</ph>.","source":"Class initializers are available only through `GetMember`, `GetMembers`, `FindMembers`, and `GetConstructors`."}],"pos":[34374,34485],"yaml":true,"extradata":"MT"},{"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"pos":[0,175],"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"content":"A bitmask that affects the way in which the search is conducted.","pos":[0,64]},{"content":"The value is a combination of zero or more bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[65,175],"source":" The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."}]}],"pos":[34788,34964],"yaml":true},{"content":"An array of type `ConstructorInfo` containing the specified constructors defined for this class. If no constructors are defined, an empty array is returned. Depending on the value of a specified parameter, only public constructors or both public and non-public constructors will be returned.","nodes":[{"pos":[0,291],"content":"An array of type `ConstructorInfo` containing the specified constructors defined for this class. If no constructors are defined, an empty array is returned. Depending on the value of a specified parameter, only public constructors or both public and non-public constructors will be returned.","nodes":[{"content":"An array of type <ph id=\"ph1\">`ConstructorInfo`</ph> containing the specified constructors defined for this class.","pos":[0,96],"source":"An array of type `ConstructorInfo` containing the specified constructors defined for this class."},{"content":"If no constructors are defined, an empty array is returned.","pos":[97,156]},{"content":"Depending on the value of a specified parameter, only public constructors or both public and non-public constructors will be returned.","pos":[157,291]}]}],"pos":[35043,35335],"yaml":true},{"content":"Returns all the custom attributes defined for this type, specifying whether to search the type's inheritance chain.","nodes":[{"pos":[0,115],"content":"Returns all the custom attributes defined for this type, specifying whether to search the type's inheritance chain.","nodes":[{"content":"Returns all the custom attributes defined for this type, specifying whether to search the type's inheritance chain.","pos":[0,115]}]}],"pos":[36748,36864],"yaml":true},{"content":"Specifies whether to search this type's inheritance chain to find the attributes.","nodes":[{"pos":[0,81],"content":"Specifies whether to search this type's inheritance chain to find the attributes.","nodes":[{"content":"Specifies whether to search this type's inheritance chain to find the attributes.","pos":[0,81]}]}],"pos":[37028,37110],"yaml":true},{"content":"An array of objects containing all the custom attributes defined for this type.","nodes":[{"pos":[0,79],"content":"An array of objects containing all the custom attributes defined for this type.","nodes":[{"content":"An array of objects containing all the custom attributes defined for this type.","pos":[0,79]}]}],"pos":[37169,37249],"yaml":true},{"content":"A custom attribute type cannot be loaded.","nodes":[{"pos":[0,41],"content":"A custom attribute type cannot be loaded.","nodes":[{"content":"A custom attribute type cannot be loaded.","pos":[0,41]}]}],"pos":[37422,37464],"yaml":true},{"content":"Returns an array of custom attributes identified by type.","nodes":[{"pos":[0,57],"content":"Returns an array of custom attributes identified by type.","nodes":[{"content":"Returns an array of custom attributes identified by type.","pos":[0,57]}]}],"pos":[38778,38836],"yaml":true},{"content":"An array of custom attributes identified by type.","nodes":[{"pos":[0,49],"content":"An array of custom attributes identified by type.","nodes":[{"content":"An array of custom attributes identified by type.","pos":[0,49]}]}],"pos":[39023,39073],"yaml":true},{"content":"Specifies whether to search this type's inheritance chain to find the attributes.","nodes":[{"pos":[0,81],"content":"Specifies whether to search this type's inheritance chain to find the attributes.","nodes":[{"content":"Specifies whether to search this type's inheritance chain to find the attributes.","pos":[0,81]}]}],"pos":[39137,39219],"yaml":true},{"content":"An array of objects containing the custom attributes defined in this type that match the <code>attributeType</code> parameter, specifying whether to search the type's inheritance chain, or `null` if no custom attributes are defined on this type.","nodes":[{"pos":[0,245],"content":"An array of objects containing the custom attributes defined in this type that match the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">attributeType</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter, specifying whether to search the type's inheritance chain, or <ph id=\"ph2\">`null`</ph> if no custom attributes are defined on this type.","source":"An array of objects containing the custom attributes defined in this type that match the <code>attributeType</code> parameter, specifying whether to search the type's inheritance chain, or `null` if no custom attributes are defined on this type."}],"pos":[39278,39524],"yaml":true},{"content":"<code>attributeType</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>attributeType</code> is `null`."}],"pos":[39697,39735],"yaml":true},{"content":"A custom attribute type cannot be loaded.","nodes":[{"pos":[0,41],"content":"A custom attribute type cannot be loaded.","nodes":[{"content":"A custom attribute type cannot be loaded.","pos":[0,41]}]}],"pos":[39829,39871],"yaml":true},{"content":"Returns the <xref href=\"System.Type\"></xref> of the object encompassed or referred to by the current array, pointer or ByRef.","nodes":[{"pos":[0,125],"content":"Returns the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the object encompassed or referred to by the current array, pointer or ByRef.","source":"Returns the <xref href=\"System.Type\"></xref> of the object encompassed or referred to by the current array, pointer or ByRef."}],"pos":[41032,41158],"yaml":true},{"content":"The <xref href=\"System.Type\"></xref> of the object encompassed or referred to by the current array, pointer or `ByRef`, or `null` if the current <xref href=\"System.Type\"></xref> is not an array, a pointer or a `ByRef`.","nodes":[{"pos":[0,218],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the object encompassed or referred to by the current array, pointer or <ph id=\"ph2\">`ByRef`</ph>, or <ph id=\"ph3\">`null`</ph> if the current <ph id=\"ph4\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is not an array, a pointer or a <ph id=\"ph5\">`ByRef`</ph>.","source":"The <xref href=\"System.Type\"></xref> of the object encompassed or referred to by the current array, pointer or `ByRef`, or `null` if the current <xref href=\"System.Type\"></xref> is not an array, a pointer or a `ByRef`."}],"pos":[41295,41514],"yaml":true},{"content":"Returns the specified event.","nodes":[{"pos":[0,28],"content":"Returns the specified event.","nodes":[{"content":"Returns the specified event.","pos":[0,28]}]}],"pos":[42914,42943],"yaml":true},{"content":"If `bindingAttr` is <xref:System.Reflection.BindingFlags>.`IgnoreCase`, the case of the `name` parameter is ignored.","nodes":[{"pos":[0,116],"content":"If <ph id=\"ph1\">`bindingAttr`</ph> is <ph id=\"ph2\">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.<ph id=\"ph3\">`IgnoreCase`</ph>, the case of the <ph id=\"ph4\">`name`</ph> parameter is ignored.","source":"If `bindingAttr` is <xref:System.Reflection.BindingFlags>.`IgnoreCase`, the case of the `name` parameter is ignored."}],"pos":[42954,43071],"yaml":true,"extradata":"MT"},{"content":"The name of the event to get.","nodes":[{"pos":[0,29],"content":"The name of the event to get.","nodes":[{"content":"The name of the event to get.","pos":[0,29]}]}],"pos":[43282,43312],"yaml":true},{"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"pos":[0,175],"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"content":"A bitmask that affects the way in which the search is conducted.","pos":[0,64]},{"content":"The value is a combination of zero or more bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[65,175],"source":" The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."}]}],"pos":[43396,43572],"yaml":true},{"content":"An <xref href=\"System.Reflection.EventInfo\"></xref> object representing the event declared or inherited by this type with the specified name. This method returns `null` if no such event is found.","nodes":[{"pos":[0,195],"content":"An <xref href=\"System.Reflection.EventInfo\"></xref> object representing the event declared or inherited by this type with the specified name. This method returns `null` if no such event is found.","nodes":[{"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> object representing the event declared or inherited by this type with the specified name.","pos":[0,141],"source":"An <xref href=\"System.Reflection.EventInfo\"></xref> object representing the event declared or inherited by this type with the specified name."},{"content":"This method returns <ph id=\"ph1\">`null`</ph> if no such event is found.","pos":[142,195],"source":" This method returns `null` if no such event is found."}]}],"pos":[43643,43839],"yaml":true},{"content":"The <code>name</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>name</code> parameter is `null`."}],"pos":[44009,44052],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing all the public events declared or inherited by the current `TypeDelegator`.","nodes":[{"pos":[0,165],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.EventInfo\"&gt;&lt;/xref&gt;</ph> objects representing all the public events declared or inherited by the current <ph id=\"ph2\">`TypeDelegator`</ph>.","source":"Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing all the public events declared or inherited by the current `TypeDelegator`."}],"pos":[45183,45349],"yaml":true},{"content":"Returns an array of type `EventInfo` containing all the events declared or inherited by the current type. If there are no events, an empty array is returned.","nodes":[{"pos":[0,157],"content":"Returns an array of type `EventInfo` containing all the events declared or inherited by the current type. If there are no events, an empty array is returned.","nodes":[{"content":"Returns an array of type <ph id=\"ph1\">`EventInfo`</ph> containing all the events declared or inherited by the current type.","pos":[0,105],"source":"Returns an array of type `EventInfo` containing all the events declared or inherited by the current type."},{"content":"If there are no events, an empty array is returned.","pos":[106,157]}]}],"pos":[45524,45682],"yaml":true},{"content":"Returns the events specified in <code>bindingAttr</code> that are declared or inherited by the current `TypeDelegator`.","nodes":[{"pos":[0,119],"content":"Returns the events specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bindingAttr</ph><ept id=\"p1\">&lt;/code&gt;</ept> that are declared or inherited by the current <ph id=\"ph2\">`TypeDelegator`</ph>.","source":"Returns the events specified in <code>bindingAttr</code> that are declared or inherited by the current `TypeDelegator`."}],"pos":[47017,47137],"yaml":true},{"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"pos":[0,175],"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"content":"A bitmask that affects the way in which the search is conducted.","pos":[0,64]},{"content":"The value is a combination of zero or more bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[65,175],"source":" The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."}]}],"pos":[47362,47538],"yaml":true},{"content":"An array of type `EventInfo` containing the events specified in <code>bindingAttr</code>. If there are no events, an empty array is returned.","nodes":[{"pos":[0,141],"content":"An array of type `EventInfo` containing the events specified in <code>bindingAttr</code>. If there are no events, an empty array is returned.","nodes":[{"content":"An array of type <ph id=\"ph1\">`EventInfo`</ph> containing the events specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">bindingAttr</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[0,89],"source":"An array of type `EventInfo` containing the events specified in <code>bindingAttr</code>."},{"content":"If there are no events, an empty array is returned.","pos":[90,141]}]}],"pos":[47611,47753],"yaml":true},{"content":"Returns a <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field with the specified name.","nodes":[{"pos":[0,113],"content":"Returns a <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> object representing the field with the specified name.","source":"Returns a <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field with the specified name."}],"pos":[49148,49262],"yaml":true},{"content":"Use a `bindingAttr` of <xref:System.Reflection.BindingFlags>.NonPublic to return all public and nonpublic fields. Use `BindingFlags.IgnoreCase` to ignore the case of the fields, as the search is case-sensitive by default.","nodes":[{"pos":[0,221],"content":"Use a `bindingAttr` of <xref:System.Reflection.BindingFlags>.NonPublic to return all public and nonpublic fields. Use `BindingFlags.IgnoreCase` to ignore the case of the fields, as the search is case-sensitive by default.","nodes":[{"content":"Use a <ph id=\"ph1\">`bindingAttr`</ph> of <ph id=\"ph2\">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic to return all public and nonpublic fields.","pos":[0,113],"source":"Use a `bindingAttr` of <xref:System.Reflection.BindingFlags>.NonPublic to return all public and nonpublic fields."},{"content":"Use <ph id=\"ph1\">`BindingFlags.IgnoreCase`</ph> to ignore the case of the fields, as the search is case-sensitive by default.","pos":[114,221],"source":" Use `BindingFlags.IgnoreCase` to ignore the case of the fields, as the search is case-sensitive by default."}]}],"pos":[49273,49495],"yaml":true,"extradata":"MT"},{"content":"The name of the field to find.","nodes":[{"pos":[0,30],"content":"The name of the field to find.","nodes":[{"content":"The name of the field to find.","pos":[0,30]}]}],"pos":[49706,49737],"yaml":true},{"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"pos":[0,175],"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"content":"A bitmask that affects the way in which the search is conducted.","pos":[0,64]},{"content":"The value is a combination of zero or more bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[65,175],"source":" The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."}]}],"pos":[49821,49997],"yaml":true},{"content":"A `FieldInfo` object representing the field declared or inherited by this `TypeDelegator` with the specified name. Returns `null` if no such field is found.","nodes":[{"pos":[0,156],"content":"A `FieldInfo` object representing the field declared or inherited by this `TypeDelegator` with the specified name. Returns `null` if no such field is found.","nodes":[{"content":"A <ph id=\"ph1\">`FieldInfo`</ph> object representing the field declared or inherited by this <ph id=\"ph2\">`TypeDelegator`</ph> with the specified name.","pos":[0,114],"source":"A `FieldInfo` object representing the field declared or inherited by this `TypeDelegator` with the specified name."},{"content":"Returns <ph id=\"ph1\">`null`</ph> if no such field is found.","pos":[115,156],"source":" Returns `null` if no such field is found."}]}],"pos":[50068,50225],"yaml":true},{"content":"The <code>name</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>name</code> parameter is `null`."}],"pos":[50395,50438],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing the data fields defined for the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>.","nodes":[{"pos":[0,203],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.FieldInfo\"&gt;&lt;/xref&gt;</ph> objects representing the data fields defined for the type wrapped by the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.TypeDelegator\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing the data fields defined for the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>."}],"pos":[51701,51905],"yaml":true},{"content":"The <xref:System.Reflection.TypeDelegator.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.  \n  \n Use a `bindingAttr` of <xref:System.Reflection.BindingFlags>.NonPublic to return all public and nonpublic fields.","nodes":[{"pos":[0,249],"content":"The <xref:System.Reflection.TypeDelegator.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.","nodes":[{"content":"The <xref:System.Reflection.TypeDelegator.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.","pos":[0,249],"nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.TypeDelegator.GetFields%2A&gt;</ph> method does not return fields in a particular order, such as alphabetical or declaration order.","pos":[0,151],"source":"The <xref:System.Reflection.TypeDelegator.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order."},{"content":"Your code must not depend on the order in which fields are returned, because that order can vary.","pos":[152,249]}]}]},{"pos":[256,369],"content":"Use a <ph id=\"ph1\">`bindingAttr`</ph> of <ph id=\"ph2\">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic to return all public and nonpublic fields.","source":"Use a `bindingAttr` of <xref:System.Reflection.BindingFlags>.NonPublic to return all public and nonpublic fields."}],"pos":[51916,52290],"yaml":true,"extradata":"MT"},{"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"pos":[0,175],"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"content":"A bitmask that affects the way in which the search is conducted.","pos":[0,64]},{"content":"The value is a combination of zero or more bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[65,175],"source":" The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."}]}],"pos":[52515,52691],"yaml":true},{"content":"An array of type `FieldInfo` containing the fields declared or inherited by the current `TypeDelegator`. An empty array is returned if there are no matched fields.","nodes":[{"pos":[0,163],"content":"An array of type `FieldInfo` containing the fields declared or inherited by the current `TypeDelegator`. An empty array is returned if there are no matched fields.","nodes":[{"content":"An array of type <ph id=\"ph1\">`FieldInfo`</ph> containing the fields declared or inherited by the current <ph id=\"ph2\">`TypeDelegator`</ph>.","pos":[0,104],"source":"An array of type `FieldInfo` containing the fields declared or inherited by the current `TypeDelegator`."},{"content":"An empty array is returned if there are no matched fields.","pos":[105,163]}]}],"pos":[52764,52928],"yaml":true},{"content":"Returns the specified interface implemented by the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>.","nodes":[{"pos":[0,132],"content":"Returns the specified interface implemented by the type wrapped by the current <ph id=\"ph1\">&lt;xref href=\"System.Reflection.TypeDelegator\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the specified interface implemented by the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>."}],"pos":[54284,54417],"yaml":true},{"content":"The fully qualified name of the interface implemented by the current class.","nodes":[{"pos":[0,75],"content":"The fully qualified name of the interface implemented by the current class.","nodes":[{"content":"The fully qualified name of the interface implemented by the current class.","pos":[0,75]}]}],"pos":[54582,54658],"yaml":true},{"content":"`true` if the case is to be ignored; otherwise, `false`.","nodes":[{"pos":[0,56],"content":"<ph id=\"ph1\">`true`</ph> if the case is to be ignored; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the case is to be ignored; otherwise, `false`."}],"pos":[54725,54784],"yaml":true},{"content":"A `Type` object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name. If no interface that matches name is found, null is returned.","nodes":[{"pos":[0,221],"content":"A `Type` object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name. If no interface that matches name is found, null is returned.","nodes":[{"content":"A <ph id=\"ph1\">`Type`</ph> object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name.","pos":[0,159],"source":"A `Type` object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name."},{"content":"If no interface that matches name is found, null is returned.","pos":[160,221]}]}],"pos":[54839,55061],"yaml":true},{"content":"The <code>name</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>name</code> parameter is `null`."}],"pos":[55235,55278],"yaml":true},{"content":"Returns an interface mapping for the specified interface type.","nodes":[{"pos":[0,62],"content":"Returns an interface mapping for the specified interface type.","nodes":[{"content":"Returns an interface mapping for the specified interface type.","pos":[0,62]}]}],"pos":[56496,56559],"yaml":true},{"content":"The interface map denotes how an interface is mapped into the actual methods on a class that implements that interface.","nodes":[{"pos":[0,119],"content":"The interface map denotes how an interface is mapped into the actual methods on a class that implements that interface.","nodes":[{"content":"The interface map denotes how an interface is mapped into the actual methods on a class that implements that interface.","pos":[0,119]}]}],"pos":[56570,56690],"yaml":true,"extradata":"MT"},{"content":"The <xref href=\"System.Type\"></xref> of the interface to retrieve a mapping of.","nodes":[{"pos":[0,79],"content":"The <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> of the interface to retrieve a mapping of.","source":"The <xref href=\"System.Type\"></xref> of the interface to retrieve a mapping of."}],"pos":[56951,57031],"yaml":true},{"content":"An <xref href=\"System.Reflection.InterfaceMapping\"></xref> object representing the interface mapping for <code>interfaceType</code>.","nodes":[{"pos":[0,132],"content":"An <ph id=\"ph1\">&lt;xref href=\"System.Reflection.InterfaceMapping\"&gt;&lt;/xref&gt;</ph> object representing the interface mapping for <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">interfaceType</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An <xref href=\"System.Reflection.InterfaceMapping\"></xref> object representing the interface mapping for <code>interfaceType</code>."}],"pos":[57109,57242],"yaml":true},{"content":"Returns all the interfaces implemented on the current class and its base classes.","nodes":[{"pos":[0,81],"content":"Returns all the interfaces implemented on the current class and its base classes.","nodes":[{"content":"Returns all the interfaces implemented on the current class and its base classes.","pos":[0,81]}]}],"pos":[58550,58632],"yaml":true},{"content":"An array of type `Type` containing all the interfaces implemented on the current class and its base classes. If none are defined, an empty array is returned.","nodes":[{"pos":[0,157],"content":"An array of type `Type` containing all the interfaces implemented on the current class and its base classes. If none are defined, an empty array is returned.","nodes":[{"content":"An array of type <ph id=\"ph1\">`Type`</ph> containing all the interfaces implemented on the current class and its base classes.","pos":[0,108],"source":"An array of type `Type` containing all the interfaces implemented on the current class and its base classes."},{"content":"If none are defined, an empty array is returned.","pos":[109,157]}]}],"pos":[58772,58930],"yaml":true},{"content":"Returns members (properties, methods, constructors, fields, events, and nested types) specified by the given <code>name</code>, <code>type</code>, and <code>bindingAttr</code>.","nodes":[{"pos":[0,176],"content":"Returns members (properties, methods, constructors, fields, events, and nested types) specified by the given <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept>, <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">type</ph><ept id=\"p2\">&lt;/code&gt;</ept>, and <bpt id=\"p3\">&lt;code&gt;</bpt><ph id=\"ph3\">bindingAttr</ph><ept id=\"p3\">&lt;/code&gt;</ept>.","source":"Returns members (properties, methods, constructors, fields, events, and nested types) specified by the given <code>name</code>, <code>type</code>, and <code>bindingAttr</code>."}],"pos":[60464,60641],"yaml":true},{"content":"If `bindingAttr` is <xref:System.Reflection.BindingFlags>.NonPublic, all the members will be considered. If there are no matches, an empty array is returned.","nodes":[{"pos":[0,157],"content":"If `bindingAttr` is <xref:System.Reflection.BindingFlags>.NonPublic, all the members will be considered. If there are no matches, an empty array is returned.","nodes":[{"content":"If <ph id=\"ph1\">`bindingAttr`</ph> is <ph id=\"ph2\">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic, all the members will be considered.","pos":[0,104],"source":"If `bindingAttr` is <xref:System.Reflection.BindingFlags>.NonPublic, all the members will be considered."},{"content":"If there are no matches, an empty array is returned.","pos":[105,157]}]}],"pos":[60652,60810],"yaml":true,"extradata":"MT"},{"content":"The name of the member to get.","nodes":[{"pos":[0,30],"content":"The name of the member to get.","nodes":[{"content":"The name of the member to get.","pos":[0,30]}]}],"pos":[61061,61092],"yaml":true},{"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"pos":[0,175],"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"content":"A bitmask that affects the way in which the search is conducted.","pos":[0,64]},{"content":"The value is a combination of zero or more bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[65,175],"source":" The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."}]}],"pos":[61168,61344],"yaml":true},{"content":"The type of members to get.","nodes":[{"pos":[0,27],"content":"The type of members to get.","nodes":[{"content":"The type of members to get.","pos":[0,27]}]}],"pos":[61428,61456],"yaml":true},{"content":"An array of type `MemberInfo` containing all the members of the current class and its base class meeting the specified criteria.","nodes":[{"pos":[0,128],"content":"An array of type <ph id=\"ph1\">`MemberInfo`</ph> containing all the members of the current class and its base class meeting the specified criteria.","source":"An array of type `MemberInfo` containing all the members of the current class and its base class meeting the specified criteria."}],"pos":[61530,61659],"yaml":true},{"content":"The <code>name</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>name</code> parameter is `null`."}],"pos":[61830,61873],"yaml":true},{"content":"Returns members specified by <code>bindingAttr</code>.","nodes":[{"pos":[0,54],"content":"Returns members specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bindingAttr</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"Returns members specified by <code>bindingAttr</code>."}],"pos":[63142,63197],"yaml":true},{"content":"If `bindingAttr` is <xref:System.Reflection.BindingFlags>.NonPublic, all the members will be considered. If there are no matches, an empty array is returned.","nodes":[{"pos":[0,157],"content":"If `bindingAttr` is <xref:System.Reflection.BindingFlags>.NonPublic, all the members will be considered. If there are no matches, an empty array is returned.","nodes":[{"content":"If <ph id=\"ph1\">`bindingAttr`</ph> is <ph id=\"ph2\">&lt;xref:System.Reflection.BindingFlags&gt;</ph>.NonPublic, all the members will be considered.","pos":[0,104],"source":"If `bindingAttr` is <xref:System.Reflection.BindingFlags>.NonPublic, all the members will be considered."},{"content":"If there are no matches, an empty array is returned.","pos":[105,157]}]}],"pos":[63208,63366],"yaml":true,"extradata":"MT"},{"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"pos":[0,175],"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"content":"A bitmask that affects the way in which the search is conducted.","pos":[0,64]},{"content":"The value is a combination of zero or more bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[65,175],"source":" The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."}]}],"pos":[63593,63769],"yaml":true},{"content":"An array of type `MemberInfo` containing all the members of the current class and its base classes that meet the <code>bindingAttr</code> filter.","nodes":[{"pos":[0,145],"content":"An array of type <ph id=\"ph1\">`MemberInfo`</ph> containing all the members of the current class and its base classes that meet the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">bindingAttr</ph><ept id=\"p1\">&lt;/code&gt;</ept> filter.","source":"An array of type `MemberInfo` containing all the members of the current class and its base classes that meet the <code>bindingAttr</code> filter."}],"pos":[63843,63989],"yaml":true},{"content":"Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.","nodes":[{"pos":[0,178],"content":"Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.","nodes":[{"content":"Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.","pos":[0,178]}]}],"pos":[65928,66107],"yaml":true},{"content":"The `callConvention` parameter indicates the calling convention for the entry point. If no <xref:System.Reflection.CallingConventions> is specified, a default `CallingConventions` value of `Standard` is used.","nodes":[{"pos":[0,208],"content":"The `callConvention` parameter indicates the calling convention for the entry point. If no <xref:System.Reflection.CallingConventions> is specified, a default `CallingConventions` value of `Standard` is used.","nodes":[{"content":"The <ph id=\"ph1\">`callConvention`</ph> parameter indicates the calling convention for the entry point.","pos":[0,84],"source":"The `callConvention` parameter indicates the calling convention for the entry point."},{"content":"If no <ph id=\"ph1\">&lt;xref:System.Reflection.CallingConventions&gt;</ph> is specified, a default <ph id=\"ph2\">`CallingConventions`</ph> value of <ph id=\"ph3\">`Standard`</ph> is used.","pos":[85,208],"source":" If no <xref:System.Reflection.CallingConventions> is specified, a default `CallingConventions` value of `Standard` is used."}]}],"pos":[66118,66327],"yaml":true,"extradata":"MT"},{"content":"The method name.","nodes":[{"pos":[0,16],"content":"The method name.","nodes":[{"content":"The method name.","pos":[0,16]}]}],"pos":[66696,66713],"yaml":true},{"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"pos":[0,175],"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"content":"A bitmask that affects the way in which the search is conducted.","pos":[0,64]},{"content":"The value is a combination of zero or more bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[65,175],"source":" The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."}]}],"pos":[66797,66973],"yaml":true},{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"pos":[0,204],"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If <code>binder</code> is `null`, the default binder is used.","nodes":[{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id=\"ph1\">`MemberInfo`</ph> objects using reflection.","pos":[0,142],"source":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the default binder is used.","pos":[143,204],"source":" If <code>binder</code> is `null`, the default binder is used."}]}],"pos":[67046,67251],"yaml":true},{"content":"The calling conventions.","nodes":[{"pos":[0,24],"content":"The calling conventions.","nodes":[{"content":"The calling conventions.","pos":[0,24]}]}],"pos":[67344,67369],"yaml":true},{"content":"An array of type `Type` containing a list of the parameter number, order, and types. Types cannot be `null`; use an appropriate `GetMethod` method or an empty array to search for a method without parameters.","nodes":[{"pos":[0,207],"content":"An array of type `Type` containing a list of the parameter number, order, and types. Types cannot be `null`; use an appropriate `GetMethod` method or an empty array to search for a method without parameters.","nodes":[{"content":"An array of type <ph id=\"ph1\">`Type`</ph> containing a list of the parameter number, order, and types.","pos":[0,84],"source":"An array of type `Type` containing a list of the parameter number, order, and types."},{"content":"Types cannot be <ph id=\"ph1\">`null`</ph>; use an appropriate <ph id=\"ph2\">`GetMethod`</ph> method or an empty array to search for a method without parameters.","pos":[85,207],"source":" Types cannot be `null`; use an appropriate `GetMethod` method or an empty array to search for a method without parameters."}]}],"pos":[67430,67638],"yaml":true},{"content":"An array of type `ParameterModifier` having the same length as the <code>types</code> array, whose elements represent the attributes associated with the parameters of the method to get.","nodes":[{"pos":[0,185],"content":"An array of type <ph id=\"ph1\">`ParameterModifier`</ph> having the same length as the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">types</ph><ept id=\"p1\">&lt;/code&gt;</ept> array, whose elements represent the attributes associated with the parameters of the method to get.","source":"An array of type `ParameterModifier` having the same length as the <code>types</code> array, whose elements represent the attributes associated with the parameters of the method to get."}],"pos":[67727,67913],"yaml":true},{"content":"A `MethodInfoInfo` object for the implementation method that matches the specified criteria, or `null` if a match cannot be found.","nodes":[{"pos":[0,130],"content":"A <ph id=\"ph1\">`MethodInfoInfo`</ph> object for the implementation method that matches the specified criteria, or <ph id=\"ph2\">`null`</ph> if a match cannot be found.","source":"A `MethodInfoInfo` object for the implementation method that matches the specified criteria, or `null` if a match cannot be found."}],"pos":[67985,68116],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects representing specified methods of the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>.","nodes":[{"pos":[0,197],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.MethodInfo\"&gt;&lt;/xref&gt;</ph> objects representing specified methods of the type wrapped by the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.TypeDelegator\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects representing specified methods of the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>."}],"pos":[69461,69659],"yaml":true},{"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"pos":[0,175],"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"content":"A bitmask that affects the way in which the search is conducted.","pos":[0,64]},{"content":"The value is a combination of zero or more bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[65,175],"source":" The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."}]}],"pos":[69886,70062],"yaml":true},{"content":"An array of `MethodInfo` objects representing the methods defined on this `TypeDelegator`.","nodes":[{"pos":[0,90],"content":"An array of <ph id=\"ph1\">`MethodInfo`</ph> objects representing the methods defined on this <ph id=\"ph2\">`TypeDelegator`</ph>.","source":"An array of `MethodInfo` objects representing the methods defined on this `TypeDelegator`."}],"pos":[70136,70227],"yaml":true},{"content":"Returns a nested type specified by <code>name</code> and in <code>bindingAttr</code> that are declared or inherited by the type represented by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>.","nodes":[{"pos":[0,208],"content":"Returns a nested type specified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> and in <bpt id=\"p2\">&lt;code&gt;</bpt><ph id=\"ph2\">bindingAttr</ph><ept id=\"p2\">&lt;/code&gt;</ept> that are declared or inherited by the type represented by the current <ph id=\"ph3\">&lt;xref href=\"System.Reflection.TypeDelegator\"&gt;&lt;/xref&gt;</ph>.","source":"Returns a nested type specified by <code>name</code> and in <code>bindingAttr</code> that are declared or inherited by the type represented by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>."}],"pos":[71653,71862],"yaml":true},{"content":"The nested type's name.","nodes":[{"pos":[0,23],"content":"The nested type's name.","nodes":[{"content":"The nested type's name.","pos":[0,23]}]}],"pos":[72055,72079],"yaml":true},{"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"pos":[0,175],"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"content":"A bitmask that affects the way in which the search is conducted.","pos":[0,64]},{"content":"The value is a combination of zero or more bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[65,175],"source":" The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."}]}],"pos":[72163,72339],"yaml":true},{"content":"A `Type` object representing the nested type.","nodes":[{"pos":[0,45],"content":"A <ph id=\"ph1\">`Type`</ph> object representing the nested type.","source":"A `Type` object representing the nested type."}],"pos":[72394,72440],"yaml":true},{"content":"The <code>name</code> parameter is `null`.","nodes":[{"pos":[0,42],"content":"The <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">name</ph><ept id=\"p1\">&lt;/code&gt;</ept> parameter is <ph id=\"ph2\">`null`</ph>.","source":"The <code>name</code> parameter is `null`."}],"pos":[72615,72658],"yaml":true},{"content":"Returns the nested types specified in <code>bindingAttr</code> that are declared or inherited by the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>.","nodes":[{"pos":[0,182],"content":"Returns the nested types specified in <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">bindingAttr</ph><ept id=\"p1\">&lt;/code&gt;</ept> that are declared or inherited by the type wrapped by the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.TypeDelegator\"&gt;&lt;/xref&gt;</ph>.","source":"Returns the nested types specified in <code>bindingAttr</code> that are declared or inherited by the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>."}],"pos":[73951,74134],"yaml":true},{"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"pos":[0,175],"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"content":"A bitmask that affects the way in which the search is conducted.","pos":[0,64]},{"content":"The value is a combination of zero or more bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[65,175],"source":" The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."}]}],"pos":[74341,74517],"yaml":true},{"content":"An array of type `Type` containing the nested types.","nodes":[{"pos":[0,52],"content":"An array of type <ph id=\"ph1\">`Type`</ph> containing the nested types.","source":"An array of type `Type` containing the nested types."}],"pos":[74574,74627],"yaml":true},{"content":"Returns an array of <xref href=\"System.Reflection.PropertyInfo\"></xref> objects representing properties of the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>.","nodes":[{"pos":[0,192],"content":"Returns an array of <ph id=\"ph1\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> objects representing properties of the type wrapped by the current <ph id=\"ph2\">&lt;xref href=\"System.Reflection.TypeDelegator\"&gt;&lt;/xref&gt;</ph>.","source":"Returns an array of <xref href=\"System.Reflection.PropertyInfo\"></xref> objects representing properties of the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>."}],"pos":[75991,76184],"yaml":true},{"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"pos":[0,175],"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"content":"A bitmask that affects the way in which the search is conducted.","pos":[0,64]},{"content":"The value is a combination of zero or more bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[65,175],"source":" The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."}]}],"pos":[76416,76592],"yaml":true},{"content":"An array of `PropertyInfo` objects representing properties defined on this `TypeDelegator`.","nodes":[{"pos":[0,91],"content":"An array of <ph id=\"ph1\">`PropertyInfo`</ph> objects representing properties defined on this <ph id=\"ph2\">`TypeDelegator`</ph>.","source":"An array of `PropertyInfo` objects representing properties defined on this `TypeDelegator`."}],"pos":[76668,76760],"yaml":true},{"content":"When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.","nodes":[{"pos":[0,179],"content":"When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.","nodes":[{"content":"When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.","pos":[0,179]}]}],"pos":[78597,78777],"yaml":true},{"content":"The property to get.","nodes":[{"pos":[0,20],"content":"The property to get.","nodes":[{"content":"The property to get.","pos":[0,20]}]}],"pos":[79114,79135],"yaml":true},{"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"pos":[0,175],"content":"A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.","nodes":[{"content":"A bitmask that affects the way in which the search is conducted.","pos":[0,64]},{"content":"The value is a combination of zero or more bit flags from <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph>.","pos":[65,175],"source":" The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>."}]}],"pos":[79219,79395],"yaml":true},{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection. If <code>binder</code> is `null`, the default binder is used. See <xref href=\"System.Reflection.Binder\"></xref>.","nodes":[{"pos":[0,253],"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection. If <code>binder</code> is `null`, the default binder is used. See <xref href=\"System.Reflection.Binder\"></xref>.","nodes":[{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id=\"ph1\">`MemberInfo`</ph> objects via reflection.","pos":[0,140],"source":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the default binder is used.","pos":[141,202],"source":" If <code>binder</code> is `null`, the default binder is used."},{"content":"See <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Binder\"&gt;&lt;/xref&gt;</ph>.","pos":[203,253],"source":" See <xref href=\"System.Reflection.Binder\"></xref>."}]}],"pos":[79468,79722],"yaml":true},{"content":"The return type of the property.","nodes":[{"pos":[0,32],"content":"The return type of the property.","nodes":[{"content":"The return type of the property.","pos":[0,32]}]}],"pos":[79786,79819],"yaml":true},{"content":"A list of parameter types. The list represents the number, order, and types of the parameters. Types cannot be null; use an appropriate `GetMethod` method or an empty array to search for a method without parameters.","nodes":[{"pos":[0,215],"content":"A list of parameter types. The list represents the number, order, and types of the parameters. Types cannot be null; use an appropriate `GetMethod` method or an empty array to search for a method without parameters.","nodes":[{"content":"A list of parameter types.","pos":[0,26]},{"content":"The list represents the number, order, and types of the parameters.","pos":[27,94]},{"content":"Types cannot be null; use an appropriate <ph id=\"ph1\">`GetMethod`</ph> method or an empty array to search for a method without parameters.","pos":[95,215],"source":" Types cannot be null; use an appropriate `GetMethod` method or an empty array to search for a method without parameters."}]}],"pos":[79880,80096],"yaml":true},{"content":"An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get.","nodes":[{"pos":[0,133],"content":"An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get.","nodes":[{"content":"An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get.","pos":[0,133]}]}],"pos":[80185,80319],"yaml":true},{"content":"A <xref href=\"System.Reflection.PropertyInfo\"></xref> object for the property that matches the specified criteria, or null if a match cannot be found.","nodes":[{"pos":[0,150],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.PropertyInfo\"&gt;&lt;/xref&gt;</ph> object for the property that matches the specified criteria, or null if a match cannot be found.","source":"A <xref href=\"System.Reflection.PropertyInfo\"></xref> object for the property that matches the specified criteria, or null if a match cannot be found."}],"pos":[80393,80544],"yaml":true},{"content":"Gets the GUID (globally unique identifier) of the implemented type.","nodes":[{"pos":[0,67],"content":"Gets the GUID (globally unique identifier) of the implemented type.","nodes":[{"content":"Gets the GUID (globally unique identifier) of the implemented type.","pos":[0,67]}]}],"pos":[81719,81787],"yaml":true},{"content":"The GUID (globally unique identifier) is a 128-bit unique identification string used to identify a class or an interface. It is primarily useful for interoperability between the Microsoft .NET Framework and COM.","nodes":[{"pos":[0,211],"content":"The GUID (globally unique identifier) is a 128-bit unique identification string used to identify a class or an interface. It is primarily useful for interoperability between the Microsoft .NET Framework and COM.","nodes":[{"content":"The GUID (globally unique identifier) is a 128-bit unique identification string used to identify a class or an interface. It is primarily useful for interoperability between the Microsoft .NET Framework and COM.","pos":[0,211],"nodes":[{"content":"The GUID (globally unique identifier) is a 128-bit unique identification string used to identify a class or an interface.","pos":[0,121]},{"content":"It is primarily useful for interoperability between the Microsoft .NET Framework and COM.","pos":[122,211]}]}]}],"pos":[81798,82010],"yaml":true,"extradata":"MT"},{"content":"A GUID.","nodes":[{"pos":[0,7],"content":"A GUID.","nodes":[{"content":"A GUID.","pos":[0,7]}]}],"pos":[82123,82131],"yaml":true},{"content":"Gets a value indicating whether the current <xref href=\"System.Type\"></xref> encompasses or refers to another type; that is, whether the current <xref href=\"System.Type\"></xref> is an array, a pointer or a ByRef.","nodes":[{"pos":[0,212],"content":"Gets a value indicating whether the current <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> encompasses or refers to another type; that is, whether the current <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is an array, a pointer or a ByRef.","source":"Gets a value indicating whether the current <xref href=\"System.Type\"></xref> encompasses or refers to another type; that is, whether the current <xref href=\"System.Type\"></xref> is an array, a pointer or a ByRef."}],"pos":[83383,83596],"yaml":true},{"content":"`true` if the <xref href=\"System.Type\"></xref> is an array, a pointer or a ByRef; otherwise, `false`.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is an array, a pointer or a ByRef; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Type\"></xref> is an array, a pointer or a ByRef; otherwise, `false`."}],"pos":[83743,83847],"yaml":true},{"content":"Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.","nodes":[{"pos":[0,224],"content":"Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.","nodes":[{"content":"Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.","pos":[0,224],"nodes":[{"content":"Invokes the specified member.","pos":[0,29]},{"content":"The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.","pos":[30,224]}]}]}],"pos":[85911,86136],"yaml":true},{"content":"A method will be invoked if both the following conditions are true:  \n  \n-   The number of parameters in the method declaration equals the number of arguments in the specified argument list (unless default arguments are defined on the member).  \n  \n-   The type of each arguments can be converted by the binder to the type of the parameter.  \n  \n The binder will find all the matching methods. These methods are found based upon the type of binding requested (`BindingFlags.MethodInvoke`, `BindingFlags.GetProperties`, and so on). The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.  \n  \n After the method is selected, it will be invoked. Accessibility is checked at that point. The search may control which set of methods are searched based upon the accessibility attribute associated with the method. The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName> method is responsible for selecting the method to be invoked. The default binder selects the most specific match.  \n  \n> [!NOTE]\n>  Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using reflection whenever the code is fully trusted.  \n  \n Currently, `InvokeMember` performs the Microsoft .NET Framework reflection semantics for every type of object.  \n  \n If the member specified by name is an array and the `BindingFlags.GetField` flag is set on `invokeAttr`, the `args` array specifies the elements whose values are to be returned. For example, the following call through `Type` object `t` returns the value of the first element of the string array MyArray, which is a member of the calling object:  \n  \n `String ret = (String) t.InvokeMember (\"MyArray\", BindingFlags.GetField, null, this, new Variant[]{0});`  \n  \n You can use `InvokeMember` to set one or more elements of a member array. All elements are set to the same value. The `args` array must be formatted as follows:  \n  \n```  \n{index1,  \n    index2,, value}  \n```  \n  \n For example, to set the first member of MyArray from the previous example, the syntax is as follows:  \n  \n```  \nt.InvokeMember (\"MyArray\", BindingFlags.SetField, null, this, new  \n    Variant[]{0,\"Updated\"});  \n```","nodes":[{"pos":[0,67],"content":"A method will be invoked if both the following conditions are true:","nodes":[{"content":"A method will be invoked if both the following conditions are true:","pos":[0,67]}]},{"pos":[77,243],"content":"The number of parameters in the method declaration equals the number of arguments in the specified argument list (unless default arguments are defined on the member).","nodes":[{"content":"The number of parameters in the method declaration equals the number of arguments in the specified argument list (unless default arguments are defined on the member).","pos":[0,166]}]},{"pos":[253,340],"content":"The type of each arguments can be converted by the binder to the type of the parameter.","nodes":[{"content":"The type of each arguments can be converted by the binder to the type of the parameter.","pos":[0,87]}]},{"pos":[347,648],"content":"The binder will find all the matching methods. These methods are found based upon the type of binding requested (`BindingFlags.MethodInvoke`, `BindingFlags.GetProperties`, and so on). The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.","nodes":[{"content":"The binder will find all the matching methods.","pos":[0,46]},{"content":"These methods are found based upon the type of binding requested (<ph id=\"ph1\">`BindingFlags.MethodInvoke`</ph>, <ph id=\"ph2\">`BindingFlags.GetProperties`</ph>, and so on).","pos":[47,183],"source":" These methods are found based upon the type of binding requested (`BindingFlags.MethodInvoke`, `BindingFlags.GetProperties`, and so on)."},{"content":"The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.","pos":[184,301]}]},{"pos":[655,1059],"content":"After the method is selected, it will be invoked. Accessibility is checked at that point. The search may control which set of methods are searched based upon the accessibility attribute associated with the method. The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName> method is responsible for selecting the method to be invoked. The default binder selects the most specific match.","nodes":[{"content":"After the method is selected, it will be invoked. Accessibility is checked at that point. The search may control which set of methods are searched based upon the accessibility attribute associated with the method. The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName> method is responsible for selecting the method to be invoked. The default binder selects the most specific match.","pos":[0,404],"nodes":[{"content":"After the method is selected, it will be invoked.","pos":[0,49]},{"content":"Accessibility is checked at that point.","pos":[50,89]},{"content":"The search may control which set of methods are searched based upon the accessibility attribute associated with the method.","pos":[90,213]},{"content":"The <ph id=\"ph1\">&lt;xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName&gt;</ph> method is responsible for selecting the method to be invoked.","pos":[214,352],"source":" The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName> method is responsible for selecting the method to be invoked."},{"content":"The default binder selects the most specific match.","pos":[353,404]}]}]},{"pos":[1067,1277],"content":"[!NOTE]\n Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using reflection whenever the code is fully trusted.","leadings":["","> "],"nodes":[{"content":" Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using reflection whenever the code is fully trusted.","pos":[8,208],"nodes":[{"content":"Access restrictions are ignored for fully trusted code.","pos":[1,56]},{"content":"That is, private constructors, methods, fields, and properties can be accessed and invoked using reflection whenever the code is fully trusted.","pos":[57,200]}]}]},{"pos":[1284,1394],"content":"Currently, <ph id=\"ph1\">`InvokeMember`</ph> performs the Microsoft .NET Framework reflection semantics for every type of object.","source":"Currently, `InvokeMember` performs the Microsoft .NET Framework reflection semantics for every type of object."},{"pos":[1401,1745],"content":"If the member specified by name is an array and the `BindingFlags.GetField` flag is set on `invokeAttr`, the `args` array specifies the elements whose values are to be returned. For example, the following call through `Type` object `t` returns the value of the first element of the string array MyArray, which is a member of the calling object:","nodes":[{"content":"If the member specified by name is an array and the <ph id=\"ph1\">`BindingFlags.GetField`</ph> flag is set on <ph id=\"ph2\">`invokeAttr`</ph>, the <ph id=\"ph3\">`args`</ph> array specifies the elements whose values are to be returned.","pos":[0,177],"source":"If the member specified by name is an array and the `BindingFlags.GetField` flag is set on `invokeAttr`, the `args` array specifies the elements whose values are to be returned."},{"content":"For example, the following call through <ph id=\"ph1\">`Type`</ph> object <ph id=\"ph2\">`t`</ph> returns the value of the first element of the string array MyArray, which is a member of the calling object:","pos":[178,344],"source":" For example, the following call through `Type` object `t` returns the value of the first element of the string array MyArray, which is a member of the calling object:"}]},{"pos":[1863,2023],"content":"You can use `InvokeMember` to set one or more elements of a member array. All elements are set to the same value. The `args` array must be formatted as follows:","nodes":[{"content":"You can use <ph id=\"ph1\">`InvokeMember`</ph> to set one or more elements of a member array.","pos":[0,73],"source":"You can use `InvokeMember` to set one or more elements of a member array."},{"content":"All elements are set to the same value.","pos":[74,113]},{"content":"The <ph id=\"ph1\">`args`</ph> array must be formatted as follows:","pos":[114,160],"source":" The `args` array must be formatted as follows:"}]},{"pos":[2078,2178],"content":"For example, to set the first member of MyArray from the previous example, the syntax is as follows:","nodes":[{"content":"For example, to set the first member of MyArray from the previous example, the syntax is as follows:","pos":[0,100]}]}],"pos":[86147,88479],"yaml":true,"extradata":"MT"},{"content":"The name of the member to invoke. This may be a constructor, method, property, or field. If an empty string (\"\") is passed, the default member is invoked.","nodes":[{"pos":[0,154],"content":"The name of the member to invoke. This may be a constructor, method, property, or field. If an empty string (\"\") is passed, the default member is invoked.","nodes":[{"content":"The name of the member to invoke. This may be a constructor, method, property, or field. If an empty string (\"\") is passed, the default member is invoked.","pos":[0,154],"nodes":[{"content":"The name of the member to invoke.","pos":[0,33]},{"content":"This may be a constructor, method, property, or field.","pos":[34,88]},{"content":"If an empty string (\"\") is passed, the default member is invoked.","pos":[89,154]}]}]}],"pos":[88852,89007],"yaml":true},{"content":"The invocation attribute. This must be one of the following <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`. A suitable invocation attribute must be specified. If a static member is to be invoked, the `Static` flag must be set.","nodes":[{"pos":[0,333],"content":"The invocation attribute. This must be one of the following <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`. A suitable invocation attribute must be specified. If a static member is to be invoked, the `Static` flag must be set.","nodes":[{"content":"The invocation attribute.","pos":[0,25]},{"content":"This must be one of the following <ph id=\"ph1\">&lt;xref href=\"System.Reflection.BindingFlags\"&gt;&lt;/xref&gt;</ph> : <ph id=\"ph2\">`InvokeMethod`</ph>, <ph id=\"ph3\">`CreateInstance`</ph>, <ph id=\"ph4\">`Static`</ph>, <ph id=\"ph5\">`GetField`</ph>, <ph id=\"ph6\">`SetField`</ph>, <ph id=\"ph7\">`GetProperty`</ph>, or <ph id=\"ph8\">`SetProperty`</ph>.","pos":[26,214],"source":" This must be one of the following <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`."},{"content":"A suitable invocation attribute must be specified.","pos":[215,265]},{"content":"If a static member is to be invoked, the <ph id=\"ph1\">`Static`</ph> flag must be set.","pos":[266,333],"source":" If a static member is to be invoked, the `Static` flag must be set."}]}],"pos":[89090,89426],"yaml":true},{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection. If <code>binder</code> is `null`, the default binder is used. See <xref href=\"System.Reflection.Binder\"></xref>.","nodes":[{"pos":[0,253],"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection. If <code>binder</code> is `null`, the default binder is used. See <xref href=\"System.Reflection.Binder\"></xref>.","nodes":[{"content":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of <ph id=\"ph1\">`MemberInfo`</ph> objects via reflection.","pos":[0,140],"source":"An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">binder</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the default binder is used.","pos":[141,202],"source":" If <code>binder</code> is `null`, the default binder is used."},{"content":"See <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Binder\"&gt;&lt;/xref&gt;</ph>.","pos":[203,253],"source":" See <xref href=\"System.Reflection.Binder\"></xref>."}]}],"pos":[89499,89753],"yaml":true},{"content":"The object on which to invoke the specified member.","nodes":[{"pos":[0,51],"content":"The object on which to invoke the specified member.","nodes":[{"content":"The object on which to invoke the specified member.","pos":[0,51]}]}],"pos":[89815,89867],"yaml":true},{"content":"An array of type `Object` that contains the number, order, and type of the parameters of the member to be invoked. If <code>args</code> contains an uninitialized `Object`, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string.","nodes":[{"pos":[0,265],"content":"An array of type `Object` that contains the number, order, and type of the parameters of the member to be invoked. If <code>args</code> contains an uninitialized `Object`, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string.","nodes":[{"content":"An array of type <ph id=\"ph1\">`Object`</ph> that contains the number, order, and type of the parameters of the member to be invoked.","pos":[0,114],"source":"An array of type `Object` that contains the number, order, and type of the parameters of the member to be invoked."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> contains an uninitialized <ph id=\"ph2\">`Object`</ph>, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string.","pos":[115,265],"source":" If <code>args</code> contains an uninitialized `Object`, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string."}]}],"pos":[89929,90195],"yaml":true},{"content":"An array of type `ParameterModifer` that is the same length as <code>args</code>, with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the member's signature. For ByRef, use `ParameterModifer.ByRef`, and for none, use `ParameterModifer.None`. The default binder does exact matching on these. Attributes such as `In` and `InOut` are not used in binding, and can be viewed using `ParameterInfo`.","nodes":[{"pos":[0,492],"content":"An array of type `ParameterModifer` that is the same length as <code>args</code>, with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the member's signature. For ByRef, use `ParameterModifer.ByRef`, and for none, use `ParameterModifer.None`. The default binder does exact matching on these. Attributes such as `In` and `InOut` are not used in binding, and can be viewed using `ParameterInfo`.","nodes":[{"content":"An array of type <ph id=\"ph1\">`ParameterModifer`</ph> that is the same length as <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept>, with elements that represent the attributes associated with the arguments of the member to be invoked.","pos":[0,184],"source":"An array of type `ParameterModifer` that is the same length as <code>args</code>, with elements that represent the attributes associated with the arguments of the member to be invoked."},{"content":"A parameter has attributes associated with it in the member's signature.","pos":[185,257]},{"content":"For ByRef, use <ph id=\"ph1\">`ParameterModifer.ByRef`</ph>, and for none, use <ph id=\"ph2\">`ParameterModifer.None`</ph>.","pos":[258,341],"source":" For ByRef, use `ParameterModifer.ByRef`, and for none, use `ParameterModifer.None`."},{"content":"The default binder does exact matching on these.","pos":[342,390]},{"content":"Attributes such as <ph id=\"ph1\">`In`</ph> and <ph id=\"ph2\">`InOut`</ph> are not used in binding, and can be viewed using <ph id=\"ph3\">`ParameterInfo`</ph>.","pos":[391,492],"source":" Attributes such as `In` and `InOut` are not used in binding, and can be viewed using `ParameterInfo`."}]}],"pos":[90284,90777],"yaml":true},{"content":"An instance of `CultureInfo` used to govern the coercion of types. This is necessary, for example, to convert a string that represents 1000 to a `Double` value, since 1000 is represented differently by different cultures. If <code>culture</code> is `null`, the `CultureInfo` for the current thread's `CultureInfo` is used.","nodes":[{"pos":[0,322],"content":"An instance of `CultureInfo` used to govern the coercion of types. This is necessary, for example, to convert a string that represents 1000 to a `Double` value, since 1000 is represented differently by different cultures. If <code>culture</code> is `null`, the `CultureInfo` for the current thread's `CultureInfo` is used.","nodes":[{"content":"An instance of <ph id=\"ph1\">`CultureInfo`</ph> used to govern the coercion of types.","pos":[0,66],"source":"An instance of `CultureInfo` used to govern the coercion of types."},{"content":"This is necessary, for example, to convert a string that represents 1000 to a <ph id=\"ph1\">`Double`</ph> value, since 1000 is represented differently by different cultures.","pos":[67,221],"source":" This is necessary, for example, to convert a string that represents 1000 to a `Double` value, since 1000 is represented differently by different cultures."},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">culture</ph><ept id=\"p1\">&lt;/code&gt;</ept> is <ph id=\"ph2\">`null`</ph>, the <ph id=\"ph3\">`CultureInfo`</ph> for the current thread's <ph id=\"ph4\">`CultureInfo`</ph> is used.","pos":[222,322],"source":" If <code>culture</code> is `null`, the `CultureInfo` for the current thread's `CultureInfo` is used."}]}],"pos":[90859,91182],"yaml":true},{"content":"An array of type `String` containing parameter names that match up, starting at element zero, with the <code>args</code> array. There must be no holes in the array. If <code>args</code>. `Length` is greater than <code>namedParameters</code>. `Length`, the remaining parameters are filled in order.","nodes":[{"pos":[0,297],"content":"An array of type `String` containing parameter names that match up, starting at element zero, with the <code>args</code> array. There must be no holes in the array. If <code>args</code>. `Length` is greater than <code>namedParameters</code>. `Length`, the remaining parameters are filled in order.","nodes":[{"content":"An array of type <ph id=\"ph1\">`String`</ph> containing parameter names that match up, starting at element zero, with the <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept> array.","pos":[0,127],"source":"An array of type `String` containing parameter names that match up, starting at element zero, with the <code>args</code> array."},{"content":"There must be no holes in the array.","pos":[128,164]},{"content":"If <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">args</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[165,186],"source":" If <code>args</code>."},{"content":"<ph id=\"ph1\">`Length`</ph> is greater than <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">namedParameters</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","pos":[187,241],"source":"`Length` is greater than <code>namedParameters</code>."},{"content":"<ph id=\"ph1\">`Length`</ph>, the remaining parameters are filled in order.","pos":[242,297],"source":"`Length`, the remaining parameters are filled in order."}]}],"pos":[91255,91553],"yaml":true},{"content":"An `Object` representing the return value of the invoked member.","nodes":[{"pos":[0,64],"content":"An <ph id=\"ph1\">`Object`</ph> representing the return value of the invoked member.","source":"An `Object` representing the return value of the invoked member."}],"pos":[91610,91675],"yaml":true},{"content":"Returns a value that indicates whether the <xref href=\"System.Type\"></xref> is an array.","nodes":[{"pos":[0,88],"content":"Returns a value that indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is an array.","source":"Returns a value that indicates whether the <xref href=\"System.Type\"></xref> is an array."}],"pos":[92893,92982],"yaml":true},{"content":"`true` if the <xref href=\"System.Type\"></xref> is an array; otherwise, `false`.","nodes":[{"pos":[0,79],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is an array; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Type\"></xref> is an array; otherwise, `false`."}],"pos":[93122,93204],"yaml":true},{"content":"Returns a value that indicates whether the specified type can be assigned to this type.","nodes":[{"pos":[0,87],"content":"Returns a value that indicates whether the specified type can be assigned to this type.","nodes":[{"content":"Returns a value that indicates whether the specified type can be assigned to this type.","pos":[0,87]}]}],"pos":[94559,94647],"yaml":true},{"content":"The type to check.","nodes":[{"pos":[0,18],"content":"The type to check.","nodes":[{"content":"The type to check.","pos":[0,18]}]}],"pos":[94840,94859],"yaml":true},{"content":"`true` if the specified type can be assigned to this type; otherwise, `false`.","nodes":[{"pos":[0,78],"content":"<ph id=\"ph1\">`true`</ph> if the specified type can be assigned to this type; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the specified type can be assigned to this type; otherwise, `false`."}],"pos":[94917,94998],"yaml":true},{"content":"Returns a value that indicates whether the <xref href=\"System.Type\"></xref> is passed by reference.","nodes":[{"pos":[0,99],"content":"Returns a value that indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is passed by reference.","source":"Returns a value that indicates whether the <xref href=\"System.Type\"></xref> is passed by reference."}],"pos":[96220,96320],"yaml":true},{"content":"`true` if the <xref href=\"System.Type\"></xref> is passed by reference; otherwise, `false`.","nodes":[{"pos":[0,90],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is passed by reference; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Type\"></xref> is passed by reference; otherwise, `false`."}],"pos":[96460,96553],"yaml":true},{"content":"Returns a value that indicates whether the <xref href=\"System.Type\"></xref> is a COM object.","nodes":[{"pos":[0,92],"content":"Returns a value that indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is a COM object.","source":"Returns a value that indicates whether the <xref href=\"System.Type\"></xref> is a COM object."}],"pos":[97794,97887],"yaml":true},{"content":"`true` if the <xref href=\"System.Type\"></xref> is a COM object; otherwise, `false`.","nodes":[{"pos":[0,83],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is a COM object; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Type\"></xref> is a COM object; otherwise, `false`."}],"pos":[98031,98117],"yaml":true},{"content":"Gets a value that indicates whether this object represents a constructed generic type.","nodes":[{"pos":[0,86],"content":"Gets a value that indicates whether this object represents a constructed generic type.","nodes":[{"content":"Gets a value that indicates whether this object represents a constructed generic type.","pos":[0,86]}]}],"pos":[99412,99499],"yaml":true},{"content":"`true` if this object represents a constructed generic type; otherwise, `false`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`true`</ph> if this object represents a constructed generic type; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if this object represents a constructed generic type; otherwise, `false`."}],"pos":[99635,99718],"yaml":true},{"content":"Indicates whether a custom attribute identified by <code>attributeType</code> is defined.","nodes":[{"pos":[0,89],"content":"Indicates whether a custom attribute identified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">attributeType</ph><ept id=\"p1\">&lt;/code&gt;</ept> is defined.","source":"Indicates whether a custom attribute identified by <code>attributeType</code> is defined."}],"pos":[101059,101149],"yaml":true},{"content":"Specifies whether to search this type's inheritance chain to find the attributes.","nodes":[{"pos":[0,81],"content":"Specifies whether to search this type's inheritance chain to find the attributes.","nodes":[{"content":"Specifies whether to search this type's inheritance chain to find the attributes.","pos":[0,81]}]}],"pos":[101322,101404],"yaml":true},{"content":"An array of custom attributes identified by type.","nodes":[{"pos":[0,49],"content":"An array of custom attributes identified by type.","nodes":[{"content":"An array of custom attributes identified by type.","pos":[0,49]}]}],"pos":[101468,101518],"yaml":true},{"content":"`true` if a custom attribute identified by <code>attributeType</code> is defined; otherwise, `false`.","nodes":[{"pos":[0,101],"content":"<ph id=\"ph1\">`true`</ph> if a custom attribute identified by <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph2\">attributeType</ph><ept id=\"p1\">&lt;/code&gt;</ept> is defined; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if a custom attribute identified by <code>attributeType</code> is defined; otherwise, `false`."}],"pos":[101576,101680],"yaml":true},{"content":"<code>attributeType</code> is `null`.","nodes":[{"pos":[0,37],"content":"<ph id=\"ph1\">&lt;code&gt;attributeType&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>attributeType</code> is `null`."}],"pos":[101843,101881],"yaml":true},{"content":"The custom attribute type cannot be loaded.","nodes":[{"pos":[0,43],"content":"The custom attribute type cannot be loaded.","nodes":[{"content":"The custom attribute type cannot be loaded.","pos":[0,43]}]}],"pos":[102017,102061],"yaml":true},{"content":"Returns a value that indicates whether the <xref href=\"System.Type\"></xref> is a pointer.","nodes":[{"pos":[0,89],"content":"Returns a value that indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is a pointer.","source":"Returns a value that indicates whether the <xref href=\"System.Type\"></xref> is a pointer."}],"pos":[103216,103306],"yaml":true},{"content":"`true` if the <xref href=\"System.Type\"></xref> is a pointer; otherwise, `false`.","nodes":[{"pos":[0,80],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is a pointer; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Type\"></xref> is a pointer; otherwise, `false`."}],"pos":[103448,103531],"yaml":true},{"content":"Returns a value that indicates whether the <xref href=\"System.Type\"></xref> is one of the primitive types.","nodes":[{"pos":[0,106],"content":"Returns a value that indicates whether the <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is one of the primitive types.","source":"Returns a value that indicates whether the <xref href=\"System.Type\"></xref> is one of the primitive types."}],"pos":[104774,104881],"yaml":true},{"content":"`true` if the <xref href=\"System.Type\"></xref> is one of the primitive types; otherwise, `false`.","nodes":[{"pos":[0,97],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> is one of the primitive types; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Type\"></xref> is one of the primitive types; otherwise, `false`."}],"pos":[105025,105125],"yaml":true},{"content":"Returns a value that indicates whether the type is a value type; that is, not a class or an interface.","nodes":[{"pos":[0,102],"content":"Returns a value that indicates whether the type is a value type; that is, not a class or an interface.","nodes":[{"content":"Returns a value that indicates whether the type is a value type; that is, not a class or an interface.","pos":[0,102]}]}],"pos":[107850,107953],"yaml":true},{"content":"`true` if the type is a value type; otherwise, `false`.","nodes":[{"pos":[0,55],"content":"<ph id=\"ph1\">`true`</ph> if the type is a value type; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the type is a value type; otherwise, `false`."}],"pos":[108097,108155],"yaml":true},{"content":"Gets a value that identifies this entity in metadata.","nodes":[{"pos":[0,53],"content":"Gets a value that identifies this entity in metadata.","nodes":[{"content":"Gets a value that identifies this entity in metadata.","pos":[0,53]}]}],"pos":[110184,110238],"yaml":true},{"content":"The tokens obtained using this property can be passed to the unmanaged reflection API. For more information, see [Unmanaged Reflection API](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).","nodes":[{"pos":[0,210],"content":"The tokens obtained using this property can be passed to the unmanaged reflection API. For more information, see [Unmanaged Reflection API](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).","nodes":[{"content":"The tokens obtained using this property can be passed to the unmanaged reflection API.","pos":[0,86]},{"content":"For more information, see <bpt id=\"p1\">[</bpt>Unmanaged Reflection API<ept id=\"p1\">](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)</ept>.","pos":[87,210],"source":" For more information, see [Unmanaged Reflection API](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)."}]}],"pos":[110249,110460],"yaml":true,"extradata":"MT"},{"content":"A value which, in combination with the module, uniquely identifies this entity in metadata.","nodes":[{"pos":[0,91],"content":"A value which, in combination with the module, uniquely identifies this entity in metadata.","nodes":[{"content":"A value which, in combination with the module, uniquely identifies this entity in metadata.","pos":[0,91]}]}],"pos":[110582,110674],"yaml":true},{"content":"Gets the module that contains the implemented type.","nodes":[{"pos":[0,51],"content":"Gets the module that contains the implemented type.","nodes":[{"content":"Gets the module that contains the implemented type.","pos":[0,51]}]}],"pos":[111859,111911],"yaml":true},{"content":"A module is a loadable unit that can contain type declarations and implementations. Modules contain enough information to enable the common language runtime to locate all implementation bits when the module is loaded.","nodes":[{"pos":[0,217],"content":"A module is a loadable unit that can contain type declarations and implementations. Modules contain enough information to enable the common language runtime to locate all implementation bits when the module is loaded.","nodes":[{"content":"A module is a loadable unit that can contain type declarations and implementations. Modules contain enough information to enable the common language runtime to locate all implementation bits when the module is loaded.","pos":[0,217],"nodes":[{"content":"A module is a loadable unit that can contain type declarations and implementations.","pos":[0,83]},{"content":"Modules contain enough information to enable the common language runtime to locate all implementation bits when the module is loaded.","pos":[84,217]}]}]}],"pos":[111922,112140],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Reflection.Module\"></xref> object representing the module of the implemented type.","nodes":[{"pos":[0,103],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Reflection.Module\"&gt;&lt;/xref&gt;</ph> object representing the module of the implemented type.","source":"A <xref href=\"System.Reflection.Module\"></xref> object representing the module of the implemented type."}],"pos":[112288,112392],"yaml":true},{"content":"Gets the name of the implemented type, with the path removed.","nodes":[{"pos":[0,61],"content":"Gets the name of the implemented type, with the path removed.","nodes":[{"content":"Gets the name of the implemented type, with the path removed.","pos":[0,61]}]}],"pos":[113558,113620],"yaml":true},{"content":"A string containing the name of the current `TypeDelegator`. Only the simple name, not the fully qualified name, is returned. To get the name and the path, use <xref:System.Reflection.TypeDelegator.FullName%2A>.","nodes":[{"pos":[0,211],"content":"A string containing the name of the current `TypeDelegator`. Only the simple name, not the fully qualified name, is returned. To get the name and the path, use <xref:System.Reflection.TypeDelegator.FullName%2A>.","nodes":[{"content":"A string containing the name of the current <ph id=\"ph1\">`TypeDelegator`</ph>.","pos":[0,60],"source":"A string containing the name of the current `TypeDelegator`."},{"content":"Only the simple name, not the fully qualified name, is returned.","pos":[61,125]},{"content":"To get the name and the path, use <ph id=\"ph1\">&lt;xref:System.Reflection.TypeDelegator.FullName%2A&gt;</ph>.","pos":[126,211],"source":" To get the name and the path, use <xref:System.Reflection.TypeDelegator.FullName%2A>."}]}],"pos":[113631,113843],"yaml":true,"extradata":"MT"},{"content":"A `String` containing the type's non-qualified name.","nodes":[{"pos":[0,52],"content":"A <ph id=\"ph1\">`String`</ph> containing the type's non-qualified name.","source":"A `String` containing the type's non-qualified name."}],"pos":[113960,114013],"yaml":true},{"content":"Gets the namespace of the implemented type.","nodes":[{"pos":[0,43],"content":"Gets the namespace of the implemented type.","nodes":[{"content":"Gets the namespace of the implemented type.","pos":[0,43]}]}],"pos":[115207,115251],"yaml":true},{"content":"This property gets a string containing the namespace of the current `TypeDelegator`. For example, if the `TypeDelegator` is <xref:System.Reflection.TypeFilter>, the returned namespace is <xref:System.Reflection>.","nodes":[{"pos":[0,212],"content":"This property gets a string containing the namespace of the current `TypeDelegator`. For example, if the `TypeDelegator` is <xref:System.Reflection.TypeFilter>, the returned namespace is <xref:System.Reflection>.","nodes":[{"content":"This property gets a string containing the namespace of the current <ph id=\"ph1\">`TypeDelegator`</ph>.","pos":[0,84],"source":"This property gets a string containing the namespace of the current `TypeDelegator`."},{"content":"For example, if the <ph id=\"ph1\">`TypeDelegator`</ph> is <ph id=\"ph2\">&lt;xref:System.Reflection.TypeFilter&gt;</ph>, the returned namespace is <ph id=\"ph3\">&lt;xref:System.Reflection&gt;</ph>.","pos":[85,212],"source":" For example, if the `TypeDelegator` is <xref:System.Reflection.TypeFilter>, the returned namespace is <xref:System.Reflection>."}]}],"pos":[115262,115475],"yaml":true,"extradata":"MT"},{"content":"A `String` containing the type's namespace.","nodes":[{"pos":[0,43],"content":"A <ph id=\"ph1\">`String`</ph> containing the type's namespace.","source":"A `String` containing the type's namespace."}],"pos":[115597,115641],"yaml":true},{"content":"Gets a handle to the internal metadata representation of an implemented type.","nodes":[{"pos":[0,77],"content":"Gets a handle to the internal metadata representation of an implemented type.","nodes":[{"content":"Gets a handle to the internal metadata representation of an implemented type.","pos":[0,77]}]}],"pos":[116846,116924],"yaml":true},{"content":"A type handle is a unique integer value associated with each type. The handle is unique during the runtime.","nodes":[{"pos":[0,107],"content":"A type handle is a unique integer value associated with each type. The handle is unique during the runtime.","nodes":[{"content":"A type handle is a unique integer value associated with each type. The handle is unique during the runtime.","pos":[0,107],"nodes":[{"content":"A type handle is a unique integer value associated with each type.","pos":[0,66]},{"content":"The handle is unique during the runtime.","pos":[67,107]}]}]}],"pos":[116935,117043],"yaml":true,"extradata":"MT"},{"content":"A `RuntimeTypeHandle` object.","nodes":[{"pos":[0,29],"content":"A <ph id=\"ph1\">`RuntimeTypeHandle`</ph> object.","source":"A `RuntimeTypeHandle` object."}],"pos":[117188,117218],"yaml":true},{"content":"A value indicating type information.","nodes":[{"pos":[0,36],"content":"A value indicating type information.","nodes":[{"content":"A value indicating type information.","pos":[0,36]}]}],"pos":[118409,118446],"yaml":true},{"content":"Gets the underlying <xref href=\"System.Type\"></xref> that represents the implemented type.","nodes":[{"pos":[0,90],"content":"Gets the underlying <ph id=\"ph1\">&lt;xref href=\"System.Type\"&gt;&lt;/xref&gt;</ph> that represents the implemented type.","source":"Gets the underlying <xref href=\"System.Type\"></xref> that represents the implemented type."}],"pos":[119762,119853],"yaml":true},{"content":"The underlying type.","nodes":[{"pos":[0,20],"content":"The underlying type.","nodes":[{"content":"The underlying type.","pos":[0,20]}]}],"pos":[119982,120003],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Reflection.TypeDelegator\n  commentId: T:System.Reflection.TypeDelegator\n  id: TypeDelegator\n  children:\n  - System.Reflection.TypeDelegator.#ctor\n  - System.Reflection.TypeDelegator.#ctor(System.Type)\n  - System.Reflection.TypeDelegator.Assembly\n  - System.Reflection.TypeDelegator.AssemblyQualifiedName\n  - System.Reflection.TypeDelegator.BaseType\n  - System.Reflection.TypeDelegator.FullName\n  - System.Reflection.TypeDelegator.GetAttributeFlagsImpl\n  - System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)\n  - System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)\n  - System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.TypeDelegator.GetElementType\n  - System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeDelegator.GetEvents\n  - System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)\n  - System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)\n  - System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)\n  - System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)\n  - System.Reflection.TypeDelegator.GetInterfaces\n  - System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  - System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)\n  - System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)\n  - System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)\n  - System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)\n  - System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.TypeDelegator.GUID\n  - System.Reflection.TypeDelegator.HasElementTypeImpl\n  - System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  - System.Reflection.TypeDelegator.IsArrayImpl\n  - System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)\n  - System.Reflection.TypeDelegator.IsByRefImpl\n  - System.Reflection.TypeDelegator.IsCOMObjectImpl\n  - System.Reflection.TypeDelegator.IsConstructedGenericType\n  - System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)\n  - System.Reflection.TypeDelegator.IsPointerImpl\n  - System.Reflection.TypeDelegator.IsPrimitiveImpl\n  - System.Reflection.TypeDelegator.IsSZArray\n  - System.Reflection.TypeDelegator.IsTypeDefinition\n  - System.Reflection.TypeDelegator.IsValueTypeImpl\n  - System.Reflection.TypeDelegator.IsVariableBoundArray\n  - System.Reflection.TypeDelegator.MetadataToken\n  - System.Reflection.TypeDelegator.Module\n  - System.Reflection.TypeDelegator.Name\n  - System.Reflection.TypeDelegator.Namespace\n  - System.Reflection.TypeDelegator.TypeHandle\n  - System.Reflection.TypeDelegator.typeImpl\n  - System.Reflection.TypeDelegator.UnderlyingSystemType\n  langs:\n  - csharp\n  name: TypeDelegator\n  nameWithType: TypeDelegator\n  fullName: System.Reflection.TypeDelegator\n  type: Class\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Wraps a <xref href=\"System.Type\"></xref> object and delegates methods to that `Type`.\n  remarks: \"Derive from this type and override only those members you have to provide customization in, plus any members that are required by your program and not already implemented by <xref:System.Reflection.TypeDelegator>.  \\n  \\n <xref:System.Reflection.TypeDelegator> derives from <xref:System.Type?displayProperty=fullName> and implements most of the properties and methods of <xref:System.Type>. For each member it implements, <xref:System.Reflection.TypeDelegator> automatically delegates to the corresponding member of an internal <xref:System.Type> object, which is supplied as an argument to the constructor. This internal <xref:System.Type> object is exposed to deriving classes by the `protected`<xref:System.Reflection.TypeDelegator.typeImpl> field.  \\n  \\n> [!NOTE]\\n>  Some members of <xref:System.Reflection.TypeDelegator> have implementations even though the members themselves are simply inherited from <xref:System.Type>. In these cases, the implementation is provided by an overridden `protected` method that has a name that ends in \\\"Impl\\\". For example, the implementation for all overloads of the <xref:System.Reflection.TypeDelegator.GetMethod%2A> method is supplied by the overridden <xref:System.Reflection.TypeDelegator.GetMethodImpl%2A> method. The implementation for inherited properties such as <xref:System.Type.IsPublic%2A> and <xref:System.Type.IsNestedAssembly%2A> is provided by the overridden <xref:System.Reflection.TypeDelegator.GetAttributeFlagsImpl%2A> method.  \\n  \\n Deriving classes can provide a public constructor that takes a <xref:System.Type> object as its parameter and simply passes that object to the <xref:System.Reflection.TypeDelegator.%23ctor%28System.Type%29> constructor, or can set the internal <xref:System.Type> object in some other way.  \\n  \\n If a deriving class uses a member that is not implemented by <xref:System.Reflection.TypeDelegator>, it must override that member and provide an implementation. The simplest implementation is to call the corresponding member on the internal <xref:System.Type> object exposed by the <xref:System.Reflection.TypeDelegator.typeImpl> field, but you can provide any implementation your application requires. It is not necessary to override these members if they are not used by your application or by library functions your application calls (for example, by the <xref:System.CodeDom.CodeTypeReference.%23ctor%28System.Type%29?displayProperty=fullName> constructor).  \\n  \\n The following virtual methods (`Overridable` methods in Visual Basic) of <xref:System.Type> are not implemented by <xref:System.Reflection.TypeDelegator>: <xref:System.Type.MakeGenericType%2A>, <xref:System.Type.GetGenericTypeDefinition%2A>, <xref:System.Type.GetGenericArguments%2A>, <xref:System.Type.GetGenericParameterConstraints%2A>, <xref:System.Type.MakeArrayType%2A>, <xref:System.Type.MakeByRefType%2A>, <xref:System.Type.MakePointerType%2A>, <xref:System.Type.GetEnumNames%2A>, <xref:System.Type.GetEnumValues%2A>, <xref:System.Type.GetEnumUnderlyingType%2A>, <xref:System.Type.GetTypeCodeImpl%2A>, <xref:System.Type.IsEnumDefined%2A>, <xref:System.Type.IsEquivalentTo%2A>.  \\n  \\n The following virtual properties (`Overridable` properties in Visual Basic) of <xref:System.Type> are not implemented by <xref:System.Reflection.TypeDelegator>: <xref:System.Type.IsGenericType%2A>, <xref:System.Type.IsGenericTypeDefinition%2A>, <xref:System.Type.IsGenericParameter%2A>, <xref:System.Type.ContainsGenericParameters%2A>, <xref:System.Type.DeclaringMethod%2A>, <xref:System.Type.GenericParameterAttributes%2A>, <xref:System.Type.GenericParameterPosition%2A>, <xref:System.Type.IsSecurityCritical%2A>, <xref:System.Type.IsSecuritySafeCritical%2A>, <xref:System.Type.IsSecurityTransparent%2A>.\"\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public class TypeDelegator : System.Reflection.TypeInfo\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  - System.Reflection.TypeInfo\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.DeclaringType\n  - System.Reflection.MemberInfo.Equals(System.Object)\n  - System.Reflection.MemberInfo.GetCustomAttributesData\n  - System.Reflection.MemberInfo.GetHashCode\n  - System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfo.ReflectedType\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  - System.Reflection.TypeInfo.AsType\n  - System.Reflection.TypeInfo.Attributes\n  - System.Reflection.TypeInfo.ContainsGenericParameters\n  - System.Reflection.TypeInfo.DeclaredConstructors\n  - System.Reflection.TypeInfo.DeclaredEvents\n  - System.Reflection.TypeInfo.DeclaredFields\n  - System.Reflection.TypeInfo.DeclaredMembers\n  - System.Reflection.TypeInfo.DeclaredMethods\n  - System.Reflection.TypeInfo.DeclaredNestedTypes\n  - System.Reflection.TypeInfo.DeclaredProperties\n  - System.Reflection.TypeInfo.DeclaringMethod\n  - System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter,System.Object)\n  - System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)\n  - System.Reflection.TypeInfo.GenericParameterAttributes\n  - System.Reflection.TypeInfo.GenericParameterPosition\n  - System.Reflection.TypeInfo.GenericTypeArguments\n  - System.Reflection.TypeInfo.GenericTypeParameters\n  - System.Reflection.TypeInfo.GetArrayRank\n  - System.Reflection.TypeInfo.GetConstructor(System.Type[])\n  - System.Reflection.TypeInfo.GetConstructors\n  - System.Reflection.TypeInfo.GetDeclaredEvent(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredField(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredMethod(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredMethods(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredProperty(System.String)\n  - System.Reflection.TypeInfo.GetDefaultMembers\n  - System.Reflection.TypeInfo.GetEnumName(System.Object)\n  - System.Reflection.TypeInfo.GetEnumNames\n  - System.Reflection.TypeInfo.GetEnumUnderlyingType\n  - System.Reflection.TypeInfo.GetEnumValues\n  - System.Reflection.TypeInfo.GetEvent(System.String)\n  - System.Reflection.TypeInfo.GetField(System.String)\n  - System.Reflection.TypeInfo.GetFields\n  - System.Reflection.TypeInfo.GetGenericArguments\n  - System.Reflection.TypeInfo.GetGenericParameterConstraints\n  - System.Reflection.TypeInfo.GetGenericTypeDefinition\n  - System.Reflection.TypeInfo.GetInterface(System.String)\n  - System.Reflection.TypeInfo.GetMember(System.String)\n  - System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetMembers\n  - System.Reflection.TypeInfo.GetMethod(System.String)\n  - System.Reflection.TypeInfo.GetMethod(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetMethod(System.String,System.Type[])\n  - System.Reflection.TypeInfo.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.TypeInfo.GetMethods\n  - System.Reflection.TypeInfo.GetNestedType(System.String)\n  - System.Reflection.TypeInfo.GetNestedTypes\n  - System.Reflection.TypeInfo.GetProperties\n  - System.Reflection.TypeInfo.GetProperty(System.String)\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type)\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[])\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type[])\n  - System.Reflection.TypeInfo.HasElementType\n  - System.Reflection.TypeInfo.ImplementedInterfaces\n  - System.Reflection.TypeInfo.IsAbstract\n  - System.Reflection.TypeInfo.IsAnsiClass\n  - System.Reflection.TypeInfo.IsArray\n  - System.Reflection.TypeInfo.IsAssignableFrom(System.Type)\n  - System.Reflection.TypeInfo.IsAutoClass\n  - System.Reflection.TypeInfo.IsAutoLayout\n  - System.Reflection.TypeInfo.IsByRef\n  - System.Reflection.TypeInfo.IsClass\n  - System.Reflection.TypeInfo.IsCOMObject\n  - System.Reflection.TypeInfo.IsEnum\n  - System.Reflection.TypeInfo.IsEnumDefined(System.Object)\n  - System.Reflection.TypeInfo.IsEquivalentTo(System.Type)\n  - System.Reflection.TypeInfo.IsExplicitLayout\n  - System.Reflection.TypeInfo.IsGenericParameter\n  - System.Reflection.TypeInfo.IsGenericType\n  - System.Reflection.TypeInfo.IsGenericTypeDefinition\n  - System.Reflection.TypeInfo.IsImport\n  - System.Reflection.TypeInfo.IsInstanceOfType(System.Object)\n  - System.Reflection.TypeInfo.IsInterface\n  - System.Reflection.TypeInfo.IsLayoutSequential\n  - System.Reflection.TypeInfo.IsMarshalByRef\n  - System.Reflection.TypeInfo.IsNested\n  - System.Reflection.TypeInfo.IsNestedAssembly\n  - System.Reflection.TypeInfo.IsNestedFamANDAssem\n  - System.Reflection.TypeInfo.IsNestedFamily\n  - System.Reflection.TypeInfo.IsNestedFamORAssem\n  - System.Reflection.TypeInfo.IsNestedPrivate\n  - System.Reflection.TypeInfo.IsNestedPublic\n  - System.Reflection.TypeInfo.IsNotPublic\n  - System.Reflection.TypeInfo.IsPointer\n  - System.Reflection.TypeInfo.IsPrimitive\n  - System.Reflection.TypeInfo.IsPublic\n  - System.Reflection.TypeInfo.IsSealed\n  - System.Reflection.TypeInfo.IsSerializable\n  - System.Reflection.TypeInfo.IsSpecialName\n  - System.Reflection.TypeInfo.IsSubclassOf(System.Type)\n  - System.Reflection.TypeInfo.IsUnicodeClass\n  - System.Reflection.TypeInfo.IsValueType\n  - System.Reflection.TypeInfo.IsVisible\n  - System.Reflection.TypeInfo.MakeArrayType\n  - System.Reflection.TypeInfo.MakeArrayType(System.Int32)\n  - System.Reflection.TypeInfo.MakeByRefType\n  - System.Reflection.TypeInfo.MakeGenericType(System.Type[])\n  - System.Reflection.TypeInfo.MakePointerType\n  - System.Reflection.TypeInfo.MemberType\n  - System.Reflection.TypeInfo.StructLayoutAttribute\n  - System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo\n  - System.Reflection.TypeInfo.TypeInitializer\n  extensionMethods:\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  - System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  - System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  - System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.#ctor\n  commentId: M:System.Reflection.TypeDelegator.#ctor\n  id: '#ctor'\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: TypeDelegator()\n  nameWithType: TypeDelegator.TypeDelegator()\n  fullName: TypeDelegator.TypeDelegator()\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.TypeDelegator\"></xref> class with default properties.\n  syntax:\n    content: protected TypeDelegator ();\n    parameters: []\n  overload: System.Reflection.TypeDelegator.#ctor*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.#ctor(System.Type)\n  commentId: M:System.Reflection.TypeDelegator.#ctor(System.Type)\n  id: '#ctor(System.Type)'\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: TypeDelegator(Type)\n  nameWithType: TypeDelegator.TypeDelegator(Type)\n  fullName: TypeDelegator.TypeDelegator(Type)\n  type: Constructor\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Initializes a new instance of the <xref href=\"System.Reflection.TypeDelegator\"></xref> class specifying the encapsulating instance.\n  remarks: This constructor is called from a class to generate a delegate based upon the `Type` object for the class defining the method.\n  syntax:\n    content: public TypeDelegator (Type delegatingType);\n    parameters:\n    - id: delegatingType\n      type: System.Type\n      description: The instance of the class <xref href=\"System.Type\"></xref> that encapsulates the call to the method of an object.\n  overload: System.Reflection.TypeDelegator.#ctor*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>delegatingType</code> is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.Assembly\n  commentId: P:System.Reflection.TypeDelegator.Assembly\n  id: Assembly\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: Assembly\n  nameWithType: TypeDelegator.Assembly\n  fullName: TypeDelegator.Assembly\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the assembly of the implemented type.\n  remarks: Assemblies are the deployment units in the common language runtime. Assemblies establish the namespace for resolving requests and determine which resources are exposed externally and which are accessible from within the assembly. The common language runtime can determine and locate the assembly for any running object.\n  syntax:\n    content: public override System.Reflection.Assembly Assembly { get; }\n    return:\n      type: System.Reflection.Assembly\n      description: An <xref href=\"System.Reflection.Assembly\"></xref> object representing the assembly of the implemented type.\n  overload: System.Reflection.TypeDelegator.Assembly*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.AssemblyQualifiedName\n  commentId: P:System.Reflection.TypeDelegator.AssemblyQualifiedName\n  id: AssemblyQualifiedName\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: AssemblyQualifiedName\n  nameWithType: TypeDelegator.AssemblyQualifiedName\n  fullName: TypeDelegator.AssemblyQualifiedName\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the assembly's fully qualified name.\n  syntax:\n    content: public override string AssemblyQualifiedName { get; }\n    return:\n      type: System.String\n      description: A `String` containing the assembly's fully qualified name.\n  overload: System.Reflection.TypeDelegator.AssemblyQualifiedName*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.BaseType\n  commentId: P:System.Reflection.TypeDelegator.BaseType\n  id: BaseType\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: BaseType\n  nameWithType: TypeDelegator.BaseType\n  fullName: TypeDelegator.BaseType\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the base type for the current type.\n  remarks: The base type is the type from which this type directly inherits. Since the <xref:System.Object> class type is the ultimate base class of all the other types, it is the only type that does not have a base type. In this case, `null` is returned as the base type of the `Object` type.\n  syntax:\n    content: public override Type BaseType { get; }\n    return:\n      type: System.Type\n      description: The base type for a type.\n  overload: System.Reflection.TypeDelegator.BaseType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.FullName\n  commentId: P:System.Reflection.TypeDelegator.FullName\n  id: FullName\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: FullName\n  nameWithType: TypeDelegator.FullName\n  fullName: TypeDelegator.FullName\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the fully qualified name of the implemented type.\n  remarks: A string containing the fully qualified name of the current `TypeDelegator`.\n  syntax:\n    content: public override string FullName { get; }\n    return:\n      type: System.String\n      description: A `String` containing the type's fully qualified name.\n  overload: System.Reflection.TypeDelegator.FullName*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetAttributeFlagsImpl\n  commentId: M:System.Reflection.TypeDelegator.GetAttributeFlagsImpl\n  id: GetAttributeFlagsImpl\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetAttributeFlagsImpl()\n  nameWithType: TypeDelegator.GetAttributeFlagsImpl()\n  fullName: TypeDelegator.GetAttributeFlagsImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the attributes assigned to the `TypeDelegator`.\n  remarks: This method can be used to determine if the `TypeDelegator` is abstract, public, and so on.\n  syntax:\n    content: protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();\n    parameters: []\n    return:\n      type: System.Reflection.TypeAttributes\n      description: A `TypeAttributes` object representing the implementation attribute flags.\n  overload: System.Reflection.TypeDelegator.GetAttributeFlagsImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: TypeDelegator.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: TypeDelegator.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the constructor that implemented the `TypeDelegator`.\n  remarks: The `callConvention` parameter indicates the calling convention for the entry point. If no calling convention is specified, a default <xref:System.Reflection.CallingConventions> value of `Standard` is used.\n  syntax:\n    content: protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.\n    - id: binder\n      type: System.Reflection.Binder\n      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If <code>binder</code> is `null`, the default binder is used.\n    - id: callConvention\n      type: System.Reflection.CallingConventions\n      description: The calling conventions.\n    - id: types\n      type: System.Type[]\n      description: An array of type `Type` containing a list of the parameter number, order, and types. Types cannot be `null`; use an appropriate `GetMethod` method or an empty array to search for a method without parameters.\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: An array of type `ParameterModifier` having the same length as the <code>types</code> array, whose elements represent the attributes associated with the parameters of the method to get.\n    return:\n      type: System.Reflection.ConstructorInfo\n      description: A `ConstructorInfo` object for the method that matches the specified criteria, or `null` if a match cannot be found.\n  overload: System.Reflection.TypeDelegator.GetConstructorImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)\n  id: GetConstructors(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetConstructors(BindingFlags)\n  nameWithType: TypeDelegator.GetConstructors(BindingFlags)\n  fullName: TypeDelegator.GetConstructors(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns an array of <xref href=\"System.Reflection.ConstructorInfo\"></xref> objects representing constructors defined for the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>.\n  remarks: Class initializers are available only through `GetMember`, `GetMembers`, `FindMembers`, and `GetConstructors`.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.\n    return:\n      type: System.Reflection.ConstructorInfo[]\n      description: An array of type `ConstructorInfo` containing the specified constructors defined for this class. If no constructors are defined, an empty array is returned. Depending on the value of a specified parameter, only public constructors or both public and non-public constructors will be returned.\n  overload: System.Reflection.TypeDelegator.GetConstructors*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)\n  commentId: M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)\n  id: GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetCustomAttributes(Boolean)\n  nameWithType: TypeDelegator.GetCustomAttributes(Boolean)\n  fullName: TypeDelegator.GetCustomAttributes(Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns all the custom attributes defined for this type, specifying whether to search the type's inheritance chain.\n  syntax:\n    content: public override object[] GetCustomAttributes (bool inherit);\n    parameters:\n    - id: inherit\n      type: System.Boolean\n      description: Specifies whether to search this type's inheritance chain to find the attributes.\n    return:\n      type: System.Object[]\n      description: An array of objects containing all the custom attributes defined for this type.\n  overload: System.Reflection.TypeDelegator.GetCustomAttributes*\n  exceptions:\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: A custom attribute type cannot be loaded.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)\n  commentId: M:System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)\n  id: GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: TypeDelegator.GetCustomAttributes(Type, Boolean)\n  fullName: TypeDelegator.GetCustomAttributes(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns an array of custom attributes identified by type.\n  syntax:\n    content: public override object[] GetCustomAttributes (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: An array of custom attributes identified by type.\n    - id: inherit\n      type: System.Boolean\n      description: Specifies whether to search this type's inheritance chain to find the attributes.\n    return:\n      type: System.Object[]\n      description: An array of objects containing the custom attributes defined in this type that match the <code>attributeType</code> parameter, specifying whether to search the type's inheritance chain, or `null` if no custom attributes are defined on this type.\n  overload: System.Reflection.TypeDelegator.GetCustomAttributes*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>attributeType</code> is `null`.\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: A custom attribute type cannot be loaded.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetElementType\n  commentId: M:System.Reflection.TypeDelegator.GetElementType\n  id: GetElementType\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetElementType()\n  nameWithType: TypeDelegator.GetElementType()\n  fullName: TypeDelegator.GetElementType()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the <xref href=\"System.Type\"></xref> of the object encompassed or referred to by the current array, pointer or ByRef.\n  syntax:\n    content: public override Type GetElementType ();\n    parameters: []\n    return:\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the object encompassed or referred to by the current array, pointer or `ByRef`, or `null` if the current <xref href=\"System.Type\"></xref> is not an array, a pointer or a `ByRef`.\n  overload: System.Reflection.TypeDelegator.GetElementType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)\n  id: GetEvent(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetEvent(String, BindingFlags)\n  nameWithType: TypeDelegator.GetEvent(String, BindingFlags)\n  fullName: TypeDelegator.GetEvent(String, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the specified event.\n  remarks: If `bindingAttr` is <xref:System.Reflection.BindingFlags>.`IgnoreCase`, the case of the `name` parameter is ignored.\n  syntax:\n    content: public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the event to get.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.\n    return:\n      type: System.Reflection.EventInfo\n      description: An <xref href=\"System.Reflection.EventInfo\"></xref> object representing the event declared or inherited by this type with the specified name. This method returns `null` if no such event is found.\n  overload: System.Reflection.TypeDelegator.GetEvent*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetEvents\n  commentId: M:System.Reflection.TypeDelegator.GetEvents\n  id: GetEvents\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetEvents()\n  nameWithType: TypeDelegator.GetEvents()\n  fullName: TypeDelegator.GetEvents()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns an array of <xref href=\"System.Reflection.EventInfo\"></xref> objects representing all the public events declared or inherited by the current `TypeDelegator`.\n  syntax:\n    content: public override System.Reflection.EventInfo[] GetEvents ();\n    parameters: []\n    return:\n      type: System.Reflection.EventInfo[]\n      description: Returns an array of type `EventInfo` containing all the events declared or inherited by the current type. If there are no events, an empty array is returned.\n  overload: System.Reflection.TypeDelegator.GetEvents*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)\n  id: GetEvents(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetEvents(BindingFlags)\n  nameWithType: TypeDelegator.GetEvents(BindingFlags)\n  fullName: TypeDelegator.GetEvents(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the events specified in <code>bindingAttr</code> that are declared or inherited by the current `TypeDelegator`.\n  syntax:\n    content: public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.\n    return:\n      type: System.Reflection.EventInfo[]\n      description: An array of type `EventInfo` containing the events specified in <code>bindingAttr</code>. If there are no events, an empty array is returned.\n  overload: System.Reflection.TypeDelegator.GetEvents*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)\n  id: GetField(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetField(String, BindingFlags)\n  nameWithType: TypeDelegator.GetField(String, BindingFlags)\n  fullName: TypeDelegator.GetField(String, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a <xref href=\"System.Reflection.FieldInfo\"></xref> object representing the field with the specified name.\n  remarks: Use a `bindingAttr` of <xref:System.Reflection.BindingFlags>.NonPublic to return all public and nonpublic fields. Use `BindingFlags.IgnoreCase` to ignore the case of the fields, as the search is case-sensitive by default.\n  syntax:\n    content: public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the field to find.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.\n    return:\n      type: System.Reflection.FieldInfo\n      description: A `FieldInfo` object representing the field declared or inherited by this `TypeDelegator` with the specified name. Returns `null` if no such field is found.\n  overload: System.Reflection.TypeDelegator.GetField*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)\n  id: GetFields(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetFields(BindingFlags)\n  nameWithType: TypeDelegator.GetFields(BindingFlags)\n  fullName: TypeDelegator.GetFields(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns an array of <xref href=\"System.Reflection.FieldInfo\"></xref> objects representing the data fields defined for the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>.\n  remarks: \"The <xref:System.Reflection.TypeDelegator.GetFields%2A> method does not return fields in a particular order, such as alphabetical or declaration order. Your code must not depend on the order in which fields are returned, because that order can vary.  \\n  \\n Use a `bindingAttr` of <xref:System.Reflection.BindingFlags>.NonPublic to return all public and nonpublic fields.\"\n  syntax:\n    content: public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.\n    return:\n      type: System.Reflection.FieldInfo[]\n      description: An array of type `FieldInfo` containing the fields declared or inherited by the current `TypeDelegator`. An empty array is returned if there are no matched fields.\n  overload: System.Reflection.TypeDelegator.GetFields*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)\n  commentId: M:System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)\n  id: GetInterface(System.String,System.Boolean)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetInterface(String, Boolean)\n  nameWithType: TypeDelegator.GetInterface(String, Boolean)\n  fullName: TypeDelegator.GetInterface(String, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the specified interface implemented by the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>.\n  syntax:\n    content: public override Type GetInterface (string name, bool ignoreCase);\n    parameters:\n    - id: name\n      type: System.String\n      description: The fully qualified name of the interface implemented by the current class.\n    - id: ignoreCase\n      type: System.Boolean\n      description: '`true` if the case is to be ignored; otherwise, `false`.'\n    return:\n      type: System.Type\n      description: A `Type` object representing the interface implemented (directly or indirectly) by the current class with the fully qualified name matching the specified name. If no interface that matches name is found, null is returned.\n  overload: System.Reflection.TypeDelegator.GetInterface*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)\n  commentId: M:System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)\n  id: GetInterfaceMap(System.Type)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetInterfaceMap(Type)\n  nameWithType: TypeDelegator.GetInterfaceMap(Type)\n  fullName: TypeDelegator.GetInterfaceMap(Type)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns an interface mapping for the specified interface type.\n  remarks: The interface map denotes how an interface is mapped into the actual methods on a class that implements that interface.\n  syntax:\n    content: >-\n      [System.Runtime.InteropServices.ComVisible(true)]\n\n      public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);\n    parameters:\n    - id: interfaceType\n      type: System.Type\n      description: The <xref href=\"System.Type\"></xref> of the interface to retrieve a mapping of.\n    return:\n      type: System.Reflection.InterfaceMapping\n      description: An <xref href=\"System.Reflection.InterfaceMapping\"></xref> object representing the interface mapping for <code>interfaceType</code>.\n  overload: System.Reflection.TypeDelegator.GetInterfaceMap*\n  exceptions: []\n  attributes:\n  - type: System.Runtime.InteropServices.ComVisibleAttribute\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetInterfaces\n  commentId: M:System.Reflection.TypeDelegator.GetInterfaces\n  id: GetInterfaces\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetInterfaces()\n  nameWithType: TypeDelegator.GetInterfaces()\n  fullName: TypeDelegator.GetInterfaces()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns all the interfaces implemented on the current class and its base classes.\n  syntax:\n    content: public override Type[] GetInterfaces ();\n    parameters: []\n    return:\n      type: System.Type[]\n      description: An array of type `Type` containing all the interfaces implemented on the current class and its base classes. If none are defined, an empty array is returned.\n  overload: System.Reflection.TypeDelegator.GetInterfaces*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  id: GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetMember(String, MemberTypes, BindingFlags)\n  nameWithType: TypeDelegator.GetMember(String, MemberTypes, BindingFlags)\n  fullName: TypeDelegator.GetMember(String, MemberTypes, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns members (properties, methods, constructors, fields, events, and nested types) specified by the given <code>name</code>, <code>type</code>, and <code>bindingAttr</code>.\n  remarks: If `bindingAttr` is <xref:System.Reflection.BindingFlags>.NonPublic, all the members will be considered. If there are no matches, an empty array is returned.\n  syntax:\n    content: public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the member to get.\n    - id: type\n      type: System.Reflection.MemberTypes\n      description: A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: The type of members to get.\n    return:\n      type: System.Reflection.MemberInfo[]\n      description: An array of type `MemberInfo` containing all the members of the current class and its base class meeting the specified criteria.\n  overload: System.Reflection.TypeDelegator.GetMember*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)\n  id: GetMembers(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetMembers(BindingFlags)\n  nameWithType: TypeDelegator.GetMembers(BindingFlags)\n  fullName: TypeDelegator.GetMembers(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns members specified by <code>bindingAttr</code>.\n  remarks: If `bindingAttr` is <xref:System.Reflection.BindingFlags>.NonPublic, all the members will be considered. If there are no matches, an empty array is returned.\n  syntax:\n    content: public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.\n    return:\n      type: System.Reflection.MemberInfo[]\n      description: An array of type `MemberInfo` containing all the members of the current class and its base classes that meet the <code>bindingAttr</code> filter.\n  overload: System.Reflection.TypeDelegator.GetMembers*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: TypeDelegator.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: TypeDelegator.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.\n  remarks: The `callConvention` parameter indicates the calling convention for the entry point. If no <xref:System.Reflection.CallingConventions> is specified, a default `CallingConventions` value of `Standard` is used.\n  syntax:\n    content: protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: name\n      type: System.String\n      description: The method name.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.\n    - id: binder\n      type: System.Reflection.Binder\n      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects using reflection. If <code>binder</code> is `null`, the default binder is used.\n    - id: callConvention\n      type: System.Reflection.CallingConventions\n      description: The calling conventions.\n    - id: types\n      type: System.Type[]\n      description: An array of type `Type` containing a list of the parameter number, order, and types. Types cannot be `null`; use an appropriate `GetMethod` method or an empty array to search for a method without parameters.\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: An array of type `ParameterModifier` having the same length as the <code>types</code> array, whose elements represent the attributes associated with the parameters of the method to get.\n    return:\n      type: System.Reflection.MethodInfo\n      description: A `MethodInfoInfo` object for the implementation method that matches the specified criteria, or `null` if a match cannot be found.\n  overload: System.Reflection.TypeDelegator.GetMethodImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)\n  id: GetMethods(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetMethods(BindingFlags)\n  nameWithType: TypeDelegator.GetMethods(BindingFlags)\n  fullName: TypeDelegator.GetMethods(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns an array of <xref href=\"System.Reflection.MethodInfo\"></xref> objects representing specified methods of the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>.\n  syntax:\n    content: public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.\n    return:\n      type: System.Reflection.MethodInfo[]\n      description: An array of `MethodInfo` objects representing the methods defined on this `TypeDelegator`.\n  overload: System.Reflection.TypeDelegator.GetMethods*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)\n  id: GetNestedType(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetNestedType(String, BindingFlags)\n  nameWithType: TypeDelegator.GetNestedType(String, BindingFlags)\n  fullName: TypeDelegator.GetNestedType(String, BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a nested type specified by <code>name</code> and in <code>bindingAttr</code> that are declared or inherited by the type represented by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>.\n  syntax:\n    content: public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: name\n      type: System.String\n      description: The nested type's name.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.\n    return:\n      type: System.Type\n      description: A `Type` object representing the nested type.\n  overload: System.Reflection.TypeDelegator.GetNestedType*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: The <code>name</code> parameter is `null`.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)\n  id: GetNestedTypes(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetNestedTypes(BindingFlags)\n  nameWithType: TypeDelegator.GetNestedTypes(BindingFlags)\n  fullName: TypeDelegator.GetNestedTypes(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns the nested types specified in <code>bindingAttr</code> that are declared or inherited by the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>.\n  syntax:\n    content: public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.\n    return:\n      type: System.Type[]\n      description: An array of type `Type` containing the nested types.\n  overload: System.Reflection.TypeDelegator.GetNestedTypes*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)\n  id: GetProperties(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetProperties(BindingFlags)\n  nameWithType: TypeDelegator.GetProperties(BindingFlags)\n  fullName: TypeDelegator.GetProperties(BindingFlags)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns an array of <xref href=\"System.Reflection.PropertyInfo\"></xref> objects representing properties of the type wrapped by the current <xref href=\"System.Reflection.TypeDelegator\"></xref>.\n  syntax:\n    content: public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.\n    return:\n      type: System.Reflection.PropertyInfo[]\n      description: An array of `PropertyInfo` objects representing properties defined on this `TypeDelegator`.\n  overload: System.Reflection.TypeDelegator.GetProperties*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  nameWithType: TypeDelegator.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  fullName: TypeDelegator.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.\n  syntax:\n    content: protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);\n    parameters:\n    - id: name\n      type: System.String\n      description: The property to get.\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n      description: A bitmask that affects the way in which the search is conducted. The value is a combination of zero or more bit flags from <xref href=\"System.Reflection.BindingFlags\"></xref>.\n    - id: binder\n      type: System.Reflection.Binder\n      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection. If <code>binder</code> is `null`, the default binder is used. See <xref href=\"System.Reflection.Binder\"></xref>.\n    - id: returnType\n      type: System.Type\n      description: The return type of the property.\n    - id: types\n      type: System.Type[]\n      description: A list of parameter types. The list represents the number, order, and types of the parameters. Types cannot be null; use an appropriate `GetMethod` method or an empty array to search for a method without parameters.\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: An array of the same length as types with elements that represent the attributes associated with the parameters of the method to get.\n    return:\n      type: System.Reflection.PropertyInfo\n      description: A <xref href=\"System.Reflection.PropertyInfo\"></xref> object for the property that matches the specified criteria, or null if a match cannot be found.\n  overload: System.Reflection.TypeDelegator.GetPropertyImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.GUID\n  commentId: P:System.Reflection.TypeDelegator.GUID\n  id: GUID\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: GUID\n  nameWithType: TypeDelegator.GUID\n  fullName: TypeDelegator.GUID\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the GUID (globally unique identifier) of the implemented type.\n  remarks: The GUID (globally unique identifier) is a 128-bit unique identification string used to identify a class or an interface. It is primarily useful for interoperability between the Microsoft .NET Framework and COM.\n  syntax:\n    content: public override Guid GUID { get; }\n    return:\n      type: System.Guid\n      description: A GUID.\n  overload: System.Reflection.TypeDelegator.GUID*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.HasElementTypeImpl\n  commentId: M:System.Reflection.TypeDelegator.HasElementTypeImpl\n  id: HasElementTypeImpl\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: HasElementTypeImpl()\n  nameWithType: TypeDelegator.HasElementTypeImpl()\n  fullName: TypeDelegator.HasElementTypeImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value indicating whether the current <xref href=\"System.Type\"></xref> encompasses or refers to another type; that is, whether the current <xref href=\"System.Type\"></xref> is an array, a pointer or a ByRef.\n  syntax:\n    content: protected override bool HasElementTypeImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Type\"></xref> is an array, a pointer or a ByRef; otherwise, `false`.'\n  overload: System.Reflection.TypeDelegator.HasElementTypeImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  commentId: M:System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  nameWithType: TypeDelegator.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  fullName: TypeDelegator.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.\n  remarks: \"A method will be invoked if both the following conditions are true:  \\n  \\n-   The number of parameters in the method declaration equals the number of arguments in the specified argument list (unless default arguments are defined on the member).  \\n  \\n-   The type of each arguments can be converted by the binder to the type of the parameter.  \\n  \\n The binder will find all the matching methods. These methods are found based upon the type of binding requested (`BindingFlags.MethodInvoke`, `BindingFlags.GetProperties`, and so on). The set of methods is filtered by the name, number of arguments, and a set of search modifiers defined in the binder.  \\n  \\n After the method is selected, it will be invoked. Accessibility is checked at that point. The search may control which set of methods are searched based upon the accessibility attribute associated with the method. The <xref:System.Reflection.Binder.BindToMethod%2A?displayProperty=fullName> method is responsible for selecting the method to be invoked. The default binder selects the most specific match.  \\n  \\n> [!NOTE]\\n>  Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using reflection whenever the code is fully trusted.  \\n  \\n Currently, `InvokeMember` performs the Microsoft .NET Framework reflection semantics for every type of object.  \\n  \\n If the member specified by name is an array and the `BindingFlags.GetField` flag is set on `invokeAttr`, the `args` array specifies the elements whose values are to be returned. For example, the following call through `Type` object `t` returns the value of the first element of the string array MyArray, which is a member of the calling object:  \\n  \\n `String ret = (String) t.InvokeMember (\\\"MyArray\\\", BindingFlags.GetField, null, this, new Variant[]{0});`  \\n  \\n You can use `InvokeMember` to set one or more elements of a member array. All elements are set to the same value. The `args` array must be formatted as follows:  \\n  \\n```  \\n{index1,  \\n    index2,, value}  \\n```  \\n  \\n For example, to set the first member of MyArray from the previous example, the syntax is as follows:  \\n  \\n```  \\nt.InvokeMember (\\\"MyArray\\\", BindingFlags.SetField, null, this, new  \\n    Variant[]{0,\\\"Updated\\\"});  \\n```\"\n  syntax:\n    content: public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);\n    parameters:\n    - id: name\n      type: System.String\n      description: The name of the member to invoke. This may be a constructor, method, property, or field. If an empty string (\"\") is passed, the default member is invoked.\n    - id: invokeAttr\n      type: System.Reflection.BindingFlags\n      description: 'The invocation attribute. This must be one of the following <xref href=\"System.Reflection.BindingFlags\"></xref> : `InvokeMethod`, `CreateInstance`, `Static`, `GetField`, `SetField`, `GetProperty`, or `SetProperty`. A suitable invocation attribute must be specified. If a static member is to be invoked, the `Static` flag must be set.'\n    - id: binder\n      type: System.Reflection.Binder\n      description: An object that enables the binding, coercion of argument types, invocation of members, and retrieval of `MemberInfo` objects via reflection. If <code>binder</code> is `null`, the default binder is used. See <xref href=\"System.Reflection.Binder\"></xref>.\n    - id: target\n      type: System.Object\n      description: The object on which to invoke the specified member.\n    - id: args\n      type: System.Object[]\n      description: An array of type `Object` that contains the number, order, and type of the parameters of the member to be invoked. If <code>args</code> contains an uninitialized `Object`, it is treated as empty, which, with the default binder, can be widened to 0, 0.0 or a string.\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n      description: An array of type `ParameterModifer` that is the same length as <code>args</code>, with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the member's signature. For ByRef, use `ParameterModifer.ByRef`, and for none, use `ParameterModifer.None`. The default binder does exact matching on these. Attributes such as `In` and `InOut` are not used in binding, and can be viewed using `ParameterInfo`.\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: An instance of `CultureInfo` used to govern the coercion of types. This is necessary, for example, to convert a string that represents 1000 to a `Double` value, since 1000 is represented differently by different cultures. If <code>culture</code> is `null`, the `CultureInfo` for the current thread's `CultureInfo` is used.\n    - id: namedParameters\n      type: System.String[]\n      description: An array of type `String` containing parameter names that match up, starting at element zero, with the <code>args</code> array. There must be no holes in the array. If <code>args</code>. `Length` is greater than <code>namedParameters</code>. `Length`, the remaining parameters are filled in order.\n    return:\n      type: System.Object\n      description: An `Object` representing the return value of the invoked member.\n  overload: System.Reflection.TypeDelegator.InvokeMember*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.IsArrayImpl\n  commentId: M:System.Reflection.TypeDelegator.IsArrayImpl\n  id: IsArrayImpl\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: IsArrayImpl()\n  nameWithType: TypeDelegator.IsArrayImpl()\n  fullName: TypeDelegator.IsArrayImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a value that indicates whether the <xref href=\"System.Type\"></xref> is an array.\n  syntax:\n    content: protected override bool IsArrayImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Type\"></xref> is an array; otherwise, `false`.'\n  overload: System.Reflection.TypeDelegator.IsArrayImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)\n  commentId: M:System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)\n  id: IsAssignableFrom(System.Reflection.TypeInfo)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: IsAssignableFrom(TypeInfo)\n  nameWithType: TypeDelegator.IsAssignableFrom(TypeInfo)\n  fullName: TypeDelegator.IsAssignableFrom(TypeInfo)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a value that indicates whether the specified type can be assigned to this type.\n  syntax:\n    content: public override bool IsAssignableFrom (System.Reflection.TypeInfo typeInfo);\n    parameters:\n    - id: typeInfo\n      type: System.Reflection.TypeInfo\n      description: The type to check.\n    return:\n      type: System.Boolean\n      description: '`true` if the specified type can be assigned to this type; otherwise, `false`.'\n  overload: System.Reflection.TypeDelegator.IsAssignableFrom*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.IsByRefImpl\n  commentId: M:System.Reflection.TypeDelegator.IsByRefImpl\n  id: IsByRefImpl\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: IsByRefImpl()\n  nameWithType: TypeDelegator.IsByRefImpl()\n  fullName: TypeDelegator.IsByRefImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a value that indicates whether the <xref href=\"System.Type\"></xref> is passed by reference.\n  syntax:\n    content: protected override bool IsByRefImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Type\"></xref> is passed by reference; otherwise, `false`.'\n  overload: System.Reflection.TypeDelegator.IsByRefImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.IsCOMObjectImpl\n  commentId: M:System.Reflection.TypeDelegator.IsCOMObjectImpl\n  id: IsCOMObjectImpl\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: IsCOMObjectImpl()\n  nameWithType: TypeDelegator.IsCOMObjectImpl()\n  fullName: TypeDelegator.IsCOMObjectImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a value that indicates whether the <xref href=\"System.Type\"></xref> is a COM object.\n  syntax:\n    content: protected override bool IsCOMObjectImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Type\"></xref> is a COM object; otherwise, `false`.'\n  overload: System.Reflection.TypeDelegator.IsCOMObjectImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.IsConstructedGenericType\n  commentId: P:System.Reflection.TypeDelegator.IsConstructedGenericType\n  id: IsConstructedGenericType\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: IsConstructedGenericType\n  nameWithType: TypeDelegator.IsConstructedGenericType\n  fullName: TypeDelegator.IsConstructedGenericType\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value that indicates whether this object represents a constructed generic type.\n  syntax:\n    content: public override bool IsConstructedGenericType { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if this object represents a constructed generic type; otherwise, `false`.'\n  overload: System.Reflection.TypeDelegator.IsConstructedGenericType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)\n  commentId: M:System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)\n  id: IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: IsDefined(Type, Boolean)\n  nameWithType: TypeDelegator.IsDefined(Type, Boolean)\n  fullName: TypeDelegator.IsDefined(Type, Boolean)\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Indicates whether a custom attribute identified by <code>attributeType</code> is defined.\n  syntax:\n    content: public override bool IsDefined (Type attributeType, bool inherit);\n    parameters:\n    - id: attributeType\n      type: System.Type\n      description: Specifies whether to search this type's inheritance chain to find the attributes.\n    - id: inherit\n      type: System.Boolean\n      description: An array of custom attributes identified by type.\n    return:\n      type: System.Boolean\n      description: '`true` if a custom attribute identified by <code>attributeType</code> is defined; otherwise, `false`.'\n  overload: System.Reflection.TypeDelegator.IsDefined*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>attributeType</code> is `null`.\n  - type: System.Reflection.ReflectionTypeLoadException\n    commentId: T:System.Reflection.ReflectionTypeLoadException\n    description: The custom attribute type cannot be loaded.\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.IsPointerImpl\n  commentId: M:System.Reflection.TypeDelegator.IsPointerImpl\n  id: IsPointerImpl\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: IsPointerImpl()\n  nameWithType: TypeDelegator.IsPointerImpl()\n  fullName: TypeDelegator.IsPointerImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a value that indicates whether the <xref href=\"System.Type\"></xref> is a pointer.\n  syntax:\n    content: protected override bool IsPointerImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Type\"></xref> is a pointer; otherwise, `false`.'\n  overload: System.Reflection.TypeDelegator.IsPointerImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.IsPrimitiveImpl\n  commentId: M:System.Reflection.TypeDelegator.IsPrimitiveImpl\n  id: IsPrimitiveImpl\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: IsPrimitiveImpl()\n  nameWithType: TypeDelegator.IsPrimitiveImpl()\n  fullName: TypeDelegator.IsPrimitiveImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a value that indicates whether the <xref href=\"System.Type\"></xref> is one of the primitive types.\n  syntax:\n    content: protected override bool IsPrimitiveImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Type\"></xref> is one of the primitive types; otherwise, `false`.'\n  overload: System.Reflection.TypeDelegator.IsPrimitiveImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.IsSZArray\n  commentId: P:System.Reflection.TypeDelegator.IsSZArray\n  id: IsSZArray\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: IsSZArray\n  nameWithType: TypeDelegator.IsSZArray\n  fullName: TypeDelegator.IsSZArray\n  type: Property\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  syntax:\n    content: public override bool IsSZArray { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.TypeDelegator.IsSZArray*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.IsTypeDefinition\n  commentId: P:System.Reflection.TypeDelegator.IsTypeDefinition\n  id: IsTypeDefinition\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: IsTypeDefinition\n  nameWithType: TypeDelegator.IsTypeDefinition\n  fullName: TypeDelegator.IsTypeDefinition\n  type: Property\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  syntax:\n    content: public override bool IsTypeDefinition { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.TypeDelegator.IsTypeDefinition*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.IsValueTypeImpl\n  commentId: M:System.Reflection.TypeDelegator.IsValueTypeImpl\n  id: IsValueTypeImpl\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: IsValueTypeImpl()\n  nameWithType: TypeDelegator.IsValueTypeImpl()\n  fullName: TypeDelegator.IsValueTypeImpl()\n  type: Method\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Returns a value that indicates whether the type is a value type; that is, not a class or an interface.\n  syntax:\n    content: protected override bool IsValueTypeImpl ();\n    parameters: []\n    return:\n      type: System.Boolean\n      description: '`true` if the type is a value type; otherwise, `false`.'\n  overload: System.Reflection.TypeDelegator.IsValueTypeImpl*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.IsVariableBoundArray\n  commentId: P:System.Reflection.TypeDelegator.IsVariableBoundArray\n  id: IsVariableBoundArray\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: IsVariableBoundArray\n  nameWithType: TypeDelegator.IsVariableBoundArray\n  fullName: TypeDelegator.IsVariableBoundArray\n  type: Property\n  assemblies:\n  - System.Runtime\n  namespace: System.Reflection\n  syntax:\n    content: public override bool IsVariableBoundArray { get; }\n    return:\n      type: System.Boolean\n      description: ''\n  overload: System.Reflection.TypeDelegator.IsVariableBoundArray*\n  exceptions: []\n  version:\n  - netcore-2.0\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.MetadataToken\n  commentId: P:System.Reflection.TypeDelegator.MetadataToken\n  id: MetadataToken\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: MetadataToken\n  nameWithType: TypeDelegator.MetadataToken\n  fullName: TypeDelegator.MetadataToken\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a value that identifies this entity in metadata.\n  remarks: The tokens obtained using this property can be passed to the unmanaged reflection API. For more information, see [Unmanaged Reflection API](http://msdn.microsoft.com/en-us/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).\n  syntax:\n    content: public override int MetadataToken { get; }\n    return:\n      type: System.Int32\n      description: A value which, in combination with the module, uniquely identifies this entity in metadata.\n  overload: System.Reflection.TypeDelegator.MetadataToken*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.Module\n  commentId: P:System.Reflection.TypeDelegator.Module\n  id: Module\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: Module\n  nameWithType: TypeDelegator.Module\n  fullName: TypeDelegator.Module\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the module that contains the implemented type.\n  remarks: A module is a loadable unit that can contain type declarations and implementations. Modules contain enough information to enable the common language runtime to locate all implementation bits when the module is loaded.\n  syntax:\n    content: public override System.Reflection.Module Module { get; }\n    return:\n      type: System.Reflection.Module\n      description: A <xref href=\"System.Reflection.Module\"></xref> object representing the module of the implemented type.\n  overload: System.Reflection.TypeDelegator.Module*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.Name\n  commentId: P:System.Reflection.TypeDelegator.Name\n  id: Name\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: Name\n  nameWithType: TypeDelegator.Name\n  fullName: TypeDelegator.Name\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the name of the implemented type, with the path removed.\n  remarks: A string containing the name of the current `TypeDelegator`. Only the simple name, not the fully qualified name, is returned. To get the name and the path, use <xref:System.Reflection.TypeDelegator.FullName%2A>.\n  syntax:\n    content: public override string Name { get; }\n    return:\n      type: System.String\n      description: A `String` containing the type's non-qualified name.\n  overload: System.Reflection.TypeDelegator.Name*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.Namespace\n  commentId: P:System.Reflection.TypeDelegator.Namespace\n  id: Namespace\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: Namespace\n  nameWithType: TypeDelegator.Namespace\n  fullName: TypeDelegator.Namespace\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the namespace of the implemented type.\n  remarks: This property gets a string containing the namespace of the current `TypeDelegator`. For example, if the `TypeDelegator` is <xref:System.Reflection.TypeFilter>, the returned namespace is <xref:System.Reflection>.\n  syntax:\n    content: public override string Namespace { get; }\n    return:\n      type: System.String\n      description: A `String` containing the type's namespace.\n  overload: System.Reflection.TypeDelegator.Namespace*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.TypeHandle\n  commentId: P:System.Reflection.TypeDelegator.TypeHandle\n  id: TypeHandle\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: TypeHandle\n  nameWithType: TypeDelegator.TypeHandle\n  fullName: TypeDelegator.TypeHandle\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets a handle to the internal metadata representation of an implemented type.\n  remarks: A type handle is a unique integer value associated with each type. The handle is unique during the runtime.\n  syntax:\n    content: public override RuntimeTypeHandle TypeHandle { get; }\n    return:\n      type: System.RuntimeTypeHandle\n      description: A `RuntimeTypeHandle` object.\n  overload: System.Reflection.TypeDelegator.TypeHandle*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.typeImpl\n  commentId: F:System.Reflection.TypeDelegator.typeImpl\n  id: typeImpl\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: typeImpl\n  nameWithType: TypeDelegator.typeImpl\n  fullName: TypeDelegator.typeImpl\n  type: Field\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: A value indicating type information.\n  syntax:\n    content: protected Type typeImpl;\n    return:\n      type: System.Type\n      description: ''\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Reflection.TypeDelegator.UnderlyingSystemType\n  commentId: P:System.Reflection.TypeDelegator.UnderlyingSystemType\n  id: UnderlyingSystemType\n  parent: System.Reflection.TypeDelegator\n  langs:\n  - csharp\n  name: UnderlyingSystemType\n  nameWithType: TypeDelegator.UnderlyingSystemType\n  fullName: TypeDelegator.UnderlyingSystemType\n  type: Property\n  assemblies:\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Reflection\n  summary: Gets the underlying <xref href=\"System.Type\"></xref> that represents the implemented type.\n  syntax:\n    content: public override Type UnderlyingSystemType { get; }\n    return:\n      type: System.Type\n      description: The underlying type.\n  overload: System.Reflection.TypeDelegator.UnderlyingSystemType*\n  exceptions: []\n  version:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Reflection.TypeInfo\n  parent: System.Reflection\n  isExternal: false\n  name: TypeInfo\n  nameWithType: TypeInfo\n  fullName: System.Reflection.TypeInfo\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.TypeLoadException\n  parent: System\n  isExternal: false\n  name: TypeLoadException\n  nameWithType: TypeLoadException\n  fullName: System.TypeLoadException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.Reflection.ReflectionTypeLoadException\n  parent: System.Reflection\n  isExternal: false\n  name: ReflectionTypeLoadException\n  nameWithType: ReflectionTypeLoadException\n  fullName: System.Reflection.ReflectionTypeLoadException\n- uid: System.Reflection.TypeDelegator.#ctor\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: TypeDelegator()\n  nameWithType: TypeDelegator.TypeDelegator()\n  fullName: TypeDelegator.TypeDelegator()\n- uid: System.Reflection.TypeDelegator.#ctor(System.Type)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: TypeDelegator(Type)\n  nameWithType: TypeDelegator.TypeDelegator(Type)\n  fullName: TypeDelegator.TypeDelegator(Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Reflection.TypeDelegator.Assembly\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: Assembly\n  nameWithType: TypeDelegator.Assembly\n  fullName: TypeDelegator.Assembly\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  nameWithType: Assembly\n  fullName: System.Reflection.Assembly\n- uid: System.Reflection.TypeDelegator.AssemblyQualifiedName\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: AssemblyQualifiedName\n  nameWithType: TypeDelegator.AssemblyQualifiedName\n  fullName: TypeDelegator.AssemblyQualifiedName\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Reflection.TypeDelegator.BaseType\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: BaseType\n  nameWithType: TypeDelegator.BaseType\n  fullName: TypeDelegator.BaseType\n- uid: System.Reflection.TypeDelegator.FullName\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: FullName\n  nameWithType: TypeDelegator.FullName\n  fullName: TypeDelegator.FullName\n- uid: System.Reflection.TypeDelegator.GetAttributeFlagsImpl\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetAttributeFlagsImpl()\n  nameWithType: TypeDelegator.GetAttributeFlagsImpl()\n  fullName: TypeDelegator.GetAttributeFlagsImpl()\n- uid: System.Reflection.TypeAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: TypeAttributes\n  nameWithType: TypeAttributes\n  fullName: System.Reflection.TypeAttributes\n- uid: System.Reflection.TypeDelegator.GetConstructorImpl(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: TypeDelegator.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: TypeDelegator.GetConstructorImpl(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  nameWithType: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  nameWithType: BindingFlags\n  fullName: System.Reflection.BindingFlags\n- uid: System.Reflection.Binder\n  parent: System.Reflection\n  isExternal: false\n  name: Binder\n  nameWithType: Binder\n  fullName: System.Reflection.Binder\n- uid: System.Reflection.CallingConventions\n  parent: System.Reflection\n  isExternal: false\n  name: CallingConventions\n  nameWithType: CallingConventions\n  fullName: System.Reflection.CallingConventions\n- uid: System.Type[]\n  parent: System\n  isExternal: false\n  name: Type[]\n  nameWithType: Type[]\n  fullName: System.Type[]\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    nameWithType: Type\n    fullName: System.Type\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.ParameterModifier\n  name: ParameterModifier\n  nameWithType: ParameterModifier\n  fullName: System.Reflection.ParameterModifier\n- uid: System.Reflection.ParameterModifier[]\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterModifier[]\n  nameWithType: ParameterModifier[]\n  fullName: System.Reflection.ParameterModifier[]\n  spec.csharp:\n  - uid: System.Reflection.ParameterModifier\n    name: ParameterModifier\n    nameWithType: ParameterModifier\n    fullName: System.Reflection.ParameterModifier\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.TypeDelegator.GetConstructors(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetConstructors(BindingFlags)\n  nameWithType: TypeDelegator.GetConstructors(BindingFlags)\n  fullName: TypeDelegator.GetConstructors(BindingFlags)\n- uid: System.Reflection.ConstructorInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo[]\n  nameWithType: ConstructorInfo[]\n  fullName: System.Reflection.ConstructorInfo[]\n  spec.csharp:\n  - uid: System.Reflection.ConstructorInfo\n    name: ConstructorInfo\n    nameWithType: ConstructorInfo\n    fullName: System.Reflection.ConstructorInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.TypeDelegator.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetCustomAttributes(Boolean)\n  nameWithType: TypeDelegator.GetCustomAttributes(Boolean)\n  fullName: TypeDelegator.GetCustomAttributes(Boolean)\n- uid: System.Object\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object[]\n  parent: System\n  isExternal: false\n  name: Object[]\n  nameWithType: Object[]\n  fullName: System.Object[]\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.TypeDelegator.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetCustomAttributes(Type, Boolean)\n  nameWithType: TypeDelegator.GetCustomAttributes(Type, Boolean)\n  fullName: TypeDelegator.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.TypeDelegator.GetElementType\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetElementType()\n  nameWithType: TypeDelegator.GetElementType()\n  fullName: TypeDelegator.GetElementType()\n- uid: System.Reflection.TypeDelegator.GetEvent(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetEvent(String, BindingFlags)\n  nameWithType: TypeDelegator.GetEvent(String, BindingFlags)\n  fullName: TypeDelegator.GetEvent(String, BindingFlags)\n- uid: System.Reflection.EventInfo\n  parent: System.Reflection\n  isExternal: false\n  name: EventInfo\n  nameWithType: EventInfo\n  fullName: System.Reflection.EventInfo\n- uid: System.Reflection.TypeDelegator.GetEvents\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetEvents()\n  nameWithType: TypeDelegator.GetEvents()\n  fullName: TypeDelegator.GetEvents()\n- uid: System.Reflection.EventInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: EventInfo[]\n  nameWithType: EventInfo[]\n  fullName: System.Reflection.EventInfo[]\n  spec.csharp:\n  - uid: System.Reflection.EventInfo\n    name: EventInfo\n    nameWithType: EventInfo\n    fullName: System.Reflection.EventInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.TypeDelegator.GetEvents(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetEvents(BindingFlags)\n  nameWithType: TypeDelegator.GetEvents(BindingFlags)\n  fullName: TypeDelegator.GetEvents(BindingFlags)\n- uid: System.Reflection.TypeDelegator.GetField(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetField(String, BindingFlags)\n  nameWithType: TypeDelegator.GetField(String, BindingFlags)\n  fullName: TypeDelegator.GetField(String, BindingFlags)\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  nameWithType: FieldInfo\n  fullName: System.Reflection.FieldInfo\n- uid: System.Reflection.TypeDelegator.GetFields(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetFields(BindingFlags)\n  nameWithType: TypeDelegator.GetFields(BindingFlags)\n  fullName: TypeDelegator.GetFields(BindingFlags)\n- uid: System.Reflection.FieldInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo[]\n  nameWithType: FieldInfo[]\n  fullName: System.Reflection.FieldInfo[]\n  spec.csharp:\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    nameWithType: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.TypeDelegator.GetInterface(System.String,System.Boolean)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetInterface(String, Boolean)\n  nameWithType: TypeDelegator.GetInterface(String, Boolean)\n  fullName: TypeDelegator.GetInterface(String, Boolean)\n- uid: System.Reflection.TypeDelegator.GetInterfaceMap(System.Type)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetInterfaceMap(Type)\n  nameWithType: TypeDelegator.GetInterfaceMap(Type)\n  fullName: TypeDelegator.GetInterfaceMap(Type)\n- uid: System.Reflection.InterfaceMapping\n  parent: System.Reflection\n  isExternal: false\n  name: InterfaceMapping\n  nameWithType: InterfaceMapping\n  fullName: System.Reflection.InterfaceMapping\n- uid: System.Reflection.TypeDelegator.GetInterfaces\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetInterfaces()\n  nameWithType: TypeDelegator.GetInterfaces()\n  fullName: TypeDelegator.GetInterfaces()\n- uid: System.Reflection.TypeDelegator.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetMember(String, MemberTypes, BindingFlags)\n  nameWithType: TypeDelegator.GetMember(String, MemberTypes, BindingFlags)\n  fullName: TypeDelegator.GetMember(String, MemberTypes, BindingFlags)\n- uid: System.Reflection.MemberInfo\n  name: MemberInfo\n  nameWithType: MemberInfo\n  fullName: System.Reflection.MemberInfo\n- uid: System.Reflection.MemberInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo[]\n  nameWithType: MemberInfo[]\n  fullName: System.Reflection.MemberInfo[]\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    nameWithType: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.MemberTypes\n  parent: System.Reflection\n  isExternal: false\n  name: MemberTypes\n  nameWithType: MemberTypes\n  fullName: System.Reflection.MemberTypes\n- uid: System.Reflection.TypeDelegator.GetMembers(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetMembers(BindingFlags)\n  nameWithType: TypeDelegator.GetMembers(BindingFlags)\n  fullName: TypeDelegator.GetMembers(BindingFlags)\n- uid: System.Reflection.TypeDelegator.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  nameWithType: TypeDelegator.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n  fullName: TypeDelegator.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n- uid: System.Reflection.TypeDelegator.GetMethods(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetMethods(BindingFlags)\n  nameWithType: TypeDelegator.GetMethods(BindingFlags)\n  fullName: TypeDelegator.GetMethods(BindingFlags)\n- uid: System.Reflection.MethodInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo[]\n  nameWithType: MethodInfo[]\n  fullName: System.Reflection.MethodInfo[]\n  spec.csharp:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    nameWithType: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.TypeDelegator.GetNestedType(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetNestedType(String, BindingFlags)\n  nameWithType: TypeDelegator.GetNestedType(String, BindingFlags)\n  fullName: TypeDelegator.GetNestedType(String, BindingFlags)\n- uid: System.Reflection.TypeDelegator.GetNestedTypes(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetNestedTypes(BindingFlags)\n  nameWithType: TypeDelegator.GetNestedTypes(BindingFlags)\n  fullName: TypeDelegator.GetNestedTypes(BindingFlags)\n- uid: System.Reflection.TypeDelegator.GetProperties(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetProperties(BindingFlags)\n  nameWithType: TypeDelegator.GetProperties(BindingFlags)\n  fullName: TypeDelegator.GetProperties(BindingFlags)\n- uid: System.Reflection.PropertyInfo\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n- uid: System.Reflection.PropertyInfo[]\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo[]\n  nameWithType: PropertyInfo[]\n  fullName: System.Reflection.PropertyInfo[]\n  spec.csharp:\n  - uid: System.Reflection.PropertyInfo\n    name: PropertyInfo\n    nameWithType: PropertyInfo\n    fullName: System.Reflection.PropertyInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.TypeDelegator.GetPropertyImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  nameWithType: TypeDelegator.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n  fullName: TypeDelegator.GetPropertyImpl(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])\n- uid: System.Reflection.TypeDelegator.GUID\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GUID\n  nameWithType: TypeDelegator.GUID\n  fullName: TypeDelegator.GUID\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  nameWithType: Guid\n  fullName: System.Guid\n- uid: System.Reflection.TypeDelegator.HasElementTypeImpl\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: HasElementTypeImpl()\n  nameWithType: TypeDelegator.HasElementTypeImpl()\n  fullName: TypeDelegator.HasElementTypeImpl()\n- uid: System.Reflection.TypeDelegator.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  nameWithType: TypeDelegator.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n  fullName: TypeDelegator.InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  nameWithType: CultureInfo\n  fullName: System.Globalization.CultureInfo\n- uid: System.String[]\n  parent: System\n  isExternal: false\n  name: String[]\n  nameWithType: String[]\n  fullName: System.String[]\n  spec.csharp:\n  - uid: System.String\n    name: String\n    nameWithType: String\n    fullName: System.String\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n- uid: System.Reflection.TypeDelegator.IsArrayImpl\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsArrayImpl()\n  nameWithType: TypeDelegator.IsArrayImpl()\n  fullName: TypeDelegator.IsArrayImpl()\n- uid: System.Reflection.TypeDelegator.IsAssignableFrom(System.Reflection.TypeInfo)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsAssignableFrom(TypeInfo)\n  nameWithType: TypeDelegator.IsAssignableFrom(TypeInfo)\n  fullName: TypeDelegator.IsAssignableFrom(TypeInfo)\n- uid: System.Reflection.TypeDelegator.IsByRefImpl\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsByRefImpl()\n  nameWithType: TypeDelegator.IsByRefImpl()\n  fullName: TypeDelegator.IsByRefImpl()\n- uid: System.Reflection.TypeDelegator.IsCOMObjectImpl\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsCOMObjectImpl()\n  nameWithType: TypeDelegator.IsCOMObjectImpl()\n  fullName: TypeDelegator.IsCOMObjectImpl()\n- uid: System.Reflection.TypeDelegator.IsConstructedGenericType\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsConstructedGenericType\n  nameWithType: TypeDelegator.IsConstructedGenericType\n  fullName: TypeDelegator.IsConstructedGenericType\n- uid: System.Reflection.TypeDelegator.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsDefined(Type, Boolean)\n  nameWithType: TypeDelegator.IsDefined(Type, Boolean)\n  fullName: TypeDelegator.IsDefined(Type, Boolean)\n- uid: System.Reflection.TypeDelegator.IsPointerImpl\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsPointerImpl()\n  nameWithType: TypeDelegator.IsPointerImpl()\n  fullName: TypeDelegator.IsPointerImpl()\n- uid: System.Reflection.TypeDelegator.IsPrimitiveImpl\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsPrimitiveImpl()\n  nameWithType: TypeDelegator.IsPrimitiveImpl()\n  fullName: TypeDelegator.IsPrimitiveImpl()\n- uid: System.Reflection.TypeDelegator.IsSZArray\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsSZArray\n  nameWithType: TypeDelegator.IsSZArray\n  fullName: TypeDelegator.IsSZArray\n- uid: System.Reflection.TypeDelegator.IsTypeDefinition\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsTypeDefinition\n  nameWithType: TypeDelegator.IsTypeDefinition\n  fullName: TypeDelegator.IsTypeDefinition\n- uid: System.Reflection.TypeDelegator.IsValueTypeImpl\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsValueTypeImpl()\n  nameWithType: TypeDelegator.IsValueTypeImpl()\n  fullName: TypeDelegator.IsValueTypeImpl()\n- uid: System.Reflection.TypeDelegator.IsVariableBoundArray\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsVariableBoundArray\n  nameWithType: TypeDelegator.IsVariableBoundArray\n  fullName: TypeDelegator.IsVariableBoundArray\n- uid: System.Reflection.TypeDelegator.MetadataToken\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: MetadataToken\n  nameWithType: TypeDelegator.MetadataToken\n  fullName: TypeDelegator.MetadataToken\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Reflection.TypeDelegator.Module\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: Module\n  nameWithType: TypeDelegator.Module\n  fullName: TypeDelegator.Module\n- uid: System.Reflection.Module\n  parent: System.Reflection\n  isExternal: false\n  name: Module\n  nameWithType: Module\n  fullName: System.Reflection.Module\n- uid: System.Reflection.TypeDelegator.Name\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: Name\n  nameWithType: TypeDelegator.Name\n  fullName: TypeDelegator.Name\n- uid: System.Reflection.TypeDelegator.Namespace\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: Namespace\n  nameWithType: TypeDelegator.Namespace\n  fullName: TypeDelegator.Namespace\n- uid: System.Reflection.TypeDelegator.TypeHandle\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: TypeHandle\n  nameWithType: TypeDelegator.TypeHandle\n  fullName: TypeDelegator.TypeHandle\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: false\n  name: RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n- uid: System.Reflection.TypeDelegator.typeImpl\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: typeImpl\n  nameWithType: TypeDelegator.typeImpl\n  fullName: TypeDelegator.typeImpl\n- uid: System.Reflection.TypeDelegator.UnderlyingSystemType\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: UnderlyingSystemType\n  nameWithType: TypeDelegator.UnderlyingSystemType\n  fullName: TypeDelegator.UnderlyingSystemType\n- uid: System.Reflection.TypeDelegator.#ctor*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: TypeDelegator\n  nameWithType: TypeDelegator.TypeDelegator\n  fullName: TypeDelegator.TypeDelegator\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.Assembly*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: Assembly\n  nameWithType: TypeDelegator.Assembly\n  fullName: TypeDelegator.Assembly\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.AssemblyQualifiedName*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: AssemblyQualifiedName\n  nameWithType: TypeDelegator.AssemblyQualifiedName\n  fullName: TypeDelegator.AssemblyQualifiedName\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.BaseType*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: BaseType\n  nameWithType: TypeDelegator.BaseType\n  fullName: TypeDelegator.BaseType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.FullName*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: FullName\n  nameWithType: TypeDelegator.FullName\n  fullName: TypeDelegator.FullName\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetAttributeFlagsImpl*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetAttributeFlagsImpl\n  nameWithType: TypeDelegator.GetAttributeFlagsImpl\n  fullName: TypeDelegator.GetAttributeFlagsImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetConstructorImpl*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetConstructorImpl\n  nameWithType: TypeDelegator.GetConstructorImpl\n  fullName: TypeDelegator.GetConstructorImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetConstructors*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetConstructors\n  nameWithType: TypeDelegator.GetConstructors\n  fullName: TypeDelegator.GetConstructors\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetCustomAttributes*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetCustomAttributes\n  nameWithType: TypeDelegator.GetCustomAttributes\n  fullName: TypeDelegator.GetCustomAttributes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetElementType*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetElementType\n  nameWithType: TypeDelegator.GetElementType\n  fullName: TypeDelegator.GetElementType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetEvent*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetEvent\n  nameWithType: TypeDelegator.GetEvent\n  fullName: TypeDelegator.GetEvent\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetEvents*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetEvents\n  nameWithType: TypeDelegator.GetEvents\n  fullName: TypeDelegator.GetEvents\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetField*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetField\n  nameWithType: TypeDelegator.GetField\n  fullName: TypeDelegator.GetField\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetFields*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetFields\n  nameWithType: TypeDelegator.GetFields\n  fullName: TypeDelegator.GetFields\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetInterface*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetInterface\n  nameWithType: TypeDelegator.GetInterface\n  fullName: TypeDelegator.GetInterface\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetInterfaceMap*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetInterfaceMap\n  nameWithType: TypeDelegator.GetInterfaceMap\n  fullName: TypeDelegator.GetInterfaceMap\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetInterfaces*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetInterfaces\n  nameWithType: TypeDelegator.GetInterfaces\n  fullName: TypeDelegator.GetInterfaces\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetMember*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetMember\n  nameWithType: TypeDelegator.GetMember\n  fullName: TypeDelegator.GetMember\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetMembers*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetMembers\n  nameWithType: TypeDelegator.GetMembers\n  fullName: TypeDelegator.GetMembers\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetMethodImpl*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetMethodImpl\n  nameWithType: TypeDelegator.GetMethodImpl\n  fullName: TypeDelegator.GetMethodImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetMethods*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetMethods\n  nameWithType: TypeDelegator.GetMethods\n  fullName: TypeDelegator.GetMethods\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetNestedType*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetNestedType\n  nameWithType: TypeDelegator.GetNestedType\n  fullName: TypeDelegator.GetNestedType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetNestedTypes*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetNestedTypes\n  nameWithType: TypeDelegator.GetNestedTypes\n  fullName: TypeDelegator.GetNestedTypes\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetProperties*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetProperties\n  nameWithType: TypeDelegator.GetProperties\n  fullName: TypeDelegator.GetProperties\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GetPropertyImpl*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GetPropertyImpl\n  nameWithType: TypeDelegator.GetPropertyImpl\n  fullName: TypeDelegator.GetPropertyImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.GUID*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: GUID\n  nameWithType: TypeDelegator.GUID\n  fullName: TypeDelegator.GUID\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.HasElementTypeImpl*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: HasElementTypeImpl\n  nameWithType: TypeDelegator.HasElementTypeImpl\n  fullName: TypeDelegator.HasElementTypeImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.InvokeMember*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: InvokeMember\n  nameWithType: TypeDelegator.InvokeMember\n  fullName: TypeDelegator.InvokeMember\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.IsArrayImpl*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsArrayImpl\n  nameWithType: TypeDelegator.IsArrayImpl\n  fullName: TypeDelegator.IsArrayImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.IsAssignableFrom*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsAssignableFrom\n  nameWithType: TypeDelegator.IsAssignableFrom\n  fullName: TypeDelegator.IsAssignableFrom\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.IsByRefImpl*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsByRefImpl\n  nameWithType: TypeDelegator.IsByRefImpl\n  fullName: TypeDelegator.IsByRefImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.IsCOMObjectImpl*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsCOMObjectImpl\n  nameWithType: TypeDelegator.IsCOMObjectImpl\n  fullName: TypeDelegator.IsCOMObjectImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.IsConstructedGenericType*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsConstructedGenericType\n  nameWithType: TypeDelegator.IsConstructedGenericType\n  fullName: TypeDelegator.IsConstructedGenericType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.IsDefined*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsDefined\n  nameWithType: TypeDelegator.IsDefined\n  fullName: TypeDelegator.IsDefined\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.IsPointerImpl*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsPointerImpl\n  nameWithType: TypeDelegator.IsPointerImpl\n  fullName: TypeDelegator.IsPointerImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.IsPrimitiveImpl*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsPrimitiveImpl\n  nameWithType: TypeDelegator.IsPrimitiveImpl\n  fullName: TypeDelegator.IsPrimitiveImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.IsSZArray*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsSZArray\n  nameWithType: TypeDelegator.IsSZArray\n  fullName: TypeDelegator.IsSZArray\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.IsTypeDefinition*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsTypeDefinition\n  nameWithType: TypeDelegator.IsTypeDefinition\n  fullName: TypeDelegator.IsTypeDefinition\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.IsValueTypeImpl*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsValueTypeImpl\n  nameWithType: TypeDelegator.IsValueTypeImpl\n  fullName: TypeDelegator.IsValueTypeImpl\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.IsVariableBoundArray*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: IsVariableBoundArray\n  nameWithType: TypeDelegator.IsVariableBoundArray\n  fullName: TypeDelegator.IsVariableBoundArray\n  monikers:\n  - netcore-2.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.MetadataToken*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: MetadataToken\n  nameWithType: TypeDelegator.MetadataToken\n  fullName: TypeDelegator.MetadataToken\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.Module*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: Module\n  nameWithType: TypeDelegator.Module\n  fullName: TypeDelegator.Module\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.Name*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: Name\n  nameWithType: TypeDelegator.Name\n  fullName: TypeDelegator.Name\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.Namespace*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: Namespace\n  nameWithType: TypeDelegator.Namespace\n  fullName: TypeDelegator.Namespace\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.TypeHandle*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: TypeHandle\n  nameWithType: TypeDelegator.TypeHandle\n  fullName: TypeDelegator.TypeHandle\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.TypeDelegator.UnderlyingSystemType*\n  parent: System.Reflection.TypeDelegator\n  isExternal: false\n  name: UnderlyingSystemType\n  nameWithType: TypeDelegator.UnderlyingSystemType\n  fullName: TypeDelegator.UnderlyingSystemType\n  monikers:\n  - netcore-2.0\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Reflection/TypeDelegator.xml\n- uid: System.Reflection.MemberInfo.Equals(System.Object)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: MemberInfo.Equals(Object)\n  fullName: MemberInfo.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Reflection.MemberInfo.GetHashCode\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: MemberInfo.GetHashCode()\n  fullName: MemberInfo.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  fullName: MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.DeclaringType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: DeclaringType\n  nameWithType: MemberInfo.DeclaringType\n  fullName: MemberInfo.DeclaringType\n- uid: System.Reflection.MemberInfo.GetCustomAttributesData\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetCustomAttributesData()\n  nameWithType: MemberInfo.GetCustomAttributesData()\n  fullName: MemberInfo.GetCustomAttributesData()\n- uid: System.Reflection.TypeInfo.MemberType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: MemberType\n  nameWithType: TypeInfo.MemberType\n  fullName: TypeInfo.MemberType\n- uid: System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Equality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Equality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: op_Inequality(MemberInfo, MemberInfo)\n  nameWithType: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n  fullName: MemberInfo.op_Inequality(MemberInfo, MemberInfo)\n- uid: System.Reflection.MemberInfo.ReflectedType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ReflectedType\n  nameWithType: MemberInfo.ReflectedType\n  fullName: MemberInfo.ReflectedType\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetType()\n  nameWithType: MemberInfo._MemberInfo.GetType()\n  fullName: MemberInfo._MemberInfo.GetType()\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n  fullName: MemberInfo._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.GetTypeInfoCount(UInt32)\n  nameWithType: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n  fullName: MemberInfo._MemberInfo.GetTypeInfoCount(UInt32)\n- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  nameWithType: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n  fullName: MemberInfo._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)\n- uid: System.Reflection.TypeInfo.AsType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: AsType()\n  nameWithType: TypeInfo.AsType()\n  fullName: TypeInfo.AsType()\n- uid: System.Reflection.TypeInfo.Attributes\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: Attributes\n  nameWithType: TypeInfo.Attributes\n  fullName: TypeInfo.Attributes\n- uid: System.Reflection.TypeInfo.ContainsGenericParameters\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: ContainsGenericParameters\n  nameWithType: TypeInfo.ContainsGenericParameters\n  fullName: TypeInfo.ContainsGenericParameters\n- uid: System.Reflection.TypeInfo.DeclaredConstructors\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredConstructors\n  nameWithType: TypeInfo.DeclaredConstructors\n  fullName: TypeInfo.DeclaredConstructors\n- uid: System.Reflection.TypeInfo.DeclaredEvents\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredEvents\n  nameWithType: TypeInfo.DeclaredEvents\n  fullName: TypeInfo.DeclaredEvents\n- uid: System.Reflection.TypeInfo.DeclaredFields\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredFields\n  nameWithType: TypeInfo.DeclaredFields\n  fullName: TypeInfo.DeclaredFields\n- uid: System.Reflection.TypeInfo.DeclaredMembers\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredMembers\n  nameWithType: TypeInfo.DeclaredMembers\n  fullName: TypeInfo.DeclaredMembers\n- uid: System.Reflection.TypeInfo.DeclaredMethods\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredMethods\n  nameWithType: TypeInfo.DeclaredMethods\n  fullName: TypeInfo.DeclaredMethods\n- uid: System.Reflection.TypeInfo.DeclaredNestedTypes\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredNestedTypes\n  nameWithType: TypeInfo.DeclaredNestedTypes\n  fullName: TypeInfo.DeclaredNestedTypes\n- uid: System.Reflection.TypeInfo.DeclaredProperties\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaredProperties\n  nameWithType: TypeInfo.DeclaredProperties\n  fullName: TypeInfo.DeclaredProperties\n- uid: System.Reflection.TypeInfo.DeclaringMethod\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: DeclaringMethod\n  nameWithType: TypeInfo.DeclaringMethod\n  fullName: TypeInfo.DeclaringMethod\n- uid: System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter,System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: FindInterfaces(TypeFilter, Object)\n  nameWithType: TypeInfo.FindInterfaces(TypeFilter, Object)\n  fullName: TypeInfo.FindInterfaces(TypeFilter, Object)\n- uid: System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)\n  nameWithType: TypeInfo.FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)\n  fullName: TypeInfo.FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)\n- uid: System.Reflection.TypeInfo.GenericParameterAttributes\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GenericParameterAttributes\n  nameWithType: TypeInfo.GenericParameterAttributes\n  fullName: TypeInfo.GenericParameterAttributes\n- uid: System.Reflection.TypeInfo.GenericParameterPosition\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GenericParameterPosition\n  nameWithType: TypeInfo.GenericParameterPosition\n  fullName: TypeInfo.GenericParameterPosition\n- uid: System.Reflection.TypeInfo.GenericTypeArguments\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GenericTypeArguments\n  nameWithType: TypeInfo.GenericTypeArguments\n  fullName: TypeInfo.GenericTypeArguments\n- uid: System.Reflection.TypeInfo.GenericTypeParameters\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GenericTypeParameters\n  nameWithType: TypeInfo.GenericTypeParameters\n  fullName: TypeInfo.GenericTypeParameters\n- uid: System.Reflection.TypeInfo.GetArrayRank\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetArrayRank()\n  nameWithType: TypeInfo.GetArrayRank()\n  fullName: TypeInfo.GetArrayRank()\n- uid: System.Reflection.TypeInfo.GetConstructor(System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetConstructor(Type[])\n  nameWithType: TypeInfo.GetConstructor(Type[])\n  fullName: TypeInfo.GetConstructor(Type[])\n- uid: System.Reflection.TypeInfo.GetConstructors\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetConstructors()\n  nameWithType: TypeInfo.GetConstructors()\n  fullName: TypeInfo.GetConstructors()\n- uid: System.Reflection.TypeInfo.GetDeclaredEvent(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredEvent(String)\n  nameWithType: TypeInfo.GetDeclaredEvent(String)\n  fullName: TypeInfo.GetDeclaredEvent(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredField(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredField(String)\n  nameWithType: TypeInfo.GetDeclaredField(String)\n  fullName: TypeInfo.GetDeclaredField(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredMethod(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredMethod(String)\n  nameWithType: TypeInfo.GetDeclaredMethod(String)\n  fullName: TypeInfo.GetDeclaredMethod(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredMethods(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredMethods(String)\n  nameWithType: TypeInfo.GetDeclaredMethods(String)\n  fullName: TypeInfo.GetDeclaredMethods(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredNestedType(String)\n  nameWithType: TypeInfo.GetDeclaredNestedType(String)\n  fullName: TypeInfo.GetDeclaredNestedType(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredProperty(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDeclaredProperty(String)\n  nameWithType: TypeInfo.GetDeclaredProperty(String)\n  fullName: TypeInfo.GetDeclaredProperty(String)\n- uid: System.Reflection.TypeInfo.GetDefaultMembers\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetDefaultMembers()\n  nameWithType: TypeInfo.GetDefaultMembers()\n  fullName: TypeInfo.GetDefaultMembers()\n- uid: System.Reflection.TypeInfo.GetEnumName(System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEnumName(Object)\n  nameWithType: TypeInfo.GetEnumName(Object)\n  fullName: TypeInfo.GetEnumName(Object)\n- uid: System.Reflection.TypeInfo.GetEnumNames\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEnumNames()\n  nameWithType: TypeInfo.GetEnumNames()\n  fullName: TypeInfo.GetEnumNames()\n- uid: System.Reflection.TypeInfo.GetEnumUnderlyingType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEnumUnderlyingType()\n  nameWithType: TypeInfo.GetEnumUnderlyingType()\n  fullName: TypeInfo.GetEnumUnderlyingType()\n- uid: System.Reflection.TypeInfo.GetEnumValues\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEnumValues()\n  nameWithType: TypeInfo.GetEnumValues()\n  fullName: TypeInfo.GetEnumValues()\n- uid: System.Reflection.TypeInfo.GetEvent(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetEvent(String)\n  nameWithType: TypeInfo.GetEvent(String)\n  fullName: TypeInfo.GetEvent(String)\n- uid: System.Reflection.TypeInfo.GetField(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetField(String)\n  nameWithType: TypeInfo.GetField(String)\n  fullName: TypeInfo.GetField(String)\n- uid: System.Reflection.TypeInfo.GetFields\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetFields()\n  nameWithType: TypeInfo.GetFields()\n  fullName: TypeInfo.GetFields()\n- uid: System.Reflection.TypeInfo.GetGenericArguments\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetGenericArguments()\n  nameWithType: TypeInfo.GetGenericArguments()\n  fullName: TypeInfo.GetGenericArguments()\n- uid: System.Reflection.TypeInfo.GetGenericParameterConstraints\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetGenericParameterConstraints()\n  nameWithType: TypeInfo.GetGenericParameterConstraints()\n  fullName: TypeInfo.GetGenericParameterConstraints()\n- uid: System.Reflection.TypeInfo.GetGenericTypeDefinition\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetGenericTypeDefinition()\n  nameWithType: TypeInfo.GetGenericTypeDefinition()\n  fullName: TypeInfo.GetGenericTypeDefinition()\n- uid: System.Reflection.TypeInfo.GetInterface(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetInterface(String)\n  nameWithType: TypeInfo.GetInterface(String)\n  fullName: TypeInfo.GetInterface(String)\n- uid: System.Reflection.TypeInfo.GetMember(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMember(String)\n  nameWithType: TypeInfo.GetMember(String)\n  fullName: TypeInfo.GetMember(String)\n- uid: System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMember(String, BindingFlags)\n  nameWithType: TypeInfo.GetMember(String, BindingFlags)\n  fullName: TypeInfo.GetMember(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetMembers\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMembers()\n  nameWithType: TypeInfo.GetMembers()\n  fullName: TypeInfo.GetMembers()\n- uid: System.Reflection.TypeInfo.GetMethod(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String)\n  nameWithType: TypeInfo.GetMethod(String)\n  fullName: TypeInfo.GetMethod(String)\n- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String, BindingFlags)\n  nameWithType: TypeInfo.GetMethod(String, BindingFlags)\n  fullName: TypeInfo.GetMethod(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String, Type[])\n  nameWithType: TypeInfo.GetMethod(String, Type[])\n  fullName: TypeInfo.GetMethod(String, Type[])\n- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethod(String, Type[], ParameterModifier[])\n  nameWithType: TypeInfo.GetMethod(String, Type[], ParameterModifier[])\n  fullName: TypeInfo.GetMethod(String, Type[], ParameterModifier[])\n- uid: System.Reflection.TypeInfo.GetMethods\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetMethods()\n  nameWithType: TypeInfo.GetMethods()\n  fullName: TypeInfo.GetMethods()\n- uid: System.Reflection.TypeInfo.GetNestedType(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetNestedType(String)\n  nameWithType: TypeInfo.GetNestedType(String)\n  fullName: TypeInfo.GetNestedType(String)\n- uid: System.Reflection.TypeInfo.GetNestedTypes\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetNestedTypes()\n  nameWithType: TypeInfo.GetNestedTypes()\n  fullName: TypeInfo.GetNestedTypes()\n- uid: System.Reflection.TypeInfo.GetProperties\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperties()\n  nameWithType: TypeInfo.GetProperties()\n  fullName: TypeInfo.GetProperties()\n- uid: System.Reflection.TypeInfo.GetProperty(System.String)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String)\n  nameWithType: TypeInfo.GetProperty(String)\n  fullName: TypeInfo.GetProperty(String)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, BindingFlags)\n  nameWithType: TypeInfo.GetProperty(String, BindingFlags)\n  fullName: TypeInfo.GetProperty(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type)\n  nameWithType: TypeInfo.GetProperty(String, Type)\n  fullName: TypeInfo.GetProperty(String, Type)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type[])\n  nameWithType: TypeInfo.GetProperty(String, Type[])\n  fullName: TypeInfo.GetProperty(String, Type[])\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type, Type[])\n  nameWithType: TypeInfo.GetProperty(String, Type, Type[])\n  fullName: TypeInfo.GetProperty(String, Type, Type[])\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: GetProperty(String, Type, Type[], ParameterModifier[])\n  nameWithType: TypeInfo.GetProperty(String, Type, Type[], ParameterModifier[])\n  fullName: TypeInfo.GetProperty(String, Type, Type[], ParameterModifier[])\n- uid: System.Reflection.TypeInfo.HasElementType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: HasElementType\n  nameWithType: TypeInfo.HasElementType\n  fullName: TypeInfo.HasElementType\n- uid: System.Reflection.TypeInfo.ImplementedInterfaces\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: ImplementedInterfaces\n  nameWithType: TypeInfo.ImplementedInterfaces\n  fullName: TypeInfo.ImplementedInterfaces\n- uid: System.Reflection.TypeInfo.IsAbstract\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAbstract\n  nameWithType: TypeInfo.IsAbstract\n  fullName: TypeInfo.IsAbstract\n- uid: System.Reflection.TypeInfo.IsAnsiClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAnsiClass\n  nameWithType: TypeInfo.IsAnsiClass\n  fullName: TypeInfo.IsAnsiClass\n- uid: System.Reflection.TypeInfo.IsArray\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsArray\n  nameWithType: TypeInfo.IsArray\n  fullName: TypeInfo.IsArray\n- uid: System.Reflection.TypeInfo.IsAssignableFrom(System.Type)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAssignableFrom(Type)\n  nameWithType: TypeInfo.IsAssignableFrom(Type)\n  fullName: TypeInfo.IsAssignableFrom(Type)\n- uid: System.Reflection.TypeInfo.IsAutoClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAutoClass\n  nameWithType: TypeInfo.IsAutoClass\n  fullName: TypeInfo.IsAutoClass\n- uid: System.Reflection.TypeInfo.IsAutoLayout\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsAutoLayout\n  nameWithType: TypeInfo.IsAutoLayout\n  fullName: TypeInfo.IsAutoLayout\n- uid: System.Reflection.TypeInfo.IsByRef\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsByRef\n  nameWithType: TypeInfo.IsByRef\n  fullName: TypeInfo.IsByRef\n- uid: System.Reflection.TypeInfo.IsClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsClass\n  nameWithType: TypeInfo.IsClass\n  fullName: TypeInfo.IsClass\n- uid: System.Reflection.TypeInfo.IsCOMObject\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsCOMObject\n  nameWithType: TypeInfo.IsCOMObject\n  fullName: TypeInfo.IsCOMObject\n- uid: System.Reflection.TypeInfo.IsEnum\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsEnum\n  nameWithType: TypeInfo.IsEnum\n  fullName: TypeInfo.IsEnum\n- uid: System.Reflection.TypeInfo.IsEnumDefined(System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsEnumDefined(Object)\n  nameWithType: TypeInfo.IsEnumDefined(Object)\n  fullName: TypeInfo.IsEnumDefined(Object)\n- uid: System.Reflection.TypeInfo.IsEquivalentTo(System.Type)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsEquivalentTo(Type)\n  nameWithType: TypeInfo.IsEquivalentTo(Type)\n  fullName: TypeInfo.IsEquivalentTo(Type)\n- uid: System.Reflection.TypeInfo.IsExplicitLayout\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsExplicitLayout\n  nameWithType: TypeInfo.IsExplicitLayout\n  fullName: TypeInfo.IsExplicitLayout\n- uid: System.Reflection.TypeInfo.IsGenericParameter\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsGenericParameter\n  nameWithType: TypeInfo.IsGenericParameter\n  fullName: TypeInfo.IsGenericParameter\n- uid: System.Reflection.TypeInfo.IsGenericType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsGenericType\n  nameWithType: TypeInfo.IsGenericType\n  fullName: TypeInfo.IsGenericType\n- uid: System.Reflection.TypeInfo.IsGenericTypeDefinition\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsGenericTypeDefinition\n  nameWithType: TypeInfo.IsGenericTypeDefinition\n  fullName: TypeInfo.IsGenericTypeDefinition\n- uid: System.Reflection.TypeInfo.IsImport\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsImport\n  nameWithType: TypeInfo.IsImport\n  fullName: TypeInfo.IsImport\n- uid: System.Reflection.TypeInfo.IsInstanceOfType(System.Object)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsInstanceOfType(Object)\n  nameWithType: TypeInfo.IsInstanceOfType(Object)\n  fullName: TypeInfo.IsInstanceOfType(Object)\n- uid: System.Reflection.TypeInfo.IsInterface\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsInterface\n  nameWithType: TypeInfo.IsInterface\n  fullName: TypeInfo.IsInterface\n- uid: System.Reflection.TypeInfo.IsLayoutSequential\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsLayoutSequential\n  nameWithType: TypeInfo.IsLayoutSequential\n  fullName: TypeInfo.IsLayoutSequential\n- uid: System.Reflection.TypeInfo.IsMarshalByRef\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsMarshalByRef\n  nameWithType: TypeInfo.IsMarshalByRef\n  fullName: TypeInfo.IsMarshalByRef\n- uid: System.Reflection.TypeInfo.IsNested\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNested\n  nameWithType: TypeInfo.IsNested\n  fullName: TypeInfo.IsNested\n- uid: System.Reflection.TypeInfo.IsNestedAssembly\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedAssembly\n  nameWithType: TypeInfo.IsNestedAssembly\n  fullName: TypeInfo.IsNestedAssembly\n- uid: System.Reflection.TypeInfo.IsNestedFamANDAssem\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedFamANDAssem\n  nameWithType: TypeInfo.IsNestedFamANDAssem\n  fullName: TypeInfo.IsNestedFamANDAssem\n- uid: System.Reflection.TypeInfo.IsNestedFamily\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedFamily\n  nameWithType: TypeInfo.IsNestedFamily\n  fullName: TypeInfo.IsNestedFamily\n- uid: System.Reflection.TypeInfo.IsNestedFamORAssem\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedFamORAssem\n  nameWithType: TypeInfo.IsNestedFamORAssem\n  fullName: TypeInfo.IsNestedFamORAssem\n- uid: System.Reflection.TypeInfo.IsNestedPrivate\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedPrivate\n  nameWithType: TypeInfo.IsNestedPrivate\n  fullName: TypeInfo.IsNestedPrivate\n- uid: System.Reflection.TypeInfo.IsNestedPublic\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNestedPublic\n  nameWithType: TypeInfo.IsNestedPublic\n  fullName: TypeInfo.IsNestedPublic\n- uid: System.Reflection.TypeInfo.IsNotPublic\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsNotPublic\n  nameWithType: TypeInfo.IsNotPublic\n  fullName: TypeInfo.IsNotPublic\n- uid: System.Reflection.TypeInfo.IsPointer\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsPointer\n  nameWithType: TypeInfo.IsPointer\n  fullName: TypeInfo.IsPointer\n- uid: System.Reflection.TypeInfo.IsPrimitive\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsPrimitive\n  nameWithType: TypeInfo.IsPrimitive\n  fullName: TypeInfo.IsPrimitive\n- uid: System.Reflection.TypeInfo.IsPublic\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsPublic\n  nameWithType: TypeInfo.IsPublic\n  fullName: TypeInfo.IsPublic\n- uid: System.Reflection.TypeInfo.IsSealed\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsSealed\n  nameWithType: TypeInfo.IsSealed\n  fullName: TypeInfo.IsSealed\n- uid: System.Reflection.TypeInfo.IsSerializable\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsSerializable\n  nameWithType: TypeInfo.IsSerializable\n  fullName: TypeInfo.IsSerializable\n- uid: System.Reflection.TypeInfo.IsSpecialName\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsSpecialName\n  nameWithType: TypeInfo.IsSpecialName\n  fullName: TypeInfo.IsSpecialName\n- uid: System.Reflection.TypeInfo.IsSubclassOf(System.Type)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsSubclassOf(Type)\n  nameWithType: TypeInfo.IsSubclassOf(Type)\n  fullName: TypeInfo.IsSubclassOf(Type)\n- uid: System.Reflection.TypeInfo.IsUnicodeClass\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsUnicodeClass\n  nameWithType: TypeInfo.IsUnicodeClass\n  fullName: TypeInfo.IsUnicodeClass\n- uid: System.Reflection.TypeInfo.IsValueType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsValueType\n  nameWithType: TypeInfo.IsValueType\n  fullName: TypeInfo.IsValueType\n- uid: System.Reflection.TypeInfo.IsVisible\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IsVisible\n  nameWithType: TypeInfo.IsVisible\n  fullName: TypeInfo.IsVisible\n- uid: System.Reflection.TypeInfo.MakeArrayType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: MakeArrayType()\n  nameWithType: TypeInfo.MakeArrayType()\n  fullName: TypeInfo.MakeArrayType()\n- uid: System.Reflection.TypeInfo.MakeArrayType(System.Int32)\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: MakeArrayType(Int32)\n  nameWithType: TypeInfo.MakeArrayType(Int32)\n  fullName: TypeInfo.MakeArrayType(Int32)\n- uid: System.Reflection.TypeInfo.MakeByRefType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: MakeByRefType()\n  nameWithType: TypeInfo.MakeByRefType()\n  fullName: TypeInfo.MakeByRefType()\n- uid: System.Reflection.TypeInfo.MakeGenericType(System.Type[])\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: MakeGenericType(Type[])\n  nameWithType: TypeInfo.MakeGenericType(Type[])\n  fullName: TypeInfo.MakeGenericType(Type[])\n- uid: System.Reflection.TypeInfo.MakePointerType\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: MakePointerType()\n  nameWithType: TypeInfo.MakePointerType()\n  fullName: TypeInfo.MakePointerType()\n- uid: System.Reflection.TypeInfo.StructLayoutAttribute\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: StructLayoutAttribute\n  nameWithType: TypeInfo.StructLayoutAttribute\n  fullName: TypeInfo.StructLayoutAttribute\n- uid: System.Reflection.TypeInfo.TypeInitializer\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: TypeInitializer\n  nameWithType: TypeInfo.TypeInitializer\n  fullName: TypeInfo.TypeInitializer\n- uid: System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo\n  parent: System.Reflection.TypeInfo\n  isExternal: false\n  name: IReflectableType.GetTypeInfo()\n  nameWithType: TypeInfo.IReflectableType.GetTypeInfo()\n  fullName: TypeInfo.IReflectableType.GetTypeInfo()\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttribute<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttribute<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes(MemberInfo, Type, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo)\n- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: GetCustomAttributes<T>(MemberInfo, Boolean)\n  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n  fullName: CustomAttributeExtensions.GetCustomAttributes<T>(MemberInfo, Boolean)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type)\n- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)\n  parent: System.Reflection.CustomAttributeExtensions\n  isExternal: false\n  name: IsDefined(MemberInfo, Type, Boolean)\n  nameWithType: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n  fullName: CustomAttributeExtensions.IsDefined(MemberInfo, Type, Boolean)\n- uid: System.Reflection.MemberInfoExtensions.GetMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: GetMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.GetMetadataToken(MemberInfo)\n- uid: System.Reflection.MemberInfoExtensions.HasMetadataToken(System.Reflection.MemberInfo)\n  parent: System.Reflection.MemberInfoExtensions\n  isExternal: false\n  name: HasMetadataToken(MemberInfo)\n  nameWithType: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n  fullName: MemberInfoExtensions.HasMetadataToken(MemberInfo)\n- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)\n  parent: System.Reflection.RuntimeReflectionExtensions\n  isExternal: false\n  name: GetRuntimeInterfaceMap(TypeInfo, Type)\n  nameWithType: RuntimeReflectionExtensions.GetRuntimeInterfaceMap(TypeInfo, Type)\n  fullName: RuntimeReflectionExtensions.GetRuntimeInterfaceMap(TypeInfo, Type)\n"}