<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="ja-jp">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-fdd610b" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">aeedb62b0a5e622fcf26427717e58964201c88cd</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Runtime.CompilerServices.InternalsVisibleToAttribute.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">net47</xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">937f130cf04f4efbba75fd258e55fe821019ca11</xliffext:olskeletonhash>
      <xliffext:olxliffhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">12e0d9a8408861211ee87707af9241f5d75dfe66</xliffext:olxliffhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Specifies that types that are ordinarily visible only within the current assembly are visible to a specified assembly.</source>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT">
          <source>Ordinarily, types and members with <ph id="ph1">`internal`</ph> scope (in C#) and <ph id="ph2">`friend`</ph> scope (in Visual Basic) are visible only in the assembly in which they are defined.</source>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute makes them also visible to the types in a specified assembly, which is known as a friend assembly.</source>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT">
          <source>The attribute is applied at the assembly level.</source>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT">
          <source>This means that it can be included at the beginning of a source code file, or it can be included in the AssemblyInfo file in a Visual Studio project.</source>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the attribute to specify a single friend assembly that can access the internal types and members of the current assembly.</source>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can define multiple friend assemblies in two ways.</source>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT">
          <source>They can appear as individual assembly-level attributes, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Runtime.CompilerServices.InternalsVisibleToAttribute#3<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple1.cs#3)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Runtime.CompilerServices.InternalsVisibleToAttribute#3<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple1.vb#3)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT">
          <source>They can also appear with separate<ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> tags but a single <ph id="ph2">`assembly`</ph> keyword, as the following example illustrates.</source>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[!code-csharp</bpt><bpt id="p2">[</bpt>System.Runtime.CompilerServices.InternalsVisibleToAttribute#4<ept id="p2">](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple2.cs#4)</ept><ept id="p1">]</ept> <bpt id="p3">[!code-vb</bpt><bpt id="p4">[</bpt>System.Runtime.CompilerServices.InternalsVisibleToAttribute#4<ept id="p4">](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple2.vb#4)</ept><ept id="p3">]</ept></source>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT">
          <source>The friend assembly is identified by the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the current assembly and the friend assembly must be unsigned, or both assemblies must be signed with a strong name.</source>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT">
          <source>If both assemblies are unsigned, the <ph id="ph1">`assemblyName`</ph> argument consists of the name of the friend assembly, specified without a directory path or file name extension.</source>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT">
          <source>If both assemblies are signed with a strong name, the argument to the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor must consist of the name of the assembly without its directory path or file name extension, along with the full public key (and not its public key token).</source>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT">
          <source>To get the full public key of a strong-named assembly, see the <bpt id="p1">[</bpt>Getting the full public key<ept id="p1">](#Key)</ept> section later in this article.</source>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about using <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> with strong-named assemblies, see the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor.</source>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT">
          <source>Do not include values for the <ph id="ph1">&lt;xref:System.Reflection.AssemblyName.CultureInfo%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Reflection.AssemblyName.Version%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A&gt;</ph> field in the argument; the Visual Basic, C#, and C++ compilers treat this as a compiler error.</source>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use a compiler that does not treat it as an error (such as the <bpt id="p1">[</bpt>IL Assembler (ILAsm.exe)<ept id="p1">](~/docs/framework/tools/ilasm-exe-il-assembler.md)</ept>) and the assemblies are strong-named, a <ph id="ph1">&lt;xref:System.MethodAccessException&gt;</ph> exception is thrown the first time the specified friend assembly accesses the assembly that contains the <ph id="ph2">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute.</source>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about how to use this attribute, see the following topics:</source>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Friend Assemblies (C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept></source>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Friend Assemblies<ept id="p1">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept></source>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT">
          <source>Getting the full public key</source>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use the <bpt id="p1">[</bpt>Strong Name Tool (Sn.exe)<ept id="p1">](~/docs/framework/tools/sn-exe-strong-name-tool.md)</ept> to retrieve the full public key from a strong-named key (.snk) file.</source>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT">
          <source>To do this, you perform the following steps:</source>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT">
          <source>Extract the public key from the strong-named key file to a separate file:</source>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Sn -p<ept id="p1">**</ept>  <bpt id="p2">*</bpt>snk_file<ept id="p2">*</ept> <bpt id="p3">*</bpt>outfile<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT">
          <source>Display the full public key to the console:</source>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Sn -tp<ept id="p1">**</ept>  <bpt id="p2">*</bpt>outfile<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT">
          <source>Copy and paste the full public key value into your source code.</source>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT">
          <source>Compiling the friend assembly with C#</source>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references.</source>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler option is optional for the Visual Basic compiler, and the corresponding <bpt id="p2">**</bpt>-out<ept id="p2">**</ept> or <bpt id="p3">**</bpt>-o<ept id="p3">**</ept> compiler option should not be used when compiling friend assemblies with the F# compiler.</source>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT">
          <source>Compiling the friend assembly with C++</source>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT">
          <source>In C++, in order to make the internal members enabled by the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute accessible to a friend assembly, you must use the <ph id="ph2">`as_friend`</ph> attribute in the C++  directive.</source>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information, see <bpt id="p1">[</bpt>Friend Assemblies (C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept>.</source>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>Initializes a new instance of the <ph id="ph1">&lt;xref href="System.Runtime.CompilerServices.InternalsVisibleToAttribute"&gt;&lt;/xref&gt;</ph> class with the name of the specified friend assembly.</source>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A&gt;</ph> constructor defines a friend assembly, which is an assembly that has access to the internal types and members of the current assembly.</source>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT">
          <source>Both the current assembly and the friend assembly must be unsigned, or both must be signed with a strong name.</source>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT">
          <source>(For more information about strong-named assemblies, see <bpt id="p1">[</bpt>Creating and Using Strong-Named Assemblies<ept id="p1">](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md)</ept>.) If both are unsigned, the <ph id="ph1">`assemblyName`</ph> argument consists of the name of the friend assembly, specified without a directory path or file extension.</source>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT">
          <source>If both are signed, <ph id="ph1">`assemblyName`</ph> consists of the name of the friend assembly without its directory path or file name extension, along with its full public key (but not its public key token).</source>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT">
          <source>The other components of a strong name, such as those that provide culture, version, or processor architecture information, cannot be specified in the <ph id="ph1">`assemblyName`</ph> argument.</source>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT">
          <source>If you use the C# compiler to compile the friend assembly, you must explicitly specify the name of the output file (.exe or .dll) by using the <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler option.</source>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT">
          <source>This is required because the compiler has not yet generated the name for the assembly it is building at the time it is binding to external references.</source>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT">
          <source>The <bpt id="p1">**</bpt>/out<ept id="p1">**</ept> compiler option is optional for the Visual Basic compiler, and the corresponding <bpt id="p2">**</bpt>-out<ept id="p2">**</ept> or <bpt id="p3">**</bpt>-o<ept id="p3">**</ept> compiler option should not be used when compiling friend assemblies with the F# compiler.</source>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT">
          <source>You can use <bpt id="p1">[</bpt>Sn.exe (Strong Name Tool)<ept id="p1">](~/docs/framework/tools/sn-exe-strong-name-tool.md)</ept> to retrieve the full public key from a strong-named key (.snk) file.</source>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT">
          <source>To do this, you perform the following steps:</source>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT">
          <source>Extract the public key from the strong-named key file to a separate file:</source>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Sn -p<ept id="p1">**</ept>  <bpt id="p2">*</bpt>snk_file<ept id="p2">*</ept> <bpt id="p3">*</bpt>outfile<ept id="p3">*</ept></source>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT">
          <source>Display the full public key to the console:</source>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">**</bpt>Sn -tp<ept id="p1">**</ept>  <bpt id="p2">*</bpt>outfile<ept id="p2">*</ept></source>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT">
          <source>Copy and paste the full public key value into your source code.</source>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about how to use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute, see the following topics:</source>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Friend Assemblies (C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept></source>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Friend Assemblies<ept id="p1">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept></source>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>The name of a friend assembly.</source>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>This property is not implemented.</source>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>This property does not return a value.</source>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>Gets the name of the friend assembly to which all types and type members that are marked with the <ph id="ph1">`internal`</ph> keyword are to be made visible.</source>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT">
          <source>For more information about how to use the <ph id="ph1">&lt;xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute&gt;</ph> attribute, see the following topics:</source>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Friend Assemblies (C++)<ept id="p1">](http://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)</ept></source>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT">
          <source><bpt id="p1">[</bpt>Friend Assemblies<ept id="p1">](http://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)</ept></source>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>A string that represents the name of the friend assembly.</source>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>