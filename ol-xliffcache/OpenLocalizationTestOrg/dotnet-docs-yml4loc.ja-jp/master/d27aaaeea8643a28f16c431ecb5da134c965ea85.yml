### YamlMime:ManagedReference
items:
- uid: System.Threading.SynchronizationContext
  commentId: T:System.Threading.SynchronizationContext
  id: SynchronizationContext
  children:
  - System.Threading.SynchronizationContext.#ctor
  - System.Threading.SynchronizationContext.CreateCopy
  - System.Threading.SynchronizationContext.Current
  - System.Threading.SynchronizationContext.IsWaitNotificationRequired
  - System.Threading.SynchronizationContext.OperationCompleted
  - System.Threading.SynchronizationContext.OperationStarted
  - System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)
  - System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)
  - System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)
  - System.Threading.SynchronizationContext.SetThreadStaticContext(System.Threading.SynchronizationContext)
  - System.Threading.SynchronizationContext.SetWaitNotificationRequired
  - System.Threading.SynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)
  - System.Threading.SynchronizationContext.WaitHelper(System.IntPtr[],System.Boolean,System.Int32)
  langs:
  - csharp
  name: SynchronizationContext
  nameWithType: SynchronizationContext
  fullName: System.Threading.SynchronizationContext
  type: Class
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Provides the basic functionality for propagating a synchronization context in various synchronization models.
  remarks: "The <xref:System.Threading.SynchronizationContext> class is a base class that provides a free-threaded context with no synchronization.  \n  \n The purpose of the synchronization model implemented by this class is to allow the internal asynchronous/synchronous operations of the common language runtime to behave properly with different synchronization models. This model also simplifies some of the requirements that managed applications have had to follow in order to work correctly under different synchronization environments.  \n  \n Providers of synchronization models can extend this class and provide their own implementations for these methods.  \n  \n For more information about synchronization contexts, see the article [It's All About the SynchronizationContext](http://msdn.microsoft.com/magazine/gg598924.aspx) in the MSDN Magazine."
  syntax:
    content: public class SynchronizationContext
  inheritance:
  - System.Object
  derivedClasses:
  - System.Windows.Forms.WindowsFormsSynchronizationContext
  - System.Windows.Threading.DispatcherSynchronizationContext
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.SynchronizationContext.#ctor
  commentId: M:System.Threading.SynchronizationContext.#ctor
  id: '#ctor'
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: SynchronizationContext()
  nameWithType: SynchronizationContext.SynchronizationContext()
  fullName: SynchronizationContext.SynchronizationContext()
  type: Constructor
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Creates a new instance of the <xref href="System.Threading.SynchronizationContext"></xref> class.
  remarks: The default constructor performs no parameter initialization.
  syntax:
    content: public SynchronizationContext ();
    parameters: []
  overload: System.Threading.SynchronizationContext.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.SynchronizationContext.CreateCopy
  commentId: M:System.Threading.SynchronizationContext.CreateCopy
  id: CreateCopy
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: CreateCopy()
  nameWithType: SynchronizationContext.CreateCopy()
  fullName: SynchronizationContext.CreateCopy()
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: When overridden in a derived class, creates a copy of the synchronization context.
  remarks: The default implementation returns an empty <xref:System.Threading.SynchronizationContext> object.
  syntax:
    content: public virtual System.Threading.SynchronizationContext CreateCopy ();
    parameters: []
    return:
      type: System.Threading.SynchronizationContext
      description: A new <xref href="System.Threading.SynchronizationContext"></xref> object.
  overload: System.Threading.SynchronizationContext.CreateCopy*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.SynchronizationContext.Current
  commentId: P:System.Threading.SynchronizationContext.Current
  id: Current
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: Current
  nameWithType: SynchronizationContext.Current
  fullName: SynchronizationContext.Current
  type: Property
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Gets the synchronization context for the current thread.
  remarks: This property is useful for propagating a synchronization context from one thread to another.
  syntax:
    content: public static System.Threading.SynchronizationContext Current { get; }
    return:
      type: System.Threading.SynchronizationContext
      description: A <xref href="System.Threading.SynchronizationContext"></xref> object representing the current synchronization context.
  overload: System.Threading.SynchronizationContext.Current*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.SynchronizationContext.IsWaitNotificationRequired
  commentId: M:System.Threading.SynchronizationContext.IsWaitNotificationRequired
  id: IsWaitNotificationRequired
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: IsWaitNotificationRequired()
  nameWithType: SynchronizationContext.IsWaitNotificationRequired()
  fullName: SynchronizationContext.IsWaitNotificationRequired()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Determines if wait notification is required.
  syntax:
    content: public bool IsWaitNotificationRequired ();
    parameters: []
    return:
      type: System.Boolean
      description: '`true` if wait notification is required; otherwise, `false`.'
  overload: System.Threading.SynchronizationContext.IsWaitNotificationRequired*
  exceptions: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.SynchronizationContext.OperationCompleted
  commentId: M:System.Threading.SynchronizationContext.OperationCompleted
  id: OperationCompleted
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: OperationCompleted()
  nameWithType: SynchronizationContext.OperationCompleted()
  fullName: SynchronizationContext.OperationCompleted()
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: When overridden in a derived class, responds to the notification that an operation has completed.
  remarks: The default implementation contains no code. You can optionally override this method to provide code that executes when an operation is complete.
  syntax:
    content: public virtual void OperationCompleted ();
    parameters: []
  overload: System.Threading.SynchronizationContext.OperationCompleted*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.SynchronizationContext.OperationStarted
  commentId: M:System.Threading.SynchronizationContext.OperationStarted
  id: OperationStarted
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: OperationStarted()
  nameWithType: SynchronizationContext.OperationStarted()
  fullName: SynchronizationContext.OperationStarted()
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: When overridden in a derived class, responds to the notification that an operation has started.
  remarks: The default implementation contains no code. You can optionally override this method to provide code that executes when an operation starts.
  syntax:
    content: public virtual void OperationStarted ();
    parameters: []
  overload: System.Threading.SynchronizationContext.OperationStarted*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)
  commentId: M:System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)
  id: Post(System.Threading.SendOrPostCallback,System.Object)
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: Post(SendOrPostCallback, Object)
  nameWithType: SynchronizationContext.Post(SendOrPostCallback, Object)
  fullName: SynchronizationContext.Post(SendOrPostCallback, Object)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: When overridden in a derived class, dispatches an asynchronous message to a synchronization context.
  remarks: The <xref:System.Threading.SynchronizationContext.Post%2A> method starts an asynchronous request to post a message.
  syntax:
    content: public virtual void Post (System.Threading.SendOrPostCallback d, object state);
    parameters:
    - id: d
      type: System.Threading.SendOrPostCallback
      description: The <xref href="System.Threading.SendOrPostCallback"></xref> delegate to call.
    - id: state
      type: System.Object
      description: The object passed to the delegate.
  overload: System.Threading.SynchronizationContext.Post*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)
  commentId: M:System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)
  id: Send(System.Threading.SendOrPostCallback,System.Object)
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: Send(SendOrPostCallback, Object)
  nameWithType: SynchronizationContext.Send(SendOrPostCallback, Object)
  fullName: SynchronizationContext.Send(SendOrPostCallback, Object)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: When overridden in a derived class, dispatches a synchronous message to a synchronization context.
  remarks: The <xref:System.Threading.SynchronizationContext.Send%2A> method starts a synchronous request to send a message.
  syntax:
    content: public virtual void Send (System.Threading.SendOrPostCallback d, object state);
    parameters:
    - id: d
      type: System.Threading.SendOrPostCallback
      description: The <xref href="System.Threading.SendOrPostCallback"></xref> delegate to call.
    - id: state
      type: System.Object
      description: The object passed to the delegate.
  overload: System.Threading.SynchronizationContext.Send*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The method was called in a Windows Store app. The implementation of <xref href="System.Threading.SynchronizationContext"></xref> for Windows Store apps does not support the <xref href="System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)"></xref> method.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)
  commentId: M:System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)
  id: SetSynchronizationContext(System.Threading.SynchronizationContext)
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: SetSynchronizationContext(SynchronizationContext)
  nameWithType: SynchronizationContext.SetSynchronizationContext(SynchronizationContext)
  fullName: SynchronizationContext.SetSynchronizationContext(SynchronizationContext)
  type: Method
  assemblies:
  - System.Threading
  - mscorlib
  - netstandard
  namespace: System.Threading
  summary: Sets the current synchronization context.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public static void SetSynchronizationContext (System.Threading.SynchronizationContext syncContext);
    parameters:
    - id: syncContext
      type: System.Threading.SynchronizationContext
      description: The <xref href="System.Threading.SynchronizationContext"></xref> object to be set.
  overload: System.Threading.SynchronizationContext.SetSynchronizationContext*
  exceptions: []
  attributes:
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.SynchronizationContext.SetThreadStaticContext(System.Threading.SynchronizationContext)
  commentId: M:System.Threading.SynchronizationContext.SetThreadStaticContext(System.Threading.SynchronizationContext)
  id: SetThreadStaticContext(System.Threading.SynchronizationContext)
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: SetThreadStaticContext(SynchronizationContext)
  nameWithType: SynchronizationContext.SetThreadStaticContext(SynchronizationContext)
  fullName: SynchronizationContext.SetThreadStaticContext(SynchronizationContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  syntax:
    content: >-
      [System.Obsolete("The method is not supported and will be removed")]

      public static void SetThreadStaticContext (System.Threading.SynchronizationContext syncContext);
    parameters:
    - id: syncContext
      type: System.Threading.SynchronizationContext
      description: ''
  overload: System.Threading.SynchronizationContext.SetThreadStaticContext*
  exceptions: []
  attributes:
  - type: System.ObsoleteAttribute
  version:
  - xamarinandroid-7.1
  - xamarinios-10.8
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
- uid: System.Threading.SynchronizationContext.SetWaitNotificationRequired
  commentId: M:System.Threading.SynchronizationContext.SetWaitNotificationRequired
  id: SetWaitNotificationRequired
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: SetWaitNotificationRequired()
  nameWithType: SynchronizationContext.SetWaitNotificationRequired()
  fullName: SynchronizationContext.SetWaitNotificationRequired()
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Sets notification that wait notification is required and prepares the callback method so it can be called more reliably when a wait occurs.
  syntax:
    content: protected void SetWaitNotificationRequired ();
    parameters: []
  overload: System.Threading.SynchronizationContext.SetWaitNotificationRequired*
  exceptions: []
  attributes: []
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.SynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)
  commentId: M:System.Threading.SynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)
  id: Wait(System.IntPtr[],System.Boolean,System.Int32)
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: Wait(IntPtr[], Boolean, Int32)
  nameWithType: SynchronizationContext.Wait(IntPtr[], Boolean, Int32)
  fullName: SynchronizationContext.Wait(IntPtr[], Boolean, Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Waits for any or all the elements in the specified array to receive a signal.
  remarks: The <xref:System.Threading.SynchronizationContext.Wait%2A> method calls the external declaration <xref:System.Threading.SynchronizationContext.WaitHelper%2A> to perform the wait activity.  Override the <xref:System.Threading.SynchronizationContext.Wait%2A> method to change the wait behavior for the synchronization context.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Security.SecurityCritical]

      public virtual int Wait (IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout);
    parameters:
    - id: waitHandles
      type: System.IntPtr[]
      description: An array of type <xref href="System.IntPtr"></xref> that contains the native operating system handles.
    - id: waitAll
      type: System.Boolean
      description: '`true` to wait for all handles; `false` to wait for any handle.'
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite"></xref> (-1) to wait indefinitely.
    return:
      type: System.Int32
      description: The array index of the object that satisfied the wait.
  overload: System.Threading.SynchronizationContext.Wait*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>waitHandles</code> is null.
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.SynchronizationContext.WaitHelper(System.IntPtr[],System.Boolean,System.Int32)
  commentId: M:System.Threading.SynchronizationContext.WaitHelper(System.IntPtr[],System.Boolean,System.Int32)
  id: WaitHelper(System.IntPtr[],System.Boolean,System.Int32)
  parent: System.Threading.SynchronizationContext
  langs:
  - csharp
  name: WaitHelper(IntPtr[], Boolean, Int32)
  nameWithType: SynchronizationContext.WaitHelper(IntPtr[], Boolean, Int32)
  fullName: SynchronizationContext.WaitHelper(IntPtr[], Boolean, Int32)
  type: Method
  assemblies:
  - mscorlib
  - netstandard
  - System.Threading
  namespace: System.Threading
  summary: Helper function that waits for any or all the elements in the specified array to receive a signal.
  remarks: <xref:System.Threading.SynchronizationContext.WaitHelper%2A> is a declaration for an unmanaged external helper function. <xref:System.Threading.SynchronizationContext.WaitHelper%2A> is called by the <xref:System.Threading.SynchronizationContext.Wait%2A> method to wait for a signal for the specified operating system handles.
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      [System.Security.SecurityCritical]

      protected static int WaitHelper (IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout);
    parameters:
    - id: waitHandles
      type: System.IntPtr[]
      description: An array of type <xref href="System.IntPtr"></xref> that contains the native operating system handles.
    - id: waitAll
      type: System.Boolean
      description: '`true` to wait for all handles;  `false` to wait for any handle.'
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite"></xref> (-1) to wait indefinitely.
    return:
      type: System.Int32
      description: The array index of the object that satisfied the wait.
  overload: System.Threading.SynchronizationContext.WaitHelper*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  - type: System.Security.SecurityCriticalAttribute
  version:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  altCompliant: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
  ms.technology:
  - dotnet-standard
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Threading.SynchronizationContext.#ctor
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: SynchronizationContext()
  nameWithType: SynchronizationContext.SynchronizationContext()
  fullName: SynchronizationContext.SynchronizationContext()
- uid: System.Threading.SynchronizationContext.CreateCopy
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: CreateCopy()
  nameWithType: SynchronizationContext.CreateCopy()
  fullName: SynchronizationContext.CreateCopy()
- uid: System.Threading.SynchronizationContext
  parent: System.Threading
  isExternal: false
  name: SynchronizationContext
  nameWithType: SynchronizationContext
  fullName: System.Threading.SynchronizationContext
- uid: System.Threading.SynchronizationContext.Current
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: Current
  nameWithType: SynchronizationContext.Current
  fullName: SynchronizationContext.Current
- uid: System.Threading.SynchronizationContext.IsWaitNotificationRequired
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: IsWaitNotificationRequired()
  nameWithType: SynchronizationContext.IsWaitNotificationRequired()
  fullName: SynchronizationContext.IsWaitNotificationRequired()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.SynchronizationContext.OperationCompleted
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: OperationCompleted()
  nameWithType: SynchronizationContext.OperationCompleted()
  fullName: SynchronizationContext.OperationCompleted()
- uid: System.Threading.SynchronizationContext.OperationStarted
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: OperationStarted()
  nameWithType: SynchronizationContext.OperationStarted()
  fullName: SynchronizationContext.OperationStarted()
- uid: System.Threading.SynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: Post(SendOrPostCallback, Object)
  nameWithType: SynchronizationContext.Post(SendOrPostCallback, Object)
  fullName: SynchronizationContext.Post(SendOrPostCallback, Object)
- uid: System.Threading.SendOrPostCallback
  parent: System.Threading
  isExternal: false
  name: SendOrPostCallback
  nameWithType: SendOrPostCallback
  fullName: System.Threading.SendOrPostCallback
- uid: System.Threading.SynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: Send(SendOrPostCallback, Object)
  nameWithType: SynchronizationContext.Send(SendOrPostCallback, Object)
  fullName: SynchronizationContext.Send(SendOrPostCallback, Object)
- uid: System.Threading.SynchronizationContext.SetSynchronizationContext(System.Threading.SynchronizationContext)
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: SetSynchronizationContext(SynchronizationContext)
  nameWithType: SynchronizationContext.SetSynchronizationContext(SynchronizationContext)
  fullName: SynchronizationContext.SetSynchronizationContext(SynchronizationContext)
- uid: System.Threading.SynchronizationContext.SetThreadStaticContext(System.Threading.SynchronizationContext)
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: SetThreadStaticContext(SynchronizationContext)
  nameWithType: SynchronizationContext.SetThreadStaticContext(SynchronizationContext)
  fullName: SynchronizationContext.SetThreadStaticContext(SynchronizationContext)
- uid: System.Threading.SynchronizationContext.SetWaitNotificationRequired
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: SetWaitNotificationRequired()
  nameWithType: SynchronizationContext.SetWaitNotificationRequired()
  fullName: SynchronizationContext.SetWaitNotificationRequired()
- uid: System.Threading.SynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: Wait(IntPtr[], Boolean, Int32)
  nameWithType: SynchronizationContext.Wait(IntPtr[], Boolean, Int32)
  fullName: SynchronizationContext.Wait(IntPtr[], Boolean, Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.IntPtr[]
  parent: System
  isExternal: false
  name: IntPtr[]
  nameWithType: IntPtr[]
  fullName: System.IntPtr[]
  spec.csharp:
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Threading.SynchronizationContext.WaitHelper(System.IntPtr[],System.Boolean,System.Int32)
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: WaitHelper(IntPtr[], Boolean, Int32)
  nameWithType: SynchronizationContext.WaitHelper(IntPtr[], Boolean, Int32)
  fullName: SynchronizationContext.WaitHelper(IntPtr[], Boolean, Int32)
- uid: System.Threading.SynchronizationContext.#ctor*
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: SynchronizationContext
  nameWithType: SynchronizationContext.SynchronizationContext
  fullName: SynchronizationContext.SynchronizationContext
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
- uid: System.Threading.SynchronizationContext.CreateCopy*
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: CreateCopy
  nameWithType: SynchronizationContext.CreateCopy
  fullName: SynchronizationContext.CreateCopy
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
- uid: System.Threading.SynchronizationContext.Current*
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: Current
  nameWithType: SynchronizationContext.Current
  fullName: SynchronizationContext.Current
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
- uid: System.Threading.SynchronizationContext.IsWaitNotificationRequired*
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: IsWaitNotificationRequired
  nameWithType: SynchronizationContext.IsWaitNotificationRequired
  fullName: SynchronizationContext.IsWaitNotificationRequired
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
- uid: System.Threading.SynchronizationContext.OperationCompleted*
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: OperationCompleted
  nameWithType: SynchronizationContext.OperationCompleted
  fullName: SynchronizationContext.OperationCompleted
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
- uid: System.Threading.SynchronizationContext.OperationStarted*
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: OperationStarted
  nameWithType: SynchronizationContext.OperationStarted
  fullName: SynchronizationContext.OperationStarted
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
- uid: System.Threading.SynchronizationContext.Post*
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: Post
  nameWithType: SynchronizationContext.Post
  fullName: SynchronizationContext.Post
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
- uid: System.Threading.SynchronizationContext.Send*
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: Send
  nameWithType: SynchronizationContext.Send
  fullName: SynchronizationContext.Send
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
- uid: System.Threading.SynchronizationContext.SetSynchronizationContext*
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: SetSynchronizationContext
  nameWithType: SynchronizationContext.SetSynchronizationContext
  fullName: SynchronizationContext.SetSynchronizationContext
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-1.0
  - netstandard-1.1
  - netstandard-1.2
  - netstandard-1.3
  - netstandard-1.4
  - netstandard-1.6
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
- uid: System.Threading.SynchronizationContext.SetThreadStaticContext*
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: SetThreadStaticContext
  nameWithType: SynchronizationContext.SetThreadStaticContext
  fullName: SynchronizationContext.SetThreadStaticContext
  monikers:
  - xamarinandroid-7.1
  - xamarinios-10.8
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
- uid: System.Threading.SynchronizationContext.SetWaitNotificationRequired*
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: SetWaitNotificationRequired
  nameWithType: SynchronizationContext.SetWaitNotificationRequired
  fullName: SynchronizationContext.SetWaitNotificationRequired
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
- uid: System.Threading.SynchronizationContext.Wait*
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: Wait
  nameWithType: SynchronizationContext.Wait
  fullName: SynchronizationContext.Wait
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
- uid: System.Threading.SynchronizationContext.WaitHelper*
  parent: System.Threading.SynchronizationContext
  isExternal: false
  name: WaitHelper
  nameWithType: SynchronizationContext.WaitHelper
  fullName: SynchronizationContext.WaitHelper
  monikers:
  - netcore-2.0
  - netframework-4.5.1
  - netframework-4.5.2
  - netframework-4.5
  - netframework-4.6.1
  - netframework-4.6.2
  - netframework-4.6
  - netframework-4.7
  - netstandard-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/SynchronizationContext.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
