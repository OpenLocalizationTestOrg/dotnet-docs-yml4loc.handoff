{"nodes":[{"content":"Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with.","nodes":[{"pos":[0,139],"content":"Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with.","nodes":[{"content":"Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with.","pos":[0,139]}]}],"pos":[1180,1320],"yaml":true},{"content":"Property metadata can be defined and used during dependency property registration when calling the <xref:System.Windows.DependencyProperty.Register%2A> method (or variations for attached properties or read-only dependency properties), or after original owner registration when calling the <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> method. <xref:System.Windows.DependencyProperty.AddOwner%2A> also takes property metadata.  \n  \n This class is a concrete base class that can be used in each of these calls. However, it is very common to specify metadata using one of the derived classes such as <xref:System.Windows.FrameworkPropertyMetadata>. These derived classes support more detailed metadata carried as Boolean property values, which are useful for either detecting or enabling some property system and layout behaviors that are only implemented at the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] framework level.  \n  \n Several properties of this class are read-write to the object model, but can only be written prior to the instance being used in a property system operation such as <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>. Each of these properties could also have been set by the constructor but are exposed so that <xref:System.Windows.PropertyMetadata.Merge%2A> method implementations can set them.  \n  \n<a name=\"xamlTextUsage_PropertyMetadata\"></a>   \n## XAML Text Usage  \n This type, and members of this type, are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].","nodes":[{"pos":[0,443],"content":"Property metadata can be defined and used during dependency property registration when calling the <xref:System.Windows.DependencyProperty.Register%2A> method (or variations for attached properties or read-only dependency properties), or after original owner registration when calling the <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> method. <xref:System.Windows.DependencyProperty.AddOwner%2A> also takes property metadata.","nodes":[{"content":"Property metadata can be defined and used during dependency property registration when calling the <xref:System.Windows.DependencyProperty.Register%2A> method (or variations for attached properties or read-only dependency properties), or after original owner registration when calling the <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> method. <xref:System.Windows.DependencyProperty.AddOwner%2A> also takes property metadata.","pos":[0,443],"nodes":[{"content":"Property metadata can be defined and used during dependency property registration when calling the <ph id=\"ph1\">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph> method (or variations for attached properties or read-only dependency properties), or after original owner registration when calling the <ph id=\"ph2\">&lt;xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A&gt;</ph> method.","pos":[0,360],"source":"Property metadata can be defined and used during dependency property registration when calling the <xref:System.Windows.DependencyProperty.Register%2A> method (or variations for attached properties or read-only dependency properties), or after original owner registration when calling the <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> method."},{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph> also takes property metadata.","pos":[361,443],"source":" <xref:System.Windows.DependencyProperty.AddOwner%2A> also takes property metadata."}]}]},{"pos":[450,966],"content":"This class is a concrete base class that can be used in each of these calls. However, it is very common to specify metadata using one of the derived classes such as <xref:System.Windows.FrameworkPropertyMetadata>. These derived classes support more detailed metadata carried as Boolean property values, which are useful for either detecting or enabling some property system and layout behaviors that are only implemented at the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] framework level.","nodes":[{"content":"This class is a concrete base class that can be used in each of these calls.","pos":[0,76]},{"content":"However, it is very common to specify metadata using one of the derived classes such as <ph id=\"ph1\">&lt;xref:System.Windows.FrameworkPropertyMetadata&gt;</ph>.","pos":[77,213],"source":" However, it is very common to specify metadata using one of the derived classes such as <xref:System.Windows.FrameworkPropertyMetadata>."},{"content":"These derived classes support more detailed metadata carried as Boolean property values, which are useful for either detecting or enabling some property system and layout behaviors that are only implemented at the <ph id=\"ph1\">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]</ph> framework level.","pos":[214,516],"source":" These derived classes support more detailed metadata carried as Boolean property values, which are useful for either detecting or enabling some property system and layout behaviors that are only implemented at the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] framework level."}]},{"pos":[973,1436],"content":"Several properties of this class are read-write to the object model, but can only be written prior to the instance being used in a property system operation such as <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>. Each of these properties could also have been set by the constructor but are exposed so that <xref:System.Windows.PropertyMetadata.Merge%2A> method implementations can set them.","nodes":[{"content":"Several properties of this class are read-write to the object model, but can only be written prior to the instance being used in a property system operation such as <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>. Each of these properties could also have been set by the constructor but are exposed so that <xref:System.Windows.PropertyMetadata.Merge%2A> method implementations can set them.","pos":[0,463],"nodes":[{"content":"Several properties of this class are read-write to the object model, but can only be written prior to the instance being used in a property system operation such as <ph id=\"ph1\">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph> or <ph id=\"ph2\">&lt;xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A&gt;</ph>.","pos":[0,285],"source":"Several properties of this class are read-write to the object model, but can only be written prior to the instance being used in a property system operation such as <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>."},{"content":"Each of these properties could also have been set by the constructor but are exposed so that <ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata.Merge%2A&gt;</ph> method implementations can set them.","pos":[286,463],"source":" Each of these properties could also have been set by the constructor but are exposed so that <xref:System.Windows.PropertyMetadata.Merge%2A> method implementations can set them."}]}]},{"pos":[1494,1509],"content":"XAML Text Usage","linkify":"XAML Text Usage","nodes":[{"content":"XAML Text Usage","pos":[0,15]}]},{"pos":[1513,1638],"content":"This type, and members of this type, are not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.","source":"This type, and members of this type, are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."}],"pos":[1331,2982],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\"></xref> class.","nodes":[{"pos":[0,93],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.PropertyMetadata\"&gt;&lt;/xref&gt;</ph> class.","source":"Initializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\"></xref> class."}],"pos":[4351,4445],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\"></xref> class with a specified default value for the dependency property that this metadata will be applied to.","nodes":[{"pos":[0,190],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.PropertyMetadata\"&gt;&lt;/xref&gt;</ph> class with a specified default value for the dependency property that this metadata will be applied to.","source":"Initializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\"></xref> class with a specified default value for the dependency property that this metadata will be applied to."}],"pos":[5562,5753],"yaml":true},{"content":"The type of the value provided for `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).  \n  \n Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified. Attempting to do so will raise an exception.","nodes":[{"pos":[0,437],"content":"The type of the value provided for `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).","nodes":[{"content":"The type of the value provided for <ph id=\"ph1\">`defaultValue`</ph> must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.","pos":[0,194],"source":"The type of the value provided for `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to."},{"content":"Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).","pos":[195,437]}]},{"pos":[444,643],"content":"Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified. Attempting to do so will raise an exception.","nodes":[{"content":"Although it is the default per the parameterless constructor, a <ph id=\"ph1\">`defaultValue`</ph> of <ph id=\"ph2\">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> cannot be specified.","pos":[0,154],"source":"Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified."},{"content":"Attempting to do so will raise an exception.","pos":[155,199]}]}],"pos":[5764,6412],"yaml":true,"extradata":"MT"},{"content":"The default value to specify for a dependency property, usually provided as a value of some specific type.","nodes":[{"pos":[0,106],"content":"The default value to specify for a dependency property, usually provided as a value of some specific type.","nodes":[{"content":"The default value to specify for a dependency property, usually provided as a value of some specific type.","pos":[0,106]}]}],"pos":[6862,6969],"yaml":true},{"content":"<code>defaultValue</code> cannot be set to the value <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>.","nodes":[{"pos":[0,119],"content":"<ph id=\"ph1\">&lt;code&gt;defaultValue&lt;/code&gt;</ph> cannot be set to the value <ph id=\"ph2\">&lt;xref href=\"System.Windows.DependencyProperty.UnsetValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>defaultValue</code> cannot be set to the value <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>."}],"pos":[7128,7248],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\"></xref> class with the specified <xref href=\"System.Windows.PropertyChangedCallback\"></xref> implementation reference.","nodes":[{"pos":[0,197],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.PropertyMetadata\"&gt;&lt;/xref&gt;</ph> class with the specified <ph id=\"ph2\">&lt;xref href=\"System.Windows.PropertyChangedCallback\"&gt;&lt;/xref&gt;</ph> implementation reference.","source":"Initializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\"></xref> class with the specified <xref href=\"System.Windows.PropertyChangedCallback\"></xref> implementation reference."}],"pos":[8353,8551],"yaml":true},{"content":"Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.","nodes":[{"pos":[0,135],"content":"Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.","nodes":[{"content":"Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.","pos":[0,135]}]}],"pos":[9110,9246],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\"></xref> class with the specified default value and <xref href=\"System.Windows.PropertyChangedCallback\"></xref> implementation reference.","nodes":[{"pos":[0,215],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.PropertyMetadata\"&gt;&lt;/xref&gt;</ph> class with the specified default value and <ph id=\"ph2\">&lt;xref href=\"System.Windows.PropertyChangedCallback\"&gt;&lt;/xref&gt;</ph> implementation reference.","source":"Initializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\"></xref> class with the specified default value and <xref href=\"System.Windows.PropertyChangedCallback\"></xref> implementation reference."}],"pos":[10485,10701],"yaml":true},{"content":"The type of the value provided `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).  \n  \n Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified. Attempting to do so will raise an exception.","nodes":[{"pos":[0,433],"content":"The type of the value provided `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).","nodes":[{"content":"The type of the value provided <ph id=\"ph1\">`defaultValue`</ph> must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.","pos":[0,190],"source":"The type of the value provided `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to."},{"content":"Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).","pos":[191,433]}]},{"pos":[440,639],"content":"Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified. Attempting to do so will raise an exception.","nodes":[{"content":"Although it is the default per the parameterless constructor, a <ph id=\"ph1\">`defaultValue`</ph> of <ph id=\"ph2\">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> cannot be specified.","pos":[0,154],"source":"Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified."},{"content":"Attempting to do so will raise an exception.","pos":[155,199]}]}],"pos":[10712,11356],"yaml":true,"extradata":"MT"},{"content":"The default value of the dependency property, usually provided as a value of some specific type.","nodes":[{"pos":[0,96],"content":"The default value of the dependency property, usually provided as a value of some specific type.","nodes":[{"content":"The default value of the dependency property, usually provided as a value of some specific type.","pos":[0,96]}]}],"pos":[11870,11967],"yaml":true},{"content":"Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.","nodes":[{"pos":[0,135],"content":"Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.","nodes":[{"content":"Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.","pos":[0,135]}]}],"pos":[12071,12207],"yaml":true},{"content":"<code>defaultValue</code> cannot be set to the value <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>.","nodes":[{"pos":[0,119],"content":"<ph id=\"ph1\">&lt;code&gt;defaultValue&lt;/code&gt;</ph> cannot be set to the value <ph id=\"ph2\">&lt;xref href=\"System.Windows.DependencyProperty.UnsetValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>defaultValue</code> cannot be set to the value <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>."}],"pos":[12366,12486],"yaml":true},{"content":"Initializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\"></xref> class with the specified default value and callbacks.","nodes":[{"pos":[0,140],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Windows.PropertyMetadata\"&gt;&lt;/xref&gt;</ph> class with the specified default value and callbacks.","source":"Initializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\"></xref> class with the specified default value and callbacks."}],"pos":[13825,13966],"yaml":true},{"content":"If you want to specify a <xref:System.Windows.CoerceValueCallback> but not a <xref:System.Windows.PropertyChangedCallback>, you can pass `null` for the `propertyChangedCallback` parameter.  \n  \n The type of the value provided for `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).  \n  \n Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified. Attempting to do so will raise an exception.","nodes":[{"pos":[0,188],"content":"If you want to specify a <ph id=\"ph1\">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph> but not a <ph id=\"ph2\">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph>, you can pass <ph id=\"ph3\">`null`</ph> for the <ph id=\"ph4\">`propertyChangedCallback`</ph> parameter.","source":"If you want to specify a <xref:System.Windows.CoerceValueCallback> but not a <xref:System.Windows.PropertyChangedCallback>, you can pass `null` for the `propertyChangedCallback` parameter."},{"pos":[195,632],"content":"The type of the value provided for `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).","nodes":[{"content":"The type of the value provided for <ph id=\"ph1\">`defaultValue`</ph> must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to.","pos":[0,194],"source":"The type of the value provided for `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to."},{"content":"Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).","pos":[195,437]}]},{"pos":[639,838],"content":"Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified. Attempting to do so will raise an exception.","nodes":[{"content":"Although it is the default per the parameterless constructor, a <ph id=\"ph1\">`defaultValue`</ph> of <ph id=\"ph2\">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> cannot be specified.","pos":[0,154],"source":"Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified."},{"content":"Attempting to do so will raise an exception.","pos":[155,199]}]}],"pos":[13977,14822],"yaml":true,"extradata":"MT"},{"content":"The default value of the dependency property, usually provided as a value of some specific type.","nodes":[{"pos":[0,96],"content":"The default value of the dependency property, usually provided as a value of some specific type.","nodes":[{"content":"The default value of the dependency property, usually provided as a value of some specific type.","pos":[0,96]}]}],"pos":[15392,15489],"yaml":true},{"content":"Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.","nodes":[{"pos":[0,135],"content":"Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.","nodes":[{"content":"Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.","pos":[0,135]}]}],"pos":[15593,15729],"yaml":true},{"content":"Reference to a handler implementation that is to be called whenever the property system calls <xref href=\"System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\"></xref> against this property.","nodes":[{"pos":[0,216],"content":"Reference to a handler implementation that is to be called whenever the property system calls <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\"&gt;&lt;/xref&gt;</ph> against this property.","source":"Reference to a handler implementation that is to be called whenever the property system calls <xref href=\"System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\"></xref> against this property."}],"pos":[15825,16042],"yaml":true},{"content":"<code>defaultValue</code> cannot be set to the value <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>.","nodes":[{"pos":[0,119],"content":"<ph id=\"ph1\">&lt;code&gt;defaultValue&lt;/code&gt;</ph> cannot be set to the value <ph id=\"ph2\">&lt;xref href=\"System.Windows.DependencyProperty.UnsetValue\"&gt;&lt;/xref&gt;</ph>.","source":"<code>defaultValue</code> cannot be set to the value <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>."}],"pos":[16201,16321],"yaml":true},{"content":"Gets or sets a reference to a <xref href=\"System.Windows.CoerceValueCallback\"></xref> implementation specified in this metadata.","nodes":[{"pos":[0,128],"content":"Gets or sets a reference to a <ph id=\"ph1\">&lt;xref href=\"System.Windows.CoerceValueCallback\"&gt;&lt;/xref&gt;</ph> implementation specified in this metadata.","source":"Gets or sets a reference to a <xref href=\"System.Windows.CoerceValueCallback\"></xref> implementation specified in this metadata."}],"pos":[17255,17384],"yaml":true},{"content":"The callbacks in property metadata are not typically public members on the containing type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata. One reason this property is exposed is so that metadata subclasses can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.CoerceValueCallback>. However, the default merge logic for a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> is to replace the previous one.  \n  \n <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> is defined in the object model as read-write. This is so <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. Attempting to set <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.","nodes":[{"pos":[0,563],"content":"The callbacks in property metadata are not typically public members on the containing type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata. One reason this property is exposed is so that metadata subclasses can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.CoerceValueCallback>. However, the default merge logic for a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> is to replace the previous one.","nodes":[{"content":"The callbacks in property metadata are not typically public members on the containing type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata. One reason this property is exposed is so that metadata subclasses can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.CoerceValueCallback>. However, the default merge logic for a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> is to replace the previous one.","pos":[0,563],"nodes":[{"content":"The callbacks in property metadata are not typically public members on the containing type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata.","pos":[0,219]},{"content":"One reason this property is exposed is so that metadata subclasses can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <ph id=\"ph1\">&lt;xref:System.Windows.CoerceValueCallback&gt;</ph>.","pos":[220,430],"source":" One reason this property is exposed is so that metadata subclasses can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.CoerceValueCallback>."},{"content":"However, the default merge logic for a <ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph> is to replace the previous one.","pos":[431,563],"source":" However, the default merge logic for a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> is to replace the previous one."}]}]},{"pos":[570,1380],"content":"<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> is defined in the object model as read-write. This is so <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. Attempting to set <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph> is defined in the object model as read-write.","pos":[0,107],"source":"<xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> is defined in the object model as read-write."},{"content":"This is so <ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph> can be adjusted after initialization of the <ph id=\"ph2\">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> object itself.","pos":[108,278],"source":" This is so <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself."},{"content":"However, once the metadata is consumed as part of a call to <ph id=\"ph1\">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and the properties are now considered immutable.","pos":[279,613],"source":" However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable."},{"content":"Attempting to set <ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A&gt;</ph> once <ph id=\"ph2\">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id=\"ph3\">`true`</ph> on this metadata instance will raise an exception.","pos":[614,810],"source":" Attempting to set <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."}]}],"pos":[17395,18780],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.CoerceValueCallback\"></xref> implementation reference.","nodes":[{"pos":[0,83],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.CoerceValueCallback\"&gt;&lt;/xref&gt;</ph> implementation reference.","source":"A <xref href=\"System.Windows.CoerceValueCallback\"></xref> implementation reference."}],"pos":[18957,19041],"yaml":true},{"content":"Cannot set a metadata property once it is applied to a dependency property operation.","nodes":[{"pos":[0,85],"content":"Cannot set a metadata property once it is applied to a dependency property operation.","nodes":[{"content":"Cannot set a metadata property once it is applied to a dependency property operation.","pos":[0,85]}]}],"pos":[19230,19316],"yaml":true},{"content":"Gets or sets the default value of the dependency property.","nodes":[{"pos":[0,58],"content":"Gets or sets the default value of the dependency property.","nodes":[{"content":"Gets or sets the default value of the dependency property.","pos":[0,58]}]}],"pos":[20230,20289],"yaml":true},{"content":"<xref:System.Windows.PropertyMetadata.DefaultValue%2A> is defined in the object model as read-write. This is so <xref:System.Windows.PropertyMetadata.DefaultValue%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. Attempting to set <xref:System.Windows.PropertyMetadata.DefaultValue%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \n  \n Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be set using either <xref:System.Windows.PropertyMetadata.DefaultValue%2A> or the constructor. Attempting to do so will raise an exception.  \n  \n<a name=\"xamlTextUsage_PropertyChangedCallback\"></a>   \n## XAML Text Usage  \n Members of this type are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].","nodes":[{"pos":[0,789],"content":"<xref:System.Windows.PropertyMetadata.DefaultValue%2A> is defined in the object model as read-write. This is so <xref:System.Windows.PropertyMetadata.DefaultValue%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. Attempting to set <xref:System.Windows.PropertyMetadata.DefaultValue%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph> is defined in the object model as read-write.","pos":[0,100],"source":"<xref:System.Windows.PropertyMetadata.DefaultValue%2A> is defined in the object model as read-write."},{"content":"This is so <ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph> can be adjusted after initialization of the <ph id=\"ph2\">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> object itself.","pos":[101,264],"source":" This is so <xref:System.Windows.PropertyMetadata.DefaultValue%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself."},{"content":"However, once the metadata is consumed as part of a call to <ph id=\"ph1\">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and the properties are now considered immutable.","pos":[265,599],"source":" However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable."},{"content":"Attempting to set <ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph> once <ph id=\"ph2\">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id=\"ph3\">`true`</ph> on this metadata instance will raise an exception.","pos":[600,789],"source":" Attempting to set <xref:System.Windows.PropertyMetadata.DefaultValue%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."}]},{"pos":[796,1076],"content":"Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be set using either <xref:System.Windows.PropertyMetadata.DefaultValue%2A> or the constructor. Attempting to do so will raise an exception.","nodes":[{"content":"Although it is the default per the parameterless constructor, a <ph id=\"ph1\">`defaultValue`</ph> of <ph id=\"ph2\">&lt;xref:System.Windows.DependencyProperty.UnsetValue&gt;</ph> cannot be set using either <ph id=\"ph3\">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph> or the constructor.","pos":[0,235],"source":"Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be set using either <xref:System.Windows.PropertyMetadata.DefaultValue%2A> or the constructor."},{"content":"Attempting to do so will raise an exception.","pos":[236,280]}]},{"pos":[1141,1156],"content":"XAML Text Usage","linkify":"XAML Text Usage","nodes":[{"content":"XAML Text Usage","pos":[0,15]}]},{"pos":[1160,1269],"content":"Members of this type are not typically used in <ph id=\"ph1\">[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]</ph>.","source":"Members of this type are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]."}],"pos":[20300,21580],"yaml":true,"extradata":"MT"},{"content":"The default value of the property. The default value on a <xref href=\"System.Windows.PropertyMetadata\"></xref> instance created with the parameterless constructor will be <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>.","nodes":[{"pos":[0,237],"content":"The default value of the property. The default value on a <xref href=\"System.Windows.PropertyMetadata\"></xref> instance created with the parameterless constructor will be <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>.","nodes":[{"content":"The default value of the property.","pos":[0,34]},{"content":"The default value on a <ph id=\"ph1\">&lt;xref href=\"System.Windows.PropertyMetadata\"&gt;&lt;/xref&gt;</ph> instance created with the parameterless constructor will be <ph id=\"ph2\">&lt;xref href=\"System.Windows.DependencyProperty.UnsetValue\"&gt;&lt;/xref&gt;</ph>.","pos":[35,237],"source":" The default value on a <xref href=\"System.Windows.PropertyMetadata\"></xref> instance created with the parameterless constructor will be <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>."}]}],"pos":[21701,21939],"yaml":true},{"content":"Cannot be set to the value <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref> once created.","nodes":[{"pos":[0,106],"content":"Cannot be set to the value <ph id=\"ph1\">&lt;xref href=\"System.Windows.DependencyProperty.UnsetValue\"&gt;&lt;/xref&gt;</ph> once created.","source":"Cannot be set to the value <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref> once created."}],"pos":[22105,22212],"yaml":true},{"content":"Cannot set a metadata property once it is applied to a dependency property operation.","nodes":[{"pos":[0,85],"content":"Cannot set a metadata property once it is applied to a dependency property operation.","nodes":[{"content":"Cannot set a metadata property once it is applied to a dependency property operation.","pos":[0,85]}]}],"pos":[22322,22408],"yaml":true},{"content":"Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance.","nodes":[{"pos":[0,153],"content":"Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance.","nodes":[{"content":"Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance.","pos":[0,153]}]}],"pos":[23276,23430],"yaml":true},{"content":"Various properties of <xref:System.Windows.PropertyMetadata>, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are defined in the object model as read-write. This is so those properties can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is applied to a dependency property as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. At the time of one of these calls, <xref:System.Windows.PropertyMetadata.OnApply%2A> is called, and the value of this property is set to `true`.","nodes":[{"pos":[0,802],"content":"Various properties of <xref:System.Windows.PropertyMetadata>, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are defined in the object model as read-write. This is so those properties can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is applied to a dependency property as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. At the time of one of these calls, <xref:System.Windows.PropertyMetadata.OnApply%2A> is called, and the value of this property is set to `true`.","nodes":[{"content":"Various properties of <ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata&gt;</ph>, such as <ph id=\"ph2\">&lt;xref:System.Windows.PropertyMetadata.DefaultValue%2A&gt;</ph>, are defined in the object model as read-write.","pos":[0,172],"source":"Various properties of <xref:System.Windows.PropertyMetadata>, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are defined in the object model as read-write."},{"content":"This is so those properties can be adjusted after initialization of the <ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> object itself.","pos":[173,298],"source":" This is so those properties can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself."},{"content":"However, once the metadata is applied to a dependency property as part of a call to <ph id=\"ph1\">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and the properties are now considered immutable.","pos":[299,657],"source":" However, once the metadata is applied to a dependency property as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable."},{"content":"At the time of one of these calls, <ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata.OnApply%2A&gt;</ph> is called, and the value of this property is set to <ph id=\"ph2\">`true`</ph>.","pos":[658,802],"source":" At the time of one of these calls, <xref:System.Windows.PropertyMetadata.OnApply%2A> is called, and the value of this property is set to `true`."}]}],"pos":[23441,24244],"yaml":true,"extradata":"MT"},{"content":"`true` if the metadata instance is immutable; otherwise, `false`.","nodes":[{"pos":[0,65],"content":"<ph id=\"ph1\">`true`</ph> if the metadata instance is immutable; otherwise, <ph id=\"ph2\">`false`</ph>.","source":"`true` if the metadata instance is immutable; otherwise, `false`."}],"pos":[24658,24726],"yaml":true},{"content":"Merges this metadata with the base metadata.","nodes":[{"pos":[0,44],"content":"Merges this metadata with the base metadata.","nodes":[{"content":"Merges this metadata with the base metadata.","pos":[0,44]}]}],"pos":[25982,26027],"yaml":true},{"content":"This method is used internally when metadata is being overridden (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method).","nodes":[{"pos":[0,135],"content":"This method is used internally when metadata is being overridden (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method).","nodes":[{"content":"This method is used internally when metadata is being overridden (<ph id=\"ph1\">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph> method).","pos":[0,135],"source":"This method is used internally when metadata is being overridden (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method)."}]}],"pos":[26038,26174],"yaml":true,"extradata":"MT"},{"content":"The base metadata to merge with this instance's values.","nodes":[{"pos":[0,55],"content":"The base metadata to merge with this instance's values.","nodes":[{"content":"The base metadata to merge with this instance's values.","pos":[0,55]}]}],"pos":[26704,26760],"yaml":true},{"content":"The dependency property to which this metadata is being applied.","nodes":[{"pos":[0,64],"content":"The dependency property to which this metadata is being applied.","nodes":[{"content":"The dependency property to which this metadata is being applied.","pos":[0,64]}]}],"pos":[26838,26903],"yaml":true},{"content":"Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.","nodes":[{"pos":[0,108],"content":"Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.","nodes":[{"content":"Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.","pos":[0,108]}]}],"pos":[28072,28181],"yaml":true},{"content":"Subclasses should assure that any mutability of the data structure of a <xref:System.Windows.PropertyMetadata> subclass should be marked as immutable once <xref:System.Windows.PropertyMetadata.OnApply%2A> is called. This will be called once the metadata is applied to a property system operation (register, add owner, override metadata).","nodes":[{"pos":[0,337],"content":"Subclasses should assure that any mutability of the data structure of a <xref:System.Windows.PropertyMetadata> subclass should be marked as immutable once <xref:System.Windows.PropertyMetadata.OnApply%2A> is called. This will be called once the metadata is applied to a property system operation (register, add owner, override metadata).","nodes":[{"content":"Subclasses should assure that any mutability of the data structure of a <xref:System.Windows.PropertyMetadata> subclass should be marked as immutable once <xref:System.Windows.PropertyMetadata.OnApply%2A> is called. This will be called once the metadata is applied to a property system operation (register, add owner, override metadata).","pos":[0,337],"nodes":[{"content":"Subclasses should assure that any mutability of the data structure of a <ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> subclass should be marked as immutable once <ph id=\"ph2\">&lt;xref:System.Windows.PropertyMetadata.OnApply%2A&gt;</ph> is called.","pos":[0,215],"source":"Subclasses should assure that any mutability of the data structure of a <xref:System.Windows.PropertyMetadata> subclass should be marked as immutable once <xref:System.Windows.PropertyMetadata.OnApply%2A> is called."},{"content":"This will be called once the metadata is applied to a property system operation (register, add owner, override metadata).","pos":[216,337]}]}]}],"pos":[28192,28530],"yaml":true,"extradata":"MT"},{"content":"The dependency property to which the metadata has been applied.","nodes":[{"pos":[0,63],"content":"The dependency property to which the metadata has been applied.","nodes":[{"content":"The dependency property to which the metadata has been applied.","pos":[0,63]}]}],"pos":[28735,28799],"yaml":true},{"content":"The type associated with this metadata if this is type-specific metadata. If this is default metadata, this value is a null reference.","nodes":[{"pos":[0,134],"content":"The type associated with this metadata if this is type-specific metadata. If this is default metadata, this value is a null reference.","nodes":[{"content":"The type associated with this metadata if this is type-specific metadata. If this is default metadata, this value is a null reference.","pos":[0,134],"nodes":[{"content":"The type associated with this metadata if this is type-specific metadata.","pos":[0,73]},{"content":"If this is default metadata, this value is a null reference.","pos":[74,134]}]}]}],"pos":[28863,28998],"yaml":true},{"content":"Gets or sets a reference to a <xref href=\"System.Windows.PropertyChangedCallback\"></xref> implementation specified in this metadata.","nodes":[{"pos":[0,132],"content":"Gets or sets a reference to a <ph id=\"ph1\">&lt;xref href=\"System.Windows.PropertyChangedCallback\"&gt;&lt;/xref&gt;</ph> implementation specified in this metadata.","source":"Gets or sets a reference to a <xref href=\"System.Windows.PropertyChangedCallback\"></xref> implementation specified in this metadata."}],"pos":[30048,30181],"yaml":true},{"content":"The callbacks in property metadata are not typically public members on the defining type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata. One reason this property is exposed is so that metadata classes can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.PropertyChangedCallback>. The default merge logic for is to maintain all <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> implementations in a table and call each of them, with callbacks established by the deepest class in hierarchy running first.  \n  \n <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> is defined in the object model as read-write. This is so <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. Attempting to set <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.","nodes":[{"pos":[0,668],"content":"The callbacks in property metadata are not typically public members on the defining type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata. One reason this property is exposed is so that metadata classes can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.PropertyChangedCallback>. The default merge logic for is to maintain all <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> implementations in a table and call each of them, with callbacks established by the deepest class in hierarchy running first.","nodes":[{"content":"The callbacks in property metadata are not typically public members on the defining type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata. One reason this property is exposed is so that metadata classes can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.PropertyChangedCallback>. The default merge logic for is to maintain all <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> implementations in a table and call each of them, with callbacks established by the deepest class in hierarchy running first.","pos":[0,668],"nodes":[{"content":"The callbacks in property metadata are not typically public members on the defining type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata.","pos":[0,217]},{"content":"One reason this property is exposed is so that metadata classes can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <ph id=\"ph1\">&lt;xref:System.Windows.PropertyChangedCallback&gt;</ph>.","pos":[218,429],"source":" One reason this property is exposed is so that metadata classes can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.PropertyChangedCallback>."},{"content":"The default merge logic for is to maintain all <ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> implementations in a table and call each of them, with callbacks established by the deepest class in hierarchy running first.","pos":[430,668],"source":" The default merge logic for is to maintain all <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> implementations in a table and call each of them, with callbacks established by the deepest class in hierarchy running first."}]}]},{"pos":[675,1497],"content":"<xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> is defined in the object model as read-write. This is so <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. Attempting to set <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> is defined in the object model as read-write.","pos":[0,111],"source":"<xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> is defined in the object model as read-write."},{"content":"This is so <ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> can be adjusted after initialization of the <ph id=\"ph2\">&lt;xref:System.Windows.PropertyMetadata&gt;</ph> object itself.","pos":[112,286],"source":" This is so <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself."},{"content":"However, once the metadata is consumed as part of a call to <ph id=\"ph1\">&lt;xref:System.Windows.DependencyProperty.Register%2A&gt;</ph>, <ph id=\"ph2\">&lt;xref:System.Windows.DependencyProperty.AddOwner%2A&gt;</ph>, or <ph id=\"ph3\">&lt;xref:System.Windows.DependencyProperty.OverrideMetadata%2A&gt;</ph>, the property system will seal that metadata instance and the properties are now considered immutable.","pos":[287,621],"source":" However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable."},{"content":"Attempting to set <ph id=\"ph1\">&lt;xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A&gt;</ph> once <ph id=\"ph2\">&lt;xref:System.Windows.PropertyMetadata.IsSealed%2A&gt;</ph> is <ph id=\"ph3\">`true`</ph> on this metadata instance will raise an exception.","pos":[622,822],"source":" Attempting to set <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception."}]}],"pos":[30192,31694],"yaml":true,"extradata":"MT"},{"content":"A <xref href=\"System.Windows.PropertyChangedCallback\"></xref> implementation reference.","nodes":[{"pos":[0,87],"content":"A <ph id=\"ph1\">&lt;xref href=\"System.Windows.PropertyChangedCallback\"&gt;&lt;/xref&gt;</ph> implementation reference.","source":"A <xref href=\"System.Windows.PropertyChangedCallback\"></xref> implementation reference."}],"pos":[31883,31971],"yaml":true},{"content":"Cannot set a metadata property once it is applied to a dependency property operation.","nodes":[{"pos":[0,85],"content":"Cannot set a metadata property once it is applied to a dependency property operation.","nodes":[{"content":"Cannot set a metadata property once it is applied to a dependency property operation.","pos":[0,85]}]}],"pos":[32164,32250],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Windows.PropertyMetadata\n  commentId: T:System.Windows.PropertyMetadata\n  id: PropertyMetadata\n  children:\n  - System.Windows.PropertyMetadata.#ctor\n  - System.Windows.PropertyMetadata.#ctor(System.Object)\n  - System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)\n  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)\n  - System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)\n  - System.Windows.PropertyMetadata.CoerceValueCallback\n  - System.Windows.PropertyMetadata.DefaultValue\n  - System.Windows.PropertyMetadata.IsSealed\n  - System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)\n  - System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)\n  - System.Windows.PropertyMetadata.PropertyChangedCallback\n  langs:\n  - csharp\n  name: PropertyMetadata\n  nameWithType: PropertyMetadata\n  fullName: System.Windows.PropertyMetadata\n  type: Class\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with.\n  remarks: \"Property metadata can be defined and used during dependency property registration when calling the <xref:System.Windows.DependencyProperty.Register%2A> method (or variations for attached properties or read-only dependency properties), or after original owner registration when calling the <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A> method. <xref:System.Windows.DependencyProperty.AddOwner%2A> also takes property metadata.  \\n  \\n This class is a concrete base class that can be used in each of these calls. However, it is very common to specify metadata using one of the derived classes such as <xref:System.Windows.FrameworkPropertyMetadata>. These derived classes support more detailed metadata carried as Boolean property values, which are useful for either detecting or enabling some property system and layout behaviors that are only implemented at the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] framework level.  \\n  \\n Several properties of this class are read-write to the object model, but can only be written prior to the instance being used in a property system operation such as <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyPropertyKey.OverrideMetadata%2A>. Each of these properties could also have been set by the constructor but are exposed so that <xref:System.Windows.PropertyMetadata.Merge%2A> method implementations can set them.  \\n  \\n<a name=\\\"xamlTextUsage_PropertyMetadata\\\"></a>   \\n## XAML Text Usage  \\n This type, and members of this type, are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].\"\n  syntax:\n    content: public class PropertyMetadata\n  inheritance:\n  - System.Object\n  derivedClasses:\n  - System.Windows.UIPropertyMetadata\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.PropertyMetadata.#ctor\n  commentId: M:System.Windows.PropertyMetadata.#ctor\n  id: '#ctor'\n  parent: System.Windows.PropertyMetadata\n  langs:\n  - csharp\n  name: PropertyMetadata()\n  nameWithType: PropertyMetadata.PropertyMetadata()\n  fullName: PropertyMetadata.PropertyMetadata()\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\"></xref> class.\n  syntax:\n    content: public PropertyMetadata ();\n    parameters: []\n  overload: System.Windows.PropertyMetadata.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.PropertyMetadata.#ctor(System.Object)\n  commentId: M:System.Windows.PropertyMetadata.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.Windows.PropertyMetadata\n  langs:\n  - csharp\n  name: PropertyMetadata(Object)\n  nameWithType: PropertyMetadata.PropertyMetadata(Object)\n  fullName: PropertyMetadata.PropertyMetadata(Object)\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\"></xref> class with a specified default value for the dependency property that this metadata will be applied to.\n  remarks: \"The type of the value provided for `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).  \\n  \\n Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified. Attempting to do so will raise an exception.\"\n  example:\n  - \"[!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  \\n[!code-csharp[PropertyMetadataAPIs#PMCtor1param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor1param)]\"\n  syntax:\n    content: public PropertyMetadata (object defaultValue);\n    parameters:\n    - id: defaultValue\n      type: System.Object\n      description: The default value to specify for a dependency property, usually provided as a value of some specific type.\n  overload: System.Windows.PropertyMetadata.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>defaultValue</code> cannot be set to the value <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)\n  commentId: M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)\n  id: '#ctor(System.Windows.PropertyChangedCallback)'\n  parent: System.Windows.PropertyMetadata\n  langs:\n  - csharp\n  name: PropertyMetadata(PropertyChangedCallback)\n  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)\n  fullName: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\"></xref> class with the specified <xref href=\"System.Windows.PropertyChangedCallback\"></xref> implementation reference.\n  remarks: ''\n  example:\n  - \"[!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  \\n[!code-csharp[PropertyMetadataAPIs#PMCtor1paramcallback](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor1paramcallback)]\"\n  syntax:\n    content: public PropertyMetadata (System.Windows.PropertyChangedCallback propertyChangedCallback);\n    parameters:\n    - id: propertyChangedCallback\n      type: System.Windows.PropertyChangedCallback\n      description: Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.\n  overload: System.Windows.PropertyMetadata.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)\n  commentId: M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)\n  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback)'\n  parent: System.Windows.PropertyMetadata\n  langs:\n  - csharp\n  name: PropertyMetadata(Object, PropertyChangedCallback)\n  nameWithType: PropertyMetadata.PropertyMetadata(Object, PropertyChangedCallback)\n  fullName: PropertyMetadata.PropertyMetadata(Object, PropertyChangedCallback)\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\"></xref> class with the specified default value and <xref href=\"System.Windows.PropertyChangedCallback\"></xref> implementation reference.\n  remarks: \"The type of the value provided `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).  \\n  \\n Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified. Attempting to do so will raise an exception.\"\n  example:\n  - \"[!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  \\n[!code-csharp[PropertyMetadataAPIs#PMCtor2param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor2param)]\"\n  syntax:\n    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback);\n    parameters:\n    - id: defaultValue\n      type: System.Object\n      description: The default value of the dependency property, usually provided as a value of some specific type.\n    - id: propertyChangedCallback\n      type: System.Windows.PropertyChangedCallback\n      description: Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.\n  overload: System.Windows.PropertyMetadata.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>defaultValue</code> cannot be set to the value <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)\n  commentId: M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)\n  id: '#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)'\n  parent: System.Windows.PropertyMetadata\n  langs:\n  - csharp\n  name: PropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)\n  nameWithType: PropertyMetadata.PropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)\n  fullName: PropertyMetadata.PropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)\n  type: Constructor\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Initializes a new instance of the <xref href=\"System.Windows.PropertyMetadata\"></xref> class with the specified default value and callbacks.\n  remarks: \"If you want to specify a <xref:System.Windows.CoerceValueCallback> but not a <xref:System.Windows.PropertyChangedCallback>, you can pass `null` for the `propertyChangedCallback` parameter.  \\n  \\n The type of the value provided for `defaultValue` must be match or be related to the type specified in the original registration of the dependency property that this metadata will be applied to. Mismatches between metadata default value type and the type of the dependency property it is being applied to can be difficult to debug, because the mismatch is not detectable during compilation (the mismatch will raise a run-time exception).  \\n  \\n Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be specified. Attempting to do so will raise an exception.\"\n  example:\n  - \"[!code-csharp[PropertyMetadataAPIs#Initpm](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#initpm)]  \\n[!code-csharp[PropertyMetadataAPIs#PMCtor3param](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#pmctor3param)]\"\n  syntax:\n    content: public PropertyMetadata (object defaultValue, System.Windows.PropertyChangedCallback propertyChangedCallback, System.Windows.CoerceValueCallback coerceValueCallback);\n    parameters:\n    - id: defaultValue\n      type: System.Object\n      description: The default value of the dependency property, usually provided as a value of some specific type.\n    - id: propertyChangedCallback\n      type: System.Windows.PropertyChangedCallback\n      description: Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.\n    - id: coerceValueCallback\n      type: System.Windows.CoerceValueCallback\n      description: Reference to a handler implementation that is to be called whenever the property system calls <xref href=\"System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)\"></xref> against this property.\n  overload: System.Windows.PropertyMetadata.#ctor*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: <code>defaultValue</code> cannot be set to the value <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.PropertyMetadata.CoerceValueCallback\n  commentId: P:System.Windows.PropertyMetadata.CoerceValueCallback\n  id: CoerceValueCallback\n  parent: System.Windows.PropertyMetadata\n  langs:\n  - csharp\n  name: CoerceValueCallback\n  nameWithType: PropertyMetadata.CoerceValueCallback\n  fullName: PropertyMetadata.CoerceValueCallback\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets a reference to a <xref href=\"System.Windows.CoerceValueCallback\"></xref> implementation specified in this metadata.\n  remarks: \"The callbacks in property metadata are not typically public members on the containing type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata. One reason this property is exposed is so that metadata subclasses can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.CoerceValueCallback>. However, the default merge logic for a <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> is to replace the previous one.  \\n  \\n <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> is defined in the object model as read-write. This is so <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. Attempting to set <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.\"\n  syntax:\n    content: public System.Windows.CoerceValueCallback CoerceValueCallback { get; set; }\n    return:\n      type: System.Windows.CoerceValueCallback\n      description: A <xref href=\"System.Windows.CoerceValueCallback\"></xref> implementation reference.\n  overload: System.Windows.PropertyMetadata.CoerceValueCallback*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Cannot set a metadata property once it is applied to a dependency property operation.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.PropertyMetadata.DefaultValue\n  commentId: P:System.Windows.PropertyMetadata.DefaultValue\n  id: DefaultValue\n  parent: System.Windows.PropertyMetadata\n  langs:\n  - csharp\n  name: DefaultValue\n  nameWithType: PropertyMetadata.DefaultValue\n  fullName: PropertyMetadata.DefaultValue\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets the default value of the dependency property.\n  remarks: \"<xref:System.Windows.PropertyMetadata.DefaultValue%2A> is defined in the object model as read-write. This is so <xref:System.Windows.PropertyMetadata.DefaultValue%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. Attempting to set <xref:System.Windows.PropertyMetadata.DefaultValue%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.  \\n  \\n Although it is the default per the parameterless constructor, a `defaultValue` of <xref:System.Windows.DependencyProperty.UnsetValue> cannot be set using either <xref:System.Windows.PropertyMetadata.DefaultValue%2A> or the constructor. Attempting to do so will raise an exception.  \\n  \\n<a name=\\\"xamlTextUsage_PropertyChangedCallback\\\"></a>   \\n## XAML Text Usage  \\n Members of this type are not typically used in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].\"\n  syntax:\n    content: public object DefaultValue { get; set; }\n    return:\n      type: System.Object\n      description: The default value of the property. The default value on a <xref href=\"System.Windows.PropertyMetadata\"></xref> instance created with the parameterless constructor will be <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref>.\n  overload: System.Windows.PropertyMetadata.DefaultValue*\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: Cannot be set to the value <xref href=\"System.Windows.DependencyProperty.UnsetValue\"></xref> once created.\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Cannot set a metadata property once it is applied to a dependency property operation.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\n- uid: System.Windows.PropertyMetadata.IsSealed\n  commentId: P:System.Windows.PropertyMetadata.IsSealed\n  id: IsSealed\n  parent: System.Windows.PropertyMetadata\n  langs:\n  - csharp\n  name: IsSealed\n  nameWithType: PropertyMetadata.IsSealed\n  fullName: PropertyMetadata.IsSealed\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance.\n  remarks: Various properties of <xref:System.Windows.PropertyMetadata>, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are defined in the object model as read-write. This is so those properties can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is applied to a dependency property as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. At the time of one of these calls, <xref:System.Windows.PropertyMetadata.OnApply%2A> is called, and the value of this property is set to `true`.\n  example:\n  - \"The following example  checks <xref:System.Windows.PropertyMetadata.IsSealed%2A> prior to a set operation of a custom metadata property.  \\n  \\n [!code-csharp[PropertyMetadataAPIs#MergeImpl](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#mergeimpl)]\"\n  syntax:\n    content: protected bool IsSealed { get; }\n    return:\n      type: System.Boolean\n      description: '`true` if the metadata instance is immutable; otherwise, `false`.'\n  overload: System.Windows.PropertyMetadata.IsSealed*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)\n  commentId: M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)\n  id: Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)\n  parent: System.Windows.PropertyMetadata\n  langs:\n  - csharp\n  name: Merge(PropertyMetadata, DependencyProperty)\n  nameWithType: PropertyMetadata.Merge(PropertyMetadata, DependencyProperty)\n  fullName: PropertyMetadata.Merge(PropertyMetadata, DependencyProperty)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Merges this metadata with the base metadata.\n  remarks: This method is used internally when metadata is being overridden (<xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method).\n  example:\n  - \"The following example implements a merge for a custom metadata type that adds an additional property to the property metadata.  \\n  \\n [!code-csharp[PropertyMetadataAPIs#MergeImpl](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertyMetadataAPIs/CSharp/Class1.cs#mergeimpl)]\"\n  syntax:\n    content: protected virtual void Merge (System.Windows.PropertyMetadata baseMetadata, System.Windows.DependencyProperty dp);\n    parameters:\n    - id: baseMetadata\n      type: System.Windows.PropertyMetadata\n      description: The base metadata to merge with this instance's values.\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The dependency property to which this metadata is being applied.\n  overload: System.Windows.PropertyMetadata.Merge*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)\n  commentId: M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)\n  id: OnApply(System.Windows.DependencyProperty,System.Type)\n  parent: System.Windows.PropertyMetadata\n  langs:\n  - csharp\n  name: OnApply(DependencyProperty, Type)\n  nameWithType: PropertyMetadata.OnApply(DependencyProperty, Type)\n  fullName: PropertyMetadata.OnApply(DependencyProperty, Type)\n  type: Method\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.\n  remarks: Subclasses should assure that any mutability of the data structure of a <xref:System.Windows.PropertyMetadata> subclass should be marked as immutable once <xref:System.Windows.PropertyMetadata.OnApply%2A> is called. This will be called once the metadata is applied to a property system operation (register, add owner, override metadata).\n  syntax:\n    content: protected virtual void OnApply (System.Windows.DependencyProperty dp, Type targetType);\n    parameters:\n    - id: dp\n      type: System.Windows.DependencyProperty\n      description: The dependency property to which the metadata has been applied.\n    - id: targetType\n      type: System.Type\n      description: The type associated with this metadata if this is type-specific metadata. If this is default metadata, this value is a null reference.\n  overload: System.Windows.PropertyMetadata.OnApply*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n  ms.technology:\n  - dotnet-wpf\n  author: stevehoag\n  ms.author: shoag\n  manager: wpickett\n- uid: System.Windows.PropertyMetadata.PropertyChangedCallback\n  commentId: P:System.Windows.PropertyMetadata.PropertyChangedCallback\n  id: PropertyChangedCallback\n  parent: System.Windows.PropertyMetadata\n  langs:\n  - csharp\n  name: PropertyChangedCallback\n  nameWithType: PropertyMetadata.PropertyChangedCallback\n  fullName: PropertyMetadata.PropertyChangedCallback\n  type: Property\n  assemblies:\n  - WindowsBase\n  namespace: System.Windows\n  summary: Gets or sets a reference to a <xref href=\"System.Windows.PropertyChangedCallback\"></xref> implementation specified in this metadata.\n  remarks: \"The callbacks in property metadata are not typically public members on the defining type, so the value of this property is not important for most scenarios that just consume an existing dependency property's metadata. One reason this property is exposed is so that metadata classes can perform their desired merge logic if both base metadata and overriding/adding metadata specify a <xref:System.Windows.PropertyChangedCallback>. The default merge logic for is to maintain all <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> implementations in a table and call each of them, with callbacks established by the deepest class in hierarchy running first.  \\n  \\n <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> is defined in the object model as read-write. This is so <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> can be adjusted after initialization of the <xref:System.Windows.PropertyMetadata> object itself. However, once the metadata is consumed as part of a call to <xref:System.Windows.DependencyProperty.Register%2A>, <xref:System.Windows.DependencyProperty.AddOwner%2A>, or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A>, the property system will seal that metadata instance and the properties are now considered immutable. Attempting to set <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> once <xref:System.Windows.PropertyMetadata.IsSealed%2A> is `true` on this metadata instance will raise an exception.\"\n  syntax:\n    content: public System.Windows.PropertyChangedCallback PropertyChangedCallback { get; set; }\n    return:\n      type: System.Windows.PropertyChangedCallback\n      description: A <xref href=\"System.Windows.PropertyChangedCallback\"></xref> implementation reference.\n  overload: System.Windows.PropertyMetadata.PropertyChangedCallback*\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: Cannot set a metadata property once it is applied to a dependency property operation.\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n  ms.technology:\n  - dotnet-wpf\n  ms.author: kempb\n  manager: ghogen\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  nameWithType: ArgumentException\n  fullName: System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  nameWithType: InvalidOperationException\n  fullName: System.InvalidOperationException\n- uid: System.Windows.PropertyMetadata.#ctor\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: PropertyMetadata()\n  nameWithType: PropertyMetadata.PropertyMetadata()\n  fullName: PropertyMetadata.PropertyMetadata()\n- uid: System.Windows.PropertyMetadata.#ctor(System.Object)\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: PropertyMetadata(Object)\n  nameWithType: PropertyMetadata.PropertyMetadata(Object)\n  fullName: PropertyMetadata.PropertyMetadata(Object)\n- uid: System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: PropertyMetadata(PropertyChangedCallback)\n  nameWithType: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)\n  fullName: PropertyMetadata.PropertyMetadata(PropertyChangedCallback)\n- uid: System.Windows.PropertyChangedCallback\n  parent: System.Windows\n  isExternal: false\n  name: PropertyChangedCallback\n  nameWithType: PropertyChangedCallback\n  fullName: System.Windows.PropertyChangedCallback\n- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: PropertyMetadata(Object, PropertyChangedCallback)\n  nameWithType: PropertyMetadata.PropertyMetadata(Object, PropertyChangedCallback)\n  fullName: PropertyMetadata.PropertyMetadata(Object, PropertyChangedCallback)\n- uid: System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: PropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)\n  nameWithType: PropertyMetadata.PropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)\n  fullName: PropertyMetadata.PropertyMetadata(Object, PropertyChangedCallback, CoerceValueCallback)\n- uid: System.Windows.CoerceValueCallback\n  parent: System.Windows\n  isExternal: false\n  name: CoerceValueCallback\n  nameWithType: CoerceValueCallback\n  fullName: System.Windows.CoerceValueCallback\n- uid: System.Windows.PropertyMetadata.CoerceValueCallback\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: CoerceValueCallback\n  nameWithType: PropertyMetadata.CoerceValueCallback\n  fullName: PropertyMetadata.CoerceValueCallback\n- uid: System.Windows.PropertyMetadata.DefaultValue\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: DefaultValue\n  nameWithType: PropertyMetadata.DefaultValue\n  fullName: PropertyMetadata.DefaultValue\n- uid: System.Windows.PropertyMetadata.IsSealed\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: IsSealed\n  nameWithType: PropertyMetadata.IsSealed\n  fullName: PropertyMetadata.IsSealed\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: Merge(PropertyMetadata, DependencyProperty)\n  nameWithType: PropertyMetadata.Merge(PropertyMetadata, DependencyProperty)\n  fullName: PropertyMetadata.Merge(PropertyMetadata, DependencyProperty)\n- uid: System.Windows.PropertyMetadata\n  parent: System.Windows\n  isExternal: false\n  name: PropertyMetadata\n  nameWithType: PropertyMetadata\n  fullName: System.Windows.PropertyMetadata\n- uid: System.Windows.DependencyProperty\n  parent: System.Windows\n  isExternal: false\n  name: DependencyProperty\n  nameWithType: DependencyProperty\n  fullName: System.Windows.DependencyProperty\n- uid: System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: OnApply(DependencyProperty, Type)\n  nameWithType: PropertyMetadata.OnApply(DependencyProperty, Type)\n  fullName: PropertyMetadata.OnApply(DependencyProperty, Type)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  nameWithType: Type\n  fullName: System.Type\n- uid: System.Windows.PropertyMetadata.PropertyChangedCallback\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: PropertyChangedCallback\n  nameWithType: PropertyMetadata.PropertyChangedCallback\n  fullName: PropertyMetadata.PropertyChangedCallback\n- uid: System.Windows.PropertyMetadata.#ctor*\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: PropertyMetadata\n  nameWithType: PropertyMetadata.PropertyMetadata\n  fullName: PropertyMetadata.PropertyMetadata\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n- uid: System.Windows.PropertyMetadata.CoerceValueCallback*\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: CoerceValueCallback\n  nameWithType: PropertyMetadata.CoerceValueCallback\n  fullName: PropertyMetadata.CoerceValueCallback\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n- uid: System.Windows.PropertyMetadata.DefaultValue*\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: DefaultValue\n  nameWithType: PropertyMetadata.DefaultValue\n  fullName: PropertyMetadata.DefaultValue\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n- uid: System.Windows.PropertyMetadata.IsSealed*\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: IsSealed\n  nameWithType: PropertyMetadata.IsSealed\n  fullName: PropertyMetadata.IsSealed\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n- uid: System.Windows.PropertyMetadata.Merge*\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: Merge\n  nameWithType: PropertyMetadata.Merge\n  fullName: PropertyMetadata.Merge\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n- uid: System.Windows.PropertyMetadata.OnApply*\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: OnApply\n  nameWithType: PropertyMetadata.OnApply\n  fullName: PropertyMetadata.OnApply\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n- uid: System.Windows.PropertyMetadata.PropertyChangedCallback*\n  parent: System.Windows.PropertyMetadata\n  isExternal: false\n  name: PropertyChangedCallback\n  nameWithType: PropertyMetadata.PropertyChangedCallback\n  fullName: PropertyMetadata.PropertyChangedCallback\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Windows/PropertyMetadata.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}