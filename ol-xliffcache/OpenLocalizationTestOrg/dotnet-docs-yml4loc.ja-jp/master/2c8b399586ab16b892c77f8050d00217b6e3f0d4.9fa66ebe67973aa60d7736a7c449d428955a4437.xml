{"nodes":[{"content":"Represents a point at which a workflow or activity can passively wait to be resumed.","nodes":[{"pos":[0,84],"content":"Represents a point at which a workflow or activity can passively wait to be resumed.","nodes":[{"content":"Represents a point at which a workflow or activity can passively wait to be resumed.","pos":[0,84]}]}],"pos":[622,707],"yaml":true},{"content":"When an activity creates a <xref:System.Activities.Bookmark>, it becomes idle and waits for the <xref:System.Activities.Bookmark> to be resumed. If there are other activities in parallel with the activity that created the <xref:System.Activities.Bookmark>, they will be scheduled for execution.  \n  \n Bookmarks can be resumed by the host application using one of the <xref:System.Activities.WorkflowApplication.ResumeBookmark%2A> overloads.  \n  \n [!INCLUDE[crabout](~/includes/crabout-md.md)] bookmarks, see [Using WorkflowInvoker and WorkflowApplication](~/docs/framework/windows-workflow-foundation/using-workflowinvoker-and-workflowapplication.md), [Bookmarks](~/docs/framework/windows-workflow-foundation/bookmarks.md), and the [Bookmarks &#91; WF Samples&#93;](~/docs/framework/windows-workflow-foundation/samples/bookmarks.md) and [Wait For Input Activity &#91;WF Samples&#93;](~/docs/framework/windows-workflow-foundation/samples/wait-for-input-activity.md) samples.","nodes":[{"pos":[0,294],"content":"When an activity creates a <xref:System.Activities.Bookmark>, it becomes idle and waits for the <xref:System.Activities.Bookmark> to be resumed. If there are other activities in parallel with the activity that created the <xref:System.Activities.Bookmark>, they will be scheduled for execution.","nodes":[{"content":"When an activity creates a <xref:System.Activities.Bookmark>, it becomes idle and waits for the <xref:System.Activities.Bookmark> to be resumed. If there are other activities in parallel with the activity that created the <xref:System.Activities.Bookmark>, they will be scheduled for execution.","pos":[0,294],"nodes":[{"content":"When an activity creates a <ph id=\"ph1\">&lt;xref:System.Activities.Bookmark&gt;</ph>, it becomes idle and waits for the <ph id=\"ph2\">&lt;xref:System.Activities.Bookmark&gt;</ph> to be resumed.","pos":[0,144],"source":"When an activity creates a <xref:System.Activities.Bookmark>, it becomes idle and waits for the <xref:System.Activities.Bookmark> to be resumed."},{"content":"If there are other activities in parallel with the activity that created the <ph id=\"ph1\">&lt;xref:System.Activities.Bookmark&gt;</ph>, they will be scheduled for execution.","pos":[145,294],"source":" If there are other activities in parallel with the activity that created the <xref:System.Activities.Bookmark>, they will be scheduled for execution."}]}]},{"pos":[301,440],"content":"Bookmarks can be resumed by the host application using one of the <xref:System.Activities.WorkflowApplication.ResumeBookmark%2A> overloads.","nodes":[{"content":"Bookmarks can be resumed by the host application using one of the <ph id=\"ph1\">&lt;xref:System.Activities.WorkflowApplication.ResumeBookmark%2A&gt;</ph> overloads.","pos":[0,139],"source":"Bookmarks can be resumed by the host application using one of the <xref:System.Activities.WorkflowApplication.ResumeBookmark%2A> overloads."}]},{"pos":[447,973],"content":"<ph id=\"ph1\">[!INCLUDE[crabout](~/includes/crabout-md.md)]</ph> bookmarks, see <bpt id=\"p1\">[</bpt>Using WorkflowInvoker and WorkflowApplication<ept id=\"p1\">](~/docs/framework/windows-workflow-foundation/using-workflowinvoker-and-workflowapplication.md)</ept>, <bpt id=\"p2\">[</bpt>Bookmarks<ept id=\"p2\">](~/docs/framework/windows-workflow-foundation/bookmarks.md)</ept>, and the <bpt id=\"p3\">[</bpt>Bookmarks &amp;#91; WF Samples&amp;#93;<ept id=\"p3\">](~/docs/framework/windows-workflow-foundation/samples/bookmarks.md)</ept> and <bpt id=\"p4\">[</bpt>Wait For Input Activity &amp;#91;WF Samples&amp;#93;<ept id=\"p4\">](~/docs/framework/windows-workflow-foundation/samples/wait-for-input-activity.md)</ept> samples.","source":"[!INCLUDE[crabout](~/includes/crabout-md.md)] bookmarks, see [Using WorkflowInvoker and WorkflowApplication](~/docs/framework/windows-workflow-foundation/using-workflowinvoker-and-workflowapplication.md), [Bookmarks](~/docs/framework/windows-workflow-foundation/bookmarks.md), and the [Bookmarks &#91; WF Samples&#93;](~/docs/framework/windows-workflow-foundation/samples/bookmarks.md) and [Wait For Input Activity &#91;WF Samples&#93;](~/docs/framework/windows-workflow-foundation/samples/wait-for-input-activity.md) samples."}],"pos":[718,1698],"yaml":true,"extradata":"MT"},{"content":"Initializes a new instance of the <xref href=\"System.Activities.Bookmark\"></xref> class using the specified name.","nodes":[{"pos":[0,113],"content":"Initializes a new instance of the <ph id=\"ph1\">&lt;xref href=\"System.Activities.Bookmark\"&gt;&lt;/xref&gt;</ph> class using the specified name.","source":"Initializes a new instance of the <xref href=\"System.Activities.Bookmark\"></xref> class using the specified name."}],"pos":[7111,7225],"yaml":true},{"content":"A name that identifies the bookmark.","nodes":[{"pos":[0,36],"content":"A name that identifies the bookmark.","nodes":[{"content":"A name that identifies the bookmark.","pos":[0,36]}]}],"pos":[7355,7392],"yaml":true},{"content":"Determines whether the current <xref href=\"System.Activities.Bookmark\"></xref> and the specified <xref href=\"System.Activities.Bookmark\"></xref> refer to the same continuation point in a workflow.","nodes":[{"pos":[0,196],"content":"Determines whether the current <ph id=\"ph1\">&lt;xref href=\"System.Activities.Bookmark\"&gt;&lt;/xref&gt;</ph> and the specified <ph id=\"ph2\">&lt;xref href=\"System.Activities.Bookmark\"&gt;&lt;/xref&gt;</ph> refer to the same continuation point in a workflow.","source":"Determines whether the current <xref href=\"System.Activities.Bookmark\"></xref> and the specified <xref href=\"System.Activities.Bookmark\"></xref> refer to the same continuation point in a workflow."}],"pos":[8419,8616],"yaml":true},{"content":"The bookmark to compare.","nodes":[{"pos":[0,24],"content":"The bookmark to compare.","nodes":[{"content":"The bookmark to compare.","pos":[0,24]}]}],"pos":[8784,8809],"yaml":true},{"content":"`true` if the <xref href=\"System.Activities.Bookmark\"></xref> objects are equal; otherwise, `false`.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Activities.Bookmark\"&gt;&lt;/xref&gt;</ph> objects are equal; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Activities.Bookmark\"></xref> objects are equal; otherwise, `false`."}],"pos":[8867,8970],"yaml":true},{"content":"Determines whether the current <xref href=\"System.Activities.Bookmark\"></xref> and the specified object refer to the same continuation point in a workflow.","nodes":[{"pos":[0,155],"content":"Determines whether the current <ph id=\"ph1\">&lt;xref href=\"System.Activities.Bookmark\"&gt;&lt;/xref&gt;</ph> and the specified object refer to the same continuation point in a workflow.","source":"Determines whether the current <xref href=\"System.Activities.Bookmark\"></xref> and the specified object refer to the same continuation point in a workflow."}],"pos":[9953,10109],"yaml":true},{"content":"The object to compare.","nodes":[{"pos":[0,22],"content":"The object to compare.","nodes":[{"content":"The object to compare.","pos":[0,22]}]}],"pos":[10249,10272],"yaml":true},{"content":"`true` if the <xref href=\"System.Activities.Bookmark\"></xref> objects are equal; otherwise, `false`.","nodes":[{"pos":[0,100],"content":"<ph id=\"ph1\">`true`</ph> if the <ph id=\"ph2\">&lt;xref href=\"System.Activities.Bookmark\"&gt;&lt;/xref&gt;</ph> objects are equal; otherwise, <ph id=\"ph3\">`false`</ph>.","source":"`true` if the <xref href=\"System.Activities.Bookmark\"></xref> objects are equal; otherwise, `false`."}],"pos":[10330,10433],"yaml":true},{"content":"Returns a unique identifier for this <xref href=\"System.Activities.Bookmark\"></xref> instance.","nodes":[{"pos":[0,94],"content":"Returns a unique identifier for this <ph id=\"ph1\">&lt;xref href=\"System.Activities.Bookmark\"&gt;&lt;/xref&gt;</ph> instance.","source":"Returns a unique identifier for this <xref href=\"System.Activities.Bookmark\"></xref> instance."}],"pos":[11383,11478],"yaml":true},{"content":"The unique identifier of this <xref href=\"System.Activities.Bookmark\"></xref> instance.","nodes":[{"pos":[0,87],"content":"The unique identifier of this <ph id=\"ph1\">&lt;xref href=\"System.Activities.Bookmark\"&gt;&lt;/xref&gt;</ph> instance.","source":"The unique identifier of this <xref href=\"System.Activities.Bookmark\"></xref> instance."}],"pos":[11612,11700],"yaml":true},{"content":"Gets the bookmark name.","nodes":[{"pos":[0,23],"content":"Gets the bookmark name.","nodes":[{"content":"Gets the bookmark name.","pos":[0,23]}]}],"pos":[12609,12633],"yaml":true},{"content":"The bookmark name.","nodes":[{"pos":[0,18],"content":"The bookmark name.","nodes":[{"content":"The bookmark name.","pos":[0,18]}]}],"pos":[12741,12760],"yaml":true},{"content":"Returns the bookmark name for a named bookmark or the bookmark ID for an unnamed bookmark.","nodes":[{"pos":[0,90],"content":"Returns the bookmark name for a named bookmark or the bookmark ID for an unnamed bookmark.","nodes":[{"content":"Returns the bookmark name for a named bookmark or the bookmark ID for an unnamed bookmark.","pos":[0,90]}]}],"pos":[13690,13781],"yaml":true},{"content":"The bookmark name or ID.","nodes":[{"pos":[0,24],"content":"The bookmark name or ID.","nodes":[{"content":"The bookmark name or ID.","pos":[0,24]}]}],"pos":[13916,13941],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Activities.Bookmark\n  commentId: T:System.Activities.Bookmark\n  id: Bookmark\n  children:\n  - System.Activities.Bookmark.#ctor(System.String)\n  - System.Activities.Bookmark.Equals(System.Activities.Bookmark)\n  - System.Activities.Bookmark.Equals(System.Object)\n  - System.Activities.Bookmark.GetHashCode\n  - System.Activities.Bookmark.Name\n  - System.Activities.Bookmark.ToString\n  langs:\n  - csharp\n  name: Bookmark\n  nameWithType: Bookmark\n  fullName: System.Activities.Bookmark\n  type: Class\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Represents a point at which a workflow or activity can passively wait to be resumed.\n  remarks: \"When an activity creates a <xref:System.Activities.Bookmark>, it becomes idle and waits for the <xref:System.Activities.Bookmark> to be resumed. If there are other activities in parallel with the activity that created the <xref:System.Activities.Bookmark>, they will be scheduled for execution.  \\n  \\n Bookmarks can be resumed by the host application using one of the <xref:System.Activities.WorkflowApplication.ResumeBookmark%2A> overloads.  \\n  \\n [!INCLUDE[crabout](~/includes/crabout-md.md)] bookmarks, see [Using WorkflowInvoker and WorkflowApplication](~/docs/framework/windows-workflow-foundation/using-workflowinvoker-and-workflowapplication.md), [Bookmarks](~/docs/framework/windows-workflow-foundation/bookmarks.md), and the [Bookmarks &#91; WF Samples&#93;](~/docs/framework/windows-workflow-foundation/samples/bookmarks.md) and [Wait For Input Activity &#91;WF Samples&#93;](~/docs/framework/windows-workflow-foundation/samples/wait-for-input-activity.md) samples.\"\n  example:\n  - \"In the following example, a `ReadLine` activity is created. When executed, the `ReadLine` activity creates a <xref:System.Activities.Bookmark>, registers a callback, and then waits for the <xref:System.Activities.Bookmark> to be resumed. When it is resumed, the `ReadLine` activity assigns the data that was passed with the <xref:System.Activities.Bookmark> to its <xref:System.Activities.Activity%601.Result%2A> argument.  \\n  \\n```csharp  \\npublic sealed class ReadLine : NativeActivity<string>  \\n{  \\n    [RequiredArgument]  \\n    public  InArgument<string> BookmarkName { get; set; }  \\n  \\n    protected override void Execute(NativeActivityContext context)  \\n    {  \\n        // Create a Bookmark and wait for it to be resumed.  \\n        context.CreateBookmark(BookmarkName.Get(context),   \\n            new BookmarkCallback(OnResumeBookmark));  \\n    }  \\n  \\n    // NativeActivity derived activities that do asynchronous operations by calling   \\n    // one of the CreateBookmark overloads defined on System.Activities.NativeActivityContext   \\n    // must override the CanInduceIdle property and return true.  \\n    protected override bool CanInduceIdle  \\n    {  \\n        get { return true; }  \\n    }  \\n  \\n    public void OnResumeBookmark(NativeActivityContext context, Bookmark bookmark, object obj)  \\n    {  \\n        // When the Bookmark is resumed, assign its value to  \\n        // the Result argument.  \\n        Result.Set(context, (string)obj);  \\n    }  \\n}  \\n```  \\n  \\n In the following example, a workflow is created that uses the `ReadLine` activity to gather the user’s name and display it to the console window. The host application performs the actual work of gathering the input and passes it to the workflow by resuming the <xref:System.Activities.Bookmark>.  \\n  \\n```csharp  \\nVariable<string> name = new Variable<string>  \\n{  \\n    Name = \\\"name\\\"  \\n};  \\n  \\nActivity wf = new Sequence  \\n{  \\n    Variables =  \\n    {  \\n        name  \\n    },  \\n    Activities =  \\n    {  \\n        new WriteLine()  \\n        {  \\n            Text = \\\"What is your name?\\\"  \\n        },  \\n        new ReadLine()  \\n        {  \\n            BookmarkName = \\\"UserName\\\",  \\n            Result = name  \\n        },  \\n        new WriteLine()  \\n        {  \\n            Text = new InArgument<string>((env) => \\\"Hello, \\\" + name.Get(env))  \\n        }  \\n    }  \\n};  \\n  \\nAutoResetEvent syncEvent = new AutoResetEvent(false);  \\n  \\n// Create the WorkflowApplication using the desired  \\n// workflow definition.  \\nWorkflowApplication wfApp = new WorkflowApplication(wf);  \\n  \\n// Handle the desired lifecycle events.  \\nwfApp.Completed = delegate(WorkflowApplicationCompletedEventArgs e)  \\n{  \\n    // Signal the host that the workflow is complete.  \\n    syncEvent.Set();  \\n};  \\n  \\n// Start the workflow.  \\nwfApp.Run();  \\n  \\n// Collect the user's name and resume the bookmark.  \\n// Bookmark resumption only occurs when the workflow  \\n// is idle. If a call to ResumeBookmark is made and the workflow  \\n// is not idle, ResumeBookmark blocks until the workflow becomes  \\n// idle before resuming the bookmark.  \\nwfApp.ResumeBookmark(\\\"UserName\\\", Console.ReadLine());  \\n  \\n// Wait for Completed to arrive and signal that  \\n// the workflow is complete.  \\nsyncEvent.WaitOne();  \\n```  \\n  \\n When the `ReadLine` activity is executed, it creates a <xref:System.Activities.Bookmark> named `UserName` and then waits for the bookmark to be resumed. The host collects the desired data and then resumes the <xref:System.Activities.Bookmark>. The workflow resumes, displays the name, and then completes. Note that no synchronization code is required with regard to resuming the bookmark. A <xref:System.Activities.Bookmark> can only be resumed when the workflow is idle, and if the workflow is not idle, the call to <xref:System.Activities.WorkflowApplication.ResumeBookmark%2A> blocks until the workflow becomes idle.\"\n  syntax:\n    content: >-\n      [System.Runtime.Serialization.DataContract]\n\n      public class Bookmark : IEquatable<System.Activities.Bookmark>\n  inheritance:\n  - System.Object\n  implements:\n  - System.IEquatable{System.Activities.Bookmark}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  attributes:\n  - type: System.Runtime.Serialization.DataContractAttribute\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/Bookmark.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Bookmark.#ctor(System.String)\n  commentId: M:System.Activities.Bookmark.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Activities.Bookmark\n  langs:\n  - csharp\n  name: Bookmark(String)\n  nameWithType: Bookmark.Bookmark(String)\n  fullName: Bookmark.Bookmark(String)\n  type: Constructor\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Initializes a new instance of the <xref href=\"System.Activities.Bookmark\"></xref> class using the specified name.\n  syntax:\n    content: public Bookmark (string name);\n    parameters:\n    - id: name\n      type: System.String\n      description: A name that identifies the bookmark.\n  overload: System.Activities.Bookmark.#ctor*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/Bookmark.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Bookmark.Equals(System.Activities.Bookmark)\n  commentId: M:System.Activities.Bookmark.Equals(System.Activities.Bookmark)\n  id: Equals(System.Activities.Bookmark)\n  parent: System.Activities.Bookmark\n  langs:\n  - csharp\n  name: Equals(Bookmark)\n  nameWithType: Bookmark.Equals(Bookmark)\n  fullName: Bookmark.Equals(Bookmark)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Determines whether the current <xref href=\"System.Activities.Bookmark\"></xref> and the specified <xref href=\"System.Activities.Bookmark\"></xref> refer to the same continuation point in a workflow.\n  syntax:\n    content: public bool Equals (System.Activities.Bookmark other);\n    parameters:\n    - id: other\n      type: System.Activities.Bookmark\n      description: The bookmark to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Activities.Bookmark\"></xref> objects are equal; otherwise, `false`.'\n  overload: System.Activities.Bookmark.Equals*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/Bookmark.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Bookmark.Equals(System.Object)\n  commentId: M:System.Activities.Bookmark.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Activities.Bookmark\n  langs:\n  - csharp\n  name: Equals(Object)\n  nameWithType: Bookmark.Equals(Object)\n  fullName: Bookmark.Equals(Object)\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Determines whether the current <xref href=\"System.Activities.Bookmark\"></xref> and the specified object refer to the same continuation point in a workflow.\n  syntax:\n    content: public override bool Equals (object obj);\n    parameters:\n    - id: obj\n      type: System.Object\n      description: The object to compare.\n    return:\n      type: System.Boolean\n      description: '`true` if the <xref href=\"System.Activities.Bookmark\"></xref> objects are equal; otherwise, `false`.'\n  overload: System.Activities.Bookmark.Equals*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/Bookmark.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Bookmark.GetHashCode\n  commentId: M:System.Activities.Bookmark.GetHashCode\n  id: GetHashCode\n  parent: System.Activities.Bookmark\n  langs:\n  - csharp\n  name: GetHashCode()\n  nameWithType: Bookmark.GetHashCode()\n  fullName: Bookmark.GetHashCode()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Returns a unique identifier for this <xref href=\"System.Activities.Bookmark\"></xref> instance.\n  syntax:\n    content: public override int GetHashCode ();\n    parameters: []\n    return:\n      type: System.Int32\n      description: The unique identifier of this <xref href=\"System.Activities.Bookmark\"></xref> instance.\n  overload: System.Activities.Bookmark.GetHashCode*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/Bookmark.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Bookmark.Name\n  commentId: P:System.Activities.Bookmark.Name\n  id: Name\n  parent: System.Activities.Bookmark\n  langs:\n  - csharp\n  name: Name\n  nameWithType: Bookmark.Name\n  fullName: Bookmark.Name\n  type: Property\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Gets the bookmark name.\n  syntax:\n    content: public string Name { get; }\n    return:\n      type: System.String\n      description: The bookmark name.\n  overload: System.Activities.Bookmark.Name*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/Bookmark.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\n- uid: System.Activities.Bookmark.ToString\n  commentId: M:System.Activities.Bookmark.ToString\n  id: ToString\n  parent: System.Activities.Bookmark\n  langs:\n  - csharp\n  name: ToString()\n  nameWithType: Bookmark.ToString()\n  fullName: Bookmark.ToString()\n  type: Method\n  assemblies:\n  - System.Activities\n  namespace: System.Activities\n  summary: Returns the bookmark name for a named bookmark or the bookmark ID for an unnamed bookmark.\n  syntax:\n    content: public override string ToString ();\n    parameters: []\n    return:\n      type: System.String\n      description: The bookmark name or ID.\n  overload: System.Activities.Bookmark.ToString*\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/Bookmark.xml\n  ms.technology:\n  - dotnet-standard\n  author: Erikre\n  ms.author: erikre\n  manager: erikre\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Activities.Bookmark.#ctor(System.String)\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: Bookmark(String)\n  nameWithType: Bookmark.Bookmark(String)\n  fullName: Bookmark.Bookmark(String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: System.Activities.Bookmark.Equals(System.Activities.Bookmark)\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: Equals(Bookmark)\n  nameWithType: Bookmark.Equals(Bookmark)\n  fullName: Bookmark.Equals(Bookmark)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Activities.Bookmark\n  parent: System.Activities\n  isExternal: false\n  name: Bookmark\n  nameWithType: Bookmark\n  fullName: System.Activities.Bookmark\n- uid: System.Activities.Bookmark.Equals(System.Object)\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Bookmark.Equals(Object)\n  fullName: Bookmark.Equals(Object)\n- uid: System.Activities.Bookmark.GetHashCode\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Bookmark.GetHashCode()\n  fullName: Bookmark.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Activities.Bookmark.Name\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: Name\n  nameWithType: Bookmark.Name\n  fullName: Bookmark.Name\n- uid: System.Activities.Bookmark.ToString\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: ToString()\n  nameWithType: Bookmark.ToString()\n  fullName: Bookmark.ToString()\n- uid: System.Activities.Bookmark.#ctor*\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: Bookmark\n  nameWithType: Bookmark.Bookmark\n  fullName: Bookmark.Bookmark\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/Bookmark.xml\n- uid: System.Activities.Bookmark.Equals*\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: Equals\n  nameWithType: Bookmark.Equals\n  fullName: Bookmark.Equals\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/Bookmark.xml\n- uid: System.Activities.Bookmark.GetHashCode*\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: GetHashCode\n  nameWithType: Bookmark.GetHashCode\n  fullName: Bookmark.GetHashCode\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/Bookmark.xml\n- uid: System.Activities.Bookmark.Name*\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: Name\n  nameWithType: Bookmark.Name\n  fullName: Bookmark.Name\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/Bookmark.xml\n- uid: System.Activities.Bookmark.ToString*\n  parent: System.Activities.Bookmark\n  isExternal: false\n  name: ToString\n  nameWithType: Bookmark.ToString\n  fullName: Bookmark.ToString\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Activities/Bookmark.xml\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.IEquatable`1\n  name: IEquatable<T>\n  nameWithType: IEquatable<T>\n  fullName: System.IEquatable<T>\n- uid: System.IEquatable{System.Activities.Bookmark}\n  parent: System\n  isExternal: false\n  name: IEquatable<Bookmark>\n  nameWithType: IEquatable<Bookmark>\n  fullName: System.IEquatable<System.Activities.Bookmark>\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    nameWithType: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.Activities.Bookmark\n    name: Bookmark\n    nameWithType: Bookmark\n    fullName: System.Activities.Bookmark\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n"}