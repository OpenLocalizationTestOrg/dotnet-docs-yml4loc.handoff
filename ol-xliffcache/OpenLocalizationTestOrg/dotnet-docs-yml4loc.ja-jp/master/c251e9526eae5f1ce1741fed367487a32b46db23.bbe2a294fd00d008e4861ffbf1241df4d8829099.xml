{"nodes":[{"content":"Specifies the kinds of item attributes in the conceptual model.","nodes":[{"pos":[0,63],"content":"Specifies the kinds of item attributes in the conceptual model.","nodes":[{"content":"Specifies the kinds of item attributes in the conceptual model.","pos":[0,63]}]}],"pos":[484,548],"yaml":true},{"content":"For more information, see [Extended Property (CSDL)](http://msdn.microsoft.com/en-us/697e2fb1-8977-4aa6-a1ef-236950e91fd1).","nodes":[{"pos":[0,123],"content":"For more information, see <bpt id=\"p1\">[</bpt>Extended Property (CSDL)<ept id=\"p1\">](http://msdn.microsoft.com/en-us/697e2fb1-8977-4aa6-a1ef-236950e91fd1)</ept>.","source":"For more information, see [Extended Property (CSDL)](http://msdn.microsoft.com/en-us/697e2fb1-8977-4aa6-a1ef-236950e91fd1)."}],"pos":[559,683],"yaml":true,"extradata":"MT"},{"content":"An enumeration member indicating that an item attribute is <code>Extended</code>.","nodes":[{"pos":[0,81],"content":"An enumeration member indicating that an item attribute is <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">Extended</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An enumeration member indicating that an item attribute is <code>Extended</code>."}],"pos":[5782,5864],"yaml":true},{"content":"An enumeration member indicating that an item attribute is <code>System</code>.","nodes":[{"pos":[0,79],"content":"An enumeration member indicating that an item attribute is <bpt id=\"p1\">&lt;code&gt;</bpt><ph id=\"ph1\">System</ph><ept id=\"p1\">&lt;/code&gt;</ept>.","source":"An enumeration member indicating that an item attribute is <code>System</code>."}],"pos":[6814,6894],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Data.Metadata.Edm.PropertyKind\n  commentId: T:System.Data.Metadata.Edm.PropertyKind\n  id: PropertyKind\n  children:\n  - System.Data.Metadata.Edm.PropertyKind.Extended\n  - System.Data.Metadata.Edm.PropertyKind.System\n  langs:\n  - csharp\n  name: PropertyKind\n  nameWithType: PropertyKind\n  fullName: System.Data.Metadata.Edm.PropertyKind\n  type: Enum\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Metadata.Edm\n  summary: Specifies the kinds of item attributes in the conceptual model.\n  remarks: For more information, see [Extended Property (CSDL)](http://msdn.microsoft.com/en-us/697e2fb1-8977-4aa6-a1ef-236950e91fd1).\n  example:\n  - \"The following code sample demonstrates how to get a metadata workspace from the connection and then use that metadata workspace to retrieve information about the extended properties in the specified data model. Note that the metadata workspace is a runtime service component that provides support for retrieving metadata.  \\n  \\n The code sample uses a <xref:System.Data.Metadata.Edm.DataSpace.CSpace> to specify the model. The <xref:System.Data.Metadata.Edm.DataSpace.CSpace> represents the default name for the conceptual model. The code sample uses the AdventureWorks Model that is provided in the [AdventureWorks Model (EDM)](http://msdn.microsoft.com/en-us/da87d29e-8c89-4310-bbac-5cbd062930a7)topic. For an example of the application config file, see [AdventureWorks Object Model in Applications (EDM)](http://msdn.microsoft.com/en-us/84c01270-90ba-467b-ad24-df10c1ca8f45).  \\n  \\n```csharp  \\nusing System;  \\nusing System.Data;  \\nusing System.Data.EntityClient;  \\nusing System.Collections.ObjectModel;  \\nusing System.Data.Metadata.Edm;  \\n  \\nclass UsePropertyKindExample  \\n{  \\n   static void Main(string[] args)  \\n   {  \\n     try  \\n     {  \\n       // Establish a connection to the underlying data provider by   \\n       // using the connection string specified in the config file.  \\n       using (EntityConnection connection =  \\n           new EntityConnection(\\\"Name=AdventureworksContext\\\"))  \\n       {  \\n          // Open the connection.  \\n          connection.Open();  \\n  \\n          // Access the metadata workspace.  \\n          MetadataWorkspace workspace =   \\n             connection.GetMetadataWorkspace();  \\n  \\n          // Display the extended properties in the conceptual model.  \\n          DisplayProperties(workspace, DataSpace.CSpace);  \\n       }  \\n     }  \\n     catch (MetadataException exceptionMetadata)  \\n     {  \\n         Console.WriteLine(\\\"MetadataException: {0}\\\",  \\n                         exceptionMetadata.Message);  \\n     }  \\n     catch (System.Data.MappingException exceptionMapping)  \\n     {  \\n         Console.WriteLine(\\\"MappingException: {0}\\\",  \\n                          exceptionMapping.Message);  \\n     }  \\n   }  \\n  \\n   public static void DisplayProperties(  \\n        MetadataWorkspace workspace, DataSpace model)  \\n   {  \\n      // Get a collection of the entity containers.  \\n      ReadOnlyCollection<EntityContainer> containers =  \\n          workspace.GetItems<EntityContainer>(model);  \\n  \\n      // Iterate through the collection to get each entity container.  \\n      foreach (EntityContainer container in containers)  \\n      {  \\n          // Display the extended properties for the entity container.  \\n          DisplayExtendedProperties(container);  \\n  \\n          // Iterate through the collection to get each entity set.  \\n          foreach (EntitySetBase baseSet in container.BaseEntitySets)  \\n          {  \\n              // Check whether this instance is an EntitySet.  \\n              if (baseSet is EntitySet)  \\n              {  \\n                 // Display the extended properties for the entity set.  \\n                 DisplayExtendedProperties(baseSet);  \\n              }  \\n          }  \\n      }  \\n  \\n      // Get a collection of the entity types.  \\n      ReadOnlyCollection<EntityType> entities =   \\n             workspace.GetItems<EntityType>(model);  \\n  \\n      // Iterate through the collection to get each entity type.  \\n      foreach (EntityType entity in entities)  \\n      {  \\n         // Display the extended properties for the entity type.  \\n         DisplayExtendedProperties(entity);  \\n      }  \\n   }  \\n  \\n   private static void DisplayExtendedProperties(MetadataItem item)  \\n   {  \\n     foreach (MetadataProperty property in item.MetadataProperties)  \\n     {  \\n         if (property.PropertyKind == PropertyKind.Extended)  \\n           Console.WriteLine(string.Format(\\\"\\\\t{0}\\\\t{1}\\\\t{2}\\\",   \\n             item.GetType().Name, property.Name, property.Value));  \\n     }  \\n   }  \\n}  \\n```\"\n  syntax:\n    content: public enum PropertyKind\n  inheritance:\n  - System.Object\n  - System.ValueType\n  - System.Enum\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Metadata.Edm/PropertyKind.xml\n  ms.technology:\n  - dotnet-ado\n  author: JennieHubbard\n  ms.author: jhubbard\n  manager: jhubbard\n- uid: System.Data.Metadata.Edm.PropertyKind.Extended\n  commentId: F:System.Data.Metadata.Edm.PropertyKind.Extended\n  id: Extended\n  parent: System.Data.Metadata.Edm.PropertyKind\n  langs:\n  - csharp\n  name: Extended\n  nameWithType: PropertyKind.Extended\n  fullName: PropertyKind.Extended\n  type: Field\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Metadata.Edm\n  summary: An enumeration member indicating that an item attribute is <code>Extended</code>.\n  syntax:\n    content: Extended\n    return:\n      type: System.Data.Metadata.Edm.PropertyKind\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Metadata.Edm/PropertyKind.xml\n- uid: System.Data.Metadata.Edm.PropertyKind.System\n  commentId: F:System.Data.Metadata.Edm.PropertyKind.System\n  id: System\n  parent: System.Data.Metadata.Edm.PropertyKind\n  langs:\n  - csharp\n  name: System\n  nameWithType: PropertyKind.System\n  fullName: PropertyKind.System\n  type: Field\n  assemblies:\n  - System.Data.Entity\n  namespace: System.Data.Metadata.Edm\n  summary: An enumeration member indicating that an item attribute is <code>System</code>.\n  syntax:\n    content: System\n    return:\n      type: System.Data.Metadata.Edm.PropertyKind\n      description: ''\n  exceptions: []\n  version:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  monikers:\n  - netframework-4.5.1\n  - netframework-4.5.2\n  - netframework-4.5\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Data.Metadata.Edm/PropertyKind.xml\nreferences:\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  nameWithType: Enum\n  fullName: System.Enum\n- uid: System.Data.Metadata.Edm.PropertyKind.Extended\n  parent: System.Data.Metadata.Edm.PropertyKind\n  isExternal: false\n  name: Extended\n  nameWithType: PropertyKind.Extended\n  fullName: PropertyKind.Extended\n- uid: System.Data.Metadata.Edm.PropertyKind\n  parent: System.Data.Metadata.Edm\n  isExternal: false\n  name: PropertyKind\n  nameWithType: PropertyKind\n  fullName: System.Data.Metadata.Edm.PropertyKind\n- uid: System.Data.Metadata.Edm.PropertyKind.System\n  parent: System.Data.Metadata.Edm.PropertyKind\n  isExternal: false\n  name: System\n  nameWithType: PropertyKind.System\n  fullName: PropertyKind.System\n"}