{"nodes":[{"content":"Provides convenience methods to for working with a safe handle for a wait handle.","nodes":[{"pos":[0,81],"content":"Provides convenience methods to for working with a safe handle for a wait handle.","nodes":[{"content":"Provides convenience methods to for working with a safe handle for a wait handle.","pos":[0,81]}]}],"pos":[674,756],"yaml":true},{"content":"The <xref:System.Threading.WaitHandleExtensions> class includes two extension methods that allow you to create a safe handle for a wait handle and to retrieve the native operating system handle from a safe handle.","nodes":[{"pos":[0,213],"content":"The <xref:System.Threading.WaitHandleExtensions> class includes two extension methods that allow you to create a safe handle for a wait handle and to retrieve the native operating system handle from a safe handle.","nodes":[{"content":"The <ph id=\"ph1\">&lt;xref:System.Threading.WaitHandleExtensions&gt;</ph> class includes two extension methods that allow you to create a safe handle for a wait handle and to retrieve the native operating system handle from a safe handle.","pos":[0,213],"source":"The <xref:System.Threading.WaitHandleExtensions> class includes two extension methods that allow you to create a safe handle for a wait handle and to retrieve the native operating system handle from a safe handle."}]}],"pos":[767,981],"yaml":true,"extradata":"MT"},{"content":"Gets the safe handle for a native operating system wait handle.","nodes":[{"pos":[0,63],"content":"Gets the safe handle for a native operating system wait handle.","nodes":[{"content":"Gets the safe handle for a native operating system wait handle.","pos":[0,63]}]}],"pos":[2799,2863],"yaml":true},{"content":"<xref:System.Threading.WaitHandleExtensions.GetSafeWaitHandle%2A> is an extension method that is equivalent to retrieving the value of the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,226],"content":"<xref:System.Threading.WaitHandleExtensions.GetSafeWaitHandle%2A> is an extension method that is equivalent to retrieving the value of the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName> property.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.WaitHandleExtensions.GetSafeWaitHandle%2A&gt;</ph> is an extension method that is equivalent to retrieving the value of the <ph id=\"ph2\">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,226],"source":"<xref:System.Threading.WaitHandleExtensions.GetSafeWaitHandle%2A> is an extension method that is equivalent to retrieving the value of the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName> property."}]}],"pos":[2874,3101],"yaml":true,"extradata":"MT"},{"content":"A native operating system handle.","nodes":[{"pos":[0,33],"content":"A native operating system handle.","nodes":[{"content":"A native operating system handle.","pos":[0,33]}]}],"pos":[3393,3427],"yaml":true},{"content":"The safe wait handle that wraps the native operating system wait handle.","nodes":[{"pos":[0,72],"content":"The safe wait handle that wraps the native operating system wait handle.","nodes":[{"content":"The safe wait handle that wraps the native operating system wait handle.","pos":[0,72]}]}],"pos":[3513,3586],"yaml":true},{"content":"<code>waitHandle</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;waitHandle&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>waitHandle</code> is `null`."}],"pos":[3771,3806],"yaml":true},{"content":"Sets a safe handle for a native operating system wait handle.","nodes":[{"pos":[0,61],"content":"Sets a safe handle for a native operating system wait handle.","nodes":[{"content":"Sets a safe handle for a native operating system wait handle.","pos":[0,61]}]}],"pos":[5459,5521],"yaml":true},{"content":"<xref:System.Threading.WaitHandleExtensions.SetSafeWaitHandle%2A> is an extension method that is equivalent to assigning a value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName> property.","nodes":[{"pos":[0,223],"content":"<xref:System.Threading.WaitHandleExtensions.SetSafeWaitHandle%2A> is an extension method that is equivalent to assigning a value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName> property.","nodes":[{"content":"<ph id=\"ph1\">&lt;xref:System.Threading.WaitHandleExtensions.SetSafeWaitHandle%2A&gt;</ph> is an extension method that is equivalent to assigning a value to the <ph id=\"ph2\">&lt;xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName&gt;</ph> property.","pos":[0,223],"source":"<xref:System.Threading.WaitHandleExtensions.SetSafeWaitHandle%2A> is an extension method that is equivalent to assigning a value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName> property."}]}],"pos":[5532,5756],"yaml":true,"extradata":"MT"},{"content":"A wait handle that encapsulates an operating system-specific object that waits for exclusive access to a shared resource.","nodes":[{"pos":[0,121],"content":"A wait handle that encapsulates an operating system-specific object that waits for exclusive access to a shared resource.","nodes":[{"content":"A wait handle that encapsulates an operating system-specific object that waits for exclusive access to a shared resource.","pos":[0,121]}]}],"pos":[6060,6182],"yaml":true},{"content":"The safe handle to wrap the operating system handle.","nodes":[{"pos":[0,52],"content":"The safe handle to wrap the operating system handle.","nodes":[{"content":"The safe handle to wrap the operating system handle.","pos":[0,52]}]}],"pos":[6272,6325],"yaml":true},{"content":"<code>waitHandle</code> is `null`.","nodes":[{"pos":[0,34],"content":"<ph id=\"ph1\">&lt;code&gt;waitHandle&lt;/code&gt;</ph> is <ph id=\"ph2\">`null`</ph>.","source":"<code>waitHandle</code> is `null`."}],"pos":[6510,6545],"yaml":true}],"content":"### YamlMime:ManagedReference\nitems:\n- uid: System.Threading.WaitHandleExtensions\n  commentId: T:System.Threading.WaitHandleExtensions\n  id: WaitHandleExtensions\n  children:\n  - System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  - System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  langs:\n  - csharp\n  name: WaitHandleExtensions\n  nameWithType: WaitHandleExtensions\n  fullName: System.Threading.WaitHandleExtensions\n  type: Class\n  assemblies:\n  - System.Runtime.Handles\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Provides convenience methods to for working with a safe handle for a wait handle.\n  remarks: The <xref:System.Threading.WaitHandleExtensions> class includes two extension methods that allow you to create a safe handle for a wait handle and to retrieve the native operating system handle from a safe handle.\n  syntax:\n    content: public static class WaitHandleExtensions\n  inheritance:\n  - System.Object\n  implements: []\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  commentId: M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  id: GetSafeWaitHandle(System.Threading.WaitHandle)\n  parent: System.Threading.WaitHandleExtensions\n  langs:\n  - csharp\n  name: GetSafeWaitHandle(WaitHandle)\n  nameWithType: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)\n  fullName: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)\n  type: Method\n  assemblies:\n  - System.Runtime.Handles\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Gets the safe handle for a native operating system wait handle.\n  remarks: <xref:System.Threading.WaitHandleExtensions.GetSafeWaitHandle%2A> is an extension method that is equivalent to retrieving the value of the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName> property.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public static Microsoft.Win32.SafeHandles.SafeWaitHandle GetSafeWaitHandle (this System.Threading.WaitHandle waitHandle);\n    parameters:\n    - id: waitHandle\n      type: System.Threading.WaitHandle\n      description: A native operating system handle.\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeWaitHandle\n      description: The safe wait handle that wraps the native operating system wait handle.\n  overload: System.Threading.WaitHandleExtensions.GetSafeWaitHandle*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>waitHandle</code> is `null`.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\n- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  commentId: M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  id: SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  parent: System.Threading.WaitHandleExtensions\n  langs:\n  - csharp\n  name: SetSafeWaitHandle(WaitHandle, SafeWaitHandle)\n  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)\n  fullName: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)\n  type: Method\n  assemblies:\n  - System.Runtime.Handles\n  - mscorlib\n  - netstandard\n  - System.Runtime\n  namespace: System.Threading\n  summary: Sets a safe handle for a native operating system wait handle.\n  remarks: <xref:System.Threading.WaitHandleExtensions.SetSafeWaitHandle%2A> is an extension method that is equivalent to assigning a value to the <xref:System.Threading.WaitHandle.SafeWaitHandle%2A?displayProperty=fullName> property.\n  syntax:\n    content: >-\n      [System.Security.SecurityCritical]\n\n      public static void SetSafeWaitHandle (this System.Threading.WaitHandle waitHandle, Microsoft.Win32.SafeHandles.SafeWaitHandle value);\n    parameters:\n    - id: waitHandle\n      type: System.Threading.WaitHandle\n      description: A wait handle that encapsulates an operating system-specific object that waits for exclusive access to a shared resource.\n    - id: value\n      type: Microsoft.Win32.SafeHandles.SafeWaitHandle\n      description: The safe handle to wrap the operating system handle.\n  overload: System.Threading.WaitHandleExtensions.SetSafeWaitHandle*\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: <code>waitHandle</code> is `null`.\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n  version:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleExtensions.xml\n  ms.technology:\n  - dotnet-standard\n  author: rpetrusha\n  ms.author: ronpet\n  manager: wpickett\nreferences:\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.ArgumentNullException\n  parent: System\n  isExternal: false\n  name: ArgumentNullException\n  nameWithType: ArgumentNullException\n  fullName: System.ArgumentNullException\n- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  parent: System.Threading.WaitHandleExtensions\n  isExternal: false\n  name: GetSafeWaitHandle(WaitHandle)\n  nameWithType: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)\n  fullName: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)\n- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeWaitHandle\n  nameWithType: SafeWaitHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  nameWithType: WaitHandle\n  fullName: System.Threading.WaitHandle\n- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  parent: System.Threading.WaitHandleExtensions\n  isExternal: false\n  name: SetSafeWaitHandle(WaitHandle, SafeWaitHandle)\n  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)\n  fullName: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)\n- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle*\n  parent: System.Threading.WaitHandleExtensions\n  isExternal: false\n  name: GetSafeWaitHandle\n  nameWithType: WaitHandleExtensions.GetSafeWaitHandle\n  fullName: WaitHandleExtensions.GetSafeWaitHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleExtensions.xml\n- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle*\n  parent: System.Threading.WaitHandleExtensions\n  isExternal: false\n  name: SetSafeWaitHandle\n  nameWithType: WaitHandleExtensions.SetSafeWaitHandle\n  fullName: WaitHandleExtensions.SetSafeWaitHandle\n  monikers:\n  - netcore-1.0\n  - netcore-1.1\n  - netcore-2.0\n  - netframework-4.6.1\n  - netframework-4.6.2\n  - netframework-4.6\n  - netframework-4.7\n  - netstandard-1.3\n  - netstandard-1.4\n  - netstandard-1.6\n  - netstandard-2.0\n  - xamarinandroid-7.1\n  - xamarinios-10.8\n  - xamarinmac-3.0\n  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading/WaitHandleExtensions.xml\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: Object.Equals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: false\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: false\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: false\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: false\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: Object.ToString()\n"}